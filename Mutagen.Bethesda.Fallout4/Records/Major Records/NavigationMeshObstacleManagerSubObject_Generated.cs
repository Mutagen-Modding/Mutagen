/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class NavigationMeshObstacleManagerSubObject :
        IEquatable<INavigationMeshObstacleManagerSubObjectGetter>,
        ILoquiObjectSetter<NavigationMeshObstacleManagerSubObject>,
        INavigationMeshObstacleManagerSubObject
    {
        #region Ctor
        public NavigationMeshObstacleManagerSubObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        public UInt32? Index { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? INavigationMeshObstacleManagerSubObjectGetter.Index => this.Index;
        #endregion
        #region DATAs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<UInt64> _DATAs = new ExtendedList<UInt64>();
        public ExtendedList<UInt64> DATAs
        {
            get => this._DATAs;
            init => this._DATAs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<UInt64> INavigationMeshObstacleManagerSubObjectGetter.DATAs => _DATAs;
        #endregion

        #endregion
        #region INTV
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _INTV;
        public MemorySlice<Byte>? INTV
        {
            get => this._INTV;
            set => this._INTV = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INavigationMeshObstacleManagerSubObjectGetter.INTV => this.INTV;
        #endregion
        #region Model
        public String? Model { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? INavigationMeshObstacleManagerSubObjectGetter.Model => this.Model;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavigationMeshObstacleManagerSubObjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INavigationMeshObstacleManagerSubObjectGetter rhs) return false;
            return ((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INavigationMeshObstacleManagerSubObjectGetter? obj)
        {
            return ((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Index = initialValue;
                this.DATAs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.INTV = initialValue;
                this.Model = initialValue;
            }

            public Mask(
                TItem Index,
                TItem DATAs,
                TItem INTV,
                TItem Model)
            {
                this.Index = Index;
                this.DATAs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(DATAs, Enumerable.Empty<(int Index, TItem Value)>());
                this.INTV = INTV;
                this.Model = Model;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Index;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? DATAs;
            public TItem INTV;
            public TItem Model;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.DATAs, rhs.DATAs)) return false;
                if (!object.Equals(this.INTV, rhs.INTV)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Index);
                hash.Add(this.DATAs);
                hash.Add(this.INTV);
                hash.Add(this.Model);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Index)) return false;
                if (this.DATAs != null)
                {
                    if (!eval(this.DATAs.Overall)) return false;
                    if (this.DATAs.Specific != null)
                    {
                        foreach (var item in this.DATAs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.INTV)) return false;
                if (!eval(this.Model)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Index)) return true;
                if (this.DATAs != null)
                {
                    if (eval(this.DATAs.Overall)) return true;
                    if (this.DATAs.Specific != null)
                    {
                        foreach (var item in this.DATAs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.INTV)) return true;
                if (eval(this.Model)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NavigationMeshObstacleManagerSubObject.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Index = eval(this.Index);
                if (DATAs != null)
                {
                    obj.DATAs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.DATAs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (DATAs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.DATAs.Specific = l;
                        foreach (var item in DATAs.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.INTV = eval(this.INTV);
                obj.Model = eval(this.Model);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NavigationMeshObstacleManagerSubObject.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NavigationMeshObstacleManagerSubObject.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NavigationMeshObstacleManagerSubObject.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Index ?? true)
                    {
                        sb.AppendItem(Index, "Index");
                    }
                    if ((printMask?.DATAs?.Overall ?? true)
                        && DATAs is {} DATAsItem)
                    {
                        sb.AppendLine("DATAs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(DATAsItem.Overall);
                            if (DATAsItem.Specific != null)
                            {
                                foreach (var subItem in DATAsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.INTV ?? true)
                    {
                        sb.AppendItem(INTV, "INTV");
                    }
                    if (printMask?.Model ?? true)
                    {
                        sb.AppendItem(Model, "Model");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Index;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? DATAs;
            public Exception? INTV;
            public Exception? Model;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                NavigationMeshObstacleManagerSubObject_FieldIndex enu = (NavigationMeshObstacleManagerSubObject_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMeshObstacleManagerSubObject_FieldIndex.Index:
                        return Index;
                    case NavigationMeshObstacleManagerSubObject_FieldIndex.DATAs:
                        return DATAs;
                    case NavigationMeshObstacleManagerSubObject_FieldIndex.INTV:
                        return INTV;
                    case NavigationMeshObstacleManagerSubObject_FieldIndex.Model:
                        return Model;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                NavigationMeshObstacleManagerSubObject_FieldIndex enu = (NavigationMeshObstacleManagerSubObject_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMeshObstacleManagerSubObject_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case NavigationMeshObstacleManagerSubObject_FieldIndex.DATAs:
                        this.DATAs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case NavigationMeshObstacleManagerSubObject_FieldIndex.INTV:
                        this.INTV = ex;
                        break;
                    case NavigationMeshObstacleManagerSubObject_FieldIndex.Model:
                        this.Model = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                NavigationMeshObstacleManagerSubObject_FieldIndex enu = (NavigationMeshObstacleManagerSubObject_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMeshObstacleManagerSubObject_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case NavigationMeshObstacleManagerSubObject_FieldIndex.DATAs:
                        this.DATAs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case NavigationMeshObstacleManagerSubObject_FieldIndex.INTV:
                        this.INTV = (Exception?)obj;
                        break;
                    case NavigationMeshObstacleManagerSubObject_FieldIndex.Model:
                        this.Model = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Index != null) return true;
                if (DATAs != null) return true;
                if (INTV != null) return true;
                if (Model != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Index, "Index");
                }
                if (DATAs is {} DATAsItem)
                {
                    sb.AppendLine("DATAs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(DATAsItem.Overall);
                        if (DATAsItem.Specific != null)
                        {
                            foreach (var subItem in DATAsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(INTV, "INTV");
                }
                {
                    sb.AppendItem(Model, "Model");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Index = this.Index.Combine(rhs.Index);
                ret.DATAs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.DATAs?.Overall, rhs.DATAs?.Overall), Noggog.ExceptionExt.Combine(this.DATAs?.Specific, rhs.DATAs?.Specific));
                ret.INTV = this.INTV.Combine(rhs.INTV);
                ret.Model = this.Model.Combine(rhs.Model);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Index;
            public bool DATAs;
            public bool INTV;
            public bool Model;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Index = defaultOn;
                this.DATAs = defaultOn;
                this.INTV = defaultOn;
                this.Model = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Index, null));
                ret.Add((DATAs, null));
                ret.Add((INTV, null));
                ret.Add((Model, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavigationMeshObstacleManagerSubObjectBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavigationMeshObstacleManagerSubObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static NavigationMeshObstacleManagerSubObject CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NavigationMeshObstacleManagerSubObject();
            ((NavigationMeshObstacleManagerSubObjectSetterCommon)((INavigationMeshObstacleManagerSubObjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NavigationMeshObstacleManagerSubObject item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NavigationMeshObstacleManagerSubObjectSetterCommon)((INavigationMeshObstacleManagerSubObjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static NavigationMeshObstacleManagerSubObject GetNew()
        {
            return new NavigationMeshObstacleManagerSubObject();
        }

    }
    #endregion

    #region Interface
    public partial interface INavigationMeshObstacleManagerSubObject :
        ILoquiObjectSetter<INavigationMeshObstacleManagerSubObject>,
        INavigationMeshObstacleManagerSubObjectGetter
    {
        new UInt32? Index { get; set; }
        new ExtendedList<UInt64> DATAs { get; }
        new MemorySlice<Byte>? INTV { get; set; }
        new String? Model { get; set; }
    }

    public partial interface INavigationMeshObstacleManagerSubObjectGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<INavigationMeshObstacleManagerSubObjectGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => NavigationMeshObstacleManagerSubObject_Registration.Instance;
        UInt32? Index { get; }
        IReadOnlyList<UInt64> DATAs { get; }
        ReadOnlyMemorySlice<Byte>? INTV { get; }
        String? Model { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NavigationMeshObstacleManagerSubObjectMixIn
    {
        public static void Clear(this INavigationMeshObstacleManagerSubObject item)
        {
            ((NavigationMeshObstacleManagerSubObjectSetterCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NavigationMeshObstacleManagerSubObject.Mask<bool> GetEqualsMask(
            this INavigationMeshObstacleManagerSubObjectGetter item,
            INavigationMeshObstacleManagerSubObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INavigationMeshObstacleManagerSubObjectGetter item,
            string? name = null,
            NavigationMeshObstacleManagerSubObject.Mask<bool>? printMask = null)
        {
            return ((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INavigationMeshObstacleManagerSubObjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavigationMeshObstacleManagerSubObject.Mask<bool>? printMask = null)
        {
            ((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INavigationMeshObstacleManagerSubObjectGetter item,
            INavigationMeshObstacleManagerSubObjectGetter rhs,
            NavigationMeshObstacleManagerSubObject.TranslationMask? equalsMask = null)
        {
            return ((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INavigationMeshObstacleManagerSubObject lhs,
            INavigationMeshObstacleManagerSubObjectGetter rhs)
        {
            ((NavigationMeshObstacleManagerSubObjectSetterTranslationCommon)((INavigationMeshObstacleManagerSubObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavigationMeshObstacleManagerSubObject lhs,
            INavigationMeshObstacleManagerSubObjectGetter rhs,
            NavigationMeshObstacleManagerSubObject.TranslationMask? copyMask = null)
        {
            ((NavigationMeshObstacleManagerSubObjectSetterTranslationCommon)((INavigationMeshObstacleManagerSubObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this INavigationMeshObstacleManagerSubObject lhs,
            INavigationMeshObstacleManagerSubObjectGetter rhs,
            out NavigationMeshObstacleManagerSubObject.ErrorMask errorMask,
            NavigationMeshObstacleManagerSubObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NavigationMeshObstacleManagerSubObjectSetterTranslationCommon)((INavigationMeshObstacleManagerSubObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NavigationMeshObstacleManagerSubObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INavigationMeshObstacleManagerSubObject lhs,
            INavigationMeshObstacleManagerSubObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NavigationMeshObstacleManagerSubObjectSetterTranslationCommon)((INavigationMeshObstacleManagerSubObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NavigationMeshObstacleManagerSubObject DeepCopy(
            this INavigationMeshObstacleManagerSubObjectGetter item,
            NavigationMeshObstacleManagerSubObject.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshObstacleManagerSubObjectSetterTranslationCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NavigationMeshObstacleManagerSubObject DeepCopy(
            this INavigationMeshObstacleManagerSubObjectGetter item,
            out NavigationMeshObstacleManagerSubObject.ErrorMask errorMask,
            NavigationMeshObstacleManagerSubObject.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshObstacleManagerSubObjectSetterTranslationCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NavigationMeshObstacleManagerSubObject DeepCopy(
            this INavigationMeshObstacleManagerSubObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NavigationMeshObstacleManagerSubObjectSetterTranslationCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this INavigationMeshObstacleManagerSubObject item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NavigationMeshObstacleManagerSubObjectSetterCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum NavigationMeshObstacleManagerSubObject_FieldIndex
    {
        Index = 0,
        DATAs = 1,
        INTV = 2,
        Model = 3,
    }
    #endregion

    #region Registration
    internal partial class NavigationMeshObstacleManagerSubObject_Registration : ILoquiRegistration
    {
        public static readonly NavigationMeshObstacleManagerSubObject_Registration Instance = new NavigationMeshObstacleManagerSubObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(NavigationMeshObstacleManagerSubObject.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NavigationMeshObstacleManagerSubObject.ErrorMask);

        public static readonly Type ClassType = typeof(NavigationMeshObstacleManagerSubObject);

        public static readonly Type GetterType = typeof(INavigationMeshObstacleManagerSubObjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INavigationMeshObstacleManagerSubObject);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.NavigationMeshObstacleManagerSubObject";

        public const string Name = "NavigationMeshObstacleManagerSubObject";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.INDX,
                RecordTypes.DATA,
                RecordTypes.INTV,
                RecordTypes.NAM1);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NavigationMeshObstacleManagerSubObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NavigationMeshObstacleManagerSubObjectSetterCommon
    {
        public static readonly NavigationMeshObstacleManagerSubObjectSetterCommon Instance = new NavigationMeshObstacleManagerSubObjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INavigationMeshObstacleManagerSubObject item)
        {
            ClearPartial();
            item.Index = default;
            item.DATAs.Clear();
            item.INTV = default;
            item.Model = default;
        }
        
        #region Mutagen
        public void RemapLinks(INavigationMeshObstacleManagerSubObject obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INavigationMeshObstacleManagerSubObject item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: NavigationMeshObstacleManagerSubObjectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class NavigationMeshObstacleManagerSubObjectCommon
    {
        public static readonly NavigationMeshObstacleManagerSubObjectCommon Instance = new NavigationMeshObstacleManagerSubObjectCommon();

        public NavigationMeshObstacleManagerSubObject.Mask<bool> GetEqualsMask(
            INavigationMeshObstacleManagerSubObjectGetter item,
            INavigationMeshObstacleManagerSubObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NavigationMeshObstacleManagerSubObject.Mask<bool>(false);
            ((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INavigationMeshObstacleManagerSubObjectGetter item,
            INavigationMeshObstacleManagerSubObjectGetter rhs,
            NavigationMeshObstacleManagerSubObject.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Index = item.Index == rhs.Index;
            ret.DATAs = item.DATAs.CollectionEqualsHelper(
                rhs.DATAs,
                (l, r) => l == r,
                include);
            ret.INTV = MemorySliceExt.SequenceEqual(item.INTV, rhs.INTV);
            ret.Model = string.Equals(item.Model, rhs.Model);
        }
        
        public string Print(
            INavigationMeshObstacleManagerSubObjectGetter item,
            string? name = null,
            NavigationMeshObstacleManagerSubObject.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INavigationMeshObstacleManagerSubObjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavigationMeshObstacleManagerSubObject.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NavigationMeshObstacleManagerSubObject =>");
            }
            else
            {
                sb.AppendLine($"{name} (NavigationMeshObstacleManagerSubObject) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INavigationMeshObstacleManagerSubObjectGetter item,
            StructuredStringBuilder sb,
            NavigationMeshObstacleManagerSubObject.Mask<bool>? printMask = null)
        {
            if ((printMask?.Index ?? true)
                && item.Index is {} IndexItem)
            {
                sb.AppendItem(IndexItem, "Index");
            }
            if (printMask?.DATAs?.Overall ?? true)
            {
                sb.AppendLine("DATAs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.DATAs)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if ((printMask?.INTV ?? true)
                && item.INTV is {} INTVItem)
            {
                sb.AppendLine($"INTV => {SpanExt.ToHexString(INTVItem)}");
            }
            if ((printMask?.Model ?? true)
                && item.Model is {} ModelItem)
            {
                sb.AppendItem(ModelItem, "Model");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INavigationMeshObstacleManagerSubObjectGetter? lhs,
            INavigationMeshObstacleManagerSubObjectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)NavigationMeshObstacleManagerSubObject_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMeshObstacleManagerSubObject_FieldIndex.DATAs) ?? true))
            {
                if (!lhs.DATAs.SequenceEqualNullable(rhs.DATAs)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMeshObstacleManagerSubObject_FieldIndex.INTV) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.INTV, rhs.INTV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMeshObstacleManagerSubObject_FieldIndex.Model) ?? true))
            {
                if (!string.Equals(lhs.Model, rhs.Model)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(INavigationMeshObstacleManagerSubObjectGetter item)
        {
            var hash = new HashCode();
            if (item.Index is {} Indexitem)
            {
                hash.Add(Indexitem);
            }
            hash.Add(item.DATAs);
            if (item.INTV is {} INTVItem)
            {
                hash.Add(INTVItem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return NavigationMeshObstacleManagerSubObject.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INavigationMeshObstacleManagerSubObjectGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class NavigationMeshObstacleManagerSubObjectSetterTranslationCommon
    {
        public static readonly NavigationMeshObstacleManagerSubObjectSetterTranslationCommon Instance = new NavigationMeshObstacleManagerSubObjectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INavigationMeshObstacleManagerSubObject item,
            INavigationMeshObstacleManagerSubObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)NavigationMeshObstacleManagerSubObject_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMeshObstacleManagerSubObject_FieldIndex.DATAs) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMeshObstacleManagerSubObject_FieldIndex.DATAs);
                try
                {
                    item.DATAs.SetTo(rhs.DATAs);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMeshObstacleManagerSubObject_FieldIndex.INTV) ?? true))
            {
                if(rhs.INTV is {} INTVrhs)
                {
                    item.INTV = INTVrhs.ToArray();
                }
                else
                {
                    item.INTV = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMeshObstacleManagerSubObject_FieldIndex.Model) ?? true))
            {
                item.Model = rhs.Model;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            INavigationMeshObstacleManagerSubObject item,
            INavigationMeshObstacleManagerSubObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public NavigationMeshObstacleManagerSubObject DeepCopy(
            INavigationMeshObstacleManagerSubObjectGetter item,
            NavigationMeshObstacleManagerSubObject.TranslationMask? copyMask = null)
        {
            NavigationMeshObstacleManagerSubObject ret = (NavigationMeshObstacleManagerSubObject)((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonInstance()!).GetNew();
            ((NavigationMeshObstacleManagerSubObjectSetterTranslationCommon)((INavigationMeshObstacleManagerSubObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NavigationMeshObstacleManagerSubObject DeepCopy(
            INavigationMeshObstacleManagerSubObjectGetter item,
            out NavigationMeshObstacleManagerSubObject.ErrorMask errorMask,
            NavigationMeshObstacleManagerSubObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NavigationMeshObstacleManagerSubObject ret = (NavigationMeshObstacleManagerSubObject)((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonInstance()!).GetNew();
            ((NavigationMeshObstacleManagerSubObjectSetterTranslationCommon)((INavigationMeshObstacleManagerSubObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NavigationMeshObstacleManagerSubObject.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NavigationMeshObstacleManagerSubObject DeepCopy(
            INavigationMeshObstacleManagerSubObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NavigationMeshObstacleManagerSubObject ret = (NavigationMeshObstacleManagerSubObject)((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)item).CommonInstance()!).GetNew();
            ((NavigationMeshObstacleManagerSubObjectSetterTranslationCommon)((INavigationMeshObstacleManagerSubObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class NavigationMeshObstacleManagerSubObject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavigationMeshObstacleManagerSubObject_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NavigationMeshObstacleManagerSubObject_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavigationMeshObstacleManagerSubObjectCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return NavigationMeshObstacleManagerSubObjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavigationMeshObstacleManagerSubObjectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavigationMeshObstacleManagerSubObjectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object INavigationMeshObstacleManagerSubObjectGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object INavigationMeshObstacleManagerSubObjectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class NavigationMeshObstacleManagerSubObjectBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly NavigationMeshObstacleManagerSubObjectBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            INavigationMeshObstacleManagerSubObjectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: translationParams.ConvertToCustom(RecordTypes.INDX));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<UInt64>.Instance.WritePerItem(
                writer: writer,
                items: item.DATAs,
                recordType: translationParams.ConvertToCustom(RecordTypes.DATA),
                transl: UInt64BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.INTV,
                header: translationParams.ConvertToCustom(RecordTypes.INTV));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Model,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            INavigationMeshObstacleManagerSubObjectGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INavigationMeshObstacleManagerSubObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NavigationMeshObstacleManagerSubObjectBinaryCreateTranslation
    {
        public static readonly NavigationMeshObstacleManagerSubObjectBinaryCreateTranslation Instance = new NavigationMeshObstacleManagerSubObjectBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            INavigationMeshObstacleManagerSubObject item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.INDX:
                {
                    if (lastParsed.ShortCircuit((int)NavigationMeshObstacleManagerSubObject_FieldIndex.Index, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt32();
                    return (int)NavigationMeshObstacleManagerSubObject_FieldIndex.Index;
                }
                case RecordTypeInts.DATA:
                {
                    if (lastParsed.ShortCircuit((int)NavigationMeshObstacleManagerSubObject_FieldIndex.DATAs, translationParams)) return ParseResult.Stop;
                    item.DATAs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<UInt64>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.DATA),
                            transl: UInt64BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse));
                    return (int)NavigationMeshObstacleManagerSubObject_FieldIndex.DATAs;
                }
                case RecordTypeInts.INTV:
                {
                    if (lastParsed.ShortCircuit((int)NavigationMeshObstacleManagerSubObject_FieldIndex.INTV, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.INTV = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)NavigationMeshObstacleManagerSubObject_FieldIndex.INTV;
                }
                case RecordTypeInts.NAM1:
                {
                    if (lastParsed.ShortCircuit((int)NavigationMeshObstacleManagerSubObject_FieldIndex.Model, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Model = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)NavigationMeshObstacleManagerSubObject_FieldIndex.Model;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NavigationMeshObstacleManagerSubObjectBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this INavigationMeshObstacleManagerSubObjectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavigationMeshObstacleManagerSubObjectBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class NavigationMeshObstacleManagerSubObjectBinaryOverlay :
        PluginBinaryOverlay,
        INavigationMeshObstacleManagerSubObjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavigationMeshObstacleManagerSubObject_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => NavigationMeshObstacleManagerSubObject_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => NavigationMeshObstacleManagerSubObjectCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => NavigationMeshObstacleManagerSubObjectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object INavigationMeshObstacleManagerSubObjectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? INavigationMeshObstacleManagerSubObjectGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object INavigationMeshObstacleManagerSubObjectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => NavigationMeshObstacleManagerSubObjectBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavigationMeshObstacleManagerSubObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Index
        private int? _IndexLocation;
        public UInt32? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        public IReadOnlyList<UInt64> DATAs { get; private set; } = [];
        #region INTV
        private int? _INTVLocation;
        public ReadOnlyMemorySlice<Byte>? INTV => _INTVLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _INTVLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Model
        private int? _ModelLocation;
        public String? Model => _ModelLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ModelLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NavigationMeshObstacleManagerSubObjectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INavigationMeshObstacleManagerSubObjectGetter NavigationMeshObstacleManagerSubObjectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new NavigationMeshObstacleManagerSubObjectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static INavigationMeshObstacleManagerSubObjectGetter NavigationMeshObstacleManagerSubObjectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NavigationMeshObstacleManagerSubObjectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.INDX:
                {
                    if (lastParsed.ShortCircuit((int)NavigationMeshObstacleManagerSubObject_FieldIndex.Index, translationParams)) return ParseResult.Stop;
                    _IndexLocation = (stream.Position - offset);
                    return (int)NavigationMeshObstacleManagerSubObject_FieldIndex.Index;
                }
                case RecordTypeInts.DATA:
                {
                    if (lastParsed.ShortCircuit((int)NavigationMeshObstacleManagerSubObject_FieldIndex.DATAs, translationParams)) return ParseResult.Stop;
                    this.DATAs = BinaryOverlayList.FactoryByArray<UInt64>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => BinaryPrimitives.ReadUInt64LittleEndian(s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.DATA,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)NavigationMeshObstacleManagerSubObject_FieldIndex.DATAs;
                }
                case RecordTypeInts.INTV:
                {
                    if (lastParsed.ShortCircuit((int)NavigationMeshObstacleManagerSubObject_FieldIndex.INTV, translationParams)) return ParseResult.Stop;
                    _INTVLocation = (stream.Position - offset);
                    return (int)NavigationMeshObstacleManagerSubObject_FieldIndex.INTV;
                }
                case RecordTypeInts.NAM1:
                {
                    if (lastParsed.ShortCircuit((int)NavigationMeshObstacleManagerSubObject_FieldIndex.Model, translationParams)) return ParseResult.Stop;
                    _ModelLocation = (stream.Position - offset);
                    return (int)NavigationMeshObstacleManagerSubObject_FieldIndex.Model;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavigationMeshObstacleManagerSubObjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not INavigationMeshObstacleManagerSubObjectGetter rhs) return false;
            return ((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INavigationMeshObstacleManagerSubObjectGetter? obj)
        {
            return ((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NavigationMeshObstacleManagerSubObjectCommon)((INavigationMeshObstacleManagerSubObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

