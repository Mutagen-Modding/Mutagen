/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class StoryManagerBranchNode :
        AStoryManagerNode,
        IEquatable<IStoryManagerBranchNodeGetter>,
        ILoquiObjectSetter<StoryManagerBranchNode>,
        IStoryManagerBranchNodeInternal
    {
        #region Ctor
        protected StoryManagerBranchNode()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public AStoryManagerNode.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AStoryManagerNode.Flag? IStoryManagerBranchNodeGetter.Flags => this.Flags;
        #endregion
        #region MaxConcurrentQuests
        public UInt32? MaxConcurrentQuests { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IStoryManagerBranchNodeGetter.MaxConcurrentQuests => this.MaxConcurrentQuests;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StoryManagerBranchNodeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AStoryManagerNode.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Flags = initialValue;
                this.MaxConcurrentQuests = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem Parent,
                TItem PreviousSibling,
                TItem Conditions,
                TItem Flags,
                TItem MaxConcurrentQuests)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags,
                Parent: Parent,
                PreviousSibling: PreviousSibling,
                Conditions: Conditions)
            {
                this.Flags = Flags;
                this.MaxConcurrentQuests = MaxConcurrentQuests;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem MaxConcurrentQuests;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.MaxConcurrentQuests, rhs.MaxConcurrentQuests)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.MaxConcurrentQuests);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.MaxConcurrentQuests)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.MaxConcurrentQuests)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new StoryManagerBranchNode.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Flags = eval(this.Flags);
                obj.MaxConcurrentQuests = eval(this.MaxConcurrentQuests);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(StoryManagerBranchNode.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, StoryManagerBranchNode.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(StoryManagerBranchNode.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.MaxConcurrentQuests ?? true)
                    {
                        sb.AppendItem(MaxConcurrentQuests, "MaxConcurrentQuests");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AStoryManagerNode.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Flags;
            public Exception? MaxConcurrentQuests;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                StoryManagerBranchNode_FieldIndex enu = (StoryManagerBranchNode_FieldIndex)index;
                switch (enu)
                {
                    case StoryManagerBranchNode_FieldIndex.Flags:
                        return Flags;
                    case StoryManagerBranchNode_FieldIndex.MaxConcurrentQuests:
                        return MaxConcurrentQuests;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                StoryManagerBranchNode_FieldIndex enu = (StoryManagerBranchNode_FieldIndex)index;
                switch (enu)
                {
                    case StoryManagerBranchNode_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case StoryManagerBranchNode_FieldIndex.MaxConcurrentQuests:
                        this.MaxConcurrentQuests = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                StoryManagerBranchNode_FieldIndex enu = (StoryManagerBranchNode_FieldIndex)index;
                switch (enu)
                {
                    case StoryManagerBranchNode_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case StoryManagerBranchNode_FieldIndex.MaxConcurrentQuests:
                        this.MaxConcurrentQuests = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (MaxConcurrentQuests != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(MaxConcurrentQuests, "MaxConcurrentQuests");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.MaxConcurrentQuests = this.MaxConcurrentQuests.Combine(rhs.MaxConcurrentQuests);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AStoryManagerNode.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Flags;
            public bool MaxConcurrentQuests;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Flags = defaultOn;
                this.MaxConcurrentQuests = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Flags, null));
                ret.Add((MaxConcurrentQuests, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = StoryManagerBranchNode_Registration.TriggeringRecordType;
        public StoryManagerBranchNode(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private StoryManagerBranchNode(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal StoryManagerBranchNode(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public StoryManagerBranchNode(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public StoryManagerBranchNode(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<StoryManagerBranchNode>.ToString(this);
        }

        protected override Type LinkType => typeof(IStoryManagerBranchNode);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IStoryManagerBranchNodeGetter rhs) return false;
            return ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStoryManagerBranchNodeGetter? obj)
        {
            return ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StoryManagerBranchNodeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StoryManagerBranchNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static StoryManagerBranchNode CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new StoryManagerBranchNode();
            ((StoryManagerBranchNodeSetterCommon)((IStoryManagerBranchNodeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out StoryManagerBranchNode item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((StoryManagerBranchNodeSetterCommon)((IStoryManagerBranchNodeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new StoryManagerBranchNode GetNew()
        {
            return new StoryManagerBranchNode();
        }

    }
    #endregion

    #region Interface
    public partial interface IStoryManagerBranchNode :
        IAStoryManagerNodeInternal,
        ILoquiObjectSetter<IStoryManagerBranchNodeInternal>,
        IStoryManagerBranchNodeGetter
    {
        new AStoryManagerNode.Flag? Flags { get; set; }
        new UInt32? MaxConcurrentQuests { get; set; }
    }

    public partial interface IStoryManagerBranchNodeInternal :
        IAStoryManagerNodeInternal,
        IStoryManagerBranchNode,
        IStoryManagerBranchNodeGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.SMBN)]
    public partial interface IStoryManagerBranchNodeGetter :
        IAStoryManagerNodeGetter,
        IBinaryItem,
        ILoquiObject<IStoryManagerBranchNodeGetter>,
        IMapsToGetter<IStoryManagerBranchNodeGetter>
    {
        static new ILoquiRegistration StaticRegistration => StoryManagerBranchNode_Registration.Instance;
        AStoryManagerNode.Flag? Flags { get; }
        UInt32? MaxConcurrentQuests { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class StoryManagerBranchNodeMixIn
    {
        public static void Clear(this IStoryManagerBranchNodeInternal item)
        {
            ((StoryManagerBranchNodeSetterCommon)((IStoryManagerBranchNodeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static StoryManagerBranchNode.Mask<bool> GetEqualsMask(
            this IStoryManagerBranchNodeGetter item,
            IStoryManagerBranchNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IStoryManagerBranchNodeGetter item,
            string? name = null,
            StoryManagerBranchNode.Mask<bool>? printMask = null)
        {
            return ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IStoryManagerBranchNodeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StoryManagerBranchNode.Mask<bool>? printMask = null)
        {
            ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStoryManagerBranchNodeGetter item,
            IStoryManagerBranchNodeGetter rhs,
            StoryManagerBranchNode.TranslationMask? equalsMask = null)
        {
            return ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IStoryManagerBranchNodeInternal lhs,
            IStoryManagerBranchNodeGetter rhs,
            out StoryManagerBranchNode.ErrorMask errorMask,
            StoryManagerBranchNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StoryManagerBranchNodeSetterTranslationCommon)((IStoryManagerBranchNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = StoryManagerBranchNode.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStoryManagerBranchNodeInternal lhs,
            IStoryManagerBranchNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StoryManagerBranchNodeSetterTranslationCommon)((IStoryManagerBranchNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static StoryManagerBranchNode DeepCopy(
            this IStoryManagerBranchNodeGetter item,
            StoryManagerBranchNode.TranslationMask? copyMask = null)
        {
            return ((StoryManagerBranchNodeSetterTranslationCommon)((IStoryManagerBranchNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static StoryManagerBranchNode DeepCopy(
            this IStoryManagerBranchNodeGetter item,
            out StoryManagerBranchNode.ErrorMask errorMask,
            StoryManagerBranchNode.TranslationMask? copyMask = null)
        {
            return ((StoryManagerBranchNodeSetterTranslationCommon)((IStoryManagerBranchNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static StoryManagerBranchNode DeepCopy(
            this IStoryManagerBranchNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StoryManagerBranchNodeSetterTranslationCommon)((IStoryManagerBranchNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static StoryManagerBranchNode Duplicate(
            this IStoryManagerBranchNodeGetter item,
            FormKey formKey,
            StoryManagerBranchNode.TranslationMask? copyMask = null)
        {
            return ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static StoryManagerBranchNode Duplicate(
            this IStoryManagerBranchNodeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStoryManagerBranchNodeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((StoryManagerBranchNodeSetterCommon)((IStoryManagerBranchNodeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum StoryManagerBranchNode_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        Parent = 7,
        PreviousSibling = 8,
        Conditions = 9,
        Flags = 10,
        MaxConcurrentQuests = 11,
    }
    #endregion

    #region Registration
    internal partial class StoryManagerBranchNode_Registration : ILoquiRegistration
    {
        public static readonly StoryManagerBranchNode_Registration Instance = new StoryManagerBranchNode_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(StoryManagerBranchNode.Mask<>);

        public static readonly Type ErrorMaskType = typeof(StoryManagerBranchNode.ErrorMask);

        public static readonly Type ClassType = typeof(StoryManagerBranchNode);

        public static readonly Type GetterType = typeof(IStoryManagerBranchNodeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStoryManagerBranchNode);

        public static readonly Type? InternalSetterType = typeof(IStoryManagerBranchNodeInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.StoryManagerBranchNode";

        public const string Name = "StoryManagerBranchNode";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SMBN;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SMBN);
            var all = RecordCollection.Factory(
                RecordTypes.SMBN,
                RecordTypes.DNAM,
                RecordTypes.XNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(StoryManagerBranchNodeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class StoryManagerBranchNodeSetterCommon : AStoryManagerNodeSetterCommon
    {
        public new static readonly StoryManagerBranchNodeSetterCommon Instance = new StoryManagerBranchNodeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStoryManagerBranchNodeInternal item)
        {
            ClearPartial();
            item.Flags = default;
            item.MaxConcurrentQuests = default;
            base.Clear(item);
        }
        
        public override void Clear(IAStoryManagerNodeInternal item)
        {
            Clear(item: (IStoryManagerBranchNodeInternal)item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IStoryManagerBranchNodeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IStoryManagerBranchNodeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IStoryManagerBranchNode obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStoryManagerBranchNodeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IStoryManagerBranchNodeInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: StoryManagerBranchNodeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: StoryManagerBranchNodeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAStoryManagerNodeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (StoryManagerBranchNode)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (StoryManagerBranchNode)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (StoryManagerBranchNode)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class StoryManagerBranchNodeCommon : AStoryManagerNodeCommon
    {
        public new static readonly StoryManagerBranchNodeCommon Instance = new StoryManagerBranchNodeCommon();

        public StoryManagerBranchNode.Mask<bool> GetEqualsMask(
            IStoryManagerBranchNodeGetter item,
            IStoryManagerBranchNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new StoryManagerBranchNode.Mask<bool>(false);
            ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStoryManagerBranchNodeGetter item,
            IStoryManagerBranchNodeGetter rhs,
            StoryManagerBranchNode.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Flags = item.Flags == rhs.Flags;
            ret.MaxConcurrentQuests = item.MaxConcurrentQuests == rhs.MaxConcurrentQuests;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IStoryManagerBranchNodeGetter item,
            string? name = null,
            StoryManagerBranchNode.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IStoryManagerBranchNodeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StoryManagerBranchNode.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"StoryManagerBranchNode =>");
            }
            else
            {
                sb.AppendLine($"{name} (StoryManagerBranchNode) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IStoryManagerBranchNodeGetter item,
            StructuredStringBuilder sb,
            StoryManagerBranchNode.Mask<bool>? printMask = null)
        {
            AStoryManagerNodeCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.MaxConcurrentQuests ?? true)
                && item.MaxConcurrentQuests is {} MaxConcurrentQuestsItem)
            {
                sb.AppendItem(MaxConcurrentQuestsItem, "MaxConcurrentQuests");
            }
        }
        
        public static StoryManagerBranchNode_FieldIndex ConvertFieldIndex(AStoryManagerNode_FieldIndex index)
        {
            switch (index)
            {
                case AStoryManagerNode_FieldIndex.MajorRecordFlagsRaw:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.FormKey:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.VersionControl:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.EditorID:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.FormVersion:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.Version2:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.Fallout4MajorRecordFlags:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.Parent:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.PreviousSibling:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case AStoryManagerNode_FieldIndex.Conditions:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new StoryManagerBranchNode_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new StoryManagerBranchNode_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (StoryManagerBranchNode_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStoryManagerBranchNodeGetter? lhs,
            IStoryManagerBranchNodeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAStoryManagerNodeGetter)lhs, (IAStoryManagerNodeGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)StoryManagerBranchNode_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StoryManagerBranchNode_FieldIndex.MaxConcurrentQuests) ?? true))
            {
                if (lhs.MaxConcurrentQuests != rhs.MaxConcurrentQuests) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAStoryManagerNodeGetter? lhs,
            IAStoryManagerNodeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IStoryManagerBranchNodeGetter?)lhs,
                rhs: rhs as IStoryManagerBranchNodeGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IStoryManagerBranchNodeGetter?)lhs,
                rhs: rhs as IStoryManagerBranchNodeGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IStoryManagerBranchNodeGetter?)lhs,
                rhs: rhs as IStoryManagerBranchNodeGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IStoryManagerBranchNodeGetter item)
        {
            var hash = new HashCode();
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.MaxConcurrentQuests is {} MaxConcurrentQuestsitem)
            {
                hash.Add(MaxConcurrentQuestsitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAStoryManagerNodeGetter item)
        {
            return GetHashCode(item: (IStoryManagerBranchNodeGetter)item);
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IStoryManagerBranchNodeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IStoryManagerBranchNodeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return StoryManagerBranchNode.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IStoryManagerBranchNodeGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public StoryManagerBranchNode Duplicate(
            IStoryManagerBranchNodeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new StoryManagerBranchNode(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override AStoryManagerNode Duplicate(
            IAStoryManagerNodeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IStoryManagerBranchNodeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IStoryManagerBranchNodeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IStoryManagerBranchNodeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class StoryManagerBranchNodeSetterTranslationCommon : AStoryManagerNodeSetterTranslationCommon
    {
        public new static readonly StoryManagerBranchNodeSetterTranslationCommon Instance = new StoryManagerBranchNodeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStoryManagerBranchNodeInternal item,
            IStoryManagerBranchNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IStoryManagerBranchNode item,
            IStoryManagerBranchNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAStoryManagerNode)item,
                (IAStoryManagerNodeGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)StoryManagerBranchNode_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)StoryManagerBranchNode_FieldIndex.MaxConcurrentQuests) ?? true))
            {
                item.MaxConcurrentQuests = rhs.MaxConcurrentQuests;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IStoryManagerBranchNode item,
            IStoryManagerBranchNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IAStoryManagerNodeInternal item,
            IAStoryManagerNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStoryManagerBranchNodeInternal)item,
                rhs: (IStoryManagerBranchNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAStoryManagerNode item,
            IAStoryManagerNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStoryManagerBranchNode)item,
                rhs: (IStoryManagerBranchNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStoryManagerBranchNodeInternal)item,
                rhs: (IStoryManagerBranchNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStoryManagerBranchNode)item,
                rhs: (IStoryManagerBranchNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStoryManagerBranchNodeInternal)item,
                rhs: (IStoryManagerBranchNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStoryManagerBranchNode)item,
                rhs: (IStoryManagerBranchNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public StoryManagerBranchNode DeepCopy(
            IStoryManagerBranchNodeGetter item,
            StoryManagerBranchNode.TranslationMask? copyMask = null)
        {
            StoryManagerBranchNode ret = (StoryManagerBranchNode)((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)item).CommonInstance()!).GetNew();
            ((StoryManagerBranchNodeSetterTranslationCommon)((IStoryManagerBranchNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public StoryManagerBranchNode DeepCopy(
            IStoryManagerBranchNodeGetter item,
            out StoryManagerBranchNode.ErrorMask errorMask,
            StoryManagerBranchNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            StoryManagerBranchNode ret = (StoryManagerBranchNode)((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)item).CommonInstance()!).GetNew();
            ((StoryManagerBranchNodeSetterTranslationCommon)((IStoryManagerBranchNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = StoryManagerBranchNode.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public StoryManagerBranchNode DeepCopy(
            IStoryManagerBranchNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            StoryManagerBranchNode ret = (StoryManagerBranchNode)((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)item).CommonInstance()!).GetNew();
            ((StoryManagerBranchNodeSetterTranslationCommon)((IStoryManagerBranchNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class StoryManagerBranchNode
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StoryManagerBranchNode_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => StoryManagerBranchNode_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StoryManagerBranchNodeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return StoryManagerBranchNodeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StoryManagerBranchNodeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class StoryManagerBranchNodeBinaryWriteTranslation :
        AStoryManagerNodeBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly StoryManagerBranchNodeBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IStoryManagerBranchNodeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            AStoryManagerNodeBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            EnumBinaryTranslation<AStoryManagerNode.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MaxConcurrentQuests,
                header: translationParams.ConvertToCustom(RecordTypes.XNAM));
        }

        public void Write(
            MutagenWriter writer,
            IStoryManagerBranchNodeGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SMBN,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IStoryManagerBranchNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAStoryManagerNodeGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IStoryManagerBranchNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IStoryManagerBranchNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IStoryManagerBranchNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class StoryManagerBranchNodeBinaryCreateTranslation : AStoryManagerNodeBinaryCreateTranslation
    {
        public new static readonly StoryManagerBranchNodeBinaryCreateTranslation Instance = new StoryManagerBranchNodeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SMBN;
        public static ParseResult FillBinaryRecordTypes(
            IStoryManagerBranchNodeInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<AStoryManagerNode.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)StoryManagerBranchNode_FieldIndex.Flags;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaxConcurrentQuests = frame.ReadUInt32();
                    return (int)StoryManagerBranchNode_FieldIndex.MaxConcurrentQuests;
                }
                default:
                    return AStoryManagerNodeBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class StoryManagerBranchNodeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class StoryManagerBranchNodeBinaryOverlay :
        AStoryManagerNodeBinaryOverlay,
        IStoryManagerBranchNodeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StoryManagerBranchNode_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => StoryManagerBranchNode_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StoryManagerBranchNodeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StoryManagerBranchNodeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StoryManagerBranchNodeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StoryManagerBranchNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IStoryManagerBranchNode);


        #region Flags
        private int? _FlagsLocation;
        public AStoryManagerNode.Flag? Flags => _FlagsLocation.HasValue ? (AStoryManagerNode.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(AStoryManagerNode.Flag?);
        #endregion
        #region MaxConcurrentQuests
        private int? _MaxConcurrentQuestsLocation;
        public UInt32? MaxConcurrentQuests => _MaxConcurrentQuestsLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaxConcurrentQuestsLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected StoryManagerBranchNodeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IStoryManagerBranchNodeGetter StoryManagerBranchNodeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new StoryManagerBranchNodeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IStoryManagerBranchNodeGetter StoryManagerBranchNodeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return StoryManagerBranchNodeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)StoryManagerBranchNode_FieldIndex.Flags;
                }
                case RecordTypeInts.XNAM:
                {
                    _MaxConcurrentQuestsLocation = (stream.Position - offset);
                    return (int)StoryManagerBranchNode_FieldIndex.MaxConcurrentQuests;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StoryManagerBranchNodeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<StoryManagerBranchNode>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IStoryManagerBranchNodeGetter rhs) return false;
            return ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStoryManagerBranchNodeGetter? obj)
        {
            return ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StoryManagerBranchNodeCommon)((IStoryManagerBranchNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

