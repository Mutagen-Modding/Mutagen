/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class EffectShader :
        Fallout4MajorRecord,
        IEffectShaderInternal,
        IEquatable<IEffectShaderGetter>,
        ILoquiObjectSetter<EffectShader>
    {
        #region Ctor
        protected EffectShader()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FillTexture
        public String? FillTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IEffectShaderGetter.FillTexture => this.FillTexture;
        #endregion
        #region ParticleShaderTexture
        public String? ParticleShaderTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IEffectShaderGetter.ParticleShaderTexture => this.ParticleShaderTexture;
        #endregion
        #region HolesTexture
        public String? HolesTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IEffectShaderGetter.HolesTexture => this.HolesTexture;
        #endregion
        #region MembranePaletteTexture
        public String? MembranePaletteTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IEffectShaderGetter.MembranePaletteTexture => this.MembranePaletteTexture;
        #endregion
        #region ParticlePaletteTexture
        public String? ParticlePaletteTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IEffectShaderGetter.ParticlePaletteTexture => this.ParticlePaletteTexture;
        #endregion
        #region DATA
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DATA;
        public MemorySlice<Byte>? DATA
        {
            get => this._DATA;
            set => this._DATA = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IEffectShaderGetter.DATA => this.DATA;
        #endregion
        #region Unknown
        public Byte Unknown { get; set; } = default(Byte);
        #endregion
        #region MembraneSourceBlendMode
        public static readonly EffectShader.BlendMode MembraneSourceBlendModeDefault = BlendMode.Zero;
        public EffectShader.BlendMode MembraneSourceBlendMode { get; set; } = MembraneSourceBlendModeDefault;
        #endregion
        #region MembraneBlendOperation
        public static readonly EffectShader.BlendOperation MembraneBlendOperationDefault = BlendOperation.Add;
        public EffectShader.BlendOperation MembraneBlendOperation { get; set; } = MembraneBlendOperationDefault;
        #endregion
        #region MembraneZTest
        public static readonly EffectShader.ZTest MembraneZTestDefault = ZTest.EqualTo;
        public EffectShader.ZTest MembraneZTest { get; set; } = MembraneZTestDefault;
        #endregion
        #region FillColorKey1
        public Color FillColorKey1 { get; set; } = default(Color);
        #endregion
        #region FillAlphaFadeInTime
        public Single FillAlphaFadeInTime { get; set; } = default(Single);
        #endregion
        #region FillFullAlphaTime
        public Single FillFullAlphaTime { get; set; } = default(Single);
        #endregion
        #region FillFadeOutTime
        public Single FillFadeOutTime { get; set; } = default(Single);
        #endregion
        #region FillPersistentAlphaRatio
        public Single FillPersistentAlphaRatio { get; set; } = default(Single);
        #endregion
        #region FillAlphaPulseAmplitude
        public Single FillAlphaPulseAmplitude { get; set; } = default(Single);
        #endregion
        #region FillAlphaPulseFrequency
        public Single FillAlphaPulseFrequency { get; set; } = default(Single);
        #endregion
        #region FillTextureAnimationSpeedU
        public Single FillTextureAnimationSpeedU { get; set; } = default(Single);
        #endregion
        #region FillTextureAnimationSpeedV
        public Single FillTextureAnimationSpeedV { get; set; } = default(Single);
        #endregion
        #region EdgeEffectFallOff
        public Single EdgeEffectFallOff { get; set; } = default(Single);
        #endregion
        #region EdgeEffectColor
        public Color EdgeEffectColor { get; set; } = default(Color);
        #endregion
        #region EdgeEffectAlphaFadeInTime
        public Single EdgeEffectAlphaFadeInTime { get; set; } = default(Single);
        #endregion
        #region EdgeEffectFullAlphaTime
        public Single EdgeEffectFullAlphaTime { get; set; } = default(Single);
        #endregion
        #region EdgeEffectAlphaFadeOutTime
        public Single EdgeEffectAlphaFadeOutTime { get; set; } = default(Single);
        #endregion
        #region EdgeEffectPersistentAlphaRatio
        public Single EdgeEffectPersistentAlphaRatio { get; set; } = default(Single);
        #endregion
        #region EdgeEffectAlphaPulseAmplitude
        public Single EdgeEffectAlphaPulseAmplitude { get; set; } = default(Single);
        #endregion
        #region EdgeEffectAlphaPulseFrequency
        public Single EdgeEffectAlphaPulseFrequency { get; set; } = default(Single);
        #endregion
        #region FillFullAlphaRatio
        public Single FillFullAlphaRatio { get; set; } = default(Single);
        #endregion
        #region EdgeEffectFullAlphaRatio
        public Single EdgeEffectFullAlphaRatio { get; set; } = default(Single);
        #endregion
        #region MembraneDestBlendMode
        public static readonly EffectShader.BlendMode MembraneDestBlendModeDefault = BlendMode.Zero;
        public EffectShader.BlendMode MembraneDestBlendMode { get; set; } = MembraneDestBlendModeDefault;
        #endregion
        #region Unknown2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown2 = new byte[152];
        public MemorySlice<Byte> Unknown2
        {
            get => _Unknown2;
            set => this._Unknown2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IEffectShaderGetter.Unknown2 => this.Unknown2;
        #endregion
        #region HolesAnimationStartTime
        public Single HolesAnimationStartTime { get; set; } = default(Single);
        #endregion
        #region HolesAnimationEndTime
        public Single HolesAnimationEndTime { get; set; } = default(Single);
        #endregion
        #region HolesAnimationStartValue
        public Single HolesAnimationStartValue { get; set; } = default(Single);
        #endregion
        #region HolesAnimationEndValue
        public Single HolesAnimationEndValue { get; set; } = default(Single);
        #endregion
        #region Unknown3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown3 = new byte[44];
        public MemorySlice<Byte> Unknown3
        {
            get => _Unknown3;
            set => this._Unknown3 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IEffectShaderGetter.Unknown3 => this.Unknown3;
        #endregion
        #region AmbientSound
        private readonly IFormLink<ISoundGetter> _AmbientSound = new FormLink<ISoundGetter>();
        public IFormLink<ISoundGetter> AmbientSound
        {
            get => _AmbientSound;
            set => _AmbientSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundGetter> IEffectShaderGetter.AmbientSound => this.AmbientSound;
        #endregion
        #region FillColorKey2
        public Color FillColorKey2 { get; set; } = default(Color);
        #endregion
        #region FillColorKey3
        public Color FillColorKey3 { get; set; } = default(Color);
        #endregion
        #region Unknown4
        public Byte Unknown4 { get; set; } = default(Byte);
        #endregion
        #region FillColorKey1Scale
        public Single FillColorKey1Scale { get; set; } = default(Single);
        #endregion
        #region FillColorKey2Scale
        public Single FillColorKey2Scale { get; set; } = default(Single);
        #endregion
        #region FillColorKey3Scale
        public Single FillColorKey3Scale { get; set; } = default(Single);
        #endregion
        #region FillColorKey1Time
        public Single FillColorKey1Time { get; set; } = default(Single);
        #endregion
        #region FillColorKey2Time
        public Single FillColorKey2Time { get; set; } = default(Single);
        #endregion
        #region FillColorKey3Time
        public Single FillColorKey3Time { get; set; } = default(Single);
        #endregion
        #region Unknown5
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown5 = new byte[40];
        public MemorySlice<Byte> Unknown5
        {
            get => _Unknown5;
            set => this._Unknown5 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IEffectShaderGetter.Unknown5 => this.Unknown5;
        #endregion
        #region Flags
        public EffectShader.Flag Flags { get; set; } = default(EffectShader.Flag);
        #endregion
        #region FillTextureScaleU
        public Single FillTextureScaleU { get; set; } = default(Single);
        #endregion
        #region FillTextureScaleV
        public Single FillTextureScaleV { get; set; } = default(Single);
        #endregion
        #region Unknown6
        public UInt16 Unknown6 { get; set; } = default(UInt16);
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IEffectShaderGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            EffectShaderMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.FillTexture = initialValue;
                this.ParticleShaderTexture = initialValue;
                this.HolesTexture = initialValue;
                this.MembranePaletteTexture = initialValue;
                this.ParticlePaletteTexture = initialValue;
                this.DATA = initialValue;
                this.Unknown = initialValue;
                this.MembraneSourceBlendMode = initialValue;
                this.MembraneBlendOperation = initialValue;
                this.MembraneZTest = initialValue;
                this.FillColorKey1 = initialValue;
                this.FillAlphaFadeInTime = initialValue;
                this.FillFullAlphaTime = initialValue;
                this.FillFadeOutTime = initialValue;
                this.FillPersistentAlphaRatio = initialValue;
                this.FillAlphaPulseAmplitude = initialValue;
                this.FillAlphaPulseFrequency = initialValue;
                this.FillTextureAnimationSpeedU = initialValue;
                this.FillTextureAnimationSpeedV = initialValue;
                this.EdgeEffectFallOff = initialValue;
                this.EdgeEffectColor = initialValue;
                this.EdgeEffectAlphaFadeInTime = initialValue;
                this.EdgeEffectFullAlphaTime = initialValue;
                this.EdgeEffectAlphaFadeOutTime = initialValue;
                this.EdgeEffectPersistentAlphaRatio = initialValue;
                this.EdgeEffectAlphaPulseAmplitude = initialValue;
                this.EdgeEffectAlphaPulseFrequency = initialValue;
                this.FillFullAlphaRatio = initialValue;
                this.EdgeEffectFullAlphaRatio = initialValue;
                this.MembraneDestBlendMode = initialValue;
                this.Unknown2 = initialValue;
                this.HolesAnimationStartTime = initialValue;
                this.HolesAnimationEndTime = initialValue;
                this.HolesAnimationStartValue = initialValue;
                this.HolesAnimationEndValue = initialValue;
                this.Unknown3 = initialValue;
                this.AmbientSound = initialValue;
                this.FillColorKey2 = initialValue;
                this.FillColorKey3 = initialValue;
                this.Unknown4 = initialValue;
                this.FillColorKey1Scale = initialValue;
                this.FillColorKey2Scale = initialValue;
                this.FillColorKey3Scale = initialValue;
                this.FillColorKey1Time = initialValue;
                this.FillColorKey2Time = initialValue;
                this.FillColorKey3Time = initialValue;
                this.Unknown5 = initialValue;
                this.Flags = initialValue;
                this.FillTextureScaleU = initialValue;
                this.FillTextureScaleV = initialValue;
                this.Unknown6 = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem FillTexture,
                TItem ParticleShaderTexture,
                TItem HolesTexture,
                TItem MembranePaletteTexture,
                TItem ParticlePaletteTexture,
                TItem DATA,
                TItem Unknown,
                TItem MembraneSourceBlendMode,
                TItem MembraneBlendOperation,
                TItem MembraneZTest,
                TItem FillColorKey1,
                TItem FillAlphaFadeInTime,
                TItem FillFullAlphaTime,
                TItem FillFadeOutTime,
                TItem FillPersistentAlphaRatio,
                TItem FillAlphaPulseAmplitude,
                TItem FillAlphaPulseFrequency,
                TItem FillTextureAnimationSpeedU,
                TItem FillTextureAnimationSpeedV,
                TItem EdgeEffectFallOff,
                TItem EdgeEffectColor,
                TItem EdgeEffectAlphaFadeInTime,
                TItem EdgeEffectFullAlphaTime,
                TItem EdgeEffectAlphaFadeOutTime,
                TItem EdgeEffectPersistentAlphaRatio,
                TItem EdgeEffectAlphaPulseAmplitude,
                TItem EdgeEffectAlphaPulseFrequency,
                TItem FillFullAlphaRatio,
                TItem EdgeEffectFullAlphaRatio,
                TItem MembraneDestBlendMode,
                TItem Unknown2,
                TItem HolesAnimationStartTime,
                TItem HolesAnimationEndTime,
                TItem HolesAnimationStartValue,
                TItem HolesAnimationEndValue,
                TItem Unknown3,
                TItem AmbientSound,
                TItem FillColorKey2,
                TItem FillColorKey3,
                TItem Unknown4,
                TItem FillColorKey1Scale,
                TItem FillColorKey2Scale,
                TItem FillColorKey3Scale,
                TItem FillColorKey1Time,
                TItem FillColorKey2Time,
                TItem FillColorKey3Time,
                TItem Unknown5,
                TItem Flags,
                TItem FillTextureScaleU,
                TItem FillTextureScaleV,
                TItem Unknown6,
                TItem Model)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.FillTexture = FillTexture;
                this.ParticleShaderTexture = ParticleShaderTexture;
                this.HolesTexture = HolesTexture;
                this.MembranePaletteTexture = MembranePaletteTexture;
                this.ParticlePaletteTexture = ParticlePaletteTexture;
                this.DATA = DATA;
                this.Unknown = Unknown;
                this.MembraneSourceBlendMode = MembraneSourceBlendMode;
                this.MembraneBlendOperation = MembraneBlendOperation;
                this.MembraneZTest = MembraneZTest;
                this.FillColorKey1 = FillColorKey1;
                this.FillAlphaFadeInTime = FillAlphaFadeInTime;
                this.FillFullAlphaTime = FillFullAlphaTime;
                this.FillFadeOutTime = FillFadeOutTime;
                this.FillPersistentAlphaRatio = FillPersistentAlphaRatio;
                this.FillAlphaPulseAmplitude = FillAlphaPulseAmplitude;
                this.FillAlphaPulseFrequency = FillAlphaPulseFrequency;
                this.FillTextureAnimationSpeedU = FillTextureAnimationSpeedU;
                this.FillTextureAnimationSpeedV = FillTextureAnimationSpeedV;
                this.EdgeEffectFallOff = EdgeEffectFallOff;
                this.EdgeEffectColor = EdgeEffectColor;
                this.EdgeEffectAlphaFadeInTime = EdgeEffectAlphaFadeInTime;
                this.EdgeEffectFullAlphaTime = EdgeEffectFullAlphaTime;
                this.EdgeEffectAlphaFadeOutTime = EdgeEffectAlphaFadeOutTime;
                this.EdgeEffectPersistentAlphaRatio = EdgeEffectPersistentAlphaRatio;
                this.EdgeEffectAlphaPulseAmplitude = EdgeEffectAlphaPulseAmplitude;
                this.EdgeEffectAlphaPulseFrequency = EdgeEffectAlphaPulseFrequency;
                this.FillFullAlphaRatio = FillFullAlphaRatio;
                this.EdgeEffectFullAlphaRatio = EdgeEffectFullAlphaRatio;
                this.MembraneDestBlendMode = MembraneDestBlendMode;
                this.Unknown2 = Unknown2;
                this.HolesAnimationStartTime = HolesAnimationStartTime;
                this.HolesAnimationEndTime = HolesAnimationEndTime;
                this.HolesAnimationStartValue = HolesAnimationStartValue;
                this.HolesAnimationEndValue = HolesAnimationEndValue;
                this.Unknown3 = Unknown3;
                this.AmbientSound = AmbientSound;
                this.FillColorKey2 = FillColorKey2;
                this.FillColorKey3 = FillColorKey3;
                this.Unknown4 = Unknown4;
                this.FillColorKey1Scale = FillColorKey1Scale;
                this.FillColorKey2Scale = FillColorKey2Scale;
                this.FillColorKey3Scale = FillColorKey3Scale;
                this.FillColorKey1Time = FillColorKey1Time;
                this.FillColorKey2Time = FillColorKey2Time;
                this.FillColorKey3Time = FillColorKey3Time;
                this.Unknown5 = Unknown5;
                this.Flags = Flags;
                this.FillTextureScaleU = FillTextureScaleU;
                this.FillTextureScaleV = FillTextureScaleV;
                this.Unknown6 = Unknown6;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FillTexture;
            public TItem ParticleShaderTexture;
            public TItem HolesTexture;
            public TItem MembranePaletteTexture;
            public TItem ParticlePaletteTexture;
            public TItem DATA;
            public TItem Unknown;
            public TItem MembraneSourceBlendMode;
            public TItem MembraneBlendOperation;
            public TItem MembraneZTest;
            public TItem FillColorKey1;
            public TItem FillAlphaFadeInTime;
            public TItem FillFullAlphaTime;
            public TItem FillFadeOutTime;
            public TItem FillPersistentAlphaRatio;
            public TItem FillAlphaPulseAmplitude;
            public TItem FillAlphaPulseFrequency;
            public TItem FillTextureAnimationSpeedU;
            public TItem FillTextureAnimationSpeedV;
            public TItem EdgeEffectFallOff;
            public TItem EdgeEffectColor;
            public TItem EdgeEffectAlphaFadeInTime;
            public TItem EdgeEffectFullAlphaTime;
            public TItem EdgeEffectAlphaFadeOutTime;
            public TItem EdgeEffectPersistentAlphaRatio;
            public TItem EdgeEffectAlphaPulseAmplitude;
            public TItem EdgeEffectAlphaPulseFrequency;
            public TItem FillFullAlphaRatio;
            public TItem EdgeEffectFullAlphaRatio;
            public TItem MembraneDestBlendMode;
            public TItem Unknown2;
            public TItem HolesAnimationStartTime;
            public TItem HolesAnimationEndTime;
            public TItem HolesAnimationStartValue;
            public TItem HolesAnimationEndValue;
            public TItem Unknown3;
            public TItem AmbientSound;
            public TItem FillColorKey2;
            public TItem FillColorKey3;
            public TItem Unknown4;
            public TItem FillColorKey1Scale;
            public TItem FillColorKey2Scale;
            public TItem FillColorKey3Scale;
            public TItem FillColorKey1Time;
            public TItem FillColorKey2Time;
            public TItem FillColorKey3Time;
            public TItem Unknown5;
            public TItem Flags;
            public TItem FillTextureScaleU;
            public TItem FillTextureScaleV;
            public TItem Unknown6;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.FillTexture, rhs.FillTexture)) return false;
                if (!object.Equals(this.ParticleShaderTexture, rhs.ParticleShaderTexture)) return false;
                if (!object.Equals(this.HolesTexture, rhs.HolesTexture)) return false;
                if (!object.Equals(this.MembranePaletteTexture, rhs.MembranePaletteTexture)) return false;
                if (!object.Equals(this.ParticlePaletteTexture, rhs.ParticlePaletteTexture)) return false;
                if (!object.Equals(this.DATA, rhs.DATA)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.MembraneSourceBlendMode, rhs.MembraneSourceBlendMode)) return false;
                if (!object.Equals(this.MembraneBlendOperation, rhs.MembraneBlendOperation)) return false;
                if (!object.Equals(this.MembraneZTest, rhs.MembraneZTest)) return false;
                if (!object.Equals(this.FillColorKey1, rhs.FillColorKey1)) return false;
                if (!object.Equals(this.FillAlphaFadeInTime, rhs.FillAlphaFadeInTime)) return false;
                if (!object.Equals(this.FillFullAlphaTime, rhs.FillFullAlphaTime)) return false;
                if (!object.Equals(this.FillFadeOutTime, rhs.FillFadeOutTime)) return false;
                if (!object.Equals(this.FillPersistentAlphaRatio, rhs.FillPersistentAlphaRatio)) return false;
                if (!object.Equals(this.FillAlphaPulseAmplitude, rhs.FillAlphaPulseAmplitude)) return false;
                if (!object.Equals(this.FillAlphaPulseFrequency, rhs.FillAlphaPulseFrequency)) return false;
                if (!object.Equals(this.FillTextureAnimationSpeedU, rhs.FillTextureAnimationSpeedU)) return false;
                if (!object.Equals(this.FillTextureAnimationSpeedV, rhs.FillTextureAnimationSpeedV)) return false;
                if (!object.Equals(this.EdgeEffectFallOff, rhs.EdgeEffectFallOff)) return false;
                if (!object.Equals(this.EdgeEffectColor, rhs.EdgeEffectColor)) return false;
                if (!object.Equals(this.EdgeEffectAlphaFadeInTime, rhs.EdgeEffectAlphaFadeInTime)) return false;
                if (!object.Equals(this.EdgeEffectFullAlphaTime, rhs.EdgeEffectFullAlphaTime)) return false;
                if (!object.Equals(this.EdgeEffectAlphaFadeOutTime, rhs.EdgeEffectAlphaFadeOutTime)) return false;
                if (!object.Equals(this.EdgeEffectPersistentAlphaRatio, rhs.EdgeEffectPersistentAlphaRatio)) return false;
                if (!object.Equals(this.EdgeEffectAlphaPulseAmplitude, rhs.EdgeEffectAlphaPulseAmplitude)) return false;
                if (!object.Equals(this.EdgeEffectAlphaPulseFrequency, rhs.EdgeEffectAlphaPulseFrequency)) return false;
                if (!object.Equals(this.FillFullAlphaRatio, rhs.FillFullAlphaRatio)) return false;
                if (!object.Equals(this.EdgeEffectFullAlphaRatio, rhs.EdgeEffectFullAlphaRatio)) return false;
                if (!object.Equals(this.MembraneDestBlendMode, rhs.MembraneDestBlendMode)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.HolesAnimationStartTime, rhs.HolesAnimationStartTime)) return false;
                if (!object.Equals(this.HolesAnimationEndTime, rhs.HolesAnimationEndTime)) return false;
                if (!object.Equals(this.HolesAnimationStartValue, rhs.HolesAnimationStartValue)) return false;
                if (!object.Equals(this.HolesAnimationEndValue, rhs.HolesAnimationEndValue)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.AmbientSound, rhs.AmbientSound)) return false;
                if (!object.Equals(this.FillColorKey2, rhs.FillColorKey2)) return false;
                if (!object.Equals(this.FillColorKey3, rhs.FillColorKey3)) return false;
                if (!object.Equals(this.Unknown4, rhs.Unknown4)) return false;
                if (!object.Equals(this.FillColorKey1Scale, rhs.FillColorKey1Scale)) return false;
                if (!object.Equals(this.FillColorKey2Scale, rhs.FillColorKey2Scale)) return false;
                if (!object.Equals(this.FillColorKey3Scale, rhs.FillColorKey3Scale)) return false;
                if (!object.Equals(this.FillColorKey1Time, rhs.FillColorKey1Time)) return false;
                if (!object.Equals(this.FillColorKey2Time, rhs.FillColorKey2Time)) return false;
                if (!object.Equals(this.FillColorKey3Time, rhs.FillColorKey3Time)) return false;
                if (!object.Equals(this.Unknown5, rhs.Unknown5)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.FillTextureScaleU, rhs.FillTextureScaleU)) return false;
                if (!object.Equals(this.FillTextureScaleV, rhs.FillTextureScaleV)) return false;
                if (!object.Equals(this.Unknown6, rhs.Unknown6)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FillTexture);
                hash.Add(this.ParticleShaderTexture);
                hash.Add(this.HolesTexture);
                hash.Add(this.MembranePaletteTexture);
                hash.Add(this.ParticlePaletteTexture);
                hash.Add(this.DATA);
                hash.Add(this.Unknown);
                hash.Add(this.MembraneSourceBlendMode);
                hash.Add(this.MembraneBlendOperation);
                hash.Add(this.MembraneZTest);
                hash.Add(this.FillColorKey1);
                hash.Add(this.FillAlphaFadeInTime);
                hash.Add(this.FillFullAlphaTime);
                hash.Add(this.FillFadeOutTime);
                hash.Add(this.FillPersistentAlphaRatio);
                hash.Add(this.FillAlphaPulseAmplitude);
                hash.Add(this.FillAlphaPulseFrequency);
                hash.Add(this.FillTextureAnimationSpeedU);
                hash.Add(this.FillTextureAnimationSpeedV);
                hash.Add(this.EdgeEffectFallOff);
                hash.Add(this.EdgeEffectColor);
                hash.Add(this.EdgeEffectAlphaFadeInTime);
                hash.Add(this.EdgeEffectFullAlphaTime);
                hash.Add(this.EdgeEffectAlphaFadeOutTime);
                hash.Add(this.EdgeEffectPersistentAlphaRatio);
                hash.Add(this.EdgeEffectAlphaPulseAmplitude);
                hash.Add(this.EdgeEffectAlphaPulseFrequency);
                hash.Add(this.FillFullAlphaRatio);
                hash.Add(this.EdgeEffectFullAlphaRatio);
                hash.Add(this.MembraneDestBlendMode);
                hash.Add(this.Unknown2);
                hash.Add(this.HolesAnimationStartTime);
                hash.Add(this.HolesAnimationEndTime);
                hash.Add(this.HolesAnimationStartValue);
                hash.Add(this.HolesAnimationEndValue);
                hash.Add(this.Unknown3);
                hash.Add(this.AmbientSound);
                hash.Add(this.FillColorKey2);
                hash.Add(this.FillColorKey3);
                hash.Add(this.Unknown4);
                hash.Add(this.FillColorKey1Scale);
                hash.Add(this.FillColorKey2Scale);
                hash.Add(this.FillColorKey3Scale);
                hash.Add(this.FillColorKey1Time);
                hash.Add(this.FillColorKey2Time);
                hash.Add(this.FillColorKey3Time);
                hash.Add(this.Unknown5);
                hash.Add(this.Flags);
                hash.Add(this.FillTextureScaleU);
                hash.Add(this.FillTextureScaleV);
                hash.Add(this.Unknown6);
                hash.Add(this.Model);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.FillTexture)) return false;
                if (!eval(this.ParticleShaderTexture)) return false;
                if (!eval(this.HolesTexture)) return false;
                if (!eval(this.MembranePaletteTexture)) return false;
                if (!eval(this.ParticlePaletteTexture)) return false;
                if (!eval(this.DATA)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.MembraneSourceBlendMode)) return false;
                if (!eval(this.MembraneBlendOperation)) return false;
                if (!eval(this.MembraneZTest)) return false;
                if (!eval(this.FillColorKey1)) return false;
                if (!eval(this.FillAlphaFadeInTime)) return false;
                if (!eval(this.FillFullAlphaTime)) return false;
                if (!eval(this.FillFadeOutTime)) return false;
                if (!eval(this.FillPersistentAlphaRatio)) return false;
                if (!eval(this.FillAlphaPulseAmplitude)) return false;
                if (!eval(this.FillAlphaPulseFrequency)) return false;
                if (!eval(this.FillTextureAnimationSpeedU)) return false;
                if (!eval(this.FillTextureAnimationSpeedV)) return false;
                if (!eval(this.EdgeEffectFallOff)) return false;
                if (!eval(this.EdgeEffectColor)) return false;
                if (!eval(this.EdgeEffectAlphaFadeInTime)) return false;
                if (!eval(this.EdgeEffectFullAlphaTime)) return false;
                if (!eval(this.EdgeEffectAlphaFadeOutTime)) return false;
                if (!eval(this.EdgeEffectPersistentAlphaRatio)) return false;
                if (!eval(this.EdgeEffectAlphaPulseAmplitude)) return false;
                if (!eval(this.EdgeEffectAlphaPulseFrequency)) return false;
                if (!eval(this.FillFullAlphaRatio)) return false;
                if (!eval(this.EdgeEffectFullAlphaRatio)) return false;
                if (!eval(this.MembraneDestBlendMode)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.HolesAnimationStartTime)) return false;
                if (!eval(this.HolesAnimationEndTime)) return false;
                if (!eval(this.HolesAnimationStartValue)) return false;
                if (!eval(this.HolesAnimationEndValue)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.AmbientSound)) return false;
                if (!eval(this.FillColorKey2)) return false;
                if (!eval(this.FillColorKey3)) return false;
                if (!eval(this.Unknown4)) return false;
                if (!eval(this.FillColorKey1Scale)) return false;
                if (!eval(this.FillColorKey2Scale)) return false;
                if (!eval(this.FillColorKey3Scale)) return false;
                if (!eval(this.FillColorKey1Time)) return false;
                if (!eval(this.FillColorKey2Time)) return false;
                if (!eval(this.FillColorKey3Time)) return false;
                if (!eval(this.Unknown5)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.FillTextureScaleU)) return false;
                if (!eval(this.FillTextureScaleV)) return false;
                if (!eval(this.Unknown6)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.FillTexture)) return true;
                if (eval(this.ParticleShaderTexture)) return true;
                if (eval(this.HolesTexture)) return true;
                if (eval(this.MembranePaletteTexture)) return true;
                if (eval(this.ParticlePaletteTexture)) return true;
                if (eval(this.DATA)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.MembraneSourceBlendMode)) return true;
                if (eval(this.MembraneBlendOperation)) return true;
                if (eval(this.MembraneZTest)) return true;
                if (eval(this.FillColorKey1)) return true;
                if (eval(this.FillAlphaFadeInTime)) return true;
                if (eval(this.FillFullAlphaTime)) return true;
                if (eval(this.FillFadeOutTime)) return true;
                if (eval(this.FillPersistentAlphaRatio)) return true;
                if (eval(this.FillAlphaPulseAmplitude)) return true;
                if (eval(this.FillAlphaPulseFrequency)) return true;
                if (eval(this.FillTextureAnimationSpeedU)) return true;
                if (eval(this.FillTextureAnimationSpeedV)) return true;
                if (eval(this.EdgeEffectFallOff)) return true;
                if (eval(this.EdgeEffectColor)) return true;
                if (eval(this.EdgeEffectAlphaFadeInTime)) return true;
                if (eval(this.EdgeEffectFullAlphaTime)) return true;
                if (eval(this.EdgeEffectAlphaFadeOutTime)) return true;
                if (eval(this.EdgeEffectPersistentAlphaRatio)) return true;
                if (eval(this.EdgeEffectAlphaPulseAmplitude)) return true;
                if (eval(this.EdgeEffectAlphaPulseFrequency)) return true;
                if (eval(this.FillFullAlphaRatio)) return true;
                if (eval(this.EdgeEffectFullAlphaRatio)) return true;
                if (eval(this.MembraneDestBlendMode)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.HolesAnimationStartTime)) return true;
                if (eval(this.HolesAnimationEndTime)) return true;
                if (eval(this.HolesAnimationStartValue)) return true;
                if (eval(this.HolesAnimationEndValue)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.AmbientSound)) return true;
                if (eval(this.FillColorKey2)) return true;
                if (eval(this.FillColorKey3)) return true;
                if (eval(this.Unknown4)) return true;
                if (eval(this.FillColorKey1Scale)) return true;
                if (eval(this.FillColorKey2Scale)) return true;
                if (eval(this.FillColorKey3Scale)) return true;
                if (eval(this.FillColorKey1Time)) return true;
                if (eval(this.FillColorKey2Time)) return true;
                if (eval(this.FillColorKey3Time)) return true;
                if (eval(this.Unknown5)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.FillTextureScaleU)) return true;
                if (eval(this.FillTextureScaleV)) return true;
                if (eval(this.Unknown6)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new EffectShader.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.FillTexture = eval(this.FillTexture);
                obj.ParticleShaderTexture = eval(this.ParticleShaderTexture);
                obj.HolesTexture = eval(this.HolesTexture);
                obj.MembranePaletteTexture = eval(this.MembranePaletteTexture);
                obj.ParticlePaletteTexture = eval(this.ParticlePaletteTexture);
                obj.DATA = eval(this.DATA);
                obj.Unknown = eval(this.Unknown);
                obj.MembraneSourceBlendMode = eval(this.MembraneSourceBlendMode);
                obj.MembraneBlendOperation = eval(this.MembraneBlendOperation);
                obj.MembraneZTest = eval(this.MembraneZTest);
                obj.FillColorKey1 = eval(this.FillColorKey1);
                obj.FillAlphaFadeInTime = eval(this.FillAlphaFadeInTime);
                obj.FillFullAlphaTime = eval(this.FillFullAlphaTime);
                obj.FillFadeOutTime = eval(this.FillFadeOutTime);
                obj.FillPersistentAlphaRatio = eval(this.FillPersistentAlphaRatio);
                obj.FillAlphaPulseAmplitude = eval(this.FillAlphaPulseAmplitude);
                obj.FillAlphaPulseFrequency = eval(this.FillAlphaPulseFrequency);
                obj.FillTextureAnimationSpeedU = eval(this.FillTextureAnimationSpeedU);
                obj.FillTextureAnimationSpeedV = eval(this.FillTextureAnimationSpeedV);
                obj.EdgeEffectFallOff = eval(this.EdgeEffectFallOff);
                obj.EdgeEffectColor = eval(this.EdgeEffectColor);
                obj.EdgeEffectAlphaFadeInTime = eval(this.EdgeEffectAlphaFadeInTime);
                obj.EdgeEffectFullAlphaTime = eval(this.EdgeEffectFullAlphaTime);
                obj.EdgeEffectAlphaFadeOutTime = eval(this.EdgeEffectAlphaFadeOutTime);
                obj.EdgeEffectPersistentAlphaRatio = eval(this.EdgeEffectPersistentAlphaRatio);
                obj.EdgeEffectAlphaPulseAmplitude = eval(this.EdgeEffectAlphaPulseAmplitude);
                obj.EdgeEffectAlphaPulseFrequency = eval(this.EdgeEffectAlphaPulseFrequency);
                obj.FillFullAlphaRatio = eval(this.FillFullAlphaRatio);
                obj.EdgeEffectFullAlphaRatio = eval(this.EdgeEffectFullAlphaRatio);
                obj.MembraneDestBlendMode = eval(this.MembraneDestBlendMode);
                obj.Unknown2 = eval(this.Unknown2);
                obj.HolesAnimationStartTime = eval(this.HolesAnimationStartTime);
                obj.HolesAnimationEndTime = eval(this.HolesAnimationEndTime);
                obj.HolesAnimationStartValue = eval(this.HolesAnimationStartValue);
                obj.HolesAnimationEndValue = eval(this.HolesAnimationEndValue);
                obj.Unknown3 = eval(this.Unknown3);
                obj.AmbientSound = eval(this.AmbientSound);
                obj.FillColorKey2 = eval(this.FillColorKey2);
                obj.FillColorKey3 = eval(this.FillColorKey3);
                obj.Unknown4 = eval(this.Unknown4);
                obj.FillColorKey1Scale = eval(this.FillColorKey1Scale);
                obj.FillColorKey2Scale = eval(this.FillColorKey2Scale);
                obj.FillColorKey3Scale = eval(this.FillColorKey3Scale);
                obj.FillColorKey1Time = eval(this.FillColorKey1Time);
                obj.FillColorKey2Time = eval(this.FillColorKey2Time);
                obj.FillColorKey3Time = eval(this.FillColorKey3Time);
                obj.Unknown5 = eval(this.Unknown5);
                obj.Flags = eval(this.Flags);
                obj.FillTextureScaleU = eval(this.FillTextureScaleU);
                obj.FillTextureScaleV = eval(this.FillTextureScaleV);
                obj.Unknown6 = eval(this.Unknown6);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(EffectShader.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, EffectShader.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(EffectShader.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.FillTexture ?? true)
                    {
                        sb.AppendItem(FillTexture, "FillTexture");
                    }
                    if (printMask?.ParticleShaderTexture ?? true)
                    {
                        sb.AppendItem(ParticleShaderTexture, "ParticleShaderTexture");
                    }
                    if (printMask?.HolesTexture ?? true)
                    {
                        sb.AppendItem(HolesTexture, "HolesTexture");
                    }
                    if (printMask?.MembranePaletteTexture ?? true)
                    {
                        sb.AppendItem(MembranePaletteTexture, "MembranePaletteTexture");
                    }
                    if (printMask?.ParticlePaletteTexture ?? true)
                    {
                        sb.AppendItem(ParticlePaletteTexture, "ParticlePaletteTexture");
                    }
                    if (printMask?.DATA ?? true)
                    {
                        sb.AppendItem(DATA, "DATA");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.MembraneSourceBlendMode ?? true)
                    {
                        sb.AppendItem(MembraneSourceBlendMode, "MembraneSourceBlendMode");
                    }
                    if (printMask?.MembraneBlendOperation ?? true)
                    {
                        sb.AppendItem(MembraneBlendOperation, "MembraneBlendOperation");
                    }
                    if (printMask?.MembraneZTest ?? true)
                    {
                        sb.AppendItem(MembraneZTest, "MembraneZTest");
                    }
                    if (printMask?.FillColorKey1 ?? true)
                    {
                        sb.AppendItem(FillColorKey1, "FillColorKey1");
                    }
                    if (printMask?.FillAlphaFadeInTime ?? true)
                    {
                        sb.AppendItem(FillAlphaFadeInTime, "FillAlphaFadeInTime");
                    }
                    if (printMask?.FillFullAlphaTime ?? true)
                    {
                        sb.AppendItem(FillFullAlphaTime, "FillFullAlphaTime");
                    }
                    if (printMask?.FillFadeOutTime ?? true)
                    {
                        sb.AppendItem(FillFadeOutTime, "FillFadeOutTime");
                    }
                    if (printMask?.FillPersistentAlphaRatio ?? true)
                    {
                        sb.AppendItem(FillPersistentAlphaRatio, "FillPersistentAlphaRatio");
                    }
                    if (printMask?.FillAlphaPulseAmplitude ?? true)
                    {
                        sb.AppendItem(FillAlphaPulseAmplitude, "FillAlphaPulseAmplitude");
                    }
                    if (printMask?.FillAlphaPulseFrequency ?? true)
                    {
                        sb.AppendItem(FillAlphaPulseFrequency, "FillAlphaPulseFrequency");
                    }
                    if (printMask?.FillTextureAnimationSpeedU ?? true)
                    {
                        sb.AppendItem(FillTextureAnimationSpeedU, "FillTextureAnimationSpeedU");
                    }
                    if (printMask?.FillTextureAnimationSpeedV ?? true)
                    {
                        sb.AppendItem(FillTextureAnimationSpeedV, "FillTextureAnimationSpeedV");
                    }
                    if (printMask?.EdgeEffectFallOff ?? true)
                    {
                        sb.AppendItem(EdgeEffectFallOff, "EdgeEffectFallOff");
                    }
                    if (printMask?.EdgeEffectColor ?? true)
                    {
                        sb.AppendItem(EdgeEffectColor, "EdgeEffectColor");
                    }
                    if (printMask?.EdgeEffectAlphaFadeInTime ?? true)
                    {
                        sb.AppendItem(EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
                    }
                    if (printMask?.EdgeEffectFullAlphaTime ?? true)
                    {
                        sb.AppendItem(EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
                    }
                    if (printMask?.EdgeEffectAlphaFadeOutTime ?? true)
                    {
                        sb.AppendItem(EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
                    }
                    if (printMask?.EdgeEffectPersistentAlphaRatio ?? true)
                    {
                        sb.AppendItem(EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
                    }
                    if (printMask?.EdgeEffectAlphaPulseAmplitude ?? true)
                    {
                        sb.AppendItem(EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
                    }
                    if (printMask?.EdgeEffectAlphaPulseFrequency ?? true)
                    {
                        sb.AppendItem(EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
                    }
                    if (printMask?.FillFullAlphaRatio ?? true)
                    {
                        sb.AppendItem(FillFullAlphaRatio, "FillFullAlphaRatio");
                    }
                    if (printMask?.EdgeEffectFullAlphaRatio ?? true)
                    {
                        sb.AppendItem(EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
                    }
                    if (printMask?.MembraneDestBlendMode ?? true)
                    {
                        sb.AppendItem(MembraneDestBlendMode, "MembraneDestBlendMode");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.HolesAnimationStartTime ?? true)
                    {
                        sb.AppendItem(HolesAnimationStartTime, "HolesAnimationStartTime");
                    }
                    if (printMask?.HolesAnimationEndTime ?? true)
                    {
                        sb.AppendItem(HolesAnimationEndTime, "HolesAnimationEndTime");
                    }
                    if (printMask?.HolesAnimationStartValue ?? true)
                    {
                        sb.AppendItem(HolesAnimationStartValue, "HolesAnimationStartValue");
                    }
                    if (printMask?.HolesAnimationEndValue ?? true)
                    {
                        sb.AppendItem(HolesAnimationEndValue, "HolesAnimationEndValue");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        sb.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.AmbientSound ?? true)
                    {
                        sb.AppendItem(AmbientSound, "AmbientSound");
                    }
                    if (printMask?.FillColorKey2 ?? true)
                    {
                        sb.AppendItem(FillColorKey2, "FillColorKey2");
                    }
                    if (printMask?.FillColorKey3 ?? true)
                    {
                        sb.AppendItem(FillColorKey3, "FillColorKey3");
                    }
                    if (printMask?.Unknown4 ?? true)
                    {
                        sb.AppendItem(Unknown4, "Unknown4");
                    }
                    if (printMask?.FillColorKey1Scale ?? true)
                    {
                        sb.AppendItem(FillColorKey1Scale, "FillColorKey1Scale");
                    }
                    if (printMask?.FillColorKey2Scale ?? true)
                    {
                        sb.AppendItem(FillColorKey2Scale, "FillColorKey2Scale");
                    }
                    if (printMask?.FillColorKey3Scale ?? true)
                    {
                        sb.AppendItem(FillColorKey3Scale, "FillColorKey3Scale");
                    }
                    if (printMask?.FillColorKey1Time ?? true)
                    {
                        sb.AppendItem(FillColorKey1Time, "FillColorKey1Time");
                    }
                    if (printMask?.FillColorKey2Time ?? true)
                    {
                        sb.AppendItem(FillColorKey2Time, "FillColorKey2Time");
                    }
                    if (printMask?.FillColorKey3Time ?? true)
                    {
                        sb.AppendItem(FillColorKey3Time, "FillColorKey3Time");
                    }
                    if (printMask?.Unknown5 ?? true)
                    {
                        sb.AppendItem(Unknown5, "Unknown5");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.FillTextureScaleU ?? true)
                    {
                        sb.AppendItem(FillTextureScaleU, "FillTextureScaleU");
                    }
                    if (printMask?.FillTextureScaleV ?? true)
                    {
                        sb.AppendItem(FillTextureScaleV, "FillTextureScaleV");
                    }
                    if (printMask?.Unknown6 ?? true)
                    {
                        sb.AppendItem(Unknown6, "Unknown6");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? FillTexture;
            public Exception? ParticleShaderTexture;
            public Exception? HolesTexture;
            public Exception? MembranePaletteTexture;
            public Exception? ParticlePaletteTexture;
            public Exception? DATA;
            public Exception? Unknown;
            public Exception? MembraneSourceBlendMode;
            public Exception? MembraneBlendOperation;
            public Exception? MembraneZTest;
            public Exception? FillColorKey1;
            public Exception? FillAlphaFadeInTime;
            public Exception? FillFullAlphaTime;
            public Exception? FillFadeOutTime;
            public Exception? FillPersistentAlphaRatio;
            public Exception? FillAlphaPulseAmplitude;
            public Exception? FillAlphaPulseFrequency;
            public Exception? FillTextureAnimationSpeedU;
            public Exception? FillTextureAnimationSpeedV;
            public Exception? EdgeEffectFallOff;
            public Exception? EdgeEffectColor;
            public Exception? EdgeEffectAlphaFadeInTime;
            public Exception? EdgeEffectFullAlphaTime;
            public Exception? EdgeEffectAlphaFadeOutTime;
            public Exception? EdgeEffectPersistentAlphaRatio;
            public Exception? EdgeEffectAlphaPulseAmplitude;
            public Exception? EdgeEffectAlphaPulseFrequency;
            public Exception? FillFullAlphaRatio;
            public Exception? EdgeEffectFullAlphaRatio;
            public Exception? MembraneDestBlendMode;
            public Exception? Unknown2;
            public Exception? HolesAnimationStartTime;
            public Exception? HolesAnimationEndTime;
            public Exception? HolesAnimationStartValue;
            public Exception? HolesAnimationEndValue;
            public Exception? Unknown3;
            public Exception? AmbientSound;
            public Exception? FillColorKey2;
            public Exception? FillColorKey3;
            public Exception? Unknown4;
            public Exception? FillColorKey1Scale;
            public Exception? FillColorKey2Scale;
            public Exception? FillColorKey3Scale;
            public Exception? FillColorKey1Time;
            public Exception? FillColorKey2Time;
            public Exception? FillColorKey3Time;
            public Exception? Unknown5;
            public Exception? Flags;
            public Exception? FillTextureScaleU;
            public Exception? FillTextureScaleV;
            public Exception? Unknown6;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
                switch (enu)
                {
                    case EffectShader_FieldIndex.FillTexture:
                        return FillTexture;
                    case EffectShader_FieldIndex.ParticleShaderTexture:
                        return ParticleShaderTexture;
                    case EffectShader_FieldIndex.HolesTexture:
                        return HolesTexture;
                    case EffectShader_FieldIndex.MembranePaletteTexture:
                        return MembranePaletteTexture;
                    case EffectShader_FieldIndex.ParticlePaletteTexture:
                        return ParticlePaletteTexture;
                    case EffectShader_FieldIndex.DATA:
                        return DATA;
                    case EffectShader_FieldIndex.Unknown:
                        return Unknown;
                    case EffectShader_FieldIndex.MembraneSourceBlendMode:
                        return MembraneSourceBlendMode;
                    case EffectShader_FieldIndex.MembraneBlendOperation:
                        return MembraneBlendOperation;
                    case EffectShader_FieldIndex.MembraneZTest:
                        return MembraneZTest;
                    case EffectShader_FieldIndex.FillColorKey1:
                        return FillColorKey1;
                    case EffectShader_FieldIndex.FillAlphaFadeInTime:
                        return FillAlphaFadeInTime;
                    case EffectShader_FieldIndex.FillFullAlphaTime:
                        return FillFullAlphaTime;
                    case EffectShader_FieldIndex.FillFadeOutTime:
                        return FillFadeOutTime;
                    case EffectShader_FieldIndex.FillPersistentAlphaRatio:
                        return FillPersistentAlphaRatio;
                    case EffectShader_FieldIndex.FillAlphaPulseAmplitude:
                        return FillAlphaPulseAmplitude;
                    case EffectShader_FieldIndex.FillAlphaPulseFrequency:
                        return FillAlphaPulseFrequency;
                    case EffectShader_FieldIndex.FillTextureAnimationSpeedU:
                        return FillTextureAnimationSpeedU;
                    case EffectShader_FieldIndex.FillTextureAnimationSpeedV:
                        return FillTextureAnimationSpeedV;
                    case EffectShader_FieldIndex.EdgeEffectFallOff:
                        return EdgeEffectFallOff;
                    case EffectShader_FieldIndex.EdgeEffectColor:
                        return EdgeEffectColor;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                        return EdgeEffectAlphaFadeInTime;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                        return EdgeEffectFullAlphaTime;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        return EdgeEffectAlphaFadeOutTime;
                    case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        return EdgeEffectPersistentAlphaRatio;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        return EdgeEffectAlphaPulseAmplitude;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        return EdgeEffectAlphaPulseFrequency;
                    case EffectShader_FieldIndex.FillFullAlphaRatio:
                        return FillFullAlphaRatio;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                        return EdgeEffectFullAlphaRatio;
                    case EffectShader_FieldIndex.MembraneDestBlendMode:
                        return MembraneDestBlendMode;
                    case EffectShader_FieldIndex.Unknown2:
                        return Unknown2;
                    case EffectShader_FieldIndex.HolesAnimationStartTime:
                        return HolesAnimationStartTime;
                    case EffectShader_FieldIndex.HolesAnimationEndTime:
                        return HolesAnimationEndTime;
                    case EffectShader_FieldIndex.HolesAnimationStartValue:
                        return HolesAnimationStartValue;
                    case EffectShader_FieldIndex.HolesAnimationEndValue:
                        return HolesAnimationEndValue;
                    case EffectShader_FieldIndex.Unknown3:
                        return Unknown3;
                    case EffectShader_FieldIndex.AmbientSound:
                        return AmbientSound;
                    case EffectShader_FieldIndex.FillColorKey2:
                        return FillColorKey2;
                    case EffectShader_FieldIndex.FillColorKey3:
                        return FillColorKey3;
                    case EffectShader_FieldIndex.Unknown4:
                        return Unknown4;
                    case EffectShader_FieldIndex.FillColorKey1Scale:
                        return FillColorKey1Scale;
                    case EffectShader_FieldIndex.FillColorKey2Scale:
                        return FillColorKey2Scale;
                    case EffectShader_FieldIndex.FillColorKey3Scale:
                        return FillColorKey3Scale;
                    case EffectShader_FieldIndex.FillColorKey1Time:
                        return FillColorKey1Time;
                    case EffectShader_FieldIndex.FillColorKey2Time:
                        return FillColorKey2Time;
                    case EffectShader_FieldIndex.FillColorKey3Time:
                        return FillColorKey3Time;
                    case EffectShader_FieldIndex.Unknown5:
                        return Unknown5;
                    case EffectShader_FieldIndex.Flags:
                        return Flags;
                    case EffectShader_FieldIndex.FillTextureScaleU:
                        return FillTextureScaleU;
                    case EffectShader_FieldIndex.FillTextureScaleV:
                        return FillTextureScaleV;
                    case EffectShader_FieldIndex.Unknown6:
                        return Unknown6;
                    case EffectShader_FieldIndex.Model:
                        return Model;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
                switch (enu)
                {
                    case EffectShader_FieldIndex.FillTexture:
                        this.FillTexture = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderTexture:
                        this.ParticleShaderTexture = ex;
                        break;
                    case EffectShader_FieldIndex.HolesTexture:
                        this.HolesTexture = ex;
                        break;
                    case EffectShader_FieldIndex.MembranePaletteTexture:
                        this.MembranePaletteTexture = ex;
                        break;
                    case EffectShader_FieldIndex.ParticlePaletteTexture:
                        this.ParticlePaletteTexture = ex;
                        break;
                    case EffectShader_FieldIndex.DATA:
                        this.DATA = ex;
                        break;
                    case EffectShader_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case EffectShader_FieldIndex.MembraneSourceBlendMode:
                        this.MembraneSourceBlendMode = ex;
                        break;
                    case EffectShader_FieldIndex.MembraneBlendOperation:
                        this.MembraneBlendOperation = ex;
                        break;
                    case EffectShader_FieldIndex.MembraneZTest:
                        this.MembraneZTest = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey1:
                        this.FillColorKey1 = ex;
                        break;
                    case EffectShader_FieldIndex.FillAlphaFadeInTime:
                        this.FillAlphaFadeInTime = ex;
                        break;
                    case EffectShader_FieldIndex.FillFullAlphaTime:
                        this.FillFullAlphaTime = ex;
                        break;
                    case EffectShader_FieldIndex.FillFadeOutTime:
                        this.FillFadeOutTime = ex;
                        break;
                    case EffectShader_FieldIndex.FillPersistentAlphaRatio:
                        this.FillPersistentAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.FillAlphaPulseAmplitude:
                        this.FillAlphaPulseAmplitude = ex;
                        break;
                    case EffectShader_FieldIndex.FillAlphaPulseFrequency:
                        this.FillAlphaPulseFrequency = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureAnimationSpeedU:
                        this.FillTextureAnimationSpeedU = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureAnimationSpeedV:
                        this.FillTextureAnimationSpeedV = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFallOff:
                        this.EdgeEffectFallOff = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectColor:
                        this.EdgeEffectColor = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                        this.EdgeEffectAlphaFadeInTime = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                        this.EdgeEffectFullAlphaTime = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        this.EdgeEffectAlphaFadeOutTime = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        this.EdgeEffectPersistentAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        this.EdgeEffectAlphaPulseAmplitude = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        this.EdgeEffectAlphaPulseFrequency = ex;
                        break;
                    case EffectShader_FieldIndex.FillFullAlphaRatio:
                        this.FillFullAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                        this.EdgeEffectFullAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.MembraneDestBlendMode:
                        this.MembraneDestBlendMode = ex;
                        break;
                    case EffectShader_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case EffectShader_FieldIndex.HolesAnimationStartTime:
                        this.HolesAnimationStartTime = ex;
                        break;
                    case EffectShader_FieldIndex.HolesAnimationEndTime:
                        this.HolesAnimationEndTime = ex;
                        break;
                    case EffectShader_FieldIndex.HolesAnimationStartValue:
                        this.HolesAnimationStartValue = ex;
                        break;
                    case EffectShader_FieldIndex.HolesAnimationEndValue:
                        this.HolesAnimationEndValue = ex;
                        break;
                    case EffectShader_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case EffectShader_FieldIndex.AmbientSound:
                        this.AmbientSound = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey2:
                        this.FillColorKey2 = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey3:
                        this.FillColorKey3 = ex;
                        break;
                    case EffectShader_FieldIndex.Unknown4:
                        this.Unknown4 = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey1Scale:
                        this.FillColorKey1Scale = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey2Scale:
                        this.FillColorKey2Scale = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey3Scale:
                        this.FillColorKey3Scale = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey1Time:
                        this.FillColorKey1Time = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey2Time:
                        this.FillColorKey2Time = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey3Time:
                        this.FillColorKey3Time = ex;
                        break;
                    case EffectShader_FieldIndex.Unknown5:
                        this.Unknown5 = ex;
                        break;
                    case EffectShader_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureScaleU:
                        this.FillTextureScaleU = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureScaleV:
                        this.FillTextureScaleV = ex;
                        break;
                    case EffectShader_FieldIndex.Unknown6:
                        this.Unknown6 = ex;
                        break;
                    case EffectShader_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
                switch (enu)
                {
                    case EffectShader_FieldIndex.FillTexture:
                        this.FillTexture = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderTexture:
                        this.ParticleShaderTexture = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesTexture:
                        this.HolesTexture = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembranePaletteTexture:
                        this.MembranePaletteTexture = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticlePaletteTexture:
                        this.ParticlePaletteTexture = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.DATA:
                        this.DATA = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembraneSourceBlendMode:
                        this.MembraneSourceBlendMode = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembraneBlendOperation:
                        this.MembraneBlendOperation = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembraneZTest:
                        this.MembraneZTest = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey1:
                        this.FillColorKey1 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillAlphaFadeInTime:
                        this.FillAlphaFadeInTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillFullAlphaTime:
                        this.FillFullAlphaTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillFadeOutTime:
                        this.FillFadeOutTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillPersistentAlphaRatio:
                        this.FillPersistentAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillAlphaPulseAmplitude:
                        this.FillAlphaPulseAmplitude = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillAlphaPulseFrequency:
                        this.FillAlphaPulseFrequency = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureAnimationSpeedU:
                        this.FillTextureAnimationSpeedU = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureAnimationSpeedV:
                        this.FillTextureAnimationSpeedV = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFallOff:
                        this.EdgeEffectFallOff = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectColor:
                        this.EdgeEffectColor = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                        this.EdgeEffectAlphaFadeInTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                        this.EdgeEffectFullAlphaTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        this.EdgeEffectAlphaFadeOutTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        this.EdgeEffectPersistentAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        this.EdgeEffectAlphaPulseAmplitude = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        this.EdgeEffectAlphaPulseFrequency = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillFullAlphaRatio:
                        this.FillFullAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                        this.EdgeEffectFullAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembraneDestBlendMode:
                        this.MembraneDestBlendMode = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesAnimationStartTime:
                        this.HolesAnimationStartTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesAnimationEndTime:
                        this.HolesAnimationEndTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesAnimationStartValue:
                        this.HolesAnimationStartValue = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesAnimationEndValue:
                        this.HolesAnimationEndValue = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.AmbientSound:
                        this.AmbientSound = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey2:
                        this.FillColorKey2 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey3:
                        this.FillColorKey3 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Unknown4:
                        this.Unknown4 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey1Scale:
                        this.FillColorKey1Scale = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey2Scale:
                        this.FillColorKey2Scale = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey3Scale:
                        this.FillColorKey3Scale = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey1Time:
                        this.FillColorKey1Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey2Time:
                        this.FillColorKey2Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey3Time:
                        this.FillColorKey3Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Unknown5:
                        this.Unknown5 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureScaleU:
                        this.FillTextureScaleU = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureScaleV:
                        this.FillTextureScaleV = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Unknown6:
                        this.Unknown6 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (FillTexture != null) return true;
                if (ParticleShaderTexture != null) return true;
                if (HolesTexture != null) return true;
                if (MembranePaletteTexture != null) return true;
                if (ParticlePaletteTexture != null) return true;
                if (DATA != null) return true;
                if (Unknown != null) return true;
                if (MembraneSourceBlendMode != null) return true;
                if (MembraneBlendOperation != null) return true;
                if (MembraneZTest != null) return true;
                if (FillColorKey1 != null) return true;
                if (FillAlphaFadeInTime != null) return true;
                if (FillFullAlphaTime != null) return true;
                if (FillFadeOutTime != null) return true;
                if (FillPersistentAlphaRatio != null) return true;
                if (FillAlphaPulseAmplitude != null) return true;
                if (FillAlphaPulseFrequency != null) return true;
                if (FillTextureAnimationSpeedU != null) return true;
                if (FillTextureAnimationSpeedV != null) return true;
                if (EdgeEffectFallOff != null) return true;
                if (EdgeEffectColor != null) return true;
                if (EdgeEffectAlphaFadeInTime != null) return true;
                if (EdgeEffectFullAlphaTime != null) return true;
                if (EdgeEffectAlphaFadeOutTime != null) return true;
                if (EdgeEffectPersistentAlphaRatio != null) return true;
                if (EdgeEffectAlphaPulseAmplitude != null) return true;
                if (EdgeEffectAlphaPulseFrequency != null) return true;
                if (FillFullAlphaRatio != null) return true;
                if (EdgeEffectFullAlphaRatio != null) return true;
                if (MembraneDestBlendMode != null) return true;
                if (Unknown2 != null) return true;
                if (HolesAnimationStartTime != null) return true;
                if (HolesAnimationEndTime != null) return true;
                if (HolesAnimationStartValue != null) return true;
                if (HolesAnimationEndValue != null) return true;
                if (Unknown3 != null) return true;
                if (AmbientSound != null) return true;
                if (FillColorKey2 != null) return true;
                if (FillColorKey3 != null) return true;
                if (Unknown4 != null) return true;
                if (FillColorKey1Scale != null) return true;
                if (FillColorKey2Scale != null) return true;
                if (FillColorKey3Scale != null) return true;
                if (FillColorKey1Time != null) return true;
                if (FillColorKey2Time != null) return true;
                if (FillColorKey3Time != null) return true;
                if (Unknown5 != null) return true;
                if (Flags != null) return true;
                if (FillTextureScaleU != null) return true;
                if (FillTextureScaleV != null) return true;
                if (Unknown6 != null) return true;
                if (Model != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(FillTexture, "FillTexture");
                }
                {
                    sb.AppendItem(ParticleShaderTexture, "ParticleShaderTexture");
                }
                {
                    sb.AppendItem(HolesTexture, "HolesTexture");
                }
                {
                    sb.AppendItem(MembranePaletteTexture, "MembranePaletteTexture");
                }
                {
                    sb.AppendItem(ParticlePaletteTexture, "ParticlePaletteTexture");
                }
                {
                    sb.AppendItem(DATA, "DATA");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(MembraneSourceBlendMode, "MembraneSourceBlendMode");
                }
                {
                    sb.AppendItem(MembraneBlendOperation, "MembraneBlendOperation");
                }
                {
                    sb.AppendItem(MembraneZTest, "MembraneZTest");
                }
                {
                    sb.AppendItem(FillColorKey1, "FillColorKey1");
                }
                {
                    sb.AppendItem(FillAlphaFadeInTime, "FillAlphaFadeInTime");
                }
                {
                    sb.AppendItem(FillFullAlphaTime, "FillFullAlphaTime");
                }
                {
                    sb.AppendItem(FillFadeOutTime, "FillFadeOutTime");
                }
                {
                    sb.AppendItem(FillPersistentAlphaRatio, "FillPersistentAlphaRatio");
                }
                {
                    sb.AppendItem(FillAlphaPulseAmplitude, "FillAlphaPulseAmplitude");
                }
                {
                    sb.AppendItem(FillAlphaPulseFrequency, "FillAlphaPulseFrequency");
                }
                {
                    sb.AppendItem(FillTextureAnimationSpeedU, "FillTextureAnimationSpeedU");
                }
                {
                    sb.AppendItem(FillTextureAnimationSpeedV, "FillTextureAnimationSpeedV");
                }
                {
                    sb.AppendItem(EdgeEffectFallOff, "EdgeEffectFallOff");
                }
                {
                    sb.AppendItem(EdgeEffectColor, "EdgeEffectColor");
                }
                {
                    sb.AppendItem(EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
                }
                {
                    sb.AppendItem(EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
                }
                {
                    sb.AppendItem(EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
                }
                {
                    sb.AppendItem(EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
                }
                {
                    sb.AppendItem(EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
                }
                {
                    sb.AppendItem(EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
                }
                {
                    sb.AppendItem(FillFullAlphaRatio, "FillFullAlphaRatio");
                }
                {
                    sb.AppendItem(EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
                }
                {
                    sb.AppendItem(MembraneDestBlendMode, "MembraneDestBlendMode");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
                {
                    sb.AppendItem(HolesAnimationStartTime, "HolesAnimationStartTime");
                }
                {
                    sb.AppendItem(HolesAnimationEndTime, "HolesAnimationEndTime");
                }
                {
                    sb.AppendItem(HolesAnimationStartValue, "HolesAnimationStartValue");
                }
                {
                    sb.AppendItem(HolesAnimationEndValue, "HolesAnimationEndValue");
                }
                {
                    sb.AppendItem(Unknown3, "Unknown3");
                }
                {
                    sb.AppendItem(AmbientSound, "AmbientSound");
                }
                {
                    sb.AppendItem(FillColorKey2, "FillColorKey2");
                }
                {
                    sb.AppendItem(FillColorKey3, "FillColorKey3");
                }
                {
                    sb.AppendItem(Unknown4, "Unknown4");
                }
                {
                    sb.AppendItem(FillColorKey1Scale, "FillColorKey1Scale");
                }
                {
                    sb.AppendItem(FillColorKey2Scale, "FillColorKey2Scale");
                }
                {
                    sb.AppendItem(FillColorKey3Scale, "FillColorKey3Scale");
                }
                {
                    sb.AppendItem(FillColorKey1Time, "FillColorKey1Time");
                }
                {
                    sb.AppendItem(FillColorKey2Time, "FillColorKey2Time");
                }
                {
                    sb.AppendItem(FillColorKey3Time, "FillColorKey3Time");
                }
                {
                    sb.AppendItem(Unknown5, "Unknown5");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(FillTextureScaleU, "FillTextureScaleU");
                }
                {
                    sb.AppendItem(FillTextureScaleV, "FillTextureScaleV");
                }
                {
                    sb.AppendItem(Unknown6, "Unknown6");
                }
                Model?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FillTexture = this.FillTexture.Combine(rhs.FillTexture);
                ret.ParticleShaderTexture = this.ParticleShaderTexture.Combine(rhs.ParticleShaderTexture);
                ret.HolesTexture = this.HolesTexture.Combine(rhs.HolesTexture);
                ret.MembranePaletteTexture = this.MembranePaletteTexture.Combine(rhs.MembranePaletteTexture);
                ret.ParticlePaletteTexture = this.ParticlePaletteTexture.Combine(rhs.ParticlePaletteTexture);
                ret.DATA = this.DATA.Combine(rhs.DATA);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.MembraneSourceBlendMode = this.MembraneSourceBlendMode.Combine(rhs.MembraneSourceBlendMode);
                ret.MembraneBlendOperation = this.MembraneBlendOperation.Combine(rhs.MembraneBlendOperation);
                ret.MembraneZTest = this.MembraneZTest.Combine(rhs.MembraneZTest);
                ret.FillColorKey1 = this.FillColorKey1.Combine(rhs.FillColorKey1);
                ret.FillAlphaFadeInTime = this.FillAlphaFadeInTime.Combine(rhs.FillAlphaFadeInTime);
                ret.FillFullAlphaTime = this.FillFullAlphaTime.Combine(rhs.FillFullAlphaTime);
                ret.FillFadeOutTime = this.FillFadeOutTime.Combine(rhs.FillFadeOutTime);
                ret.FillPersistentAlphaRatio = this.FillPersistentAlphaRatio.Combine(rhs.FillPersistentAlphaRatio);
                ret.FillAlphaPulseAmplitude = this.FillAlphaPulseAmplitude.Combine(rhs.FillAlphaPulseAmplitude);
                ret.FillAlphaPulseFrequency = this.FillAlphaPulseFrequency.Combine(rhs.FillAlphaPulseFrequency);
                ret.FillTextureAnimationSpeedU = this.FillTextureAnimationSpeedU.Combine(rhs.FillTextureAnimationSpeedU);
                ret.FillTextureAnimationSpeedV = this.FillTextureAnimationSpeedV.Combine(rhs.FillTextureAnimationSpeedV);
                ret.EdgeEffectFallOff = this.EdgeEffectFallOff.Combine(rhs.EdgeEffectFallOff);
                ret.EdgeEffectColor = this.EdgeEffectColor.Combine(rhs.EdgeEffectColor);
                ret.EdgeEffectAlphaFadeInTime = this.EdgeEffectAlphaFadeInTime.Combine(rhs.EdgeEffectAlphaFadeInTime);
                ret.EdgeEffectFullAlphaTime = this.EdgeEffectFullAlphaTime.Combine(rhs.EdgeEffectFullAlphaTime);
                ret.EdgeEffectAlphaFadeOutTime = this.EdgeEffectAlphaFadeOutTime.Combine(rhs.EdgeEffectAlphaFadeOutTime);
                ret.EdgeEffectPersistentAlphaRatio = this.EdgeEffectPersistentAlphaRatio.Combine(rhs.EdgeEffectPersistentAlphaRatio);
                ret.EdgeEffectAlphaPulseAmplitude = this.EdgeEffectAlphaPulseAmplitude.Combine(rhs.EdgeEffectAlphaPulseAmplitude);
                ret.EdgeEffectAlphaPulseFrequency = this.EdgeEffectAlphaPulseFrequency.Combine(rhs.EdgeEffectAlphaPulseFrequency);
                ret.FillFullAlphaRatio = this.FillFullAlphaRatio.Combine(rhs.FillFullAlphaRatio);
                ret.EdgeEffectFullAlphaRatio = this.EdgeEffectFullAlphaRatio.Combine(rhs.EdgeEffectFullAlphaRatio);
                ret.MembraneDestBlendMode = this.MembraneDestBlendMode.Combine(rhs.MembraneDestBlendMode);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.HolesAnimationStartTime = this.HolesAnimationStartTime.Combine(rhs.HolesAnimationStartTime);
                ret.HolesAnimationEndTime = this.HolesAnimationEndTime.Combine(rhs.HolesAnimationEndTime);
                ret.HolesAnimationStartValue = this.HolesAnimationStartValue.Combine(rhs.HolesAnimationStartValue);
                ret.HolesAnimationEndValue = this.HolesAnimationEndValue.Combine(rhs.HolesAnimationEndValue);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.AmbientSound = this.AmbientSound.Combine(rhs.AmbientSound);
                ret.FillColorKey2 = this.FillColorKey2.Combine(rhs.FillColorKey2);
                ret.FillColorKey3 = this.FillColorKey3.Combine(rhs.FillColorKey3);
                ret.Unknown4 = this.Unknown4.Combine(rhs.Unknown4);
                ret.FillColorKey1Scale = this.FillColorKey1Scale.Combine(rhs.FillColorKey1Scale);
                ret.FillColorKey2Scale = this.FillColorKey2Scale.Combine(rhs.FillColorKey2Scale);
                ret.FillColorKey3Scale = this.FillColorKey3Scale.Combine(rhs.FillColorKey3Scale);
                ret.FillColorKey1Time = this.FillColorKey1Time.Combine(rhs.FillColorKey1Time);
                ret.FillColorKey2Time = this.FillColorKey2Time.Combine(rhs.FillColorKey2Time);
                ret.FillColorKey3Time = this.FillColorKey3Time.Combine(rhs.FillColorKey3Time);
                ret.Unknown5 = this.Unknown5.Combine(rhs.Unknown5);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.FillTextureScaleU = this.FillTextureScaleU.Combine(rhs.FillTextureScaleU);
                ret.FillTextureScaleV = this.FillTextureScaleV.Combine(rhs.FillTextureScaleV);
                ret.Unknown6 = this.Unknown6.Combine(rhs.Unknown6);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool FillTexture;
            public bool ParticleShaderTexture;
            public bool HolesTexture;
            public bool MembranePaletteTexture;
            public bool ParticlePaletteTexture;
            public bool DATA;
            public bool Unknown;
            public bool MembraneSourceBlendMode;
            public bool MembraneBlendOperation;
            public bool MembraneZTest;
            public bool FillColorKey1;
            public bool FillAlphaFadeInTime;
            public bool FillFullAlphaTime;
            public bool FillFadeOutTime;
            public bool FillPersistentAlphaRatio;
            public bool FillAlphaPulseAmplitude;
            public bool FillAlphaPulseFrequency;
            public bool FillTextureAnimationSpeedU;
            public bool FillTextureAnimationSpeedV;
            public bool EdgeEffectFallOff;
            public bool EdgeEffectColor;
            public bool EdgeEffectAlphaFadeInTime;
            public bool EdgeEffectFullAlphaTime;
            public bool EdgeEffectAlphaFadeOutTime;
            public bool EdgeEffectPersistentAlphaRatio;
            public bool EdgeEffectAlphaPulseAmplitude;
            public bool EdgeEffectAlphaPulseFrequency;
            public bool FillFullAlphaRatio;
            public bool EdgeEffectFullAlphaRatio;
            public bool MembraneDestBlendMode;
            public bool Unknown2;
            public bool HolesAnimationStartTime;
            public bool HolesAnimationEndTime;
            public bool HolesAnimationStartValue;
            public bool HolesAnimationEndValue;
            public bool Unknown3;
            public bool AmbientSound;
            public bool FillColorKey2;
            public bool FillColorKey3;
            public bool Unknown4;
            public bool FillColorKey1Scale;
            public bool FillColorKey2Scale;
            public bool FillColorKey3Scale;
            public bool FillColorKey1Time;
            public bool FillColorKey2Time;
            public bool FillColorKey3Time;
            public bool Unknown5;
            public bool Flags;
            public bool FillTextureScaleU;
            public bool FillTextureScaleV;
            public bool Unknown6;
            public Model.TranslationMask? Model;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.FillTexture = defaultOn;
                this.ParticleShaderTexture = defaultOn;
                this.HolesTexture = defaultOn;
                this.MembranePaletteTexture = defaultOn;
                this.ParticlePaletteTexture = defaultOn;
                this.DATA = defaultOn;
                this.Unknown = defaultOn;
                this.MembraneSourceBlendMode = defaultOn;
                this.MembraneBlendOperation = defaultOn;
                this.MembraneZTest = defaultOn;
                this.FillColorKey1 = defaultOn;
                this.FillAlphaFadeInTime = defaultOn;
                this.FillFullAlphaTime = defaultOn;
                this.FillFadeOutTime = defaultOn;
                this.FillPersistentAlphaRatio = defaultOn;
                this.FillAlphaPulseAmplitude = defaultOn;
                this.FillAlphaPulseFrequency = defaultOn;
                this.FillTextureAnimationSpeedU = defaultOn;
                this.FillTextureAnimationSpeedV = defaultOn;
                this.EdgeEffectFallOff = defaultOn;
                this.EdgeEffectColor = defaultOn;
                this.EdgeEffectAlphaFadeInTime = defaultOn;
                this.EdgeEffectFullAlphaTime = defaultOn;
                this.EdgeEffectAlphaFadeOutTime = defaultOn;
                this.EdgeEffectPersistentAlphaRatio = defaultOn;
                this.EdgeEffectAlphaPulseAmplitude = defaultOn;
                this.EdgeEffectAlphaPulseFrequency = defaultOn;
                this.FillFullAlphaRatio = defaultOn;
                this.EdgeEffectFullAlphaRatio = defaultOn;
                this.MembraneDestBlendMode = defaultOn;
                this.Unknown2 = defaultOn;
                this.HolesAnimationStartTime = defaultOn;
                this.HolesAnimationEndTime = defaultOn;
                this.HolesAnimationStartValue = defaultOn;
                this.HolesAnimationEndValue = defaultOn;
                this.Unknown3 = defaultOn;
                this.AmbientSound = defaultOn;
                this.FillColorKey2 = defaultOn;
                this.FillColorKey3 = defaultOn;
                this.Unknown4 = defaultOn;
                this.FillColorKey1Scale = defaultOn;
                this.FillColorKey2Scale = defaultOn;
                this.FillColorKey3Scale = defaultOn;
                this.FillColorKey1Time = defaultOn;
                this.FillColorKey2Time = defaultOn;
                this.FillColorKey3Time = defaultOn;
                this.Unknown5 = defaultOn;
                this.Flags = defaultOn;
                this.FillTextureScaleU = defaultOn;
                this.FillTextureScaleV = defaultOn;
                this.Unknown6 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((FillTexture, null));
                ret.Add((ParticleShaderTexture, null));
                ret.Add((HolesTexture, null));
                ret.Add((MembranePaletteTexture, null));
                ret.Add((ParticlePaletteTexture, null));
                ret.Add((DATA, null));
                ret.Add((Unknown, null));
                ret.Add((MembraneSourceBlendMode, null));
                ret.Add((MembraneBlendOperation, null));
                ret.Add((MembraneZTest, null));
                ret.Add((FillColorKey1, null));
                ret.Add((FillAlphaFadeInTime, null));
                ret.Add((FillFullAlphaTime, null));
                ret.Add((FillFadeOutTime, null));
                ret.Add((FillPersistentAlphaRatio, null));
                ret.Add((FillAlphaPulseAmplitude, null));
                ret.Add((FillAlphaPulseFrequency, null));
                ret.Add((FillTextureAnimationSpeedU, null));
                ret.Add((FillTextureAnimationSpeedV, null));
                ret.Add((EdgeEffectFallOff, null));
                ret.Add((EdgeEffectColor, null));
                ret.Add((EdgeEffectAlphaFadeInTime, null));
                ret.Add((EdgeEffectFullAlphaTime, null));
                ret.Add((EdgeEffectAlphaFadeOutTime, null));
                ret.Add((EdgeEffectPersistentAlphaRatio, null));
                ret.Add((EdgeEffectAlphaPulseAmplitude, null));
                ret.Add((EdgeEffectAlphaPulseFrequency, null));
                ret.Add((FillFullAlphaRatio, null));
                ret.Add((EdgeEffectFullAlphaRatio, null));
                ret.Add((MembraneDestBlendMode, null));
                ret.Add((Unknown2, null));
                ret.Add((HolesAnimationStartTime, null));
                ret.Add((HolesAnimationEndTime, null));
                ret.Add((HolesAnimationStartValue, null));
                ret.Add((HolesAnimationEndValue, null));
                ret.Add((Unknown3, null));
                ret.Add((AmbientSound, null));
                ret.Add((FillColorKey2, null));
                ret.Add((FillColorKey3, null));
                ret.Add((Unknown4, null));
                ret.Add((FillColorKey1Scale, null));
                ret.Add((FillColorKey2Scale, null));
                ret.Add((FillColorKey3Scale, null));
                ret.Add((FillColorKey1Time, null));
                ret.Add((FillColorKey2Time, null));
                ret.Add((FillColorKey3Time, null));
                ret.Add((Unknown5, null));
                ret.Add((Flags, null));
                ret.Add((FillTextureScaleU, null));
                ret.Add((FillTextureScaleV, null));
                ret.Add((Unknown6, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = EffectShader_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => EffectShaderCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => EffectShaderSetterCommon.Instance.RemapLinks(this, mapping);
        public EffectShader(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private EffectShader(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal EffectShader(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public EffectShader(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public EffectShader(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<EffectShader>.ToString(this);
        }

        protected override Type LinkType => typeof(IEffectShader);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IEffectShaderGetter rhs) return false;
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IEffectShaderGetter? obj)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => EffectShaderBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((EffectShaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static EffectShader CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new EffectShader();
            ((EffectShaderSetterCommon)((IEffectShaderGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out EffectShader item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new EffectShader GetNew()
        {
            return new EffectShader();
        }

    }
    #endregion

    #region Interface
    public partial interface IEffectShader :
        IEffectShaderGetter,
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        ILoquiObjectSetter<IEffectShaderInternal>,
        IModeled
    {
        new String? FillTexture { get; set; }
        new String? ParticleShaderTexture { get; set; }
        new String? HolesTexture { get; set; }
        new String? MembranePaletteTexture { get; set; }
        new String? ParticlePaletteTexture { get; set; }
        new MemorySlice<Byte>? DATA { get; set; }
        new Byte Unknown { get; set; }
        new EffectShader.BlendMode MembraneSourceBlendMode { get; set; }
        new EffectShader.BlendOperation MembraneBlendOperation { get; set; }
        new EffectShader.ZTest MembraneZTest { get; set; }
        new Color FillColorKey1 { get; set; }
        new Single FillAlphaFadeInTime { get; set; }
        new Single FillFullAlphaTime { get; set; }
        new Single FillFadeOutTime { get; set; }
        new Single FillPersistentAlphaRatio { get; set; }
        new Single FillAlphaPulseAmplitude { get; set; }
        new Single FillAlphaPulseFrequency { get; set; }
        new Single FillTextureAnimationSpeedU { get; set; }
        new Single FillTextureAnimationSpeedV { get; set; }
        new Single EdgeEffectFallOff { get; set; }
        new Color EdgeEffectColor { get; set; }
        new Single EdgeEffectAlphaFadeInTime { get; set; }
        new Single EdgeEffectFullAlphaTime { get; set; }
        new Single EdgeEffectAlphaFadeOutTime { get; set; }
        new Single EdgeEffectPersistentAlphaRatio { get; set; }
        new Single EdgeEffectAlphaPulseAmplitude { get; set; }
        new Single EdgeEffectAlphaPulseFrequency { get; set; }
        new Single FillFullAlphaRatio { get; set; }
        new Single EdgeEffectFullAlphaRatio { get; set; }
        new EffectShader.BlendMode MembraneDestBlendMode { get; set; }
        new MemorySlice<Byte> Unknown2 { get; set; }
        new Single HolesAnimationStartTime { get; set; }
        new Single HolesAnimationEndTime { get; set; }
        new Single HolesAnimationStartValue { get; set; }
        new Single HolesAnimationEndValue { get; set; }
        new MemorySlice<Byte> Unknown3 { get; set; }
        new IFormLink<ISoundGetter> AmbientSound { get; set; }
        new Color FillColorKey2 { get; set; }
        new Color FillColorKey3 { get; set; }
        new Byte Unknown4 { get; set; }
        new Single FillColorKey1Scale { get; set; }
        new Single FillColorKey2Scale { get; set; }
        new Single FillColorKey3Scale { get; set; }
        new Single FillColorKey1Time { get; set; }
        new Single FillColorKey2Time { get; set; }
        new Single FillColorKey3Time { get; set; }
        new MemorySlice<Byte> Unknown5 { get; set; }
        new EffectShader.Flag Flags { get; set; }
        new Single FillTextureScaleU { get; set; }
        new Single FillTextureScaleV { get; set; }
        new UInt16 Unknown6 { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
    }

    public partial interface IEffectShaderInternal :
        IFallout4MajorRecordInternal,
        IEffectShader,
        IEffectShaderGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.EFSH)]
    public partial interface IEffectShaderGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IEffectShaderGetter>,
        IMapsToGetter<IEffectShaderGetter>,
        IModeledGetter
    {
        static new ILoquiRegistration StaticRegistration => EffectShader_Registration.Instance;
        String? FillTexture { get; }
        String? ParticleShaderTexture { get; }
        String? HolesTexture { get; }
        String? MembranePaletteTexture { get; }
        String? ParticlePaletteTexture { get; }
        ReadOnlyMemorySlice<Byte>? DATA { get; }
        Byte Unknown { get; }
        EffectShader.BlendMode MembraneSourceBlendMode { get; }
        EffectShader.BlendOperation MembraneBlendOperation { get; }
        EffectShader.ZTest MembraneZTest { get; }
        Color FillColorKey1 { get; }
        Single FillAlphaFadeInTime { get; }
        Single FillFullAlphaTime { get; }
        Single FillFadeOutTime { get; }
        Single FillPersistentAlphaRatio { get; }
        Single FillAlphaPulseAmplitude { get; }
        Single FillAlphaPulseFrequency { get; }
        Single FillTextureAnimationSpeedU { get; }
        Single FillTextureAnimationSpeedV { get; }
        Single EdgeEffectFallOff { get; }
        Color EdgeEffectColor { get; }
        Single EdgeEffectAlphaFadeInTime { get; }
        Single EdgeEffectFullAlphaTime { get; }
        Single EdgeEffectAlphaFadeOutTime { get; }
        Single EdgeEffectPersistentAlphaRatio { get; }
        Single EdgeEffectAlphaPulseAmplitude { get; }
        Single EdgeEffectAlphaPulseFrequency { get; }
        Single FillFullAlphaRatio { get; }
        Single EdgeEffectFullAlphaRatio { get; }
        EffectShader.BlendMode MembraneDestBlendMode { get; }
        ReadOnlyMemorySlice<Byte> Unknown2 { get; }
        Single HolesAnimationStartTime { get; }
        Single HolesAnimationEndTime { get; }
        Single HolesAnimationStartValue { get; }
        Single HolesAnimationEndValue { get; }
        ReadOnlyMemorySlice<Byte> Unknown3 { get; }
        IFormLinkGetter<ISoundGetter> AmbientSound { get; }
        Color FillColorKey2 { get; }
        Color FillColorKey3 { get; }
        Byte Unknown4 { get; }
        Single FillColorKey1Scale { get; }
        Single FillColorKey2Scale { get; }
        Single FillColorKey3Scale { get; }
        Single FillColorKey1Time { get; }
        Single FillColorKey2Time { get; }
        Single FillColorKey3Time { get; }
        ReadOnlyMemorySlice<Byte> Unknown5 { get; }
        EffectShader.Flag Flags { get; }
        Single FillTextureScaleU { get; }
        Single FillTextureScaleV { get; }
        UInt16 Unknown6 { get; }
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class EffectShaderMixIn
    {
        public static void Clear(this IEffectShaderInternal item)
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static EffectShader.Mask<bool> GetEqualsMask(
            this IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IEffectShaderGetter item,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IEffectShaderGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EffectShader.TranslationMask? equalsMask = null)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IEffectShaderInternal lhs,
            IEffectShaderGetter rhs,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = EffectShader.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IEffectShaderInternal lhs,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static EffectShader DeepCopy(
            this IEffectShaderGetter item,
            EffectShader.TranslationMask? copyMask = null)
        {
            return ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static EffectShader DeepCopy(
            this IEffectShaderGetter item,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? copyMask = null)
        {
            return ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static EffectShader DeepCopy(
            this IEffectShaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static EffectShader Duplicate(
            this IEffectShaderGetter item,
            FormKey formKey,
            EffectShader.TranslationMask? copyMask = null)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static EffectShader Duplicate(
            this IEffectShaderGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IEffectShaderInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum EffectShader_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        FillTexture = 7,
        ParticleShaderTexture = 8,
        HolesTexture = 9,
        MembranePaletteTexture = 10,
        ParticlePaletteTexture = 11,
        DATA = 12,
        Unknown = 13,
        MembraneSourceBlendMode = 14,
        MembraneBlendOperation = 15,
        MembraneZTest = 16,
        FillColorKey1 = 17,
        FillAlphaFadeInTime = 18,
        FillFullAlphaTime = 19,
        FillFadeOutTime = 20,
        FillPersistentAlphaRatio = 21,
        FillAlphaPulseAmplitude = 22,
        FillAlphaPulseFrequency = 23,
        FillTextureAnimationSpeedU = 24,
        FillTextureAnimationSpeedV = 25,
        EdgeEffectFallOff = 26,
        EdgeEffectColor = 27,
        EdgeEffectAlphaFadeInTime = 28,
        EdgeEffectFullAlphaTime = 29,
        EdgeEffectAlphaFadeOutTime = 30,
        EdgeEffectPersistentAlphaRatio = 31,
        EdgeEffectAlphaPulseAmplitude = 32,
        EdgeEffectAlphaPulseFrequency = 33,
        FillFullAlphaRatio = 34,
        EdgeEffectFullAlphaRatio = 35,
        MembraneDestBlendMode = 36,
        Unknown2 = 37,
        HolesAnimationStartTime = 38,
        HolesAnimationEndTime = 39,
        HolesAnimationStartValue = 40,
        HolesAnimationEndValue = 41,
        Unknown3 = 42,
        AmbientSound = 43,
        FillColorKey2 = 44,
        FillColorKey3 = 45,
        Unknown4 = 46,
        FillColorKey1Scale = 47,
        FillColorKey2Scale = 48,
        FillColorKey3Scale = 49,
        FillColorKey1Time = 50,
        FillColorKey2Time = 51,
        FillColorKey3Time = 52,
        Unknown5 = 53,
        Flags = 54,
        FillTextureScaleU = 55,
        FillTextureScaleV = 56,
        Unknown6 = 57,
        Model = 58,
    }
    #endregion

    #region Registration
    internal partial class EffectShader_Registration : ILoquiRegistration
    {
        public static readonly EffectShader_Registration Instance = new EffectShader_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 52;

        public const ushort FieldCount = 59;

        public static readonly Type MaskType = typeof(EffectShader.Mask<>);

        public static readonly Type ErrorMaskType = typeof(EffectShader.ErrorMask);

        public static readonly Type ClassType = typeof(EffectShader);

        public static readonly Type GetterType = typeof(IEffectShaderGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IEffectShader);

        public static readonly Type? InternalSetterType = typeof(IEffectShaderInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.EffectShader";

        public const string Name = "EffectShader";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.EFSH;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.EFSH);
            var all = RecordCollection.Factory(
                RecordTypes.EFSH,
                RecordTypes.ICON,
                RecordTypes.ICO2,
                RecordTypes.NAM7,
                RecordTypes.NAM8,
                RecordTypes.NAM9,
                RecordTypes.DATA,
                RecordTypes.DNAM,
                RecordTypes.MODL,
                RecordTypes.MODC,
                RecordTypes.MODT,
                RecordTypes.MODS);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(EffectShaderBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class EffectShaderSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly EffectShaderSetterCommon Instance = new EffectShaderSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IEffectShaderInternal item)
        {
            ClearPartial();
            item.FillTexture = default;
            item.ParticleShaderTexture = default;
            item.HolesTexture = default;
            item.MembranePaletteTexture = default;
            item.ParticlePaletteTexture = default;
            item.DATA = default;
            item.Unknown = default(Byte);
            item.MembraneSourceBlendMode = EffectShader.MembraneSourceBlendModeDefault;
            item.MembraneBlendOperation = EffectShader.MembraneBlendOperationDefault;
            item.MembraneZTest = EffectShader.MembraneZTestDefault;
            item.FillColorKey1 = default(Color);
            item.FillAlphaFadeInTime = default(Single);
            item.FillFullAlphaTime = default(Single);
            item.FillFadeOutTime = default(Single);
            item.FillPersistentAlphaRatio = default(Single);
            item.FillAlphaPulseAmplitude = default(Single);
            item.FillAlphaPulseFrequency = default(Single);
            item.FillTextureAnimationSpeedU = default(Single);
            item.FillTextureAnimationSpeedV = default(Single);
            item.EdgeEffectFallOff = default(Single);
            item.EdgeEffectColor = default(Color);
            item.EdgeEffectAlphaFadeInTime = default(Single);
            item.EdgeEffectFullAlphaTime = default(Single);
            item.EdgeEffectAlphaFadeOutTime = default(Single);
            item.EdgeEffectPersistentAlphaRatio = default(Single);
            item.EdgeEffectAlphaPulseAmplitude = default(Single);
            item.EdgeEffectAlphaPulseFrequency = default(Single);
            item.FillFullAlphaRatio = default(Single);
            item.EdgeEffectFullAlphaRatio = default(Single);
            item.MembraneDestBlendMode = EffectShader.MembraneDestBlendModeDefault;
            item.Unknown2 = new byte[152];
            item.HolesAnimationStartTime = default(Single);
            item.HolesAnimationEndTime = default(Single);
            item.HolesAnimationStartValue = default(Single);
            item.HolesAnimationEndValue = default(Single);
            item.Unknown3 = new byte[44];
            item.AmbientSound.Clear();
            item.FillColorKey2 = default(Color);
            item.FillColorKey3 = default(Color);
            item.Unknown4 = default(Byte);
            item.FillColorKey1Scale = default(Single);
            item.FillColorKey2Scale = default(Single);
            item.FillColorKey3Scale = default(Single);
            item.FillColorKey1Time = default(Single);
            item.FillColorKey2Time = default(Single);
            item.FillColorKey3Time = default(Single);
            item.Unknown5 = new byte[40];
            item.Flags = default(EffectShader.Flag);
            item.FillTextureScaleU = default(Single);
            item.FillTextureScaleV = default(Single);
            item.Unknown6 = default(UInt16);
            item.Model = null;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IEffectShaderInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IEffectShaderInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IEffectShader obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.AmbientSound.Relink(mapping);
            obj.Model?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IEffectShaderInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IEffectShaderInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: EffectShaderBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: EffectShaderBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (EffectShader)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (EffectShader)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class EffectShaderCommon : Fallout4MajorRecordCommon
    {
        public new static readonly EffectShaderCommon Instance = new EffectShaderCommon();

        public EffectShader.Mask<bool> GetEqualsMask(
            IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new EffectShader.Mask<bool>(false);
            ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EffectShader.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.FillTexture = string.Equals(item.FillTexture, rhs.FillTexture);
            ret.ParticleShaderTexture = string.Equals(item.ParticleShaderTexture, rhs.ParticleShaderTexture);
            ret.HolesTexture = string.Equals(item.HolesTexture, rhs.HolesTexture);
            ret.MembranePaletteTexture = string.Equals(item.MembranePaletteTexture, rhs.MembranePaletteTexture);
            ret.ParticlePaletteTexture = string.Equals(item.ParticlePaletteTexture, rhs.ParticlePaletteTexture);
            ret.DATA = MemorySliceExt.SequenceEqual(item.DATA, rhs.DATA);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.MembraneSourceBlendMode = item.MembraneSourceBlendMode == rhs.MembraneSourceBlendMode;
            ret.MembraneBlendOperation = item.MembraneBlendOperation == rhs.MembraneBlendOperation;
            ret.MembraneZTest = item.MembraneZTest == rhs.MembraneZTest;
            ret.FillColorKey1 = item.FillColorKey1.ColorOnlyEquals(rhs.FillColorKey1);
            ret.FillAlphaFadeInTime = item.FillAlphaFadeInTime.EqualsWithin(rhs.FillAlphaFadeInTime);
            ret.FillFullAlphaTime = item.FillFullAlphaTime.EqualsWithin(rhs.FillFullAlphaTime);
            ret.FillFadeOutTime = item.FillFadeOutTime.EqualsWithin(rhs.FillFadeOutTime);
            ret.FillPersistentAlphaRatio = item.FillPersistentAlphaRatio.EqualsWithin(rhs.FillPersistentAlphaRatio);
            ret.FillAlphaPulseAmplitude = item.FillAlphaPulseAmplitude.EqualsWithin(rhs.FillAlphaPulseAmplitude);
            ret.FillAlphaPulseFrequency = item.FillAlphaPulseFrequency.EqualsWithin(rhs.FillAlphaPulseFrequency);
            ret.FillTextureAnimationSpeedU = item.FillTextureAnimationSpeedU.EqualsWithin(rhs.FillTextureAnimationSpeedU);
            ret.FillTextureAnimationSpeedV = item.FillTextureAnimationSpeedV.EqualsWithin(rhs.FillTextureAnimationSpeedV);
            ret.EdgeEffectFallOff = item.EdgeEffectFallOff.EqualsWithin(rhs.EdgeEffectFallOff);
            ret.EdgeEffectColor = item.EdgeEffectColor.ColorOnlyEquals(rhs.EdgeEffectColor);
            ret.EdgeEffectAlphaFadeInTime = item.EdgeEffectAlphaFadeInTime.EqualsWithin(rhs.EdgeEffectAlphaFadeInTime);
            ret.EdgeEffectFullAlphaTime = item.EdgeEffectFullAlphaTime.EqualsWithin(rhs.EdgeEffectFullAlphaTime);
            ret.EdgeEffectAlphaFadeOutTime = item.EdgeEffectAlphaFadeOutTime.EqualsWithin(rhs.EdgeEffectAlphaFadeOutTime);
            ret.EdgeEffectPersistentAlphaRatio = item.EdgeEffectPersistentAlphaRatio.EqualsWithin(rhs.EdgeEffectPersistentAlphaRatio);
            ret.EdgeEffectAlphaPulseAmplitude = item.EdgeEffectAlphaPulseAmplitude.EqualsWithin(rhs.EdgeEffectAlphaPulseAmplitude);
            ret.EdgeEffectAlphaPulseFrequency = item.EdgeEffectAlphaPulseFrequency.EqualsWithin(rhs.EdgeEffectAlphaPulseFrequency);
            ret.FillFullAlphaRatio = item.FillFullAlphaRatio.EqualsWithin(rhs.FillFullAlphaRatio);
            ret.EdgeEffectFullAlphaRatio = item.EdgeEffectFullAlphaRatio.EqualsWithin(rhs.EdgeEffectFullAlphaRatio);
            ret.MembraneDestBlendMode = item.MembraneDestBlendMode == rhs.MembraneDestBlendMode;
            ret.Unknown2 = MemoryExtensions.SequenceEqual(item.Unknown2.Span, rhs.Unknown2.Span);
            ret.HolesAnimationStartTime = item.HolesAnimationStartTime.EqualsWithin(rhs.HolesAnimationStartTime);
            ret.HolesAnimationEndTime = item.HolesAnimationEndTime.EqualsWithin(rhs.HolesAnimationEndTime);
            ret.HolesAnimationStartValue = item.HolesAnimationStartValue.EqualsWithin(rhs.HolesAnimationStartValue);
            ret.HolesAnimationEndValue = item.HolesAnimationEndValue.EqualsWithin(rhs.HolesAnimationEndValue);
            ret.Unknown3 = MemoryExtensions.SequenceEqual(item.Unknown3.Span, rhs.Unknown3.Span);
            ret.AmbientSound = item.AmbientSound.Equals(rhs.AmbientSound);
            ret.FillColorKey2 = item.FillColorKey2.ColorOnlyEquals(rhs.FillColorKey2);
            ret.FillColorKey3 = item.FillColorKey3.ColorOnlyEquals(rhs.FillColorKey3);
            ret.Unknown4 = item.Unknown4 == rhs.Unknown4;
            ret.FillColorKey1Scale = item.FillColorKey1Scale.EqualsWithin(rhs.FillColorKey1Scale);
            ret.FillColorKey2Scale = item.FillColorKey2Scale.EqualsWithin(rhs.FillColorKey2Scale);
            ret.FillColorKey3Scale = item.FillColorKey3Scale.EqualsWithin(rhs.FillColorKey3Scale);
            ret.FillColorKey1Time = item.FillColorKey1Time.EqualsWithin(rhs.FillColorKey1Time);
            ret.FillColorKey2Time = item.FillColorKey2Time.EqualsWithin(rhs.FillColorKey2Time);
            ret.FillColorKey3Time = item.FillColorKey3Time.EqualsWithin(rhs.FillColorKey3Time);
            ret.Unknown5 = MemoryExtensions.SequenceEqual(item.Unknown5.Span, rhs.Unknown5.Span);
            ret.Flags = item.Flags == rhs.Flags;
            ret.FillTextureScaleU = item.FillTextureScaleU.EqualsWithin(rhs.FillTextureScaleU);
            ret.FillTextureScaleV = item.FillTextureScaleV.EqualsWithin(rhs.FillTextureScaleV);
            ret.Unknown6 = item.Unknown6 == rhs.Unknown6;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IEffectShaderGetter item,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IEffectShaderGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"EffectShader =>");
            }
            else
            {
                sb.AppendLine($"{name} (EffectShader) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IEffectShaderGetter item,
            StructuredStringBuilder sb,
            EffectShader.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.FillTexture ?? true)
                && item.FillTexture is {} FillTextureItem)
            {
                sb.AppendItem(FillTextureItem, "FillTexture");
            }
            if ((printMask?.ParticleShaderTexture ?? true)
                && item.ParticleShaderTexture is {} ParticleShaderTextureItem)
            {
                sb.AppendItem(ParticleShaderTextureItem, "ParticleShaderTexture");
            }
            if ((printMask?.HolesTexture ?? true)
                && item.HolesTexture is {} HolesTextureItem)
            {
                sb.AppendItem(HolesTextureItem, "HolesTexture");
            }
            if ((printMask?.MembranePaletteTexture ?? true)
                && item.MembranePaletteTexture is {} MembranePaletteTextureItem)
            {
                sb.AppendItem(MembranePaletteTextureItem, "MembranePaletteTexture");
            }
            if ((printMask?.ParticlePaletteTexture ?? true)
                && item.ParticlePaletteTexture is {} ParticlePaletteTextureItem)
            {
                sb.AppendItem(ParticlePaletteTextureItem, "ParticlePaletteTexture");
            }
            if ((printMask?.DATA ?? true)
                && item.DATA is {} DATAItem)
            {
                sb.AppendLine($"DATA => {SpanExt.ToHexString(DATAItem)}");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.MembraneSourceBlendMode ?? true)
            {
                sb.AppendItem(item.MembraneSourceBlendMode, "MembraneSourceBlendMode");
            }
            if (printMask?.MembraneBlendOperation ?? true)
            {
                sb.AppendItem(item.MembraneBlendOperation, "MembraneBlendOperation");
            }
            if (printMask?.MembraneZTest ?? true)
            {
                sb.AppendItem(item.MembraneZTest, "MembraneZTest");
            }
            if (printMask?.FillColorKey1 ?? true)
            {
                sb.AppendItem(item.FillColorKey1, "FillColorKey1");
            }
            if (printMask?.FillAlphaFadeInTime ?? true)
            {
                sb.AppendItem(item.FillAlphaFadeInTime, "FillAlphaFadeInTime");
            }
            if (printMask?.FillFullAlphaTime ?? true)
            {
                sb.AppendItem(item.FillFullAlphaTime, "FillFullAlphaTime");
            }
            if (printMask?.FillFadeOutTime ?? true)
            {
                sb.AppendItem(item.FillFadeOutTime, "FillFadeOutTime");
            }
            if (printMask?.FillPersistentAlphaRatio ?? true)
            {
                sb.AppendItem(item.FillPersistentAlphaRatio, "FillPersistentAlphaRatio");
            }
            if (printMask?.FillAlphaPulseAmplitude ?? true)
            {
                sb.AppendItem(item.FillAlphaPulseAmplitude, "FillAlphaPulseAmplitude");
            }
            if (printMask?.FillAlphaPulseFrequency ?? true)
            {
                sb.AppendItem(item.FillAlphaPulseFrequency, "FillAlphaPulseFrequency");
            }
            if (printMask?.FillTextureAnimationSpeedU ?? true)
            {
                sb.AppendItem(item.FillTextureAnimationSpeedU, "FillTextureAnimationSpeedU");
            }
            if (printMask?.FillTextureAnimationSpeedV ?? true)
            {
                sb.AppendItem(item.FillTextureAnimationSpeedV, "FillTextureAnimationSpeedV");
            }
            if (printMask?.EdgeEffectFallOff ?? true)
            {
                sb.AppendItem(item.EdgeEffectFallOff, "EdgeEffectFallOff");
            }
            if (printMask?.EdgeEffectColor ?? true)
            {
                sb.AppendItem(item.EdgeEffectColor, "EdgeEffectColor");
            }
            if (printMask?.EdgeEffectAlphaFadeInTime ?? true)
            {
                sb.AppendItem(item.EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
            }
            if (printMask?.EdgeEffectFullAlphaTime ?? true)
            {
                sb.AppendItem(item.EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
            }
            if (printMask?.EdgeEffectAlphaFadeOutTime ?? true)
            {
                sb.AppendItem(item.EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
            }
            if (printMask?.EdgeEffectPersistentAlphaRatio ?? true)
            {
                sb.AppendItem(item.EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
            }
            if (printMask?.EdgeEffectAlphaPulseAmplitude ?? true)
            {
                sb.AppendItem(item.EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
            }
            if (printMask?.EdgeEffectAlphaPulseFrequency ?? true)
            {
                sb.AppendItem(item.EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
            }
            if (printMask?.FillFullAlphaRatio ?? true)
            {
                sb.AppendItem(item.FillFullAlphaRatio, "FillFullAlphaRatio");
            }
            if (printMask?.EdgeEffectFullAlphaRatio ?? true)
            {
                sb.AppendItem(item.EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
            }
            if (printMask?.MembraneDestBlendMode ?? true)
            {
                sb.AppendItem(item.MembraneDestBlendMode, "MembraneDestBlendMode");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendLine($"Unknown2 => {SpanExt.ToHexString(item.Unknown2)}");
            }
            if (printMask?.HolesAnimationStartTime ?? true)
            {
                sb.AppendItem(item.HolesAnimationStartTime, "HolesAnimationStartTime");
            }
            if (printMask?.HolesAnimationEndTime ?? true)
            {
                sb.AppendItem(item.HolesAnimationEndTime, "HolesAnimationEndTime");
            }
            if (printMask?.HolesAnimationStartValue ?? true)
            {
                sb.AppendItem(item.HolesAnimationStartValue, "HolesAnimationStartValue");
            }
            if (printMask?.HolesAnimationEndValue ?? true)
            {
                sb.AppendItem(item.HolesAnimationEndValue, "HolesAnimationEndValue");
            }
            if (printMask?.Unknown3 ?? true)
            {
                sb.AppendLine($"Unknown3 => {SpanExt.ToHexString(item.Unknown3)}");
            }
            if (printMask?.AmbientSound ?? true)
            {
                sb.AppendItem(item.AmbientSound.FormKey, "AmbientSound");
            }
            if (printMask?.FillColorKey2 ?? true)
            {
                sb.AppendItem(item.FillColorKey2, "FillColorKey2");
            }
            if (printMask?.FillColorKey3 ?? true)
            {
                sb.AppendItem(item.FillColorKey3, "FillColorKey3");
            }
            if (printMask?.Unknown4 ?? true)
            {
                sb.AppendItem(item.Unknown4, "Unknown4");
            }
            if (printMask?.FillColorKey1Scale ?? true)
            {
                sb.AppendItem(item.FillColorKey1Scale, "FillColorKey1Scale");
            }
            if (printMask?.FillColorKey2Scale ?? true)
            {
                sb.AppendItem(item.FillColorKey2Scale, "FillColorKey2Scale");
            }
            if (printMask?.FillColorKey3Scale ?? true)
            {
                sb.AppendItem(item.FillColorKey3Scale, "FillColorKey3Scale");
            }
            if (printMask?.FillColorKey1Time ?? true)
            {
                sb.AppendItem(item.FillColorKey1Time, "FillColorKey1Time");
            }
            if (printMask?.FillColorKey2Time ?? true)
            {
                sb.AppendItem(item.FillColorKey2Time, "FillColorKey2Time");
            }
            if (printMask?.FillColorKey3Time ?? true)
            {
                sb.AppendItem(item.FillColorKey3Time, "FillColorKey3Time");
            }
            if (printMask?.Unknown5 ?? true)
            {
                sb.AppendLine($"Unknown5 => {SpanExt.ToHexString(item.Unknown5)}");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.FillTextureScaleU ?? true)
            {
                sb.AppendItem(item.FillTextureScaleU, "FillTextureScaleU");
            }
            if (printMask?.FillTextureScaleV ?? true)
            {
                sb.AppendItem(item.FillTextureScaleV, "FillTextureScaleV");
            }
            if (printMask?.Unknown6 ?? true)
            {
                sb.AppendItem(item.Unknown6, "Unknown6");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
        }
        
        public static EffectShader_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (EffectShader_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (EffectShader_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (EffectShader_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (EffectShader_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (EffectShader_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (EffectShader_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (EffectShader_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new EffectShader_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (EffectShader_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IEffectShaderGetter? lhs,
            IEffectShaderGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTexture) ?? true))
            {
                if (!string.Equals(lhs.FillTexture, rhs.FillTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderTexture) ?? true))
            {
                if (!string.Equals(lhs.ParticleShaderTexture, rhs.ParticleShaderTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesTexture) ?? true))
            {
                if (!string.Equals(lhs.HolesTexture, rhs.HolesTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembranePaletteTexture) ?? true))
            {
                if (!string.Equals(lhs.MembranePaletteTexture, rhs.MembranePaletteTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticlePaletteTexture) ?? true))
            {
                if (!string.Equals(lhs.ParticlePaletteTexture, rhs.ParticlePaletteTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.DATA) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DATA, rhs.DATA)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneSourceBlendMode) ?? true))
            {
                if (lhs.MembraneSourceBlendMode != rhs.MembraneSourceBlendMode) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneBlendOperation) ?? true))
            {
                if (lhs.MembraneBlendOperation != rhs.MembraneBlendOperation) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneZTest) ?? true))
            {
                if (lhs.MembraneZTest != rhs.MembraneZTest) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey1) ?? true))
            {
                if (!lhs.FillColorKey1.ColorOnlyEquals(rhs.FillColorKey1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillAlphaFadeInTime) ?? true))
            {
                if (!lhs.FillAlphaFadeInTime.EqualsWithin(rhs.FillAlphaFadeInTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillFullAlphaTime) ?? true))
            {
                if (!lhs.FillFullAlphaTime.EqualsWithin(rhs.FillFullAlphaTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillFadeOutTime) ?? true))
            {
                if (!lhs.FillFadeOutTime.EqualsWithin(rhs.FillFadeOutTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillPersistentAlphaRatio) ?? true))
            {
                if (!lhs.FillPersistentAlphaRatio.EqualsWithin(rhs.FillPersistentAlphaRatio)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillAlphaPulseAmplitude) ?? true))
            {
                if (!lhs.FillAlphaPulseAmplitude.EqualsWithin(rhs.FillAlphaPulseAmplitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillAlphaPulseFrequency) ?? true))
            {
                if (!lhs.FillAlphaPulseFrequency.EqualsWithin(rhs.FillAlphaPulseFrequency)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureAnimationSpeedU) ?? true))
            {
                if (!lhs.FillTextureAnimationSpeedU.EqualsWithin(rhs.FillTextureAnimationSpeedU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureAnimationSpeedV) ?? true))
            {
                if (!lhs.FillTextureAnimationSpeedV.EqualsWithin(rhs.FillTextureAnimationSpeedV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFallOff) ?? true))
            {
                if (!lhs.EdgeEffectFallOff.EqualsWithin(rhs.EdgeEffectFallOff)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectColor) ?? true))
            {
                if (!lhs.EdgeEffectColor.ColorOnlyEquals(rhs.EdgeEffectColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime) ?? true))
            {
                if (!lhs.EdgeEffectAlphaFadeInTime.EqualsWithin(rhs.EdgeEffectAlphaFadeInTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime) ?? true))
            {
                if (!lhs.EdgeEffectFullAlphaTime.EqualsWithin(rhs.EdgeEffectFullAlphaTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime) ?? true))
            {
                if (!lhs.EdgeEffectAlphaFadeOutTime.EqualsWithin(rhs.EdgeEffectAlphaFadeOutTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio) ?? true))
            {
                if (!lhs.EdgeEffectPersistentAlphaRatio.EqualsWithin(rhs.EdgeEffectPersistentAlphaRatio)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude) ?? true))
            {
                if (!lhs.EdgeEffectAlphaPulseAmplitude.EqualsWithin(rhs.EdgeEffectAlphaPulseAmplitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency) ?? true))
            {
                if (!lhs.EdgeEffectAlphaPulseFrequency.EqualsWithin(rhs.EdgeEffectAlphaPulseFrequency)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillFullAlphaRatio) ?? true))
            {
                if (!lhs.FillFullAlphaRatio.EqualsWithin(rhs.FillFullAlphaRatio)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio) ?? true))
            {
                if (!lhs.EdgeEffectFullAlphaRatio.EqualsWithin(rhs.EdgeEffectFullAlphaRatio)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneDestBlendMode) ?? true))
            {
                if (lhs.MembraneDestBlendMode != rhs.MembraneDestBlendMode) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown2) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown2.Span, rhs.Unknown2.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAnimationStartTime) ?? true))
            {
                if (!lhs.HolesAnimationStartTime.EqualsWithin(rhs.HolesAnimationStartTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAnimationEndTime) ?? true))
            {
                if (!lhs.HolesAnimationEndTime.EqualsWithin(rhs.HolesAnimationEndTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAnimationStartValue) ?? true))
            {
                if (!lhs.HolesAnimationStartValue.EqualsWithin(rhs.HolesAnimationStartValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAnimationEndValue) ?? true))
            {
                if (!lhs.HolesAnimationEndValue.EqualsWithin(rhs.HolesAnimationEndValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown3) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown3.Span, rhs.Unknown3.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AmbientSound) ?? true))
            {
                if (!lhs.AmbientSound.Equals(rhs.AmbientSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey2) ?? true))
            {
                if (!lhs.FillColorKey2.ColorOnlyEquals(rhs.FillColorKey2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey3) ?? true))
            {
                if (!lhs.FillColorKey3.ColorOnlyEquals(rhs.FillColorKey3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown4) ?? true))
            {
                if (lhs.Unknown4 != rhs.Unknown4) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey1Scale) ?? true))
            {
                if (!lhs.FillColorKey1Scale.EqualsWithin(rhs.FillColorKey1Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey2Scale) ?? true))
            {
                if (!lhs.FillColorKey2Scale.EqualsWithin(rhs.FillColorKey2Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey3Scale) ?? true))
            {
                if (!lhs.FillColorKey3Scale.EqualsWithin(rhs.FillColorKey3Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey1Time) ?? true))
            {
                if (!lhs.FillColorKey1Time.EqualsWithin(rhs.FillColorKey1Time)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey2Time) ?? true))
            {
                if (!lhs.FillColorKey2Time.EqualsWithin(rhs.FillColorKey2Time)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey3Time) ?? true))
            {
                if (!lhs.FillColorKey3Time.EqualsWithin(rhs.FillColorKey3Time)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown5) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown5.Span, rhs.Unknown5.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureScaleU) ?? true))
            {
                if (!lhs.FillTextureScaleU.EqualsWithin(rhs.FillTextureScaleU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureScaleV) ?? true))
            {
                if (!lhs.FillTextureScaleV.EqualsWithin(rhs.FillTextureScaleV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown6) ?? true))
            {
                if (lhs.Unknown6 != rhs.Unknown6) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)EffectShader_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IEffectShaderGetter?)lhs,
                rhs: rhs as IEffectShaderGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IEffectShaderGetter?)lhs,
                rhs: rhs as IEffectShaderGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IEffectShaderGetter item)
        {
            var hash = new HashCode();
            if (item.FillTexture is {} FillTextureitem)
            {
                hash.Add(FillTextureitem);
            }
            if (item.ParticleShaderTexture is {} ParticleShaderTextureitem)
            {
                hash.Add(ParticleShaderTextureitem);
            }
            if (item.HolesTexture is {} HolesTextureitem)
            {
                hash.Add(HolesTextureitem);
            }
            if (item.MembranePaletteTexture is {} MembranePaletteTextureitem)
            {
                hash.Add(MembranePaletteTextureitem);
            }
            if (item.ParticlePaletteTexture is {} ParticlePaletteTextureitem)
            {
                hash.Add(ParticlePaletteTextureitem);
            }
            if (item.DATA is {} DATAItem)
            {
                hash.Add(DATAItem);
            }
            hash.Add(item.Unknown);
            hash.Add(item.MembraneSourceBlendMode);
            hash.Add(item.MembraneBlendOperation);
            hash.Add(item.MembraneZTest);
            hash.Add(item.FillColorKey1);
            hash.Add(item.FillAlphaFadeInTime);
            hash.Add(item.FillFullAlphaTime);
            hash.Add(item.FillFadeOutTime);
            hash.Add(item.FillPersistentAlphaRatio);
            hash.Add(item.FillAlphaPulseAmplitude);
            hash.Add(item.FillAlphaPulseFrequency);
            hash.Add(item.FillTextureAnimationSpeedU);
            hash.Add(item.FillTextureAnimationSpeedV);
            hash.Add(item.EdgeEffectFallOff);
            hash.Add(item.EdgeEffectColor);
            hash.Add(item.EdgeEffectAlphaFadeInTime);
            hash.Add(item.EdgeEffectFullAlphaTime);
            hash.Add(item.EdgeEffectAlphaFadeOutTime);
            hash.Add(item.EdgeEffectPersistentAlphaRatio);
            hash.Add(item.EdgeEffectAlphaPulseAmplitude);
            hash.Add(item.EdgeEffectAlphaPulseFrequency);
            hash.Add(item.FillFullAlphaRatio);
            hash.Add(item.EdgeEffectFullAlphaRatio);
            hash.Add(item.MembraneDestBlendMode);
            hash.Add(item.Unknown2);
            hash.Add(item.HolesAnimationStartTime);
            hash.Add(item.HolesAnimationEndTime);
            hash.Add(item.HolesAnimationStartValue);
            hash.Add(item.HolesAnimationEndValue);
            hash.Add(item.Unknown3);
            hash.Add(item.AmbientSound);
            hash.Add(item.FillColorKey2);
            hash.Add(item.FillColorKey3);
            hash.Add(item.Unknown4);
            hash.Add(item.FillColorKey1Scale);
            hash.Add(item.FillColorKey2Scale);
            hash.Add(item.FillColorKey3Scale);
            hash.Add(item.FillColorKey1Time);
            hash.Add(item.FillColorKey2Time);
            hash.Add(item.FillColorKey3Time);
            hash.Add(item.Unknown5);
            hash.Add(item.Flags);
            hash.Add(item.FillTextureScaleU);
            hash.Add(item.FillTextureScaleV);
            hash.Add(item.Unknown6);
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IEffectShaderGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IEffectShaderGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return EffectShader.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IEffectShaderGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.AmbientSound);
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public EffectShader Duplicate(
            IEffectShaderGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new EffectShader(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IEffectShaderGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IEffectShaderGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class EffectShaderSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly EffectShaderSetterTranslationCommon Instance = new EffectShaderSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IEffectShaderInternal item,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IEffectShader item,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTexture) ?? true))
            {
                item.FillTexture = rhs.FillTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderTexture) ?? true))
            {
                item.ParticleShaderTexture = rhs.ParticleShaderTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesTexture) ?? true))
            {
                item.HolesTexture = rhs.HolesTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembranePaletteTexture) ?? true))
            {
                item.MembranePaletteTexture = rhs.MembranePaletteTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticlePaletteTexture) ?? true))
            {
                item.ParticlePaletteTexture = rhs.ParticlePaletteTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.DATA) ?? true))
            {
                if(rhs.DATA is {} DATArhs)
                {
                    item.DATA = DATArhs.ToArray();
                }
                else
                {
                    item.DATA = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneSourceBlendMode) ?? true))
            {
                item.MembraneSourceBlendMode = rhs.MembraneSourceBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneBlendOperation) ?? true))
            {
                item.MembraneBlendOperation = rhs.MembraneBlendOperation;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneZTest) ?? true))
            {
                item.MembraneZTest = rhs.MembraneZTest;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey1) ?? true))
            {
                item.FillColorKey1 = rhs.FillColorKey1;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillAlphaFadeInTime) ?? true))
            {
                item.FillAlphaFadeInTime = rhs.FillAlphaFadeInTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillFullAlphaTime) ?? true))
            {
                item.FillFullAlphaTime = rhs.FillFullAlphaTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillFadeOutTime) ?? true))
            {
                item.FillFadeOutTime = rhs.FillFadeOutTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillPersistentAlphaRatio) ?? true))
            {
                item.FillPersistentAlphaRatio = rhs.FillPersistentAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillAlphaPulseAmplitude) ?? true))
            {
                item.FillAlphaPulseAmplitude = rhs.FillAlphaPulseAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillAlphaPulseFrequency) ?? true))
            {
                item.FillAlphaPulseFrequency = rhs.FillAlphaPulseFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureAnimationSpeedU) ?? true))
            {
                item.FillTextureAnimationSpeedU = rhs.FillTextureAnimationSpeedU;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureAnimationSpeedV) ?? true))
            {
                item.FillTextureAnimationSpeedV = rhs.FillTextureAnimationSpeedV;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFallOff) ?? true))
            {
                item.EdgeEffectFallOff = rhs.EdgeEffectFallOff;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectColor) ?? true))
            {
                item.EdgeEffectColor = rhs.EdgeEffectColor;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime) ?? true))
            {
                item.EdgeEffectAlphaFadeInTime = rhs.EdgeEffectAlphaFadeInTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime) ?? true))
            {
                item.EdgeEffectFullAlphaTime = rhs.EdgeEffectFullAlphaTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime) ?? true))
            {
                item.EdgeEffectAlphaFadeOutTime = rhs.EdgeEffectAlphaFadeOutTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio) ?? true))
            {
                item.EdgeEffectPersistentAlphaRatio = rhs.EdgeEffectPersistentAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude) ?? true))
            {
                item.EdgeEffectAlphaPulseAmplitude = rhs.EdgeEffectAlphaPulseAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency) ?? true))
            {
                item.EdgeEffectAlphaPulseFrequency = rhs.EdgeEffectAlphaPulseFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillFullAlphaRatio) ?? true))
            {
                item.FillFullAlphaRatio = rhs.FillFullAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio) ?? true))
            {
                item.EdgeEffectFullAlphaRatio = rhs.EdgeEffectFullAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneDestBlendMode) ?? true))
            {
                item.MembraneDestBlendMode = rhs.MembraneDestBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAnimationStartTime) ?? true))
            {
                item.HolesAnimationStartTime = rhs.HolesAnimationStartTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAnimationEndTime) ?? true))
            {
                item.HolesAnimationEndTime = rhs.HolesAnimationEndTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAnimationStartValue) ?? true))
            {
                item.HolesAnimationStartValue = rhs.HolesAnimationStartValue;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAnimationEndValue) ?? true))
            {
                item.HolesAnimationEndValue = rhs.HolesAnimationEndValue;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AmbientSound) ?? true))
            {
                item.AmbientSound.SetTo(rhs.AmbientSound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey2) ?? true))
            {
                item.FillColorKey2 = rhs.FillColorKey2;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey3) ?? true))
            {
                item.FillColorKey3 = rhs.FillColorKey3;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown4) ?? true))
            {
                item.Unknown4 = rhs.Unknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey1Scale) ?? true))
            {
                item.FillColorKey1Scale = rhs.FillColorKey1Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey2Scale) ?? true))
            {
                item.FillColorKey2Scale = rhs.FillColorKey2Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey3Scale) ?? true))
            {
                item.FillColorKey3Scale = rhs.FillColorKey3Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey1Time) ?? true))
            {
                item.FillColorKey1Time = rhs.FillColorKey1Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey2Time) ?? true))
            {
                item.FillColorKey2Time = rhs.FillColorKey2Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey3Time) ?? true))
            {
                item.FillColorKey3Time = rhs.FillColorKey3Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown5) ?? true))
            {
                item.Unknown5 = rhs.Unknown5.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureScaleU) ?? true))
            {
                item.FillTextureScaleU = rhs.FillTextureScaleU;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureScaleV) ?? true))
            {
                item.FillTextureScaleV = rhs.FillTextureScaleV;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown6) ?? true))
            {
                item.Unknown6 = rhs.Unknown6;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)EffectShader_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IEffectShader item,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IEffectShaderInternal)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IEffectShader)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IEffectShaderInternal)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IEffectShader)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public EffectShader DeepCopy(
            IEffectShaderGetter item,
            EffectShader.TranslationMask? copyMask = null)
        {
            EffectShader ret = (EffectShader)((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetNew();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public EffectShader DeepCopy(
            IEffectShaderGetter item,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            EffectShader ret = (EffectShader)((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetNew();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = EffectShader.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public EffectShader DeepCopy(
            IEffectShaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            EffectShader ret = (EffectShader)((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetNew();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class EffectShader
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectShader_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => EffectShader_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => EffectShaderCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return EffectShaderSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => EffectShaderSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class EffectShaderBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly EffectShaderBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IEffectShaderGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FillTexture,
                header: translationParams.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ParticleShaderTexture,
                header: translationParams.ConvertToCustom(RecordTypes.ICO2),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HolesTexture,
                header: translationParams.ConvertToCustom(RecordTypes.NAM7),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MembranePaletteTexture,
                header: translationParams.ConvertToCustom(RecordTypes.NAM8),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ParticlePaletteTexture,
                header: translationParams.ConvertToCustom(RecordTypes.NAM9),
                binaryType: StringBinaryType.NullTerminate);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DATA,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DNAM)))
            {
                if (writer.MetaData.FormVersion!.Value < 106)
                {
                    writer.Write(item.Unknown);
                }
                EnumBinaryTranslation<EffectShader.BlendMode, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.MembraneSourceBlendMode,
                    length: 4);
                EnumBinaryTranslation<EffectShader.BlendOperation, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.MembraneBlendOperation,
                    length: 4);
                EnumBinaryTranslation<EffectShader.ZTest, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.MembraneZTest,
                    length: 4);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FillColorKey1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillAlphaFadeInTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillFullAlphaTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillFadeOutTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillPersistentAlphaRatio);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillAlphaPulseAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillAlphaPulseFrequency);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillTextureAnimationSpeedU);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillTextureAnimationSpeedV);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectFallOff);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectColor);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectAlphaFadeInTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectFullAlphaTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectAlphaFadeOutTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectPersistentAlphaRatio);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectAlphaPulseAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectAlphaPulseFrequency);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillFullAlphaRatio);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectFullAlphaRatio);
                EnumBinaryTranslation<EffectShader.BlendMode, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.MembraneDestBlendMode,
                    length: 4);
                if (writer.MetaData.FormVersion!.Value < 106)
                {
                    ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.Unknown2);
                }
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HolesAnimationStartTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HolesAnimationEndTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HolesAnimationStartValue);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HolesAnimationEndValue);
                if (writer.MetaData.FormVersion!.Value < 106)
                {
                    ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.Unknown3);
                }
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AmbientSound);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FillColorKey2);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FillColorKey3);
                if (writer.MetaData.FormVersion!.Value >= 106)
                {
                    writer.Write(item.Unknown4);
                }
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillColorKey1Scale);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillColorKey2Scale);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillColorKey3Scale);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillColorKey1Time);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillColorKey2Time);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillColorKey3Time);
                if (writer.MetaData.FormVersion!.Value < 106)
                {
                    ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.Unknown5);
                }
                EnumBinaryTranslation<EffectShader.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillTextureScaleU);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillTextureScaleV);
                if (writer.MetaData.FormVersion!.Value < 106)
                {
                    writer.Write(item.Unknown6);
                }
            }
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            IEffectShaderGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.EFSH,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IEffectShaderGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IEffectShaderGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IEffectShaderGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class EffectShaderBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly EffectShaderBinaryCreateTranslation Instance = new EffectShaderBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.EFSH;
        public static ParseResult FillBinaryRecordTypes(
            IEffectShaderInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FillTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)EffectShader_FieldIndex.FillTexture;
                }
                case RecordTypeInts.ICO2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ParticleShaderTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)EffectShader_FieldIndex.ParticleShaderTexture;
                }
                case RecordTypeInts.NAM7:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HolesTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)EffectShader_FieldIndex.HolesTexture;
                }
                case RecordTypeInts.NAM8:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MembranePaletteTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)EffectShader_FieldIndex.MembranePaletteTexture;
                }
                case RecordTypeInts.NAM9:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ParticlePaletteTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)EffectShader_FieldIndex.ParticlePaletteTexture;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DATA = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)EffectShader_FieldIndex.DATA;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    if (frame.MetaData.FormVersion!.Value < 106)
                    {
                        item.Unknown = dataFrame.ReadUInt8();
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.MembraneSourceBlendMode = EnumBinaryTranslation<EffectShader.BlendMode, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.MembraneBlendOperation = EnumBinaryTranslation<EffectShader.BlendOperation, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.MembraneZTest = EnumBinaryTranslation<EffectShader.ZTest, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey1 = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillAlphaFadeInTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillFullAlphaTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillFadeOutTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillPersistentAlphaRatio = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillAlphaPulseAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillAlphaPulseFrequency = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillTextureAnimationSpeedU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillTextureAnimationSpeedV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectFallOff = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectColor = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectAlphaFadeInTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectFullAlphaTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectAlphaFadeOutTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectPersistentAlphaRatio = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectAlphaPulseAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectAlphaPulseFrequency = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillFullAlphaRatio = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectFullAlphaRatio = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MembraneDestBlendMode = EnumBinaryTranslation<EffectShader.BlendMode, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (frame.MetaData.FormVersion!.Value < 106)
                    {
                        item.Unknown2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(152));
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.HolesAnimationStartTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HolesAnimationEndTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HolesAnimationStartValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HolesAnimationEndValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (frame.MetaData.FormVersion!.Value < 106)
                    {
                        item.Unknown3 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(44));
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.AmbientSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey2 = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey3 = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 1) return null;
                    if (frame.MetaData.FormVersion!.Value >= 106)
                    {
                        item.Unknown4 = dataFrame.ReadUInt8();
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey1Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey2Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey3Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey1Time = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey2Time = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey3Time = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (frame.MetaData.FormVersion!.Value < 106)
                    {
                        item.Unknown5 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(40));
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.Flags = EnumBinaryTranslation<EffectShader.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillTextureScaleU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillTextureScaleV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 2) return null;
                    if (frame.MetaData.FormVersion!.Value < 106)
                    {
                        item.Unknown6 = dataFrame.ReadUInt16();
                    }
                    return (int)EffectShader_FieldIndex.Unknown6;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MODS:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)EffectShader_FieldIndex.Model;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class EffectShaderBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class EffectShaderBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IEffectShaderGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectShader_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => EffectShader_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => EffectShaderCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => EffectShaderSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => EffectShaderCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => EffectShaderBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((EffectShaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IEffectShader);


        #region FillTexture
        private int? _FillTextureLocation;
        public String? FillTexture => _FillTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FillTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region ParticleShaderTexture
        private int? _ParticleShaderTextureLocation;
        public String? ParticleShaderTexture => _ParticleShaderTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ParticleShaderTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region HolesTexture
        private int? _HolesTextureLocation;
        public String? HolesTexture => _HolesTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HolesTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region MembranePaletteTexture
        private int? _MembranePaletteTextureLocation;
        public String? MembranePaletteTexture => _MembranePaletteTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MembranePaletteTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region ParticlePaletteTexture
        private int? _ParticlePaletteTextureLocation;
        public String? ParticlePaletteTexture => _ParticlePaletteTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ParticlePaletteTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region DATA
        private int? _DATALocation;
        public ReadOnlyMemorySlice<Byte>? DATA => _DATALocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DATALocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        private RangeInt32? _DNAMLocation;
        #region Unknown
        private int _UnknownLocation => _DNAMLocation!.Value.Min;
        private bool _Unknown_IsSet => _DNAMLocation.HasValue && _package.FormVersion!.FormVersion!.Value < 106;
        public Byte Unknown => _Unknown_IsSet ? _recordData.Span[_UnknownLocation] : default;
        int UnknownVersioningOffset => _package.FormVersion!.FormVersion!.Value >= 106 ? -1 : 0;
        #endregion
        #region MembraneSourceBlendMode
        private int _MembraneSourceBlendModeLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x1;
        private bool _MembraneSourceBlendMode_IsSet => _DNAMLocation.HasValue;
        public EffectShader.BlendMode MembraneSourceBlendMode => _MembraneSourceBlendMode_IsSet ? (EffectShader.BlendMode)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_MembraneSourceBlendModeLocation, 0x4)) : default;
        #endregion
        #region MembraneBlendOperation
        private int _MembraneBlendOperationLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x5;
        private bool _MembraneBlendOperation_IsSet => _DNAMLocation.HasValue;
        public EffectShader.BlendOperation MembraneBlendOperation => _MembraneBlendOperation_IsSet ? (EffectShader.BlendOperation)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_MembraneBlendOperationLocation, 0x4)) : default;
        #endregion
        #region MembraneZTest
        private int _MembraneZTestLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x9;
        private bool _MembraneZTest_IsSet => _DNAMLocation.HasValue;
        public EffectShader.ZTest MembraneZTest => _MembraneZTest_IsSet ? (EffectShader.ZTest)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_MembraneZTestLocation, 0x4)) : default;
        #endregion
        #region FillColorKey1
        private int _FillColorKey1Location => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0xD;
        private bool _FillColorKey1_IsSet => _DNAMLocation.HasValue;
        public Color FillColorKey1 => _FillColorKey1_IsSet ? _recordData.Slice(_FillColorKey1Location, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region FillAlphaFadeInTime
        private int _FillAlphaFadeInTimeLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x11;
        private bool _FillAlphaFadeInTime_IsSet => _DNAMLocation.HasValue;
        public Single FillAlphaFadeInTime => _FillAlphaFadeInTime_IsSet ? _recordData.Slice(_FillAlphaFadeInTimeLocation, 4).Float() : default(Single);
        #endregion
        #region FillFullAlphaTime
        private int _FillFullAlphaTimeLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x15;
        private bool _FillFullAlphaTime_IsSet => _DNAMLocation.HasValue;
        public Single FillFullAlphaTime => _FillFullAlphaTime_IsSet ? _recordData.Slice(_FillFullAlphaTimeLocation, 4).Float() : default(Single);
        #endregion
        #region FillFadeOutTime
        private int _FillFadeOutTimeLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x19;
        private bool _FillFadeOutTime_IsSet => _DNAMLocation.HasValue;
        public Single FillFadeOutTime => _FillFadeOutTime_IsSet ? _recordData.Slice(_FillFadeOutTimeLocation, 4).Float() : default(Single);
        #endregion
        #region FillPersistentAlphaRatio
        private int _FillPersistentAlphaRatioLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x1D;
        private bool _FillPersistentAlphaRatio_IsSet => _DNAMLocation.HasValue;
        public Single FillPersistentAlphaRatio => _FillPersistentAlphaRatio_IsSet ? _recordData.Slice(_FillPersistentAlphaRatioLocation, 4).Float() : default(Single);
        #endregion
        #region FillAlphaPulseAmplitude
        private int _FillAlphaPulseAmplitudeLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x21;
        private bool _FillAlphaPulseAmplitude_IsSet => _DNAMLocation.HasValue;
        public Single FillAlphaPulseAmplitude => _FillAlphaPulseAmplitude_IsSet ? _recordData.Slice(_FillAlphaPulseAmplitudeLocation, 4).Float() : default(Single);
        #endregion
        #region FillAlphaPulseFrequency
        private int _FillAlphaPulseFrequencyLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x25;
        private bool _FillAlphaPulseFrequency_IsSet => _DNAMLocation.HasValue;
        public Single FillAlphaPulseFrequency => _FillAlphaPulseFrequency_IsSet ? _recordData.Slice(_FillAlphaPulseFrequencyLocation, 4).Float() : default(Single);
        #endregion
        #region FillTextureAnimationSpeedU
        private int _FillTextureAnimationSpeedULocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x29;
        private bool _FillTextureAnimationSpeedU_IsSet => _DNAMLocation.HasValue;
        public Single FillTextureAnimationSpeedU => _FillTextureAnimationSpeedU_IsSet ? _recordData.Slice(_FillTextureAnimationSpeedULocation, 4).Float() : default(Single);
        #endregion
        #region FillTextureAnimationSpeedV
        private int _FillTextureAnimationSpeedVLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x2D;
        private bool _FillTextureAnimationSpeedV_IsSet => _DNAMLocation.HasValue;
        public Single FillTextureAnimationSpeedV => _FillTextureAnimationSpeedV_IsSet ? _recordData.Slice(_FillTextureAnimationSpeedVLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectFallOff
        private int _EdgeEffectFallOffLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x31;
        private bool _EdgeEffectFallOff_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectFallOff => _EdgeEffectFallOff_IsSet ? _recordData.Slice(_EdgeEffectFallOffLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectColor
        private int _EdgeEffectColorLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x35;
        private bool _EdgeEffectColor_IsSet => _DNAMLocation.HasValue;
        public Color EdgeEffectColor => _EdgeEffectColor_IsSet ? _recordData.Slice(_EdgeEffectColorLocation, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region EdgeEffectAlphaFadeInTime
        private int _EdgeEffectAlphaFadeInTimeLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x39;
        private bool _EdgeEffectAlphaFadeInTime_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectAlphaFadeInTime => _EdgeEffectAlphaFadeInTime_IsSet ? _recordData.Slice(_EdgeEffectAlphaFadeInTimeLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectFullAlphaTime
        private int _EdgeEffectFullAlphaTimeLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x3D;
        private bool _EdgeEffectFullAlphaTime_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectFullAlphaTime => _EdgeEffectFullAlphaTime_IsSet ? _recordData.Slice(_EdgeEffectFullAlphaTimeLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectAlphaFadeOutTime
        private int _EdgeEffectAlphaFadeOutTimeLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x41;
        private bool _EdgeEffectAlphaFadeOutTime_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectAlphaFadeOutTime => _EdgeEffectAlphaFadeOutTime_IsSet ? _recordData.Slice(_EdgeEffectAlphaFadeOutTimeLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectPersistentAlphaRatio
        private int _EdgeEffectPersistentAlphaRatioLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x45;
        private bool _EdgeEffectPersistentAlphaRatio_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectPersistentAlphaRatio => _EdgeEffectPersistentAlphaRatio_IsSet ? _recordData.Slice(_EdgeEffectPersistentAlphaRatioLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectAlphaPulseAmplitude
        private int _EdgeEffectAlphaPulseAmplitudeLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x49;
        private bool _EdgeEffectAlphaPulseAmplitude_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectAlphaPulseAmplitude => _EdgeEffectAlphaPulseAmplitude_IsSet ? _recordData.Slice(_EdgeEffectAlphaPulseAmplitudeLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectAlphaPulseFrequency
        private int _EdgeEffectAlphaPulseFrequencyLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x4D;
        private bool _EdgeEffectAlphaPulseFrequency_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectAlphaPulseFrequency => _EdgeEffectAlphaPulseFrequency_IsSet ? _recordData.Slice(_EdgeEffectAlphaPulseFrequencyLocation, 4).Float() : default(Single);
        #endregion
        #region FillFullAlphaRatio
        private int _FillFullAlphaRatioLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x51;
        private bool _FillFullAlphaRatio_IsSet => _DNAMLocation.HasValue;
        public Single FillFullAlphaRatio => _FillFullAlphaRatio_IsSet ? _recordData.Slice(_FillFullAlphaRatioLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectFullAlphaRatio
        private int _EdgeEffectFullAlphaRatioLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x55;
        private bool _EdgeEffectFullAlphaRatio_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectFullAlphaRatio => _EdgeEffectFullAlphaRatio_IsSet ? _recordData.Slice(_EdgeEffectFullAlphaRatioLocation, 4).Float() : default(Single);
        #endregion
        #region MembraneDestBlendMode
        private int _MembraneDestBlendModeLocation => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x59;
        private bool _MembraneDestBlendMode_IsSet => _DNAMLocation.HasValue;
        public EffectShader.BlendMode MembraneDestBlendMode => _MembraneDestBlendMode_IsSet ? (EffectShader.BlendMode)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_MembraneDestBlendModeLocation, 0x4)) : default;
        #endregion
        #region Unknown2
        private int _Unknown2Location => _DNAMLocation!.Value.Min + UnknownVersioningOffset + 0x5D;
        private bool _Unknown2_IsSet => _DNAMLocation.HasValue && _package.FormVersion!.FormVersion!.Value < 106;
        public ReadOnlyMemorySlice<Byte> Unknown2 => _Unknown2_IsSet ? _recordData.Span.Slice(_Unknown2Location, 152).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        int Unknown2VersioningOffset => UnknownVersioningOffset + (_package.FormVersion!.FormVersion!.Value >= 106 ? -152 : 0);
        #endregion
        #region HolesAnimationStartTime
        private int _HolesAnimationStartTimeLocation => _DNAMLocation!.Value.Min + Unknown2VersioningOffset + 0xF5;
        private bool _HolesAnimationStartTime_IsSet => _DNAMLocation.HasValue;
        public Single HolesAnimationStartTime => _HolesAnimationStartTime_IsSet ? _recordData.Slice(_HolesAnimationStartTimeLocation, 4).Float() : default(Single);
        #endregion
        #region HolesAnimationEndTime
        private int _HolesAnimationEndTimeLocation => _DNAMLocation!.Value.Min + Unknown2VersioningOffset + 0xF9;
        private bool _HolesAnimationEndTime_IsSet => _DNAMLocation.HasValue;
        public Single HolesAnimationEndTime => _HolesAnimationEndTime_IsSet ? _recordData.Slice(_HolesAnimationEndTimeLocation, 4).Float() : default(Single);
        #endregion
        #region HolesAnimationStartValue
        private int _HolesAnimationStartValueLocation => _DNAMLocation!.Value.Min + Unknown2VersioningOffset + 0xFD;
        private bool _HolesAnimationStartValue_IsSet => _DNAMLocation.HasValue;
        public Single HolesAnimationStartValue => _HolesAnimationStartValue_IsSet ? _recordData.Slice(_HolesAnimationStartValueLocation, 4).Float() : default(Single);
        #endregion
        #region HolesAnimationEndValue
        private int _HolesAnimationEndValueLocation => _DNAMLocation!.Value.Min + Unknown2VersioningOffset + 0x101;
        private bool _HolesAnimationEndValue_IsSet => _DNAMLocation.HasValue;
        public Single HolesAnimationEndValue => _HolesAnimationEndValue_IsSet ? _recordData.Slice(_HolesAnimationEndValueLocation, 4).Float() : default(Single);
        #endregion
        #region Unknown3
        private int _Unknown3Location => _DNAMLocation!.Value.Min + Unknown2VersioningOffset + 0x105;
        private bool _Unknown3_IsSet => _DNAMLocation.HasValue && _package.FormVersion!.FormVersion!.Value < 106;
        public ReadOnlyMemorySlice<Byte> Unknown3 => _Unknown3_IsSet ? _recordData.Span.Slice(_Unknown3Location, 44).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        int Unknown3VersioningOffset => Unknown2VersioningOffset + (_package.FormVersion!.FormVersion!.Value >= 106 ? -44 : 0);
        #endregion
        #region AmbientSound
        private int _AmbientSoundLocation => _DNAMLocation!.Value.Min + Unknown3VersioningOffset + 0x131;
        private bool _AmbientSound_IsSet => _DNAMLocation.HasValue;
        public IFormLinkGetter<ISoundGetter> AmbientSound => _AmbientSound_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ISoundGetter>(_package, _recordData.Span.Slice(_AmbientSoundLocation, 0x4), isSet: _AmbientSound_IsSet) : FormLink<ISoundGetter>.Null;
        #endregion
        #region FillColorKey2
        private int _FillColorKey2Location => _DNAMLocation!.Value.Min + Unknown3VersioningOffset + 0x135;
        private bool _FillColorKey2_IsSet => _DNAMLocation.HasValue;
        public Color FillColorKey2 => _FillColorKey2_IsSet ? _recordData.Slice(_FillColorKey2Location, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region FillColorKey3
        private int _FillColorKey3Location => _DNAMLocation!.Value.Min + Unknown3VersioningOffset + 0x139;
        private bool _FillColorKey3_IsSet => _DNAMLocation.HasValue;
        public Color FillColorKey3 => _FillColorKey3_IsSet ? _recordData.Slice(_FillColorKey3Location, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region Unknown4
        private int _Unknown4Location => _DNAMLocation!.Value.Min + Unknown3VersioningOffset + 0x13D;
        private bool _Unknown4_IsSet => _DNAMLocation.HasValue && _package.FormVersion!.FormVersion!.Value >= 106;
        public Byte Unknown4 => _Unknown4_IsSet ? _recordData.Span[_Unknown4Location] : default;
        int Unknown4VersioningOffset => Unknown3VersioningOffset + (_package.FormVersion!.FormVersion!.Value < 106 ? -1 : 0);
        #endregion
        #region FillColorKey1Scale
        private int _FillColorKey1ScaleLocation => _DNAMLocation!.Value.Min + Unknown4VersioningOffset + 0x13E;
        private bool _FillColorKey1Scale_IsSet => _DNAMLocation.HasValue;
        public Single FillColorKey1Scale => _FillColorKey1Scale_IsSet ? _recordData.Slice(_FillColorKey1ScaleLocation, 4).Float() : default(Single);
        #endregion
        #region FillColorKey2Scale
        private int _FillColorKey2ScaleLocation => _DNAMLocation!.Value.Min + Unknown4VersioningOffset + 0x142;
        private bool _FillColorKey2Scale_IsSet => _DNAMLocation.HasValue;
        public Single FillColorKey2Scale => _FillColorKey2Scale_IsSet ? _recordData.Slice(_FillColorKey2ScaleLocation, 4).Float() : default(Single);
        #endregion
        #region FillColorKey3Scale
        private int _FillColorKey3ScaleLocation => _DNAMLocation!.Value.Min + Unknown4VersioningOffset + 0x146;
        private bool _FillColorKey3Scale_IsSet => _DNAMLocation.HasValue;
        public Single FillColorKey3Scale => _FillColorKey3Scale_IsSet ? _recordData.Slice(_FillColorKey3ScaleLocation, 4).Float() : default(Single);
        #endregion
        #region FillColorKey1Time
        private int _FillColorKey1TimeLocation => _DNAMLocation!.Value.Min + Unknown4VersioningOffset + 0x14A;
        private bool _FillColorKey1Time_IsSet => _DNAMLocation.HasValue;
        public Single FillColorKey1Time => _FillColorKey1Time_IsSet ? _recordData.Slice(_FillColorKey1TimeLocation, 4).Float() : default(Single);
        #endregion
        #region FillColorKey2Time
        private int _FillColorKey2TimeLocation => _DNAMLocation!.Value.Min + Unknown4VersioningOffset + 0x14E;
        private bool _FillColorKey2Time_IsSet => _DNAMLocation.HasValue;
        public Single FillColorKey2Time => _FillColorKey2Time_IsSet ? _recordData.Slice(_FillColorKey2TimeLocation, 4).Float() : default(Single);
        #endregion
        #region FillColorKey3Time
        private int _FillColorKey3TimeLocation => _DNAMLocation!.Value.Min + Unknown4VersioningOffset + 0x152;
        private bool _FillColorKey3Time_IsSet => _DNAMLocation.HasValue;
        public Single FillColorKey3Time => _FillColorKey3Time_IsSet ? _recordData.Slice(_FillColorKey3TimeLocation, 4).Float() : default(Single);
        #endregion
        #region Unknown5
        private int _Unknown5Location => _DNAMLocation!.Value.Min + Unknown4VersioningOffset + 0x156;
        private bool _Unknown5_IsSet => _DNAMLocation.HasValue && _package.FormVersion!.FormVersion!.Value < 106;
        public ReadOnlyMemorySlice<Byte> Unknown5 => _Unknown5_IsSet ? _recordData.Span.Slice(_Unknown5Location, 40).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        int Unknown5VersioningOffset => Unknown4VersioningOffset + (_package.FormVersion!.FormVersion!.Value >= 106 ? -40 : 0);
        #endregion
        #region Flags
        private int _FlagsLocation => _DNAMLocation!.Value.Min + Unknown5VersioningOffset + 0x17E;
        private bool _Flags_IsSet => _DNAMLocation.HasValue;
        public EffectShader.Flag Flags => _Flags_IsSet ? (EffectShader.Flag)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region FillTextureScaleU
        private int _FillTextureScaleULocation => _DNAMLocation!.Value.Min + Unknown5VersioningOffset + 0x182;
        private bool _FillTextureScaleU_IsSet => _DNAMLocation.HasValue;
        public Single FillTextureScaleU => _FillTextureScaleU_IsSet ? _recordData.Slice(_FillTextureScaleULocation, 4).Float() : default(Single);
        #endregion
        #region FillTextureScaleV
        private int _FillTextureScaleVLocation => _DNAMLocation!.Value.Min + Unknown5VersioningOffset + 0x186;
        private bool _FillTextureScaleV_IsSet => _DNAMLocation.HasValue;
        public Single FillTextureScaleV => _FillTextureScaleV_IsSet ? _recordData.Slice(_FillTextureScaleVLocation, 4).Float() : default(Single);
        #endregion
        #region Unknown6
        private int _Unknown6Location => _DNAMLocation!.Value.Min + Unknown5VersioningOffset + 0x18A;
        private bool _Unknown6_IsSet => _DNAMLocation.HasValue && _package.FormVersion!.FormVersion!.Value < 106;
        public UInt16 Unknown6 => _Unknown6_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_Unknown6Location, 2)) : default(UInt16);
        int Unknown6VersioningOffset => Unknown5VersioningOffset + (_package.FormVersion!.FormVersion!.Value >= 106 ? -2 : 0);
        #endregion
        public IModelGetter? Model { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected EffectShaderBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IEffectShaderGetter EffectShaderFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new EffectShaderBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IEffectShaderGetter EffectShaderFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return EffectShaderFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ICON:
                {
                    _FillTextureLocation = (stream.Position - offset);
                    return (int)EffectShader_FieldIndex.FillTexture;
                }
                case RecordTypeInts.ICO2:
                {
                    _ParticleShaderTextureLocation = (stream.Position - offset);
                    return (int)EffectShader_FieldIndex.ParticleShaderTexture;
                }
                case RecordTypeInts.NAM7:
                {
                    _HolesTextureLocation = (stream.Position - offset);
                    return (int)EffectShader_FieldIndex.HolesTexture;
                }
                case RecordTypeInts.NAM8:
                {
                    _MembranePaletteTextureLocation = (stream.Position - offset);
                    return (int)EffectShader_FieldIndex.MembranePaletteTexture;
                }
                case RecordTypeInts.NAM9:
                {
                    _ParticlePaletteTextureLocation = (stream.Position - offset);
                    return (int)EffectShader_FieldIndex.ParticlePaletteTexture;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset);
                    return (int)EffectShader_FieldIndex.DATA;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)EffectShader_FieldIndex.Unknown6;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MODS:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)EffectShader_FieldIndex.Model;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            EffectShaderMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<EffectShader>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IEffectShaderGetter rhs) return false;
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IEffectShaderGetter? obj)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

