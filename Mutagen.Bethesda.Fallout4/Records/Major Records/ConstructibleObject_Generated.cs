/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ConstructibleObject :
        Fallout4MajorRecord,
        IConstructibleObjectInternal,
        IEquatable<IConstructibleObjectGetter>,
        ILoquiObjectSetter<ConstructibleObject>
    {
        #region Ctor
        protected ConstructibleObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region PickUpSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _PickUpSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> PickUpSound
        {
            get => _PickUpSound;
            set => _PickUpSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IConstructibleObjectGetter.PickUpSound => this.PickUpSound;
        #endregion
        #region PutDownSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _PutDownSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> PutDownSound
        {
            get => _PutDownSound;
            set => _PutDownSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IConstructibleObjectGetter.PutDownSound => this.PutDownSound;
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ConstructibleObjectComponent>? _Components;
        public ExtendedList<ConstructibleObjectComponent>? Components
        {
            get => this._Components;
            set => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConstructibleObjectComponentGetter>? IConstructibleObjectGetter.Components => _Components;
        #endregion

        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IConstructibleObjectGetter.Description => this.Description;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IConstructibleObjectGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region CreatedObject
        private readonly IFormLinkNullable<IConstructibleObjectTargetGetter> _CreatedObject = new FormLinkNullable<IConstructibleObjectTargetGetter>();
        public IFormLinkNullable<IConstructibleObjectTargetGetter> CreatedObject
        {
            get => _CreatedObject;
            set => _CreatedObject.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IConstructibleObjectTargetGetter> IConstructibleObjectGetter.CreatedObject => this.CreatedObject;
        #endregion
        #region WorkbenchKeyword
        private readonly IFormLinkNullable<IKeywordGetter> _WorkbenchKeyword = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> WorkbenchKeyword
        {
            get => _WorkbenchKeyword;
            set => _WorkbenchKeyword.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IConstructibleObjectGetter.WorkbenchKeyword => this.WorkbenchKeyword;
        #endregion
        #region NAM1
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NAM1;
        public MemorySlice<Byte>? NAM1
        {
            get => this._NAM1;
            set => this._NAM1 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IConstructibleObjectGetter.NAM1 => this.NAM1;
        #endregion
        #region NAM2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NAM2;
        public MemorySlice<Byte>? NAM2
        {
            get => this._NAM2;
            set => this._NAM2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IConstructibleObjectGetter.NAM2 => this.NAM2;
        #endregion
        #region NAM3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NAM3;
        public MemorySlice<Byte>? NAM3
        {
            get => this._NAM3;
            set => this._NAM3 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IConstructibleObjectGetter.NAM3 => this.NAM3;
        #endregion
        #region MenuArtObject
        private readonly IFormLinkNullable<IArtObjectGetter> _MenuArtObject = new FormLinkNullable<IArtObjectGetter>();
        public IFormLinkNullable<IArtObjectGetter> MenuArtObject
        {
            get => _MenuArtObject;
            set => _MenuArtObject.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArtObjectGetter> IConstructibleObjectGetter.MenuArtObject => this.MenuArtObject;
        #endregion
        #region Categories
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Categories;
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Categories
        {
            get => this._Categories;
            set => this._Categories = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IConstructibleObjectGetter.Categories => _Categories;
        #endregion

        #endregion
        #region CreatedObjectCounts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ConstructibleCreatedObjectCount>? _CreatedObjectCounts;
        public ExtendedList<ConstructibleCreatedObjectCount>? CreatedObjectCounts
        {
            get => this._CreatedObjectCounts;
            set => this._CreatedObjectCounts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConstructibleCreatedObjectCountGetter>? IConstructibleObjectGetter.CreatedObjectCounts => _CreatedObjectCounts;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ConstructibleObjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.PickUpSound = initialValue;
                this.PutDownSound = initialValue;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>());
                this.Description = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.CreatedObject = initialValue;
                this.WorkbenchKeyword = initialValue;
                this.NAM1 = initialValue;
                this.NAM2 = initialValue;
                this.NAM3 = initialValue;
                this.MenuArtObject = initialValue;
                this.Categories = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.CreatedObjectCounts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleCreatedObjectCount.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ConstructibleCreatedObjectCount.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem PickUpSound,
                TItem PutDownSound,
                TItem Components,
                TItem Description,
                TItem Conditions,
                TItem CreatedObject,
                TItem WorkbenchKeyword,
                TItem NAM1,
                TItem NAM2,
                TItem NAM3,
                TItem MenuArtObject,
                TItem Categories,
                TItem CreatedObjectCounts)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.PickUpSound = PickUpSound;
                this.PutDownSound = PutDownSound;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>());
                this.Description = Description;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.CreatedObject = CreatedObject;
                this.WorkbenchKeyword = WorkbenchKeyword;
                this.NAM1 = NAM1;
                this.NAM2 = NAM2;
                this.NAM3 = NAM3;
                this.MenuArtObject = MenuArtObject;
                this.Categories = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Categories, Enumerable.Empty<(int Index, TItem Value)>());
                this.CreatedObjectCounts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleCreatedObjectCount.Mask<TItem>?>>?>(CreatedObjectCounts, Enumerable.Empty<MaskItemIndexed<TItem, ConstructibleCreatedObjectCount.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem PickUpSound;
            public TItem PutDownSound;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>?>? Components;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem CreatedObject;
            public TItem WorkbenchKeyword;
            public TItem NAM1;
            public TItem NAM2;
            public TItem NAM3;
            public TItem MenuArtObject;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Categories;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleCreatedObjectCount.Mask<TItem>?>>?>? CreatedObjectCounts;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.PickUpSound, rhs.PickUpSound)) return false;
                if (!object.Equals(this.PutDownSound, rhs.PutDownSound)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.CreatedObject, rhs.CreatedObject)) return false;
                if (!object.Equals(this.WorkbenchKeyword, rhs.WorkbenchKeyword)) return false;
                if (!object.Equals(this.NAM1, rhs.NAM1)) return false;
                if (!object.Equals(this.NAM2, rhs.NAM2)) return false;
                if (!object.Equals(this.NAM3, rhs.NAM3)) return false;
                if (!object.Equals(this.MenuArtObject, rhs.MenuArtObject)) return false;
                if (!object.Equals(this.Categories, rhs.Categories)) return false;
                if (!object.Equals(this.CreatedObjectCounts, rhs.CreatedObjectCounts)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.PickUpSound);
                hash.Add(this.PutDownSound);
                hash.Add(this.Components);
                hash.Add(this.Description);
                hash.Add(this.Conditions);
                hash.Add(this.CreatedObject);
                hash.Add(this.WorkbenchKeyword);
                hash.Add(this.NAM1);
                hash.Add(this.NAM2);
                hash.Add(this.NAM3);
                hash.Add(this.MenuArtObject);
                hash.Add(this.Categories);
                hash.Add(this.CreatedObjectCounts);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.PickUpSound)) return false;
                if (!eval(this.PutDownSound)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Description)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.CreatedObject)) return false;
                if (!eval(this.WorkbenchKeyword)) return false;
                if (!eval(this.NAM1)) return false;
                if (!eval(this.NAM2)) return false;
                if (!eval(this.NAM3)) return false;
                if (!eval(this.MenuArtObject)) return false;
                if (this.Categories != null)
                {
                    if (!eval(this.Categories.Overall)) return false;
                    if (this.Categories.Specific != null)
                    {
                        foreach (var item in this.Categories.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.CreatedObjectCounts != null)
                {
                    if (!eval(this.CreatedObjectCounts.Overall)) return false;
                    if (this.CreatedObjectCounts.Specific != null)
                    {
                        foreach (var item in this.CreatedObjectCounts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.PickUpSound)) return true;
                if (eval(this.PutDownSound)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Description)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.CreatedObject)) return true;
                if (eval(this.WorkbenchKeyword)) return true;
                if (eval(this.NAM1)) return true;
                if (eval(this.NAM2)) return true;
                if (eval(this.NAM3)) return true;
                if (eval(this.MenuArtObject)) return true;
                if (this.Categories != null)
                {
                    if (eval(this.Categories.Overall)) return true;
                    if (this.Categories.Specific != null)
                    {
                        foreach (var item in this.Categories.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.CreatedObjectCounts != null)
                {
                    if (eval(this.CreatedObjectCounts.Overall)) return true;
                    if (this.CreatedObjectCounts.Specific != null)
                    {
                        foreach (var item in this.CreatedObjectCounts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ConstructibleObject.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.PickUpSound = eval(this.PickUpSound);
                obj.PutDownSound = eval(this.PutDownSound);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Description = eval(this.Description);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.CreatedObject = eval(this.CreatedObject);
                obj.WorkbenchKeyword = eval(this.WorkbenchKeyword);
                obj.NAM1 = eval(this.NAM1);
                obj.NAM2 = eval(this.NAM2);
                obj.NAM3 = eval(this.NAM3);
                obj.MenuArtObject = eval(this.MenuArtObject);
                if (Categories != null)
                {
                    obj.Categories = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Categories.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Categories.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Categories.Specific = l;
                        foreach (var item in Categories.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (CreatedObjectCounts != null)
                {
                    obj.CreatedObjectCounts = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ConstructibleCreatedObjectCount.Mask<R>?>>?>(eval(this.CreatedObjectCounts.Overall), Enumerable.Empty<MaskItemIndexed<R, ConstructibleCreatedObjectCount.Mask<R>?>>());
                    if (CreatedObjectCounts.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ConstructibleCreatedObjectCount.Mask<R>?>>();
                        obj.CreatedObjectCounts.Specific = l;
                        foreach (var item in CreatedObjectCounts.Specific)
                        {
                            MaskItemIndexed<R, ConstructibleCreatedObjectCount.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ConstructibleCreatedObjectCount.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ConstructibleObject.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ConstructibleObject.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ConstructibleObject.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.PickUpSound ?? true)
                    {
                        sb.AppendItem(PickUpSound, "PickUpSound");
                    }
                    if (printMask?.PutDownSound ?? true)
                    {
                        sb.AppendItem(PutDownSound, "PutDownSound");
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.CreatedObject ?? true)
                    {
                        sb.AppendItem(CreatedObject, "CreatedObject");
                    }
                    if (printMask?.WorkbenchKeyword ?? true)
                    {
                        sb.AppendItem(WorkbenchKeyword, "WorkbenchKeyword");
                    }
                    if (printMask?.NAM1 ?? true)
                    {
                        sb.AppendItem(NAM1, "NAM1");
                    }
                    if (printMask?.NAM2 ?? true)
                    {
                        sb.AppendItem(NAM2, "NAM2");
                    }
                    if (printMask?.NAM3 ?? true)
                    {
                        sb.AppendItem(NAM3, "NAM3");
                    }
                    if (printMask?.MenuArtObject ?? true)
                    {
                        sb.AppendItem(MenuArtObject, "MenuArtObject");
                    }
                    if ((printMask?.Categories?.Overall ?? true)
                        && Categories is {} CategoriesItem)
                    {
                        sb.AppendLine("Categories =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(CategoriesItem.Overall);
                            if (CategoriesItem.Specific != null)
                            {
                                foreach (var subItem in CategoriesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.CreatedObjectCounts?.Overall ?? true)
                        && CreatedObjectCounts is {} CreatedObjectCountsItem)
                    {
                        sb.AppendLine("CreatedObjectCounts =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(CreatedObjectCountsItem.Overall);
                            if (CreatedObjectCountsItem.Specific != null)
                            {
                                foreach (var subItem in CreatedObjectCountsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? PickUpSound;
            public Exception? PutDownSound;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleObjectComponent.ErrorMask?>>?>? Components;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? CreatedObject;
            public Exception? WorkbenchKeyword;
            public Exception? NAM1;
            public Exception? NAM2;
            public Exception? NAM3;
            public Exception? MenuArtObject;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Categories;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleCreatedObjectCount.ErrorMask?>>?>? CreatedObjectCounts;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
                switch (enu)
                {
                    case ConstructibleObject_FieldIndex.PickUpSound:
                        return PickUpSound;
                    case ConstructibleObject_FieldIndex.PutDownSound:
                        return PutDownSound;
                    case ConstructibleObject_FieldIndex.Components:
                        return Components;
                    case ConstructibleObject_FieldIndex.Description:
                        return Description;
                    case ConstructibleObject_FieldIndex.Conditions:
                        return Conditions;
                    case ConstructibleObject_FieldIndex.CreatedObject:
                        return CreatedObject;
                    case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                        return WorkbenchKeyword;
                    case ConstructibleObject_FieldIndex.NAM1:
                        return NAM1;
                    case ConstructibleObject_FieldIndex.NAM2:
                        return NAM2;
                    case ConstructibleObject_FieldIndex.NAM3:
                        return NAM3;
                    case ConstructibleObject_FieldIndex.MenuArtObject:
                        return MenuArtObject;
                    case ConstructibleObject_FieldIndex.Categories:
                        return Categories;
                    case ConstructibleObject_FieldIndex.CreatedObjectCounts:
                        return CreatedObjectCounts;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
                switch (enu)
                {
                    case ConstructibleObject_FieldIndex.PickUpSound:
                        this.PickUpSound = ex;
                        break;
                    case ConstructibleObject_FieldIndex.PutDownSound:
                        this.PutDownSound = ex;
                        break;
                    case ConstructibleObject_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleObjectComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case ConstructibleObject_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.CreatedObject:
                        this.CreatedObject = ex;
                        break;
                    case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                        this.WorkbenchKeyword = ex;
                        break;
                    case ConstructibleObject_FieldIndex.NAM1:
                        this.NAM1 = ex;
                        break;
                    case ConstructibleObject_FieldIndex.NAM2:
                        this.NAM2 = ex;
                        break;
                    case ConstructibleObject_FieldIndex.NAM3:
                        this.NAM3 = ex;
                        break;
                    case ConstructibleObject_FieldIndex.MenuArtObject:
                        this.MenuArtObject = ex;
                        break;
                    case ConstructibleObject_FieldIndex.Categories:
                        this.Categories = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.CreatedObjectCounts:
                        this.CreatedObjectCounts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleCreatedObjectCount.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
                switch (enu)
                {
                    case ConstructibleObject_FieldIndex.PickUpSound:
                        this.PickUpSound = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.PutDownSound:
                        this.PutDownSound = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleObjectComponent.ErrorMask?>>?>)obj;
                        break;
                    case ConstructibleObject_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case ConstructibleObject_FieldIndex.CreatedObject:
                        this.CreatedObject = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                        this.WorkbenchKeyword = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.NAM1:
                        this.NAM1 = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.NAM2:
                        this.NAM2 = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.NAM3:
                        this.NAM3 = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.MenuArtObject:
                        this.MenuArtObject = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.Categories:
                        this.Categories = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ConstructibleObject_FieldIndex.CreatedObjectCounts:
                        this.CreatedObjectCounts = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleCreatedObjectCount.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (PickUpSound != null) return true;
                if (PutDownSound != null) return true;
                if (Components != null) return true;
                if (Description != null) return true;
                if (Conditions != null) return true;
                if (CreatedObject != null) return true;
                if (WorkbenchKeyword != null) return true;
                if (NAM1 != null) return true;
                if (NAM2 != null) return true;
                if (NAM3 != null) return true;
                if (MenuArtObject != null) return true;
                if (Categories != null) return true;
                if (CreatedObjectCounts != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(PickUpSound, "PickUpSound");
                }
                {
                    sb.AppendItem(PutDownSound, "PutDownSound");
                }
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(CreatedObject, "CreatedObject");
                }
                {
                    sb.AppendItem(WorkbenchKeyword, "WorkbenchKeyword");
                }
                {
                    sb.AppendItem(NAM1, "NAM1");
                }
                {
                    sb.AppendItem(NAM2, "NAM2");
                }
                {
                    sb.AppendItem(NAM3, "NAM3");
                }
                {
                    sb.AppendItem(MenuArtObject, "MenuArtObject");
                }
                if (Categories is {} CategoriesItem)
                {
                    sb.AppendLine("Categories =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(CategoriesItem.Overall);
                        if (CategoriesItem.Specific != null)
                        {
                            foreach (var subItem in CategoriesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (CreatedObjectCounts is {} CreatedObjectCountsItem)
                {
                    sb.AppendLine("CreatedObjectCounts =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(CreatedObjectCountsItem.Overall);
                        if (CreatedObjectCountsItem.Specific != null)
                        {
                            foreach (var subItem in CreatedObjectCountsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.PickUpSound = this.PickUpSound.Combine(rhs.PickUpSound);
                ret.PutDownSound = this.PutDownSound.Combine(rhs.PutDownSound);
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleObjectComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.CreatedObject = this.CreatedObject.Combine(rhs.CreatedObject);
                ret.WorkbenchKeyword = this.WorkbenchKeyword.Combine(rhs.WorkbenchKeyword);
                ret.NAM1 = this.NAM1.Combine(rhs.NAM1);
                ret.NAM2 = this.NAM2.Combine(rhs.NAM2);
                ret.NAM3 = this.NAM3.Combine(rhs.NAM3);
                ret.MenuArtObject = this.MenuArtObject.Combine(rhs.MenuArtObject);
                ret.Categories = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Categories?.Overall, rhs.Categories?.Overall), Noggog.ExceptionExt.Combine(this.Categories?.Specific, rhs.Categories?.Specific));
                ret.CreatedObjectCounts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleCreatedObjectCount.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.CreatedObjectCounts?.Overall, rhs.CreatedObjectCounts?.Overall), Noggog.ExceptionExt.Combine(this.CreatedObjectCounts?.Specific, rhs.CreatedObjectCounts?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool PickUpSound;
            public bool PutDownSound;
            public ConstructibleObjectComponent.TranslationMask? Components;
            public bool Description;
            public Condition.TranslationMask? Conditions;
            public bool CreatedObject;
            public bool WorkbenchKeyword;
            public bool NAM1;
            public bool NAM2;
            public bool NAM3;
            public bool MenuArtObject;
            public bool Categories;
            public ConstructibleCreatedObjectCount.TranslationMask? CreatedObjectCounts;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.PickUpSound = defaultOn;
                this.PutDownSound = defaultOn;
                this.Description = defaultOn;
                this.CreatedObject = defaultOn;
                this.WorkbenchKeyword = defaultOn;
                this.NAM1 = defaultOn;
                this.NAM2 = defaultOn;
                this.NAM3 = defaultOn;
                this.MenuArtObject = defaultOn;
                this.Categories = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((PickUpSound, null));
                ret.Add((PutDownSound, null));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Description, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((CreatedObject, null));
                ret.Add((WorkbenchKeyword, null));
                ret.Add((NAM1, null));
                ret.Add((NAM2, null));
                ret.Add((NAM3, null));
                ret.Add((MenuArtObject, null));
                ret.Add((Categories, null));
                ret.Add((CreatedObjectCounts == null ? DefaultOn : !CreatedObjectCounts.GetCrystal().CopyNothing, CreatedObjectCounts?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ConstructibleObject_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ConstructibleObjectCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ConstructibleObjectSetterCommon.Instance.RemapLinks(this, mapping);
        public ConstructibleObject(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ConstructibleObject(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ConstructibleObject(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ConstructibleObject(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public ConstructibleObject(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ConstructibleObject>.ToString(this);
        }

        protected override Type LinkType => typeof(IConstructibleObject);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IConstructibleObjectGetter rhs) return false;
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IConstructibleObjectGetter? obj)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ConstructibleObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ConstructibleObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ConstructibleObject CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ConstructibleObject();
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ConstructibleObject item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ConstructibleObject GetNew()
        {
            return new ConstructibleObject();
        }

    }
    #endregion

    #region Interface
    public partial interface IConstructibleObject :
        IConstructibleObjectGetter,
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IHarvestTarget,
        IItem,
        ILoquiObjectSetter<IConstructibleObjectInternal>,
        IPlaceableObject,
        IReferenceableObject
    {
        new IFormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; set; }
        new ExtendedList<ConstructibleObjectComponent>? Components { get; set; }
        new TranslatedString? Description { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new IFormLinkNullable<IConstructibleObjectTargetGetter> CreatedObject { get; set; }
        new IFormLinkNullable<IKeywordGetter> WorkbenchKeyword { get; set; }
        new MemorySlice<Byte>? NAM1 { get; set; }
        new MemorySlice<Byte>? NAM2 { get; set; }
        new MemorySlice<Byte>? NAM3 { get; set; }
        new IFormLinkNullable<IArtObjectGetter> MenuArtObject { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Categories { get; set; }
        new ExtendedList<ConstructibleCreatedObjectCount>? CreatedObjectCounts { get; set; }
    }

    public partial interface IConstructibleObjectInternal :
        IFallout4MajorRecordInternal,
        IConstructibleObject,
        IConstructibleObjectGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.COBJ)]
    public partial interface IConstructibleObjectGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHarvestTargetGetter,
        IItemGetter,
        ILoquiObject<IConstructibleObjectGetter>,
        IMapsToGetter<IConstructibleObjectGetter>,
        IPlaceableObjectGetter,
        IReferenceableObjectGetter
    {
        static new ILoquiRegistration StaticRegistration => ConstructibleObject_Registration.Instance;
        IFormLinkNullableGetter<ISoundDescriptorGetter> PickUpSound { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> PutDownSound { get; }
        IReadOnlyList<IConstructibleObjectComponentGetter>? Components { get; }
        ITranslatedStringGetter? Description { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IFormLinkNullableGetter<IConstructibleObjectTargetGetter> CreatedObject { get; }
        IFormLinkNullableGetter<IKeywordGetter> WorkbenchKeyword { get; }
        ReadOnlyMemorySlice<Byte>? NAM1 { get; }
        ReadOnlyMemorySlice<Byte>? NAM2 { get; }
        ReadOnlyMemorySlice<Byte>? NAM3 { get; }
        IFormLinkNullableGetter<IArtObjectGetter> MenuArtObject { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Categories { get; }
        IReadOnlyList<IConstructibleCreatedObjectCountGetter>? CreatedObjectCounts { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ConstructibleObjectMixIn
    {
        public static void Clear(this IConstructibleObjectInternal item)
        {
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ConstructibleObject.Mask<bool> GetEqualsMask(
            this IConstructibleObjectGetter item,
            IConstructibleObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IConstructibleObjectGetter item,
            string? name = null,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IConstructibleObjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IConstructibleObjectGetter item,
            IConstructibleObjectGetter rhs,
            ConstructibleObject.TranslationMask? equalsMask = null)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IConstructibleObjectInternal lhs,
            IConstructibleObjectGetter rhs,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ConstructibleObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IConstructibleObjectInternal lhs,
            IConstructibleObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ConstructibleObject DeepCopy(
            this IConstructibleObjectGetter item,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            return ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ConstructibleObject DeepCopy(
            this IConstructibleObjectGetter item,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            return ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ConstructibleObject DeepCopy(
            this IConstructibleObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ConstructibleObject Duplicate(
            this IConstructibleObjectGetter item,
            FormKey formKey,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ConstructibleObject Duplicate(
            this IConstructibleObjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IConstructibleObjectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum ConstructibleObject_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        PickUpSound = 7,
        PutDownSound = 8,
        Components = 9,
        Description = 10,
        Conditions = 11,
        CreatedObject = 12,
        WorkbenchKeyword = 13,
        NAM1 = 14,
        NAM2 = 15,
        NAM3 = 16,
        MenuArtObject = 17,
        Categories = 18,
        CreatedObjectCounts = 19,
    }
    #endregion

    #region Registration
    internal partial class ConstructibleObject_Registration : ILoquiRegistration
    {
        public static readonly ConstructibleObject_Registration Instance = new ConstructibleObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(ConstructibleObject.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ConstructibleObject.ErrorMask);

        public static readonly Type ClassType = typeof(ConstructibleObject);

        public static readonly Type GetterType = typeof(IConstructibleObjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IConstructibleObject);

        public static readonly Type? InternalSetterType = typeof(IConstructibleObjectInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.ConstructibleObject";

        public const string Name = "ConstructibleObject";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.COBJ;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.COBJ);
            var all = RecordCollection.Factory(
                RecordTypes.COBJ,
                RecordTypes.YNAM,
                RecordTypes.ZNAM,
                RecordTypes.FVPA,
                RecordTypes.DESC,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.CNAM,
                RecordTypes.BNAM,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.ANAM,
                RecordTypes.FNAM,
                RecordTypes.INTV);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ConstructibleObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ConstructibleObjectSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ConstructibleObjectSetterCommon Instance = new ConstructibleObjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IConstructibleObjectInternal item)
        {
            ClearPartial();
            item.PickUpSound.Clear();
            item.PutDownSound.Clear();
            item.Components = null;
            item.Description = default;
            item.Conditions.Clear();
            item.CreatedObject.Clear();
            item.WorkbenchKeyword.Clear();
            item.NAM1 = default;
            item.NAM2 = default;
            item.NAM3 = default;
            item.MenuArtObject.Clear();
            item.Categories = null;
            item.CreatedObjectCounts = null;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IConstructibleObjectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IConstructibleObjectInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IConstructibleObject obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.PickUpSound.Relink(mapping);
            obj.PutDownSound.Relink(mapping);
            obj.Components?.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.CreatedObject.Relink(mapping);
            obj.WorkbenchKeyword.Relink(mapping);
            obj.MenuArtObject.Relink(mapping);
            obj.Categories?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IConstructibleObjectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IConstructibleObjectInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ConstructibleObjectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ConstructibleObjectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ConstructibleObject)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ConstructibleObject)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ConstructibleObjectCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ConstructibleObjectCommon Instance = new ConstructibleObjectCommon();

        public ConstructibleObject.Mask<bool> GetEqualsMask(
            IConstructibleObjectGetter item,
            IConstructibleObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ConstructibleObject.Mask<bool>(false);
            ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IConstructibleObjectGetter item,
            IConstructibleObjectGetter rhs,
            ConstructibleObject.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.PickUpSound = item.PickUpSound.Equals(rhs.PickUpSound);
            ret.PutDownSound = item.PutDownSound.Equals(rhs.PutDownSound);
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.CreatedObject = item.CreatedObject.Equals(rhs.CreatedObject);
            ret.WorkbenchKeyword = item.WorkbenchKeyword.Equals(rhs.WorkbenchKeyword);
            ret.NAM1 = MemorySliceExt.SequenceEqual(item.NAM1, rhs.NAM1);
            ret.NAM2 = MemorySliceExt.SequenceEqual(item.NAM2, rhs.NAM2);
            ret.NAM3 = MemorySliceExt.SequenceEqual(item.NAM3, rhs.NAM3);
            ret.MenuArtObject = item.MenuArtObject.Equals(rhs.MenuArtObject);
            ret.Categories = item.Categories.CollectionEqualsHelper(
                rhs.Categories,
                (l, r) => object.Equals(l, r),
                include);
            ret.CreatedObjectCounts = item.CreatedObjectCounts.CollectionEqualsHelper(
                rhs.CreatedObjectCounts,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IConstructibleObjectGetter item,
            string? name = null,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IConstructibleObjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ConstructibleObject =>");
            }
            else
            {
                sb.AppendLine($"{name} (ConstructibleObject) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IConstructibleObjectGetter item,
            StructuredStringBuilder sb,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.PickUpSound ?? true)
            {
                sb.AppendItem(item.PickUpSound.FormKeyNullable, "PickUpSound");
            }
            if (printMask?.PutDownSound ?? true)
            {
                sb.AppendItem(item.PutDownSound.FormKeyNullable, "PutDownSound");
            }
            if ((printMask?.Components?.Overall ?? true)
                && item.Components is {} ComponentsItem)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ComponentsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.CreatedObject ?? true)
            {
                sb.AppendItem(item.CreatedObject.FormKeyNullable, "CreatedObject");
            }
            if (printMask?.WorkbenchKeyword ?? true)
            {
                sb.AppendItem(item.WorkbenchKeyword.FormKeyNullable, "WorkbenchKeyword");
            }
            if ((printMask?.NAM1 ?? true)
                && item.NAM1 is {} NAM1Item)
            {
                sb.AppendLine($"NAM1 => {SpanExt.ToHexString(NAM1Item)}");
            }
            if ((printMask?.NAM2 ?? true)
                && item.NAM2 is {} NAM2Item)
            {
                sb.AppendLine($"NAM2 => {SpanExt.ToHexString(NAM2Item)}");
            }
            if ((printMask?.NAM3 ?? true)
                && item.NAM3 is {} NAM3Item)
            {
                sb.AppendLine($"NAM3 => {SpanExt.ToHexString(NAM3Item)}");
            }
            if (printMask?.MenuArtObject ?? true)
            {
                sb.AppendItem(item.MenuArtObject.FormKeyNullable, "MenuArtObject");
            }
            if ((printMask?.Categories?.Overall ?? true)
                && item.Categories is {} CategoriesItem)
            {
                sb.AppendLine("Categories =>");
                using (sb.Brace())
                {
                    foreach (var subItem in CategoriesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.CreatedObjectCounts?.Overall ?? true)
                && item.CreatedObjectCounts is {} CreatedObjectCountsItem)
            {
                sb.AppendLine("CreatedObjectCounts =>");
                using (sb.Brace())
                {
                    foreach (var subItem in CreatedObjectCountsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static ConstructibleObject_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (ConstructibleObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ConstructibleObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ConstructibleObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IConstructibleObjectGetter? lhs,
            IConstructibleObjectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.PickUpSound) ?? true))
            {
                if (!lhs.PickUpSound.Equals(rhs.PickUpSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.PutDownSound) ?? true))
            {
                if (!lhs.PutDownSound.Equals(rhs.PutDownSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqualNullable(rhs.Components, (l, r) => ((ConstructibleObjectComponentCommon)((IConstructibleObjectComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.CreatedObject) ?? true))
            {
                if (!lhs.CreatedObject.Equals(rhs.CreatedObject)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.WorkbenchKeyword) ?? true))
            {
                if (!lhs.WorkbenchKeyword.Equals(rhs.WorkbenchKeyword)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.NAM1) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NAM1, rhs.NAM1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.NAM2) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NAM2, rhs.NAM2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.NAM3) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NAM3, rhs.NAM3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.MenuArtObject) ?? true))
            {
                if (!lhs.MenuArtObject.Equals(rhs.MenuArtObject)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Categories) ?? true))
            {
                if (!lhs.Categories.SequenceEqualNullable(rhs.Categories)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.CreatedObjectCounts) ?? true))
            {
                if (!lhs.CreatedObjectCounts.SequenceEqualNullable(rhs.CreatedObjectCounts, (l, r) => ((ConstructibleCreatedObjectCountCommon)((IConstructibleCreatedObjectCountGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.CreatedObjectCounts)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IConstructibleObjectGetter?)lhs,
                rhs: rhs as IConstructibleObjectGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IConstructibleObjectGetter?)lhs,
                rhs: rhs as IConstructibleObjectGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IConstructibleObjectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.PickUpSound);
            hash.Add(item.PutDownSound);
            hash.Add(item.Components);
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.Conditions);
            hash.Add(item.CreatedObject);
            hash.Add(item.WorkbenchKeyword);
            if (item.NAM1 is {} NAM1Item)
            {
                hash.Add(NAM1Item);
            }
            if (item.NAM2 is {} NAM2Item)
            {
                hash.Add(NAM2Item);
            }
            if (item.NAM3 is {} NAM3Item)
            {
                hash.Add(NAM3Item);
            }
            hash.Add(item.MenuArtObject);
            hash.Add(item.Categories);
            hash.Add(item.CreatedObjectCounts);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IConstructibleObjectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IConstructibleObjectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ConstructibleObject.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IConstructibleObjectGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.PickUpSound, out var PickUpSoundInfo))
            {
                yield return PickUpSoundInfo;
            }
            if (FormLinkInformation.TryFactory(obj.PutDownSound, out var PutDownSoundInfo))
            {
                yield return PutDownSoundInfo;
            }
            if (obj.Components is {} ComponentsItem)
            {
                foreach (var item in ComponentsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.CreatedObject, out var CreatedObjectInfo))
            {
                yield return CreatedObjectInfo;
            }
            if (FormLinkInformation.TryFactory(obj.WorkbenchKeyword, out var WorkbenchKeywordInfo))
            {
                yield return WorkbenchKeywordInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MenuArtObject, out var MenuArtObjectInfo))
            {
                yield return MenuArtObjectInfo;
            }
            if (obj.Categories is {} CategoriesItem)
            {
                foreach (var item in CategoriesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public ConstructibleObject Duplicate(
            IConstructibleObjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ConstructibleObject(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IConstructibleObjectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IConstructibleObjectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ConstructibleObjectSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ConstructibleObjectSetterTranslationCommon Instance = new ConstructibleObjectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IConstructibleObjectInternal item,
            IConstructibleObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IConstructibleObject item,
            IConstructibleObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.PickUpSound) ?? true))
            {
                item.PickUpSound.SetTo(rhs.PickUpSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.PutDownSound) ?? true))
            {
                item.PutDownSound.SetTo(rhs.PutDownSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.Components);
                try
                {
                    if ((rhs.Components != null))
                    {
                        item.Components = 
                            rhs.Components
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ConstructibleObjectComponent>();
                    }
                    else
                    {
                        item.Components = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.CreatedObject) ?? true))
            {
                item.CreatedObject.SetTo(rhs.CreatedObject.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.WorkbenchKeyword) ?? true))
            {
                item.WorkbenchKeyword.SetTo(rhs.WorkbenchKeyword.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.NAM1) ?? true))
            {
                if(rhs.NAM1 is {} NAM1rhs)
                {
                    item.NAM1 = NAM1rhs.ToArray();
                }
                else
                {
                    item.NAM1 = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.NAM2) ?? true))
            {
                if(rhs.NAM2 is {} NAM2rhs)
                {
                    item.NAM2 = NAM2rhs.ToArray();
                }
                else
                {
                    item.NAM2 = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.NAM3) ?? true))
            {
                if(rhs.NAM3 is {} NAM3rhs)
                {
                    item.NAM3 = NAM3rhs.ToArray();
                }
                else
                {
                    item.NAM3 = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.MenuArtObject) ?? true))
            {
                item.MenuArtObject.SetTo(rhs.MenuArtObject.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Categories) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.Categories);
                try
                {
                    if ((rhs.Categories != null))
                    {
                        item.Categories = 
                            rhs.Categories
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Categories = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.CreatedObjectCounts) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.CreatedObjectCounts);
                try
                {
                    if ((rhs.CreatedObjectCounts != null))
                    {
                        item.CreatedObjectCounts = 
                            rhs.CreatedObjectCounts
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ConstructibleCreatedObjectCount>();
                    }
                    else
                    {
                        item.CreatedObjectCounts = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IConstructibleObject item,
            IConstructibleObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IConstructibleObjectInternal)item,
                rhs: (IConstructibleObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IConstructibleObject)item,
                rhs: (IConstructibleObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IConstructibleObjectInternal)item,
                rhs: (IConstructibleObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IConstructibleObject)item,
                rhs: (IConstructibleObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ConstructibleObject DeepCopy(
            IConstructibleObjectGetter item,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            ConstructibleObject ret = (ConstructibleObject)((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).GetNew();
            ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ConstructibleObject DeepCopy(
            IConstructibleObjectGetter item,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ConstructibleObject ret = (ConstructibleObject)((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).GetNew();
            ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ConstructibleObject.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ConstructibleObject DeepCopy(
            IConstructibleObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ConstructibleObject ret = (ConstructibleObject)((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).GetNew();
            ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ConstructibleObject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ConstructibleObject_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ConstructibleObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ConstructibleObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ConstructibleObjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ConstructibleObjectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class ConstructibleObjectBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ConstructibleObjectBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IConstructibleObjectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PickUpSound,
                header: translationParams.ConvertToCustom(RecordTypes.YNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PutDownSound,
                header: translationParams.ConvertToCustom(RecordTypes.ZNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConstructibleObjectComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                recordType: translationParams.ConvertToCustom(RecordTypes.FVPA),
                transl: (MutagenWriter subWriter, IConstructibleObjectComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConstructibleObjectComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CreatedObject,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WorkbenchKeyword,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NAM1,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NAM2,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NAM3,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MenuArtObject,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.Categories,
                recordType: translationParams.ConvertToCustom(RecordTypes.FNAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConstructibleCreatedObjectCountGetter>.Instance.Write(
                writer: writer,
                items: item.CreatedObjectCounts,
                recordType: translationParams.ConvertToCustom(RecordTypes.INTV),
                transl: (MutagenWriter subWriter, IConstructibleCreatedObjectCountGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConstructibleCreatedObjectCountBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IConstructibleObjectGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.COBJ,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IConstructibleObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IConstructibleObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IConstructibleObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ConstructibleObjectBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly ConstructibleObjectBinaryCreateTranslation Instance = new ConstructibleObjectBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.COBJ;
        public static ParseResult FillBinaryRecordTypes(
            IConstructibleObjectInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PickUpSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PutDownSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.FVPA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Components = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ConstructibleObjectComponent>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ConstructibleObjectComponent.TryCreateFromBinary)
                        .CastExtendedList<ConstructibleObjectComponent>();
                    return (int)ConstructibleObject_FieldIndex.Components;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ConstructibleObject_FieldIndex.Description;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)ConstructibleObject_FieldIndex.Conditions;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CreatedObject.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.CreatedObject;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WorkbenchKeyword.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.WorkbenchKeyword;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM1 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ConstructibleObject_FieldIndex.NAM1;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ConstructibleObject_FieldIndex.NAM2;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM3 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ConstructibleObject_FieldIndex.NAM3;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MenuArtObject.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.MenuArtObject;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Categories = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)ConstructibleObject_FieldIndex.Categories;
                }
                case RecordTypeInts.INTV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CreatedObjectCounts = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ConstructibleCreatedObjectCount>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ConstructibleCreatedObjectCount.TryCreateFromBinary)
                        .CastExtendedList<ConstructibleCreatedObjectCount>();
                    return (int)ConstructibleObject_FieldIndex.CreatedObjectCounts;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ConstructibleObjectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class ConstructibleObjectBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IConstructibleObjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ConstructibleObject_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ConstructibleObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ConstructibleObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ConstructibleObjectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ConstructibleObjectCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ConstructibleObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ConstructibleObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IConstructibleObject);


        #region PickUpSound
        private int? _PickUpSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> PickUpSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _PickUpSoundLocation);
        #endregion
        #region PutDownSound
        private int? _PutDownSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> PutDownSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _PutDownSoundLocation);
        #endregion
        public IReadOnlyList<IConstructibleObjectComponentGetter>? Components { get; private set; }
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = Array.Empty<IConditionGetter>();
        #region CreatedObject
        private int? _CreatedObjectLocation;
        public IFormLinkNullableGetter<IConstructibleObjectTargetGetter> CreatedObject => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IConstructibleObjectTargetGetter>(_package, _recordData, _CreatedObjectLocation);
        #endregion
        #region WorkbenchKeyword
        private int? _WorkbenchKeywordLocation;
        public IFormLinkNullableGetter<IKeywordGetter> WorkbenchKeyword => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _WorkbenchKeywordLocation);
        #endregion
        #region NAM1
        private int? _NAM1Location;
        public ReadOnlyMemorySlice<Byte>? NAM1 => _NAM1Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM1Location.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region NAM2
        private int? _NAM2Location;
        public ReadOnlyMemorySlice<Byte>? NAM2 => _NAM2Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM2Location.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region NAM3
        private int? _NAM3Location;
        public ReadOnlyMemorySlice<Byte>? NAM3 => _NAM3Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM3Location.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region MenuArtObject
        private int? _MenuArtObjectLocation;
        public IFormLinkNullableGetter<IArtObjectGetter> MenuArtObject => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArtObjectGetter>(_package, _recordData, _MenuArtObjectLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Categories { get; private set; }
        public IReadOnlyList<IConstructibleCreatedObjectCountGetter>? CreatedObjectCounts { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ConstructibleObjectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IConstructibleObjectGetter ConstructibleObjectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ConstructibleObjectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IConstructibleObjectGetter ConstructibleObjectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ConstructibleObjectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.YNAM:
                {
                    _PickUpSoundLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    _PutDownSoundLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.FVPA:
                {
                    this.Components = BinaryOverlayList.FactoryByStartIndexWithTrigger<IConstructibleObjectComponentGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 8,
                        getter: (s, p) => ConstructibleObjectComponentBinaryOverlay.ConstructibleObjectComponentFactory(s, p));
                    return (int)ConstructibleObject_FieldIndex.Components;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.Description;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)ConstructibleObject_FieldIndex.Conditions;
                }
                case RecordTypeInts.CNAM:
                {
                    _CreatedObjectLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.CreatedObject;
                }
                case RecordTypeInts.BNAM:
                {
                    _WorkbenchKeywordLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.WorkbenchKeyword;
                }
                case RecordTypeInts.NAM1:
                {
                    _NAM1Location = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.NAM1;
                }
                case RecordTypeInts.NAM2:
                {
                    _NAM2Location = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.NAM2;
                }
                case RecordTypeInts.NAM3:
                {
                    _NAM3Location = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.NAM3;
                }
                case RecordTypeInts.ANAM:
                {
                    _MenuArtObjectLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.MenuArtObject;
                }
                case RecordTypeInts.FNAM:
                {
                    this.Categories = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)ConstructibleObject_FieldIndex.Categories;
                }
                case RecordTypeInts.INTV:
                {
                    this.CreatedObjectCounts = BinaryOverlayList.FactoryByStartIndexWithTrigger<IConstructibleCreatedObjectCountGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => ConstructibleCreatedObjectCountBinaryOverlay.ConstructibleCreatedObjectCountFactory(s, p));
                    return (int)ConstructibleObject_FieldIndex.CreatedObjectCounts;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ConstructibleObjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ConstructibleObject>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IConstructibleObjectGetter rhs) return false;
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IConstructibleObjectGetter? obj)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

