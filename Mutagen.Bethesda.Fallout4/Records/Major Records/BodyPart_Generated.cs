/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class BodyPart :
        IBodyPart,
        IEquatable<IBodyPartGetter>,
        ILoquiObjectSetter<BodyPart>
    {
        #region Ctor
        public BodyPart()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IBodyPartGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region PartNode
        public String PartNode { get; set; } = string.Empty;
        #endregion
        #region VatsTarget
        public String VatsTarget { get; set; } = string.Empty;
        #endregion
        #region DamageMult
        public Single DamageMult { get; set; } = default(Single);
        #endregion
        #region ExplodableDebris
        private readonly IFormLink<IDebrisGetter> _ExplodableDebris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> ExplodableDebris
        {
            get => _ExplodableDebris;
            set => _ExplodableDebris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IBodyPartGetter.ExplodableDebris => this.ExplodableDebris;
        #endregion
        #region ExplodableExplosion
        private readonly IFormLink<IExplosionGetter> _ExplodableExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> ExplodableExplosion
        {
            get => _ExplodableExplosion;
            set => _ExplodableExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IBodyPartGetter.ExplodableExplosion => this.ExplodableExplosion;
        #endregion
        #region ExplodableDebrisScale
        public Single ExplodableDebrisScale { get; set; } = default(Single);
        #endregion
        #region SeverableDebris
        private readonly IFormLink<IDebrisGetter> _SeverableDebris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> SeverableDebris
        {
            get => _SeverableDebris;
            set => _SeverableDebris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IBodyPartGetter.SeverableDebris => this.SeverableDebris;
        #endregion
        #region SeverableExplosion
        private readonly IFormLink<IExplosionGetter> _SeverableExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> SeverableExplosion
        {
            get => _SeverableExplosion;
            set => _SeverableExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IBodyPartGetter.SeverableExplosion => this.SeverableExplosion;
        #endregion
        #region SeverableDebrisScale
        public Single SeverableDebrisScale { get; set; } = default(Single);
        #endregion
        #region CutMin
        public Single CutMin { get; set; } = default(Single);
        #endregion
        #region CutMax
        public Single CutMax { get; set; } = default(Single);
        #endregion
        #region CutRadius
        public Single CutRadius { get; set; } = default(Single);
        #endregion
        #region GoreEffectsLocalRotateX
        public Single GoreEffectsLocalRotateX { get; set; } = default(Single);
        #endregion
        #region GoreEffectsLocalRotateY
        public Single GoreEffectsLocalRotateY { get; set; } = default(Single);
        #endregion
        #region CutTesselation
        public Single CutTesselation { get; set; } = default(Single);
        #endregion
        #region SeverableImpactData
        private readonly IFormLink<IImpactDataSetGetter> _SeverableImpactData = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> SeverableImpactData
        {
            get => _SeverableImpactData;
            set => _SeverableImpactData.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IBodyPartGetter.SeverableImpactData => this.SeverableImpactData;
        #endregion
        #region ExplodableImpactData
        private readonly IFormLink<IImpactDataSetGetter> _ExplodableImpactData = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> ExplodableImpactData
        {
            get => _ExplodableImpactData;
            set => _ExplodableImpactData.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IBodyPartGetter.ExplodableImpactData => this.ExplodableImpactData;
        #endregion
        #region ExplodableLimbReplacementScale
        public Single ExplodableLimbReplacementScale { get; set; } = default(Single);
        #endregion
        #region Flags
        public BodyPart.Flag Flags { get; set; } = default(BodyPart.Flag);
        #endregion
        #region Type
        public BodyPart.PartType Type { get; set; } = default(BodyPart.PartType);
        #endregion
        #region HealthPercent
        public Percent HealthPercent { get; set; } = default(Percent);
        #endregion
        #region ActorValue
        private readonly IFormLink<IActorValueInformationGetter> _ActorValue = new FormLink<IActorValueInformationGetter>();
        public IFormLink<IActorValueInformationGetter> ActorValue
        {
            get => _ActorValue;
            set => _ActorValue.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IActorValueInformationGetter> IBodyPartGetter.ActorValue => this.ActorValue;
        #endregion
        #region ToHitChance
        public Percent ToHitChance { get; set; } = default(Percent);
        #endregion
        #region ExplosionChance
        public Percent ExplosionChance { get; set; } = default(Percent);
        #endregion
        #region NonLethalDismembermentChance
        public Percent NonLethalDismembermentChance { get; set; } = default(Percent);
        #endregion
        #region SeverableDebrisCount
        public Byte SeverableDebrisCount { get; set; } = default(Byte);
        #endregion
        #region ExplodableDebrisCount
        public Byte ExplodableDebrisCount { get; set; } = default(Byte);
        #endregion
        #region SeverableDecalCount
        public Byte SeverableDecalCount { get; set; } = default(Byte);
        #endregion
        #region ExplodableDecalCount
        public Byte ExplodableDecalCount { get; set; } = default(Byte);
        #endregion
        #region GeometrySegmentIndex
        public Byte GeometrySegmentIndex { get; set; } = default(Byte);
        #endregion
        #region OnCrippleArtObject
        private readonly IFormLink<IArtObjectGetter> _OnCrippleArtObject = new FormLink<IArtObjectGetter>();
        public IFormLink<IArtObjectGetter> OnCrippleArtObject
        {
            get => _OnCrippleArtObject;
            set => _OnCrippleArtObject.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IArtObjectGetter> IBodyPartGetter.OnCrippleArtObject => this.OnCrippleArtObject;
        #endregion
        #region OnCrippleDebris
        private readonly IFormLink<IDebrisGetter> _OnCrippleDebris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> OnCrippleDebris
        {
            get => _OnCrippleDebris;
            set => _OnCrippleDebris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IBodyPartGetter.OnCrippleDebris => this.OnCrippleDebris;
        #endregion
        #region OnCrippleExplosion
        private readonly IFormLink<IExplosionGetter> _OnCrippleExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> OnCrippleExplosion
        {
            get => _OnCrippleExplosion;
            set => _OnCrippleExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IBodyPartGetter.OnCrippleExplosion => this.OnCrippleExplosion;
        #endregion
        #region OnCrippleImpactData
        private readonly IFormLink<IImpactDataSetGetter> _OnCrippleImpactData = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> OnCrippleImpactData
        {
            get => _OnCrippleImpactData;
            set => _OnCrippleImpactData.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IBodyPartGetter.OnCrippleImpactData => this.OnCrippleImpactData;
        #endregion
        #region OnCrippleDebrisScale
        public Single OnCrippleDebrisScale { get; set; } = default(Single);
        #endregion
        #region OnCrippleDebrisCount
        public Byte OnCrippleDebrisCount { get; set; } = default(Byte);
        #endregion
        #region OnCrippleDecalCount
        public Byte OnCrippleDecalCount { get; set; } = default(Byte);
        #endregion
        #region LimbReplacementModel
        public String LimbReplacementModel { get; set; } = string.Empty;
        #endregion
        #region GoreTargetBone
        public String GoreTargetBone { get; set; } = string.Empty;
        #endregion
        #region TextureFilesHashes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TextureFilesHashes;
        public MemorySlice<Byte>? TextureFilesHashes
        {
            get => this._TextureFilesHashes;
            set => this._TextureFilesHashes = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IBodyPartGetter.TextureFilesHashes => this.TextureFilesHashes;
        #endregion
        #region HitReactionStart
        public String? HitReactionStart { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBodyPartGetter.HitReactionStart => this.HitReactionStart;
        #endregion
        #region HitReactionEnd
        public String? HitReactionEnd { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBodyPartGetter.HitReactionEnd => this.HitReactionEnd;
        #endregion
        #region GoreEffectsDismemberBloodArt
        private readonly IFormLinkNullable<IArtObjectGetter> _GoreEffectsDismemberBloodArt = new FormLinkNullable<IArtObjectGetter>();
        public IFormLinkNullable<IArtObjectGetter> GoreEffectsDismemberBloodArt
        {
            get => _GoreEffectsDismemberBloodArt;
            set => _GoreEffectsDismemberBloodArt.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArtObjectGetter> IBodyPartGetter.GoreEffectsDismemberBloodArt => this.GoreEffectsDismemberBloodArt;
        #endregion
        #region GoreEffectsBloodImpactMaterialType
        private readonly IFormLinkNullable<IMaterialTypeGetter> _GoreEffectsBloodImpactMaterialType = new FormLinkNullable<IMaterialTypeGetter>();
        public IFormLinkNullable<IMaterialTypeGetter> GoreEffectsBloodImpactMaterialType
        {
            get => _GoreEffectsBloodImpactMaterialType;
            set => _GoreEffectsBloodImpactMaterialType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMaterialTypeGetter> IBodyPartGetter.GoreEffectsBloodImpactMaterialType => this.GoreEffectsBloodImpactMaterialType;
        #endregion
        #region OnCrippleBloodImpactMaterialType
        private readonly IFormLinkNullable<IMaterialTypeGetter> _OnCrippleBloodImpactMaterialType = new FormLinkNullable<IMaterialTypeGetter>();
        public IFormLinkNullable<IMaterialTypeGetter> OnCrippleBloodImpactMaterialType
        {
            get => _OnCrippleBloodImpactMaterialType;
            set => _OnCrippleBloodImpactMaterialType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMaterialTypeGetter> IBodyPartGetter.OnCrippleBloodImpactMaterialType => this.OnCrippleBloodImpactMaterialType;
        #endregion
        #region MeatCapTextureSet
        private readonly IFormLinkNullable<ITextureSetGetter> _MeatCapTextureSet = new FormLinkNullable<ITextureSetGetter>();
        public IFormLinkNullable<ITextureSetGetter> MeatCapTextureSet
        {
            get => _MeatCapTextureSet;
            set => _MeatCapTextureSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITextureSetGetter> IBodyPartGetter.MeatCapTextureSet => this.MeatCapTextureSet;
        #endregion
        #region CollarTextureSet
        private readonly IFormLinkNullable<ITextureSetGetter> _CollarTextureSet = new FormLinkNullable<ITextureSetGetter>();
        public IFormLinkNullable<ITextureSetGetter> CollarTextureSet
        {
            get => _CollarTextureSet;
            set => _CollarTextureSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITextureSetGetter> IBodyPartGetter.CollarTextureSet => this.CollarTextureSet;
        #endregion
        #region TwistVariablePrefix
        public String? TwistVariablePrefix { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBodyPartGetter.TwistVariablePrefix => this.TwistVariablePrefix;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BodyPartMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBodyPartGetter rhs) return false;
            return ((BodyPartCommon)((IBodyPartGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBodyPartGetter? obj)
        {
            return ((BodyPartCommon)((IBodyPartGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BodyPartCommon)((IBodyPartGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Name = initialValue;
                this.PartNode = initialValue;
                this.VatsTarget = initialValue;
                this.DamageMult = initialValue;
                this.ExplodableDebris = initialValue;
                this.ExplodableExplosion = initialValue;
                this.ExplodableDebrisScale = initialValue;
                this.SeverableDebris = initialValue;
                this.SeverableExplosion = initialValue;
                this.SeverableDebrisScale = initialValue;
                this.CutMin = initialValue;
                this.CutMax = initialValue;
                this.CutRadius = initialValue;
                this.GoreEffectsLocalRotateX = initialValue;
                this.GoreEffectsLocalRotateY = initialValue;
                this.CutTesselation = initialValue;
                this.SeverableImpactData = initialValue;
                this.ExplodableImpactData = initialValue;
                this.ExplodableLimbReplacementScale = initialValue;
                this.Flags = initialValue;
                this.Type = initialValue;
                this.HealthPercent = initialValue;
                this.ActorValue = initialValue;
                this.ToHitChance = initialValue;
                this.ExplosionChance = initialValue;
                this.NonLethalDismembermentChance = initialValue;
                this.SeverableDebrisCount = initialValue;
                this.ExplodableDebrisCount = initialValue;
                this.SeverableDecalCount = initialValue;
                this.ExplodableDecalCount = initialValue;
                this.GeometrySegmentIndex = initialValue;
                this.OnCrippleArtObject = initialValue;
                this.OnCrippleDebris = initialValue;
                this.OnCrippleExplosion = initialValue;
                this.OnCrippleImpactData = initialValue;
                this.OnCrippleDebrisScale = initialValue;
                this.OnCrippleDebrisCount = initialValue;
                this.OnCrippleDecalCount = initialValue;
                this.LimbReplacementModel = initialValue;
                this.GoreTargetBone = initialValue;
                this.TextureFilesHashes = initialValue;
                this.HitReactionStart = initialValue;
                this.HitReactionEnd = initialValue;
                this.GoreEffectsDismemberBloodArt = initialValue;
                this.GoreEffectsBloodImpactMaterialType = initialValue;
                this.OnCrippleBloodImpactMaterialType = initialValue;
                this.MeatCapTextureSet = initialValue;
                this.CollarTextureSet = initialValue;
                this.TwistVariablePrefix = initialValue;
            }

            public Mask(
                TItem Name,
                TItem PartNode,
                TItem VatsTarget,
                TItem DamageMult,
                TItem ExplodableDebris,
                TItem ExplodableExplosion,
                TItem ExplodableDebrisScale,
                TItem SeverableDebris,
                TItem SeverableExplosion,
                TItem SeverableDebrisScale,
                TItem CutMin,
                TItem CutMax,
                TItem CutRadius,
                TItem GoreEffectsLocalRotateX,
                TItem GoreEffectsLocalRotateY,
                TItem CutTesselation,
                TItem SeverableImpactData,
                TItem ExplodableImpactData,
                TItem ExplodableLimbReplacementScale,
                TItem Flags,
                TItem Type,
                TItem HealthPercent,
                TItem ActorValue,
                TItem ToHitChance,
                TItem ExplosionChance,
                TItem NonLethalDismembermentChance,
                TItem SeverableDebrisCount,
                TItem ExplodableDebrisCount,
                TItem SeverableDecalCount,
                TItem ExplodableDecalCount,
                TItem GeometrySegmentIndex,
                TItem OnCrippleArtObject,
                TItem OnCrippleDebris,
                TItem OnCrippleExplosion,
                TItem OnCrippleImpactData,
                TItem OnCrippleDebrisScale,
                TItem OnCrippleDebrisCount,
                TItem OnCrippleDecalCount,
                TItem LimbReplacementModel,
                TItem GoreTargetBone,
                TItem TextureFilesHashes,
                TItem HitReactionStart,
                TItem HitReactionEnd,
                TItem GoreEffectsDismemberBloodArt,
                TItem GoreEffectsBloodImpactMaterialType,
                TItem OnCrippleBloodImpactMaterialType,
                TItem MeatCapTextureSet,
                TItem CollarTextureSet,
                TItem TwistVariablePrefix)
            {
                this.Name = Name;
                this.PartNode = PartNode;
                this.VatsTarget = VatsTarget;
                this.DamageMult = DamageMult;
                this.ExplodableDebris = ExplodableDebris;
                this.ExplodableExplosion = ExplodableExplosion;
                this.ExplodableDebrisScale = ExplodableDebrisScale;
                this.SeverableDebris = SeverableDebris;
                this.SeverableExplosion = SeverableExplosion;
                this.SeverableDebrisScale = SeverableDebrisScale;
                this.CutMin = CutMin;
                this.CutMax = CutMax;
                this.CutRadius = CutRadius;
                this.GoreEffectsLocalRotateX = GoreEffectsLocalRotateX;
                this.GoreEffectsLocalRotateY = GoreEffectsLocalRotateY;
                this.CutTesselation = CutTesselation;
                this.SeverableImpactData = SeverableImpactData;
                this.ExplodableImpactData = ExplodableImpactData;
                this.ExplodableLimbReplacementScale = ExplodableLimbReplacementScale;
                this.Flags = Flags;
                this.Type = Type;
                this.HealthPercent = HealthPercent;
                this.ActorValue = ActorValue;
                this.ToHitChance = ToHitChance;
                this.ExplosionChance = ExplosionChance;
                this.NonLethalDismembermentChance = NonLethalDismembermentChance;
                this.SeverableDebrisCount = SeverableDebrisCount;
                this.ExplodableDebrisCount = ExplodableDebrisCount;
                this.SeverableDecalCount = SeverableDecalCount;
                this.ExplodableDecalCount = ExplodableDecalCount;
                this.GeometrySegmentIndex = GeometrySegmentIndex;
                this.OnCrippleArtObject = OnCrippleArtObject;
                this.OnCrippleDebris = OnCrippleDebris;
                this.OnCrippleExplosion = OnCrippleExplosion;
                this.OnCrippleImpactData = OnCrippleImpactData;
                this.OnCrippleDebrisScale = OnCrippleDebrisScale;
                this.OnCrippleDebrisCount = OnCrippleDebrisCount;
                this.OnCrippleDecalCount = OnCrippleDecalCount;
                this.LimbReplacementModel = LimbReplacementModel;
                this.GoreTargetBone = GoreTargetBone;
                this.TextureFilesHashes = TextureFilesHashes;
                this.HitReactionStart = HitReactionStart;
                this.HitReactionEnd = HitReactionEnd;
                this.GoreEffectsDismemberBloodArt = GoreEffectsDismemberBloodArt;
                this.GoreEffectsBloodImpactMaterialType = GoreEffectsBloodImpactMaterialType;
                this.OnCrippleBloodImpactMaterialType = OnCrippleBloodImpactMaterialType;
                this.MeatCapTextureSet = MeatCapTextureSet;
                this.CollarTextureSet = CollarTextureSet;
                this.TwistVariablePrefix = TwistVariablePrefix;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem PartNode;
            public TItem VatsTarget;
            public TItem DamageMult;
            public TItem ExplodableDebris;
            public TItem ExplodableExplosion;
            public TItem ExplodableDebrisScale;
            public TItem SeverableDebris;
            public TItem SeverableExplosion;
            public TItem SeverableDebrisScale;
            public TItem CutMin;
            public TItem CutMax;
            public TItem CutRadius;
            public TItem GoreEffectsLocalRotateX;
            public TItem GoreEffectsLocalRotateY;
            public TItem CutTesselation;
            public TItem SeverableImpactData;
            public TItem ExplodableImpactData;
            public TItem ExplodableLimbReplacementScale;
            public TItem Flags;
            public TItem Type;
            public TItem HealthPercent;
            public TItem ActorValue;
            public TItem ToHitChance;
            public TItem ExplosionChance;
            public TItem NonLethalDismembermentChance;
            public TItem SeverableDebrisCount;
            public TItem ExplodableDebrisCount;
            public TItem SeverableDecalCount;
            public TItem ExplodableDecalCount;
            public TItem GeometrySegmentIndex;
            public TItem OnCrippleArtObject;
            public TItem OnCrippleDebris;
            public TItem OnCrippleExplosion;
            public TItem OnCrippleImpactData;
            public TItem OnCrippleDebrisScale;
            public TItem OnCrippleDebrisCount;
            public TItem OnCrippleDecalCount;
            public TItem LimbReplacementModel;
            public TItem GoreTargetBone;
            public TItem TextureFilesHashes;
            public TItem HitReactionStart;
            public TItem HitReactionEnd;
            public TItem GoreEffectsDismemberBloodArt;
            public TItem GoreEffectsBloodImpactMaterialType;
            public TItem OnCrippleBloodImpactMaterialType;
            public TItem MeatCapTextureSet;
            public TItem CollarTextureSet;
            public TItem TwistVariablePrefix;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.PartNode, rhs.PartNode)) return false;
                if (!object.Equals(this.VatsTarget, rhs.VatsTarget)) return false;
                if (!object.Equals(this.DamageMult, rhs.DamageMult)) return false;
                if (!object.Equals(this.ExplodableDebris, rhs.ExplodableDebris)) return false;
                if (!object.Equals(this.ExplodableExplosion, rhs.ExplodableExplosion)) return false;
                if (!object.Equals(this.ExplodableDebrisScale, rhs.ExplodableDebrisScale)) return false;
                if (!object.Equals(this.SeverableDebris, rhs.SeverableDebris)) return false;
                if (!object.Equals(this.SeverableExplosion, rhs.SeverableExplosion)) return false;
                if (!object.Equals(this.SeverableDebrisScale, rhs.SeverableDebrisScale)) return false;
                if (!object.Equals(this.CutMin, rhs.CutMin)) return false;
                if (!object.Equals(this.CutMax, rhs.CutMax)) return false;
                if (!object.Equals(this.CutRadius, rhs.CutRadius)) return false;
                if (!object.Equals(this.GoreEffectsLocalRotateX, rhs.GoreEffectsLocalRotateX)) return false;
                if (!object.Equals(this.GoreEffectsLocalRotateY, rhs.GoreEffectsLocalRotateY)) return false;
                if (!object.Equals(this.CutTesselation, rhs.CutTesselation)) return false;
                if (!object.Equals(this.SeverableImpactData, rhs.SeverableImpactData)) return false;
                if (!object.Equals(this.ExplodableImpactData, rhs.ExplodableImpactData)) return false;
                if (!object.Equals(this.ExplodableLimbReplacementScale, rhs.ExplodableLimbReplacementScale)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.HealthPercent, rhs.HealthPercent)) return false;
                if (!object.Equals(this.ActorValue, rhs.ActorValue)) return false;
                if (!object.Equals(this.ToHitChance, rhs.ToHitChance)) return false;
                if (!object.Equals(this.ExplosionChance, rhs.ExplosionChance)) return false;
                if (!object.Equals(this.NonLethalDismembermentChance, rhs.NonLethalDismembermentChance)) return false;
                if (!object.Equals(this.SeverableDebrisCount, rhs.SeverableDebrisCount)) return false;
                if (!object.Equals(this.ExplodableDebrisCount, rhs.ExplodableDebrisCount)) return false;
                if (!object.Equals(this.SeverableDecalCount, rhs.SeverableDecalCount)) return false;
                if (!object.Equals(this.ExplodableDecalCount, rhs.ExplodableDecalCount)) return false;
                if (!object.Equals(this.GeometrySegmentIndex, rhs.GeometrySegmentIndex)) return false;
                if (!object.Equals(this.OnCrippleArtObject, rhs.OnCrippleArtObject)) return false;
                if (!object.Equals(this.OnCrippleDebris, rhs.OnCrippleDebris)) return false;
                if (!object.Equals(this.OnCrippleExplosion, rhs.OnCrippleExplosion)) return false;
                if (!object.Equals(this.OnCrippleImpactData, rhs.OnCrippleImpactData)) return false;
                if (!object.Equals(this.OnCrippleDebrisScale, rhs.OnCrippleDebrisScale)) return false;
                if (!object.Equals(this.OnCrippleDebrisCount, rhs.OnCrippleDebrisCount)) return false;
                if (!object.Equals(this.OnCrippleDecalCount, rhs.OnCrippleDecalCount)) return false;
                if (!object.Equals(this.LimbReplacementModel, rhs.LimbReplacementModel)) return false;
                if (!object.Equals(this.GoreTargetBone, rhs.GoreTargetBone)) return false;
                if (!object.Equals(this.TextureFilesHashes, rhs.TextureFilesHashes)) return false;
                if (!object.Equals(this.HitReactionStart, rhs.HitReactionStart)) return false;
                if (!object.Equals(this.HitReactionEnd, rhs.HitReactionEnd)) return false;
                if (!object.Equals(this.GoreEffectsDismemberBloodArt, rhs.GoreEffectsDismemberBloodArt)) return false;
                if (!object.Equals(this.GoreEffectsBloodImpactMaterialType, rhs.GoreEffectsBloodImpactMaterialType)) return false;
                if (!object.Equals(this.OnCrippleBloodImpactMaterialType, rhs.OnCrippleBloodImpactMaterialType)) return false;
                if (!object.Equals(this.MeatCapTextureSet, rhs.MeatCapTextureSet)) return false;
                if (!object.Equals(this.CollarTextureSet, rhs.CollarTextureSet)) return false;
                if (!object.Equals(this.TwistVariablePrefix, rhs.TwistVariablePrefix)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.PartNode);
                hash.Add(this.VatsTarget);
                hash.Add(this.DamageMult);
                hash.Add(this.ExplodableDebris);
                hash.Add(this.ExplodableExplosion);
                hash.Add(this.ExplodableDebrisScale);
                hash.Add(this.SeverableDebris);
                hash.Add(this.SeverableExplosion);
                hash.Add(this.SeverableDebrisScale);
                hash.Add(this.CutMin);
                hash.Add(this.CutMax);
                hash.Add(this.CutRadius);
                hash.Add(this.GoreEffectsLocalRotateX);
                hash.Add(this.GoreEffectsLocalRotateY);
                hash.Add(this.CutTesselation);
                hash.Add(this.SeverableImpactData);
                hash.Add(this.ExplodableImpactData);
                hash.Add(this.ExplodableLimbReplacementScale);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.HealthPercent);
                hash.Add(this.ActorValue);
                hash.Add(this.ToHitChance);
                hash.Add(this.ExplosionChance);
                hash.Add(this.NonLethalDismembermentChance);
                hash.Add(this.SeverableDebrisCount);
                hash.Add(this.ExplodableDebrisCount);
                hash.Add(this.SeverableDecalCount);
                hash.Add(this.ExplodableDecalCount);
                hash.Add(this.GeometrySegmentIndex);
                hash.Add(this.OnCrippleArtObject);
                hash.Add(this.OnCrippleDebris);
                hash.Add(this.OnCrippleExplosion);
                hash.Add(this.OnCrippleImpactData);
                hash.Add(this.OnCrippleDebrisScale);
                hash.Add(this.OnCrippleDebrisCount);
                hash.Add(this.OnCrippleDecalCount);
                hash.Add(this.LimbReplacementModel);
                hash.Add(this.GoreTargetBone);
                hash.Add(this.TextureFilesHashes);
                hash.Add(this.HitReactionStart);
                hash.Add(this.HitReactionEnd);
                hash.Add(this.GoreEffectsDismemberBloodArt);
                hash.Add(this.GoreEffectsBloodImpactMaterialType);
                hash.Add(this.OnCrippleBloodImpactMaterialType);
                hash.Add(this.MeatCapTextureSet);
                hash.Add(this.CollarTextureSet);
                hash.Add(this.TwistVariablePrefix);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Name)) return false;
                if (!eval(this.PartNode)) return false;
                if (!eval(this.VatsTarget)) return false;
                if (!eval(this.DamageMult)) return false;
                if (!eval(this.ExplodableDebris)) return false;
                if (!eval(this.ExplodableExplosion)) return false;
                if (!eval(this.ExplodableDebrisScale)) return false;
                if (!eval(this.SeverableDebris)) return false;
                if (!eval(this.SeverableExplosion)) return false;
                if (!eval(this.SeverableDebrisScale)) return false;
                if (!eval(this.CutMin)) return false;
                if (!eval(this.CutMax)) return false;
                if (!eval(this.CutRadius)) return false;
                if (!eval(this.GoreEffectsLocalRotateX)) return false;
                if (!eval(this.GoreEffectsLocalRotateY)) return false;
                if (!eval(this.CutTesselation)) return false;
                if (!eval(this.SeverableImpactData)) return false;
                if (!eval(this.ExplodableImpactData)) return false;
                if (!eval(this.ExplodableLimbReplacementScale)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.HealthPercent)) return false;
                if (!eval(this.ActorValue)) return false;
                if (!eval(this.ToHitChance)) return false;
                if (!eval(this.ExplosionChance)) return false;
                if (!eval(this.NonLethalDismembermentChance)) return false;
                if (!eval(this.SeverableDebrisCount)) return false;
                if (!eval(this.ExplodableDebrisCount)) return false;
                if (!eval(this.SeverableDecalCount)) return false;
                if (!eval(this.ExplodableDecalCount)) return false;
                if (!eval(this.GeometrySegmentIndex)) return false;
                if (!eval(this.OnCrippleArtObject)) return false;
                if (!eval(this.OnCrippleDebris)) return false;
                if (!eval(this.OnCrippleExplosion)) return false;
                if (!eval(this.OnCrippleImpactData)) return false;
                if (!eval(this.OnCrippleDebrisScale)) return false;
                if (!eval(this.OnCrippleDebrisCount)) return false;
                if (!eval(this.OnCrippleDecalCount)) return false;
                if (!eval(this.LimbReplacementModel)) return false;
                if (!eval(this.GoreTargetBone)) return false;
                if (!eval(this.TextureFilesHashes)) return false;
                if (!eval(this.HitReactionStart)) return false;
                if (!eval(this.HitReactionEnd)) return false;
                if (!eval(this.GoreEffectsDismemberBloodArt)) return false;
                if (!eval(this.GoreEffectsBloodImpactMaterialType)) return false;
                if (!eval(this.OnCrippleBloodImpactMaterialType)) return false;
                if (!eval(this.MeatCapTextureSet)) return false;
                if (!eval(this.CollarTextureSet)) return false;
                if (!eval(this.TwistVariablePrefix)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Name)) return true;
                if (eval(this.PartNode)) return true;
                if (eval(this.VatsTarget)) return true;
                if (eval(this.DamageMult)) return true;
                if (eval(this.ExplodableDebris)) return true;
                if (eval(this.ExplodableExplosion)) return true;
                if (eval(this.ExplodableDebrisScale)) return true;
                if (eval(this.SeverableDebris)) return true;
                if (eval(this.SeverableExplosion)) return true;
                if (eval(this.SeverableDebrisScale)) return true;
                if (eval(this.CutMin)) return true;
                if (eval(this.CutMax)) return true;
                if (eval(this.CutRadius)) return true;
                if (eval(this.GoreEffectsLocalRotateX)) return true;
                if (eval(this.GoreEffectsLocalRotateY)) return true;
                if (eval(this.CutTesselation)) return true;
                if (eval(this.SeverableImpactData)) return true;
                if (eval(this.ExplodableImpactData)) return true;
                if (eval(this.ExplodableLimbReplacementScale)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.HealthPercent)) return true;
                if (eval(this.ActorValue)) return true;
                if (eval(this.ToHitChance)) return true;
                if (eval(this.ExplosionChance)) return true;
                if (eval(this.NonLethalDismembermentChance)) return true;
                if (eval(this.SeverableDebrisCount)) return true;
                if (eval(this.ExplodableDebrisCount)) return true;
                if (eval(this.SeverableDecalCount)) return true;
                if (eval(this.ExplodableDecalCount)) return true;
                if (eval(this.GeometrySegmentIndex)) return true;
                if (eval(this.OnCrippleArtObject)) return true;
                if (eval(this.OnCrippleDebris)) return true;
                if (eval(this.OnCrippleExplosion)) return true;
                if (eval(this.OnCrippleImpactData)) return true;
                if (eval(this.OnCrippleDebrisScale)) return true;
                if (eval(this.OnCrippleDebrisCount)) return true;
                if (eval(this.OnCrippleDecalCount)) return true;
                if (eval(this.LimbReplacementModel)) return true;
                if (eval(this.GoreTargetBone)) return true;
                if (eval(this.TextureFilesHashes)) return true;
                if (eval(this.HitReactionStart)) return true;
                if (eval(this.HitReactionEnd)) return true;
                if (eval(this.GoreEffectsDismemberBloodArt)) return true;
                if (eval(this.GoreEffectsBloodImpactMaterialType)) return true;
                if (eval(this.OnCrippleBloodImpactMaterialType)) return true;
                if (eval(this.MeatCapTextureSet)) return true;
                if (eval(this.CollarTextureSet)) return true;
                if (eval(this.TwistVariablePrefix)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BodyPart.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Name = eval(this.Name);
                obj.PartNode = eval(this.PartNode);
                obj.VatsTarget = eval(this.VatsTarget);
                obj.DamageMult = eval(this.DamageMult);
                obj.ExplodableDebris = eval(this.ExplodableDebris);
                obj.ExplodableExplosion = eval(this.ExplodableExplosion);
                obj.ExplodableDebrisScale = eval(this.ExplodableDebrisScale);
                obj.SeverableDebris = eval(this.SeverableDebris);
                obj.SeverableExplosion = eval(this.SeverableExplosion);
                obj.SeverableDebrisScale = eval(this.SeverableDebrisScale);
                obj.CutMin = eval(this.CutMin);
                obj.CutMax = eval(this.CutMax);
                obj.CutRadius = eval(this.CutRadius);
                obj.GoreEffectsLocalRotateX = eval(this.GoreEffectsLocalRotateX);
                obj.GoreEffectsLocalRotateY = eval(this.GoreEffectsLocalRotateY);
                obj.CutTesselation = eval(this.CutTesselation);
                obj.SeverableImpactData = eval(this.SeverableImpactData);
                obj.ExplodableImpactData = eval(this.ExplodableImpactData);
                obj.ExplodableLimbReplacementScale = eval(this.ExplodableLimbReplacementScale);
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                obj.HealthPercent = eval(this.HealthPercent);
                obj.ActorValue = eval(this.ActorValue);
                obj.ToHitChance = eval(this.ToHitChance);
                obj.ExplosionChance = eval(this.ExplosionChance);
                obj.NonLethalDismembermentChance = eval(this.NonLethalDismembermentChance);
                obj.SeverableDebrisCount = eval(this.SeverableDebrisCount);
                obj.ExplodableDebrisCount = eval(this.ExplodableDebrisCount);
                obj.SeverableDecalCount = eval(this.SeverableDecalCount);
                obj.ExplodableDecalCount = eval(this.ExplodableDecalCount);
                obj.GeometrySegmentIndex = eval(this.GeometrySegmentIndex);
                obj.OnCrippleArtObject = eval(this.OnCrippleArtObject);
                obj.OnCrippleDebris = eval(this.OnCrippleDebris);
                obj.OnCrippleExplosion = eval(this.OnCrippleExplosion);
                obj.OnCrippleImpactData = eval(this.OnCrippleImpactData);
                obj.OnCrippleDebrisScale = eval(this.OnCrippleDebrisScale);
                obj.OnCrippleDebrisCount = eval(this.OnCrippleDebrisCount);
                obj.OnCrippleDecalCount = eval(this.OnCrippleDecalCount);
                obj.LimbReplacementModel = eval(this.LimbReplacementModel);
                obj.GoreTargetBone = eval(this.GoreTargetBone);
                obj.TextureFilesHashes = eval(this.TextureFilesHashes);
                obj.HitReactionStart = eval(this.HitReactionStart);
                obj.HitReactionEnd = eval(this.HitReactionEnd);
                obj.GoreEffectsDismemberBloodArt = eval(this.GoreEffectsDismemberBloodArt);
                obj.GoreEffectsBloodImpactMaterialType = eval(this.GoreEffectsBloodImpactMaterialType);
                obj.OnCrippleBloodImpactMaterialType = eval(this.OnCrippleBloodImpactMaterialType);
                obj.MeatCapTextureSet = eval(this.MeatCapTextureSet);
                obj.CollarTextureSet = eval(this.CollarTextureSet);
                obj.TwistVariablePrefix = eval(this.TwistVariablePrefix);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BodyPart.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BodyPart.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BodyPart.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.PartNode ?? true)
                    {
                        sb.AppendItem(PartNode, "PartNode");
                    }
                    if (printMask?.VatsTarget ?? true)
                    {
                        sb.AppendItem(VatsTarget, "VatsTarget");
                    }
                    if (printMask?.DamageMult ?? true)
                    {
                        sb.AppendItem(DamageMult, "DamageMult");
                    }
                    if (printMask?.ExplodableDebris ?? true)
                    {
                        sb.AppendItem(ExplodableDebris, "ExplodableDebris");
                    }
                    if (printMask?.ExplodableExplosion ?? true)
                    {
                        sb.AppendItem(ExplodableExplosion, "ExplodableExplosion");
                    }
                    if (printMask?.ExplodableDebrisScale ?? true)
                    {
                        sb.AppendItem(ExplodableDebrisScale, "ExplodableDebrisScale");
                    }
                    if (printMask?.SeverableDebris ?? true)
                    {
                        sb.AppendItem(SeverableDebris, "SeverableDebris");
                    }
                    if (printMask?.SeverableExplosion ?? true)
                    {
                        sb.AppendItem(SeverableExplosion, "SeverableExplosion");
                    }
                    if (printMask?.SeverableDebrisScale ?? true)
                    {
                        sb.AppendItem(SeverableDebrisScale, "SeverableDebrisScale");
                    }
                    if (printMask?.CutMin ?? true)
                    {
                        sb.AppendItem(CutMin, "CutMin");
                    }
                    if (printMask?.CutMax ?? true)
                    {
                        sb.AppendItem(CutMax, "CutMax");
                    }
                    if (printMask?.CutRadius ?? true)
                    {
                        sb.AppendItem(CutRadius, "CutRadius");
                    }
                    if (printMask?.GoreEffectsLocalRotateX ?? true)
                    {
                        sb.AppendItem(GoreEffectsLocalRotateX, "GoreEffectsLocalRotateX");
                    }
                    if (printMask?.GoreEffectsLocalRotateY ?? true)
                    {
                        sb.AppendItem(GoreEffectsLocalRotateY, "GoreEffectsLocalRotateY");
                    }
                    if (printMask?.CutTesselation ?? true)
                    {
                        sb.AppendItem(CutTesselation, "CutTesselation");
                    }
                    if (printMask?.SeverableImpactData ?? true)
                    {
                        sb.AppendItem(SeverableImpactData, "SeverableImpactData");
                    }
                    if (printMask?.ExplodableImpactData ?? true)
                    {
                        sb.AppendItem(ExplodableImpactData, "ExplodableImpactData");
                    }
                    if (printMask?.ExplodableLimbReplacementScale ?? true)
                    {
                        sb.AppendItem(ExplodableLimbReplacementScale, "ExplodableLimbReplacementScale");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.HealthPercent ?? true)
                    {
                        sb.AppendItem(HealthPercent, "HealthPercent");
                    }
                    if (printMask?.ActorValue ?? true)
                    {
                        sb.AppendItem(ActorValue, "ActorValue");
                    }
                    if (printMask?.ToHitChance ?? true)
                    {
                        sb.AppendItem(ToHitChance, "ToHitChance");
                    }
                    if (printMask?.ExplosionChance ?? true)
                    {
                        sb.AppendItem(ExplosionChance, "ExplosionChance");
                    }
                    if (printMask?.NonLethalDismembermentChance ?? true)
                    {
                        sb.AppendItem(NonLethalDismembermentChance, "NonLethalDismembermentChance");
                    }
                    if (printMask?.SeverableDebrisCount ?? true)
                    {
                        sb.AppendItem(SeverableDebrisCount, "SeverableDebrisCount");
                    }
                    if (printMask?.ExplodableDebrisCount ?? true)
                    {
                        sb.AppendItem(ExplodableDebrisCount, "ExplodableDebrisCount");
                    }
                    if (printMask?.SeverableDecalCount ?? true)
                    {
                        sb.AppendItem(SeverableDecalCount, "SeverableDecalCount");
                    }
                    if (printMask?.ExplodableDecalCount ?? true)
                    {
                        sb.AppendItem(ExplodableDecalCount, "ExplodableDecalCount");
                    }
                    if (printMask?.GeometrySegmentIndex ?? true)
                    {
                        sb.AppendItem(GeometrySegmentIndex, "GeometrySegmentIndex");
                    }
                    if (printMask?.OnCrippleArtObject ?? true)
                    {
                        sb.AppendItem(OnCrippleArtObject, "OnCrippleArtObject");
                    }
                    if (printMask?.OnCrippleDebris ?? true)
                    {
                        sb.AppendItem(OnCrippleDebris, "OnCrippleDebris");
                    }
                    if (printMask?.OnCrippleExplosion ?? true)
                    {
                        sb.AppendItem(OnCrippleExplosion, "OnCrippleExplosion");
                    }
                    if (printMask?.OnCrippleImpactData ?? true)
                    {
                        sb.AppendItem(OnCrippleImpactData, "OnCrippleImpactData");
                    }
                    if (printMask?.OnCrippleDebrisScale ?? true)
                    {
                        sb.AppendItem(OnCrippleDebrisScale, "OnCrippleDebrisScale");
                    }
                    if (printMask?.OnCrippleDebrisCount ?? true)
                    {
                        sb.AppendItem(OnCrippleDebrisCount, "OnCrippleDebrisCount");
                    }
                    if (printMask?.OnCrippleDecalCount ?? true)
                    {
                        sb.AppendItem(OnCrippleDecalCount, "OnCrippleDecalCount");
                    }
                    if (printMask?.LimbReplacementModel ?? true)
                    {
                        sb.AppendItem(LimbReplacementModel, "LimbReplacementModel");
                    }
                    if (printMask?.GoreTargetBone ?? true)
                    {
                        sb.AppendItem(GoreTargetBone, "GoreTargetBone");
                    }
                    if (printMask?.TextureFilesHashes ?? true)
                    {
                        sb.AppendItem(TextureFilesHashes, "TextureFilesHashes");
                    }
                    if (printMask?.HitReactionStart ?? true)
                    {
                        sb.AppendItem(HitReactionStart, "HitReactionStart");
                    }
                    if (printMask?.HitReactionEnd ?? true)
                    {
                        sb.AppendItem(HitReactionEnd, "HitReactionEnd");
                    }
                    if (printMask?.GoreEffectsDismemberBloodArt ?? true)
                    {
                        sb.AppendItem(GoreEffectsDismemberBloodArt, "GoreEffectsDismemberBloodArt");
                    }
                    if (printMask?.GoreEffectsBloodImpactMaterialType ?? true)
                    {
                        sb.AppendItem(GoreEffectsBloodImpactMaterialType, "GoreEffectsBloodImpactMaterialType");
                    }
                    if (printMask?.OnCrippleBloodImpactMaterialType ?? true)
                    {
                        sb.AppendItem(OnCrippleBloodImpactMaterialType, "OnCrippleBloodImpactMaterialType");
                    }
                    if (printMask?.MeatCapTextureSet ?? true)
                    {
                        sb.AppendItem(MeatCapTextureSet, "MeatCapTextureSet");
                    }
                    if (printMask?.CollarTextureSet ?? true)
                    {
                        sb.AppendItem(CollarTextureSet, "CollarTextureSet");
                    }
                    if (printMask?.TwistVariablePrefix ?? true)
                    {
                        sb.AppendItem(TwistVariablePrefix, "TwistVariablePrefix");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Name;
            public Exception? PartNode;
            public Exception? VatsTarget;
            public Exception? DamageMult;
            public Exception? ExplodableDebris;
            public Exception? ExplodableExplosion;
            public Exception? ExplodableDebrisScale;
            public Exception? SeverableDebris;
            public Exception? SeverableExplosion;
            public Exception? SeverableDebrisScale;
            public Exception? CutMin;
            public Exception? CutMax;
            public Exception? CutRadius;
            public Exception? GoreEffectsLocalRotateX;
            public Exception? GoreEffectsLocalRotateY;
            public Exception? CutTesselation;
            public Exception? SeverableImpactData;
            public Exception? ExplodableImpactData;
            public Exception? ExplodableLimbReplacementScale;
            public Exception? Flags;
            public Exception? Type;
            public Exception? HealthPercent;
            public Exception? ActorValue;
            public Exception? ToHitChance;
            public Exception? ExplosionChance;
            public Exception? NonLethalDismembermentChance;
            public Exception? SeverableDebrisCount;
            public Exception? ExplodableDebrisCount;
            public Exception? SeverableDecalCount;
            public Exception? ExplodableDecalCount;
            public Exception? GeometrySegmentIndex;
            public Exception? OnCrippleArtObject;
            public Exception? OnCrippleDebris;
            public Exception? OnCrippleExplosion;
            public Exception? OnCrippleImpactData;
            public Exception? OnCrippleDebrisScale;
            public Exception? OnCrippleDebrisCount;
            public Exception? OnCrippleDecalCount;
            public Exception? LimbReplacementModel;
            public Exception? GoreTargetBone;
            public Exception? TextureFilesHashes;
            public Exception? HitReactionStart;
            public Exception? HitReactionEnd;
            public Exception? GoreEffectsDismemberBloodArt;
            public Exception? GoreEffectsBloodImpactMaterialType;
            public Exception? OnCrippleBloodImpactMaterialType;
            public Exception? MeatCapTextureSet;
            public Exception? CollarTextureSet;
            public Exception? TwistVariablePrefix;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BodyPart_FieldIndex enu = (BodyPart_FieldIndex)index;
                switch (enu)
                {
                    case BodyPart_FieldIndex.Name:
                        return Name;
                    case BodyPart_FieldIndex.PartNode:
                        return PartNode;
                    case BodyPart_FieldIndex.VatsTarget:
                        return VatsTarget;
                    case BodyPart_FieldIndex.DamageMult:
                        return DamageMult;
                    case BodyPart_FieldIndex.ExplodableDebris:
                        return ExplodableDebris;
                    case BodyPart_FieldIndex.ExplodableExplosion:
                        return ExplodableExplosion;
                    case BodyPart_FieldIndex.ExplodableDebrisScale:
                        return ExplodableDebrisScale;
                    case BodyPart_FieldIndex.SeverableDebris:
                        return SeverableDebris;
                    case BodyPart_FieldIndex.SeverableExplosion:
                        return SeverableExplosion;
                    case BodyPart_FieldIndex.SeverableDebrisScale:
                        return SeverableDebrisScale;
                    case BodyPart_FieldIndex.CutMin:
                        return CutMin;
                    case BodyPart_FieldIndex.CutMax:
                        return CutMax;
                    case BodyPart_FieldIndex.CutRadius:
                        return CutRadius;
                    case BodyPart_FieldIndex.GoreEffectsLocalRotateX:
                        return GoreEffectsLocalRotateX;
                    case BodyPart_FieldIndex.GoreEffectsLocalRotateY:
                        return GoreEffectsLocalRotateY;
                    case BodyPart_FieldIndex.CutTesselation:
                        return CutTesselation;
                    case BodyPart_FieldIndex.SeverableImpactData:
                        return SeverableImpactData;
                    case BodyPart_FieldIndex.ExplodableImpactData:
                        return ExplodableImpactData;
                    case BodyPart_FieldIndex.ExplodableLimbReplacementScale:
                        return ExplodableLimbReplacementScale;
                    case BodyPart_FieldIndex.Flags:
                        return Flags;
                    case BodyPart_FieldIndex.Type:
                        return Type;
                    case BodyPart_FieldIndex.HealthPercent:
                        return HealthPercent;
                    case BodyPart_FieldIndex.ActorValue:
                        return ActorValue;
                    case BodyPart_FieldIndex.ToHitChance:
                        return ToHitChance;
                    case BodyPart_FieldIndex.ExplosionChance:
                        return ExplosionChance;
                    case BodyPart_FieldIndex.NonLethalDismembermentChance:
                        return NonLethalDismembermentChance;
                    case BodyPart_FieldIndex.SeverableDebrisCount:
                        return SeverableDebrisCount;
                    case BodyPart_FieldIndex.ExplodableDebrisCount:
                        return ExplodableDebrisCount;
                    case BodyPart_FieldIndex.SeverableDecalCount:
                        return SeverableDecalCount;
                    case BodyPart_FieldIndex.ExplodableDecalCount:
                        return ExplodableDecalCount;
                    case BodyPart_FieldIndex.GeometrySegmentIndex:
                        return GeometrySegmentIndex;
                    case BodyPart_FieldIndex.OnCrippleArtObject:
                        return OnCrippleArtObject;
                    case BodyPart_FieldIndex.OnCrippleDebris:
                        return OnCrippleDebris;
                    case BodyPart_FieldIndex.OnCrippleExplosion:
                        return OnCrippleExplosion;
                    case BodyPart_FieldIndex.OnCrippleImpactData:
                        return OnCrippleImpactData;
                    case BodyPart_FieldIndex.OnCrippleDebrisScale:
                        return OnCrippleDebrisScale;
                    case BodyPart_FieldIndex.OnCrippleDebrisCount:
                        return OnCrippleDebrisCount;
                    case BodyPart_FieldIndex.OnCrippleDecalCount:
                        return OnCrippleDecalCount;
                    case BodyPart_FieldIndex.LimbReplacementModel:
                        return LimbReplacementModel;
                    case BodyPart_FieldIndex.GoreTargetBone:
                        return GoreTargetBone;
                    case BodyPart_FieldIndex.TextureFilesHashes:
                        return TextureFilesHashes;
                    case BodyPart_FieldIndex.HitReactionStart:
                        return HitReactionStart;
                    case BodyPart_FieldIndex.HitReactionEnd:
                        return HitReactionEnd;
                    case BodyPart_FieldIndex.GoreEffectsDismemberBloodArt:
                        return GoreEffectsDismemberBloodArt;
                    case BodyPart_FieldIndex.GoreEffectsBloodImpactMaterialType:
                        return GoreEffectsBloodImpactMaterialType;
                    case BodyPart_FieldIndex.OnCrippleBloodImpactMaterialType:
                        return OnCrippleBloodImpactMaterialType;
                    case BodyPart_FieldIndex.MeatCapTextureSet:
                        return MeatCapTextureSet;
                    case BodyPart_FieldIndex.CollarTextureSet:
                        return CollarTextureSet;
                    case BodyPart_FieldIndex.TwistVariablePrefix:
                        return TwistVariablePrefix;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BodyPart_FieldIndex enu = (BodyPart_FieldIndex)index;
                switch (enu)
                {
                    case BodyPart_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case BodyPart_FieldIndex.PartNode:
                        this.PartNode = ex;
                        break;
                    case BodyPart_FieldIndex.VatsTarget:
                        this.VatsTarget = ex;
                        break;
                    case BodyPart_FieldIndex.DamageMult:
                        this.DamageMult = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableDebris:
                        this.ExplodableDebris = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableExplosion:
                        this.ExplodableExplosion = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableDebrisScale:
                        this.ExplodableDebrisScale = ex;
                        break;
                    case BodyPart_FieldIndex.SeverableDebris:
                        this.SeverableDebris = ex;
                        break;
                    case BodyPart_FieldIndex.SeverableExplosion:
                        this.SeverableExplosion = ex;
                        break;
                    case BodyPart_FieldIndex.SeverableDebrisScale:
                        this.SeverableDebrisScale = ex;
                        break;
                    case BodyPart_FieldIndex.CutMin:
                        this.CutMin = ex;
                        break;
                    case BodyPart_FieldIndex.CutMax:
                        this.CutMax = ex;
                        break;
                    case BodyPart_FieldIndex.CutRadius:
                        this.CutRadius = ex;
                        break;
                    case BodyPart_FieldIndex.GoreEffectsLocalRotateX:
                        this.GoreEffectsLocalRotateX = ex;
                        break;
                    case BodyPart_FieldIndex.GoreEffectsLocalRotateY:
                        this.GoreEffectsLocalRotateY = ex;
                        break;
                    case BodyPart_FieldIndex.CutTesselation:
                        this.CutTesselation = ex;
                        break;
                    case BodyPart_FieldIndex.SeverableImpactData:
                        this.SeverableImpactData = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableImpactData:
                        this.ExplodableImpactData = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableLimbReplacementScale:
                        this.ExplodableLimbReplacementScale = ex;
                        break;
                    case BodyPart_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case BodyPart_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case BodyPart_FieldIndex.HealthPercent:
                        this.HealthPercent = ex;
                        break;
                    case BodyPart_FieldIndex.ActorValue:
                        this.ActorValue = ex;
                        break;
                    case BodyPart_FieldIndex.ToHitChance:
                        this.ToHitChance = ex;
                        break;
                    case BodyPart_FieldIndex.ExplosionChance:
                        this.ExplosionChance = ex;
                        break;
                    case BodyPart_FieldIndex.NonLethalDismembermentChance:
                        this.NonLethalDismembermentChance = ex;
                        break;
                    case BodyPart_FieldIndex.SeverableDebrisCount:
                        this.SeverableDebrisCount = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableDebrisCount:
                        this.ExplodableDebrisCount = ex;
                        break;
                    case BodyPart_FieldIndex.SeverableDecalCount:
                        this.SeverableDecalCount = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableDecalCount:
                        this.ExplodableDecalCount = ex;
                        break;
                    case BodyPart_FieldIndex.GeometrySegmentIndex:
                        this.GeometrySegmentIndex = ex;
                        break;
                    case BodyPart_FieldIndex.OnCrippleArtObject:
                        this.OnCrippleArtObject = ex;
                        break;
                    case BodyPart_FieldIndex.OnCrippleDebris:
                        this.OnCrippleDebris = ex;
                        break;
                    case BodyPart_FieldIndex.OnCrippleExplosion:
                        this.OnCrippleExplosion = ex;
                        break;
                    case BodyPart_FieldIndex.OnCrippleImpactData:
                        this.OnCrippleImpactData = ex;
                        break;
                    case BodyPart_FieldIndex.OnCrippleDebrisScale:
                        this.OnCrippleDebrisScale = ex;
                        break;
                    case BodyPart_FieldIndex.OnCrippleDebrisCount:
                        this.OnCrippleDebrisCount = ex;
                        break;
                    case BodyPart_FieldIndex.OnCrippleDecalCount:
                        this.OnCrippleDecalCount = ex;
                        break;
                    case BodyPart_FieldIndex.LimbReplacementModel:
                        this.LimbReplacementModel = ex;
                        break;
                    case BodyPart_FieldIndex.GoreTargetBone:
                        this.GoreTargetBone = ex;
                        break;
                    case BodyPart_FieldIndex.TextureFilesHashes:
                        this.TextureFilesHashes = ex;
                        break;
                    case BodyPart_FieldIndex.HitReactionStart:
                        this.HitReactionStart = ex;
                        break;
                    case BodyPart_FieldIndex.HitReactionEnd:
                        this.HitReactionEnd = ex;
                        break;
                    case BodyPart_FieldIndex.GoreEffectsDismemberBloodArt:
                        this.GoreEffectsDismemberBloodArt = ex;
                        break;
                    case BodyPart_FieldIndex.GoreEffectsBloodImpactMaterialType:
                        this.GoreEffectsBloodImpactMaterialType = ex;
                        break;
                    case BodyPart_FieldIndex.OnCrippleBloodImpactMaterialType:
                        this.OnCrippleBloodImpactMaterialType = ex;
                        break;
                    case BodyPart_FieldIndex.MeatCapTextureSet:
                        this.MeatCapTextureSet = ex;
                        break;
                    case BodyPart_FieldIndex.CollarTextureSet:
                        this.CollarTextureSet = ex;
                        break;
                    case BodyPart_FieldIndex.TwistVariablePrefix:
                        this.TwistVariablePrefix = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BodyPart_FieldIndex enu = (BodyPart_FieldIndex)index;
                switch (enu)
                {
                    case BodyPart_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.PartNode:
                        this.PartNode = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.VatsTarget:
                        this.VatsTarget = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.DamageMult:
                        this.DamageMult = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableDebris:
                        this.ExplodableDebris = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableExplosion:
                        this.ExplodableExplosion = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableDebrisScale:
                        this.ExplodableDebrisScale = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.SeverableDebris:
                        this.SeverableDebris = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.SeverableExplosion:
                        this.SeverableExplosion = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.SeverableDebrisScale:
                        this.SeverableDebrisScale = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.CutMin:
                        this.CutMin = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.CutMax:
                        this.CutMax = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.CutRadius:
                        this.CutRadius = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.GoreEffectsLocalRotateX:
                        this.GoreEffectsLocalRotateX = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.GoreEffectsLocalRotateY:
                        this.GoreEffectsLocalRotateY = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.CutTesselation:
                        this.CutTesselation = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.SeverableImpactData:
                        this.SeverableImpactData = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableImpactData:
                        this.ExplodableImpactData = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableLimbReplacementScale:
                        this.ExplodableLimbReplacementScale = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.HealthPercent:
                        this.HealthPercent = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ActorValue:
                        this.ActorValue = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ToHitChance:
                        this.ToHitChance = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplosionChance:
                        this.ExplosionChance = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.NonLethalDismembermentChance:
                        this.NonLethalDismembermentChance = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.SeverableDebrisCount:
                        this.SeverableDebrisCount = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableDebrisCount:
                        this.ExplodableDebrisCount = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.SeverableDecalCount:
                        this.SeverableDecalCount = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableDecalCount:
                        this.ExplodableDecalCount = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.GeometrySegmentIndex:
                        this.GeometrySegmentIndex = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.OnCrippleArtObject:
                        this.OnCrippleArtObject = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.OnCrippleDebris:
                        this.OnCrippleDebris = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.OnCrippleExplosion:
                        this.OnCrippleExplosion = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.OnCrippleImpactData:
                        this.OnCrippleImpactData = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.OnCrippleDebrisScale:
                        this.OnCrippleDebrisScale = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.OnCrippleDebrisCount:
                        this.OnCrippleDebrisCount = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.OnCrippleDecalCount:
                        this.OnCrippleDecalCount = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.LimbReplacementModel:
                        this.LimbReplacementModel = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.GoreTargetBone:
                        this.GoreTargetBone = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.TextureFilesHashes:
                        this.TextureFilesHashes = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.HitReactionStart:
                        this.HitReactionStart = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.HitReactionEnd:
                        this.HitReactionEnd = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.GoreEffectsDismemberBloodArt:
                        this.GoreEffectsDismemberBloodArt = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.GoreEffectsBloodImpactMaterialType:
                        this.GoreEffectsBloodImpactMaterialType = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.OnCrippleBloodImpactMaterialType:
                        this.OnCrippleBloodImpactMaterialType = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.MeatCapTextureSet:
                        this.MeatCapTextureSet = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.CollarTextureSet:
                        this.CollarTextureSet = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.TwistVariablePrefix:
                        this.TwistVariablePrefix = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (PartNode != null) return true;
                if (VatsTarget != null) return true;
                if (DamageMult != null) return true;
                if (ExplodableDebris != null) return true;
                if (ExplodableExplosion != null) return true;
                if (ExplodableDebrisScale != null) return true;
                if (SeverableDebris != null) return true;
                if (SeverableExplosion != null) return true;
                if (SeverableDebrisScale != null) return true;
                if (CutMin != null) return true;
                if (CutMax != null) return true;
                if (CutRadius != null) return true;
                if (GoreEffectsLocalRotateX != null) return true;
                if (GoreEffectsLocalRotateY != null) return true;
                if (CutTesselation != null) return true;
                if (SeverableImpactData != null) return true;
                if (ExplodableImpactData != null) return true;
                if (ExplodableLimbReplacementScale != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (HealthPercent != null) return true;
                if (ActorValue != null) return true;
                if (ToHitChance != null) return true;
                if (ExplosionChance != null) return true;
                if (NonLethalDismembermentChance != null) return true;
                if (SeverableDebrisCount != null) return true;
                if (ExplodableDebrisCount != null) return true;
                if (SeverableDecalCount != null) return true;
                if (ExplodableDecalCount != null) return true;
                if (GeometrySegmentIndex != null) return true;
                if (OnCrippleArtObject != null) return true;
                if (OnCrippleDebris != null) return true;
                if (OnCrippleExplosion != null) return true;
                if (OnCrippleImpactData != null) return true;
                if (OnCrippleDebrisScale != null) return true;
                if (OnCrippleDebrisCount != null) return true;
                if (OnCrippleDecalCount != null) return true;
                if (LimbReplacementModel != null) return true;
                if (GoreTargetBone != null) return true;
                if (TextureFilesHashes != null) return true;
                if (HitReactionStart != null) return true;
                if (HitReactionEnd != null) return true;
                if (GoreEffectsDismemberBloodArt != null) return true;
                if (GoreEffectsBloodImpactMaterialType != null) return true;
                if (OnCrippleBloodImpactMaterialType != null) return true;
                if (MeatCapTextureSet != null) return true;
                if (CollarTextureSet != null) return true;
                if (TwistVariablePrefix != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(PartNode, "PartNode");
                }
                {
                    sb.AppendItem(VatsTarget, "VatsTarget");
                }
                {
                    sb.AppendItem(DamageMult, "DamageMult");
                }
                {
                    sb.AppendItem(ExplodableDebris, "ExplodableDebris");
                }
                {
                    sb.AppendItem(ExplodableExplosion, "ExplodableExplosion");
                }
                {
                    sb.AppendItem(ExplodableDebrisScale, "ExplodableDebrisScale");
                }
                {
                    sb.AppendItem(SeverableDebris, "SeverableDebris");
                }
                {
                    sb.AppendItem(SeverableExplosion, "SeverableExplosion");
                }
                {
                    sb.AppendItem(SeverableDebrisScale, "SeverableDebrisScale");
                }
                {
                    sb.AppendItem(CutMin, "CutMin");
                }
                {
                    sb.AppendItem(CutMax, "CutMax");
                }
                {
                    sb.AppendItem(CutRadius, "CutRadius");
                }
                {
                    sb.AppendItem(GoreEffectsLocalRotateX, "GoreEffectsLocalRotateX");
                }
                {
                    sb.AppendItem(GoreEffectsLocalRotateY, "GoreEffectsLocalRotateY");
                }
                {
                    sb.AppendItem(CutTesselation, "CutTesselation");
                }
                {
                    sb.AppendItem(SeverableImpactData, "SeverableImpactData");
                }
                {
                    sb.AppendItem(ExplodableImpactData, "ExplodableImpactData");
                }
                {
                    sb.AppendItem(ExplodableLimbReplacementScale, "ExplodableLimbReplacementScale");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(HealthPercent, "HealthPercent");
                }
                {
                    sb.AppendItem(ActorValue, "ActorValue");
                }
                {
                    sb.AppendItem(ToHitChance, "ToHitChance");
                }
                {
                    sb.AppendItem(ExplosionChance, "ExplosionChance");
                }
                {
                    sb.AppendItem(NonLethalDismembermentChance, "NonLethalDismembermentChance");
                }
                {
                    sb.AppendItem(SeverableDebrisCount, "SeverableDebrisCount");
                }
                {
                    sb.AppendItem(ExplodableDebrisCount, "ExplodableDebrisCount");
                }
                {
                    sb.AppendItem(SeverableDecalCount, "SeverableDecalCount");
                }
                {
                    sb.AppendItem(ExplodableDecalCount, "ExplodableDecalCount");
                }
                {
                    sb.AppendItem(GeometrySegmentIndex, "GeometrySegmentIndex");
                }
                {
                    sb.AppendItem(OnCrippleArtObject, "OnCrippleArtObject");
                }
                {
                    sb.AppendItem(OnCrippleDebris, "OnCrippleDebris");
                }
                {
                    sb.AppendItem(OnCrippleExplosion, "OnCrippleExplosion");
                }
                {
                    sb.AppendItem(OnCrippleImpactData, "OnCrippleImpactData");
                }
                {
                    sb.AppendItem(OnCrippleDebrisScale, "OnCrippleDebrisScale");
                }
                {
                    sb.AppendItem(OnCrippleDebrisCount, "OnCrippleDebrisCount");
                }
                {
                    sb.AppendItem(OnCrippleDecalCount, "OnCrippleDecalCount");
                }
                {
                    sb.AppendItem(LimbReplacementModel, "LimbReplacementModel");
                }
                {
                    sb.AppendItem(GoreTargetBone, "GoreTargetBone");
                }
                {
                    sb.AppendItem(TextureFilesHashes, "TextureFilesHashes");
                }
                {
                    sb.AppendItem(HitReactionStart, "HitReactionStart");
                }
                {
                    sb.AppendItem(HitReactionEnd, "HitReactionEnd");
                }
                {
                    sb.AppendItem(GoreEffectsDismemberBloodArt, "GoreEffectsDismemberBloodArt");
                }
                {
                    sb.AppendItem(GoreEffectsBloodImpactMaterialType, "GoreEffectsBloodImpactMaterialType");
                }
                {
                    sb.AppendItem(OnCrippleBloodImpactMaterialType, "OnCrippleBloodImpactMaterialType");
                }
                {
                    sb.AppendItem(MeatCapTextureSet, "MeatCapTextureSet");
                }
                {
                    sb.AppendItem(CollarTextureSet, "CollarTextureSet");
                }
                {
                    sb.AppendItem(TwistVariablePrefix, "TwistVariablePrefix");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.PartNode = this.PartNode.Combine(rhs.PartNode);
                ret.VatsTarget = this.VatsTarget.Combine(rhs.VatsTarget);
                ret.DamageMult = this.DamageMult.Combine(rhs.DamageMult);
                ret.ExplodableDebris = this.ExplodableDebris.Combine(rhs.ExplodableDebris);
                ret.ExplodableExplosion = this.ExplodableExplosion.Combine(rhs.ExplodableExplosion);
                ret.ExplodableDebrisScale = this.ExplodableDebrisScale.Combine(rhs.ExplodableDebrisScale);
                ret.SeverableDebris = this.SeverableDebris.Combine(rhs.SeverableDebris);
                ret.SeverableExplosion = this.SeverableExplosion.Combine(rhs.SeverableExplosion);
                ret.SeverableDebrisScale = this.SeverableDebrisScale.Combine(rhs.SeverableDebrisScale);
                ret.CutMin = this.CutMin.Combine(rhs.CutMin);
                ret.CutMax = this.CutMax.Combine(rhs.CutMax);
                ret.CutRadius = this.CutRadius.Combine(rhs.CutRadius);
                ret.GoreEffectsLocalRotateX = this.GoreEffectsLocalRotateX.Combine(rhs.GoreEffectsLocalRotateX);
                ret.GoreEffectsLocalRotateY = this.GoreEffectsLocalRotateY.Combine(rhs.GoreEffectsLocalRotateY);
                ret.CutTesselation = this.CutTesselation.Combine(rhs.CutTesselation);
                ret.SeverableImpactData = this.SeverableImpactData.Combine(rhs.SeverableImpactData);
                ret.ExplodableImpactData = this.ExplodableImpactData.Combine(rhs.ExplodableImpactData);
                ret.ExplodableLimbReplacementScale = this.ExplodableLimbReplacementScale.Combine(rhs.ExplodableLimbReplacementScale);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.HealthPercent = this.HealthPercent.Combine(rhs.HealthPercent);
                ret.ActorValue = this.ActorValue.Combine(rhs.ActorValue);
                ret.ToHitChance = this.ToHitChance.Combine(rhs.ToHitChance);
                ret.ExplosionChance = this.ExplosionChance.Combine(rhs.ExplosionChance);
                ret.NonLethalDismembermentChance = this.NonLethalDismembermentChance.Combine(rhs.NonLethalDismembermentChance);
                ret.SeverableDebrisCount = this.SeverableDebrisCount.Combine(rhs.SeverableDebrisCount);
                ret.ExplodableDebrisCount = this.ExplodableDebrisCount.Combine(rhs.ExplodableDebrisCount);
                ret.SeverableDecalCount = this.SeverableDecalCount.Combine(rhs.SeverableDecalCount);
                ret.ExplodableDecalCount = this.ExplodableDecalCount.Combine(rhs.ExplodableDecalCount);
                ret.GeometrySegmentIndex = this.GeometrySegmentIndex.Combine(rhs.GeometrySegmentIndex);
                ret.OnCrippleArtObject = this.OnCrippleArtObject.Combine(rhs.OnCrippleArtObject);
                ret.OnCrippleDebris = this.OnCrippleDebris.Combine(rhs.OnCrippleDebris);
                ret.OnCrippleExplosion = this.OnCrippleExplosion.Combine(rhs.OnCrippleExplosion);
                ret.OnCrippleImpactData = this.OnCrippleImpactData.Combine(rhs.OnCrippleImpactData);
                ret.OnCrippleDebrisScale = this.OnCrippleDebrisScale.Combine(rhs.OnCrippleDebrisScale);
                ret.OnCrippleDebrisCount = this.OnCrippleDebrisCount.Combine(rhs.OnCrippleDebrisCount);
                ret.OnCrippleDecalCount = this.OnCrippleDecalCount.Combine(rhs.OnCrippleDecalCount);
                ret.LimbReplacementModel = this.LimbReplacementModel.Combine(rhs.LimbReplacementModel);
                ret.GoreTargetBone = this.GoreTargetBone.Combine(rhs.GoreTargetBone);
                ret.TextureFilesHashes = this.TextureFilesHashes.Combine(rhs.TextureFilesHashes);
                ret.HitReactionStart = this.HitReactionStart.Combine(rhs.HitReactionStart);
                ret.HitReactionEnd = this.HitReactionEnd.Combine(rhs.HitReactionEnd);
                ret.GoreEffectsDismemberBloodArt = this.GoreEffectsDismemberBloodArt.Combine(rhs.GoreEffectsDismemberBloodArt);
                ret.GoreEffectsBloodImpactMaterialType = this.GoreEffectsBloodImpactMaterialType.Combine(rhs.GoreEffectsBloodImpactMaterialType);
                ret.OnCrippleBloodImpactMaterialType = this.OnCrippleBloodImpactMaterialType.Combine(rhs.OnCrippleBloodImpactMaterialType);
                ret.MeatCapTextureSet = this.MeatCapTextureSet.Combine(rhs.MeatCapTextureSet);
                ret.CollarTextureSet = this.CollarTextureSet.Combine(rhs.CollarTextureSet);
                ret.TwistVariablePrefix = this.TwistVariablePrefix.Combine(rhs.TwistVariablePrefix);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Name;
            public bool PartNode;
            public bool VatsTarget;
            public bool DamageMult;
            public bool ExplodableDebris;
            public bool ExplodableExplosion;
            public bool ExplodableDebrisScale;
            public bool SeverableDebris;
            public bool SeverableExplosion;
            public bool SeverableDebrisScale;
            public bool CutMin;
            public bool CutMax;
            public bool CutRadius;
            public bool GoreEffectsLocalRotateX;
            public bool GoreEffectsLocalRotateY;
            public bool CutTesselation;
            public bool SeverableImpactData;
            public bool ExplodableImpactData;
            public bool ExplodableLimbReplacementScale;
            public bool Flags;
            public bool Type;
            public bool HealthPercent;
            public bool ActorValue;
            public bool ToHitChance;
            public bool ExplosionChance;
            public bool NonLethalDismembermentChance;
            public bool SeverableDebrisCount;
            public bool ExplodableDebrisCount;
            public bool SeverableDecalCount;
            public bool ExplodableDecalCount;
            public bool GeometrySegmentIndex;
            public bool OnCrippleArtObject;
            public bool OnCrippleDebris;
            public bool OnCrippleExplosion;
            public bool OnCrippleImpactData;
            public bool OnCrippleDebrisScale;
            public bool OnCrippleDebrisCount;
            public bool OnCrippleDecalCount;
            public bool LimbReplacementModel;
            public bool GoreTargetBone;
            public bool TextureFilesHashes;
            public bool HitReactionStart;
            public bool HitReactionEnd;
            public bool GoreEffectsDismemberBloodArt;
            public bool GoreEffectsBloodImpactMaterialType;
            public bool OnCrippleBloodImpactMaterialType;
            public bool MeatCapTextureSet;
            public bool CollarTextureSet;
            public bool TwistVariablePrefix;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Name = defaultOn;
                this.PartNode = defaultOn;
                this.VatsTarget = defaultOn;
                this.DamageMult = defaultOn;
                this.ExplodableDebris = defaultOn;
                this.ExplodableExplosion = defaultOn;
                this.ExplodableDebrisScale = defaultOn;
                this.SeverableDebris = defaultOn;
                this.SeverableExplosion = defaultOn;
                this.SeverableDebrisScale = defaultOn;
                this.CutMin = defaultOn;
                this.CutMax = defaultOn;
                this.CutRadius = defaultOn;
                this.GoreEffectsLocalRotateX = defaultOn;
                this.GoreEffectsLocalRotateY = defaultOn;
                this.CutTesselation = defaultOn;
                this.SeverableImpactData = defaultOn;
                this.ExplodableImpactData = defaultOn;
                this.ExplodableLimbReplacementScale = defaultOn;
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.HealthPercent = defaultOn;
                this.ActorValue = defaultOn;
                this.ToHitChance = defaultOn;
                this.ExplosionChance = defaultOn;
                this.NonLethalDismembermentChance = defaultOn;
                this.SeverableDebrisCount = defaultOn;
                this.ExplodableDebrisCount = defaultOn;
                this.SeverableDecalCount = defaultOn;
                this.ExplodableDecalCount = defaultOn;
                this.GeometrySegmentIndex = defaultOn;
                this.OnCrippleArtObject = defaultOn;
                this.OnCrippleDebris = defaultOn;
                this.OnCrippleExplosion = defaultOn;
                this.OnCrippleImpactData = defaultOn;
                this.OnCrippleDebrisScale = defaultOn;
                this.OnCrippleDebrisCount = defaultOn;
                this.OnCrippleDecalCount = defaultOn;
                this.LimbReplacementModel = defaultOn;
                this.GoreTargetBone = defaultOn;
                this.TextureFilesHashes = defaultOn;
                this.HitReactionStart = defaultOn;
                this.HitReactionEnd = defaultOn;
                this.GoreEffectsDismemberBloodArt = defaultOn;
                this.GoreEffectsBloodImpactMaterialType = defaultOn;
                this.OnCrippleBloodImpactMaterialType = defaultOn;
                this.MeatCapTextureSet = defaultOn;
                this.CollarTextureSet = defaultOn;
                this.TwistVariablePrefix = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Name, null));
                ret.Add((PartNode, null));
                ret.Add((VatsTarget, null));
                ret.Add((DamageMult, null));
                ret.Add((ExplodableDebris, null));
                ret.Add((ExplodableExplosion, null));
                ret.Add((ExplodableDebrisScale, null));
                ret.Add((SeverableDebris, null));
                ret.Add((SeverableExplosion, null));
                ret.Add((SeverableDebrisScale, null));
                ret.Add((CutMin, null));
                ret.Add((CutMax, null));
                ret.Add((CutRadius, null));
                ret.Add((GoreEffectsLocalRotateX, null));
                ret.Add((GoreEffectsLocalRotateY, null));
                ret.Add((CutTesselation, null));
                ret.Add((SeverableImpactData, null));
                ret.Add((ExplodableImpactData, null));
                ret.Add((ExplodableLimbReplacementScale, null));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((HealthPercent, null));
                ret.Add((ActorValue, null));
                ret.Add((ToHitChance, null));
                ret.Add((ExplosionChance, null));
                ret.Add((NonLethalDismembermentChance, null));
                ret.Add((SeverableDebrisCount, null));
                ret.Add((ExplodableDebrisCount, null));
                ret.Add((SeverableDecalCount, null));
                ret.Add((ExplodableDecalCount, null));
                ret.Add((GeometrySegmentIndex, null));
                ret.Add((OnCrippleArtObject, null));
                ret.Add((OnCrippleDebris, null));
                ret.Add((OnCrippleExplosion, null));
                ret.Add((OnCrippleImpactData, null));
                ret.Add((OnCrippleDebrisScale, null));
                ret.Add((OnCrippleDebrisCount, null));
                ret.Add((OnCrippleDecalCount, null));
                ret.Add((LimbReplacementModel, null));
                ret.Add((GoreTargetBone, null));
                ret.Add((TextureFilesHashes, null));
                ret.Add((HitReactionStart, null));
                ret.Add((HitReactionEnd, null));
                ret.Add((GoreEffectsDismemberBloodArt, null));
                ret.Add((GoreEffectsBloodImpactMaterialType, null));
                ret.Add((OnCrippleBloodImpactMaterialType, null));
                ret.Add((MeatCapTextureSet, null));
                ret.Add((CollarTextureSet, null));
                ret.Add((TwistVariablePrefix, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BodyPartCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => BodyPartSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BodyPartBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BodyPartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static BodyPart CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BodyPart();
            ((BodyPartSetterCommon)((IBodyPartGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BodyPart item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BodyPartSetterCommon)((IBodyPartGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BodyPart GetNew()
        {
            return new BodyPart();
        }

    }
    #endregion

    #region Interface
    public partial interface IBodyPart :
        IBodyPartGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IBodyPart>,
        INamed,
        INamedRequired,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new String PartNode { get; set; }
        new String VatsTarget { get; set; }
        new Single DamageMult { get; set; }
        new IFormLink<IDebrisGetter> ExplodableDebris { get; set; }
        new IFormLink<IExplosionGetter> ExplodableExplosion { get; set; }
        new Single ExplodableDebrisScale { get; set; }
        new IFormLink<IDebrisGetter> SeverableDebris { get; set; }
        new IFormLink<IExplosionGetter> SeverableExplosion { get; set; }
        new Single SeverableDebrisScale { get; set; }
        new Single CutMin { get; set; }
        new Single CutMax { get; set; }
        new Single CutRadius { get; set; }
        new Single GoreEffectsLocalRotateX { get; set; }
        new Single GoreEffectsLocalRotateY { get; set; }
        new Single CutTesselation { get; set; }
        new IFormLink<IImpactDataSetGetter> SeverableImpactData { get; set; }
        new IFormLink<IImpactDataSetGetter> ExplodableImpactData { get; set; }
        new Single ExplodableLimbReplacementScale { get; set; }
        new BodyPart.Flag Flags { get; set; }
        new BodyPart.PartType Type { get; set; }
        new Percent HealthPercent { get; set; }
        new IFormLink<IActorValueInformationGetter> ActorValue { get; set; }
        new Percent ToHitChance { get; set; }
        new Percent ExplosionChance { get; set; }
        new Percent NonLethalDismembermentChance { get; set; }
        new Byte SeverableDebrisCount { get; set; }
        new Byte ExplodableDebrisCount { get; set; }
        new Byte SeverableDecalCount { get; set; }
        new Byte ExplodableDecalCount { get; set; }
        new Byte GeometrySegmentIndex { get; set; }
        new IFormLink<IArtObjectGetter> OnCrippleArtObject { get; set; }
        new IFormLink<IDebrisGetter> OnCrippleDebris { get; set; }
        new IFormLink<IExplosionGetter> OnCrippleExplosion { get; set; }
        new IFormLink<IImpactDataSetGetter> OnCrippleImpactData { get; set; }
        new Single OnCrippleDebrisScale { get; set; }
        new Byte OnCrippleDebrisCount { get; set; }
        new Byte OnCrippleDecalCount { get; set; }
        new String LimbReplacementModel { get; set; }
        new String GoreTargetBone { get; set; }
        new MemorySlice<Byte>? TextureFilesHashes { get; set; }
        new String? HitReactionStart { get; set; }
        new String? HitReactionEnd { get; set; }
        new IFormLinkNullable<IArtObjectGetter> GoreEffectsDismemberBloodArt { get; set; }
        new IFormLinkNullable<IMaterialTypeGetter> GoreEffectsBloodImpactMaterialType { get; set; }
        new IFormLinkNullable<IMaterialTypeGetter> OnCrippleBloodImpactMaterialType { get; set; }
        new IFormLinkNullable<ITextureSetGetter> MeatCapTextureSet { get; set; }
        new IFormLinkNullable<ITextureSetGetter> CollarTextureSet { get; set; }
        new String? TwistVariablePrefix { get; set; }
    }

    public partial interface IBodyPartGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IBodyPartGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => BodyPart_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        String PartNode { get; }
        String VatsTarget { get; }
        Single DamageMult { get; }
        IFormLinkGetter<IDebrisGetter> ExplodableDebris { get; }
        IFormLinkGetter<IExplosionGetter> ExplodableExplosion { get; }
        Single ExplodableDebrisScale { get; }
        IFormLinkGetter<IDebrisGetter> SeverableDebris { get; }
        IFormLinkGetter<IExplosionGetter> SeverableExplosion { get; }
        Single SeverableDebrisScale { get; }
        Single CutMin { get; }
        Single CutMax { get; }
        Single CutRadius { get; }
        Single GoreEffectsLocalRotateX { get; }
        Single GoreEffectsLocalRotateY { get; }
        Single CutTesselation { get; }
        IFormLinkGetter<IImpactDataSetGetter> SeverableImpactData { get; }
        IFormLinkGetter<IImpactDataSetGetter> ExplodableImpactData { get; }
        Single ExplodableLimbReplacementScale { get; }
        BodyPart.Flag Flags { get; }
        BodyPart.PartType Type { get; }
        Percent HealthPercent { get; }
        IFormLinkGetter<IActorValueInformationGetter> ActorValue { get; }
        Percent ToHitChance { get; }
        Percent ExplosionChance { get; }
        Percent NonLethalDismembermentChance { get; }
        Byte SeverableDebrisCount { get; }
        Byte ExplodableDebrisCount { get; }
        Byte SeverableDecalCount { get; }
        Byte ExplodableDecalCount { get; }
        Byte GeometrySegmentIndex { get; }
        IFormLinkGetter<IArtObjectGetter> OnCrippleArtObject { get; }
        IFormLinkGetter<IDebrisGetter> OnCrippleDebris { get; }
        IFormLinkGetter<IExplosionGetter> OnCrippleExplosion { get; }
        IFormLinkGetter<IImpactDataSetGetter> OnCrippleImpactData { get; }
        Single OnCrippleDebrisScale { get; }
        Byte OnCrippleDebrisCount { get; }
        Byte OnCrippleDecalCount { get; }
        String LimbReplacementModel { get; }
        String GoreTargetBone { get; }
        ReadOnlyMemorySlice<Byte>? TextureFilesHashes { get; }
        String? HitReactionStart { get; }
        String? HitReactionEnd { get; }
        IFormLinkNullableGetter<IArtObjectGetter> GoreEffectsDismemberBloodArt { get; }
        IFormLinkNullableGetter<IMaterialTypeGetter> GoreEffectsBloodImpactMaterialType { get; }
        IFormLinkNullableGetter<IMaterialTypeGetter> OnCrippleBloodImpactMaterialType { get; }
        IFormLinkNullableGetter<ITextureSetGetter> MeatCapTextureSet { get; }
        IFormLinkNullableGetter<ITextureSetGetter> CollarTextureSet { get; }
        String? TwistVariablePrefix { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BodyPartMixIn
    {
        public static void Clear(this IBodyPart item)
        {
            ((BodyPartSetterCommon)((IBodyPartGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BodyPart.Mask<bool> GetEqualsMask(
            this IBodyPartGetter item,
            IBodyPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBodyPartGetter item,
            string? name = null,
            BodyPart.Mask<bool>? printMask = null)
        {
            return ((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBodyPartGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BodyPart.Mask<bool>? printMask = null)
        {
            ((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBodyPartGetter item,
            IBodyPartGetter rhs,
            BodyPart.TranslationMask? equalsMask = null)
        {
            return ((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBodyPart lhs,
            IBodyPartGetter rhs)
        {
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBodyPart lhs,
            IBodyPartGetter rhs,
            BodyPart.TranslationMask? copyMask = null)
        {
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBodyPart lhs,
            IBodyPartGetter rhs,
            out BodyPart.ErrorMask errorMask,
            BodyPart.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BodyPart.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBodyPart lhs,
            IBodyPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BodyPart DeepCopy(
            this IBodyPartGetter item,
            BodyPart.TranslationMask? copyMask = null)
        {
            return ((BodyPartSetterTranslationCommon)((IBodyPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BodyPart DeepCopy(
            this IBodyPartGetter item,
            out BodyPart.ErrorMask errorMask,
            BodyPart.TranslationMask? copyMask = null)
        {
            return ((BodyPartSetterTranslationCommon)((IBodyPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BodyPart DeepCopy(
            this IBodyPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BodyPartSetterTranslationCommon)((IBodyPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBodyPart item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BodyPartSetterCommon)((IBodyPartGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum BodyPart_FieldIndex
    {
        Name = 0,
        PartNode = 1,
        VatsTarget = 2,
        DamageMult = 3,
        ExplodableDebris = 4,
        ExplodableExplosion = 5,
        ExplodableDebrisScale = 6,
        SeverableDebris = 7,
        SeverableExplosion = 8,
        SeverableDebrisScale = 9,
        CutMin = 10,
        CutMax = 11,
        CutRadius = 12,
        GoreEffectsLocalRotateX = 13,
        GoreEffectsLocalRotateY = 14,
        CutTesselation = 15,
        SeverableImpactData = 16,
        ExplodableImpactData = 17,
        ExplodableLimbReplacementScale = 18,
        Flags = 19,
        Type = 20,
        HealthPercent = 21,
        ActorValue = 22,
        ToHitChance = 23,
        ExplosionChance = 24,
        NonLethalDismembermentChance = 25,
        SeverableDebrisCount = 26,
        ExplodableDebrisCount = 27,
        SeverableDecalCount = 28,
        ExplodableDecalCount = 29,
        GeometrySegmentIndex = 30,
        OnCrippleArtObject = 31,
        OnCrippleDebris = 32,
        OnCrippleExplosion = 33,
        OnCrippleImpactData = 34,
        OnCrippleDebrisScale = 35,
        OnCrippleDebrisCount = 36,
        OnCrippleDecalCount = 37,
        LimbReplacementModel = 38,
        GoreTargetBone = 39,
        TextureFilesHashes = 40,
        HitReactionStart = 41,
        HitReactionEnd = 42,
        GoreEffectsDismemberBloodArt = 43,
        GoreEffectsBloodImpactMaterialType = 44,
        OnCrippleBloodImpactMaterialType = 45,
        MeatCapTextureSet = 46,
        CollarTextureSet = 47,
        TwistVariablePrefix = 48,
    }
    #endregion

    #region Registration
    internal partial class BodyPart_Registration : ILoquiRegistration
    {
        public static readonly BodyPart_Registration Instance = new BodyPart_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 49;

        public const ushort FieldCount = 49;

        public static readonly Type MaskType = typeof(BodyPart.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BodyPart.ErrorMask);

        public static readonly Type ClassType = typeof(BodyPart);

        public static readonly Type GetterType = typeof(IBodyPartGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBodyPart);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.BodyPart";

        public const string Name = "BodyPart";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(
                RecordTypes.BPTN,
                RecordTypes.BPNN);
            var all = RecordCollection.Factory(
                RecordTypes.BPTN,
                RecordTypes.BPNN,
                RecordTypes.BPNT,
                RecordTypes.BPND,
                RecordTypes.NAM1,
                RecordTypes.NAM4,
                RecordTypes.NAM5,
                RecordTypes.ENAM,
                RecordTypes.FNAM,
                RecordTypes.BNAM,
                RecordTypes.INAM,
                RecordTypes.JNAM,
                RecordTypes.CNAM,
                RecordTypes.NAM2,
                RecordTypes.DNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(BodyPartBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BodyPartSetterCommon
    {
        public static readonly BodyPartSetterCommon Instance = new BodyPartSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBodyPart item)
        {
            ClearPartial();
            item.Name = default;
            item.PartNode = string.Empty;
            item.VatsTarget = string.Empty;
            item.DamageMult = default(Single);
            item.ExplodableDebris.Clear();
            item.ExplodableExplosion.Clear();
            item.ExplodableDebrisScale = default(Single);
            item.SeverableDebris.Clear();
            item.SeverableExplosion.Clear();
            item.SeverableDebrisScale = default(Single);
            item.CutMin = default(Single);
            item.CutMax = default(Single);
            item.CutRadius = default(Single);
            item.GoreEffectsLocalRotateX = default(Single);
            item.GoreEffectsLocalRotateY = default(Single);
            item.CutTesselation = default(Single);
            item.SeverableImpactData.Clear();
            item.ExplodableImpactData.Clear();
            item.ExplodableLimbReplacementScale = default(Single);
            item.Flags = default(BodyPart.Flag);
            item.Type = default(BodyPart.PartType);
            item.HealthPercent = default(Percent);
            item.ActorValue.Clear();
            item.ToHitChance = default(Percent);
            item.ExplosionChance = default(Percent);
            item.NonLethalDismembermentChance = default(Percent);
            item.SeverableDebrisCount = default(Byte);
            item.ExplodableDebrisCount = default(Byte);
            item.SeverableDecalCount = default(Byte);
            item.ExplodableDecalCount = default(Byte);
            item.GeometrySegmentIndex = default(Byte);
            item.OnCrippleArtObject.Clear();
            item.OnCrippleDebris.Clear();
            item.OnCrippleExplosion.Clear();
            item.OnCrippleImpactData.Clear();
            item.OnCrippleDebrisScale = default(Single);
            item.OnCrippleDebrisCount = default(Byte);
            item.OnCrippleDecalCount = default(Byte);
            item.LimbReplacementModel = string.Empty;
            item.GoreTargetBone = string.Empty;
            item.TextureFilesHashes = default;
            item.HitReactionStart = default;
            item.HitReactionEnd = default;
            item.GoreEffectsDismemberBloodArt.Clear();
            item.GoreEffectsBloodImpactMaterialType.Clear();
            item.OnCrippleBloodImpactMaterialType.Clear();
            item.MeatCapTextureSet.Clear();
            item.CollarTextureSet.Clear();
            item.TwistVariablePrefix = default;
        }
        
        #region Mutagen
        public void RemapLinks(IBodyPart obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ExplodableDebris.Relink(mapping);
            obj.ExplodableExplosion.Relink(mapping);
            obj.SeverableDebris.Relink(mapping);
            obj.SeverableExplosion.Relink(mapping);
            obj.SeverableImpactData.Relink(mapping);
            obj.ExplodableImpactData.Relink(mapping);
            obj.ActorValue.Relink(mapping);
            obj.OnCrippleArtObject.Relink(mapping);
            obj.OnCrippleDebris.Relink(mapping);
            obj.OnCrippleExplosion.Relink(mapping);
            obj.OnCrippleImpactData.Relink(mapping);
            obj.GoreEffectsDismemberBloodArt.Relink(mapping);
            obj.GoreEffectsBloodImpactMaterialType.Relink(mapping);
            obj.OnCrippleBloodImpactMaterialType.Relink(mapping);
            obj.MeatCapTextureSet.Relink(mapping);
            obj.CollarTextureSet.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBodyPart item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: BodyPartBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class BodyPartCommon
    {
        public static readonly BodyPartCommon Instance = new BodyPartCommon();

        public BodyPart.Mask<bool> GetEqualsMask(
            IBodyPartGetter item,
            IBodyPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BodyPart.Mask<bool>(false);
            ((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBodyPartGetter item,
            IBodyPartGetter rhs,
            BodyPart.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.PartNode = string.Equals(item.PartNode, rhs.PartNode);
            ret.VatsTarget = string.Equals(item.VatsTarget, rhs.VatsTarget);
            ret.DamageMult = item.DamageMult.EqualsWithin(rhs.DamageMult);
            ret.ExplodableDebris = item.ExplodableDebris.Equals(rhs.ExplodableDebris);
            ret.ExplodableExplosion = item.ExplodableExplosion.Equals(rhs.ExplodableExplosion);
            ret.ExplodableDebrisScale = item.ExplodableDebrisScale.EqualsWithin(rhs.ExplodableDebrisScale);
            ret.SeverableDebris = item.SeverableDebris.Equals(rhs.SeverableDebris);
            ret.SeverableExplosion = item.SeverableExplosion.Equals(rhs.SeverableExplosion);
            ret.SeverableDebrisScale = item.SeverableDebrisScale.EqualsWithin(rhs.SeverableDebrisScale);
            ret.CutMin = item.CutMin.EqualsWithin(rhs.CutMin);
            ret.CutMax = item.CutMax.EqualsWithin(rhs.CutMax);
            ret.CutRadius = item.CutRadius.EqualsWithin(rhs.CutRadius);
            ret.GoreEffectsLocalRotateX = item.GoreEffectsLocalRotateX.EqualsWithin(rhs.GoreEffectsLocalRotateX);
            ret.GoreEffectsLocalRotateY = item.GoreEffectsLocalRotateY.EqualsWithin(rhs.GoreEffectsLocalRotateY);
            ret.CutTesselation = item.CutTesselation.EqualsWithin(rhs.CutTesselation);
            ret.SeverableImpactData = item.SeverableImpactData.Equals(rhs.SeverableImpactData);
            ret.ExplodableImpactData = item.ExplodableImpactData.Equals(rhs.ExplodableImpactData);
            ret.ExplodableLimbReplacementScale = item.ExplodableLimbReplacementScale.EqualsWithin(rhs.ExplodableLimbReplacementScale);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.HealthPercent = item.HealthPercent.Equals(rhs.HealthPercent);
            ret.ActorValue = item.ActorValue.Equals(rhs.ActorValue);
            ret.ToHitChance = item.ToHitChance.Equals(rhs.ToHitChance);
            ret.ExplosionChance = item.ExplosionChance.Equals(rhs.ExplosionChance);
            ret.NonLethalDismembermentChance = item.NonLethalDismembermentChance.Equals(rhs.NonLethalDismembermentChance);
            ret.SeverableDebrisCount = item.SeverableDebrisCount == rhs.SeverableDebrisCount;
            ret.ExplodableDebrisCount = item.ExplodableDebrisCount == rhs.ExplodableDebrisCount;
            ret.SeverableDecalCount = item.SeverableDecalCount == rhs.SeverableDecalCount;
            ret.ExplodableDecalCount = item.ExplodableDecalCount == rhs.ExplodableDecalCount;
            ret.GeometrySegmentIndex = item.GeometrySegmentIndex == rhs.GeometrySegmentIndex;
            ret.OnCrippleArtObject = item.OnCrippleArtObject.Equals(rhs.OnCrippleArtObject);
            ret.OnCrippleDebris = item.OnCrippleDebris.Equals(rhs.OnCrippleDebris);
            ret.OnCrippleExplosion = item.OnCrippleExplosion.Equals(rhs.OnCrippleExplosion);
            ret.OnCrippleImpactData = item.OnCrippleImpactData.Equals(rhs.OnCrippleImpactData);
            ret.OnCrippleDebrisScale = item.OnCrippleDebrisScale.EqualsWithin(rhs.OnCrippleDebrisScale);
            ret.OnCrippleDebrisCount = item.OnCrippleDebrisCount == rhs.OnCrippleDebrisCount;
            ret.OnCrippleDecalCount = item.OnCrippleDecalCount == rhs.OnCrippleDecalCount;
            ret.LimbReplacementModel = string.Equals(item.LimbReplacementModel, rhs.LimbReplacementModel);
            ret.GoreTargetBone = string.Equals(item.GoreTargetBone, rhs.GoreTargetBone);
            ret.TextureFilesHashes = MemorySliceExt.SequenceEqual(item.TextureFilesHashes, rhs.TextureFilesHashes);
            ret.HitReactionStart = string.Equals(item.HitReactionStart, rhs.HitReactionStart);
            ret.HitReactionEnd = string.Equals(item.HitReactionEnd, rhs.HitReactionEnd);
            ret.GoreEffectsDismemberBloodArt = item.GoreEffectsDismemberBloodArt.Equals(rhs.GoreEffectsDismemberBloodArt);
            ret.GoreEffectsBloodImpactMaterialType = item.GoreEffectsBloodImpactMaterialType.Equals(rhs.GoreEffectsBloodImpactMaterialType);
            ret.OnCrippleBloodImpactMaterialType = item.OnCrippleBloodImpactMaterialType.Equals(rhs.OnCrippleBloodImpactMaterialType);
            ret.MeatCapTextureSet = item.MeatCapTextureSet.Equals(rhs.MeatCapTextureSet);
            ret.CollarTextureSet = item.CollarTextureSet.Equals(rhs.CollarTextureSet);
            ret.TwistVariablePrefix = string.Equals(item.TwistVariablePrefix, rhs.TwistVariablePrefix);
        }
        
        public string Print(
            IBodyPartGetter item,
            string? name = null,
            BodyPart.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBodyPartGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BodyPart.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BodyPart =>");
            }
            else
            {
                sb.AppendLine($"{name} (BodyPart) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBodyPartGetter item,
            StructuredStringBuilder sb,
            BodyPart.Mask<bool>? printMask = null)
        {
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.PartNode ?? true)
            {
                sb.AppendItem(item.PartNode, "PartNode");
            }
            if (printMask?.VatsTarget ?? true)
            {
                sb.AppendItem(item.VatsTarget, "VatsTarget");
            }
            if (printMask?.DamageMult ?? true)
            {
                sb.AppendItem(item.DamageMult, "DamageMult");
            }
            if (printMask?.ExplodableDebris ?? true)
            {
                sb.AppendItem(item.ExplodableDebris.FormKey, "ExplodableDebris");
            }
            if (printMask?.ExplodableExplosion ?? true)
            {
                sb.AppendItem(item.ExplodableExplosion.FormKey, "ExplodableExplosion");
            }
            if (printMask?.ExplodableDebrisScale ?? true)
            {
                sb.AppendItem(item.ExplodableDebrisScale, "ExplodableDebrisScale");
            }
            if (printMask?.SeverableDebris ?? true)
            {
                sb.AppendItem(item.SeverableDebris.FormKey, "SeverableDebris");
            }
            if (printMask?.SeverableExplosion ?? true)
            {
                sb.AppendItem(item.SeverableExplosion.FormKey, "SeverableExplosion");
            }
            if (printMask?.SeverableDebrisScale ?? true)
            {
                sb.AppendItem(item.SeverableDebrisScale, "SeverableDebrisScale");
            }
            if (printMask?.CutMin ?? true)
            {
                sb.AppendItem(item.CutMin, "CutMin");
            }
            if (printMask?.CutMax ?? true)
            {
                sb.AppendItem(item.CutMax, "CutMax");
            }
            if (printMask?.CutRadius ?? true)
            {
                sb.AppendItem(item.CutRadius, "CutRadius");
            }
            if (printMask?.GoreEffectsLocalRotateX ?? true)
            {
                sb.AppendItem(item.GoreEffectsLocalRotateX, "GoreEffectsLocalRotateX");
            }
            if (printMask?.GoreEffectsLocalRotateY ?? true)
            {
                sb.AppendItem(item.GoreEffectsLocalRotateY, "GoreEffectsLocalRotateY");
            }
            if (printMask?.CutTesselation ?? true)
            {
                sb.AppendItem(item.CutTesselation, "CutTesselation");
            }
            if (printMask?.SeverableImpactData ?? true)
            {
                sb.AppendItem(item.SeverableImpactData.FormKey, "SeverableImpactData");
            }
            if (printMask?.ExplodableImpactData ?? true)
            {
                sb.AppendItem(item.ExplodableImpactData.FormKey, "ExplodableImpactData");
            }
            if (printMask?.ExplodableLimbReplacementScale ?? true)
            {
                sb.AppendItem(item.ExplodableLimbReplacementScale, "ExplodableLimbReplacementScale");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if (printMask?.HealthPercent ?? true)
            {
                sb.AppendItem(item.HealthPercent, "HealthPercent");
            }
            if (printMask?.ActorValue ?? true)
            {
                sb.AppendItem(item.ActorValue.FormKey, "ActorValue");
            }
            if (printMask?.ToHitChance ?? true)
            {
                sb.AppendItem(item.ToHitChance, "ToHitChance");
            }
            if (printMask?.ExplosionChance ?? true)
            {
                sb.AppendItem(item.ExplosionChance, "ExplosionChance");
            }
            if (printMask?.NonLethalDismembermentChance ?? true)
            {
                sb.AppendItem(item.NonLethalDismembermentChance, "NonLethalDismembermentChance");
            }
            if (printMask?.SeverableDebrisCount ?? true)
            {
                sb.AppendItem(item.SeverableDebrisCount, "SeverableDebrisCount");
            }
            if (printMask?.ExplodableDebrisCount ?? true)
            {
                sb.AppendItem(item.ExplodableDebrisCount, "ExplodableDebrisCount");
            }
            if (printMask?.SeverableDecalCount ?? true)
            {
                sb.AppendItem(item.SeverableDecalCount, "SeverableDecalCount");
            }
            if (printMask?.ExplodableDecalCount ?? true)
            {
                sb.AppendItem(item.ExplodableDecalCount, "ExplodableDecalCount");
            }
            if (printMask?.GeometrySegmentIndex ?? true)
            {
                sb.AppendItem(item.GeometrySegmentIndex, "GeometrySegmentIndex");
            }
            if (printMask?.OnCrippleArtObject ?? true)
            {
                sb.AppendItem(item.OnCrippleArtObject.FormKey, "OnCrippleArtObject");
            }
            if (printMask?.OnCrippleDebris ?? true)
            {
                sb.AppendItem(item.OnCrippleDebris.FormKey, "OnCrippleDebris");
            }
            if (printMask?.OnCrippleExplosion ?? true)
            {
                sb.AppendItem(item.OnCrippleExplosion.FormKey, "OnCrippleExplosion");
            }
            if (printMask?.OnCrippleImpactData ?? true)
            {
                sb.AppendItem(item.OnCrippleImpactData.FormKey, "OnCrippleImpactData");
            }
            if (printMask?.OnCrippleDebrisScale ?? true)
            {
                sb.AppendItem(item.OnCrippleDebrisScale, "OnCrippleDebrisScale");
            }
            if (printMask?.OnCrippleDebrisCount ?? true)
            {
                sb.AppendItem(item.OnCrippleDebrisCount, "OnCrippleDebrisCount");
            }
            if (printMask?.OnCrippleDecalCount ?? true)
            {
                sb.AppendItem(item.OnCrippleDecalCount, "OnCrippleDecalCount");
            }
            if (printMask?.LimbReplacementModel ?? true)
            {
                sb.AppendItem(item.LimbReplacementModel, "LimbReplacementModel");
            }
            if (printMask?.GoreTargetBone ?? true)
            {
                sb.AppendItem(item.GoreTargetBone, "GoreTargetBone");
            }
            if ((printMask?.TextureFilesHashes ?? true)
                && item.TextureFilesHashes is {} TextureFilesHashesItem)
            {
                sb.AppendLine($"TextureFilesHashes => {SpanExt.ToHexString(TextureFilesHashesItem)}");
            }
            if ((printMask?.HitReactionStart ?? true)
                && item.HitReactionStart is {} HitReactionStartItem)
            {
                sb.AppendItem(HitReactionStartItem, "HitReactionStart");
            }
            if ((printMask?.HitReactionEnd ?? true)
                && item.HitReactionEnd is {} HitReactionEndItem)
            {
                sb.AppendItem(HitReactionEndItem, "HitReactionEnd");
            }
            if (printMask?.GoreEffectsDismemberBloodArt ?? true)
            {
                sb.AppendItem(item.GoreEffectsDismemberBloodArt.FormKeyNullable, "GoreEffectsDismemberBloodArt");
            }
            if (printMask?.GoreEffectsBloodImpactMaterialType ?? true)
            {
                sb.AppendItem(item.GoreEffectsBloodImpactMaterialType.FormKeyNullable, "GoreEffectsBloodImpactMaterialType");
            }
            if (printMask?.OnCrippleBloodImpactMaterialType ?? true)
            {
                sb.AppendItem(item.OnCrippleBloodImpactMaterialType.FormKeyNullable, "OnCrippleBloodImpactMaterialType");
            }
            if (printMask?.MeatCapTextureSet ?? true)
            {
                sb.AppendItem(item.MeatCapTextureSet.FormKeyNullable, "MeatCapTextureSet");
            }
            if (printMask?.CollarTextureSet ?? true)
            {
                sb.AppendItem(item.CollarTextureSet.FormKeyNullable, "CollarTextureSet");
            }
            if ((printMask?.TwistVariablePrefix ?? true)
                && item.TwistVariablePrefix is {} TwistVariablePrefixItem)
            {
                sb.AppendItem(TwistVariablePrefixItem, "TwistVariablePrefix");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBodyPartGetter? lhs,
            IBodyPartGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.PartNode) ?? true))
            {
                if (!string.Equals(lhs.PartNode, rhs.PartNode)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.VatsTarget) ?? true))
            {
                if (!string.Equals(lhs.VatsTarget, rhs.VatsTarget)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.DamageMult) ?? true))
            {
                if (!lhs.DamageMult.EqualsWithin(rhs.DamageMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDebris) ?? true))
            {
                if (!lhs.ExplodableDebris.Equals(rhs.ExplodableDebris)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableExplosion) ?? true))
            {
                if (!lhs.ExplodableExplosion.Equals(rhs.ExplodableExplosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDebrisScale) ?? true))
            {
                if (!lhs.ExplodableDebrisScale.EqualsWithin(rhs.ExplodableDebrisScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDebris) ?? true))
            {
                if (!lhs.SeverableDebris.Equals(rhs.SeverableDebris)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableExplosion) ?? true))
            {
                if (!lhs.SeverableExplosion.Equals(rhs.SeverableExplosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDebrisScale) ?? true))
            {
                if (!lhs.SeverableDebrisScale.EqualsWithin(rhs.SeverableDebrisScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.CutMin) ?? true))
            {
                if (!lhs.CutMin.EqualsWithin(rhs.CutMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.CutMax) ?? true))
            {
                if (!lhs.CutMax.EqualsWithin(rhs.CutMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.CutRadius) ?? true))
            {
                if (!lhs.CutRadius.EqualsWithin(rhs.CutRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreEffectsLocalRotateX) ?? true))
            {
                if (!lhs.GoreEffectsLocalRotateX.EqualsWithin(rhs.GoreEffectsLocalRotateX)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreEffectsLocalRotateY) ?? true))
            {
                if (!lhs.GoreEffectsLocalRotateY.EqualsWithin(rhs.GoreEffectsLocalRotateY)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.CutTesselation) ?? true))
            {
                if (!lhs.CutTesselation.EqualsWithin(rhs.CutTesselation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableImpactData) ?? true))
            {
                if (!lhs.SeverableImpactData.Equals(rhs.SeverableImpactData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableImpactData) ?? true))
            {
                if (!lhs.ExplodableImpactData.Equals(rhs.ExplodableImpactData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableLimbReplacementScale) ?? true))
            {
                if (!lhs.ExplodableLimbReplacementScale.EqualsWithin(rhs.ExplodableLimbReplacementScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.HealthPercent) ?? true))
            {
                if (!lhs.HealthPercent.Equals(rhs.HealthPercent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ActorValue) ?? true))
            {
                if (!lhs.ActorValue.Equals(rhs.ActorValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ToHitChance) ?? true))
            {
                if (!lhs.ToHitChance.Equals(rhs.ToHitChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplosionChance) ?? true))
            {
                if (!lhs.ExplosionChance.Equals(rhs.ExplosionChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.NonLethalDismembermentChance) ?? true))
            {
                if (!lhs.NonLethalDismembermentChance.Equals(rhs.NonLethalDismembermentChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDebrisCount) ?? true))
            {
                if (lhs.SeverableDebrisCount != rhs.SeverableDebrisCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDebrisCount) ?? true))
            {
                if (lhs.ExplodableDebrisCount != rhs.ExplodableDebrisCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDecalCount) ?? true))
            {
                if (lhs.SeverableDecalCount != rhs.SeverableDecalCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDecalCount) ?? true))
            {
                if (lhs.ExplodableDecalCount != rhs.ExplodableDecalCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GeometrySegmentIndex) ?? true))
            {
                if (lhs.GeometrySegmentIndex != rhs.GeometrySegmentIndex) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleArtObject) ?? true))
            {
                if (!lhs.OnCrippleArtObject.Equals(rhs.OnCrippleArtObject)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleDebris) ?? true))
            {
                if (!lhs.OnCrippleDebris.Equals(rhs.OnCrippleDebris)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleExplosion) ?? true))
            {
                if (!lhs.OnCrippleExplosion.Equals(rhs.OnCrippleExplosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleImpactData) ?? true))
            {
                if (!lhs.OnCrippleImpactData.Equals(rhs.OnCrippleImpactData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleDebrisScale) ?? true))
            {
                if (!lhs.OnCrippleDebrisScale.EqualsWithin(rhs.OnCrippleDebrisScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleDebrisCount) ?? true))
            {
                if (lhs.OnCrippleDebrisCount != rhs.OnCrippleDebrisCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleDecalCount) ?? true))
            {
                if (lhs.OnCrippleDecalCount != rhs.OnCrippleDecalCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.LimbReplacementModel) ?? true))
            {
                if (!string.Equals(lhs.LimbReplacementModel, rhs.LimbReplacementModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreTargetBone) ?? true))
            {
                if (!string.Equals(lhs.GoreTargetBone, rhs.GoreTargetBone)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.TextureFilesHashes) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TextureFilesHashes, rhs.TextureFilesHashes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.HitReactionStart) ?? true))
            {
                if (!string.Equals(lhs.HitReactionStart, rhs.HitReactionStart)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.HitReactionEnd) ?? true))
            {
                if (!string.Equals(lhs.HitReactionEnd, rhs.HitReactionEnd)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreEffectsDismemberBloodArt) ?? true))
            {
                if (!lhs.GoreEffectsDismemberBloodArt.Equals(rhs.GoreEffectsDismemberBloodArt)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreEffectsBloodImpactMaterialType) ?? true))
            {
                if (!lhs.GoreEffectsBloodImpactMaterialType.Equals(rhs.GoreEffectsBloodImpactMaterialType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleBloodImpactMaterialType) ?? true))
            {
                if (!lhs.OnCrippleBloodImpactMaterialType.Equals(rhs.OnCrippleBloodImpactMaterialType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.MeatCapTextureSet) ?? true))
            {
                if (!lhs.MeatCapTextureSet.Equals(rhs.MeatCapTextureSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.CollarTextureSet) ?? true))
            {
                if (!lhs.CollarTextureSet.Equals(rhs.CollarTextureSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.TwistVariablePrefix) ?? true))
            {
                if (!string.Equals(lhs.TwistVariablePrefix, rhs.TwistVariablePrefix)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBodyPartGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.PartNode);
            hash.Add(item.VatsTarget);
            hash.Add(item.DamageMult);
            hash.Add(item.ExplodableDebris);
            hash.Add(item.ExplodableExplosion);
            hash.Add(item.ExplodableDebrisScale);
            hash.Add(item.SeverableDebris);
            hash.Add(item.SeverableExplosion);
            hash.Add(item.SeverableDebrisScale);
            hash.Add(item.CutMin);
            hash.Add(item.CutMax);
            hash.Add(item.CutRadius);
            hash.Add(item.GoreEffectsLocalRotateX);
            hash.Add(item.GoreEffectsLocalRotateY);
            hash.Add(item.CutTesselation);
            hash.Add(item.SeverableImpactData);
            hash.Add(item.ExplodableImpactData);
            hash.Add(item.ExplodableLimbReplacementScale);
            hash.Add(item.Flags);
            hash.Add(item.Type);
            hash.Add(item.HealthPercent);
            hash.Add(item.ActorValue);
            hash.Add(item.ToHitChance);
            hash.Add(item.ExplosionChance);
            hash.Add(item.NonLethalDismembermentChance);
            hash.Add(item.SeverableDebrisCount);
            hash.Add(item.ExplodableDebrisCount);
            hash.Add(item.SeverableDecalCount);
            hash.Add(item.ExplodableDecalCount);
            hash.Add(item.GeometrySegmentIndex);
            hash.Add(item.OnCrippleArtObject);
            hash.Add(item.OnCrippleDebris);
            hash.Add(item.OnCrippleExplosion);
            hash.Add(item.OnCrippleImpactData);
            hash.Add(item.OnCrippleDebrisScale);
            hash.Add(item.OnCrippleDebrisCount);
            hash.Add(item.OnCrippleDecalCount);
            hash.Add(item.LimbReplacementModel);
            hash.Add(item.GoreTargetBone);
            if (item.TextureFilesHashes is {} TextureFilesHashesItem)
            {
                hash.Add(TextureFilesHashesItem);
            }
            if (item.HitReactionStart is {} HitReactionStartitem)
            {
                hash.Add(HitReactionStartitem);
            }
            if (item.HitReactionEnd is {} HitReactionEnditem)
            {
                hash.Add(HitReactionEnditem);
            }
            hash.Add(item.GoreEffectsDismemberBloodArt);
            hash.Add(item.GoreEffectsBloodImpactMaterialType);
            hash.Add(item.OnCrippleBloodImpactMaterialType);
            hash.Add(item.MeatCapTextureSet);
            hash.Add(item.CollarTextureSet);
            if (item.TwistVariablePrefix is {} TwistVariablePrefixitem)
            {
                hash.Add(TwistVariablePrefixitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BodyPart.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBodyPartGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.ExplodableDebris);
            yield return FormLinkInformation.Factory(obj.ExplodableExplosion);
            yield return FormLinkInformation.Factory(obj.SeverableDebris);
            yield return FormLinkInformation.Factory(obj.SeverableExplosion);
            yield return FormLinkInformation.Factory(obj.SeverableImpactData);
            yield return FormLinkInformation.Factory(obj.ExplodableImpactData);
            yield return FormLinkInformation.Factory(obj.ActorValue);
            yield return FormLinkInformation.Factory(obj.OnCrippleArtObject);
            yield return FormLinkInformation.Factory(obj.OnCrippleDebris);
            yield return FormLinkInformation.Factory(obj.OnCrippleExplosion);
            yield return FormLinkInformation.Factory(obj.OnCrippleImpactData);
            if (FormLinkInformation.TryFactory(obj.GoreEffectsDismemberBloodArt, out var GoreEffectsDismemberBloodArtInfo))
            {
                yield return GoreEffectsDismemberBloodArtInfo;
            }
            if (FormLinkInformation.TryFactory(obj.GoreEffectsBloodImpactMaterialType, out var GoreEffectsBloodImpactMaterialTypeInfo))
            {
                yield return GoreEffectsBloodImpactMaterialTypeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.OnCrippleBloodImpactMaterialType, out var OnCrippleBloodImpactMaterialTypeInfo))
            {
                yield return OnCrippleBloodImpactMaterialTypeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MeatCapTextureSet, out var MeatCapTextureSetInfo))
            {
                yield return MeatCapTextureSetInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CollarTextureSet, out var CollarTextureSetInfo))
            {
                yield return CollarTextureSetInfo;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BodyPartSetterTranslationCommon
    {
        public static readonly BodyPartSetterTranslationCommon Instance = new BodyPartSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBodyPart item,
            IBodyPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.PartNode) ?? true))
            {
                item.PartNode = rhs.PartNode;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.VatsTarget) ?? true))
            {
                item.VatsTarget = rhs.VatsTarget;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.DamageMult) ?? true))
            {
                item.DamageMult = rhs.DamageMult;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDebris) ?? true))
            {
                item.ExplodableDebris.SetTo(rhs.ExplodableDebris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableExplosion) ?? true))
            {
                item.ExplodableExplosion.SetTo(rhs.ExplodableExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDebrisScale) ?? true))
            {
                item.ExplodableDebrisScale = rhs.ExplodableDebrisScale;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDebris) ?? true))
            {
                item.SeverableDebris.SetTo(rhs.SeverableDebris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableExplosion) ?? true))
            {
                item.SeverableExplosion.SetTo(rhs.SeverableExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDebrisScale) ?? true))
            {
                item.SeverableDebrisScale = rhs.SeverableDebrisScale;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.CutMin) ?? true))
            {
                item.CutMin = rhs.CutMin;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.CutMax) ?? true))
            {
                item.CutMax = rhs.CutMax;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.CutRadius) ?? true))
            {
                item.CutRadius = rhs.CutRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreEffectsLocalRotateX) ?? true))
            {
                item.GoreEffectsLocalRotateX = rhs.GoreEffectsLocalRotateX;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreEffectsLocalRotateY) ?? true))
            {
                item.GoreEffectsLocalRotateY = rhs.GoreEffectsLocalRotateY;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.CutTesselation) ?? true))
            {
                item.CutTesselation = rhs.CutTesselation;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableImpactData) ?? true))
            {
                item.SeverableImpactData.SetTo(rhs.SeverableImpactData.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableImpactData) ?? true))
            {
                item.ExplodableImpactData.SetTo(rhs.ExplodableImpactData.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableLimbReplacementScale) ?? true))
            {
                item.ExplodableLimbReplacementScale = rhs.ExplodableLimbReplacementScale;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.HealthPercent) ?? true))
            {
                item.HealthPercent = rhs.HealthPercent;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ActorValue) ?? true))
            {
                item.ActorValue.SetTo(rhs.ActorValue.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ToHitChance) ?? true))
            {
                item.ToHitChance = rhs.ToHitChance;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplosionChance) ?? true))
            {
                item.ExplosionChance = rhs.ExplosionChance;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.NonLethalDismembermentChance) ?? true))
            {
                item.NonLethalDismembermentChance = rhs.NonLethalDismembermentChance;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDebrisCount) ?? true))
            {
                item.SeverableDebrisCount = rhs.SeverableDebrisCount;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDebrisCount) ?? true))
            {
                item.ExplodableDebrisCount = rhs.ExplodableDebrisCount;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDecalCount) ?? true))
            {
                item.SeverableDecalCount = rhs.SeverableDecalCount;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDecalCount) ?? true))
            {
                item.ExplodableDecalCount = rhs.ExplodableDecalCount;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GeometrySegmentIndex) ?? true))
            {
                item.GeometrySegmentIndex = rhs.GeometrySegmentIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleArtObject) ?? true))
            {
                item.OnCrippleArtObject.SetTo(rhs.OnCrippleArtObject.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleDebris) ?? true))
            {
                item.OnCrippleDebris.SetTo(rhs.OnCrippleDebris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleExplosion) ?? true))
            {
                item.OnCrippleExplosion.SetTo(rhs.OnCrippleExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleImpactData) ?? true))
            {
                item.OnCrippleImpactData.SetTo(rhs.OnCrippleImpactData.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleDebrisScale) ?? true))
            {
                item.OnCrippleDebrisScale = rhs.OnCrippleDebrisScale;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleDebrisCount) ?? true))
            {
                item.OnCrippleDebrisCount = rhs.OnCrippleDebrisCount;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleDecalCount) ?? true))
            {
                item.OnCrippleDecalCount = rhs.OnCrippleDecalCount;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.LimbReplacementModel) ?? true))
            {
                item.LimbReplacementModel = rhs.LimbReplacementModel;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreTargetBone) ?? true))
            {
                item.GoreTargetBone = rhs.GoreTargetBone;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.TextureFilesHashes) ?? true))
            {
                if(rhs.TextureFilesHashes is {} TextureFilesHashesrhs)
                {
                    item.TextureFilesHashes = TextureFilesHashesrhs.ToArray();
                }
                else
                {
                    item.TextureFilesHashes = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.HitReactionStart) ?? true))
            {
                item.HitReactionStart = rhs.HitReactionStart;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.HitReactionEnd) ?? true))
            {
                item.HitReactionEnd = rhs.HitReactionEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreEffectsDismemberBloodArt) ?? true))
            {
                item.GoreEffectsDismemberBloodArt.SetTo(rhs.GoreEffectsDismemberBloodArt.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreEffectsBloodImpactMaterialType) ?? true))
            {
                item.GoreEffectsBloodImpactMaterialType.SetTo(rhs.GoreEffectsBloodImpactMaterialType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.OnCrippleBloodImpactMaterialType) ?? true))
            {
                item.OnCrippleBloodImpactMaterialType.SetTo(rhs.OnCrippleBloodImpactMaterialType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.MeatCapTextureSet) ?? true))
            {
                item.MeatCapTextureSet.SetTo(rhs.MeatCapTextureSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.CollarTextureSet) ?? true))
            {
                item.CollarTextureSet.SetTo(rhs.CollarTextureSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.TwistVariablePrefix) ?? true))
            {
                item.TwistVariablePrefix = rhs.TwistVariablePrefix;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBodyPart item,
            IBodyPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public BodyPart DeepCopy(
            IBodyPartGetter item,
            BodyPart.TranslationMask? copyMask = null)
        {
            BodyPart ret = (BodyPart)((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).GetNew();
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BodyPart DeepCopy(
            IBodyPartGetter item,
            out BodyPart.ErrorMask errorMask,
            BodyPart.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BodyPart ret = (BodyPart)((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).GetNew();
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BodyPart.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BodyPart DeepCopy(
            IBodyPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BodyPart ret = (BodyPart)((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).GetNew();
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class BodyPart
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyPart_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BodyPart_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BodyPartCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BodyPartSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BodyPartSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBodyPartGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBodyPartGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBodyPartGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class BodyPartBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly BodyPartBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IBodyPartGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.BPTN),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.PartNode,
                header: translationParams.ConvertToCustom(RecordTypes.BPNN),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VatsTarget,
                header: translationParams.ConvertToCustom(RecordTypes.BPNT),
                binaryType: StringBinaryType.NullTerminate);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.BPND)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DamageMult);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableDebris);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableExplosion);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ExplodableDebrisScale);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SeverableDebris);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SeverableExplosion);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SeverableDebrisScale);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CutMin);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CutMax);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CutRadius);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.GoreEffectsLocalRotateX,
                    divisor: 57.295799255371094f,
                    multiplier: null);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.GoreEffectsLocalRotateY,
                    divisor: 57.295799255371094f,
                    multiplier: null);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CutTesselation);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SeverableImpactData);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableImpactData);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ExplodableLimbReplacementScale);
                EnumBinaryTranslation<BodyPart.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                EnumBinaryTranslation<BodyPart.PartType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Type,
                    length: 1);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.HealthPercent,
                    integerType: FloatIntegerType.Byte);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ActorValue);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.ToHitChance,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.ExplosionChance,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.NonLethalDismembermentChance,
                    integerType: FloatIntegerType.Byte);
                writer.Write(item.SeverableDebrisCount);
                writer.Write(item.ExplodableDebrisCount);
                writer.Write(item.SeverableDecalCount);
                writer.Write(item.ExplodableDecalCount);
                writer.Write(item.GeometrySegmentIndex);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OnCrippleArtObject);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OnCrippleDebris);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OnCrippleExplosion);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OnCrippleImpactData);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.OnCrippleDebrisScale);
                writer.Write(item.OnCrippleDebrisCount);
                writer.Write(item.OnCrippleDecalCount);
            }
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LimbReplacementModel,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GoreTargetBone,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4),
                binaryType: StringBinaryType.NullTerminate);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextureFilesHashes,
                header: translationParams.ConvertToCustom(RecordTypes.NAM5));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HitReactionStart,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HitReactionEnd,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GoreEffectsDismemberBloodArt,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GoreEffectsBloodImpactMaterialType,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OnCrippleBloodImpactMaterialType,
                header: translationParams.ConvertToCustom(RecordTypes.JNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MeatCapTextureSet,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CollarTextureSet,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TwistVariablePrefix,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IBodyPartGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBodyPartGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BodyPartBinaryCreateTranslation
    {
        public static readonly BodyPartBinaryCreateTranslation Instance = new BodyPartBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IBodyPart item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BPTN:
                {
                    if (lastParsed.ShortCircuit((int)BodyPart_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.Name;
                }
                case RecordTypeInts.BPNN:
                {
                    if (lastParsed.ShortCircuit((int)BodyPart_FieldIndex.PartNode, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PartNode = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.PartNode;
                }
                case RecordTypeInts.BPNT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VatsTarget = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.VatsTarget;
                }
                case RecordTypeInts.BPND:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.DamageMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableDebris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableDebrisScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableDebris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableDebrisScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CutMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CutMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CutRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.GoreEffectsLocalRotateX = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        multiplier: 57.295799255371094f,
                        divisor: null);
                    if (dataFrame.Remaining < 4) return null;
                    item.GoreEffectsLocalRotateY = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        multiplier: 57.295799255371094f,
                        divisor: null);
                    if (dataFrame.Remaining < 4) return null;
                    item.CutTesselation = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableImpactData.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableImpactData.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableLimbReplacementScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.Flags = EnumBinaryTranslation<BodyPart.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.Type = EnumBinaryTranslation<BodyPart.PartType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.HealthPercent = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 4) return null;
                    item.ActorValue.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 1) return null;
                    item.ToHitChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.ExplosionChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.NonLethalDismembermentChance = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.SeverableDebrisCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.ExplodableDebrisCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.SeverableDecalCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.ExplodableDecalCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.GeometrySegmentIndex = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 4) return null;
                    item.OnCrippleArtObject.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.OnCrippleDebris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.OnCrippleExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.OnCrippleImpactData.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.OnCrippleDebrisScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.OnCrippleDebrisCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.OnCrippleDecalCount = dataFrame.ReadUInt8();
                    return (int)BodyPart_FieldIndex.OnCrippleDecalCount;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LimbReplacementModel = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.LimbReplacementModel;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GoreTargetBone = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.GoreTargetBone;
                }
                case RecordTypeInts.NAM5:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureFilesHashes = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)BodyPart_FieldIndex.TextureFilesHashes;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HitReactionStart = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.HitReactionStart;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HitReactionEnd = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.HitReactionEnd;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GoreEffectsDismemberBloodArt.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)BodyPart_FieldIndex.GoreEffectsDismemberBloodArt;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GoreEffectsBloodImpactMaterialType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)BodyPart_FieldIndex.GoreEffectsBloodImpactMaterialType;
                }
                case RecordTypeInts.JNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OnCrippleBloodImpactMaterialType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)BodyPart_FieldIndex.OnCrippleBloodImpactMaterialType;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MeatCapTextureSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)BodyPart_FieldIndex.MeatCapTextureSet;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CollarTextureSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)BodyPart_FieldIndex.CollarTextureSet;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TwistVariablePrefix = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.TwistVariablePrefix;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class BodyPartBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBodyPartGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BodyPartBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class BodyPartBinaryOverlay :
        PluginBinaryOverlay,
        IBodyPartGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyPart_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BodyPart_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BodyPartCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BodyPartSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBodyPartGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBodyPartGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBodyPartGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BodyPartCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BodyPartBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BodyPartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region PartNode
        private int? _PartNodeLocation;
        public String PartNode => _PartNodeLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _PartNodeLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region VatsTarget
        private int? _VatsTargetLocation;
        public String VatsTarget => _VatsTargetLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _VatsTargetLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        private RangeInt32? _BPNDLocation;
        #region DamageMult
        private int _DamageMultLocation => _BPNDLocation!.Value.Min;
        private bool _DamageMult_IsSet => _BPNDLocation.HasValue;
        public Single DamageMult => _DamageMult_IsSet ? _recordData.Slice(_DamageMultLocation, 4).Float() : default(Single);
        #endregion
        #region ExplodableDebris
        private int _ExplodableDebrisLocation => _BPNDLocation!.Value.Min + 0x4;
        private bool _ExplodableDebris_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IDebrisGetter> ExplodableDebris => _ExplodableDebris_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IDebrisGetter>(_package, _recordData.Span.Slice(_ExplodableDebrisLocation, 0x4), isSet: _ExplodableDebris_IsSet) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region ExplodableExplosion
        private int _ExplodableExplosionLocation => _BPNDLocation!.Value.Min + 0x8;
        private bool _ExplodableExplosion_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> ExplodableExplosion => _ExplodableExplosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_ExplodableExplosionLocation, 0x4), isSet: _ExplodableExplosion_IsSet) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region ExplodableDebrisScale
        private int _ExplodableDebrisScaleLocation => _BPNDLocation!.Value.Min + 0xC;
        private bool _ExplodableDebrisScale_IsSet => _BPNDLocation.HasValue;
        public Single ExplodableDebrisScale => _ExplodableDebrisScale_IsSet ? _recordData.Slice(_ExplodableDebrisScaleLocation, 4).Float() : default(Single);
        #endregion
        #region SeverableDebris
        private int _SeverableDebrisLocation => _BPNDLocation!.Value.Min + 0x10;
        private bool _SeverableDebris_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IDebrisGetter> SeverableDebris => _SeverableDebris_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IDebrisGetter>(_package, _recordData.Span.Slice(_SeverableDebrisLocation, 0x4), isSet: _SeverableDebris_IsSet) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region SeverableExplosion
        private int _SeverableExplosionLocation => _BPNDLocation!.Value.Min + 0x14;
        private bool _SeverableExplosion_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> SeverableExplosion => _SeverableExplosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_SeverableExplosionLocation, 0x4), isSet: _SeverableExplosion_IsSet) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region SeverableDebrisScale
        private int _SeverableDebrisScaleLocation => _BPNDLocation!.Value.Min + 0x18;
        private bool _SeverableDebrisScale_IsSet => _BPNDLocation.HasValue;
        public Single SeverableDebrisScale => _SeverableDebrisScale_IsSet ? _recordData.Slice(_SeverableDebrisScaleLocation, 4).Float() : default(Single);
        #endregion
        #region CutMin
        private int _CutMinLocation => _BPNDLocation!.Value.Min + 0x1C;
        private bool _CutMin_IsSet => _BPNDLocation.HasValue;
        public Single CutMin => _CutMin_IsSet ? _recordData.Slice(_CutMinLocation, 4).Float() : default(Single);
        #endregion
        #region CutMax
        private int _CutMaxLocation => _BPNDLocation!.Value.Min + 0x20;
        private bool _CutMax_IsSet => _BPNDLocation.HasValue;
        public Single CutMax => _CutMax_IsSet ? _recordData.Slice(_CutMaxLocation, 4).Float() : default(Single);
        #endregion
        #region CutRadius
        private int _CutRadiusLocation => _BPNDLocation!.Value.Min + 0x24;
        private bool _CutRadius_IsSet => _BPNDLocation.HasValue;
        public Single CutRadius => _CutRadius_IsSet ? _recordData.Slice(_CutRadiusLocation, 4).Float() : default(Single);
        #endregion
        #region GoreEffectsLocalRotateX
        private int _GoreEffectsLocalRotateXLocation => _BPNDLocation!.Value.Min + 0x28;
        private bool _GoreEffectsLocalRotateX_IsSet => _BPNDLocation.HasValue;
        public Single GoreEffectsLocalRotateX => _GoreEffectsLocalRotateX_IsSet ? _recordData.Slice(_GoreEffectsLocalRotateXLocation, 4).Float() * 57.2958f : default(Single);
        #endregion
        #region GoreEffectsLocalRotateY
        private int _GoreEffectsLocalRotateYLocation => _BPNDLocation!.Value.Min + 0x2C;
        private bool _GoreEffectsLocalRotateY_IsSet => _BPNDLocation.HasValue;
        public Single GoreEffectsLocalRotateY => _GoreEffectsLocalRotateY_IsSet ? _recordData.Slice(_GoreEffectsLocalRotateYLocation, 4).Float() * 57.2958f : default(Single);
        #endregion
        #region CutTesselation
        private int _CutTesselationLocation => _BPNDLocation!.Value.Min + 0x30;
        private bool _CutTesselation_IsSet => _BPNDLocation.HasValue;
        public Single CutTesselation => _CutTesselation_IsSet ? _recordData.Slice(_CutTesselationLocation, 4).Float() : default(Single);
        #endregion
        #region SeverableImpactData
        private int _SeverableImpactDataLocation => _BPNDLocation!.Value.Min + 0x34;
        private bool _SeverableImpactData_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> SeverableImpactData => _SeverableImpactData_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_SeverableImpactDataLocation, 0x4), isSet: _SeverableImpactData_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region ExplodableImpactData
        private int _ExplodableImpactDataLocation => _BPNDLocation!.Value.Min + 0x38;
        private bool _ExplodableImpactData_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> ExplodableImpactData => _ExplodableImpactData_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_ExplodableImpactDataLocation, 0x4), isSet: _ExplodableImpactData_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region ExplodableLimbReplacementScale
        private int _ExplodableLimbReplacementScaleLocation => _BPNDLocation!.Value.Min + 0x3C;
        private bool _ExplodableLimbReplacementScale_IsSet => _BPNDLocation.HasValue;
        public Single ExplodableLimbReplacementScale => _ExplodableLimbReplacementScale_IsSet ? _recordData.Slice(_ExplodableLimbReplacementScaleLocation, 4).Float() : default(Single);
        #endregion
        #region Flags
        private int _FlagsLocation => _BPNDLocation!.Value.Min + 0x40;
        private bool _Flags_IsSet => _BPNDLocation.HasValue;
        public BodyPart.Flag Flags => _Flags_IsSet ? (BodyPart.Flag)_recordData.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region Type
        private int _TypeLocation => _BPNDLocation!.Value.Min + 0x41;
        private bool _Type_IsSet => _BPNDLocation.HasValue;
        public BodyPart.PartType Type => _Type_IsSet ? (BodyPart.PartType)_recordData.Span.Slice(_TypeLocation, 0x1)[0] : default;
        #endregion
        #region HealthPercent
        private int _HealthPercentLocation => _BPNDLocation!.Value.Min + 0x42;
        private bool _HealthPercent_IsSet => _BPNDLocation.HasValue;
        public Percent HealthPercent => _HealthPercent_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_HealthPercentLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region ActorValue
        private int _ActorValueLocation => _BPNDLocation!.Value.Min + 0x43;
        private bool _ActorValue_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IActorValueInformationGetter> ActorValue => _ActorValue_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IActorValueInformationGetter>(_package, _recordData.Span.Slice(_ActorValueLocation, 0x4), isSet: _ActorValue_IsSet) : FormLink<IActorValueInformationGetter>.Null;
        #endregion
        #region ToHitChance
        private int _ToHitChanceLocation => _BPNDLocation!.Value.Min + 0x47;
        private bool _ToHitChance_IsSet => _BPNDLocation.HasValue;
        public Percent ToHitChance => _ToHitChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_ToHitChanceLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region ExplosionChance
        private int _ExplosionChanceLocation => _BPNDLocation!.Value.Min + 0x48;
        private bool _ExplosionChance_IsSet => _BPNDLocation.HasValue;
        public Percent ExplosionChance => _ExplosionChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_ExplosionChanceLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region NonLethalDismembermentChance
        private int _NonLethalDismembermentChanceLocation => _BPNDLocation!.Value.Min + 0x49;
        private bool _NonLethalDismembermentChance_IsSet => _BPNDLocation.HasValue;
        public Percent NonLethalDismembermentChance => _NonLethalDismembermentChance_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_NonLethalDismembermentChanceLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region SeverableDebrisCount
        private int _SeverableDebrisCountLocation => _BPNDLocation!.Value.Min + 0x4A;
        private bool _SeverableDebrisCount_IsSet => _BPNDLocation.HasValue;
        public Byte SeverableDebrisCount => _SeverableDebrisCount_IsSet ? _recordData.Span[_SeverableDebrisCountLocation] : default;
        #endregion
        #region ExplodableDebrisCount
        private int _ExplodableDebrisCountLocation => _BPNDLocation!.Value.Min + 0x4B;
        private bool _ExplodableDebrisCount_IsSet => _BPNDLocation.HasValue;
        public Byte ExplodableDebrisCount => _ExplodableDebrisCount_IsSet ? _recordData.Span[_ExplodableDebrisCountLocation] : default;
        #endregion
        #region SeverableDecalCount
        private int _SeverableDecalCountLocation => _BPNDLocation!.Value.Min + 0x4C;
        private bool _SeverableDecalCount_IsSet => _BPNDLocation.HasValue;
        public Byte SeverableDecalCount => _SeverableDecalCount_IsSet ? _recordData.Span[_SeverableDecalCountLocation] : default;
        #endregion
        #region ExplodableDecalCount
        private int _ExplodableDecalCountLocation => _BPNDLocation!.Value.Min + 0x4D;
        private bool _ExplodableDecalCount_IsSet => _BPNDLocation.HasValue;
        public Byte ExplodableDecalCount => _ExplodableDecalCount_IsSet ? _recordData.Span[_ExplodableDecalCountLocation] : default;
        #endregion
        #region GeometrySegmentIndex
        private int _GeometrySegmentIndexLocation => _BPNDLocation!.Value.Min + 0x4E;
        private bool _GeometrySegmentIndex_IsSet => _BPNDLocation.HasValue;
        public Byte GeometrySegmentIndex => _GeometrySegmentIndex_IsSet ? _recordData.Span[_GeometrySegmentIndexLocation] : default;
        #endregion
        #region OnCrippleArtObject
        private int _OnCrippleArtObjectLocation => _BPNDLocation!.Value.Min + 0x4F;
        private bool _OnCrippleArtObject_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IArtObjectGetter> OnCrippleArtObject => _OnCrippleArtObject_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IArtObjectGetter>(_package, _recordData.Span.Slice(_OnCrippleArtObjectLocation, 0x4), isSet: _OnCrippleArtObject_IsSet) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region OnCrippleDebris
        private int _OnCrippleDebrisLocation => _BPNDLocation!.Value.Min + 0x53;
        private bool _OnCrippleDebris_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IDebrisGetter> OnCrippleDebris => _OnCrippleDebris_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IDebrisGetter>(_package, _recordData.Span.Slice(_OnCrippleDebrisLocation, 0x4), isSet: _OnCrippleDebris_IsSet) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region OnCrippleExplosion
        private int _OnCrippleExplosionLocation => _BPNDLocation!.Value.Min + 0x57;
        private bool _OnCrippleExplosion_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> OnCrippleExplosion => _OnCrippleExplosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_OnCrippleExplosionLocation, 0x4), isSet: _OnCrippleExplosion_IsSet) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region OnCrippleImpactData
        private int _OnCrippleImpactDataLocation => _BPNDLocation!.Value.Min + 0x5B;
        private bool _OnCrippleImpactData_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> OnCrippleImpactData => _OnCrippleImpactData_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_OnCrippleImpactDataLocation, 0x4), isSet: _OnCrippleImpactData_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region OnCrippleDebrisScale
        private int _OnCrippleDebrisScaleLocation => _BPNDLocation!.Value.Min + 0x5F;
        private bool _OnCrippleDebrisScale_IsSet => _BPNDLocation.HasValue;
        public Single OnCrippleDebrisScale => _OnCrippleDebrisScale_IsSet ? _recordData.Slice(_OnCrippleDebrisScaleLocation, 4).Float() : default(Single);
        #endregion
        #region OnCrippleDebrisCount
        private int _OnCrippleDebrisCountLocation => _BPNDLocation!.Value.Min + 0x63;
        private bool _OnCrippleDebrisCount_IsSet => _BPNDLocation.HasValue;
        public Byte OnCrippleDebrisCount => _OnCrippleDebrisCount_IsSet ? _recordData.Span[_OnCrippleDebrisCountLocation] : default;
        #endregion
        #region OnCrippleDecalCount
        private int _OnCrippleDecalCountLocation => _BPNDLocation!.Value.Min + 0x64;
        private bool _OnCrippleDecalCount_IsSet => _BPNDLocation.HasValue;
        public Byte OnCrippleDecalCount => _OnCrippleDecalCount_IsSet ? _recordData.Span[_OnCrippleDecalCountLocation] : default;
        #endregion
        #region LimbReplacementModel
        private int? _LimbReplacementModelLocation;
        public String LimbReplacementModel => _LimbReplacementModelLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LimbReplacementModelLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region GoreTargetBone
        private int? _GoreTargetBoneLocation;
        public String GoreTargetBone => _GoreTargetBoneLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _GoreTargetBoneLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region TextureFilesHashes
        private int? _TextureFilesHashesLocation;
        public ReadOnlyMemorySlice<Byte>? TextureFilesHashes => _TextureFilesHashesLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextureFilesHashesLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region HitReactionStart
        private int? _HitReactionStartLocation;
        public String? HitReactionStart => _HitReactionStartLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HitReactionStartLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region HitReactionEnd
        private int? _HitReactionEndLocation;
        public String? HitReactionEnd => _HitReactionEndLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HitReactionEndLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region GoreEffectsDismemberBloodArt
        private int? _GoreEffectsDismemberBloodArtLocation;
        public IFormLinkNullableGetter<IArtObjectGetter> GoreEffectsDismemberBloodArt => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArtObjectGetter>(_package, _recordData, _GoreEffectsDismemberBloodArtLocation);
        #endregion
        #region GoreEffectsBloodImpactMaterialType
        private int? _GoreEffectsBloodImpactMaterialTypeLocation;
        public IFormLinkNullableGetter<IMaterialTypeGetter> GoreEffectsBloodImpactMaterialType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMaterialTypeGetter>(_package, _recordData, _GoreEffectsBloodImpactMaterialTypeLocation);
        #endregion
        #region OnCrippleBloodImpactMaterialType
        private int? _OnCrippleBloodImpactMaterialTypeLocation;
        public IFormLinkNullableGetter<IMaterialTypeGetter> OnCrippleBloodImpactMaterialType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMaterialTypeGetter>(_package, _recordData, _OnCrippleBloodImpactMaterialTypeLocation);
        #endregion
        #region MeatCapTextureSet
        private int? _MeatCapTextureSetLocation;
        public IFormLinkNullableGetter<ITextureSetGetter> MeatCapTextureSet => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITextureSetGetter>(_package, _recordData, _MeatCapTextureSetLocation);
        #endregion
        #region CollarTextureSet
        private int? _CollarTextureSetLocation;
        public IFormLinkNullableGetter<ITextureSetGetter> CollarTextureSet => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITextureSetGetter>(_package, _recordData, _CollarTextureSetLocation);
        #endregion
        #region TwistVariablePrefix
        private int? _TwistVariablePrefixLocation;
        public String? TwistVariablePrefix => _TwistVariablePrefixLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TwistVariablePrefixLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BodyPartBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBodyPartGetter BodyPartFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BodyPartBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IBodyPartGetter BodyPartFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BodyPartFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BPTN:
                {
                    if (lastParsed.ShortCircuit((int)BodyPart_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    _NameLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.Name;
                }
                case RecordTypeInts.BPNN:
                {
                    if (lastParsed.ShortCircuit((int)BodyPart_FieldIndex.PartNode, translationParams)) return ParseResult.Stop;
                    _PartNodeLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.PartNode;
                }
                case RecordTypeInts.BPNT:
                {
                    _VatsTargetLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.VatsTarget;
                }
                case RecordTypeInts.BPND:
                {
                    _BPNDLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)BodyPart_FieldIndex.OnCrippleDecalCount;
                }
                case RecordTypeInts.NAM1:
                {
                    _LimbReplacementModelLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.LimbReplacementModel;
                }
                case RecordTypeInts.NAM4:
                {
                    _GoreTargetBoneLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.GoreTargetBone;
                }
                case RecordTypeInts.NAM5:
                {
                    _TextureFilesHashesLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.TextureFilesHashes;
                }
                case RecordTypeInts.ENAM:
                {
                    _HitReactionStartLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.HitReactionStart;
                }
                case RecordTypeInts.FNAM:
                {
                    _HitReactionEndLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.HitReactionEnd;
                }
                case RecordTypeInts.BNAM:
                {
                    _GoreEffectsDismemberBloodArtLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.GoreEffectsDismemberBloodArt;
                }
                case RecordTypeInts.INAM:
                {
                    _GoreEffectsBloodImpactMaterialTypeLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.GoreEffectsBloodImpactMaterialType;
                }
                case RecordTypeInts.JNAM:
                {
                    _OnCrippleBloodImpactMaterialTypeLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.OnCrippleBloodImpactMaterialType;
                }
                case RecordTypeInts.CNAM:
                {
                    _MeatCapTextureSetLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.MeatCapTextureSet;
                }
                case RecordTypeInts.NAM2:
                {
                    _CollarTextureSetLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.CollarTextureSet;
                }
                case RecordTypeInts.DNAM:
                {
                    _TwistVariablePrefixLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.TwistVariablePrefix;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BodyPartMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBodyPartGetter rhs) return false;
            return ((BodyPartCommon)((IBodyPartGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBodyPartGetter? obj)
        {
            return ((BodyPartCommon)((IBodyPartGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BodyPartCommon)((IBodyPartGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

