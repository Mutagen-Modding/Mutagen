/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class TintTemplateOption :
        IEquatable<ITintTemplateOptionGetter>,
        ILoquiObjectSetter<TintTemplateOption>,
        ITintTemplateOption
    {
        #region Ctor
        public TintTemplateOption()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Slot
        public TintTemplateOption.TintSlot Slot { get; set; } = default(TintTemplateOption.TintSlot);
        #endregion
        #region Index
        public UInt16 Index { get; set; } = default(UInt16);
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITintTemplateOptionGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Flags
        public TintTemplateOption.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TintTemplateOption.Flag? ITintTemplateOptionGetter.Flags => this.Flags;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> ITintTemplateOptionGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Textures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String> _Textures = new ExtendedList<String>();
        public ExtendedList<String> Textures
        {
            get => this._Textures;
            init => this._Textures = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String> ITintTemplateOptionGetter.Textures => _Textures;
        #endregion

        #endregion
        #region BlendOperation
        public BlendOperation? BlendOperation { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        BlendOperation? ITintTemplateOptionGetter.BlendOperation => this.BlendOperation;
        #endregion
        #region TemplateColors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TintTemplateColor>? _TemplateColors;
        public ExtendedList<TintTemplateColor>? TemplateColors
        {
            get => this._TemplateColors;
            set => this._TemplateColors = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITintTemplateColorGetter>? ITintTemplateOptionGetter.TemplateColors => _TemplateColors;
        #endregion

        #endregion
        #region Default
        public Single? Default { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ITintTemplateOptionGetter.Default => this.Default;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TintTemplateOptionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITintTemplateOptionGetter rhs) return false;
            return ((TintTemplateOptionCommon)((ITintTemplateOptionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITintTemplateOptionGetter? obj)
        {
            return ((TintTemplateOptionCommon)((ITintTemplateOptionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TintTemplateOptionCommon)((ITintTemplateOptionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Slot = initialValue;
                this.Index = initialValue;
                this.Name = initialValue;
                this.Flags = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Textures = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.BlendOperation = initialValue;
                this.TemplateColors = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintTemplateColor.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TintTemplateColor.Mask<TItem>?>>());
                this.Default = initialValue;
            }

            public Mask(
                TItem Slot,
                TItem Index,
                TItem Name,
                TItem Flags,
                TItem Conditions,
                TItem Textures,
                TItem BlendOperation,
                TItem TemplateColors,
                TItem Default)
            {
                this.Slot = Slot;
                this.Index = Index;
                this.Name = Name;
                this.Flags = Flags;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Textures = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Textures, Enumerable.Empty<(int Index, TItem Value)>());
                this.BlendOperation = BlendOperation;
                this.TemplateColors = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintTemplateColor.Mask<TItem>?>>?>(TemplateColors, Enumerable.Empty<MaskItemIndexed<TItem, TintTemplateColor.Mask<TItem>?>>());
                this.Default = Default;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Slot;
            public TItem Index;
            public TItem Name;
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Textures;
            public TItem BlendOperation;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintTemplateColor.Mask<TItem>?>>?>? TemplateColors;
            public TItem Default;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Slot, rhs.Slot)) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Textures, rhs.Textures)) return false;
                if (!object.Equals(this.BlendOperation, rhs.BlendOperation)) return false;
                if (!object.Equals(this.TemplateColors, rhs.TemplateColors)) return false;
                if (!object.Equals(this.Default, rhs.Default)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Slot);
                hash.Add(this.Index);
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.Conditions);
                hash.Add(this.Textures);
                hash.Add(this.BlendOperation);
                hash.Add(this.TemplateColors);
                hash.Add(this.Default);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Slot)) return false;
                if (!eval(this.Index)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Textures != null)
                {
                    if (!eval(this.Textures.Overall)) return false;
                    if (this.Textures.Specific != null)
                    {
                        foreach (var item in this.Textures.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.BlendOperation)) return false;
                if (this.TemplateColors != null)
                {
                    if (!eval(this.TemplateColors.Overall)) return false;
                    if (this.TemplateColors.Specific != null)
                    {
                        foreach (var item in this.TemplateColors.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Default)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Slot)) return true;
                if (eval(this.Index)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Textures != null)
                {
                    if (eval(this.Textures.Overall)) return true;
                    if (this.Textures.Specific != null)
                    {
                        foreach (var item in this.Textures.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.BlendOperation)) return true;
                if (this.TemplateColors != null)
                {
                    if (eval(this.TemplateColors.Overall)) return true;
                    if (this.TemplateColors.Specific != null)
                    {
                        foreach (var item in this.TemplateColors.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Default)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TintTemplateOption.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Slot = eval(this.Slot);
                obj.Index = eval(this.Index);
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Textures != null)
                {
                    obj.Textures = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Textures.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Textures.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Textures.Specific = l;
                        foreach (var item in Textures.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.BlendOperation = eval(this.BlendOperation);
                if (TemplateColors != null)
                {
                    obj.TemplateColors = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TintTemplateColor.Mask<R>?>>?>(eval(this.TemplateColors.Overall), Enumerable.Empty<MaskItemIndexed<R, TintTemplateColor.Mask<R>?>>());
                    if (TemplateColors.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TintTemplateColor.Mask<R>?>>();
                        obj.TemplateColors.Specific = l;
                        foreach (var item in TemplateColors.Specific)
                        {
                            MaskItemIndexed<R, TintTemplateColor.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, TintTemplateColor.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Default = eval(this.Default);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(TintTemplateOption.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, TintTemplateOption.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(TintTemplateOption.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Slot ?? true)
                    {
                        sb.AppendItem(Slot, "Slot");
                    }
                    if (printMask?.Index ?? true)
                    {
                        sb.AppendItem(Index, "Index");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Textures?.Overall ?? true)
                        && Textures is {} TexturesItem)
                    {
                        sb.AppendLine("Textures =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TexturesItem.Overall);
                            if (TexturesItem.Specific != null)
                            {
                                foreach (var subItem in TexturesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.BlendOperation ?? true)
                    {
                        sb.AppendItem(BlendOperation, "BlendOperation");
                    }
                    if ((printMask?.TemplateColors?.Overall ?? true)
                        && TemplateColors is {} TemplateColorsItem)
                    {
                        sb.AppendLine("TemplateColors =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TemplateColorsItem.Overall);
                            if (TemplateColorsItem.Specific != null)
                            {
                                foreach (var subItem in TemplateColorsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Default ?? true)
                    {
                        sb.AppendItem(Default, "Default");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Slot;
            public Exception? Index;
            public Exception? Name;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Textures;
            public Exception? BlendOperation;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintTemplateColor.ErrorMask?>>?>? TemplateColors;
            public Exception? Default;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TintTemplateOption_FieldIndex enu = (TintTemplateOption_FieldIndex)index;
                switch (enu)
                {
                    case TintTemplateOption_FieldIndex.Slot:
                        return Slot;
                    case TintTemplateOption_FieldIndex.Index:
                        return Index;
                    case TintTemplateOption_FieldIndex.Name:
                        return Name;
                    case TintTemplateOption_FieldIndex.Flags:
                        return Flags;
                    case TintTemplateOption_FieldIndex.Conditions:
                        return Conditions;
                    case TintTemplateOption_FieldIndex.Textures:
                        return Textures;
                    case TintTemplateOption_FieldIndex.BlendOperation:
                        return BlendOperation;
                    case TintTemplateOption_FieldIndex.TemplateColors:
                        return TemplateColors;
                    case TintTemplateOption_FieldIndex.Default:
                        return Default;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TintTemplateOption_FieldIndex enu = (TintTemplateOption_FieldIndex)index;
                switch (enu)
                {
                    case TintTemplateOption_FieldIndex.Slot:
                        this.Slot = ex;
                        break;
                    case TintTemplateOption_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case TintTemplateOption_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case TintTemplateOption_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case TintTemplateOption_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case TintTemplateOption_FieldIndex.Textures:
                        this.Textures = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case TintTemplateOption_FieldIndex.BlendOperation:
                        this.BlendOperation = ex;
                        break;
                    case TintTemplateOption_FieldIndex.TemplateColors:
                        this.TemplateColors = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintTemplateColor.ErrorMask?>>?>(ex, null);
                        break;
                    case TintTemplateOption_FieldIndex.Default:
                        this.Default = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TintTemplateOption_FieldIndex enu = (TintTemplateOption_FieldIndex)index;
                switch (enu)
                {
                    case TintTemplateOption_FieldIndex.Slot:
                        this.Slot = (Exception?)obj;
                        break;
                    case TintTemplateOption_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case TintTemplateOption_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case TintTemplateOption_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case TintTemplateOption_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case TintTemplateOption_FieldIndex.Textures:
                        this.Textures = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case TintTemplateOption_FieldIndex.BlendOperation:
                        this.BlendOperation = (Exception?)obj;
                        break;
                    case TintTemplateOption_FieldIndex.TemplateColors:
                        this.TemplateColors = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintTemplateColor.ErrorMask?>>?>)obj;
                        break;
                    case TintTemplateOption_FieldIndex.Default:
                        this.Default = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Slot != null) return true;
                if (Index != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (Conditions != null) return true;
                if (Textures != null) return true;
                if (BlendOperation != null) return true;
                if (TemplateColors != null) return true;
                if (Default != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Slot, "Slot");
                }
                {
                    sb.AppendItem(Index, "Index");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Textures is {} TexturesItem)
                {
                    sb.AppendLine("Textures =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TexturesItem.Overall);
                        if (TexturesItem.Specific != null)
                        {
                            foreach (var subItem in TexturesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(BlendOperation, "BlendOperation");
                }
                if (TemplateColors is {} TemplateColorsItem)
                {
                    sb.AppendLine("TemplateColors =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TemplateColorsItem.Overall);
                        if (TemplateColorsItem.Specific != null)
                        {
                            foreach (var subItem in TemplateColorsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Default, "Default");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Slot = this.Slot.Combine(rhs.Slot);
                ret.Index = this.Index.Combine(rhs.Index);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Textures = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Textures?.Overall, rhs.Textures?.Overall), Noggog.ExceptionExt.Combine(this.Textures?.Specific, rhs.Textures?.Specific));
                ret.BlendOperation = this.BlendOperation.Combine(rhs.BlendOperation);
                ret.TemplateColors = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintTemplateColor.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.TemplateColors?.Overall, rhs.TemplateColors?.Overall), Noggog.ExceptionExt.Combine(this.TemplateColors?.Specific, rhs.TemplateColors?.Specific));
                ret.Default = this.Default.Combine(rhs.Default);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Slot;
            public bool Index;
            public bool Name;
            public bool Flags;
            public Condition.TranslationMask? Conditions;
            public bool Textures;
            public bool BlendOperation;
            public TintTemplateColor.TranslationMask? TemplateColors;
            public bool Default;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Slot = defaultOn;
                this.Index = defaultOn;
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.Textures = defaultOn;
                this.BlendOperation = defaultOn;
                this.Default = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Slot, null));
                ret.Add((Index, null));
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Textures, null));
                ret.Add((BlendOperation, null));
                ret.Add((TemplateColors == null ? DefaultOn : !TemplateColors.GetCrystal().CopyNothing, TemplateColors?.GetCrystal()));
                ret.Add((Default, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TintTemplateOptionCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TintTemplateOptionSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintTemplateOptionBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TintTemplateOptionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static TintTemplateOption CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new TintTemplateOption();
            ((TintTemplateOptionSetterCommon)((ITintTemplateOptionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TintTemplateOption item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TintTemplateOptionSetterCommon)((ITintTemplateOptionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TintTemplateOption GetNew()
        {
            return new TintTemplateOption();
        }

    }
    #endregion

    #region Interface
    public partial interface ITintTemplateOption :
        IFormLinkContainer,
        ILoquiObjectSetter<ITintTemplateOption>,
        INamed,
        INamedRequired,
        ITintTemplateOptionGetter,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new TintTemplateOption.TintSlot Slot { get; set; }
        new UInt16 Index { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new TintTemplateOption.Flag? Flags { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new ExtendedList<String> Textures { get; }
        new BlendOperation? BlendOperation { get; set; }
        new ExtendedList<TintTemplateColor>? TemplateColors { get; set; }
        new Single? Default { get; set; }
    }

    public partial interface ITintTemplateOptionGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ITintTemplateOptionGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => TintTemplateOption_Registration.Instance;
        TintTemplateOption.TintSlot Slot { get; }
        UInt16 Index { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        TintTemplateOption.Flag? Flags { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IReadOnlyList<String> Textures { get; }
        BlendOperation? BlendOperation { get; }
        IReadOnlyList<ITintTemplateColorGetter>? TemplateColors { get; }
        Single? Default { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TintTemplateOptionMixIn
    {
        public static void Clear(this ITintTemplateOption item)
        {
            ((TintTemplateOptionSetterCommon)((ITintTemplateOptionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TintTemplateOption.Mask<bool> GetEqualsMask(
            this ITintTemplateOptionGetter item,
            ITintTemplateOptionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TintTemplateOptionCommon)((ITintTemplateOptionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITintTemplateOptionGetter item,
            string? name = null,
            TintTemplateOption.Mask<bool>? printMask = null)
        {
            return ((TintTemplateOptionCommon)((ITintTemplateOptionGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITintTemplateOptionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TintTemplateOption.Mask<bool>? printMask = null)
        {
            ((TintTemplateOptionCommon)((ITintTemplateOptionGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITintTemplateOptionGetter item,
            ITintTemplateOptionGetter rhs,
            TintTemplateOption.TranslationMask? equalsMask = null)
        {
            return ((TintTemplateOptionCommon)((ITintTemplateOptionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITintTemplateOption lhs,
            ITintTemplateOptionGetter rhs)
        {
            ((TintTemplateOptionSetterTranslationCommon)((ITintTemplateOptionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITintTemplateOption lhs,
            ITintTemplateOptionGetter rhs,
            TintTemplateOption.TranslationMask? copyMask = null)
        {
            ((TintTemplateOptionSetterTranslationCommon)((ITintTemplateOptionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITintTemplateOption lhs,
            ITintTemplateOptionGetter rhs,
            out TintTemplateOption.ErrorMask errorMask,
            TintTemplateOption.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TintTemplateOptionSetterTranslationCommon)((ITintTemplateOptionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TintTemplateOption.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITintTemplateOption lhs,
            ITintTemplateOptionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TintTemplateOptionSetterTranslationCommon)((ITintTemplateOptionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TintTemplateOption DeepCopy(
            this ITintTemplateOptionGetter item,
            TintTemplateOption.TranslationMask? copyMask = null)
        {
            return ((TintTemplateOptionSetterTranslationCommon)((ITintTemplateOptionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TintTemplateOption DeepCopy(
            this ITintTemplateOptionGetter item,
            out TintTemplateOption.ErrorMask errorMask,
            TintTemplateOption.TranslationMask? copyMask = null)
        {
            return ((TintTemplateOptionSetterTranslationCommon)((ITintTemplateOptionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TintTemplateOption DeepCopy(
            this ITintTemplateOptionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TintTemplateOptionSetterTranslationCommon)((ITintTemplateOptionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITintTemplateOption item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TintTemplateOptionSetterCommon)((ITintTemplateOptionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum TintTemplateOption_FieldIndex
    {
        Slot = 0,
        Index = 1,
        Name = 2,
        Flags = 3,
        Conditions = 4,
        Textures = 5,
        BlendOperation = 6,
        TemplateColors = 7,
        Default = 8,
    }
    #endregion

    #region Registration
    internal partial class TintTemplateOption_Registration : ILoquiRegistration
    {
        public static readonly TintTemplateOption_Registration Instance = new TintTemplateOption_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(TintTemplateOption.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TintTemplateOption.ErrorMask);

        public static readonly Type ClassType = typeof(TintTemplateOption);

        public static readonly Type GetterType = typeof(ITintTemplateOptionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITintTemplateOption);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.TintTemplateOption";

        public const string Name = "TintTemplateOption";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TETI;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TETI);
            var all = RecordCollection.Factory(
                RecordTypes.TETI,
                RecordTypes.TTGP,
                RecordTypes.TTEF,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.TTET,
                RecordTypes.TTEB,
                RecordTypes.TTEC,
                RecordTypes.TTED);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TintTemplateOptionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TintTemplateOptionSetterCommon
    {
        public static readonly TintTemplateOptionSetterCommon Instance = new TintTemplateOptionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITintTemplateOption item)
        {
            ClearPartial();
            item.Slot = default(TintTemplateOption.TintSlot);
            item.Index = default(UInt16);
            item.Name = default;
            item.Flags = default;
            item.Conditions.Clear();
            item.Textures.Clear();
            item.BlendOperation = default;
            item.TemplateColors = null;
            item.Default = default;
        }
        
        #region Mutagen
        public void RemapLinks(ITintTemplateOption obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Conditions.RemapLinks(mapping);
            obj.TemplateColors?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITintTemplateOption item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: TintTemplateOptionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class TintTemplateOptionCommon
    {
        public static readonly TintTemplateOptionCommon Instance = new TintTemplateOptionCommon();

        public TintTemplateOption.Mask<bool> GetEqualsMask(
            ITintTemplateOptionGetter item,
            ITintTemplateOptionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TintTemplateOption.Mask<bool>(false);
            ((TintTemplateOptionCommon)((ITintTemplateOptionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITintTemplateOptionGetter item,
            ITintTemplateOptionGetter rhs,
            TintTemplateOption.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Slot = item.Slot == rhs.Slot;
            ret.Index = item.Index == rhs.Index;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Textures = item.Textures.CollectionEqualsHelper(
                rhs.Textures,
                (l, r) => string.Equals(l, r),
                include);
            ret.BlendOperation = item.BlendOperation == rhs.BlendOperation;
            ret.TemplateColors = item.TemplateColors.CollectionEqualsHelper(
                rhs.TemplateColors,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Default = item.Default.EqualsWithin(rhs.Default);
        }
        
        public string Print(
            ITintTemplateOptionGetter item,
            string? name = null,
            TintTemplateOption.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITintTemplateOptionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TintTemplateOption.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"TintTemplateOption =>");
            }
            else
            {
                sb.AppendLine($"{name} (TintTemplateOption) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITintTemplateOptionGetter item,
            StructuredStringBuilder sb,
            TintTemplateOption.Mask<bool>? printMask = null)
        {
            if (printMask?.Slot ?? true)
            {
                sb.AppendItem(item.Slot, "Slot");
            }
            if (printMask?.Index ?? true)
            {
                sb.AppendItem(item.Index, "Index");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Textures?.Overall ?? true)
            {
                sb.AppendLine("Textures =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Textures)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if ((printMask?.BlendOperation ?? true)
                && item.BlendOperation is {} BlendOperationItem)
            {
                sb.AppendItem(BlendOperationItem, "BlendOperation");
            }
            if ((printMask?.TemplateColors?.Overall ?? true)
                && item.TemplateColors is {} TemplateColorsItem)
            {
                sb.AppendLine("TemplateColors =>");
                using (sb.Brace())
                {
                    foreach (var subItem in TemplateColorsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Default ?? true)
                && item.Default is {} DefaultItem)
            {
                sb.AppendItem(DefaultItem, "Default");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITintTemplateOptionGetter? lhs,
            ITintTemplateOptionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Slot) ?? true))
            {
                if (lhs.Slot != rhs.Slot) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)TintTemplateOption_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Textures) ?? true))
            {
                if (!lhs.Textures.SequenceEqualNullable(rhs.Textures)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.BlendOperation) ?? true))
            {
                if (lhs.BlendOperation != rhs.BlendOperation) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.TemplateColors) ?? true))
            {
                if (!lhs.TemplateColors.SequenceEqualNullable(rhs.TemplateColors, (l, r) => ((TintTemplateColorCommon)((ITintTemplateColorGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)TintTemplateOption_FieldIndex.TemplateColors)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Default) ?? true))
            {
                if (!lhs.Default.EqualsWithin(rhs.Default)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ITintTemplateOptionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Slot);
            hash.Add(item.Index);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.Conditions);
            hash.Add(item.Textures);
            if (item.BlendOperation is {} BlendOperationitem)
            {
                hash.Add(BlendOperationitem);
            }
            hash.Add(item.TemplateColors);
            if (item.Default is {} Defaultitem)
            {
                hash.Add(Defaultitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TintTemplateOption.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITintTemplateOptionGetter obj)
        {
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.TemplateColors is {} TemplateColorsItem)
            {
                foreach (var item in TemplateColorsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class TintTemplateOptionSetterTranslationCommon
    {
        public static readonly TintTemplateOptionSetterTranslationCommon Instance = new TintTemplateOptionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITintTemplateOption item,
            ITintTemplateOptionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Slot) ?? true))
            {
                item.Slot = rhs.Slot;
            }
            if ((copyMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)TintTemplateOption_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Textures) ?? true))
            {
                errorMask?.PushIndex((int)TintTemplateOption_FieldIndex.Textures);
                try
                {
                    item.Textures.SetTo(rhs.Textures);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.BlendOperation) ?? true))
            {
                item.BlendOperation = rhs.BlendOperation;
            }
            if ((copyMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.TemplateColors) ?? true))
            {
                errorMask?.PushIndex((int)TintTemplateOption_FieldIndex.TemplateColors);
                try
                {
                    if ((rhs.TemplateColors != null))
                    {
                        item.TemplateColors = 
                            rhs.TemplateColors
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<TintTemplateColor>();
                    }
                    else
                    {
                        item.TemplateColors = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TintTemplateOption_FieldIndex.Default) ?? true))
            {
                item.Default = rhs.Default;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITintTemplateOption item,
            ITintTemplateOptionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public TintTemplateOption DeepCopy(
            ITintTemplateOptionGetter item,
            TintTemplateOption.TranslationMask? copyMask = null)
        {
            TintTemplateOption ret = (TintTemplateOption)((TintTemplateOptionCommon)((ITintTemplateOptionGetter)item).CommonInstance()!).GetNew();
            ((TintTemplateOptionSetterTranslationCommon)((ITintTemplateOptionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TintTemplateOption DeepCopy(
            ITintTemplateOptionGetter item,
            out TintTemplateOption.ErrorMask errorMask,
            TintTemplateOption.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TintTemplateOption ret = (TintTemplateOption)((TintTemplateOptionCommon)((ITintTemplateOptionGetter)item).CommonInstance()!).GetNew();
            ((TintTemplateOptionSetterTranslationCommon)((ITintTemplateOptionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TintTemplateOption.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TintTemplateOption DeepCopy(
            ITintTemplateOptionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TintTemplateOption ret = (TintTemplateOption)((TintTemplateOptionCommon)((ITintTemplateOptionGetter)item).CommonInstance()!).GetNew();
            ((TintTemplateOptionSetterTranslationCommon)((ITintTemplateOptionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class TintTemplateOption
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintTemplateOption_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => TintTemplateOption_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintTemplateOptionCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TintTemplateOptionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintTemplateOptionSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintTemplateOptionGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITintTemplateOptionGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITintTemplateOptionGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class TintTemplateOptionBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly TintTemplateOptionBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ITintTemplateOptionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.TETI)))
            {
                EnumBinaryTranslation<TintTemplateOption.TintSlot, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Slot,
                    length: 2);
                writer.Write(item.Index);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.TTGP),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            EnumBinaryTranslation<TintTemplateOption.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 2,
                header: translationParams.ConvertToCustom(RecordTypes.TTEF));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.WritePerItem(
                writer: writer,
                items: item.Textures,
                recordType: translationParams.ConvertToCustom(RecordTypes.TTET),
                transl: StringBinaryTranslation.Instance.Write);
            EnumBinaryTranslation<BlendOperation, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.BlendOperation,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.TTEB));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ITintTemplateColorGetter>.Instance.Write(
                writer: writer,
                items: item.TemplateColors,
                recordType: translationParams.ConvertToCustom(RecordTypes.TTEC),
                transl: (MutagenWriter subWriter, ITintTemplateColorGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((TintTemplateColorBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Default,
                header: translationParams.ConvertToCustom(RecordTypes.TTED));
        }

        public void Write(
            MutagenWriter writer,
            ITintTemplateOptionGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITintTemplateOptionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TintTemplateOptionBinaryCreateTranslation
    {
        public static readonly TintTemplateOptionBinaryCreateTranslation Instance = new TintTemplateOptionBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ITintTemplateOption item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TETI:
                {
                    if (lastParsed.ShortCircuit((int)TintTemplateOption_FieldIndex.Index, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 2) return null;
                    item.Slot = EnumBinaryTranslation<TintTemplateOption.TintSlot, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 2);
                    if (dataFrame.Remaining < 2) return null;
                    item.Index = dataFrame.ReadUInt16();
                    return (int)TintTemplateOption_FieldIndex.Index;
                }
                case RecordTypeInts.TTGP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)TintTemplateOption_FieldIndex.Name;
                }
                case RecordTypeInts.TTEF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<TintTemplateOption.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)TintTemplateOption_FieldIndex.Flags;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)TintTemplateOption_FieldIndex.Conditions;
                }
                case RecordTypeInts.TTET:
                {
                    item.Textures.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.TTET),
                            transl: StringBinaryTranslation.Instance.Parse));
                    return (int)TintTemplateOption_FieldIndex.Textures;
                }
                case RecordTypeInts.TTEB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BlendOperation = EnumBinaryTranslation<BlendOperation, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)TintTemplateOption_FieldIndex.BlendOperation;
                }
                case RecordTypeInts.TTEC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TemplateColors = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<TintTemplateColor>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: TintTemplateColor.TryCreateFromBinary)
                        .CastExtendedList<TintTemplateColor>();
                    return (int)TintTemplateOption_FieldIndex.TemplateColors;
                }
                case RecordTypeInts.TTED:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Default = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)TintTemplateOption_FieldIndex.Default;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class TintTemplateOptionBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITintTemplateOptionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TintTemplateOptionBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class TintTemplateOptionBinaryOverlay :
        PluginBinaryOverlay,
        ITintTemplateOptionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintTemplateOption_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => TintTemplateOption_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintTemplateOptionCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintTemplateOptionSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintTemplateOptionGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITintTemplateOptionGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITintTemplateOptionGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TintTemplateOptionCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintTemplateOptionBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TintTemplateOptionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _TETILocation;
        #region Slot
        private int _SlotLocation => _TETILocation!.Value.Min;
        private bool _Slot_IsSet => _TETILocation.HasValue;
        public TintTemplateOption.TintSlot Slot => _Slot_IsSet ? (TintTemplateOption.TintSlot)BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Span.Slice(_SlotLocation, 0x2)) : default;
        #endregion
        #region Index
        private int _IndexLocation => _TETILocation!.Value.Min + 0x2;
        private bool _Index_IsSet => _TETILocation.HasValue;
        public UInt16 Index => _Index_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_IndexLocation, 2)) : default(UInt16);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public TintTemplateOption.Flag? Flags => _FlagsLocation.HasValue ? (TintTemplateOption.Flag)BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(TintTemplateOption.Flag?);
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = [];
        public IReadOnlyList<String> Textures { get; private set; } = [];
        #region BlendOperation
        private int? _BlendOperationLocation;
        public BlendOperation? BlendOperation => _BlendOperationLocation.HasValue ? (BlendOperation)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BlendOperationLocation!.Value, _package.MetaData.Constants)) : default(BlendOperation?);
        #endregion
        public IReadOnlyList<ITintTemplateColorGetter>? TemplateColors { get; private set; }
        #region Default
        private int? _DefaultLocation;
        public Single? Default => _DefaultLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DefaultLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TintTemplateOptionBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITintTemplateOptionGetter TintTemplateOptionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TintTemplateOptionBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ITintTemplateOptionGetter TintTemplateOptionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TintTemplateOptionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TETI:
                {
                    if (lastParsed.ShortCircuit((int)TintTemplateOption_FieldIndex.Index, translationParams)) return ParseResult.Stop;
                    _TETILocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)TintTemplateOption_FieldIndex.Index;
                }
                case RecordTypeInts.TTGP:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)TintTemplateOption_FieldIndex.Name;
                }
                case RecordTypeInts.TTEF:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)TintTemplateOption_FieldIndex.Flags;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)TintTemplateOption_FieldIndex.Conditions;
                }
                case RecordTypeInts.TTET:
                {
                    this.Textures = BinaryOverlayList.FactoryByArray<String>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ProcessWholeToZString(p.MetaData.Constants.Subrecord(s).Content, encoding: p.MetaData.Encodings.NonTranslated),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.TTET,
                            skipHeader: false,
                            translationParams: translationParams));
                    return (int)TintTemplateOption_FieldIndex.Textures;
                }
                case RecordTypeInts.TTEB:
                {
                    _BlendOperationLocation = (stream.Position - offset);
                    return (int)TintTemplateOption_FieldIndex.BlendOperation;
                }
                case RecordTypeInts.TTEC:
                {
                    this.TemplateColors = BinaryOverlayList.FactoryByStartIndexWithTrigger<ITintTemplateColorGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 14,
                        getter: (s, p) => TintTemplateColorBinaryOverlay.TintTemplateColorFactory(s, p));
                    return (int)TintTemplateOption_FieldIndex.TemplateColors;
                }
                case RecordTypeInts.TTED:
                {
                    _DefaultLocation = (stream.Position - offset);
                    return (int)TintTemplateOption_FieldIndex.Default;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TintTemplateOptionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITintTemplateOptionGetter rhs) return false;
            return ((TintTemplateOptionCommon)((ITintTemplateOptionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITintTemplateOptionGetter? obj)
        {
            return ((TintTemplateOptionCommon)((ITintTemplateOptionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TintTemplateOptionCommon)((ITintTemplateOptionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

