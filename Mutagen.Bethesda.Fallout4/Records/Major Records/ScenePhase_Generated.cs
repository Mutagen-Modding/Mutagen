/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ScenePhase :
        IEquatable<IScenePhaseGetter>,
        ILoquiObjectSetter<ScenePhase>,
        IScenePhase
    {
        #region Ctor
        public ScenePhase()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IScenePhaseGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region StartConditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _StartConditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> StartConditions
        {
            get => this._StartConditions;
            init => this._StartConditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IScenePhaseGetter.StartConditions => _StartConditions;
        #endregion

        #endregion
        #region CompletionConditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _CompletionConditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> CompletionConditions
        {
            get => this._CompletionConditions;
            init => this._CompletionConditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IScenePhaseGetter.CompletionConditions => _CompletionConditions;
        #endregion

        #endregion
        #region EditorWidth
        public UInt32? EditorWidth { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IScenePhaseGetter.EditorWidth => this.EditorWidth;
        #endregion
        #region Flags
        public ScenePhase.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ScenePhase.Flag? IScenePhaseGetter.Flags => this.Flags;
        #endregion
        #region PhaseSetParentQuestStage
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SceneSetParentQuestStage? _PhaseSetParentQuestStage;
        public SceneSetParentQuestStage? PhaseSetParentQuestStage
        {
            get => _PhaseSetParentQuestStage;
            set => _PhaseSetParentQuestStage = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISceneSetParentQuestStageGetter? IScenePhaseGetter.PhaseSetParentQuestStage => this.PhaseSetParentQuestStage;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ScenePhaseMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IScenePhaseGetter rhs) return false;
            return ((ScenePhaseCommon)((IScenePhaseGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IScenePhaseGetter? obj)
        {
            return ((ScenePhaseCommon)((IScenePhaseGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ScenePhaseCommon)((IScenePhaseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Name = initialValue;
                this.StartConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.CompletionConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.EditorWidth = initialValue;
                this.Flags = initialValue;
                this.PhaseSetParentQuestStage = new MaskItem<TItem, SceneSetParentQuestStage.Mask<TItem>?>(initialValue, new SceneSetParentQuestStage.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Name,
                TItem StartConditions,
                TItem CompletionConditions,
                TItem EditorWidth,
                TItem Flags,
                TItem PhaseSetParentQuestStage)
            {
                this.Name = Name;
                this.StartConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(StartConditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.CompletionConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(CompletionConditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.EditorWidth = EditorWidth;
                this.Flags = Flags;
                this.PhaseSetParentQuestStage = new MaskItem<TItem, SceneSetParentQuestStage.Mask<TItem>?>(PhaseSetParentQuestStage, new SceneSetParentQuestStage.Mask<TItem>(PhaseSetParentQuestStage));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? StartConditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? CompletionConditions;
            public TItem EditorWidth;
            public TItem Flags;
            public MaskItem<TItem, SceneSetParentQuestStage.Mask<TItem>?>? PhaseSetParentQuestStage { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.StartConditions, rhs.StartConditions)) return false;
                if (!object.Equals(this.CompletionConditions, rhs.CompletionConditions)) return false;
                if (!object.Equals(this.EditorWidth, rhs.EditorWidth)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.PhaseSetParentQuestStage, rhs.PhaseSetParentQuestStage)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.StartConditions);
                hash.Add(this.CompletionConditions);
                hash.Add(this.EditorWidth);
                hash.Add(this.Flags);
                hash.Add(this.PhaseSetParentQuestStage);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Name)) return false;
                if (this.StartConditions != null)
                {
                    if (!eval(this.StartConditions.Overall)) return false;
                    if (this.StartConditions.Specific != null)
                    {
                        foreach (var item in this.StartConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.CompletionConditions != null)
                {
                    if (!eval(this.CompletionConditions.Overall)) return false;
                    if (this.CompletionConditions.Specific != null)
                    {
                        foreach (var item in this.CompletionConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.EditorWidth)) return false;
                if (!eval(this.Flags)) return false;
                if (PhaseSetParentQuestStage != null)
                {
                    if (!eval(this.PhaseSetParentQuestStage.Overall)) return false;
                    if (this.PhaseSetParentQuestStage.Specific != null && !this.PhaseSetParentQuestStage.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Name)) return true;
                if (this.StartConditions != null)
                {
                    if (eval(this.StartConditions.Overall)) return true;
                    if (this.StartConditions.Specific != null)
                    {
                        foreach (var item in this.StartConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.CompletionConditions != null)
                {
                    if (eval(this.CompletionConditions.Overall)) return true;
                    if (this.CompletionConditions.Specific != null)
                    {
                        foreach (var item in this.CompletionConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.EditorWidth)) return true;
                if (eval(this.Flags)) return true;
                if (PhaseSetParentQuestStage != null)
                {
                    if (eval(this.PhaseSetParentQuestStage.Overall)) return true;
                    if (this.PhaseSetParentQuestStage.Specific != null && this.PhaseSetParentQuestStage.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ScenePhase.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Name = eval(this.Name);
                if (StartConditions != null)
                {
                    obj.StartConditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.StartConditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (StartConditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.StartConditions.Specific = l;
                        foreach (var item in StartConditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (CompletionConditions != null)
                {
                    obj.CompletionConditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.CompletionConditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (CompletionConditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.CompletionConditions.Specific = l;
                        foreach (var item in CompletionConditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.EditorWidth = eval(this.EditorWidth);
                obj.Flags = eval(this.Flags);
                obj.PhaseSetParentQuestStage = this.PhaseSetParentQuestStage == null ? null : new MaskItem<R, SceneSetParentQuestStage.Mask<R>?>(eval(this.PhaseSetParentQuestStage.Overall), this.PhaseSetParentQuestStage.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ScenePhase.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ScenePhase.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ScenePhase.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.StartConditions?.Overall ?? true)
                        && StartConditions is {} StartConditionsItem)
                    {
                        sb.AppendLine("StartConditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(StartConditionsItem.Overall);
                            if (StartConditionsItem.Specific != null)
                            {
                                foreach (var subItem in StartConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.CompletionConditions?.Overall ?? true)
                        && CompletionConditions is {} CompletionConditionsItem)
                    {
                        sb.AppendLine("CompletionConditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(CompletionConditionsItem.Overall);
                            if (CompletionConditionsItem.Specific != null)
                            {
                                foreach (var subItem in CompletionConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.EditorWidth ?? true)
                    {
                        sb.AppendItem(EditorWidth, "EditorWidth");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.PhaseSetParentQuestStage?.Overall ?? true)
                    {
                        PhaseSetParentQuestStage?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? StartConditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? CompletionConditions;
            public Exception? EditorWidth;
            public Exception? Flags;
            public MaskItem<Exception?, SceneSetParentQuestStage.ErrorMask?>? PhaseSetParentQuestStage;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ScenePhase_FieldIndex enu = (ScenePhase_FieldIndex)index;
                switch (enu)
                {
                    case ScenePhase_FieldIndex.Name:
                        return Name;
                    case ScenePhase_FieldIndex.StartConditions:
                        return StartConditions;
                    case ScenePhase_FieldIndex.CompletionConditions:
                        return CompletionConditions;
                    case ScenePhase_FieldIndex.EditorWidth:
                        return EditorWidth;
                    case ScenePhase_FieldIndex.Flags:
                        return Flags;
                    case ScenePhase_FieldIndex.PhaseSetParentQuestStage:
                        return PhaseSetParentQuestStage;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ScenePhase_FieldIndex enu = (ScenePhase_FieldIndex)index;
                switch (enu)
                {
                    case ScenePhase_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ScenePhase_FieldIndex.StartConditions:
                        this.StartConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case ScenePhase_FieldIndex.CompletionConditions:
                        this.CompletionConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case ScenePhase_FieldIndex.EditorWidth:
                        this.EditorWidth = ex;
                        break;
                    case ScenePhase_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case ScenePhase_FieldIndex.PhaseSetParentQuestStage:
                        this.PhaseSetParentQuestStage = new MaskItem<Exception?, SceneSetParentQuestStage.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ScenePhase_FieldIndex enu = (ScenePhase_FieldIndex)index;
                switch (enu)
                {
                    case ScenePhase_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ScenePhase_FieldIndex.StartConditions:
                        this.StartConditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case ScenePhase_FieldIndex.CompletionConditions:
                        this.CompletionConditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case ScenePhase_FieldIndex.EditorWidth:
                        this.EditorWidth = (Exception?)obj;
                        break;
                    case ScenePhase_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case ScenePhase_FieldIndex.PhaseSetParentQuestStage:
                        this.PhaseSetParentQuestStage = (MaskItem<Exception?, SceneSetParentQuestStage.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (StartConditions != null) return true;
                if (CompletionConditions != null) return true;
                if (EditorWidth != null) return true;
                if (Flags != null) return true;
                if (PhaseSetParentQuestStage != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Name, "Name");
                }
                if (StartConditions is {} StartConditionsItem)
                {
                    sb.AppendLine("StartConditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(StartConditionsItem.Overall);
                        if (StartConditionsItem.Specific != null)
                        {
                            foreach (var subItem in StartConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (CompletionConditions is {} CompletionConditionsItem)
                {
                    sb.AppendLine("CompletionConditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(CompletionConditionsItem.Overall);
                        if (CompletionConditionsItem.Specific != null)
                        {
                            foreach (var subItem in CompletionConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(EditorWidth, "EditorWidth");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                PhaseSetParentQuestStage?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.StartConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.StartConditions?.Overall, rhs.StartConditions?.Overall), Noggog.ExceptionExt.Combine(this.StartConditions?.Specific, rhs.StartConditions?.Specific));
                ret.CompletionConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.CompletionConditions?.Overall, rhs.CompletionConditions?.Overall), Noggog.ExceptionExt.Combine(this.CompletionConditions?.Specific, rhs.CompletionConditions?.Specific));
                ret.EditorWidth = this.EditorWidth.Combine(rhs.EditorWidth);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.PhaseSetParentQuestStage = this.PhaseSetParentQuestStage.Combine(rhs.PhaseSetParentQuestStage, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Name;
            public Condition.TranslationMask? StartConditions;
            public Condition.TranslationMask? CompletionConditions;
            public bool EditorWidth;
            public bool Flags;
            public SceneSetParentQuestStage.TranslationMask? PhaseSetParentQuestStage;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Name = defaultOn;
                this.EditorWidth = defaultOn;
                this.Flags = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Name, null));
                ret.Add((StartConditions == null ? DefaultOn : !StartConditions.GetCrystal().CopyNothing, StartConditions?.GetCrystal()));
                ret.Add((CompletionConditions == null ? DefaultOn : !CompletionConditions.GetCrystal().CopyNothing, CompletionConditions?.GetCrystal()));
                ret.Add((EditorWidth, null));
                ret.Add((Flags, null));
                ret.Add((PhaseSetParentQuestStage != null ? PhaseSetParentQuestStage.OnOverall : DefaultOn, PhaseSetParentQuestStage?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ScenePhaseCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScenePhaseSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScenePhaseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ScenePhaseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ScenePhase CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ScenePhase();
            ((ScenePhaseSetterCommon)((IScenePhaseGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ScenePhase item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ScenePhaseSetterCommon)((IScenePhaseGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ScenePhase GetNew()
        {
            return new ScenePhase();
        }

    }
    #endregion

    #region Interface
    public partial interface IScenePhase :
        IFormLinkContainer,
        ILoquiObjectSetter<IScenePhase>,
        INamed,
        INamedRequired,
        IScenePhaseGetter
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new ExtendedList<Condition> StartConditions { get; }
        new ExtendedList<Condition> CompletionConditions { get; }
        new UInt32? EditorWidth { get; set; }
        new ScenePhase.Flag? Flags { get; set; }
        new SceneSetParentQuestStage? PhaseSetParentQuestStage { get; set; }
    }

    public partial interface IScenePhaseGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IScenePhaseGetter>,
        INamedGetter,
        INamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ScenePhase_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        IReadOnlyList<IConditionGetter> StartConditions { get; }
        IReadOnlyList<IConditionGetter> CompletionConditions { get; }
        UInt32? EditorWidth { get; }
        ScenePhase.Flag? Flags { get; }
        ISceneSetParentQuestStageGetter? PhaseSetParentQuestStage { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScenePhaseMixIn
    {
        public static void Clear(this IScenePhase item)
        {
            ((ScenePhaseSetterCommon)((IScenePhaseGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ScenePhase.Mask<bool> GetEqualsMask(
            this IScenePhaseGetter item,
            IScenePhaseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IScenePhaseGetter item,
            string? name = null,
            ScenePhase.Mask<bool>? printMask = null)
        {
            return ((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IScenePhaseGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ScenePhase.Mask<bool>? printMask = null)
        {
            ((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IScenePhaseGetter item,
            IScenePhaseGetter rhs,
            ScenePhase.TranslationMask? equalsMask = null)
        {
            return ((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IScenePhase lhs,
            IScenePhaseGetter rhs)
        {
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IScenePhase lhs,
            IScenePhaseGetter rhs,
            ScenePhase.TranslationMask? copyMask = null)
        {
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IScenePhase lhs,
            IScenePhaseGetter rhs,
            out ScenePhase.ErrorMask errorMask,
            ScenePhase.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ScenePhase.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScenePhase lhs,
            IScenePhaseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ScenePhase DeepCopy(
            this IScenePhaseGetter item,
            ScenePhase.TranslationMask? copyMask = null)
        {
            return ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScenePhase DeepCopy(
            this IScenePhaseGetter item,
            out ScenePhase.ErrorMask errorMask,
            ScenePhase.TranslationMask? copyMask = null)
        {
            return ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScenePhase DeepCopy(
            this IScenePhaseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IScenePhase item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ScenePhaseSetterCommon)((IScenePhaseGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum ScenePhase_FieldIndex
    {
        Name = 0,
        StartConditions = 1,
        CompletionConditions = 2,
        EditorWidth = 3,
        Flags = 4,
        PhaseSetParentQuestStage = 5,
    }
    #endregion

    #region Registration
    internal partial class ScenePhase_Registration : ILoquiRegistration
    {
        public static readonly ScenePhase_Registration Instance = new ScenePhase_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(ScenePhase.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScenePhase.ErrorMask);

        public static readonly Type ClassType = typeof(ScenePhase);

        public static readonly Type GetterType = typeof(IScenePhaseGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScenePhase);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ScenePhase";

        public const string Name = "ScenePhase";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.HNAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.HNAM);
            var all = RecordCollection.Factory(
                RecordTypes.HNAM,
                RecordTypes.NAM0,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.NEXT,
                RecordTypes.WNAM,
                RecordTypes.FNAM,
                RecordTypes.SCQS);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ScenePhaseBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ScenePhaseSetterCommon
    {
        public static readonly ScenePhaseSetterCommon Instance = new ScenePhaseSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScenePhase item)
        {
            ClearPartial();
            item.Name = default;
            item.StartConditions.Clear();
            item.CompletionConditions.Clear();
            item.EditorWidth = default;
            item.Flags = default;
            item.PhaseSetParentQuestStage = null;
        }
        
        #region Mutagen
        public void RemapLinks(IScenePhase obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.StartConditions.RemapLinks(mapping);
            obj.CompletionConditions.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IScenePhase item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: ScenePhaseBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class ScenePhaseCommon
    {
        public static readonly ScenePhaseCommon Instance = new ScenePhaseCommon();

        public ScenePhase.Mask<bool> GetEqualsMask(
            IScenePhaseGetter item,
            IScenePhaseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScenePhase.Mask<bool>(false);
            ((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScenePhaseGetter item,
            IScenePhaseGetter rhs,
            ScenePhase.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.StartConditions = item.StartConditions.CollectionEqualsHelper(
                rhs.StartConditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.CompletionConditions = item.CompletionConditions.CollectionEqualsHelper(
                rhs.CompletionConditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.EditorWidth = item.EditorWidth == rhs.EditorWidth;
            ret.Flags = item.Flags == rhs.Flags;
            ret.PhaseSetParentQuestStage = EqualsMaskHelper.EqualsHelper(
                item.PhaseSetParentQuestStage,
                rhs.PhaseSetParentQuestStage,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string Print(
            IScenePhaseGetter item,
            string? name = null,
            ScenePhase.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IScenePhaseGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ScenePhase.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ScenePhase =>");
            }
            else
            {
                sb.AppendLine($"{name} (ScenePhase) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IScenePhaseGetter item,
            StructuredStringBuilder sb,
            ScenePhase.Mask<bool>? printMask = null)
        {
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.StartConditions?.Overall ?? true)
            {
                sb.AppendLine("StartConditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.StartConditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.CompletionConditions?.Overall ?? true)
            {
                sb.AppendLine("CompletionConditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.CompletionConditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.EditorWidth ?? true)
                && item.EditorWidth is {} EditorWidthItem)
            {
                sb.AppendItem(EditorWidthItem, "EditorWidth");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.PhaseSetParentQuestStage?.Overall ?? true)
                && item.PhaseSetParentQuestStage is {} PhaseSetParentQuestStageItem)
            {
                PhaseSetParentQuestStageItem?.Print(sb, "PhaseSetParentQuestStage");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScenePhaseGetter? lhs,
            IScenePhaseGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.StartConditions) ?? true))
            {
                if (!lhs.StartConditions.SequenceEqual(rhs.StartConditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ScenePhase_FieldIndex.StartConditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.CompletionConditions) ?? true))
            {
                if (!lhs.CompletionConditions.SequenceEqual(rhs.CompletionConditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ScenePhase_FieldIndex.CompletionConditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.EditorWidth) ?? true))
            {
                if (lhs.EditorWidth != rhs.EditorWidth) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.PhaseSetParentQuestStage) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PhaseSetParentQuestStage, rhs.PhaseSetParentQuestStage, out var lhsPhaseSetParentQuestStage, out var rhsPhaseSetParentQuestStage, out var isPhaseSetParentQuestStageEqual))
                {
                    if (!((SceneSetParentQuestStageCommon)((ISceneSetParentQuestStageGetter)lhsPhaseSetParentQuestStage).CommonInstance()!).Equals(lhsPhaseSetParentQuestStage, rhsPhaseSetParentQuestStage, equalsMask?.GetSubCrystal((int)ScenePhase_FieldIndex.PhaseSetParentQuestStage))) return false;
                }
                else if (!isPhaseSetParentQuestStageEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IScenePhaseGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.StartConditions);
            hash.Add(item.CompletionConditions);
            if (item.EditorWidth is {} EditorWidthitem)
            {
                hash.Add(EditorWidthitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.PhaseSetParentQuestStage is {} PhaseSetParentQuestStageitem)
            {
                hash.Add(PhaseSetParentQuestStageitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ScenePhase.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IScenePhaseGetter obj)
        {
            foreach (var item in obj.StartConditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.CompletionConditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ScenePhaseSetterTranslationCommon
    {
        public static readonly ScenePhaseSetterTranslationCommon Instance = new ScenePhaseSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IScenePhase item,
            IScenePhaseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.StartConditions) ?? true))
            {
                errorMask?.PushIndex((int)ScenePhase_FieldIndex.StartConditions);
                try
                {
                    item.StartConditions.SetTo(
                        rhs.StartConditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.CompletionConditions) ?? true))
            {
                errorMask?.PushIndex((int)ScenePhase_FieldIndex.CompletionConditions);
                try
                {
                    item.CompletionConditions.SetTo(
                        rhs.CompletionConditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.EditorWidth) ?? true))
            {
                item.EditorWidth = rhs.EditorWidth;
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)ScenePhase_FieldIndex.PhaseSetParentQuestStage) ?? true))
            {
                errorMask?.PushIndex((int)ScenePhase_FieldIndex.PhaseSetParentQuestStage);
                try
                {
                    if(rhs.PhaseSetParentQuestStage is {} rhsPhaseSetParentQuestStage)
                    {
                        item.PhaseSetParentQuestStage = rhsPhaseSetParentQuestStage.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ScenePhase_FieldIndex.PhaseSetParentQuestStage));
                    }
                    else
                    {
                        item.PhaseSetParentQuestStage = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IScenePhase item,
            IScenePhaseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public ScenePhase DeepCopy(
            IScenePhaseGetter item,
            ScenePhase.TranslationMask? copyMask = null)
        {
            ScenePhase ret = (ScenePhase)((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).GetNew();
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ScenePhase DeepCopy(
            IScenePhaseGetter item,
            out ScenePhase.ErrorMask errorMask,
            ScenePhase.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScenePhase ret = (ScenePhase)((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).GetNew();
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ScenePhase.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ScenePhase DeepCopy(
            IScenePhaseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ScenePhase ret = (ScenePhase)((ScenePhaseCommon)((IScenePhaseGetter)item).CommonInstance()!).GetNew();
            ((ScenePhaseSetterTranslationCommon)((IScenePhaseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ScenePhase
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScenePhase_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ScenePhase_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScenePhaseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ScenePhaseSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScenePhaseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScenePhaseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IScenePhaseGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IScenePhaseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class ScenePhaseBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ScenePhaseBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IScenePhaseGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, RecordTypes.HNAM)) { }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0),
                binaryType: StringBinaryType.NullTerminate);
            ScenePhaseBinaryWriteTranslation.WriteBinaryStartConditions(
                writer: writer,
                item: item);
            ScenePhaseBinaryWriteTranslation.WriteBinaryCompletionConditions(
                writer: writer,
                item: item);
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.EditorWidth,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            EnumBinaryTranslation<ScenePhase.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 2,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            if (item.PhaseSetParentQuestStage is {} PhaseSetParentQuestStageItem)
            {
                ((SceneSetParentQuestStageBinaryWriteTranslation)((IBinaryItem)PhaseSetParentQuestStageItem).BinaryWriteTranslator).Write(
                    item: PhaseSetParentQuestStageItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, RecordTypes.HNAM)) { }
        }

        public static partial void WriteBinaryStartConditionsCustom(
            MutagenWriter writer,
            IScenePhaseGetter item);

        public static void WriteBinaryStartConditions(
            MutagenWriter writer,
            IScenePhaseGetter item)
        {
            WriteBinaryStartConditionsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryCompletionConditionsCustom(
            MutagenWriter writer,
            IScenePhaseGetter item);

        public static void WriteBinaryCompletionConditions(
            MutagenWriter writer,
            IScenePhaseGetter item)
        {
            WriteBinaryCompletionConditionsCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IScenePhaseGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IScenePhaseGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ScenePhaseBinaryCreateTranslation
    {
        public static readonly ScenePhaseBinaryCreateTranslation Instance = new ScenePhaseBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IScenePhase item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.HNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue)
                    {
                        frame.ReadSubrecord();
                        return new ParseResult(default(int?), nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ScenePhase_FieldIndex.PhaseSetParentQuestStage)
                    {
                        frame.ReadSubrecord();
                        return ParseResult.Stop;
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.ReadSubrecord();
                                return new ParseResult(default(int?), nextRecordType);
                            case 1:
                                frame.ReadSubrecord();
                                return ParseResult.Stop;
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ScenePhase_FieldIndex.Name;
                }
                case RecordTypeInts.CTDA:
                {
                    ScenePhaseBinaryCreateTranslation.FillBinaryStartConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)ScenePhase_FieldIndex.StartConditions;
                }
                case RecordTypeInts.NEXT:
                {
                    ScenePhaseBinaryCreateTranslation.FillBinaryCompletionConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)ScenePhase_FieldIndex.CompletionConditions;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EditorWidth = frame.ReadUInt32();
                    return (int)ScenePhase_FieldIndex.EditorWidth;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<ScenePhase.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)ScenePhase_FieldIndex.Flags;
                }
                case RecordTypeInts.SCQS:
                {
                    item.PhaseSetParentQuestStage = Mutagen.Bethesda.Fallout4.SceneSetParentQuestStage.CreateFromBinary(frame: frame);
                    return (int)ScenePhase_FieldIndex.PhaseSetParentQuestStage;
                }
                default:
                    return ParseResult.Stop;
            }
        }

        public static partial void FillBinaryStartConditionsCustom(
            MutagenFrame frame,
            IScenePhase item,
            PreviousParse lastParsed);

        public static partial void FillBinaryCompletionConditionsCustom(
            MutagenFrame frame,
            IScenePhase item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ScenePhaseBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScenePhaseGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ScenePhaseBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class ScenePhaseBinaryOverlay :
        PluginBinaryOverlay,
        IScenePhaseGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScenePhase_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ScenePhase_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScenePhaseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScenePhaseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScenePhaseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IScenePhaseGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IScenePhaseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ScenePhaseCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScenePhaseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ScenePhaseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region StartConditions
        partial void StartConditionsCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        #region CompletionConditions
        partial void CompletionConditionsCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        #region EditorWidth
        private int? _EditorWidthLocation;
        public UInt32? EditorWidth => _EditorWidthLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EditorWidthLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public ScenePhase.Flag? Flags => _FlagsLocation.HasValue ? (ScenePhase.Flag)BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(ScenePhase.Flag?);
        #endregion
        #region PhaseSetParentQuestStage
        private RangeInt32? _PhaseSetParentQuestStageLocation;
        public ISceneSetParentQuestStageGetter? PhaseSetParentQuestStage => _PhaseSetParentQuestStageLocation.HasValue ? SceneSetParentQuestStageBinaryOverlay.SceneSetParentQuestStageFactory(_recordData.Slice(_PhaseSetParentQuestStageLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ScenePhaseBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IScenePhaseGetter ScenePhaseFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ScenePhaseBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IScenePhaseGetter ScenePhaseFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ScenePhaseFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.HNAM:
                {
                    if (!lastParsed.ParsedIndex.HasValue)
                    {
                        stream.ReadSubrecord();
                        return new ParseResult(default(int?), type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ScenePhase_FieldIndex.PhaseSetParentQuestStage)
                    {
                        stream.ReadSubrecord();
                        return ParseResult.Stop;
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                stream.ReadSubrecord();
                                return new ParseResult(default(int?), type);
                            }
                            case 1:
                            {
                                stream.ReadSubrecord();
                                return ParseResult.Stop;
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.NAM0:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)ScenePhase_FieldIndex.Name;
                }
                case RecordTypeInts.CTDA:
                {
                    StartConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)ScenePhase_FieldIndex.StartConditions;
                }
                case RecordTypeInts.NEXT:
                {
                    CompletionConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)ScenePhase_FieldIndex.CompletionConditions;
                }
                case RecordTypeInts.WNAM:
                {
                    _EditorWidthLocation = (stream.Position - offset);
                    return (int)ScenePhase_FieldIndex.EditorWidth;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)ScenePhase_FieldIndex.Flags;
                }
                case RecordTypeInts.SCQS:
                {
                    _PhaseSetParentQuestStageLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ScenePhase_FieldIndex.PhaseSetParentQuestStage;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ScenePhaseMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IScenePhaseGetter rhs) return false;
            return ((ScenePhaseCommon)((IScenePhaseGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IScenePhaseGetter? obj)
        {
            return ((ScenePhaseCommon)((IScenePhaseGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ScenePhaseCommon)((IScenePhaseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

