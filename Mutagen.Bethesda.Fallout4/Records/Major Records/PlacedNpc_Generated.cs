/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class PlacedNpc :
        Fallout4MajorRecord,
        IEquatable<IPlacedNpcGetter>,
        ILoquiObjectSetter<PlacedNpc>,
        IPlacedNpcInternal
    {
        #region Ctor
        protected PlacedNpc()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IPlacedNpcGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region Base
        private readonly IFormLinkNullable<INpcGetter> _Base = new FormLinkNullable<INpcGetter>();
        public IFormLinkNullable<INpcGetter> Base
        {
            get => _Base;
            set => _Base.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<INpcGetter> IPlacedNpcGetter.Base => this.Base;
        #endregion
        #region EncounterZone
        private readonly IFormLinkNullable<IEncounterZoneGetter> _EncounterZone = new FormLinkNullable<IEncounterZoneGetter>();
        public IFormLinkNullable<IEncounterZoneGetter> EncounterZone
        {
            get => _EncounterZone;
            set => _EncounterZone.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEncounterZoneGetter> IPlacedNpcGetter.EncounterZone => this.EncounterZone;
        #endregion
        #region RagdollData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RagdollData>? _RagdollData;
        public ExtendedList<RagdollData>? RagdollData
        {
            get => this._RagdollData;
            set => this._RagdollData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRagdollDataGetter>? IPlacedNpcGetter.RagdollData => _RagdollData;
        #endregion

        #endregion
        #region RagdollBipedRotation
        public P3Float? RagdollBipedRotation { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P3Float? IPlacedNpcGetter.RagdollBipedRotation => this.RagdollBipedRotation;
        #endregion
        #region Patrol
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Patrol? _Patrol;
        public Patrol? Patrol
        {
            get => _Patrol;
            set => _Patrol = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPatrolGetter? IPlacedNpcGetter.Patrol => this.Patrol;
        #endregion
        #region LevelModifier
        public Level? LevelModifier { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Level? IPlacedNpcGetter.LevelModifier => this.LevelModifier;
        #endregion
        #region Count
        public Int32? Count { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedNpcGetter.Count => this.Count;
        #endregion
        #region Radius
        public Single? Radius { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedNpcGetter.Radius => this.Radius;
        #endregion
        #region Health
        public Percent? Health { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Percent? IPlacedNpcGetter.Health => this.Health;
        #endregion
        #region LinkedReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LinkedReferences> _LinkedReferences = new ExtendedList<LinkedReferences>();
        public ExtendedList<LinkedReferences> LinkedReferences
        {
            get => this._LinkedReferences;
            init => this._LinkedReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILinkedReferencesGetter> IPlacedNpcGetter.LinkedReferences => _LinkedReferences;
        #endregion

        #endregion
        #region ActivateParents
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActivateParents? _ActivateParents;
        public ActivateParents? ActivateParents
        {
            get => _ActivateParents;
            set => _ActivateParents = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IActivateParentsGetter? IPlacedNpcGetter.ActivateParents => this.ActivateParents;
        #endregion
        #region IsActivationPoint
        public Boolean IsActivationPoint { get; set; } = default(Boolean);
        #endregion
        #region IsLinkedRefTransient
        public Boolean IsLinkedRefTransient { get; set; } = default(Boolean);
        #endregion
        #region ReferenceGroup
        private readonly IFormLinkNullable<IReferenceGroupGetter> _ReferenceGroup = new FormLinkNullable<IReferenceGroupGetter>();
        public IFormLinkNullable<IReferenceGroupGetter> ReferenceGroup
        {
            get => _ReferenceGroup;
            set => _ReferenceGroup.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IReferenceGroupGetter> IPlacedNpcGetter.ReferenceGroup => this.ReferenceGroup;
        #endregion
        #region Layer
        private readonly IFormLinkNullable<ILayerGetter> _Layer = new FormLinkNullable<ILayerGetter>();
        public IFormLinkNullable<ILayerGetter> Layer
        {
            get => _Layer;
            set => _Layer.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILayerGetter> IPlacedNpcGetter.Layer => this.Layer;
        #endregion
        #region MaterialSwap
        private readonly IFormLinkNullable<IMaterialSwapGetter> _MaterialSwap = new FormLinkNullable<IMaterialSwapGetter>();
        public IFormLinkNullable<IMaterialSwapGetter> MaterialSwap
        {
            get => _MaterialSwap;
            set => _MaterialSwap.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMaterialSwapGetter> IPlacedNpcGetter.MaterialSwap => this.MaterialSwap;
        #endregion
        #region PersistentLocation
        private readonly IFormLinkNullable<ILocationGetter> _PersistentLocation = new FormLinkNullable<ILocationGetter>();
        public IFormLinkNullable<ILocationGetter> PersistentLocation
        {
            get => _PersistentLocation;
            set => _PersistentLocation.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationGetter> IPlacedNpcGetter.PersistentLocation => this.PersistentLocation;
        #endregion
        #region LocationReference
        private readonly IFormLinkNullable<ILocationRecordGetter> _LocationReference = new FormLinkNullable<ILocationRecordGetter>();
        public IFormLinkNullable<ILocationRecordGetter> LocationReference
        {
            get => _LocationReference;
            set => _LocationReference.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationRecordGetter> IPlacedNpcGetter.LocationReference => this.LocationReference;
        #endregion
        #region LocationRefTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? _LocationRefTypes;
        public ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? LocationRefTypes
        {
            get => this._LocationRefTypes;
            set => this._LocationRefTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? IPlacedNpcGetter.LocationRefTypes => _LocationRefTypes;
        #endregion

        #endregion
        #region IsIgnoredBySandbox
        public Boolean IsIgnoredBySandbox { get; set; } = default(Boolean);
        #endregion
        #region SplineConnections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<SplineConnection> _SplineConnections = new ExtendedList<SplineConnection>();
        public ExtendedList<SplineConnection> SplineConnections
        {
            get => this._SplineConnections;
            init => this._SplineConnections = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISplineConnectionGetter> IPlacedNpcGetter.SplineConnections => _SplineConnections;
        #endregion

        #endregion
        #region HeadTrackingWeight
        public Single? HeadTrackingWeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedNpcGetter.HeadTrackingWeight => this.HeadTrackingWeight;
        #endregion
        #region FavorCost
        public Single? FavorCost { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedNpcGetter.FavorCost => this.FavorCost;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IPlacedNpcGetter.EnableParent => this.EnableParent;
        #endregion
        #region Ownership
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Ownership? _Ownership;
        public Ownership? Ownership
        {
            get => _Ownership;
            set => _Ownership = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOwnershipGetter? IPlacedNpcGetter.Ownership => this.Ownership;
        #endregion
        #region FactionRank
        public Int32? FactionRank { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedNpcGetter.FactionRank => this.FactionRank;
        #endregion
        #region Emittance
        private readonly IFormLinkNullable<IEmittanceGetter> _Emittance = new FormLinkNullable<IEmittanceGetter>();
        public IFormLinkNullable<IEmittanceGetter> Emittance
        {
            get => _Emittance;
            set => _Emittance.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEmittanceGetter> IPlacedNpcGetter.Emittance => this.Emittance;
        #endregion
        #region MultiboundReference
        private readonly IFormLinkNullable<ILinkedReferenceGetter> _MultiboundReference = new FormLinkNullable<ILinkedReferenceGetter>();
        public IFormLinkNullable<ILinkedReferenceGetter> MultiboundReference
        {
            get => _MultiboundReference;
            set => _MultiboundReference.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILinkedReferenceGetter> IPlacedNpcGetter.MultiboundReference => this.MultiboundReference;
        #endregion
        #region IsIgnoredBySandbox2
        public Boolean IsIgnoredBySandbox2 { get; set; } = default(Boolean);
        #endregion
        #region Scale
        public Single? Scale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedNpcGetter.Scale => this.Scale;
        #endregion
        #region Position
        public P3Float Position { get; set; } = default(P3Float);
        #endregion
        #region Rotation
        public P3Float Rotation { get; set; } = default(P3Float);
        #endregion
        #region Comments
        public String? Comments { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IPlacedNpcGetter.Comments => this.Comments;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedNpcMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.Base = initialValue;
                this.EncounterZone = initialValue;
                this.RagdollData = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RagdollData.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RagdollData.Mask<TItem>?>>());
                this.RagdollBipedRotation = initialValue;
                this.Patrol = new MaskItem<TItem, Patrol.Mask<TItem>?>(initialValue, new Patrol.Mask<TItem>(initialValue));
                this.LevelModifier = initialValue;
                this.Count = initialValue;
                this.Radius = initialValue;
                this.Health = initialValue;
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(initialValue, new ActivateParents.Mask<TItem>(initialValue));
                this.IsActivationPoint = initialValue;
                this.IsLinkedRefTransient = initialValue;
                this.ReferenceGroup = initialValue;
                this.Layer = initialValue;
                this.MaterialSwap = initialValue;
                this.PersistentLocation = initialValue;
                this.LocationReference = initialValue;
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.IsIgnoredBySandbox = initialValue;
                this.SplineConnections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SplineConnection.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, SplineConnection.Mask<TItem>?>>());
                this.HeadTrackingWeight = initialValue;
                this.FavorCost = initialValue;
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(initialValue, new EnableParent.Mask<TItem>(initialValue));
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(initialValue, new Ownership.Mask<TItem>(initialValue));
                this.FactionRank = initialValue;
                this.Emittance = initialValue;
                this.MultiboundReference = initialValue;
                this.IsIgnoredBySandbox2 = initialValue;
                this.Scale = initialValue;
                this.Position = initialValue;
                this.Rotation = initialValue;
                this.Comments = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem Base,
                TItem EncounterZone,
                TItem RagdollData,
                TItem RagdollBipedRotation,
                TItem Patrol,
                TItem LevelModifier,
                TItem Count,
                TItem Radius,
                TItem Health,
                TItem LinkedReferences,
                TItem ActivateParents,
                TItem IsActivationPoint,
                TItem IsLinkedRefTransient,
                TItem ReferenceGroup,
                TItem Layer,
                TItem MaterialSwap,
                TItem PersistentLocation,
                TItem LocationReference,
                TItem LocationRefTypes,
                TItem IsIgnoredBySandbox,
                TItem SplineConnections,
                TItem HeadTrackingWeight,
                TItem FavorCost,
                TItem EnableParent,
                TItem Ownership,
                TItem FactionRank,
                TItem Emittance,
                TItem MultiboundReference,
                TItem IsIgnoredBySandbox2,
                TItem Scale,
                TItem Position,
                TItem Rotation,
                TItem Comments)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Base = Base;
                this.EncounterZone = EncounterZone;
                this.RagdollData = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RagdollData.Mask<TItem>?>>?>(RagdollData, Enumerable.Empty<MaskItemIndexed<TItem, RagdollData.Mask<TItem>?>>());
                this.RagdollBipedRotation = RagdollBipedRotation;
                this.Patrol = new MaskItem<TItem, Patrol.Mask<TItem>?>(Patrol, new Patrol.Mask<TItem>(Patrol));
                this.LevelModifier = LevelModifier;
                this.Count = Count;
                this.Radius = Radius;
                this.Health = Health;
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(LinkedReferences, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(ActivateParents, new ActivateParents.Mask<TItem>(ActivateParents));
                this.IsActivationPoint = IsActivationPoint;
                this.IsLinkedRefTransient = IsLinkedRefTransient;
                this.ReferenceGroup = ReferenceGroup;
                this.Layer = Layer;
                this.MaterialSwap = MaterialSwap;
                this.PersistentLocation = PersistentLocation;
                this.LocationReference = LocationReference;
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LocationRefTypes, Enumerable.Empty<(int Index, TItem Value)>());
                this.IsIgnoredBySandbox = IsIgnoredBySandbox;
                this.SplineConnections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SplineConnection.Mask<TItem>?>>?>(SplineConnections, Enumerable.Empty<MaskItemIndexed<TItem, SplineConnection.Mask<TItem>?>>());
                this.HeadTrackingWeight = HeadTrackingWeight;
                this.FavorCost = FavorCost;
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(EnableParent, new EnableParent.Mask<TItem>(EnableParent));
                this.Ownership = new MaskItem<TItem, Ownership.Mask<TItem>?>(Ownership, new Ownership.Mask<TItem>(Ownership));
                this.FactionRank = FactionRank;
                this.Emittance = Emittance;
                this.MultiboundReference = MultiboundReference;
                this.IsIgnoredBySandbox2 = IsIgnoredBySandbox2;
                this.Scale = Scale;
                this.Position = Position;
                this.Rotation = Rotation;
                this.Comments = Comments;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Base;
            public TItem EncounterZone;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RagdollData.Mask<TItem>?>>?>? RagdollData;
            public TItem RagdollBipedRotation;
            public MaskItem<TItem, Patrol.Mask<TItem>?>? Patrol { get; set; }
            public TItem LevelModifier;
            public TItem Count;
            public TItem Radius;
            public TItem Health;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>? LinkedReferences;
            public MaskItem<TItem, ActivateParents.Mask<TItem>?>? ActivateParents { get; set; }
            public TItem IsActivationPoint;
            public TItem IsLinkedRefTransient;
            public TItem ReferenceGroup;
            public TItem Layer;
            public TItem MaterialSwap;
            public TItem PersistentLocation;
            public TItem LocationReference;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LocationRefTypes;
            public TItem IsIgnoredBySandbox;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SplineConnection.Mask<TItem>?>>?>? SplineConnections;
            public TItem HeadTrackingWeight;
            public TItem FavorCost;
            public MaskItem<TItem, EnableParent.Mask<TItem>?>? EnableParent { get; set; }
            public MaskItem<TItem, Ownership.Mask<TItem>?>? Ownership { get; set; }
            public TItem FactionRank;
            public TItem Emittance;
            public TItem MultiboundReference;
            public TItem IsIgnoredBySandbox2;
            public TItem Scale;
            public TItem Position;
            public TItem Rotation;
            public TItem Comments;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Base, rhs.Base)) return false;
                if (!object.Equals(this.EncounterZone, rhs.EncounterZone)) return false;
                if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
                if (!object.Equals(this.RagdollBipedRotation, rhs.RagdollBipedRotation)) return false;
                if (!object.Equals(this.Patrol, rhs.Patrol)) return false;
                if (!object.Equals(this.LevelModifier, rhs.LevelModifier)) return false;
                if (!object.Equals(this.Count, rhs.Count)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.Health, rhs.Health)) return false;
                if (!object.Equals(this.LinkedReferences, rhs.LinkedReferences)) return false;
                if (!object.Equals(this.ActivateParents, rhs.ActivateParents)) return false;
                if (!object.Equals(this.IsActivationPoint, rhs.IsActivationPoint)) return false;
                if (!object.Equals(this.IsLinkedRefTransient, rhs.IsLinkedRefTransient)) return false;
                if (!object.Equals(this.ReferenceGroup, rhs.ReferenceGroup)) return false;
                if (!object.Equals(this.Layer, rhs.Layer)) return false;
                if (!object.Equals(this.MaterialSwap, rhs.MaterialSwap)) return false;
                if (!object.Equals(this.PersistentLocation, rhs.PersistentLocation)) return false;
                if (!object.Equals(this.LocationReference, rhs.LocationReference)) return false;
                if (!object.Equals(this.LocationRefTypes, rhs.LocationRefTypes)) return false;
                if (!object.Equals(this.IsIgnoredBySandbox, rhs.IsIgnoredBySandbox)) return false;
                if (!object.Equals(this.SplineConnections, rhs.SplineConnections)) return false;
                if (!object.Equals(this.HeadTrackingWeight, rhs.HeadTrackingWeight)) return false;
                if (!object.Equals(this.FavorCost, rhs.FavorCost)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.Ownership, rhs.Ownership)) return false;
                if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
                if (!object.Equals(this.Emittance, rhs.Emittance)) return false;
                if (!object.Equals(this.MultiboundReference, rhs.MultiboundReference)) return false;
                if (!object.Equals(this.IsIgnoredBySandbox2, rhs.IsIgnoredBySandbox2)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.Position, rhs.Position)) return false;
                if (!object.Equals(this.Rotation, rhs.Rotation)) return false;
                if (!object.Equals(this.Comments, rhs.Comments)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Base);
                hash.Add(this.EncounterZone);
                hash.Add(this.RagdollData);
                hash.Add(this.RagdollBipedRotation);
                hash.Add(this.Patrol);
                hash.Add(this.LevelModifier);
                hash.Add(this.Count);
                hash.Add(this.Radius);
                hash.Add(this.Health);
                hash.Add(this.LinkedReferences);
                hash.Add(this.ActivateParents);
                hash.Add(this.IsActivationPoint);
                hash.Add(this.IsLinkedRefTransient);
                hash.Add(this.ReferenceGroup);
                hash.Add(this.Layer);
                hash.Add(this.MaterialSwap);
                hash.Add(this.PersistentLocation);
                hash.Add(this.LocationReference);
                hash.Add(this.LocationRefTypes);
                hash.Add(this.IsIgnoredBySandbox);
                hash.Add(this.SplineConnections);
                hash.Add(this.HeadTrackingWeight);
                hash.Add(this.FavorCost);
                hash.Add(this.EnableParent);
                hash.Add(this.Ownership);
                hash.Add(this.FactionRank);
                hash.Add(this.Emittance);
                hash.Add(this.MultiboundReference);
                hash.Add(this.IsIgnoredBySandbox2);
                hash.Add(this.Scale);
                hash.Add(this.Position);
                hash.Add(this.Rotation);
                hash.Add(this.Comments);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Base)) return false;
                if (!eval(this.EncounterZone)) return false;
                if (this.RagdollData != null)
                {
                    if (!eval(this.RagdollData.Overall)) return false;
                    if (this.RagdollData.Specific != null)
                    {
                        foreach (var item in this.RagdollData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.RagdollBipedRotation)) return false;
                if (Patrol != null)
                {
                    if (!eval(this.Patrol.Overall)) return false;
                    if (this.Patrol.Specific != null && !this.Patrol.Specific.All(eval)) return false;
                }
                if (!eval(this.LevelModifier)) return false;
                if (!eval(this.Count)) return false;
                if (!eval(this.Radius)) return false;
                if (!eval(this.Health)) return false;
                if (this.LinkedReferences != null)
                {
                    if (!eval(this.LinkedReferences.Overall)) return false;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (ActivateParents != null)
                {
                    if (!eval(this.ActivateParents.Overall)) return false;
                    if (this.ActivateParents.Specific != null && !this.ActivateParents.Specific.All(eval)) return false;
                }
                if (!eval(this.IsActivationPoint)) return false;
                if (!eval(this.IsLinkedRefTransient)) return false;
                if (!eval(this.ReferenceGroup)) return false;
                if (!eval(this.Layer)) return false;
                if (!eval(this.MaterialSwap)) return false;
                if (!eval(this.PersistentLocation)) return false;
                if (!eval(this.LocationReference)) return false;
                if (this.LocationRefTypes != null)
                {
                    if (!eval(this.LocationRefTypes.Overall)) return false;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.IsIgnoredBySandbox)) return false;
                if (this.SplineConnections != null)
                {
                    if (!eval(this.SplineConnections.Overall)) return false;
                    if (this.SplineConnections.Specific != null)
                    {
                        foreach (var item in this.SplineConnections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.HeadTrackingWeight)) return false;
                if (!eval(this.FavorCost)) return false;
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.All(eval)) return false;
                }
                if (Ownership != null)
                {
                    if (!eval(this.Ownership.Overall)) return false;
                    if (this.Ownership.Specific != null && !this.Ownership.Specific.All(eval)) return false;
                }
                if (!eval(this.FactionRank)) return false;
                if (!eval(this.Emittance)) return false;
                if (!eval(this.MultiboundReference)) return false;
                if (!eval(this.IsIgnoredBySandbox2)) return false;
                if (!eval(this.Scale)) return false;
                if (!eval(this.Position)) return false;
                if (!eval(this.Rotation)) return false;
                if (!eval(this.Comments)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Base)) return true;
                if (eval(this.EncounterZone)) return true;
                if (this.RagdollData != null)
                {
                    if (eval(this.RagdollData.Overall)) return true;
                    if (this.RagdollData.Specific != null)
                    {
                        foreach (var item in this.RagdollData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.RagdollBipedRotation)) return true;
                if (Patrol != null)
                {
                    if (eval(this.Patrol.Overall)) return true;
                    if (this.Patrol.Specific != null && this.Patrol.Specific.Any(eval)) return true;
                }
                if (eval(this.LevelModifier)) return true;
                if (eval(this.Count)) return true;
                if (eval(this.Radius)) return true;
                if (eval(this.Health)) return true;
                if (this.LinkedReferences != null)
                {
                    if (eval(this.LinkedReferences.Overall)) return true;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (ActivateParents != null)
                {
                    if (eval(this.ActivateParents.Overall)) return true;
                    if (this.ActivateParents.Specific != null && this.ActivateParents.Specific.Any(eval)) return true;
                }
                if (eval(this.IsActivationPoint)) return true;
                if (eval(this.IsLinkedRefTransient)) return true;
                if (eval(this.ReferenceGroup)) return true;
                if (eval(this.Layer)) return true;
                if (eval(this.MaterialSwap)) return true;
                if (eval(this.PersistentLocation)) return true;
                if (eval(this.LocationReference)) return true;
                if (this.LocationRefTypes != null)
                {
                    if (eval(this.LocationRefTypes.Overall)) return true;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.IsIgnoredBySandbox)) return true;
                if (this.SplineConnections != null)
                {
                    if (eval(this.SplineConnections.Overall)) return true;
                    if (this.SplineConnections.Specific != null)
                    {
                        foreach (var item in this.SplineConnections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.HeadTrackingWeight)) return true;
                if (eval(this.FavorCost)) return true;
                if (EnableParent != null)
                {
                    if (eval(this.EnableParent.Overall)) return true;
                    if (this.EnableParent.Specific != null && this.EnableParent.Specific.Any(eval)) return true;
                }
                if (Ownership != null)
                {
                    if (eval(this.Ownership.Overall)) return true;
                    if (this.Ownership.Specific != null && this.Ownership.Specific.Any(eval)) return true;
                }
                if (eval(this.FactionRank)) return true;
                if (eval(this.Emittance)) return true;
                if (eval(this.MultiboundReference)) return true;
                if (eval(this.IsIgnoredBySandbox2)) return true;
                if (eval(this.Scale)) return true;
                if (eval(this.Position)) return true;
                if (eval(this.Rotation)) return true;
                if (eval(this.Comments)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedNpc.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Base = eval(this.Base);
                obj.EncounterZone = eval(this.EncounterZone);
                if (RagdollData != null)
                {
                    obj.RagdollData = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RagdollData.Mask<R>?>>?>(eval(this.RagdollData.Overall), Enumerable.Empty<MaskItemIndexed<R, RagdollData.Mask<R>?>>());
                    if (RagdollData.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RagdollData.Mask<R>?>>();
                        obj.RagdollData.Specific = l;
                        foreach (var item in RagdollData.Specific)
                        {
                            MaskItemIndexed<R, RagdollData.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, RagdollData.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.RagdollBipedRotation = eval(this.RagdollBipedRotation);
                obj.Patrol = this.Patrol == null ? null : new MaskItem<R, Patrol.Mask<R>?>(eval(this.Patrol.Overall), this.Patrol.Specific?.Translate(eval));
                obj.LevelModifier = eval(this.LevelModifier);
                obj.Count = eval(this.Count);
                obj.Radius = eval(this.Radius);
                obj.Health = eval(this.Health);
                if (LinkedReferences != null)
                {
                    obj.LinkedReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>?>(eval(this.LinkedReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>());
                    if (LinkedReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>();
                        obj.LinkedReferences.Specific = l;
                        foreach (var item in LinkedReferences.Specific)
                        {
                            MaskItemIndexed<R, LinkedReferences.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LinkedReferences.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ActivateParents = this.ActivateParents == null ? null : new MaskItem<R, ActivateParents.Mask<R>?>(eval(this.ActivateParents.Overall), this.ActivateParents.Specific?.Translate(eval));
                obj.IsActivationPoint = eval(this.IsActivationPoint);
                obj.IsLinkedRefTransient = eval(this.IsLinkedRefTransient);
                obj.ReferenceGroup = eval(this.ReferenceGroup);
                obj.Layer = eval(this.Layer);
                obj.MaterialSwap = eval(this.MaterialSwap);
                obj.PersistentLocation = eval(this.PersistentLocation);
                obj.LocationReference = eval(this.LocationReference);
                if (LocationRefTypes != null)
                {
                    obj.LocationRefTypes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LocationRefTypes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LocationRefTypes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LocationRefTypes.Specific = l;
                        foreach (var item in LocationRefTypes.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.IsIgnoredBySandbox = eval(this.IsIgnoredBySandbox);
                if (SplineConnections != null)
                {
                    obj.SplineConnections = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SplineConnection.Mask<R>?>>?>(eval(this.SplineConnections.Overall), Enumerable.Empty<MaskItemIndexed<R, SplineConnection.Mask<R>?>>());
                    if (SplineConnections.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, SplineConnection.Mask<R>?>>();
                        obj.SplineConnections.Specific = l;
                        foreach (var item in SplineConnections.Specific)
                        {
                            MaskItemIndexed<R, SplineConnection.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, SplineConnection.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.HeadTrackingWeight = eval(this.HeadTrackingWeight);
                obj.FavorCost = eval(this.FavorCost);
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                obj.Ownership = this.Ownership == null ? null : new MaskItem<R, Ownership.Mask<R>?>(eval(this.Ownership.Overall), this.Ownership.Specific?.Translate(eval));
                obj.FactionRank = eval(this.FactionRank);
                obj.Emittance = eval(this.Emittance);
                obj.MultiboundReference = eval(this.MultiboundReference);
                obj.IsIgnoredBySandbox2 = eval(this.IsIgnoredBySandbox2);
                obj.Scale = eval(this.Scale);
                obj.Position = eval(this.Position);
                obj.Rotation = eval(this.Rotation);
                obj.Comments = eval(this.Comments);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlacedNpc.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlacedNpc.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlacedNpc.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.Base ?? true)
                    {
                        sb.AppendItem(Base, "Base");
                    }
                    if (printMask?.EncounterZone ?? true)
                    {
                        sb.AppendItem(EncounterZone, "EncounterZone");
                    }
                    if ((printMask?.RagdollData?.Overall ?? true)
                        && RagdollData is {} RagdollDataItem)
                    {
                        sb.AppendLine("RagdollData =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RagdollDataItem.Overall);
                            if (RagdollDataItem.Specific != null)
                            {
                                foreach (var subItem in RagdollDataItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.RagdollBipedRotation ?? true)
                    {
                        sb.AppendItem(RagdollBipedRotation, "RagdollBipedRotation");
                    }
                    if (printMask?.Patrol?.Overall ?? true)
                    {
                        Patrol?.Print(sb);
                    }
                    if (printMask?.LevelModifier ?? true)
                    {
                        sb.AppendItem(LevelModifier, "LevelModifier");
                    }
                    if (printMask?.Count ?? true)
                    {
                        sb.AppendItem(Count, "Count");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        sb.AppendItem(Radius, "Radius");
                    }
                    if (printMask?.Health ?? true)
                    {
                        sb.AppendItem(Health, "Health");
                    }
                    if ((printMask?.LinkedReferences?.Overall ?? true)
                        && LinkedReferences is {} LinkedReferencesItem)
                    {
                        sb.AppendLine("LinkedReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LinkedReferencesItem.Overall);
                            if (LinkedReferencesItem.Specific != null)
                            {
                                foreach (var subItem in LinkedReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ActivateParents?.Overall ?? true)
                    {
                        ActivateParents?.Print(sb);
                    }
                    if (printMask?.IsActivationPoint ?? true)
                    {
                        sb.AppendItem(IsActivationPoint, "IsActivationPoint");
                    }
                    if (printMask?.IsLinkedRefTransient ?? true)
                    {
                        sb.AppendItem(IsLinkedRefTransient, "IsLinkedRefTransient");
                    }
                    if (printMask?.ReferenceGroup ?? true)
                    {
                        sb.AppendItem(ReferenceGroup, "ReferenceGroup");
                    }
                    if (printMask?.Layer ?? true)
                    {
                        sb.AppendItem(Layer, "Layer");
                    }
                    if (printMask?.MaterialSwap ?? true)
                    {
                        sb.AppendItem(MaterialSwap, "MaterialSwap");
                    }
                    if (printMask?.PersistentLocation ?? true)
                    {
                        sb.AppendItem(PersistentLocation, "PersistentLocation");
                    }
                    if (printMask?.LocationReference ?? true)
                    {
                        sb.AppendItem(LocationReference, "LocationReference");
                    }
                    if ((printMask?.LocationRefTypes?.Overall ?? true)
                        && LocationRefTypes is {} LocationRefTypesItem)
                    {
                        sb.AppendLine("LocationRefTypes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LocationRefTypesItem.Overall);
                            if (LocationRefTypesItem.Specific != null)
                            {
                                foreach (var subItem in LocationRefTypesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.IsIgnoredBySandbox ?? true)
                    {
                        sb.AppendItem(IsIgnoredBySandbox, "IsIgnoredBySandbox");
                    }
                    if ((printMask?.SplineConnections?.Overall ?? true)
                        && SplineConnections is {} SplineConnectionsItem)
                    {
                        sb.AppendLine("SplineConnections =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SplineConnectionsItem.Overall);
                            if (SplineConnectionsItem.Specific != null)
                            {
                                foreach (var subItem in SplineConnectionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.HeadTrackingWeight ?? true)
                    {
                        sb.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                    }
                    if (printMask?.FavorCost ?? true)
                    {
                        sb.AppendItem(FavorCost, "FavorCost");
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.Print(sb);
                    }
                    if (printMask?.Ownership?.Overall ?? true)
                    {
                        Ownership?.Print(sb);
                    }
                    if (printMask?.FactionRank ?? true)
                    {
                        sb.AppendItem(FactionRank, "FactionRank");
                    }
                    if (printMask?.Emittance ?? true)
                    {
                        sb.AppendItem(Emittance, "Emittance");
                    }
                    if (printMask?.MultiboundReference ?? true)
                    {
                        sb.AppendItem(MultiboundReference, "MultiboundReference");
                    }
                    if (printMask?.IsIgnoredBySandbox2 ?? true)
                    {
                        sb.AppendItem(IsIgnoredBySandbox2, "IsIgnoredBySandbox2");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        sb.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.Position ?? true)
                    {
                        sb.AppendItem(Position, "Position");
                    }
                    if (printMask?.Rotation ?? true)
                    {
                        sb.AppendItem(Rotation, "Rotation");
                    }
                    if (printMask?.Comments ?? true)
                    {
                        sb.AppendItem(Comments, "Comments");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Base;
            public Exception? EncounterZone;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RagdollData.ErrorMask?>>?>? RagdollData;
            public Exception? RagdollBipedRotation;
            public MaskItem<Exception?, Patrol.ErrorMask?>? Patrol;
            public Exception? LevelModifier;
            public Exception? Count;
            public Exception? Radius;
            public Exception? Health;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>? LinkedReferences;
            public MaskItem<Exception?, ActivateParents.ErrorMask?>? ActivateParents;
            public Exception? IsActivationPoint;
            public Exception? IsLinkedRefTransient;
            public Exception? ReferenceGroup;
            public Exception? Layer;
            public Exception? MaterialSwap;
            public Exception? PersistentLocation;
            public Exception? LocationReference;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LocationRefTypes;
            public Exception? IsIgnoredBySandbox;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SplineConnection.ErrorMask?>>?>? SplineConnections;
            public Exception? HeadTrackingWeight;
            public Exception? FavorCost;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public MaskItem<Exception?, Ownership.ErrorMask?>? Ownership;
            public Exception? FactionRank;
            public Exception? Emittance;
            public Exception? MultiboundReference;
            public Exception? IsIgnoredBySandbox2;
            public Exception? Scale;
            public Exception? Position;
            public Exception? Rotation;
            public Exception? Comments;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
                switch (enu)
                {
                    case PlacedNpc_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case PlacedNpc_FieldIndex.Base:
                        return Base;
                    case PlacedNpc_FieldIndex.EncounterZone:
                        return EncounterZone;
                    case PlacedNpc_FieldIndex.RagdollData:
                        return RagdollData;
                    case PlacedNpc_FieldIndex.RagdollBipedRotation:
                        return RagdollBipedRotation;
                    case PlacedNpc_FieldIndex.Patrol:
                        return Patrol;
                    case PlacedNpc_FieldIndex.LevelModifier:
                        return LevelModifier;
                    case PlacedNpc_FieldIndex.Count:
                        return Count;
                    case PlacedNpc_FieldIndex.Radius:
                        return Radius;
                    case PlacedNpc_FieldIndex.Health:
                        return Health;
                    case PlacedNpc_FieldIndex.LinkedReferences:
                        return LinkedReferences;
                    case PlacedNpc_FieldIndex.ActivateParents:
                        return ActivateParents;
                    case PlacedNpc_FieldIndex.IsActivationPoint:
                        return IsActivationPoint;
                    case PlacedNpc_FieldIndex.IsLinkedRefTransient:
                        return IsLinkedRefTransient;
                    case PlacedNpc_FieldIndex.ReferenceGroup:
                        return ReferenceGroup;
                    case PlacedNpc_FieldIndex.Layer:
                        return Layer;
                    case PlacedNpc_FieldIndex.MaterialSwap:
                        return MaterialSwap;
                    case PlacedNpc_FieldIndex.PersistentLocation:
                        return PersistentLocation;
                    case PlacedNpc_FieldIndex.LocationReference:
                        return LocationReference;
                    case PlacedNpc_FieldIndex.LocationRefTypes:
                        return LocationRefTypes;
                    case PlacedNpc_FieldIndex.IsIgnoredBySandbox:
                        return IsIgnoredBySandbox;
                    case PlacedNpc_FieldIndex.SplineConnections:
                        return SplineConnections;
                    case PlacedNpc_FieldIndex.HeadTrackingWeight:
                        return HeadTrackingWeight;
                    case PlacedNpc_FieldIndex.FavorCost:
                        return FavorCost;
                    case PlacedNpc_FieldIndex.EnableParent:
                        return EnableParent;
                    case PlacedNpc_FieldIndex.Ownership:
                        return Ownership;
                    case PlacedNpc_FieldIndex.FactionRank:
                        return FactionRank;
                    case PlacedNpc_FieldIndex.Emittance:
                        return Emittance;
                    case PlacedNpc_FieldIndex.MultiboundReference:
                        return MultiboundReference;
                    case PlacedNpc_FieldIndex.IsIgnoredBySandbox2:
                        return IsIgnoredBySandbox2;
                    case PlacedNpc_FieldIndex.Scale:
                        return Scale;
                    case PlacedNpc_FieldIndex.Position:
                        return Position;
                    case PlacedNpc_FieldIndex.Rotation:
                        return Rotation;
                    case PlacedNpc_FieldIndex.Comments:
                        return Comments;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
                switch (enu)
                {
                    case PlacedNpc_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.Base:
                        this.Base = ex;
                        break;
                    case PlacedNpc_FieldIndex.EncounterZone:
                        this.EncounterZone = ex;
                        break;
                    case PlacedNpc_FieldIndex.RagdollData:
                        this.RagdollData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RagdollData.ErrorMask?>>?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.RagdollBipedRotation:
                        this.RagdollBipedRotation = ex;
                        break;
                    case PlacedNpc_FieldIndex.Patrol:
                        this.Patrol = new MaskItem<Exception?, Patrol.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.LevelModifier:
                        this.LevelModifier = ex;
                        break;
                    case PlacedNpc_FieldIndex.Count:
                        this.Count = ex;
                        break;
                    case PlacedNpc_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case PlacedNpc_FieldIndex.Health:
                        this.Health = ex;
                        break;
                    case PlacedNpc_FieldIndex.LinkedReferences:
                        this.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.ActivateParents:
                        this.ActivateParents = new MaskItem<Exception?, ActivateParents.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.IsActivationPoint:
                        this.IsActivationPoint = ex;
                        break;
                    case PlacedNpc_FieldIndex.IsLinkedRefTransient:
                        this.IsLinkedRefTransient = ex;
                        break;
                    case PlacedNpc_FieldIndex.ReferenceGroup:
                        this.ReferenceGroup = ex;
                        break;
                    case PlacedNpc_FieldIndex.Layer:
                        this.Layer = ex;
                        break;
                    case PlacedNpc_FieldIndex.MaterialSwap:
                        this.MaterialSwap = ex;
                        break;
                    case PlacedNpc_FieldIndex.PersistentLocation:
                        this.PersistentLocation = ex;
                        break;
                    case PlacedNpc_FieldIndex.LocationReference:
                        this.LocationReference = ex;
                        break;
                    case PlacedNpc_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.IsIgnoredBySandbox:
                        this.IsIgnoredBySandbox = ex;
                        break;
                    case PlacedNpc_FieldIndex.SplineConnections:
                        this.SplineConnections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SplineConnection.ErrorMask?>>?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = ex;
                        break;
                    case PlacedNpc_FieldIndex.FavorCost:
                        this.FavorCost = ex;
                        break;
                    case PlacedNpc_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.Ownership:
                        this.Ownership = new MaskItem<Exception?, Ownership.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.FactionRank:
                        this.FactionRank = ex;
                        break;
                    case PlacedNpc_FieldIndex.Emittance:
                        this.Emittance = ex;
                        break;
                    case PlacedNpc_FieldIndex.MultiboundReference:
                        this.MultiboundReference = ex;
                        break;
                    case PlacedNpc_FieldIndex.IsIgnoredBySandbox2:
                        this.IsIgnoredBySandbox2 = ex;
                        break;
                    case PlacedNpc_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case PlacedNpc_FieldIndex.Position:
                        this.Position = ex;
                        break;
                    case PlacedNpc_FieldIndex.Rotation:
                        this.Rotation = ex;
                        break;
                    case PlacedNpc_FieldIndex.Comments:
                        this.Comments = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
                switch (enu)
                {
                    case PlacedNpc_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Base:
                        this.Base = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.EncounterZone:
                        this.EncounterZone = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.RagdollData:
                        this.RagdollData = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RagdollData.ErrorMask?>>?>)obj;
                        break;
                    case PlacedNpc_FieldIndex.RagdollBipedRotation:
                        this.RagdollBipedRotation = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Patrol:
                        this.Patrol = (MaskItem<Exception?, Patrol.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.LevelModifier:
                        this.LevelModifier = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Count:
                        this.Count = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Health:
                        this.Health = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.LinkedReferences:
                        this.LinkedReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>)obj;
                        break;
                    case PlacedNpc_FieldIndex.ActivateParents:
                        this.ActivateParents = (MaskItem<Exception?, ActivateParents.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.IsActivationPoint:
                        this.IsActivationPoint = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.IsLinkedRefTransient:
                        this.IsLinkedRefTransient = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.ReferenceGroup:
                        this.ReferenceGroup = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Layer:
                        this.Layer = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.MaterialSwap:
                        this.MaterialSwap = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.PersistentLocation:
                        this.PersistentLocation = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.LocationReference:
                        this.LocationReference = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlacedNpc_FieldIndex.IsIgnoredBySandbox:
                        this.IsIgnoredBySandbox = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.SplineConnections:
                        this.SplineConnections = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SplineConnection.ErrorMask?>>?>)obj;
                        break;
                    case PlacedNpc_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.FavorCost:
                        this.FavorCost = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Ownership:
                        this.Ownership = (MaskItem<Exception?, Ownership.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.FactionRank:
                        this.FactionRank = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Emittance:
                        this.Emittance = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.MultiboundReference:
                        this.MultiboundReference = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.IsIgnoredBySandbox2:
                        this.IsIgnoredBySandbox2 = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Position:
                        this.Position = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Rotation:
                        this.Rotation = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Comments:
                        this.Comments = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Base != null) return true;
                if (EncounterZone != null) return true;
                if (RagdollData != null) return true;
                if (RagdollBipedRotation != null) return true;
                if (Patrol != null) return true;
                if (LevelModifier != null) return true;
                if (Count != null) return true;
                if (Radius != null) return true;
                if (Health != null) return true;
                if (LinkedReferences != null) return true;
                if (ActivateParents != null) return true;
                if (IsActivationPoint != null) return true;
                if (IsLinkedRefTransient != null) return true;
                if (ReferenceGroup != null) return true;
                if (Layer != null) return true;
                if (MaterialSwap != null) return true;
                if (PersistentLocation != null) return true;
                if (LocationReference != null) return true;
                if (LocationRefTypes != null) return true;
                if (IsIgnoredBySandbox != null) return true;
                if (SplineConnections != null) return true;
                if (HeadTrackingWeight != null) return true;
                if (FavorCost != null) return true;
                if (EnableParent != null) return true;
                if (Ownership != null) return true;
                if (FactionRank != null) return true;
                if (Emittance != null) return true;
                if (MultiboundReference != null) return true;
                if (IsIgnoredBySandbox2 != null) return true;
                if (Scale != null) return true;
                if (Position != null) return true;
                if (Rotation != null) return true;
                if (Comments != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                {
                    sb.AppendItem(Base, "Base");
                }
                {
                    sb.AppendItem(EncounterZone, "EncounterZone");
                }
                if (RagdollData is {} RagdollDataItem)
                {
                    sb.AppendLine("RagdollData =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RagdollDataItem.Overall);
                        if (RagdollDataItem.Specific != null)
                        {
                            foreach (var subItem in RagdollDataItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(RagdollBipedRotation, "RagdollBipedRotation");
                }
                Patrol?.Print(sb);
                {
                    sb.AppendItem(LevelModifier, "LevelModifier");
                }
                {
                    sb.AppendItem(Count, "Count");
                }
                {
                    sb.AppendItem(Radius, "Radius");
                }
                {
                    sb.AppendItem(Health, "Health");
                }
                if (LinkedReferences is {} LinkedReferencesItem)
                {
                    sb.AppendLine("LinkedReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LinkedReferencesItem.Overall);
                        if (LinkedReferencesItem.Specific != null)
                        {
                            foreach (var subItem in LinkedReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                ActivateParents?.Print(sb);
                {
                    sb.AppendItem(IsActivationPoint, "IsActivationPoint");
                }
                {
                    sb.AppendItem(IsLinkedRefTransient, "IsLinkedRefTransient");
                }
                {
                    sb.AppendItem(ReferenceGroup, "ReferenceGroup");
                }
                {
                    sb.AppendItem(Layer, "Layer");
                }
                {
                    sb.AppendItem(MaterialSwap, "MaterialSwap");
                }
                {
                    sb.AppendItem(PersistentLocation, "PersistentLocation");
                }
                {
                    sb.AppendItem(LocationReference, "LocationReference");
                }
                if (LocationRefTypes is {} LocationRefTypesItem)
                {
                    sb.AppendLine("LocationRefTypes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LocationRefTypesItem.Overall);
                        if (LocationRefTypesItem.Specific != null)
                        {
                            foreach (var subItem in LocationRefTypesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(IsIgnoredBySandbox, "IsIgnoredBySandbox");
                }
                if (SplineConnections is {} SplineConnectionsItem)
                {
                    sb.AppendLine("SplineConnections =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SplineConnectionsItem.Overall);
                        if (SplineConnectionsItem.Specific != null)
                        {
                            foreach (var subItem in SplineConnectionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                }
                {
                    sb.AppendItem(FavorCost, "FavorCost");
                }
                EnableParent?.Print(sb);
                Ownership?.Print(sb);
                {
                    sb.AppendItem(FactionRank, "FactionRank");
                }
                {
                    sb.AppendItem(Emittance, "Emittance");
                }
                {
                    sb.AppendItem(MultiboundReference, "MultiboundReference");
                }
                {
                    sb.AppendItem(IsIgnoredBySandbox2, "IsIgnoredBySandbox2");
                }
                {
                    sb.AppendItem(Scale, "Scale");
                }
                {
                    sb.AppendItem(Position, "Position");
                }
                {
                    sb.AppendItem(Rotation, "Rotation");
                }
                {
                    sb.AppendItem(Comments, "Comments");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Base = this.Base.Combine(rhs.Base);
                ret.EncounterZone = this.EncounterZone.Combine(rhs.EncounterZone);
                ret.RagdollData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RagdollData.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.RagdollData?.Overall, rhs.RagdollData?.Overall), Noggog.ExceptionExt.Combine(this.RagdollData?.Specific, rhs.RagdollData?.Specific));
                ret.RagdollBipedRotation = this.RagdollBipedRotation.Combine(rhs.RagdollBipedRotation);
                ret.Patrol = this.Patrol.Combine(rhs.Patrol, (l, r) => l.Combine(r));
                ret.LevelModifier = this.LevelModifier.Combine(rhs.LevelModifier);
                ret.Count = this.Count.Combine(rhs.Count);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.Health = this.Health.Combine(rhs.Health);
                ret.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LinkedReferences?.Overall, rhs.LinkedReferences?.Overall), Noggog.ExceptionExt.Combine(this.LinkedReferences?.Specific, rhs.LinkedReferences?.Specific));
                ret.ActivateParents = this.ActivateParents.Combine(rhs.ActivateParents, (l, r) => l.Combine(r));
                ret.IsActivationPoint = this.IsActivationPoint.Combine(rhs.IsActivationPoint);
                ret.IsLinkedRefTransient = this.IsLinkedRefTransient.Combine(rhs.IsLinkedRefTransient);
                ret.ReferenceGroup = this.ReferenceGroup.Combine(rhs.ReferenceGroup);
                ret.Layer = this.Layer.Combine(rhs.Layer);
                ret.MaterialSwap = this.MaterialSwap.Combine(rhs.MaterialSwap);
                ret.PersistentLocation = this.PersistentLocation.Combine(rhs.PersistentLocation);
                ret.LocationReference = this.LocationReference.Combine(rhs.LocationReference);
                ret.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.LocationRefTypes?.Overall, rhs.LocationRefTypes?.Overall), Noggog.ExceptionExt.Combine(this.LocationRefTypes?.Specific, rhs.LocationRefTypes?.Specific));
                ret.IsIgnoredBySandbox = this.IsIgnoredBySandbox.Combine(rhs.IsIgnoredBySandbox);
                ret.SplineConnections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SplineConnection.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.SplineConnections?.Overall, rhs.SplineConnections?.Overall), Noggog.ExceptionExt.Combine(this.SplineConnections?.Specific, rhs.SplineConnections?.Specific));
                ret.HeadTrackingWeight = this.HeadTrackingWeight.Combine(rhs.HeadTrackingWeight);
                ret.FavorCost = this.FavorCost.Combine(rhs.FavorCost);
                ret.EnableParent = this.EnableParent.Combine(rhs.EnableParent, (l, r) => l.Combine(r));
                ret.Ownership = this.Ownership.Combine(rhs.Ownership, (l, r) => l.Combine(r));
                ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
                ret.Emittance = this.Emittance.Combine(rhs.Emittance);
                ret.MultiboundReference = this.MultiboundReference.Combine(rhs.MultiboundReference);
                ret.IsIgnoredBySandbox2 = this.IsIgnoredBySandbox2.Combine(rhs.IsIgnoredBySandbox2);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.Position = this.Position.Combine(rhs.Position);
                ret.Rotation = this.Rotation.Combine(rhs.Rotation);
                ret.Comments = this.Comments.Combine(rhs.Comments);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public bool Base;
            public bool EncounterZone;
            public RagdollData.TranslationMask? RagdollData;
            public bool RagdollBipedRotation;
            public Patrol.TranslationMask? Patrol;
            public bool LevelModifier;
            public bool Count;
            public bool Radius;
            public bool Health;
            public LinkedReferences.TranslationMask? LinkedReferences;
            public ActivateParents.TranslationMask? ActivateParents;
            public bool IsActivationPoint;
            public bool IsLinkedRefTransient;
            public bool ReferenceGroup;
            public bool Layer;
            public bool MaterialSwap;
            public bool PersistentLocation;
            public bool LocationReference;
            public bool LocationRefTypes;
            public bool IsIgnoredBySandbox;
            public SplineConnection.TranslationMask? SplineConnections;
            public bool HeadTrackingWeight;
            public bool FavorCost;
            public EnableParent.TranslationMask? EnableParent;
            public Ownership.TranslationMask? Ownership;
            public bool FactionRank;
            public bool Emittance;
            public bool MultiboundReference;
            public bool IsIgnoredBySandbox2;
            public bool Scale;
            public bool Position;
            public bool Rotation;
            public bool Comments;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Base = defaultOn;
                this.EncounterZone = defaultOn;
                this.RagdollBipedRotation = defaultOn;
                this.LevelModifier = defaultOn;
                this.Count = defaultOn;
                this.Radius = defaultOn;
                this.Health = defaultOn;
                this.IsActivationPoint = defaultOn;
                this.IsLinkedRefTransient = defaultOn;
                this.ReferenceGroup = defaultOn;
                this.Layer = defaultOn;
                this.MaterialSwap = defaultOn;
                this.PersistentLocation = defaultOn;
                this.LocationReference = defaultOn;
                this.LocationRefTypes = defaultOn;
                this.IsIgnoredBySandbox = defaultOn;
                this.HeadTrackingWeight = defaultOn;
                this.FavorCost = defaultOn;
                this.FactionRank = defaultOn;
                this.Emittance = defaultOn;
                this.MultiboundReference = defaultOn;
                this.IsIgnoredBySandbox2 = defaultOn;
                this.Scale = defaultOn;
                this.Position = defaultOn;
                this.Rotation = defaultOn;
                this.Comments = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Base, null));
                ret.Add((EncounterZone, null));
                ret.Add((RagdollData == null ? DefaultOn : !RagdollData.GetCrystal().CopyNothing, RagdollData?.GetCrystal()));
                ret.Add((RagdollBipedRotation, null));
                ret.Add((Patrol != null ? Patrol.OnOverall : DefaultOn, Patrol?.GetCrystal()));
                ret.Add((LevelModifier, null));
                ret.Add((Count, null));
                ret.Add((Radius, null));
                ret.Add((Health, null));
                ret.Add((LinkedReferences == null ? DefaultOn : !LinkedReferences.GetCrystal().CopyNothing, LinkedReferences?.GetCrystal()));
                ret.Add((ActivateParents != null ? ActivateParents.OnOverall : DefaultOn, ActivateParents?.GetCrystal()));
                ret.Add((IsActivationPoint, null));
                ret.Add((IsLinkedRefTransient, null));
                ret.Add((ReferenceGroup, null));
                ret.Add((Layer, null));
                ret.Add((MaterialSwap, null));
                ret.Add((PersistentLocation, null));
                ret.Add((LocationReference, null));
                ret.Add((LocationRefTypes, null));
                ret.Add((IsIgnoredBySandbox, null));
                ret.Add((SplineConnections == null ? DefaultOn : !SplineConnections.GetCrystal().CopyNothing, SplineConnections?.GetCrystal()));
                ret.Add((HeadTrackingWeight, null));
                ret.Add((FavorCost, null));
                ret.Add((EnableParent != null ? EnableParent.OnOverall : DefaultOn, EnableParent?.GetCrystal()));
                ret.Add((Ownership != null ? Ownership.OnOverall : DefaultOn, Ownership?.GetCrystal()));
                ret.Add((FactionRank, null));
                ret.Add((Emittance, null));
                ret.Add((MultiboundReference, null));
                ret.Add((IsIgnoredBySandbox2, null));
                ret.Add((Scale, null));
                ret.Add((Position, null));
                ret.Add((Rotation, null));
                ret.Add((Comments, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PlacedNpc_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedNpcCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedNpcSetterCommon.Instance.RemapLinks(this, mapping);
        public PlacedNpc(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private PlacedNpc(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal PlacedNpc(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public PlacedNpc(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public PlacedNpc(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedNpc>.ToString(this);
        }

        protected override Type LinkType => typeof(IPlacedNpc);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedNpcGetter rhs) return false;
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedNpcGetter? obj)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedNpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedNpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PlacedNpc CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlacedNpc();
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedNpc item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedNpc GetNew()
        {
            return new PlacedNpc();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedNpc :
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        IKeywordLinkedReference,
        ILinkedReference,
        ILoquiObjectSetter<IPlacedNpcInternal>,
        IPlaced,
        IPlacedNpcGetter,
        IPlacedSimple,
        IPositionRotation,
        IScripted
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new IFormLinkNullable<INpcGetter> Base { get; set; }
        new IFormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; }
        new ExtendedList<RagdollData>? RagdollData { get; set; }
        new P3Float? RagdollBipedRotation { get; set; }
        new Patrol? Patrol { get; set; }
        new Level? LevelModifier { get; set; }
        new Int32? Count { get; set; }
        new Single? Radius { get; set; }
        new Percent? Health { get; set; }
        new ExtendedList<LinkedReferences> LinkedReferences { get; }
        new ActivateParents? ActivateParents { get; set; }
        new Boolean IsActivationPoint { get; set; }
        new Boolean IsLinkedRefTransient { get; set; }
        new IFormLinkNullable<IReferenceGroupGetter> ReferenceGroup { get; set; }
        new IFormLinkNullable<ILayerGetter> Layer { get; set; }
        new IFormLinkNullable<IMaterialSwapGetter> MaterialSwap { get; set; }
        new IFormLinkNullable<ILocationGetter> PersistentLocation { get; set; }
        new IFormLinkNullable<ILocationRecordGetter> LocationReference { get; set; }
        new ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? LocationRefTypes { get; set; }
        new Boolean IsIgnoredBySandbox { get; set; }
        new ExtendedList<SplineConnection> SplineConnections { get; }
        new Single? HeadTrackingWeight { get; set; }
        new Single? FavorCost { get; set; }
        new EnableParent? EnableParent { get; set; }
        new Ownership? Ownership { get; set; }
        new Int32? FactionRank { get; set; }
        new IFormLinkNullable<IEmittanceGetter> Emittance { get; set; }
        new IFormLinkNullable<ILinkedReferenceGetter> MultiboundReference { get; set; }
        new Boolean IsIgnoredBySandbox2 { get; set; }
        new Single? Scale { get; set; }
        new P3Float Position { get; set; }
        new P3Float Rotation { get; set; }
        new String? Comments { get; set; }
        #region Mutagen
        new PlacedNpc.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IPlacedNpcInternal :
        IFallout4MajorRecordInternal,
        IPlacedNpc,
        IPlacedNpcGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.ACHR)]
    public partial interface IPlacedNpcGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordLinkedReferenceGetter,
        ILinkedReferenceGetter,
        ILoquiObject<IPlacedNpcGetter>,
        IMapsToGetter<IPlacedNpcGetter>,
        IPlacedGetter,
        IPlacedSimpleGetter,
        IPositionRotationGetter,
        IScriptedGetter
    {
        static new ILoquiRegistration StaticRegistration => PlacedNpc_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        IFormLinkNullableGetter<INpcGetter> Base { get; }
        IFormLinkNullableGetter<IEncounterZoneGetter> EncounterZone { get; }
        IReadOnlyList<IRagdollDataGetter>? RagdollData { get; }
        P3Float? RagdollBipedRotation { get; }
        IPatrolGetter? Patrol { get; }
        Level? LevelModifier { get; }
        Int32? Count { get; }
        Single? Radius { get; }
        Percent? Health { get; }
        IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; }
        IActivateParentsGetter? ActivateParents { get; }
        Boolean IsActivationPoint { get; }
        Boolean IsLinkedRefTransient { get; }
        IFormLinkNullableGetter<IReferenceGroupGetter> ReferenceGroup { get; }
        IFormLinkNullableGetter<ILayerGetter> Layer { get; }
        IFormLinkNullableGetter<IMaterialSwapGetter> MaterialSwap { get; }
        IFormLinkNullableGetter<ILocationGetter> PersistentLocation { get; }
        IFormLinkNullableGetter<ILocationRecordGetter> LocationReference { get; }
        IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? LocationRefTypes { get; }
        Boolean IsIgnoredBySandbox { get; }
        IReadOnlyList<ISplineConnectionGetter> SplineConnections { get; }
        Single? HeadTrackingWeight { get; }
        Single? FavorCost { get; }
        IEnableParentGetter? EnableParent { get; }
        IOwnershipGetter? Ownership { get; }
        Int32? FactionRank { get; }
        IFormLinkNullableGetter<IEmittanceGetter> Emittance { get; }
        IFormLinkNullableGetter<ILinkedReferenceGetter> MultiboundReference { get; }
        Boolean IsIgnoredBySandbox2 { get; }
        Single? Scale { get; }
        P3Float Position { get; }
        P3Float Rotation { get; }
        String? Comments { get; }

        #region Mutagen
        PlacedNpc.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedNpcMixIn
    {
        public static void Clear(this IPlacedNpcInternal item)
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedNpc.Mask<bool> GetEqualsMask(
            this IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlacedNpcGetter item,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlacedNpcGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            PlacedNpc.TranslationMask? equalsMask = null)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlacedNpcInternal lhs,
            IPlacedNpcGetter rhs,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedNpc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedNpcInternal lhs,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedNpc DeepCopy(
            this IPlacedNpcGetter item,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            return ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedNpc DeepCopy(
            this IPlacedNpcGetter item,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            return ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedNpc DeepCopy(
            this IPlacedNpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlacedNpc Duplicate(
            this IPlacedNpcGetter item,
            FormKey formKey,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static PlacedNpc Duplicate(
            this IPlacedNpcGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedNpcInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum PlacedNpc_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        Base = 8,
        EncounterZone = 9,
        RagdollData = 10,
        RagdollBipedRotation = 11,
        Patrol = 12,
        LevelModifier = 13,
        Count = 14,
        Radius = 15,
        Health = 16,
        LinkedReferences = 17,
        ActivateParents = 18,
        IsActivationPoint = 19,
        IsLinkedRefTransient = 20,
        ReferenceGroup = 21,
        Layer = 22,
        MaterialSwap = 23,
        PersistentLocation = 24,
        LocationReference = 25,
        LocationRefTypes = 26,
        IsIgnoredBySandbox = 27,
        SplineConnections = 28,
        HeadTrackingWeight = 29,
        FavorCost = 30,
        EnableParent = 31,
        Ownership = 32,
        FactionRank = 33,
        Emittance = 34,
        MultiboundReference = 35,
        IsIgnoredBySandbox2 = 36,
        Scale = 37,
        Position = 38,
        Rotation = 39,
        Comments = 40,
    }
    #endregion

    #region Registration
    internal partial class PlacedNpc_Registration : ILoquiRegistration
    {
        public static readonly PlacedNpc_Registration Instance = new PlacedNpc_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 34;

        public const ushort FieldCount = 41;

        public static readonly Type MaskType = typeof(PlacedNpc.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedNpc.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedNpc);

        public static readonly Type GetterType = typeof(IPlacedNpcGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedNpc);

        public static readonly Type? InternalSetterType = typeof(IPlacedNpcInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.PlacedNpc";

        public const string Name = "PlacedNpc";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ACHR;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ACHR);
            var all = RecordCollection.Factory(
                RecordTypes.ACHR,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.NAME,
                RecordTypes.XEZN,
                RecordTypes.XRGD,
                RecordTypes.XRGB,
                RecordTypes.XPRD,
                RecordTypes.XLCM,
                RecordTypes.XCNT,
                RecordTypes.XRDS,
                RecordTypes.XHLT,
                RecordTypes.XLKR,
                RecordTypes.XAPD,
                RecordTypes.XATP,
                RecordTypes.XLKT,
                RecordTypes.XRFG,
                RecordTypes.XLYR,
                RecordTypes.XMSP,
                RecordTypes.XLCN,
                RecordTypes.XLRL,
                RecordTypes.XLRT,
                RecordTypes.XIS2,
                RecordTypes.XPLK,
                RecordTypes.XHTW,
                RecordTypes.XFVC,
                RecordTypes.XESP,
                RecordTypes.XOWN,
                RecordTypes.XRNK,
                RecordTypes.XEMI,
                RecordTypes.XMBR,
                RecordTypes.XIBS,
                RecordTypes.XSCL,
                RecordTypes.DATA,
                RecordTypes.MNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlacedNpcBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlacedNpcSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly PlacedNpcSetterCommon Instance = new PlacedNpcSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedNpcInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Base.Clear();
            item.EncounterZone.Clear();
            item.RagdollData = null;
            item.RagdollBipedRotation = default;
            item.Patrol = null;
            item.LevelModifier = default;
            item.Count = default;
            item.Radius = default;
            item.Health = default;
            item.LinkedReferences.Clear();
            item.ActivateParents = null;
            item.IsActivationPoint = default(Boolean);
            item.IsLinkedRefTransient = default(Boolean);
            item.ReferenceGroup.Clear();
            item.Layer.Clear();
            item.MaterialSwap.Clear();
            item.PersistentLocation.Clear();
            item.LocationReference.Clear();
            item.LocationRefTypes = null;
            item.IsIgnoredBySandbox = default(Boolean);
            item.SplineConnections.Clear();
            item.HeadTrackingWeight = default;
            item.FavorCost = default;
            item.EnableParent = null;
            item.Ownership = null;
            item.FactionRank = default;
            item.Emittance.Clear();
            item.MultiboundReference.Clear();
            item.IsIgnoredBySandbox2 = default(Boolean);
            item.Scale = default;
            item.Position = default(P3Float);
            item.Rotation = default(P3Float);
            item.Comments = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IPlacedNpcInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedNpcInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedNpc obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Base.Relink(mapping);
            obj.EncounterZone.Relink(mapping);
            obj.Patrol?.RemapLinks(mapping);
            obj.LinkedReferences.RemapLinks(mapping);
            obj.ActivateParents?.RemapLinks(mapping);
            obj.ReferenceGroup.Relink(mapping);
            obj.Layer.Relink(mapping);
            obj.MaterialSwap.Relink(mapping);
            obj.PersistentLocation.Relink(mapping);
            obj.LocationReference.Relink(mapping);
            obj.LocationRefTypes?.RemapLinks(mapping);
            obj.SplineConnections.RemapLinks(mapping);
            obj.EnableParent?.RemapLinks(mapping);
            obj.Ownership?.RemapLinks(mapping);
            obj.Emittance.Relink(mapping);
            obj.MultiboundReference.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedNpcInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IPlacedNpcInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlacedNpcBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedNpcBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedNpc)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedNpc)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlacedNpcCommon : Fallout4MajorRecordCommon
    {
        public new static readonly PlacedNpcCommon Instance = new PlacedNpcCommon();

        public PlacedNpc.Mask<bool> GetEqualsMask(
            IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedNpc.Mask<bool>(false);
            ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            PlacedNpc.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Base = item.Base.Equals(rhs.Base);
            ret.EncounterZone = item.EncounterZone.Equals(rhs.EncounterZone);
            ret.RagdollData = item.RagdollData.CollectionEqualsHelper(
                rhs.RagdollData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.RagdollBipedRotation = item.RagdollBipedRotation.Equals(rhs.RagdollBipedRotation);
            ret.Patrol = EqualsMaskHelper.EqualsHelper(
                item.Patrol,
                rhs.Patrol,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.LevelModifier = item.LevelModifier == rhs.LevelModifier;
            ret.Count = item.Count == rhs.Count;
            ret.Radius = item.Radius.EqualsWithin(rhs.Radius);
            ret.Health = item.Health.Equals(rhs.Health);
            ret.LinkedReferences = item.LinkedReferences.CollectionEqualsHelper(
                rhs.LinkedReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ActivateParents = EqualsMaskHelper.EqualsHelper(
                item.ActivateParents,
                rhs.ActivateParents,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.IsActivationPoint = item.IsActivationPoint == rhs.IsActivationPoint;
            ret.IsLinkedRefTransient = item.IsLinkedRefTransient == rhs.IsLinkedRefTransient;
            ret.ReferenceGroup = item.ReferenceGroup.Equals(rhs.ReferenceGroup);
            ret.Layer = item.Layer.Equals(rhs.Layer);
            ret.MaterialSwap = item.MaterialSwap.Equals(rhs.MaterialSwap);
            ret.PersistentLocation = item.PersistentLocation.Equals(rhs.PersistentLocation);
            ret.LocationReference = item.LocationReference.Equals(rhs.LocationReference);
            ret.LocationRefTypes = item.LocationRefTypes.CollectionEqualsHelper(
                rhs.LocationRefTypes,
                (l, r) => object.Equals(l, r),
                include);
            ret.IsIgnoredBySandbox = item.IsIgnoredBySandbox == rhs.IsIgnoredBySandbox;
            ret.SplineConnections = item.SplineConnections.CollectionEqualsHelper(
                rhs.SplineConnections,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.HeadTrackingWeight = item.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight);
            ret.FavorCost = item.FavorCost.EqualsWithin(rhs.FavorCost);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Ownership = EqualsMaskHelper.EqualsHelper(
                item.Ownership,
                rhs.Ownership,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FactionRank = item.FactionRank == rhs.FactionRank;
            ret.Emittance = item.Emittance.Equals(rhs.Emittance);
            ret.MultiboundReference = item.MultiboundReference.Equals(rhs.MultiboundReference);
            ret.IsIgnoredBySandbox2 = item.IsIgnoredBySandbox2 == rhs.IsIgnoredBySandbox2;
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.Position = item.Position.Equals(rhs.Position);
            ret.Rotation = item.Rotation.Equals(rhs.Rotation);
            ret.Comments = string.Equals(item.Comments, rhs.Comments);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IPlacedNpcGetter item,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlacedNpcGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlacedNpc =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlacedNpc) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlacedNpcGetter item,
            StructuredStringBuilder sb,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.Base ?? true)
            {
                sb.AppendItem(item.Base.FormKeyNullable, "Base");
            }
            if (printMask?.EncounterZone ?? true)
            {
                sb.AppendItem(item.EncounterZone.FormKeyNullable, "EncounterZone");
            }
            if ((printMask?.RagdollData?.Overall ?? true)
                && item.RagdollData is {} RagdollDataItem)
            {
                sb.AppendLine("RagdollData =>");
                using (sb.Brace())
                {
                    foreach (var subItem in RagdollDataItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.RagdollBipedRotation ?? true)
                && item.RagdollBipedRotation is {} RagdollBipedRotationItem)
            {
                sb.AppendItem(RagdollBipedRotationItem, "RagdollBipedRotation");
            }
            if ((printMask?.Patrol?.Overall ?? true)
                && item.Patrol is {} PatrolItem)
            {
                PatrolItem?.Print(sb, "Patrol");
            }
            if ((printMask?.LevelModifier ?? true)
                && item.LevelModifier is {} LevelModifierItem)
            {
                sb.AppendItem(LevelModifierItem, "LevelModifier");
            }
            if ((printMask?.Count ?? true)
                && item.Count is {} CountItem)
            {
                sb.AppendItem(CountItem, "Count");
            }
            if ((printMask?.Radius ?? true)
                && item.Radius is {} RadiusItem)
            {
                sb.AppendItem(RadiusItem, "Radius");
            }
            if ((printMask?.Health ?? true)
                && item.Health is {} HealthItem)
            {
                sb.AppendItem(HealthItem, "Health");
            }
            if (printMask?.LinkedReferences?.Overall ?? true)
            {
                sb.AppendLine("LinkedReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.LinkedReferences)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ActivateParents?.Overall ?? true)
                && item.ActivateParents is {} ActivateParentsItem)
            {
                ActivateParentsItem?.Print(sb, "ActivateParents");
            }
            if (printMask?.IsActivationPoint ?? true)
            {
                sb.AppendItem(item.IsActivationPoint, "IsActivationPoint");
            }
            if (printMask?.IsLinkedRefTransient ?? true)
            {
                sb.AppendItem(item.IsLinkedRefTransient, "IsLinkedRefTransient");
            }
            if (printMask?.ReferenceGroup ?? true)
            {
                sb.AppendItem(item.ReferenceGroup.FormKeyNullable, "ReferenceGroup");
            }
            if (printMask?.Layer ?? true)
            {
                sb.AppendItem(item.Layer.FormKeyNullable, "Layer");
            }
            if (printMask?.MaterialSwap ?? true)
            {
                sb.AppendItem(item.MaterialSwap.FormKeyNullable, "MaterialSwap");
            }
            if (printMask?.PersistentLocation ?? true)
            {
                sb.AppendItem(item.PersistentLocation.FormKeyNullable, "PersistentLocation");
            }
            if (printMask?.LocationReference ?? true)
            {
                sb.AppendItem(item.LocationReference.FormKeyNullable, "LocationReference");
            }
            if ((printMask?.LocationRefTypes?.Overall ?? true)
                && item.LocationRefTypes is {} LocationRefTypesItem)
            {
                sb.AppendLine("LocationRefTypes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in LocationRefTypesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.IsIgnoredBySandbox ?? true)
            {
                sb.AppendItem(item.IsIgnoredBySandbox, "IsIgnoredBySandbox");
            }
            if (printMask?.SplineConnections?.Overall ?? true)
            {
                sb.AppendLine("SplineConnections =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.SplineConnections)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.HeadTrackingWeight ?? true)
                && item.HeadTrackingWeight is {} HeadTrackingWeightItem)
            {
                sb.AppendItem(HeadTrackingWeightItem, "HeadTrackingWeight");
            }
            if ((printMask?.FavorCost ?? true)
                && item.FavorCost is {} FavorCostItem)
            {
                sb.AppendItem(FavorCostItem, "FavorCost");
            }
            if ((printMask?.EnableParent?.Overall ?? true)
                && item.EnableParent is {} EnableParentItem)
            {
                EnableParentItem?.Print(sb, "EnableParent");
            }
            if ((printMask?.Ownership?.Overall ?? true)
                && item.Ownership is {} OwnershipItem)
            {
                OwnershipItem?.Print(sb, "Ownership");
            }
            if ((printMask?.FactionRank ?? true)
                && item.FactionRank is {} FactionRankItem)
            {
                sb.AppendItem(FactionRankItem, "FactionRank");
            }
            if (printMask?.Emittance ?? true)
            {
                sb.AppendItem(item.Emittance.FormKeyNullable, "Emittance");
            }
            if (printMask?.MultiboundReference ?? true)
            {
                sb.AppendItem(item.MultiboundReference.FormKeyNullable, "MultiboundReference");
            }
            if (printMask?.IsIgnoredBySandbox2 ?? true)
            {
                sb.AppendItem(item.IsIgnoredBySandbox2, "IsIgnoredBySandbox2");
            }
            if ((printMask?.Scale ?? true)
                && item.Scale is {} ScaleItem)
            {
                sb.AppendItem(ScaleItem, "Scale");
            }
            if (printMask?.Position ?? true)
            {
                sb.AppendItem(item.Position, "Position");
            }
            if (printMask?.Rotation ?? true)
            {
                sb.AppendItem(item.Rotation, "Rotation");
            }
            if ((printMask?.Comments ?? true)
                && item.Comments is {} CommentsItem)
            {
                sb.AppendItem(CommentsItem, "Comments");
            }
        }
        
        public static PlacedNpc_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedNpc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (PlacedNpc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (PlacedNpc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (PlacedNpc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (PlacedNpc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (PlacedNpc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (PlacedNpc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new PlacedNpc_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedNpc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedNpc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlacedNpc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedNpc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedNpcGetter? lhs,
            IPlacedNpcGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Base) ?? true))
            {
                if (!lhs.Base.Equals(rhs.Base)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.EncounterZone) ?? true))
            {
                if (!lhs.EncounterZone.Equals(rhs.EncounterZone)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.RagdollData) ?? true))
            {
                if (!lhs.RagdollData.SequenceEqualNullable(rhs.RagdollData, (l, r) => ((RagdollDataCommon)((IRagdollDataGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.RagdollData)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.RagdollBipedRotation) ?? true))
            {
                if (!lhs.RagdollBipedRotation.Equals(rhs.RagdollBipedRotation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Patrol) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Patrol, rhs.Patrol, out var lhsPatrol, out var rhsPatrol, out var isPatrolEqual))
                {
                    if (!((PatrolCommon)((IPatrolGetter)lhsPatrol).CommonInstance()!).Equals(lhsPatrol, rhsPatrol, equalsMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.Patrol))) return false;
                }
                else if (!isPatrolEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LevelModifier) ?? true))
            {
                if (lhs.LevelModifier != rhs.LevelModifier) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Count) ?? true))
            {
                if (lhs.Count != rhs.Count) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Radius) ?? true))
            {
                if (!lhs.Radius.EqualsWithin(rhs.Radius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Health) ?? true))
            {
                if (!lhs.Health.Equals(rhs.Health)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LinkedReferences) ?? true))
            {
                if (!lhs.LinkedReferences.SequenceEqual(rhs.LinkedReferences, (l, r) => ((LinkedReferencesCommon)((ILinkedReferencesGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.LinkedReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.ActivateParents) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ActivateParents, rhs.ActivateParents, out var lhsActivateParents, out var rhsActivateParents, out var isActivateParentsEqual))
                {
                    if (!((ActivateParentsCommon)((IActivateParentsGetter)lhsActivateParents).CommonInstance()!).Equals(lhsActivateParents, rhsActivateParents, equalsMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.ActivateParents))) return false;
                }
                else if (!isActivateParentsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.IsActivationPoint) ?? true))
            {
                if (lhs.IsActivationPoint != rhs.IsActivationPoint) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.IsLinkedRefTransient) ?? true))
            {
                if (lhs.IsLinkedRefTransient != rhs.IsLinkedRefTransient) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.ReferenceGroup) ?? true))
            {
                if (!lhs.ReferenceGroup.Equals(rhs.ReferenceGroup)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Layer) ?? true))
            {
                if (!lhs.Layer.Equals(rhs.Layer)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.MaterialSwap) ?? true))
            {
                if (!lhs.MaterialSwap.Equals(rhs.MaterialSwap)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.PersistentLocation) ?? true))
            {
                if (!lhs.PersistentLocation.Equals(rhs.PersistentLocation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LocationReference) ?? true))
            {
                if (!lhs.LocationReference.Equals(rhs.LocationReference)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LocationRefTypes) ?? true))
            {
                if (!lhs.LocationRefTypes.SequenceEqualNullable(rhs.LocationRefTypes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.IsIgnoredBySandbox) ?? true))
            {
                if (lhs.IsIgnoredBySandbox != rhs.IsIgnoredBySandbox) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.SplineConnections) ?? true))
            {
                if (!lhs.SplineConnections.SequenceEqual(rhs.SplineConnections, (l, r) => ((SplineConnectionCommon)((ISplineConnectionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.SplineConnections)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.HeadTrackingWeight) ?? true))
            {
                if (!lhs.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.FavorCost) ?? true))
            {
                if (!lhs.FavorCost.EqualsWithin(rhs.FavorCost)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.EnableParent) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EnableParent, rhs.EnableParent, out var lhsEnableParent, out var rhsEnableParent, out var isEnableParentEqual))
                {
                    if (!((EnableParentCommon)((IEnableParentGetter)lhsEnableParent).CommonInstance()!).Equals(lhsEnableParent, rhsEnableParent, equalsMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.EnableParent))) return false;
                }
                else if (!isEnableParentEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Ownership) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Ownership, rhs.Ownership, out var lhsOwnership, out var rhsOwnership, out var isOwnershipEqual))
                {
                    if (!((OwnershipCommon)((IOwnershipGetter)lhsOwnership).CommonInstance()!).Equals(lhsOwnership, rhsOwnership, equalsMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.Ownership))) return false;
                }
                else if (!isOwnershipEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.FactionRank) ?? true))
            {
                if (lhs.FactionRank != rhs.FactionRank) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Emittance) ?? true))
            {
                if (!lhs.Emittance.Equals(rhs.Emittance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.MultiboundReference) ?? true))
            {
                if (!lhs.MultiboundReference.Equals(rhs.MultiboundReference)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.IsIgnoredBySandbox2) ?? true))
            {
                if (lhs.IsIgnoredBySandbox2 != rhs.IsIgnoredBySandbox2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Scale) ?? true))
            {
                if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Position) ?? true))
            {
                if (!lhs.Position.Equals(rhs.Position)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Rotation) ?? true))
            {
                if (!lhs.Rotation.Equals(rhs.Rotation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Comments) ?? true))
            {
                if (!string.Equals(lhs.Comments, rhs.Comments)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedNpcGetter?)lhs,
                rhs: rhs as IPlacedNpcGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedNpcGetter?)lhs,
                rhs: rhs as IPlacedNpcGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IPlacedNpcGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.Base);
            hash.Add(item.EncounterZone);
            hash.Add(item.RagdollData);
            if (item.RagdollBipedRotation is {} RagdollBipedRotationitem)
            {
                hash.Add(RagdollBipedRotationitem);
            }
            if (item.Patrol is {} Patrolitem)
            {
                hash.Add(Patrolitem);
            }
            if (item.LevelModifier is {} LevelModifieritem)
            {
                hash.Add(LevelModifieritem);
            }
            if (item.Count is {} Countitem)
            {
                hash.Add(Countitem);
            }
            if (item.Radius is {} Radiusitem)
            {
                hash.Add(Radiusitem);
            }
            if (item.Health is {} Healthitem)
            {
                hash.Add(Healthitem);
            }
            hash.Add(item.LinkedReferences);
            if (item.ActivateParents is {} ActivateParentsitem)
            {
                hash.Add(ActivateParentsitem);
            }
            hash.Add(item.IsActivationPoint);
            hash.Add(item.IsLinkedRefTransient);
            hash.Add(item.ReferenceGroup);
            hash.Add(item.Layer);
            hash.Add(item.MaterialSwap);
            hash.Add(item.PersistentLocation);
            hash.Add(item.LocationReference);
            hash.Add(item.LocationRefTypes);
            hash.Add(item.IsIgnoredBySandbox);
            hash.Add(item.SplineConnections);
            if (item.HeadTrackingWeight is {} HeadTrackingWeightitem)
            {
                hash.Add(HeadTrackingWeightitem);
            }
            if (item.FavorCost is {} FavorCostitem)
            {
                hash.Add(FavorCostitem);
            }
            if (item.EnableParent is {} EnableParentitem)
            {
                hash.Add(EnableParentitem);
            }
            if (item.Ownership is {} Ownershipitem)
            {
                hash.Add(Ownershipitem);
            }
            if (item.FactionRank is {} FactionRankitem)
            {
                hash.Add(FactionRankitem);
            }
            hash.Add(item.Emittance);
            hash.Add(item.MultiboundReference);
            hash.Add(item.IsIgnoredBySandbox2);
            if (item.Scale is {} Scaleitem)
            {
                hash.Add(Scaleitem);
            }
            hash.Add(item.Position);
            hash.Add(item.Rotation);
            if (item.Comments is {} Commentsitem)
            {
                hash.Add(Commentsitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedNpcGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedNpcGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedNpc.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlacedNpcGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.Base, out var BaseInfo))
            {
                yield return BaseInfo;
            }
            if (FormLinkInformation.TryFactory(obj.EncounterZone, out var EncounterZoneInfo))
            {
                yield return EncounterZoneInfo;
            }
            if (obj.Patrol is {} PatrolItems)
            {
                foreach (var item in PatrolItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.LinkedReferences.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.ActivateParents is {} ActivateParentsItems)
            {
                foreach (var item in ActivateParentsItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.ReferenceGroup, out var ReferenceGroupInfo))
            {
                yield return ReferenceGroupInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Layer, out var LayerInfo))
            {
                yield return LayerInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MaterialSwap, out var MaterialSwapInfo))
            {
                yield return MaterialSwapInfo;
            }
            if (FormLinkInformation.TryFactory(obj.PersistentLocation, out var PersistentLocationInfo))
            {
                yield return PersistentLocationInfo;
            }
            if (FormLinkInformation.TryFactory(obj.LocationReference, out var LocationReferenceInfo))
            {
                yield return LocationReferenceInfo;
            }
            if (obj.LocationRefTypes is {} LocationRefTypesItem)
            {
                foreach (var item in LocationRefTypesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.SplineConnections.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.EnableParent is {} EnableParentItems)
            {
                foreach (var item in EnableParentItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Ownership is {} OwnershipItems)
            {
                foreach (var item in OwnershipItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.Emittance, out var EmittanceInfo))
            {
                yield return EmittanceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MultiboundReference, out var MultiboundReferenceInfo))
            {
                yield return MultiboundReferenceInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public PlacedNpc Duplicate(
            IPlacedNpcGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlacedNpc(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedNpcGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedNpcGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class PlacedNpcSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly PlacedNpcSetterTranslationCommon Instance = new PlacedNpcSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedNpcInternal item,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlacedNpc item,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Base) ?? true))
            {
                item.Base.SetTo(rhs.Base.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.EncounterZone) ?? true))
            {
                item.EncounterZone.SetTo(rhs.EncounterZone.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.RagdollData) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.RagdollData);
                try
                {
                    if ((rhs.RagdollData != null))
                    {
                        item.RagdollData = 
                            rhs.RagdollData
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<RagdollData>();
                    }
                    else
                    {
                        item.RagdollData = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.RagdollBipedRotation) ?? true))
            {
                item.RagdollBipedRotation = rhs.RagdollBipedRotation;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Patrol) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.Patrol);
                try
                {
                    if(rhs.Patrol is {} rhsPatrol)
                    {
                        item.Patrol = rhsPatrol.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.Patrol));
                    }
                    else
                    {
                        item.Patrol = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LevelModifier) ?? true))
            {
                item.LevelModifier = rhs.LevelModifier;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Count) ?? true))
            {
                item.Count = rhs.Count;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Health) ?? true))
            {
                item.Health = rhs.Health;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LinkedReferences) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.LinkedReferences);
                try
                {
                    item.LinkedReferences.SetTo(
                        rhs.LinkedReferences
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.ActivateParents) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.ActivateParents);
                try
                {
                    if(rhs.ActivateParents is {} rhsActivateParents)
                    {
                        item.ActivateParents = rhsActivateParents.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.ActivateParents));
                    }
                    else
                    {
                        item.ActivateParents = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.IsActivationPoint) ?? true))
            {
                item.IsActivationPoint = rhs.IsActivationPoint;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.IsLinkedRefTransient) ?? true))
            {
                item.IsLinkedRefTransient = rhs.IsLinkedRefTransient;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.ReferenceGroup) ?? true))
            {
                item.ReferenceGroup.SetTo(rhs.ReferenceGroup.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Layer) ?? true))
            {
                item.Layer.SetTo(rhs.Layer.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.MaterialSwap) ?? true))
            {
                item.MaterialSwap.SetTo(rhs.MaterialSwap.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.PersistentLocation) ?? true))
            {
                item.PersistentLocation.SetTo(rhs.PersistentLocation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LocationReference) ?? true))
            {
                item.LocationReference.SetTo(rhs.LocationReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.LocationRefTypes) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.LocationRefTypes);
                try
                {
                    if ((rhs.LocationRefTypes != null))
                    {
                        item.LocationRefTypes = 
                            rhs.LocationRefTypes
                                .Select(b => (IFormLinkGetter<ILocationReferenceTypeGetter>)new FormLink<ILocationReferenceTypeGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>();
                    }
                    else
                    {
                        item.LocationRefTypes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.IsIgnoredBySandbox) ?? true))
            {
                item.IsIgnoredBySandbox = rhs.IsIgnoredBySandbox;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.SplineConnections) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.SplineConnections);
                try
                {
                    item.SplineConnections.SetTo(
                        rhs.SplineConnections
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.HeadTrackingWeight) ?? true))
            {
                item.HeadTrackingWeight = rhs.HeadTrackingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.FavorCost) ?? true))
            {
                item.FavorCost = rhs.FavorCost;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent is {} rhsEnableParent)
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Ownership) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.Ownership);
                try
                {
                    if(rhs.Ownership is {} rhsOwnership)
                    {
                        item.Ownership = rhsOwnership.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.Ownership));
                    }
                    else
                    {
                        item.Ownership = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.FactionRank) ?? true))
            {
                item.FactionRank = rhs.FactionRank;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Emittance) ?? true))
            {
                item.Emittance.SetTo(rhs.Emittance.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.MultiboundReference) ?? true))
            {
                item.MultiboundReference.SetTo(rhs.MultiboundReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.IsIgnoredBySandbox2) ?? true))
            {
                item.IsIgnoredBySandbox2 = rhs.IsIgnoredBySandbox2;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Position) ?? true))
            {
                item.Position = rhs.Position;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Rotation) ?? true))
            {
                item.Rotation = rhs.Rotation;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Comments) ?? true))
            {
                item.Comments = rhs.Comments;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlacedNpc item,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpcInternal)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpc)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpcInternal)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpc)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlacedNpc DeepCopy(
            IPlacedNpcGetter item,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            PlacedNpc ret = (PlacedNpc)((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetNew();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedNpc DeepCopy(
            IPlacedNpcGetter item,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedNpc ret = (PlacedNpc)((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetNew();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedNpc.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedNpc DeepCopy(
            IPlacedNpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedNpc ret = (PlacedNpc)((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetNew();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class PlacedNpc
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedNpc_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedNpc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedNpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedNpcSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedNpcSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class PlacedNpcBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly PlacedNpcBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IPlacedNpcGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Base,
                header: translationParams.ConvertToCustom(RecordTypes.NAME));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EncounterZone,
                header: translationParams.ConvertToCustom(RecordTypes.XEZN));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IRagdollDataGetter>.Instance.Write(
                writer: writer,
                items: item.RagdollData,
                recordType: translationParams.ConvertToCustom(RecordTypes.XRGD),
                transl: (MutagenWriter subWriter, IRagdollDataGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((RagdollDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.RagdollBipedRotation,
                header: translationParams.ConvertToCustom(RecordTypes.XRGB));
            if (item.Patrol is {} PatrolItem)
            {
                ((PatrolBinaryWriteTranslation)((IBinaryItem)PatrolItem).BinaryWriteTranslator).Write(
                    item: PatrolItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            EnumBinaryTranslation<Level, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.LevelModifier,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.XLCM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Count,
                header: translationParams.ConvertToCustom(RecordTypes.XCNT));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Radius,
                header: translationParams.ConvertToCustom(RecordTypes.XRDS));
            PercentBinaryTranslation.Write(
                writer: writer,
                item: item.Health,
                integerType: FloatIntegerType.UInt,
                header: translationParams.ConvertToCustom(RecordTypes.XHLT));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILinkedReferencesGetter>.Instance.Write(
                writer: writer,
                items: item.LinkedReferences,
                transl: (MutagenWriter subWriter, ILinkedReferencesGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LinkedReferencesBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.ActivateParents is {} ActivateParentsItem)
            {
                ((ActivateParentsBinaryWriteTranslation)((IBinaryItem)ActivateParentsItem).BinaryWriteTranslator).Write(
                    item: ActivateParentsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.IsActivationPoint,
                header: translationParams.ConvertToCustom(RecordTypes.XATP));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.IsLinkedRefTransient,
                header: translationParams.ConvertToCustom(RecordTypes.XLKT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ReferenceGroup,
                header: translationParams.ConvertToCustom(RecordTypes.XRFG));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Layer,
                header: translationParams.ConvertToCustom(RecordTypes.XLYR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaterialSwap,
                header: translationParams.ConvertToCustom(RecordTypes.XMSP));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PersistentLocation,
                header: translationParams.ConvertToCustom(RecordTypes.XLCN));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LocationReference,
                header: translationParams.ConvertToCustom(RecordTypes.XLRL));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILocationReferenceTypeGetter>>.Instance.Write(
                writer: writer,
                items: item.LocationRefTypes,
                recordType: translationParams.ConvertToCustom(RecordTypes.XLRT),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ILocationReferenceTypeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.IsIgnoredBySandbox,
                header: translationParams.ConvertToCustom(RecordTypes.XIS2));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ISplineConnectionGetter>.Instance.Write(
                writer: writer,
                items: item.SplineConnections,
                transl: (MutagenWriter subWriter, ISplineConnectionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((SplineConnectionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.HeadTrackingWeight,
                header: translationParams.ConvertToCustom(RecordTypes.XHTW));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FavorCost,
                header: translationParams.ConvertToCustom(RecordTypes.XFVC));
            if (item.EnableParent is {} EnableParentItem)
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)EnableParentItem).BinaryWriteTranslator).Write(
                    item: EnableParentItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Ownership is {} OwnershipItem)
            {
                ((OwnershipBinaryWriteTranslation)((IBinaryItem)OwnershipItem).BinaryWriteTranslator).Write(
                    item: OwnershipItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FactionRank,
                header: translationParams.ConvertToCustom(RecordTypes.XRNK));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Emittance,
                header: translationParams.ConvertToCustom(RecordTypes.XEMI));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MultiboundReference,
                header: translationParams.ConvertToCustom(RecordTypes.XMBR));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.IsIgnoredBySandbox2,
                header: translationParams.ConvertToCustom(RecordTypes.XIBS));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: translationParams.ConvertToCustom(RecordTypes.XSCL));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Position);
                P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Rotation);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Comments,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IPlacedNpcGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.ACHR,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlacedNpcBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly PlacedNpcBinaryCreateTranslation Instance = new PlacedNpcBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ACHR;
        public static ParseResult FillBinaryRecordTypes(
            IPlacedNpcInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)PlacedNpc_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.NAME:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Base.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedNpc_FieldIndex.Base;
                }
                case RecordTypeInts.XEZN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EncounterZone.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedNpc_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XRGD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollData = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<RagdollData>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: RagdollData.TryCreateFromBinary)
                        .CastExtendedList<RagdollData>();
                    return (int)PlacedNpc_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XRGB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollBipedRotation = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.RagdollBipedRotation;
                }
                case RecordTypeInts.XPRD:
                {
                    item.Patrol = Mutagen.Bethesda.Fallout4.Patrol.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedNpc_FieldIndex.Patrol;
                }
                case RecordTypeInts.XLCM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LevelModifier = EnumBinaryTranslation<Level, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)PlacedNpc_FieldIndex.LevelModifier;
                }
                case RecordTypeInts.XCNT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Count = frame.ReadInt32();
                    return (int)PlacedNpc_FieldIndex.Count;
                }
                case RecordTypeInts.XRDS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Radius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.Radius;
                }
                case RecordTypeInts.XHLT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Health = PercentBinaryTranslation.Parse(
                        reader: frame,
                        integerType: FloatIntegerType.UInt);
                    return (int)PlacedNpc_FieldIndex.Health;
                }
                case RecordTypeInts.XLKR:
                {
                    item.LinkedReferences.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LinkedReferences>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: LinkedReferences_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: LinkedReferences.TryCreateFromBinary));
                    return (int)PlacedNpc_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XAPD:
                {
                    item.ActivateParents = Mutagen.Bethesda.Fallout4.ActivateParents.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedNpc_FieldIndex.ActivateParents;
                }
                case RecordTypeInts.XATP:
                {
                    item.IsActivationPoint = true;
                    return (int)PlacedNpc_FieldIndex.IsActivationPoint;
                }
                case RecordTypeInts.XLKT:
                {
                    item.IsLinkedRefTransient = true;
                    return (int)PlacedNpc_FieldIndex.IsLinkedRefTransient;
                }
                case RecordTypeInts.XRFG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ReferenceGroup.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedNpc_FieldIndex.ReferenceGroup;
                }
                case RecordTypeInts.XLYR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Layer.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedNpc_FieldIndex.Layer;
                }
                case RecordTypeInts.XMSP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaterialSwap.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedNpc_FieldIndex.MaterialSwap;
                }
                case RecordTypeInts.XLCN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PersistentLocation.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedNpc_FieldIndex.PersistentLocation;
                }
                case RecordTypeInts.XLRL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationReference.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedNpc_FieldIndex.LocationReference;
                }
                case RecordTypeInts.XLRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationRefTypes = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILocationReferenceTypeGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>();
                    return (int)PlacedNpc_FieldIndex.LocationRefTypes;
                }
                case RecordTypeInts.XIS2:
                {
                    item.IsIgnoredBySandbox = true;
                    return (int)PlacedNpc_FieldIndex.IsIgnoredBySandbox;
                }
                case RecordTypeInts.XPLK:
                {
                    item.SplineConnections.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<SplineConnection>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: SplineConnection_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: SplineConnection.TryCreateFromBinary));
                    return (int)PlacedNpc_FieldIndex.SplineConnections;
                }
                case RecordTypeInts.XHTW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeadTrackingWeight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.HeadTrackingWeight;
                }
                case RecordTypeInts.XFVC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FavorCost = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.FavorCost;
                }
                case RecordTypeInts.XESP:
                {
                    item.EnableParent = Mutagen.Bethesda.Fallout4.EnableParent.CreateFromBinary(frame: frame);
                    return (int)PlacedNpc_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XOWN:
                {
                    item.Ownership = Mutagen.Bethesda.Fallout4.Ownership.CreateFromBinary(frame: frame);
                    return (int)PlacedNpc_FieldIndex.Ownership;
                }
                case RecordTypeInts.XRNK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FactionRank = frame.ReadInt32();
                    return (int)PlacedNpc_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XEMI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Emittance.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedNpc_FieldIndex.Emittance;
                }
                case RecordTypeInts.XMBR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MultiboundReference.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedNpc_FieldIndex.MultiboundReference;
                }
                case RecordTypeInts.XIBS:
                {
                    item.IsIgnoredBySandbox2 = true;
                    return (int)PlacedNpc_FieldIndex.IsIgnoredBySandbox2;
                }
                case RecordTypeInts.XSCL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.Scale;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 12) return null;
                    item.Position = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 12) return null;
                    item.Rotation = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)PlacedNpc_FieldIndex.Rotation;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Comments = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)PlacedNpc_FieldIndex.Comments;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class PlacedNpcBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class PlacedNpcBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IPlacedNpcGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedNpc_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedNpc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedNpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedNpcSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedNpcCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedNpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedNpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IPlacedNpc);

        public PlacedNpc.MajorFlag MajorFlags => (PlacedNpc.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Base
        private int? _BaseLocation;
        public IFormLinkNullableGetter<INpcGetter> Base => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<INpcGetter>(_package, _recordData, _BaseLocation);
        #endregion
        #region EncounterZone
        private int? _EncounterZoneLocation;
        public IFormLinkNullableGetter<IEncounterZoneGetter> EncounterZone => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEncounterZoneGetter>(_package, _recordData, _EncounterZoneLocation);
        #endregion
        public IReadOnlyList<IRagdollDataGetter>? RagdollData { get; private set; }
        #region RagdollBipedRotation
        private int? _RagdollBipedRotationLocation;
        public P3Float? RagdollBipedRotation => _RagdollBipedRotationLocation.HasValue ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(HeaderTranslation.ExtractSubrecordMemory(_recordData, _RagdollBipedRotationLocation.Value, _package.MetaData.Constants)) : default(P3Float?);
        #endregion
        public IPatrolGetter? Patrol { get; private set; }
        #region LevelModifier
        private int? _LevelModifierLocation;
        public Level? LevelModifier => _LevelModifierLocation.HasValue ? (Level)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LevelModifierLocation!.Value, _package.MetaData.Constants)) : default(Level?);
        #endregion
        #region Count
        private int? _CountLocation;
        public Int32? Count => _CountLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _CountLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region Radius
        private int? _RadiusLocation;
        public Single? Radius => _RadiusLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _RadiusLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Health
        private int? _HealthLocation;
        public Percent? Health => _HealthLocation.HasValue ? PercentBinaryTranslation.GetPercent(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HealthLocation.Value, _package.MetaData.Constants), FloatIntegerType.UInt) : default(Percent?);
        #endregion
        public IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; private set; } = Array.Empty<ILinkedReferencesGetter>();
        public IActivateParentsGetter? ActivateParents { get; private set; }
        #region IsActivationPoint
        private int? _IsActivationPointLocation;
        public Boolean IsActivationPoint => _IsActivationPointLocation.HasValue ? true : default(Boolean);
        #endregion
        #region IsLinkedRefTransient
        private int? _IsLinkedRefTransientLocation;
        public Boolean IsLinkedRefTransient => _IsLinkedRefTransientLocation.HasValue ? true : default(Boolean);
        #endregion
        #region ReferenceGroup
        private int? _ReferenceGroupLocation;
        public IFormLinkNullableGetter<IReferenceGroupGetter> ReferenceGroup => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IReferenceGroupGetter>(_package, _recordData, _ReferenceGroupLocation);
        #endregion
        #region Layer
        private int? _LayerLocation;
        public IFormLinkNullableGetter<ILayerGetter> Layer => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILayerGetter>(_package, _recordData, _LayerLocation);
        #endregion
        #region MaterialSwap
        private int? _MaterialSwapLocation;
        public IFormLinkNullableGetter<IMaterialSwapGetter> MaterialSwap => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMaterialSwapGetter>(_package, _recordData, _MaterialSwapLocation);
        #endregion
        #region PersistentLocation
        private int? _PersistentLocationLocation;
        public IFormLinkNullableGetter<ILocationGetter> PersistentLocation => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILocationGetter>(_package, _recordData, _PersistentLocationLocation);
        #endregion
        #region LocationReference
        private int? _LocationReferenceLocation;
        public IFormLinkNullableGetter<ILocationRecordGetter> LocationReference => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILocationRecordGetter>(_package, _recordData, _LocationReferenceLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? LocationRefTypes { get; private set; }
        #region IsIgnoredBySandbox
        private int? _IsIgnoredBySandboxLocation;
        public Boolean IsIgnoredBySandbox => _IsIgnoredBySandboxLocation.HasValue ? true : default(Boolean);
        #endregion
        public IReadOnlyList<ISplineConnectionGetter> SplineConnections { get; private set; } = Array.Empty<ISplineConnectionGetter>();
        #region HeadTrackingWeight
        private int? _HeadTrackingWeightLocation;
        public Single? HeadTrackingWeight => _HeadTrackingWeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HeadTrackingWeightLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region FavorCost
        private int? _FavorCostLocation;
        public Single? FavorCost => _FavorCostLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FavorCostLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        public IEnableParentGetter? EnableParent => _EnableParentLocation.HasValue ? EnableParentBinaryOverlay.EnableParentFactory(_recordData.Slice(_EnableParentLocation!.Value.Min), _package) : default;
        #endregion
        public IOwnershipGetter? Ownership { get; private set; }
        #region FactionRank
        private int? _FactionRankLocation;
        public Int32? FactionRank => _FactionRankLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FactionRankLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region Emittance
        private int? _EmittanceLocation;
        public IFormLinkNullableGetter<IEmittanceGetter> Emittance => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEmittanceGetter>(_package, _recordData, _EmittanceLocation);
        #endregion
        #region MultiboundReference
        private int? _MultiboundReferenceLocation;
        public IFormLinkNullableGetter<ILinkedReferenceGetter> MultiboundReference => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILinkedReferenceGetter>(_package, _recordData, _MultiboundReferenceLocation);
        #endregion
        #region IsIgnoredBySandbox2
        private int? _IsIgnoredBySandbox2Location;
        public Boolean IsIgnoredBySandbox2 => _IsIgnoredBySandbox2Location.HasValue ? true : default(Boolean);
        #endregion
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        private RangeInt32? _DATALocation;
        #region Position
        private int _PositionLocation => _DATALocation!.Value.Min;
        private bool _Position_IsSet => _DATALocation.HasValue;
        public P3Float Position => _Position_IsSet ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_recordData.Slice(_PositionLocation, 12)) : default(P3Float);
        #endregion
        #region Rotation
        private int _RotationLocation => _DATALocation!.Value.Min + 0xC;
        private bool _Rotation_IsSet => _DATALocation.HasValue;
        public P3Float Rotation => _Rotation_IsSet ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_recordData.Slice(_RotationLocation, 12)) : default(P3Float);
        #endregion
        #region Comments
        private int? _CommentsLocation;
        public String? Comments => _CommentsLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _CommentsLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedNpcBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlacedNpcGetter PlacedNpcFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlacedNpcBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlacedNpcGetter PlacedNpcFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlacedNpcFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)PlacedNpc_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.NAME:
                {
                    _BaseLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Base;
                }
                case RecordTypeInts.XEZN:
                {
                    _EncounterZoneLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XRGD:
                {
                    this.RagdollData = BinaryOverlayList.FactoryByStartIndexWithTrigger<IRagdollDataGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 28,
                        getter: (s, p) => RagdollDataBinaryOverlay.RagdollDataFactory(s, p));
                    return (int)PlacedNpc_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XRGB:
                {
                    _RagdollBipedRotationLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.RagdollBipedRotation;
                }
                case RecordTypeInts.XPRD:
                {
                    this.Patrol = PatrolBinaryOverlay.PatrolFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedNpc_FieldIndex.Patrol;
                }
                case RecordTypeInts.XLCM:
                {
                    _LevelModifierLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.LevelModifier;
                }
                case RecordTypeInts.XCNT:
                {
                    _CountLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Count;
                }
                case RecordTypeInts.XRDS:
                {
                    _RadiusLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Radius;
                }
                case RecordTypeInts.XHLT:
                {
                    _HealthLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Health;
                }
                case RecordTypeInts.XLKR:
                {
                    this.LinkedReferences = BinaryOverlayList.FactoryByArray<ILinkedReferencesGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => LinkedReferencesBinaryOverlay.LinkedReferencesFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: LinkedReferences_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)PlacedNpc_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XAPD:
                {
                    this.ActivateParents = ActivateParentsBinaryOverlay.ActivateParentsFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedNpc_FieldIndex.ActivateParents;
                }
                case RecordTypeInts.XATP:
                {
                    _IsActivationPointLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.IsActivationPoint;
                }
                case RecordTypeInts.XLKT:
                {
                    _IsLinkedRefTransientLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.IsLinkedRefTransient;
                }
                case RecordTypeInts.XRFG:
                {
                    _ReferenceGroupLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.ReferenceGroup;
                }
                case RecordTypeInts.XLYR:
                {
                    _LayerLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Layer;
                }
                case RecordTypeInts.XMSP:
                {
                    _MaterialSwapLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.MaterialSwap;
                }
                case RecordTypeInts.XLCN:
                {
                    _PersistentLocationLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.PersistentLocation;
                }
                case RecordTypeInts.XLRL:
                {
                    _LocationReferenceLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.LocationReference;
                }
                case RecordTypeInts.XLRT:
                {
                    this.LocationRefTypes = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<ILocationReferenceTypeGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ILocationReferenceTypeGetter>(p, s));
                    return (int)PlacedNpc_FieldIndex.LocationRefTypes;
                }
                case RecordTypeInts.XIS2:
                {
                    _IsIgnoredBySandboxLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.IsIgnoredBySandbox;
                }
                case RecordTypeInts.XPLK:
                {
                    this.SplineConnections = BinaryOverlayList.FactoryByArray<ISplineConnectionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => SplineConnectionBinaryOverlay.SplineConnectionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: SplineConnection_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)PlacedNpc_FieldIndex.SplineConnections;
                }
                case RecordTypeInts.XHTW:
                {
                    _HeadTrackingWeightLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.HeadTrackingWeight;
                }
                case RecordTypeInts.XFVC:
                {
                    _FavorCostLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.FavorCost;
                }
                case RecordTypeInts.XESP:
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedNpc_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XOWN:
                {
                    this.Ownership = OwnershipBinaryOverlay.OwnershipFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedNpc_FieldIndex.Ownership;
                }
                case RecordTypeInts.XRNK:
                {
                    _FactionRankLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XEMI:
                {
                    _EmittanceLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Emittance;
                }
                case RecordTypeInts.XMBR:
                {
                    _MultiboundReferenceLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.MultiboundReference;
                }
                case RecordTypeInts.XIBS:
                {
                    _IsIgnoredBySandbox2Location = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.IsIgnoredBySandbox2;
                }
                case RecordTypeInts.XSCL:
                {
                    _ScaleLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Scale;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)PlacedNpc_FieldIndex.Rotation;
                }
                case RecordTypeInts.MNAM:
                {
                    _CommentsLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Comments;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedNpcMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedNpc>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedNpcGetter rhs) return false;
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedNpcGetter? obj)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

