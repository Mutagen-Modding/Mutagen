/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class SoundKeywordMapping :
        Fallout4MajorRecord,
        IEquatable<ISoundKeywordMappingGetter>,
        ILoquiObjectSetter<SoundKeywordMapping>,
        ISoundKeywordMappingInternal
    {
        #region Ctor
        protected SoundKeywordMapping()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region PrimaryDescriptor
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _PrimaryDescriptor = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> PrimaryDescriptor
        {
            get => _PrimaryDescriptor;
            set => _PrimaryDescriptor.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> ISoundKeywordMappingGetter.PrimaryDescriptor => this.PrimaryDescriptor;
        #endregion
        #region ExteriorTail
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _ExteriorTail = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> ExteriorTail
        {
            get => _ExteriorTail;
            set => _ExteriorTail.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> ISoundKeywordMappingGetter.ExteriorTail => this.ExteriorTail;
        #endregion
        #region VatsDescriptor
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _VatsDescriptor = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> VatsDescriptor
        {
            get => _VatsDescriptor;
            set => _VatsDescriptor.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> ISoundKeywordMappingGetter.VatsDescriptor => this.VatsDescriptor;
        #endregion
        #region VatsThreshold
        public Single? VatsThreshold { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ISoundKeywordMappingGetter.VatsThreshold => this.VatsThreshold;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>> _Keywords = new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>> Keywords
        {
            get => this._Keywords;
            init => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> ISoundKeywordMappingGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        ExtendedList<IFormLinkGetter<IKeywordGetter>>? IKeyworded<IKeywordGetter>.Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value ?? new();
        }
        #endregion
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MappingSound> _Sounds = new ExtendedList<MappingSound>();
        public ExtendedList<MappingSound> Sounds
        {
            get => this._Sounds;
            init => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMappingSoundGetter> ISoundKeywordMappingGetter.Sounds => _Sounds;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundKeywordMappingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.PrimaryDescriptor = initialValue;
                this.ExteriorTail = initialValue;
                this.VatsDescriptor = initialValue;
                this.VatsThreshold = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MappingSound.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MappingSound.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem PrimaryDescriptor,
                TItem ExteriorTail,
                TItem VatsDescriptor,
                TItem VatsThreshold,
                TItem Keywords,
                TItem Sounds)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.PrimaryDescriptor = PrimaryDescriptor;
                this.ExteriorTail = ExteriorTail;
                this.VatsDescriptor = VatsDescriptor;
                this.VatsThreshold = VatsThreshold;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MappingSound.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, MappingSound.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem PrimaryDescriptor;
            public TItem ExteriorTail;
            public TItem VatsDescriptor;
            public TItem VatsThreshold;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MappingSound.Mask<TItem>?>>?>? Sounds;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.PrimaryDescriptor, rhs.PrimaryDescriptor)) return false;
                if (!object.Equals(this.ExteriorTail, rhs.ExteriorTail)) return false;
                if (!object.Equals(this.VatsDescriptor, rhs.VatsDescriptor)) return false;
                if (!object.Equals(this.VatsThreshold, rhs.VatsThreshold)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.PrimaryDescriptor);
                hash.Add(this.ExteriorTail);
                hash.Add(this.VatsDescriptor);
                hash.Add(this.VatsThreshold);
                hash.Add(this.Keywords);
                hash.Add(this.Sounds);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.PrimaryDescriptor)) return false;
                if (!eval(this.ExteriorTail)) return false;
                if (!eval(this.VatsDescriptor)) return false;
                if (!eval(this.VatsThreshold)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.PrimaryDescriptor)) return true;
                if (eval(this.ExteriorTail)) return true;
                if (eval(this.VatsDescriptor)) return true;
                if (eval(this.VatsThreshold)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundKeywordMapping.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.PrimaryDescriptor = eval(this.PrimaryDescriptor);
                obj.ExteriorTail = eval(this.ExteriorTail);
                obj.VatsDescriptor = eval(this.VatsDescriptor);
                obj.VatsThreshold = eval(this.VatsThreshold);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MappingSound.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, MappingSound.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MappingSound.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific)
                        {
                            MaskItemIndexed<R, MappingSound.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, MappingSound.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SoundKeywordMapping.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SoundKeywordMapping.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SoundKeywordMapping.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.PrimaryDescriptor ?? true)
                    {
                        sb.AppendItem(PrimaryDescriptor, "PrimaryDescriptor");
                    }
                    if (printMask?.ExteriorTail ?? true)
                    {
                        sb.AppendItem(ExteriorTail, "ExteriorTail");
                    }
                    if (printMask?.VatsDescriptor ?? true)
                    {
                        sb.AppendItem(VatsDescriptor, "VatsDescriptor");
                    }
                    if (printMask?.VatsThreshold ?? true)
                    {
                        sb.AppendItem(VatsThreshold, "VatsThreshold");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds is {} SoundsItem)
                    {
                        sb.AppendLine("Sounds =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? PrimaryDescriptor;
            public Exception? ExteriorTail;
            public Exception? VatsDescriptor;
            public Exception? VatsThreshold;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MappingSound.ErrorMask?>>?>? Sounds;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SoundKeywordMapping_FieldIndex enu = (SoundKeywordMapping_FieldIndex)index;
                switch (enu)
                {
                    case SoundKeywordMapping_FieldIndex.PrimaryDescriptor:
                        return PrimaryDescriptor;
                    case SoundKeywordMapping_FieldIndex.ExteriorTail:
                        return ExteriorTail;
                    case SoundKeywordMapping_FieldIndex.VatsDescriptor:
                        return VatsDescriptor;
                    case SoundKeywordMapping_FieldIndex.VatsThreshold:
                        return VatsThreshold;
                    case SoundKeywordMapping_FieldIndex.Keywords:
                        return Keywords;
                    case SoundKeywordMapping_FieldIndex.Sounds:
                        return Sounds;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SoundKeywordMapping_FieldIndex enu = (SoundKeywordMapping_FieldIndex)index;
                switch (enu)
                {
                    case SoundKeywordMapping_FieldIndex.PrimaryDescriptor:
                        this.PrimaryDescriptor = ex;
                        break;
                    case SoundKeywordMapping_FieldIndex.ExteriorTail:
                        this.ExteriorTail = ex;
                        break;
                    case SoundKeywordMapping_FieldIndex.VatsDescriptor:
                        this.VatsDescriptor = ex;
                        break;
                    case SoundKeywordMapping_FieldIndex.VatsThreshold:
                        this.VatsThreshold = ex;
                        break;
                    case SoundKeywordMapping_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case SoundKeywordMapping_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MappingSound.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SoundKeywordMapping_FieldIndex enu = (SoundKeywordMapping_FieldIndex)index;
                switch (enu)
                {
                    case SoundKeywordMapping_FieldIndex.PrimaryDescriptor:
                        this.PrimaryDescriptor = (Exception?)obj;
                        break;
                    case SoundKeywordMapping_FieldIndex.ExteriorTail:
                        this.ExteriorTail = (Exception?)obj;
                        break;
                    case SoundKeywordMapping_FieldIndex.VatsDescriptor:
                        this.VatsDescriptor = (Exception?)obj;
                        break;
                    case SoundKeywordMapping_FieldIndex.VatsThreshold:
                        this.VatsThreshold = (Exception?)obj;
                        break;
                    case SoundKeywordMapping_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case SoundKeywordMapping_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MappingSound.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (PrimaryDescriptor != null) return true;
                if (ExteriorTail != null) return true;
                if (VatsDescriptor != null) return true;
                if (VatsThreshold != null) return true;
                if (Keywords != null) return true;
                if (Sounds != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(PrimaryDescriptor, "PrimaryDescriptor");
                }
                {
                    sb.AppendItem(ExteriorTail, "ExteriorTail");
                }
                {
                    sb.AppendItem(VatsDescriptor, "VatsDescriptor");
                }
                {
                    sb.AppendItem(VatsThreshold, "VatsThreshold");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Sounds is {} SoundsItem)
                {
                    sb.AppendLine("Sounds =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.PrimaryDescriptor = this.PrimaryDescriptor.Combine(rhs.PrimaryDescriptor);
                ret.ExteriorTail = this.ExteriorTail.Combine(rhs.ExteriorTail);
                ret.VatsDescriptor = this.VatsDescriptor.Combine(rhs.VatsDescriptor);
                ret.VatsThreshold = this.VatsThreshold.Combine(rhs.VatsThreshold);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MappingSound.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), Noggog.ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool PrimaryDescriptor;
            public bool ExteriorTail;
            public bool VatsDescriptor;
            public bool VatsThreshold;
            public bool Keywords;
            public MappingSound.TranslationMask? Sounds;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.PrimaryDescriptor = defaultOn;
                this.ExteriorTail = defaultOn;
                this.VatsDescriptor = defaultOn;
                this.VatsThreshold = defaultOn;
                this.Keywords = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((PrimaryDescriptor, null));
                ret.Add((ExteriorTail, null));
                ret.Add((VatsDescriptor, null));
                ret.Add((VatsThreshold, null));
                ret.Add((Keywords, null));
                ret.Add((Sounds == null ? DefaultOn : !Sounds.GetCrystal().CopyNothing, Sounds?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SoundKeywordMapping_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SoundKeywordMappingCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SoundKeywordMappingSetterCommon.Instance.RemapLinks(this, mapping);
        public SoundKeywordMapping(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private SoundKeywordMapping(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal SoundKeywordMapping(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SoundKeywordMapping(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public SoundKeywordMapping(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<SoundKeywordMapping>.ToString(this);
        }

        protected override Type LinkType => typeof(ISoundKeywordMapping);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISoundKeywordMappingGetter rhs) return false;
            return ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundKeywordMappingGetter? obj)
        {
            return ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundKeywordMappingBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundKeywordMappingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SoundKeywordMapping CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SoundKeywordMapping();
            ((SoundKeywordMappingSetterCommon)((ISoundKeywordMappingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundKeywordMapping item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SoundKeywordMappingSetterCommon)((ISoundKeywordMappingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SoundKeywordMapping GetNew()
        {
            return new SoundKeywordMapping();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundKeywordMapping :
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<ISoundKeywordMappingInternal>,
        ISoundKeywordMappingGetter
    {
        new IFormLinkNullable<ISoundDescriptorGetter> PrimaryDescriptor { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> ExteriorTail { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> VatsDescriptor { get; set; }
        new Single? VatsThreshold { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>> Keywords { get; }
        new ExtendedList<MappingSound> Sounds { get; }
    }

    public partial interface ISoundKeywordMappingInternal :
        IFallout4MajorRecordInternal,
        ISoundKeywordMapping,
        ISoundKeywordMappingGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.KSSM)]
    public partial interface ISoundKeywordMappingGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<ISoundKeywordMappingGetter>,
        IMapsToGetter<ISoundKeywordMappingGetter>
    {
        static new ILoquiRegistration StaticRegistration => SoundKeywordMapping_Registration.Instance;
        IFormLinkNullableGetter<ISoundDescriptorGetter> PrimaryDescriptor { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> ExteriorTail { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> VatsDescriptor { get; }
        Single? VatsThreshold { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> Keywords { get; }
        #endregion
        IReadOnlyList<IMappingSoundGetter> Sounds { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundKeywordMappingMixIn
    {
        public static void Clear(this ISoundKeywordMappingInternal item)
        {
            ((SoundKeywordMappingSetterCommon)((ISoundKeywordMappingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundKeywordMapping.Mask<bool> GetEqualsMask(
            this ISoundKeywordMappingGetter item,
            ISoundKeywordMappingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISoundKeywordMappingGetter item,
            string? name = null,
            SoundKeywordMapping.Mask<bool>? printMask = null)
        {
            return ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISoundKeywordMappingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundKeywordMapping.Mask<bool>? printMask = null)
        {
            ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundKeywordMappingGetter item,
            ISoundKeywordMappingGetter rhs,
            SoundKeywordMapping.TranslationMask? equalsMask = null)
        {
            return ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISoundKeywordMappingInternal lhs,
            ISoundKeywordMappingGetter rhs,
            out SoundKeywordMapping.ErrorMask errorMask,
            SoundKeywordMapping.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundKeywordMappingSetterTranslationCommon)((ISoundKeywordMappingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundKeywordMapping.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundKeywordMappingInternal lhs,
            ISoundKeywordMappingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundKeywordMappingSetterTranslationCommon)((ISoundKeywordMappingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundKeywordMapping DeepCopy(
            this ISoundKeywordMappingGetter item,
            SoundKeywordMapping.TranslationMask? copyMask = null)
        {
            return ((SoundKeywordMappingSetterTranslationCommon)((ISoundKeywordMappingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundKeywordMapping DeepCopy(
            this ISoundKeywordMappingGetter item,
            out SoundKeywordMapping.ErrorMask errorMask,
            SoundKeywordMapping.TranslationMask? copyMask = null)
        {
            return ((SoundKeywordMappingSetterTranslationCommon)((ISoundKeywordMappingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundKeywordMapping DeepCopy(
            this ISoundKeywordMappingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundKeywordMappingSetterTranslationCommon)((ISoundKeywordMappingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SoundKeywordMapping Duplicate(
            this ISoundKeywordMappingGetter item,
            FormKey formKey,
            SoundKeywordMapping.TranslationMask? copyMask = null)
        {
            return ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static SoundKeywordMapping Duplicate(
            this ISoundKeywordMappingGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundKeywordMappingInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SoundKeywordMappingSetterCommon)((ISoundKeywordMappingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum SoundKeywordMapping_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        PrimaryDescriptor = 7,
        ExteriorTail = 8,
        VatsDescriptor = 9,
        VatsThreshold = 10,
        Keywords = 11,
        Sounds = 12,
    }
    #endregion

    #region Registration
    internal partial class SoundKeywordMapping_Registration : ILoquiRegistration
    {
        public static readonly SoundKeywordMapping_Registration Instance = new SoundKeywordMapping_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(SoundKeywordMapping.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundKeywordMapping.ErrorMask);

        public static readonly Type ClassType = typeof(SoundKeywordMapping);

        public static readonly Type GetterType = typeof(ISoundKeywordMappingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundKeywordMapping);

        public static readonly Type? InternalSetterType = typeof(ISoundKeywordMappingInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.SoundKeywordMapping";

        public const string Name = "SoundKeywordMapping";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.KSSM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.KSSM);
            var all = RecordCollection.Factory(
                RecordTypes.KSSM,
                RecordTypes.DNAM,
                RecordTypes.ENAM,
                RecordTypes.VNAM,
                RecordTypes.TNAM,
                RecordTypes.KNAM,
                RecordTypes.RNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SoundKeywordMappingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SoundKeywordMappingSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly SoundKeywordMappingSetterCommon Instance = new SoundKeywordMappingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundKeywordMappingInternal item)
        {
            ClearPartial();
            item.PrimaryDescriptor.Clear();
            item.ExteriorTail.Clear();
            item.VatsDescriptor.Clear();
            item.VatsThreshold = default;
            item.Keywords.Clear();
            item.Sounds.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ISoundKeywordMappingInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISoundKeywordMappingInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISoundKeywordMapping obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.PrimaryDescriptor.Relink(mapping);
            obj.ExteriorTail.Relink(mapping);
            obj.VatsDescriptor.Relink(mapping);
            obj.Keywords.RemapLinks(mapping);
            obj.Sounds.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundKeywordMappingInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISoundKeywordMappingInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SoundKeywordMappingBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SoundKeywordMappingBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SoundKeywordMapping)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SoundKeywordMapping)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SoundKeywordMappingCommon : Fallout4MajorRecordCommon
    {
        public new static readonly SoundKeywordMappingCommon Instance = new SoundKeywordMappingCommon();

        public SoundKeywordMapping.Mask<bool> GetEqualsMask(
            ISoundKeywordMappingGetter item,
            ISoundKeywordMappingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundKeywordMapping.Mask<bool>(false);
            ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundKeywordMappingGetter item,
            ISoundKeywordMappingGetter rhs,
            SoundKeywordMapping.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.PrimaryDescriptor = item.PrimaryDescriptor.Equals(rhs.PrimaryDescriptor);
            ret.ExteriorTail = item.ExteriorTail.Equals(rhs.ExteriorTail);
            ret.VatsDescriptor = item.VatsDescriptor.Equals(rhs.VatsDescriptor);
            ret.VatsThreshold = item.VatsThreshold.EqualsWithin(rhs.VatsThreshold);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISoundKeywordMappingGetter item,
            string? name = null,
            SoundKeywordMapping.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISoundKeywordMappingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundKeywordMapping.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SoundKeywordMapping =>");
            }
            else
            {
                sb.AppendLine($"{name} (SoundKeywordMapping) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISoundKeywordMappingGetter item,
            StructuredStringBuilder sb,
            SoundKeywordMapping.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.PrimaryDescriptor ?? true)
            {
                sb.AppendItem(item.PrimaryDescriptor.FormKeyNullable, "PrimaryDescriptor");
            }
            if (printMask?.ExteriorTail ?? true)
            {
                sb.AppendItem(item.ExteriorTail.FormKeyNullable, "ExteriorTail");
            }
            if (printMask?.VatsDescriptor ?? true)
            {
                sb.AppendItem(item.VatsDescriptor.FormKeyNullable, "VatsDescriptor");
            }
            if ((printMask?.VatsThreshold ?? true)
                && item.VatsThreshold is {} VatsThresholdItem)
            {
                sb.AppendItem(VatsThresholdItem, "VatsThreshold");
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Keywords)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                sb.AppendLine("Sounds =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Sounds)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static SoundKeywordMapping_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundKeywordMapping_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (SoundKeywordMapping_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (SoundKeywordMapping_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (SoundKeywordMapping_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (SoundKeywordMapping_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (SoundKeywordMapping_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (SoundKeywordMapping_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new SoundKeywordMapping_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundKeywordMapping_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SoundKeywordMapping_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SoundKeywordMapping_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SoundKeywordMapping_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundKeywordMappingGetter? lhs,
            ISoundKeywordMappingGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SoundKeywordMapping_FieldIndex.PrimaryDescriptor) ?? true))
            {
                if (!lhs.PrimaryDescriptor.Equals(rhs.PrimaryDescriptor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundKeywordMapping_FieldIndex.ExteriorTail) ?? true))
            {
                if (!lhs.ExteriorTail.Equals(rhs.ExteriorTail)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundKeywordMapping_FieldIndex.VatsDescriptor) ?? true))
            {
                if (!lhs.VatsDescriptor.Equals(rhs.VatsDescriptor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundKeywordMapping_FieldIndex.VatsThreshold) ?? true))
            {
                if (!lhs.VatsThreshold.EqualsWithin(rhs.VatsThreshold)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundKeywordMapping_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundKeywordMapping_FieldIndex.Sounds) ?? true))
            {
                if (!lhs.Sounds.SequenceEqual(rhs.Sounds, (l, r) => ((MappingSoundCommon)((IMappingSoundGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SoundKeywordMapping_FieldIndex.Sounds)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISoundKeywordMappingGetter?)lhs,
                rhs: rhs as ISoundKeywordMappingGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISoundKeywordMappingGetter?)lhs,
                rhs: rhs as ISoundKeywordMappingGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISoundKeywordMappingGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.PrimaryDescriptor);
            hash.Add(item.ExteriorTail);
            hash.Add(item.VatsDescriptor);
            if (item.VatsThreshold is {} VatsThresholditem)
            {
                hash.Add(VatsThresholditem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.Sounds);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundKeywordMappingGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundKeywordMappingGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SoundKeywordMapping.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISoundKeywordMappingGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.PrimaryDescriptor, out var PrimaryDescriptorInfo))
            {
                yield return PrimaryDescriptorInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ExteriorTail, out var ExteriorTailInfo))
            {
                yield return ExteriorTailInfo;
            }
            if (FormLinkInformation.TryFactory(obj.VatsDescriptor, out var VatsDescriptorInfo))
            {
                yield return VatsDescriptorInfo;
            }
            foreach (var item in obj.Keywords)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Sounds.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public SoundKeywordMapping Duplicate(
            ISoundKeywordMappingGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SoundKeywordMapping(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundKeywordMappingGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundKeywordMappingGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SoundKeywordMappingSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly SoundKeywordMappingSetterTranslationCommon Instance = new SoundKeywordMappingSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundKeywordMappingInternal item,
            ISoundKeywordMappingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISoundKeywordMapping item,
            ISoundKeywordMappingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SoundKeywordMapping_FieldIndex.PrimaryDescriptor) ?? true))
            {
                item.PrimaryDescriptor.SetTo(rhs.PrimaryDescriptor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SoundKeywordMapping_FieldIndex.ExteriorTail) ?? true))
            {
                item.ExteriorTail.SetTo(rhs.ExteriorTail.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SoundKeywordMapping_FieldIndex.VatsDescriptor) ?? true))
            {
                item.VatsDescriptor.SetTo(rhs.VatsDescriptor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SoundKeywordMapping_FieldIndex.VatsThreshold) ?? true))
            {
                item.VatsThreshold = rhs.VatsThreshold;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundKeywordMapping_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)SoundKeywordMapping_FieldIndex.Keywords);
                try
                {
                    item.Keywords.SetTo(
                        rhs.Keywords
                            .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundKeywordMapping_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)SoundKeywordMapping_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetTo(
                        rhs.Sounds
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISoundKeywordMapping item,
            ISoundKeywordMappingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundKeywordMappingInternal)item,
                rhs: (ISoundKeywordMappingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundKeywordMapping)item,
                rhs: (ISoundKeywordMappingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundKeywordMappingInternal)item,
                rhs: (ISoundKeywordMappingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundKeywordMapping)item,
                rhs: (ISoundKeywordMappingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SoundKeywordMapping DeepCopy(
            ISoundKeywordMappingGetter item,
            SoundKeywordMapping.TranslationMask? copyMask = null)
        {
            SoundKeywordMapping ret = (SoundKeywordMapping)((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)item).CommonInstance()!).GetNew();
            ((SoundKeywordMappingSetterTranslationCommon)((ISoundKeywordMappingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundKeywordMapping DeepCopy(
            ISoundKeywordMappingGetter item,
            out SoundKeywordMapping.ErrorMask errorMask,
            SoundKeywordMapping.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundKeywordMapping ret = (SoundKeywordMapping)((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)item).CommonInstance()!).GetNew();
            ((SoundKeywordMappingSetterTranslationCommon)((ISoundKeywordMappingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundKeywordMapping.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundKeywordMapping DeepCopy(
            ISoundKeywordMappingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundKeywordMapping ret = (SoundKeywordMapping)((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)item).CommonInstance()!).GetNew();
            ((SoundKeywordMappingSetterTranslationCommon)((ISoundKeywordMappingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundKeywordMapping
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundKeywordMapping_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundKeywordMapping_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundKeywordMappingCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SoundKeywordMappingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundKeywordMappingSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundKeywordMappingBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SoundKeywordMappingBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISoundKeywordMappingGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PrimaryDescriptor,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ExteriorTail,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VatsDescriptor,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.VatsThreshold,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.Keywords,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.KNAM));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IMappingSoundGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                transl: (MutagenWriter subWriter, IMappingSoundGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((MappingSoundBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ISoundKeywordMappingGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.KSSM,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISoundKeywordMappingGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISoundKeywordMappingGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISoundKeywordMappingGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SoundKeywordMappingBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly SoundKeywordMappingBinaryCreateTranslation Instance = new SoundKeywordMappingBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.KSSM;
        public static ParseResult FillBinaryRecordTypes(
            ISoundKeywordMappingInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PrimaryDescriptor.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SoundKeywordMapping_FieldIndex.PrimaryDescriptor;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ExteriorTail.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SoundKeywordMapping_FieldIndex.ExteriorTail;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VatsDescriptor.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SoundKeywordMapping_FieldIndex.VatsDescriptor;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VatsThreshold = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)SoundKeywordMapping_FieldIndex.VatsThreshold;
                }
                case RecordTypeInts.KNAM:
                {
                    item.Keywords.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)SoundKeywordMapping_FieldIndex.Keywords;
                }
                case RecordTypeInts.RNAM:
                {
                    item.Sounds.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<MappingSound>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: MappingSound_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: MappingSound.TryCreateFromBinary));
                    return (int)SoundKeywordMapping_FieldIndex.Sounds;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SoundKeywordMappingBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class SoundKeywordMappingBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ISoundKeywordMappingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundKeywordMapping_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundKeywordMapping_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundKeywordMappingCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundKeywordMappingSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SoundKeywordMappingCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundKeywordMappingBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundKeywordMappingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISoundKeywordMapping);


        #region PrimaryDescriptor
        private int? _PrimaryDescriptorLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> PrimaryDescriptor => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _PrimaryDescriptorLocation);
        #endregion
        #region ExteriorTail
        private int? _ExteriorTailLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> ExteriorTail => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _ExteriorTailLocation);
        #endregion
        #region VatsDescriptor
        private int? _VatsDescriptorLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> VatsDescriptor => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _VatsDescriptorLocation);
        #endregion
        #region VatsThreshold
        private int? _VatsThresholdLocation;
        public Single? VatsThreshold => _VatsThresholdLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _VatsThresholdLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>> Keywords { get; private set; } = Array.Empty<IFormLinkGetter<IKeywordGetter>>();
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IMappingSoundGetter> Sounds { get; private set; } = Array.Empty<IMappingSoundGetter>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundKeywordMappingBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISoundKeywordMappingGetter SoundKeywordMappingFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SoundKeywordMappingBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISoundKeywordMappingGetter SoundKeywordMappingFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SoundKeywordMappingFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    _PrimaryDescriptorLocation = (stream.Position - offset);
                    return (int)SoundKeywordMapping_FieldIndex.PrimaryDescriptor;
                }
                case RecordTypeInts.ENAM:
                {
                    _ExteriorTailLocation = (stream.Position - offset);
                    return (int)SoundKeywordMapping_FieldIndex.ExteriorTail;
                }
                case RecordTypeInts.VNAM:
                {
                    _VatsDescriptorLocation = (stream.Position - offset);
                    return (int)SoundKeywordMapping_FieldIndex.VatsDescriptor;
                }
                case RecordTypeInts.TNAM:
                {
                    _VatsThresholdLocation = (stream.Position - offset);
                    return (int)SoundKeywordMapping_FieldIndex.VatsThreshold;
                }
                case RecordTypeInts.KNAM:
                {
                    this.Keywords = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IKeywordGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.KNAM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)SoundKeywordMapping_FieldIndex.Keywords;
                }
                case RecordTypeInts.RNAM:
                {
                    this.Sounds = BinaryOverlayList.FactoryByArray<IMappingSoundGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => MappingSoundBinaryOverlay.MappingSoundFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: MappingSound_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)SoundKeywordMapping_FieldIndex.Sounds;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundKeywordMappingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<SoundKeywordMapping>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISoundKeywordMappingGetter rhs) return false;
            return ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundKeywordMappingGetter? obj)
        {
            return ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundKeywordMappingCommon)((ISoundKeywordMappingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

