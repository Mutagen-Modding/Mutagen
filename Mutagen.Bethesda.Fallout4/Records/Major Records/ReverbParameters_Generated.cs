/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ReverbParameters :
        Fallout4MajorRecord,
        IEquatable<IReverbParametersGetter>,
        ILoquiObjectSetter<ReverbParameters>,
        IReverbParametersInternal
    {
        #region Ctor
        protected ReverbParameters()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region DecayMilliseconds
        public UInt16 DecayMilliseconds { get; set; } = default(UInt16);
        #endregion
        #region HfReferenceHertz
        public UInt16 HfReferenceHertz { get; set; } = default(UInt16);
        #endregion
        #region RoomFilter
        public SByte RoomFilter { get; set; } = default(SByte);
        #endregion
        #region RoomHfFilter
        public SByte RoomHfFilter { get; set; } = default(SByte);
        #endregion
        #region Reflections
        public SByte Reflections { get; set; } = default(SByte);
        #endregion
        #region ReverbAmp
        public SByte ReverbAmp { get; set; } = default(SByte);
        #endregion
        #region DecayHfRatio
        public Single DecayHfRatio { get; set; } = default(Single);
        #endregion
        #region ReflectDelayMS
        public Byte ReflectDelayMS { get; set; } = default(Byte);
        #endregion
        #region ReverbDelayMS
        public Byte ReverbDelayMS { get; set; } = default(Byte);
        #endregion
        #region DiffusionPercent
        public Percent DiffusionPercent { get; set; } = default(Percent);
        #endregion
        #region DensityPercent
        public Percent DensityPercent { get; set; } = default(Percent);
        #endregion
        #region Unknown
        public Byte Unknown { get; set; } = default(Byte);
        #endregion
        #region ReverbClass
        public ReverbClass ReverbClass { get; set; } = default(ReverbClass);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ReverbParametersMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.DecayMilliseconds = initialValue;
                this.HfReferenceHertz = initialValue;
                this.RoomFilter = initialValue;
                this.RoomHfFilter = initialValue;
                this.Reflections = initialValue;
                this.ReverbAmp = initialValue;
                this.DecayHfRatio = initialValue;
                this.ReflectDelayMS = initialValue;
                this.ReverbDelayMS = initialValue;
                this.DiffusionPercent = initialValue;
                this.DensityPercent = initialValue;
                this.Unknown = initialValue;
                this.ReverbClass = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem DecayMilliseconds,
                TItem HfReferenceHertz,
                TItem RoomFilter,
                TItem RoomHfFilter,
                TItem Reflections,
                TItem ReverbAmp,
                TItem DecayHfRatio,
                TItem ReflectDelayMS,
                TItem ReverbDelayMS,
                TItem DiffusionPercent,
                TItem DensityPercent,
                TItem Unknown,
                TItem ReverbClass)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.DecayMilliseconds = DecayMilliseconds;
                this.HfReferenceHertz = HfReferenceHertz;
                this.RoomFilter = RoomFilter;
                this.RoomHfFilter = RoomHfFilter;
                this.Reflections = Reflections;
                this.ReverbAmp = ReverbAmp;
                this.DecayHfRatio = DecayHfRatio;
                this.ReflectDelayMS = ReflectDelayMS;
                this.ReverbDelayMS = ReverbDelayMS;
                this.DiffusionPercent = DiffusionPercent;
                this.DensityPercent = DensityPercent;
                this.Unknown = Unknown;
                this.ReverbClass = ReverbClass;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem DecayMilliseconds;
            public TItem HfReferenceHertz;
            public TItem RoomFilter;
            public TItem RoomHfFilter;
            public TItem Reflections;
            public TItem ReverbAmp;
            public TItem DecayHfRatio;
            public TItem ReflectDelayMS;
            public TItem ReverbDelayMS;
            public TItem DiffusionPercent;
            public TItem DensityPercent;
            public TItem Unknown;
            public TItem ReverbClass;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.DecayMilliseconds, rhs.DecayMilliseconds)) return false;
                if (!object.Equals(this.HfReferenceHertz, rhs.HfReferenceHertz)) return false;
                if (!object.Equals(this.RoomFilter, rhs.RoomFilter)) return false;
                if (!object.Equals(this.RoomHfFilter, rhs.RoomHfFilter)) return false;
                if (!object.Equals(this.Reflections, rhs.Reflections)) return false;
                if (!object.Equals(this.ReverbAmp, rhs.ReverbAmp)) return false;
                if (!object.Equals(this.DecayHfRatio, rhs.DecayHfRatio)) return false;
                if (!object.Equals(this.ReflectDelayMS, rhs.ReflectDelayMS)) return false;
                if (!object.Equals(this.ReverbDelayMS, rhs.ReverbDelayMS)) return false;
                if (!object.Equals(this.DiffusionPercent, rhs.DiffusionPercent)) return false;
                if (!object.Equals(this.DensityPercent, rhs.DensityPercent)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.ReverbClass, rhs.ReverbClass)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.DecayMilliseconds);
                hash.Add(this.HfReferenceHertz);
                hash.Add(this.RoomFilter);
                hash.Add(this.RoomHfFilter);
                hash.Add(this.Reflections);
                hash.Add(this.ReverbAmp);
                hash.Add(this.DecayHfRatio);
                hash.Add(this.ReflectDelayMS);
                hash.Add(this.ReverbDelayMS);
                hash.Add(this.DiffusionPercent);
                hash.Add(this.DensityPercent);
                hash.Add(this.Unknown);
                hash.Add(this.ReverbClass);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.DecayMilliseconds)) return false;
                if (!eval(this.HfReferenceHertz)) return false;
                if (!eval(this.RoomFilter)) return false;
                if (!eval(this.RoomHfFilter)) return false;
                if (!eval(this.Reflections)) return false;
                if (!eval(this.ReverbAmp)) return false;
                if (!eval(this.DecayHfRatio)) return false;
                if (!eval(this.ReflectDelayMS)) return false;
                if (!eval(this.ReverbDelayMS)) return false;
                if (!eval(this.DiffusionPercent)) return false;
                if (!eval(this.DensityPercent)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.ReverbClass)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.DecayMilliseconds)) return true;
                if (eval(this.HfReferenceHertz)) return true;
                if (eval(this.RoomFilter)) return true;
                if (eval(this.RoomHfFilter)) return true;
                if (eval(this.Reflections)) return true;
                if (eval(this.ReverbAmp)) return true;
                if (eval(this.DecayHfRatio)) return true;
                if (eval(this.ReflectDelayMS)) return true;
                if (eval(this.ReverbDelayMS)) return true;
                if (eval(this.DiffusionPercent)) return true;
                if (eval(this.DensityPercent)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.ReverbClass)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ReverbParameters.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.DecayMilliseconds = eval(this.DecayMilliseconds);
                obj.HfReferenceHertz = eval(this.HfReferenceHertz);
                obj.RoomFilter = eval(this.RoomFilter);
                obj.RoomHfFilter = eval(this.RoomHfFilter);
                obj.Reflections = eval(this.Reflections);
                obj.ReverbAmp = eval(this.ReverbAmp);
                obj.DecayHfRatio = eval(this.DecayHfRatio);
                obj.ReflectDelayMS = eval(this.ReflectDelayMS);
                obj.ReverbDelayMS = eval(this.ReverbDelayMS);
                obj.DiffusionPercent = eval(this.DiffusionPercent);
                obj.DensityPercent = eval(this.DensityPercent);
                obj.Unknown = eval(this.Unknown);
                obj.ReverbClass = eval(this.ReverbClass);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ReverbParameters.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ReverbParameters.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ReverbParameters.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.DecayMilliseconds ?? true)
                    {
                        sb.AppendItem(DecayMilliseconds, "DecayMilliseconds");
                    }
                    if (printMask?.HfReferenceHertz ?? true)
                    {
                        sb.AppendItem(HfReferenceHertz, "HfReferenceHertz");
                    }
                    if (printMask?.RoomFilter ?? true)
                    {
                        sb.AppendItem(RoomFilter, "RoomFilter");
                    }
                    if (printMask?.RoomHfFilter ?? true)
                    {
                        sb.AppendItem(RoomHfFilter, "RoomHfFilter");
                    }
                    if (printMask?.Reflections ?? true)
                    {
                        sb.AppendItem(Reflections, "Reflections");
                    }
                    if (printMask?.ReverbAmp ?? true)
                    {
                        sb.AppendItem(ReverbAmp, "ReverbAmp");
                    }
                    if (printMask?.DecayHfRatio ?? true)
                    {
                        sb.AppendItem(DecayHfRatio, "DecayHfRatio");
                    }
                    if (printMask?.ReflectDelayMS ?? true)
                    {
                        sb.AppendItem(ReflectDelayMS, "ReflectDelayMS");
                    }
                    if (printMask?.ReverbDelayMS ?? true)
                    {
                        sb.AppendItem(ReverbDelayMS, "ReverbDelayMS");
                    }
                    if (printMask?.DiffusionPercent ?? true)
                    {
                        sb.AppendItem(DiffusionPercent, "DiffusionPercent");
                    }
                    if (printMask?.DensityPercent ?? true)
                    {
                        sb.AppendItem(DensityPercent, "DensityPercent");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.ReverbClass ?? true)
                    {
                        sb.AppendItem(ReverbClass, "ReverbClass");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? DecayMilliseconds;
            public Exception? HfReferenceHertz;
            public Exception? RoomFilter;
            public Exception? RoomHfFilter;
            public Exception? Reflections;
            public Exception? ReverbAmp;
            public Exception? DecayHfRatio;
            public Exception? ReflectDelayMS;
            public Exception? ReverbDelayMS;
            public Exception? DiffusionPercent;
            public Exception? DensityPercent;
            public Exception? Unknown;
            public Exception? ReverbClass;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ReverbParameters_FieldIndex enu = (ReverbParameters_FieldIndex)index;
                switch (enu)
                {
                    case ReverbParameters_FieldIndex.DecayMilliseconds:
                        return DecayMilliseconds;
                    case ReverbParameters_FieldIndex.HfReferenceHertz:
                        return HfReferenceHertz;
                    case ReverbParameters_FieldIndex.RoomFilter:
                        return RoomFilter;
                    case ReverbParameters_FieldIndex.RoomHfFilter:
                        return RoomHfFilter;
                    case ReverbParameters_FieldIndex.Reflections:
                        return Reflections;
                    case ReverbParameters_FieldIndex.ReverbAmp:
                        return ReverbAmp;
                    case ReverbParameters_FieldIndex.DecayHfRatio:
                        return DecayHfRatio;
                    case ReverbParameters_FieldIndex.ReflectDelayMS:
                        return ReflectDelayMS;
                    case ReverbParameters_FieldIndex.ReverbDelayMS:
                        return ReverbDelayMS;
                    case ReverbParameters_FieldIndex.DiffusionPercent:
                        return DiffusionPercent;
                    case ReverbParameters_FieldIndex.DensityPercent:
                        return DensityPercent;
                    case ReverbParameters_FieldIndex.Unknown:
                        return Unknown;
                    case ReverbParameters_FieldIndex.ReverbClass:
                        return ReverbClass;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ReverbParameters_FieldIndex enu = (ReverbParameters_FieldIndex)index;
                switch (enu)
                {
                    case ReverbParameters_FieldIndex.DecayMilliseconds:
                        this.DecayMilliseconds = ex;
                        break;
                    case ReverbParameters_FieldIndex.HfReferenceHertz:
                        this.HfReferenceHertz = ex;
                        break;
                    case ReverbParameters_FieldIndex.RoomFilter:
                        this.RoomFilter = ex;
                        break;
                    case ReverbParameters_FieldIndex.RoomHfFilter:
                        this.RoomHfFilter = ex;
                        break;
                    case ReverbParameters_FieldIndex.Reflections:
                        this.Reflections = ex;
                        break;
                    case ReverbParameters_FieldIndex.ReverbAmp:
                        this.ReverbAmp = ex;
                        break;
                    case ReverbParameters_FieldIndex.DecayHfRatio:
                        this.DecayHfRatio = ex;
                        break;
                    case ReverbParameters_FieldIndex.ReflectDelayMS:
                        this.ReflectDelayMS = ex;
                        break;
                    case ReverbParameters_FieldIndex.ReverbDelayMS:
                        this.ReverbDelayMS = ex;
                        break;
                    case ReverbParameters_FieldIndex.DiffusionPercent:
                        this.DiffusionPercent = ex;
                        break;
                    case ReverbParameters_FieldIndex.DensityPercent:
                        this.DensityPercent = ex;
                        break;
                    case ReverbParameters_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case ReverbParameters_FieldIndex.ReverbClass:
                        this.ReverbClass = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ReverbParameters_FieldIndex enu = (ReverbParameters_FieldIndex)index;
                switch (enu)
                {
                    case ReverbParameters_FieldIndex.DecayMilliseconds:
                        this.DecayMilliseconds = (Exception?)obj;
                        break;
                    case ReverbParameters_FieldIndex.HfReferenceHertz:
                        this.HfReferenceHertz = (Exception?)obj;
                        break;
                    case ReverbParameters_FieldIndex.RoomFilter:
                        this.RoomFilter = (Exception?)obj;
                        break;
                    case ReverbParameters_FieldIndex.RoomHfFilter:
                        this.RoomHfFilter = (Exception?)obj;
                        break;
                    case ReverbParameters_FieldIndex.Reflections:
                        this.Reflections = (Exception?)obj;
                        break;
                    case ReverbParameters_FieldIndex.ReverbAmp:
                        this.ReverbAmp = (Exception?)obj;
                        break;
                    case ReverbParameters_FieldIndex.DecayHfRatio:
                        this.DecayHfRatio = (Exception?)obj;
                        break;
                    case ReverbParameters_FieldIndex.ReflectDelayMS:
                        this.ReflectDelayMS = (Exception?)obj;
                        break;
                    case ReverbParameters_FieldIndex.ReverbDelayMS:
                        this.ReverbDelayMS = (Exception?)obj;
                        break;
                    case ReverbParameters_FieldIndex.DiffusionPercent:
                        this.DiffusionPercent = (Exception?)obj;
                        break;
                    case ReverbParameters_FieldIndex.DensityPercent:
                        this.DensityPercent = (Exception?)obj;
                        break;
                    case ReverbParameters_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case ReverbParameters_FieldIndex.ReverbClass:
                        this.ReverbClass = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (DecayMilliseconds != null) return true;
                if (HfReferenceHertz != null) return true;
                if (RoomFilter != null) return true;
                if (RoomHfFilter != null) return true;
                if (Reflections != null) return true;
                if (ReverbAmp != null) return true;
                if (DecayHfRatio != null) return true;
                if (ReflectDelayMS != null) return true;
                if (ReverbDelayMS != null) return true;
                if (DiffusionPercent != null) return true;
                if (DensityPercent != null) return true;
                if (Unknown != null) return true;
                if (ReverbClass != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(DecayMilliseconds, "DecayMilliseconds");
                }
                {
                    sb.AppendItem(HfReferenceHertz, "HfReferenceHertz");
                }
                {
                    sb.AppendItem(RoomFilter, "RoomFilter");
                }
                {
                    sb.AppendItem(RoomHfFilter, "RoomHfFilter");
                }
                {
                    sb.AppendItem(Reflections, "Reflections");
                }
                {
                    sb.AppendItem(ReverbAmp, "ReverbAmp");
                }
                {
                    sb.AppendItem(DecayHfRatio, "DecayHfRatio");
                }
                {
                    sb.AppendItem(ReflectDelayMS, "ReflectDelayMS");
                }
                {
                    sb.AppendItem(ReverbDelayMS, "ReverbDelayMS");
                }
                {
                    sb.AppendItem(DiffusionPercent, "DiffusionPercent");
                }
                {
                    sb.AppendItem(DensityPercent, "DensityPercent");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(ReverbClass, "ReverbClass");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.DecayMilliseconds = this.DecayMilliseconds.Combine(rhs.DecayMilliseconds);
                ret.HfReferenceHertz = this.HfReferenceHertz.Combine(rhs.HfReferenceHertz);
                ret.RoomFilter = this.RoomFilter.Combine(rhs.RoomFilter);
                ret.RoomHfFilter = this.RoomHfFilter.Combine(rhs.RoomHfFilter);
                ret.Reflections = this.Reflections.Combine(rhs.Reflections);
                ret.ReverbAmp = this.ReverbAmp.Combine(rhs.ReverbAmp);
                ret.DecayHfRatio = this.DecayHfRatio.Combine(rhs.DecayHfRatio);
                ret.ReflectDelayMS = this.ReflectDelayMS.Combine(rhs.ReflectDelayMS);
                ret.ReverbDelayMS = this.ReverbDelayMS.Combine(rhs.ReverbDelayMS);
                ret.DiffusionPercent = this.DiffusionPercent.Combine(rhs.DiffusionPercent);
                ret.DensityPercent = this.DensityPercent.Combine(rhs.DensityPercent);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.ReverbClass = this.ReverbClass.Combine(rhs.ReverbClass);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool DecayMilliseconds;
            public bool HfReferenceHertz;
            public bool RoomFilter;
            public bool RoomHfFilter;
            public bool Reflections;
            public bool ReverbAmp;
            public bool DecayHfRatio;
            public bool ReflectDelayMS;
            public bool ReverbDelayMS;
            public bool DiffusionPercent;
            public bool DensityPercent;
            public bool Unknown;
            public bool ReverbClass;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DecayMilliseconds = defaultOn;
                this.HfReferenceHertz = defaultOn;
                this.RoomFilter = defaultOn;
                this.RoomHfFilter = defaultOn;
                this.Reflections = defaultOn;
                this.ReverbAmp = defaultOn;
                this.DecayHfRatio = defaultOn;
                this.ReflectDelayMS = defaultOn;
                this.ReverbDelayMS = defaultOn;
                this.DiffusionPercent = defaultOn;
                this.DensityPercent = defaultOn;
                this.Unknown = defaultOn;
                this.ReverbClass = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((DecayMilliseconds, null));
                ret.Add((HfReferenceHertz, null));
                ret.Add((RoomFilter, null));
                ret.Add((RoomHfFilter, null));
                ret.Add((Reflections, null));
                ret.Add((ReverbAmp, null));
                ret.Add((DecayHfRatio, null));
                ret.Add((ReflectDelayMS, null));
                ret.Add((ReverbDelayMS, null));
                ret.Add((DiffusionPercent, null));
                ret.Add((DensityPercent, null));
                ret.Add((Unknown, null));
                ret.Add((ReverbClass, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ReverbParameters_Registration.TriggeringRecordType;
        public ReverbParameters(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ReverbParameters(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ReverbParameters(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ReverbParameters(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public ReverbParameters(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ReverbParameters>.ToString(this);
        }

        protected override Type LinkType => typeof(IReverbParameters);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IReverbParametersGetter rhs) return false;
            return ((ReverbParametersCommon)((IReverbParametersGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IReverbParametersGetter? obj)
        {
            return ((ReverbParametersCommon)((IReverbParametersGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ReverbParametersCommon)((IReverbParametersGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ReverbParametersBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ReverbParametersBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ReverbParameters CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ReverbParameters();
            ((ReverbParametersSetterCommon)((IReverbParametersGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ReverbParameters item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ReverbParametersSetterCommon)((IReverbParametersGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ReverbParameters GetNew()
        {
            return new ReverbParameters();
        }

    }
    #endregion

    #region Interface
    public partial interface IReverbParameters :
        IFallout4MajorRecordInternal,
        ILoquiObjectSetter<IReverbParametersInternal>,
        IReverbParametersGetter
    {
        new UInt16 DecayMilliseconds { get; set; }
        new UInt16 HfReferenceHertz { get; set; }
        new SByte RoomFilter { get; set; }
        new SByte RoomHfFilter { get; set; }
        new SByte Reflections { get; set; }
        new SByte ReverbAmp { get; set; }
        new Single DecayHfRatio { get; set; }
        new Byte ReflectDelayMS { get; set; }
        new Byte ReverbDelayMS { get; set; }
        new Percent DiffusionPercent { get; set; }
        new Percent DensityPercent { get; set; }
        new Byte Unknown { get; set; }
        new ReverbClass ReverbClass { get; set; }
    }

    public partial interface IReverbParametersInternal :
        IFallout4MajorRecordInternal,
        IReverbParameters,
        IReverbParametersGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.REVB)]
    public partial interface IReverbParametersGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IReverbParametersGetter>,
        IMapsToGetter<IReverbParametersGetter>
    {
        static new ILoquiRegistration StaticRegistration => ReverbParameters_Registration.Instance;
        UInt16 DecayMilliseconds { get; }
        UInt16 HfReferenceHertz { get; }
        SByte RoomFilter { get; }
        SByte RoomHfFilter { get; }
        SByte Reflections { get; }
        SByte ReverbAmp { get; }
        Single DecayHfRatio { get; }
        Byte ReflectDelayMS { get; }
        Byte ReverbDelayMS { get; }
        Percent DiffusionPercent { get; }
        Percent DensityPercent { get; }
        Byte Unknown { get; }
        ReverbClass ReverbClass { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ReverbParametersMixIn
    {
        public static void Clear(this IReverbParametersInternal item)
        {
            ((ReverbParametersSetterCommon)((IReverbParametersGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ReverbParameters.Mask<bool> GetEqualsMask(
            this IReverbParametersGetter item,
            IReverbParametersGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ReverbParametersCommon)((IReverbParametersGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IReverbParametersGetter item,
            string? name = null,
            ReverbParameters.Mask<bool>? printMask = null)
        {
            return ((ReverbParametersCommon)((IReverbParametersGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IReverbParametersGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ReverbParameters.Mask<bool>? printMask = null)
        {
            ((ReverbParametersCommon)((IReverbParametersGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IReverbParametersGetter item,
            IReverbParametersGetter rhs,
            ReverbParameters.TranslationMask? equalsMask = null)
        {
            return ((ReverbParametersCommon)((IReverbParametersGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IReverbParametersInternal lhs,
            IReverbParametersGetter rhs,
            out ReverbParameters.ErrorMask errorMask,
            ReverbParameters.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ReverbParametersSetterTranslationCommon)((IReverbParametersGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ReverbParameters.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IReverbParametersInternal lhs,
            IReverbParametersGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ReverbParametersSetterTranslationCommon)((IReverbParametersGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ReverbParameters DeepCopy(
            this IReverbParametersGetter item,
            ReverbParameters.TranslationMask? copyMask = null)
        {
            return ((ReverbParametersSetterTranslationCommon)((IReverbParametersGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ReverbParameters DeepCopy(
            this IReverbParametersGetter item,
            out ReverbParameters.ErrorMask errorMask,
            ReverbParameters.TranslationMask? copyMask = null)
        {
            return ((ReverbParametersSetterTranslationCommon)((IReverbParametersGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ReverbParameters DeepCopy(
            this IReverbParametersGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ReverbParametersSetterTranslationCommon)((IReverbParametersGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ReverbParameters Duplicate(
            this IReverbParametersGetter item,
            FormKey formKey,
            ReverbParameters.TranslationMask? copyMask = null)
        {
            return ((ReverbParametersCommon)((IReverbParametersGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ReverbParameters Duplicate(
            this IReverbParametersGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ReverbParametersCommon)((IReverbParametersGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IReverbParametersInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ReverbParametersSetterCommon)((IReverbParametersGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum ReverbParameters_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        DecayMilliseconds = 7,
        HfReferenceHertz = 8,
        RoomFilter = 9,
        RoomHfFilter = 10,
        Reflections = 11,
        ReverbAmp = 12,
        DecayHfRatio = 13,
        ReflectDelayMS = 14,
        ReverbDelayMS = 15,
        DiffusionPercent = 16,
        DensityPercent = 17,
        Unknown = 18,
        ReverbClass = 19,
    }
    #endregion

    #region Registration
    internal partial class ReverbParameters_Registration : ILoquiRegistration
    {
        public static readonly ReverbParameters_Registration Instance = new ReverbParameters_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(ReverbParameters.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ReverbParameters.ErrorMask);

        public static readonly Type ClassType = typeof(ReverbParameters);

        public static readonly Type GetterType = typeof(IReverbParametersGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IReverbParameters);

        public static readonly Type? InternalSetterType = typeof(IReverbParametersInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.ReverbParameters";

        public const string Name = "ReverbParameters";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.REVB;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.REVB);
            var all = RecordCollection.Factory(
                RecordTypes.REVB,
                RecordTypes.DATA,
                RecordTypes.ANAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ReverbParametersBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ReverbParametersSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ReverbParametersSetterCommon Instance = new ReverbParametersSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IReverbParametersInternal item)
        {
            ClearPartial();
            item.DecayMilliseconds = default(UInt16);
            item.HfReferenceHertz = default(UInt16);
            item.RoomFilter = default(SByte);
            item.RoomHfFilter = default(SByte);
            item.Reflections = default(SByte);
            item.ReverbAmp = default(SByte);
            item.DecayHfRatio = default(Single);
            item.ReflectDelayMS = default(Byte);
            item.ReverbDelayMS = default(Byte);
            item.DiffusionPercent = default(Percent);
            item.DensityPercent = default(Percent);
            item.Unknown = default(Byte);
            item.ReverbClass = default(ReverbClass);
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IReverbParametersInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IReverbParametersInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IReverbParameters obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IReverbParametersInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IReverbParametersInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ReverbParametersBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ReverbParametersBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ReverbParameters)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ReverbParameters)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ReverbParametersCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ReverbParametersCommon Instance = new ReverbParametersCommon();

        public ReverbParameters.Mask<bool> GetEqualsMask(
            IReverbParametersGetter item,
            IReverbParametersGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ReverbParameters.Mask<bool>(false);
            ((ReverbParametersCommon)((IReverbParametersGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IReverbParametersGetter item,
            IReverbParametersGetter rhs,
            ReverbParameters.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.DecayMilliseconds = item.DecayMilliseconds == rhs.DecayMilliseconds;
            ret.HfReferenceHertz = item.HfReferenceHertz == rhs.HfReferenceHertz;
            ret.RoomFilter = item.RoomFilter == rhs.RoomFilter;
            ret.RoomHfFilter = item.RoomHfFilter == rhs.RoomHfFilter;
            ret.Reflections = item.Reflections == rhs.Reflections;
            ret.ReverbAmp = item.ReverbAmp == rhs.ReverbAmp;
            ret.DecayHfRatio = item.DecayHfRatio.EqualsWithin(rhs.DecayHfRatio);
            ret.ReflectDelayMS = item.ReflectDelayMS == rhs.ReflectDelayMS;
            ret.ReverbDelayMS = item.ReverbDelayMS == rhs.ReverbDelayMS;
            ret.DiffusionPercent = item.DiffusionPercent.Equals(rhs.DiffusionPercent);
            ret.DensityPercent = item.DensityPercent.Equals(rhs.DensityPercent);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.ReverbClass = item.ReverbClass == rhs.ReverbClass;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IReverbParametersGetter item,
            string? name = null,
            ReverbParameters.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IReverbParametersGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ReverbParameters.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ReverbParameters =>");
            }
            else
            {
                sb.AppendLine($"{name} (ReverbParameters) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IReverbParametersGetter item,
            StructuredStringBuilder sb,
            ReverbParameters.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.DecayMilliseconds ?? true)
            {
                sb.AppendItem(item.DecayMilliseconds, "DecayMilliseconds");
            }
            if (printMask?.HfReferenceHertz ?? true)
            {
                sb.AppendItem(item.HfReferenceHertz, "HfReferenceHertz");
            }
            if (printMask?.RoomFilter ?? true)
            {
                sb.AppendItem(item.RoomFilter, "RoomFilter");
            }
            if (printMask?.RoomHfFilter ?? true)
            {
                sb.AppendItem(item.RoomHfFilter, "RoomHfFilter");
            }
            if (printMask?.Reflections ?? true)
            {
                sb.AppendItem(item.Reflections, "Reflections");
            }
            if (printMask?.ReverbAmp ?? true)
            {
                sb.AppendItem(item.ReverbAmp, "ReverbAmp");
            }
            if (printMask?.DecayHfRatio ?? true)
            {
                sb.AppendItem(item.DecayHfRatio, "DecayHfRatio");
            }
            if (printMask?.ReflectDelayMS ?? true)
            {
                sb.AppendItem(item.ReflectDelayMS, "ReflectDelayMS");
            }
            if (printMask?.ReverbDelayMS ?? true)
            {
                sb.AppendItem(item.ReverbDelayMS, "ReverbDelayMS");
            }
            if (printMask?.DiffusionPercent ?? true)
            {
                sb.AppendItem(item.DiffusionPercent, "DiffusionPercent");
            }
            if (printMask?.DensityPercent ?? true)
            {
                sb.AppendItem(item.DensityPercent, "DensityPercent");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.ReverbClass ?? true)
            {
                sb.AppendItem(item.ReverbClass, "ReverbClass");
            }
        }
        
        public static ReverbParameters_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ReverbParameters_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (ReverbParameters_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (ReverbParameters_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (ReverbParameters_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (ReverbParameters_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (ReverbParameters_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (ReverbParameters_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ReverbParameters_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ReverbParameters_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ReverbParameters_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ReverbParameters_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ReverbParameters_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IReverbParametersGetter? lhs,
            IReverbParametersGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.DecayMilliseconds) ?? true))
            {
                if (lhs.DecayMilliseconds != rhs.DecayMilliseconds) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.HfReferenceHertz) ?? true))
            {
                if (lhs.HfReferenceHertz != rhs.HfReferenceHertz) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.RoomFilter) ?? true))
            {
                if (lhs.RoomFilter != rhs.RoomFilter) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.RoomHfFilter) ?? true))
            {
                if (lhs.RoomHfFilter != rhs.RoomHfFilter) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.Reflections) ?? true))
            {
                if (lhs.Reflections != rhs.Reflections) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.ReverbAmp) ?? true))
            {
                if (lhs.ReverbAmp != rhs.ReverbAmp) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.DecayHfRatio) ?? true))
            {
                if (!lhs.DecayHfRatio.EqualsWithin(rhs.DecayHfRatio)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.ReflectDelayMS) ?? true))
            {
                if (lhs.ReflectDelayMS != rhs.ReflectDelayMS) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.ReverbDelayMS) ?? true))
            {
                if (lhs.ReverbDelayMS != rhs.ReverbDelayMS) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.DiffusionPercent) ?? true))
            {
                if (!lhs.DiffusionPercent.Equals(rhs.DiffusionPercent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.DensityPercent) ?? true))
            {
                if (!lhs.DensityPercent.Equals(rhs.DensityPercent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.ReverbClass) ?? true))
            {
                if (lhs.ReverbClass != rhs.ReverbClass) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IReverbParametersGetter?)lhs,
                rhs: rhs as IReverbParametersGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IReverbParametersGetter?)lhs,
                rhs: rhs as IReverbParametersGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IReverbParametersGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.DecayMilliseconds);
            hash.Add(item.HfReferenceHertz);
            hash.Add(item.RoomFilter);
            hash.Add(item.RoomHfFilter);
            hash.Add(item.Reflections);
            hash.Add(item.ReverbAmp);
            hash.Add(item.DecayHfRatio);
            hash.Add(item.ReflectDelayMS);
            hash.Add(item.ReverbDelayMS);
            hash.Add(item.DiffusionPercent);
            hash.Add(item.DensityPercent);
            hash.Add(item.Unknown);
            hash.Add(item.ReverbClass);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IReverbParametersGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IReverbParametersGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ReverbParameters.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IReverbParametersGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public ReverbParameters Duplicate(
            IReverbParametersGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ReverbParameters(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IReverbParametersGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IReverbParametersGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ReverbParametersSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ReverbParametersSetterTranslationCommon Instance = new ReverbParametersSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IReverbParametersInternal item,
            IReverbParametersGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IReverbParameters item,
            IReverbParametersGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.DecayMilliseconds) ?? true))
            {
                item.DecayMilliseconds = rhs.DecayMilliseconds;
            }
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.HfReferenceHertz) ?? true))
            {
                item.HfReferenceHertz = rhs.HfReferenceHertz;
            }
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.RoomFilter) ?? true))
            {
                item.RoomFilter = rhs.RoomFilter;
            }
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.RoomHfFilter) ?? true))
            {
                item.RoomHfFilter = rhs.RoomHfFilter;
            }
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.Reflections) ?? true))
            {
                item.Reflections = rhs.Reflections;
            }
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.ReverbAmp) ?? true))
            {
                item.ReverbAmp = rhs.ReverbAmp;
            }
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.DecayHfRatio) ?? true))
            {
                item.DecayHfRatio = rhs.DecayHfRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.ReflectDelayMS) ?? true))
            {
                item.ReflectDelayMS = rhs.ReflectDelayMS;
            }
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.ReverbDelayMS) ?? true))
            {
                item.ReverbDelayMS = rhs.ReverbDelayMS;
            }
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.DiffusionPercent) ?? true))
            {
                item.DiffusionPercent = rhs.DiffusionPercent;
            }
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.DensityPercent) ?? true))
            {
                item.DensityPercent = rhs.DensityPercent;
            }
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)ReverbParameters_FieldIndex.ReverbClass) ?? true))
            {
                item.ReverbClass = rhs.ReverbClass;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IReverbParameters item,
            IReverbParametersGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IReverbParametersInternal)item,
                rhs: (IReverbParametersGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IReverbParameters)item,
                rhs: (IReverbParametersGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IReverbParametersInternal)item,
                rhs: (IReverbParametersGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IReverbParameters)item,
                rhs: (IReverbParametersGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ReverbParameters DeepCopy(
            IReverbParametersGetter item,
            ReverbParameters.TranslationMask? copyMask = null)
        {
            ReverbParameters ret = (ReverbParameters)((ReverbParametersCommon)((IReverbParametersGetter)item).CommonInstance()!).GetNew();
            ((ReverbParametersSetterTranslationCommon)((IReverbParametersGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ReverbParameters DeepCopy(
            IReverbParametersGetter item,
            out ReverbParameters.ErrorMask errorMask,
            ReverbParameters.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ReverbParameters ret = (ReverbParameters)((ReverbParametersCommon)((IReverbParametersGetter)item).CommonInstance()!).GetNew();
            ((ReverbParametersSetterTranslationCommon)((IReverbParametersGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ReverbParameters.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ReverbParameters DeepCopy(
            IReverbParametersGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ReverbParameters ret = (ReverbParameters)((ReverbParametersCommon)((IReverbParametersGetter)item).CommonInstance()!).GetNew();
            ((ReverbParametersSetterTranslationCommon)((IReverbParametersGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ReverbParameters
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ReverbParameters_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ReverbParameters_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ReverbParametersCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ReverbParametersSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ReverbParametersSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class ReverbParametersBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ReverbParametersBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IReverbParametersGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.DecayMilliseconds);
                writer.Write(item.HfReferenceHertz);
                writer.Write(item.RoomFilter);
                writer.Write(item.RoomHfFilter);
                writer.Write(item.Reflections);
                writer.Write(item.ReverbAmp);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DecayHfRatio,
                    integerType: FloatIntegerType.Byte,
                    multiplier: 100f,
                    divisor: null);
                writer.Write(item.ReflectDelayMS);
                writer.Write(item.ReverbDelayMS);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.DiffusionPercent,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.DensityPercent,
                    integerType: FloatIntegerType.Byte);
                writer.Write(item.Unknown);
            }
            EnumBinaryTranslation<ReverbClass, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.ReverbClass,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
        }

        public void Write(
            MutagenWriter writer,
            IReverbParametersGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.REVB,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IReverbParametersGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IReverbParametersGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IReverbParametersGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ReverbParametersBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly ReverbParametersBinaryCreateTranslation Instance = new ReverbParametersBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.REVB;
        public static ParseResult FillBinaryRecordTypes(
            IReverbParametersInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 2) return null;
                    item.DecayMilliseconds = dataFrame.ReadUInt16();
                    if (dataFrame.Remaining < 2) return null;
                    item.HfReferenceHertz = dataFrame.ReadUInt16();
                    if (dataFrame.Remaining < 1) return null;
                    item.RoomFilter = dataFrame.ReadInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.RoomHfFilter = dataFrame.ReadInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.Reflections = dataFrame.ReadInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.ReverbAmp = dataFrame.ReadInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.DecayHfRatio = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte,
                        multiplier: null,
                        divisor: 100f);
                    if (dataFrame.Remaining < 1) return null;
                    item.ReflectDelayMS = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.ReverbDelayMS = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.DiffusionPercent = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.DensityPercent = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.Unknown = dataFrame.ReadUInt8();
                    return (int)ReverbParameters_FieldIndex.Unknown;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ReverbClass = EnumBinaryTranslation<ReverbClass, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)ReverbParameters_FieldIndex.ReverbClass;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ReverbParametersBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class ReverbParametersBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IReverbParametersGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ReverbParameters_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ReverbParameters_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ReverbParametersCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ReverbParametersSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ReverbParametersBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ReverbParametersBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IReverbParameters);


        private RangeInt32? _DATALocation;
        #region DecayMilliseconds
        private int _DecayMillisecondsLocation => _DATALocation!.Value.Min;
        private bool _DecayMilliseconds_IsSet => _DATALocation.HasValue;
        public UInt16 DecayMilliseconds => _DecayMilliseconds_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_DecayMillisecondsLocation, 2)) : default(UInt16);
        #endregion
        #region HfReferenceHertz
        private int _HfReferenceHertzLocation => _DATALocation!.Value.Min + 0x2;
        private bool _HfReferenceHertz_IsSet => _DATALocation.HasValue;
        public UInt16 HfReferenceHertz => _HfReferenceHertz_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_HfReferenceHertzLocation, 2)) : default(UInt16);
        #endregion
        #region RoomFilter
        private int _RoomFilterLocation => _DATALocation!.Value.Min + 0x4;
        private bool _RoomFilter_IsSet => _DATALocation.HasValue;
        public SByte RoomFilter => _RoomFilter_IsSet ? (sbyte)_recordData.Slice(_RoomFilterLocation, 1)[0] : default(SByte);
        #endregion
        #region RoomHfFilter
        private int _RoomHfFilterLocation => _DATALocation!.Value.Min + 0x5;
        private bool _RoomHfFilter_IsSet => _DATALocation.HasValue;
        public SByte RoomHfFilter => _RoomHfFilter_IsSet ? (sbyte)_recordData.Slice(_RoomHfFilterLocation, 1)[0] : default(SByte);
        #endregion
        #region Reflections
        private int _ReflectionsLocation => _DATALocation!.Value.Min + 0x6;
        private bool _Reflections_IsSet => _DATALocation.HasValue;
        public SByte Reflections => _Reflections_IsSet ? (sbyte)_recordData.Slice(_ReflectionsLocation, 1)[0] : default(SByte);
        #endregion
        #region ReverbAmp
        private int _ReverbAmpLocation => _DATALocation!.Value.Min + 0x7;
        private bool _ReverbAmp_IsSet => _DATALocation.HasValue;
        public SByte ReverbAmp => _ReverbAmp_IsSet ? (sbyte)_recordData.Slice(_ReverbAmpLocation, 1)[0] : default(SByte);
        #endregion
        #region DecayHfRatio
        private int _DecayHfRatioLocation => _DATALocation!.Value.Min + 0x8;
        private bool _DecayHfRatio_IsSet => _DATALocation.HasValue;
        public Single DecayHfRatio => _DecayHfRatio_IsSet ? FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.GetFloat(_recordData.Slice(_DecayHfRatioLocation, 1), FloatIntegerType.Byte, multiplier: null, divisor: 100f) : default(Single);
        #endregion
        #region ReflectDelayMS
        private int _ReflectDelayMSLocation => _DATALocation!.Value.Min + 0x9;
        private bool _ReflectDelayMS_IsSet => _DATALocation.HasValue;
        public Byte ReflectDelayMS => _ReflectDelayMS_IsSet ? _recordData.Span[_ReflectDelayMSLocation] : default;
        #endregion
        #region ReverbDelayMS
        private int _ReverbDelayMSLocation => _DATALocation!.Value.Min + 0xA;
        private bool _ReverbDelayMS_IsSet => _DATALocation.HasValue;
        public Byte ReverbDelayMS => _ReverbDelayMS_IsSet ? _recordData.Span[_ReverbDelayMSLocation] : default;
        #endregion
        #region DiffusionPercent
        private int _DiffusionPercentLocation => _DATALocation!.Value.Min + 0xB;
        private bool _DiffusionPercent_IsSet => _DATALocation.HasValue;
        public Percent DiffusionPercent => _DiffusionPercent_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_DiffusionPercentLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region DensityPercent
        private int _DensityPercentLocation => _DATALocation!.Value.Min + 0xC;
        private bool _DensityPercent_IsSet => _DATALocation.HasValue;
        public Percent DensityPercent => _DensityPercent_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_DensityPercentLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value.Min + 0xD;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public Byte Unknown => _Unknown_IsSet ? _recordData.Span[_UnknownLocation] : default;
        #endregion
        #region ReverbClass
        private int? _ReverbClassLocation;
        public ReverbClass ReverbClass => _ReverbClassLocation.HasValue ? (ReverbClass)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ReverbClassLocation!.Value, _package.MetaData.Constants)) : default(ReverbClass);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ReverbParametersBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IReverbParametersGetter ReverbParametersFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ReverbParametersBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IReverbParametersGetter ReverbParametersFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ReverbParametersFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)ReverbParameters_FieldIndex.Unknown;
                }
                case RecordTypeInts.ANAM:
                {
                    _ReverbClassLocation = (stream.Position - offset);
                    return (int)ReverbParameters_FieldIndex.ReverbClass;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ReverbParametersMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ReverbParameters>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IReverbParametersGetter rhs) return false;
            return ((ReverbParametersCommon)((IReverbParametersGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IReverbParametersGetter? obj)
        {
            return ((ReverbParametersCommon)((IReverbParametersGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ReverbParametersCommon)((IReverbParametersGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

