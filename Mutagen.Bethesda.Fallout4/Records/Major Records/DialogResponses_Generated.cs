/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class DialogResponses :
        Fallout4MajorRecord,
        IDialogResponsesInternal,
        IEquatable<IDialogResponsesGetter>,
        ILoquiObjectSetter<DialogResponses>
    {
        #region Ctor
        protected DialogResponses()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DialogResponsesAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        public DialogResponsesAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDialogResponsesAdapterGetter? IDialogResponsesGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DialogResponseFlags? _Flags;
        public DialogResponseFlags? Flags
        {
            get => _Flags;
            set => _Flags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDialogResponseFlagsGetter? IDialogResponsesGetter.Flags => this.Flags;
        #endregion
        #region Topic
        private readonly IFormLinkNullable<IDialogTopicGetter> _Topic = new FormLinkNullable<IDialogTopicGetter>();
        public IFormLinkNullable<IDialogTopicGetter> Topic
        {
            get => _Topic;
            set => _Topic.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IDialogTopicGetter> IDialogResponsesGetter.Topic => this.Topic;
        #endregion
        #region PreviousDialog
        private readonly IFormLinkNullable<IDialogResponsesGetter> _PreviousDialog = new FormLinkNullable<IDialogResponsesGetter>();
        public IFormLinkNullable<IDialogResponsesGetter> PreviousDialog
        {
            get => _PreviousDialog;
            set => _PreviousDialog.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IDialogResponsesGetter> IDialogResponsesGetter.PreviousDialog => this.PreviousDialog;
        #endregion
        #region SharedDialog
        private readonly IFormLinkNullable<IDialogResponsesGetter> _SharedDialog = new FormLinkNullable<IDialogResponsesGetter>();
        public IFormLinkNullable<IDialogResponsesGetter> SharedDialog
        {
            get => _SharedDialog;
            set => _SharedDialog.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IDialogResponsesGetter> IDialogResponsesGetter.SharedDialog => this.SharedDialog;
        #endregion
        #region DialogGroup
        private readonly IFormLinkNullable<IDialogResponsesGetter> _DialogGroup = new FormLinkNullable<IDialogResponsesGetter>();
        public IFormLinkNullable<IDialogResponsesGetter> DialogGroup
        {
            get => _DialogGroup;
            set => _DialogGroup.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IDialogResponsesGetter> IDialogResponsesGetter.DialogGroup => this.DialogGroup;
        #endregion
        #region OverrideFileName
        public String? OverrideFileName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IDialogResponsesGetter.OverrideFileName => this.OverrideFileName;
        #endregion
        #region Responses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponse> _Responses = new ExtendedList<DialogResponse>();
        public ExtendedList<DialogResponse> Responses
        {
            get => this._Responses;
            init => this._Responses = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponseGetter> IDialogResponsesGetter.Responses => _Responses;
        #endregion

        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IDialogResponsesGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Prompt
        public TranslatedString? Prompt { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IDialogResponsesGetter.Prompt => this.Prompt;
        #endregion
        #region Speaker
        private readonly IFormLinkNullable<INpcGetter> _Speaker = new FormLinkNullable<INpcGetter>();
        public IFormLinkNullable<INpcGetter> Speaker
        {
            get => _Speaker;
            set => _Speaker.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<INpcGetter> IDialogResponsesGetter.Speaker => this.Speaker;
        #endregion
        #region StartScene
        private readonly IFormLinkNullable<ISceneGetter> _StartScene = new FormLinkNullable<ISceneGetter>();
        public IFormLinkNullable<ISceneGetter> StartScene
        {
            get => _StartScene;
            set => _StartScene.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISceneGetter> IDialogResponsesGetter.StartScene => this.StartScene;
        #endregion
        #region INTV
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _INTV;
        public MemorySlice<Byte>? INTV
        {
            get => this._INTV;
            set => this._INTV = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponsesGetter.INTV => this.INTV;
        #endregion
        #region ForcedAlias
        public Int32? ForcedAlias { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IDialogResponsesGetter.ForcedAlias => this.ForcedAlias;
        #endregion
        #region AudioOutputOverride
        private readonly IFormLinkNullable<ISoundOutputModelGetter> _AudioOutputOverride = new FormLinkNullable<ISoundOutputModelGetter>();
        public IFormLinkNullable<ISoundOutputModelGetter> AudioOutputOverride
        {
            get => _AudioOutputOverride;
            set => _AudioOutputOverride.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundOutputModelGetter> IDialogResponsesGetter.AudioOutputOverride => this.AudioOutputOverride;
        #endregion
        #region GreetDistance
        public UInt32? GreetDistance { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IDialogResponsesGetter.GreetDistance => this.GreetDistance;
        #endregion
        #region SetParentQuestStage
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DialogSetParentQuestStage? _SetParentQuestStage;
        public DialogSetParentQuestStage? SetParentQuestStage
        {
            get => _SetParentQuestStage;
            set => _SetParentQuestStage = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDialogSetParentQuestStageGetter? IDialogResponsesGetter.SetParentQuestStage => this.SetParentQuestStage;
        #endregion
        #region StartScenePhase
        public String? StartScenePhase { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IDialogResponsesGetter.StartScenePhase => this.StartScenePhase;
        #endregion
        #region Challenge
        public DialogResponses.ChallengeType? Challenge { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        DialogResponses.ChallengeType? IDialogResponsesGetter.Challenge => this.Challenge;
        #endregion
        #region ResetGlobal
        private readonly IFormLinkNullable<IGlobalGetter> _ResetGlobal = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> ResetGlobal
        {
            get => _ResetGlobal;
            set => _ResetGlobal.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IDialogResponsesGetter.ResetGlobal => this.ResetGlobal;
        #endregion
        #region SubtitlePriority
        public DialogResponses.SubtitlePriorityLevel? SubtitlePriority { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        DialogResponses.SubtitlePriorityLevel? IDialogResponsesGetter.SubtitlePriority => this.SubtitlePriority;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponsesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, DialogResponsesAdapter.Mask<TItem>?>(initialValue, new DialogResponsesAdapter.Mask<TItem>(initialValue));
                this.Flags = new MaskItem<TItem, DialogResponseFlags.Mask<TItem>?>(initialValue, new DialogResponseFlags.Mask<TItem>(initialValue));
                this.Topic = initialValue;
                this.PreviousDialog = initialValue;
                this.SharedDialog = initialValue;
                this.DialogGroup = initialValue;
                this.OverrideFileName = initialValue;
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Prompt = initialValue;
                this.Speaker = initialValue;
                this.StartScene = initialValue;
                this.INTV = initialValue;
                this.ForcedAlias = initialValue;
                this.AudioOutputOverride = initialValue;
                this.GreetDistance = initialValue;
                this.SetParentQuestStage = new MaskItem<TItem, DialogSetParentQuestStage.Mask<TItem>?>(initialValue, new DialogSetParentQuestStage.Mask<TItem>(initialValue));
                this.StartScenePhase = initialValue;
                this.Challenge = initialValue;
                this.ResetGlobal = initialValue;
                this.SubtitlePriority = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem Flags,
                TItem Topic,
                TItem PreviousDialog,
                TItem SharedDialog,
                TItem DialogGroup,
                TItem OverrideFileName,
                TItem Responses,
                TItem Conditions,
                TItem Prompt,
                TItem Speaker,
                TItem StartScene,
                TItem INTV,
                TItem ForcedAlias,
                TItem AudioOutputOverride,
                TItem GreetDistance,
                TItem SetParentQuestStage,
                TItem StartScenePhase,
                TItem Challenge,
                TItem ResetGlobal,
                TItem SubtitlePriority)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, DialogResponsesAdapter.Mask<TItem>?>(VirtualMachineAdapter, new DialogResponsesAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Flags = new MaskItem<TItem, DialogResponseFlags.Mask<TItem>?>(Flags, new DialogResponseFlags.Mask<TItem>(Flags));
                this.Topic = Topic;
                this.PreviousDialog = PreviousDialog;
                this.SharedDialog = SharedDialog;
                this.DialogGroup = DialogGroup;
                this.OverrideFileName = OverrideFileName;
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>(Responses, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Prompt = Prompt;
                this.Speaker = Speaker;
                this.StartScene = StartScene;
                this.INTV = INTV;
                this.ForcedAlias = ForcedAlias;
                this.AudioOutputOverride = AudioOutputOverride;
                this.GreetDistance = GreetDistance;
                this.SetParentQuestStage = new MaskItem<TItem, DialogSetParentQuestStage.Mask<TItem>?>(SetParentQuestStage, new DialogSetParentQuestStage.Mask<TItem>(SetParentQuestStage));
                this.StartScenePhase = StartScenePhase;
                this.Challenge = Challenge;
                this.ResetGlobal = ResetGlobal;
                this.SubtitlePriority = SubtitlePriority;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, DialogResponsesAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, DialogResponseFlags.Mask<TItem>?>? Flags { get; set; }
            public TItem Topic;
            public TItem PreviousDialog;
            public TItem SharedDialog;
            public TItem DialogGroup;
            public TItem OverrideFileName;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>? Responses;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem Prompt;
            public TItem Speaker;
            public TItem StartScene;
            public TItem INTV;
            public TItem ForcedAlias;
            public TItem AudioOutputOverride;
            public TItem GreetDistance;
            public MaskItem<TItem, DialogSetParentQuestStage.Mask<TItem>?>? SetParentQuestStage { get; set; }
            public TItem StartScenePhase;
            public TItem Challenge;
            public TItem ResetGlobal;
            public TItem SubtitlePriority;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Topic, rhs.Topic)) return false;
                if (!object.Equals(this.PreviousDialog, rhs.PreviousDialog)) return false;
                if (!object.Equals(this.SharedDialog, rhs.SharedDialog)) return false;
                if (!object.Equals(this.DialogGroup, rhs.DialogGroup)) return false;
                if (!object.Equals(this.OverrideFileName, rhs.OverrideFileName)) return false;
                if (!object.Equals(this.Responses, rhs.Responses)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Prompt, rhs.Prompt)) return false;
                if (!object.Equals(this.Speaker, rhs.Speaker)) return false;
                if (!object.Equals(this.StartScene, rhs.StartScene)) return false;
                if (!object.Equals(this.INTV, rhs.INTV)) return false;
                if (!object.Equals(this.ForcedAlias, rhs.ForcedAlias)) return false;
                if (!object.Equals(this.AudioOutputOverride, rhs.AudioOutputOverride)) return false;
                if (!object.Equals(this.GreetDistance, rhs.GreetDistance)) return false;
                if (!object.Equals(this.SetParentQuestStage, rhs.SetParentQuestStage)) return false;
                if (!object.Equals(this.StartScenePhase, rhs.StartScenePhase)) return false;
                if (!object.Equals(this.Challenge, rhs.Challenge)) return false;
                if (!object.Equals(this.ResetGlobal, rhs.ResetGlobal)) return false;
                if (!object.Equals(this.SubtitlePriority, rhs.SubtitlePriority)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Flags);
                hash.Add(this.Topic);
                hash.Add(this.PreviousDialog);
                hash.Add(this.SharedDialog);
                hash.Add(this.DialogGroup);
                hash.Add(this.OverrideFileName);
                hash.Add(this.Responses);
                hash.Add(this.Conditions);
                hash.Add(this.Prompt);
                hash.Add(this.Speaker);
                hash.Add(this.StartScene);
                hash.Add(this.INTV);
                hash.Add(this.ForcedAlias);
                hash.Add(this.AudioOutputOverride);
                hash.Add(this.GreetDistance);
                hash.Add(this.SetParentQuestStage);
                hash.Add(this.StartScenePhase);
                hash.Add(this.Challenge);
                hash.Add(this.ResetGlobal);
                hash.Add(this.SubtitlePriority);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (Flags != null)
                {
                    if (!eval(this.Flags.Overall)) return false;
                    if (this.Flags.Specific != null && !this.Flags.Specific.All(eval)) return false;
                }
                if (!eval(this.Topic)) return false;
                if (!eval(this.PreviousDialog)) return false;
                if (!eval(this.SharedDialog)) return false;
                if (!eval(this.DialogGroup)) return false;
                if (!eval(this.OverrideFileName)) return false;
                if (this.Responses != null)
                {
                    if (!eval(this.Responses.Overall)) return false;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Prompt)) return false;
                if (!eval(this.Speaker)) return false;
                if (!eval(this.StartScene)) return false;
                if (!eval(this.INTV)) return false;
                if (!eval(this.ForcedAlias)) return false;
                if (!eval(this.AudioOutputOverride)) return false;
                if (!eval(this.GreetDistance)) return false;
                if (SetParentQuestStage != null)
                {
                    if (!eval(this.SetParentQuestStage.Overall)) return false;
                    if (this.SetParentQuestStage.Specific != null && !this.SetParentQuestStage.Specific.All(eval)) return false;
                }
                if (!eval(this.StartScenePhase)) return false;
                if (!eval(this.Challenge)) return false;
                if (!eval(this.ResetGlobal)) return false;
                if (!eval(this.SubtitlePriority)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (Flags != null)
                {
                    if (eval(this.Flags.Overall)) return true;
                    if (this.Flags.Specific != null && this.Flags.Specific.Any(eval)) return true;
                }
                if (eval(this.Topic)) return true;
                if (eval(this.PreviousDialog)) return true;
                if (eval(this.SharedDialog)) return true;
                if (eval(this.DialogGroup)) return true;
                if (eval(this.OverrideFileName)) return true;
                if (this.Responses != null)
                {
                    if (eval(this.Responses.Overall)) return true;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Prompt)) return true;
                if (eval(this.Speaker)) return true;
                if (eval(this.StartScene)) return true;
                if (eval(this.INTV)) return true;
                if (eval(this.ForcedAlias)) return true;
                if (eval(this.AudioOutputOverride)) return true;
                if (eval(this.GreetDistance)) return true;
                if (SetParentQuestStage != null)
                {
                    if (eval(this.SetParentQuestStage.Overall)) return true;
                    if (this.SetParentQuestStage.Specific != null && this.SetParentQuestStage.Specific.Any(eval)) return true;
                }
                if (eval(this.StartScenePhase)) return true;
                if (eval(this.Challenge)) return true;
                if (eval(this.ResetGlobal)) return true;
                if (eval(this.SubtitlePriority)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogResponses.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, DialogResponsesAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Flags = this.Flags == null ? null : new MaskItem<R, DialogResponseFlags.Mask<R>?>(eval(this.Flags.Overall), this.Flags.Specific?.Translate(eval));
                obj.Topic = eval(this.Topic);
                obj.PreviousDialog = eval(this.PreviousDialog);
                obj.SharedDialog = eval(this.SharedDialog);
                obj.DialogGroup = eval(this.DialogGroup);
                obj.OverrideFileName = eval(this.OverrideFileName);
                if (Responses != null)
                {
                    obj.Responses = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponse.Mask<R>?>>?>(eval(this.Responses.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponse.Mask<R>?>>());
                    if (Responses.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponse.Mask<R>?>>();
                        obj.Responses.Specific = l;
                        foreach (var item in Responses.Specific)
                        {
                            MaskItemIndexed<R, DialogResponse.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, DialogResponse.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Prompt = eval(this.Prompt);
                obj.Speaker = eval(this.Speaker);
                obj.StartScene = eval(this.StartScene);
                obj.INTV = eval(this.INTV);
                obj.ForcedAlias = eval(this.ForcedAlias);
                obj.AudioOutputOverride = eval(this.AudioOutputOverride);
                obj.GreetDistance = eval(this.GreetDistance);
                obj.SetParentQuestStage = this.SetParentQuestStage == null ? null : new MaskItem<R, DialogSetParentQuestStage.Mask<R>?>(eval(this.SetParentQuestStage.Overall), this.SetParentQuestStage.Specific?.Translate(eval));
                obj.StartScenePhase = eval(this.StartScenePhase);
                obj.Challenge = eval(this.Challenge);
                obj.ResetGlobal = eval(this.ResetGlobal);
                obj.SubtitlePriority = eval(this.SubtitlePriority);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DialogResponses.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DialogResponses.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DialogResponses.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.Flags?.Overall ?? true)
                    {
                        Flags?.Print(sb);
                    }
                    if (printMask?.Topic ?? true)
                    {
                        sb.AppendItem(Topic, "Topic");
                    }
                    if (printMask?.PreviousDialog ?? true)
                    {
                        sb.AppendItem(PreviousDialog, "PreviousDialog");
                    }
                    if (printMask?.SharedDialog ?? true)
                    {
                        sb.AppendItem(SharedDialog, "SharedDialog");
                    }
                    if (printMask?.DialogGroup ?? true)
                    {
                        sb.AppendItem(DialogGroup, "DialogGroup");
                    }
                    if (printMask?.OverrideFileName ?? true)
                    {
                        sb.AppendItem(OverrideFileName, "OverrideFileName");
                    }
                    if ((printMask?.Responses?.Overall ?? true)
                        && Responses is {} ResponsesItem)
                    {
                        sb.AppendLine("Responses =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ResponsesItem.Overall);
                            if (ResponsesItem.Specific != null)
                            {
                                foreach (var subItem in ResponsesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Prompt ?? true)
                    {
                        sb.AppendItem(Prompt, "Prompt");
                    }
                    if (printMask?.Speaker ?? true)
                    {
                        sb.AppendItem(Speaker, "Speaker");
                    }
                    if (printMask?.StartScene ?? true)
                    {
                        sb.AppendItem(StartScene, "StartScene");
                    }
                    if (printMask?.INTV ?? true)
                    {
                        sb.AppendItem(INTV, "INTV");
                    }
                    if (printMask?.ForcedAlias ?? true)
                    {
                        sb.AppendItem(ForcedAlias, "ForcedAlias");
                    }
                    if (printMask?.AudioOutputOverride ?? true)
                    {
                        sb.AppendItem(AudioOutputOverride, "AudioOutputOverride");
                    }
                    if (printMask?.GreetDistance ?? true)
                    {
                        sb.AppendItem(GreetDistance, "GreetDistance");
                    }
                    if (printMask?.SetParentQuestStage?.Overall ?? true)
                    {
                        SetParentQuestStage?.Print(sb);
                    }
                    if (printMask?.StartScenePhase ?? true)
                    {
                        sb.AppendItem(StartScenePhase, "StartScenePhase");
                    }
                    if (printMask?.Challenge ?? true)
                    {
                        sb.AppendItem(Challenge, "Challenge");
                    }
                    if (printMask?.ResetGlobal ?? true)
                    {
                        sb.AppendItem(ResetGlobal, "ResetGlobal");
                    }
                    if (printMask?.SubtitlePriority ?? true)
                    {
                        sb.AppendItem(SubtitlePriority, "SubtitlePriority");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, DialogResponsesAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, DialogResponseFlags.ErrorMask?>? Flags;
            public Exception? Topic;
            public Exception? PreviousDialog;
            public Exception? SharedDialog;
            public Exception? DialogGroup;
            public Exception? OverrideFileName;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>? Responses;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? Prompt;
            public Exception? Speaker;
            public Exception? StartScene;
            public Exception? INTV;
            public Exception? ForcedAlias;
            public Exception? AudioOutputOverride;
            public Exception? GreetDistance;
            public MaskItem<Exception?, DialogSetParentQuestStage.ErrorMask?>? SetParentQuestStage;
            public Exception? StartScenePhase;
            public Exception? Challenge;
            public Exception? ResetGlobal;
            public Exception? SubtitlePriority;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponses_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case DialogResponses_FieldIndex.Flags:
                        return Flags;
                    case DialogResponses_FieldIndex.Topic:
                        return Topic;
                    case DialogResponses_FieldIndex.PreviousDialog:
                        return PreviousDialog;
                    case DialogResponses_FieldIndex.SharedDialog:
                        return SharedDialog;
                    case DialogResponses_FieldIndex.DialogGroup:
                        return DialogGroup;
                    case DialogResponses_FieldIndex.OverrideFileName:
                        return OverrideFileName;
                    case DialogResponses_FieldIndex.Responses:
                        return Responses;
                    case DialogResponses_FieldIndex.Conditions:
                        return Conditions;
                    case DialogResponses_FieldIndex.Prompt:
                        return Prompt;
                    case DialogResponses_FieldIndex.Speaker:
                        return Speaker;
                    case DialogResponses_FieldIndex.StartScene:
                        return StartScene;
                    case DialogResponses_FieldIndex.INTV:
                        return INTV;
                    case DialogResponses_FieldIndex.ForcedAlias:
                        return ForcedAlias;
                    case DialogResponses_FieldIndex.AudioOutputOverride:
                        return AudioOutputOverride;
                    case DialogResponses_FieldIndex.GreetDistance:
                        return GreetDistance;
                    case DialogResponses_FieldIndex.SetParentQuestStage:
                        return SetParentQuestStage;
                    case DialogResponses_FieldIndex.StartScenePhase:
                        return StartScenePhase;
                    case DialogResponses_FieldIndex.Challenge:
                        return Challenge;
                    case DialogResponses_FieldIndex.ResetGlobal:
                        return ResetGlobal;
                    case DialogResponses_FieldIndex.SubtitlePriority:
                        return SubtitlePriority;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponses_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, DialogResponsesAdapter.ErrorMask?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Flags:
                        this.Flags = new MaskItem<Exception?, DialogResponseFlags.ErrorMask?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Topic:
                        this.Topic = ex;
                        break;
                    case DialogResponses_FieldIndex.PreviousDialog:
                        this.PreviousDialog = ex;
                        break;
                    case DialogResponses_FieldIndex.SharedDialog:
                        this.SharedDialog = ex;
                        break;
                    case DialogResponses_FieldIndex.DialogGroup:
                        this.DialogGroup = ex;
                        break;
                    case DialogResponses_FieldIndex.OverrideFileName:
                        this.OverrideFileName = ex;
                        break;
                    case DialogResponses_FieldIndex.Responses:
                        this.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Prompt:
                        this.Prompt = ex;
                        break;
                    case DialogResponses_FieldIndex.Speaker:
                        this.Speaker = ex;
                        break;
                    case DialogResponses_FieldIndex.StartScene:
                        this.StartScene = ex;
                        break;
                    case DialogResponses_FieldIndex.INTV:
                        this.INTV = ex;
                        break;
                    case DialogResponses_FieldIndex.ForcedAlias:
                        this.ForcedAlias = ex;
                        break;
                    case DialogResponses_FieldIndex.AudioOutputOverride:
                        this.AudioOutputOverride = ex;
                        break;
                    case DialogResponses_FieldIndex.GreetDistance:
                        this.GreetDistance = ex;
                        break;
                    case DialogResponses_FieldIndex.SetParentQuestStage:
                        this.SetParentQuestStage = new MaskItem<Exception?, DialogSetParentQuestStage.ErrorMask?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.StartScenePhase:
                        this.StartScenePhase = ex;
                        break;
                    case DialogResponses_FieldIndex.Challenge:
                        this.Challenge = ex;
                        break;
                    case DialogResponses_FieldIndex.ResetGlobal:
                        this.ResetGlobal = ex;
                        break;
                    case DialogResponses_FieldIndex.SubtitlePriority:
                        this.SubtitlePriority = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponses_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, DialogResponsesAdapter.ErrorMask?>?)obj;
                        break;
                    case DialogResponses_FieldIndex.Flags:
                        this.Flags = (MaskItem<Exception?, DialogResponseFlags.ErrorMask?>?)obj;
                        break;
                    case DialogResponses_FieldIndex.Topic:
                        this.Topic = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.PreviousDialog:
                        this.PreviousDialog = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.SharedDialog:
                        this.SharedDialog = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.DialogGroup:
                        this.DialogGroup = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.OverrideFileName:
                        this.OverrideFileName = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.Responses:
                        this.Responses = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.Prompt:
                        this.Prompt = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.Speaker:
                        this.Speaker = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.StartScene:
                        this.StartScene = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.INTV:
                        this.INTV = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.ForcedAlias:
                        this.ForcedAlias = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.AudioOutputOverride:
                        this.AudioOutputOverride = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.GreetDistance:
                        this.GreetDistance = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.SetParentQuestStage:
                        this.SetParentQuestStage = (MaskItem<Exception?, DialogSetParentQuestStage.ErrorMask?>?)obj;
                        break;
                    case DialogResponses_FieldIndex.StartScenePhase:
                        this.StartScenePhase = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.Challenge:
                        this.Challenge = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.ResetGlobal:
                        this.ResetGlobal = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.SubtitlePriority:
                        this.SubtitlePriority = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Flags != null) return true;
                if (Topic != null) return true;
                if (PreviousDialog != null) return true;
                if (SharedDialog != null) return true;
                if (DialogGroup != null) return true;
                if (OverrideFileName != null) return true;
                if (Responses != null) return true;
                if (Conditions != null) return true;
                if (Prompt != null) return true;
                if (Speaker != null) return true;
                if (StartScene != null) return true;
                if (INTV != null) return true;
                if (ForcedAlias != null) return true;
                if (AudioOutputOverride != null) return true;
                if (GreetDistance != null) return true;
                if (SetParentQuestStage != null) return true;
                if (StartScenePhase != null) return true;
                if (Challenge != null) return true;
                if (ResetGlobal != null) return true;
                if (SubtitlePriority != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                Flags?.Print(sb);
                {
                    sb.AppendItem(Topic, "Topic");
                }
                {
                    sb.AppendItem(PreviousDialog, "PreviousDialog");
                }
                {
                    sb.AppendItem(SharedDialog, "SharedDialog");
                }
                {
                    sb.AppendItem(DialogGroup, "DialogGroup");
                }
                {
                    sb.AppendItem(OverrideFileName, "OverrideFileName");
                }
                if (Responses is {} ResponsesItem)
                {
                    sb.AppendLine("Responses =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ResponsesItem.Overall);
                        if (ResponsesItem.Specific != null)
                        {
                            foreach (var subItem in ResponsesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Prompt, "Prompt");
                }
                {
                    sb.AppendItem(Speaker, "Speaker");
                }
                {
                    sb.AppendItem(StartScene, "StartScene");
                }
                {
                    sb.AppendItem(INTV, "INTV");
                }
                {
                    sb.AppendItem(ForcedAlias, "ForcedAlias");
                }
                {
                    sb.AppendItem(AudioOutputOverride, "AudioOutputOverride");
                }
                {
                    sb.AppendItem(GreetDistance, "GreetDistance");
                }
                SetParentQuestStage?.Print(sb);
                {
                    sb.AppendItem(StartScenePhase, "StartScenePhase");
                }
                {
                    sb.AppendItem(Challenge, "Challenge");
                }
                {
                    sb.AppendItem(ResetGlobal, "ResetGlobal");
                }
                {
                    sb.AppendItem(SubtitlePriority, "SubtitlePriority");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags, (l, r) => l.Combine(r));
                ret.Topic = this.Topic.Combine(rhs.Topic);
                ret.PreviousDialog = this.PreviousDialog.Combine(rhs.PreviousDialog);
                ret.SharedDialog = this.SharedDialog.Combine(rhs.SharedDialog);
                ret.DialogGroup = this.DialogGroup.Combine(rhs.DialogGroup);
                ret.OverrideFileName = this.OverrideFileName.Combine(rhs.OverrideFileName);
                ret.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Responses?.Overall, rhs.Responses?.Overall), Noggog.ExceptionExt.Combine(this.Responses?.Specific, rhs.Responses?.Specific));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Prompt = this.Prompt.Combine(rhs.Prompt);
                ret.Speaker = this.Speaker.Combine(rhs.Speaker);
                ret.StartScene = this.StartScene.Combine(rhs.StartScene);
                ret.INTV = this.INTV.Combine(rhs.INTV);
                ret.ForcedAlias = this.ForcedAlias.Combine(rhs.ForcedAlias);
                ret.AudioOutputOverride = this.AudioOutputOverride.Combine(rhs.AudioOutputOverride);
                ret.GreetDistance = this.GreetDistance.Combine(rhs.GreetDistance);
                ret.SetParentQuestStage = this.SetParentQuestStage.Combine(rhs.SetParentQuestStage, (l, r) => l.Combine(r));
                ret.StartScenePhase = this.StartScenePhase.Combine(rhs.StartScenePhase);
                ret.Challenge = this.Challenge.Combine(rhs.Challenge);
                ret.ResetGlobal = this.ResetGlobal.Combine(rhs.ResetGlobal);
                ret.SubtitlePriority = this.SubtitlePriority.Combine(rhs.SubtitlePriority);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public DialogResponsesAdapter.TranslationMask? VirtualMachineAdapter;
            public DialogResponseFlags.TranslationMask? Flags;
            public bool Topic;
            public bool PreviousDialog;
            public bool SharedDialog;
            public bool DialogGroup;
            public bool OverrideFileName;
            public DialogResponse.TranslationMask? Responses;
            public Condition.TranslationMask? Conditions;
            public bool Prompt;
            public bool Speaker;
            public bool StartScene;
            public bool INTV;
            public bool ForcedAlias;
            public bool AudioOutputOverride;
            public bool GreetDistance;
            public DialogSetParentQuestStage.TranslationMask? SetParentQuestStage;
            public bool StartScenePhase;
            public bool Challenge;
            public bool ResetGlobal;
            public bool SubtitlePriority;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Topic = defaultOn;
                this.PreviousDialog = defaultOn;
                this.SharedDialog = defaultOn;
                this.DialogGroup = defaultOn;
                this.OverrideFileName = defaultOn;
                this.Prompt = defaultOn;
                this.Speaker = defaultOn;
                this.StartScene = defaultOn;
                this.INTV = defaultOn;
                this.ForcedAlias = defaultOn;
                this.AudioOutputOverride = defaultOn;
                this.GreetDistance = defaultOn;
                this.StartScenePhase = defaultOn;
                this.Challenge = defaultOn;
                this.ResetGlobal = defaultOn;
                this.SubtitlePriority = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Flags != null ? Flags.OnOverall : DefaultOn, Flags?.GetCrystal()));
                ret.Add((Topic, null));
                ret.Add((PreviousDialog, null));
                ret.Add((SharedDialog, null));
                ret.Add((DialogGroup, null));
                ret.Add((OverrideFileName, null));
                ret.Add((Responses == null ? DefaultOn : !Responses.GetCrystal().CopyNothing, Responses?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Prompt, null));
                ret.Add((Speaker, null));
                ret.Add((StartScene, null));
                ret.Add((INTV, null));
                ret.Add((ForcedAlias, null));
                ret.Add((AudioOutputOverride, null));
                ret.Add((GreetDistance, null));
                ret.Add((SetParentQuestStage != null ? SetParentQuestStage.OnOverall : DefaultOn, SetParentQuestStage?.GetCrystal()));
                ret.Add((StartScenePhase, null));
                ret.Add((Challenge, null));
                ret.Add((ResetGlobal, null));
                ret.Add((SubtitlePriority, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = DialogResponses_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponsesCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponsesSetterCommon.Instance.RemapLinks(this, mapping);
        public DialogResponses(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private DialogResponses(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal DialogResponses(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public DialogResponses(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public DialogResponses(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<DialogResponses>.ToString(this);
        }

        protected override Type LinkType => typeof(IDialogResponses);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IDialogResponsesGetter rhs) return false;
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponsesGetter? obj)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogResponsesBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponsesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static DialogResponses CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DialogResponses();
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogResponses item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogResponses GetNew()
        {
            return new DialogResponses();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponses :
        IDialogResponsesGetter,
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        ILoquiObjectSetter<IDialogResponsesInternal>
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        new DialogResponsesAdapter? VirtualMachineAdapter { get; set; }
        new DialogResponseFlags? Flags { get; set; }
        new IFormLinkNullable<IDialogTopicGetter> Topic { get; set; }
        new IFormLinkNullable<IDialogResponsesGetter> PreviousDialog { get; set; }
        new IFormLinkNullable<IDialogResponsesGetter> SharedDialog { get; set; }
        new IFormLinkNullable<IDialogResponsesGetter> DialogGroup { get; set; }
        new String? OverrideFileName { get; set; }
        new ExtendedList<DialogResponse> Responses { get; }
        new ExtendedList<Condition> Conditions { get; }
        new TranslatedString? Prompt { get; set; }
        new IFormLinkNullable<INpcGetter> Speaker { get; set; }
        new IFormLinkNullable<ISceneGetter> StartScene { get; set; }
        new MemorySlice<Byte>? INTV { get; set; }
        new Int32? ForcedAlias { get; set; }
        new IFormLinkNullable<ISoundOutputModelGetter> AudioOutputOverride { get; set; }
        new UInt32? GreetDistance { get; set; }
        new DialogSetParentQuestStage? SetParentQuestStage { get; set; }
        new String? StartScenePhase { get; set; }
        new DialogResponses.ChallengeType? Challenge { get; set; }
        new IFormLinkNullable<IGlobalGetter> ResetGlobal { get; set; }
        new DialogResponses.SubtitlePriorityLevel? SubtitlePriority { get; set; }
        #region Mutagen
        new DialogResponses.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IDialogResponsesInternal :
        IFallout4MajorRecordInternal,
        IDialogResponses,
        IDialogResponsesGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.INFO)]
    public partial interface IDialogResponsesGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        ILoquiObject<IDialogResponsesGetter>,
        IMapsToGetter<IDialogResponsesGetter>
    {
        static new ILoquiRegistration StaticRegistration => DialogResponses_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter
        /// </summary>
        IDialogResponsesAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        IDialogResponseFlagsGetter? Flags { get; }
        IFormLinkNullableGetter<IDialogTopicGetter> Topic { get; }
        IFormLinkNullableGetter<IDialogResponsesGetter> PreviousDialog { get; }
        IFormLinkNullableGetter<IDialogResponsesGetter> SharedDialog { get; }
        IFormLinkNullableGetter<IDialogResponsesGetter> DialogGroup { get; }
        String? OverrideFileName { get; }
        IReadOnlyList<IDialogResponseGetter> Responses { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        ITranslatedStringGetter? Prompt { get; }
        IFormLinkNullableGetter<INpcGetter> Speaker { get; }
        IFormLinkNullableGetter<ISceneGetter> StartScene { get; }
        ReadOnlyMemorySlice<Byte>? INTV { get; }
        Int32? ForcedAlias { get; }
        IFormLinkNullableGetter<ISoundOutputModelGetter> AudioOutputOverride { get; }
        UInt32? GreetDistance { get; }
        IDialogSetParentQuestStageGetter? SetParentQuestStage { get; }
        String? StartScenePhase { get; }
        DialogResponses.ChallengeType? Challenge { get; }
        IFormLinkNullableGetter<IGlobalGetter> ResetGlobal { get; }
        DialogResponses.SubtitlePriorityLevel? SubtitlePriority { get; }

        #region Mutagen
        DialogResponses.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class DialogResponsesMixIn
    {
        public static void Clear(this IDialogResponsesInternal item)
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogResponses.Mask<bool> GetEqualsMask(
            this IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDialogResponsesGetter item,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDialogResponsesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            DialogResponses.TranslationMask? equalsMask = null)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogResponsesInternal lhs,
            IDialogResponsesGetter rhs,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogResponses.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogResponsesInternal lhs,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogResponses DeepCopy(
            this IDialogResponsesGetter item,
            DialogResponses.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogResponses DeepCopy(
            this IDialogResponsesGetter item,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogResponses DeepCopy(
            this IDialogResponsesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static DialogResponses Duplicate(
            this IDialogResponsesGetter item,
            FormKey formKey,
            DialogResponses.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static DialogResponses Duplicate(
            this IDialogResponsesGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogResponsesInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum DialogResponses_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        Flags = 8,
        Topic = 9,
        PreviousDialog = 10,
        SharedDialog = 11,
        DialogGroup = 12,
        OverrideFileName = 13,
        Responses = 14,
        Conditions = 15,
        Prompt = 16,
        Speaker = 17,
        StartScene = 18,
        INTV = 19,
        ForcedAlias = 20,
        AudioOutputOverride = 21,
        GreetDistance = 22,
        SetParentQuestStage = 23,
        StartScenePhase = 24,
        Challenge = 25,
        ResetGlobal = 26,
        SubtitlePriority = 27,
    }
    #endregion

    #region Registration
    internal partial class DialogResponses_Registration : ILoquiRegistration
    {
        public static readonly DialogResponses_Registration Instance = new DialogResponses_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 21;

        public const ushort FieldCount = 28;

        public static readonly Type MaskType = typeof(DialogResponses.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponses.ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponses);

        public static readonly Type GetterType = typeof(IDialogResponsesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogResponses);

        public static readonly Type? InternalSetterType = typeof(IDialogResponsesInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.DialogResponses";

        public const string Name = "DialogResponses";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.INFO;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.INFO);
            var all = RecordCollection.Factory(
                RecordTypes.INFO,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.ENAM,
                RecordTypes.TPIC,
                RecordTypes.PNAM,
                RecordTypes.DNAM,
                RecordTypes.GNAM,
                RecordTypes.IOVR,
                RecordTypes.TRDA,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.NAM4,
                RecordTypes.SNAM,
                RecordTypes.LNAM,
                RecordTypes.TNAM,
                RecordTypes.NAM9,
                RecordTypes.SRAF,
                RecordTypes.WZMD,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.RNAM,
                RecordTypes.ANAM,
                RecordTypes.TSCE,
                RecordTypes.INTV,
                RecordTypes.ALFA,
                RecordTypes.ONAM,
                RecordTypes.GREE,
                RecordTypes.TIQS,
                RecordTypes.NAM0,
                RecordTypes.INCC,
                RecordTypes.MODQ,
                RecordTypes.INAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DialogResponsesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DialogResponsesSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly DialogResponsesSetterCommon Instance = new DialogResponsesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogResponsesInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Flags = null;
            item.Topic.Clear();
            item.PreviousDialog.Clear();
            item.SharedDialog.Clear();
            item.DialogGroup.Clear();
            item.OverrideFileName = default;
            item.Responses.Clear();
            item.Conditions.Clear();
            item.Prompt = default;
            item.Speaker.Clear();
            item.StartScene.Clear();
            item.INTV = default;
            item.ForcedAlias = default;
            item.AudioOutputOverride.Clear();
            item.GreetDistance = default;
            item.SetParentQuestStage = null;
            item.StartScenePhase = default;
            item.Challenge = default;
            item.ResetGlobal.Clear();
            item.SubtitlePriority = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IDialogResponsesInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogResponsesInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IDialogResponses obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Topic.Relink(mapping);
            obj.PreviousDialog.Relink(mapping);
            obj.SharedDialog.Relink(mapping);
            obj.DialogGroup.Relink(mapping);
            obj.Responses.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.Speaker.Relink(mapping);
            obj.StartScene.Relink(mapping);
            obj.AudioOutputOverride.Relink(mapping);
            obj.ResetGlobal.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogResponsesInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IDialogResponsesInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: DialogResponsesBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogResponsesBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (DialogResponses)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (DialogResponses)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class DialogResponsesCommon : Fallout4MajorRecordCommon
    {
        public new static readonly DialogResponsesCommon Instance = new DialogResponsesCommon();

        public DialogResponses.Mask<bool> GetEqualsMask(
            IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponses.Mask<bool>(false);
            ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            DialogResponses.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = EqualsMaskHelper.EqualsHelper(
                item.Flags,
                rhs.Flags,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Topic = item.Topic.Equals(rhs.Topic);
            ret.PreviousDialog = item.PreviousDialog.Equals(rhs.PreviousDialog);
            ret.SharedDialog = item.SharedDialog.Equals(rhs.SharedDialog);
            ret.DialogGroup = item.DialogGroup.Equals(rhs.DialogGroup);
            ret.OverrideFileName = string.Equals(item.OverrideFileName, rhs.OverrideFileName);
            ret.Responses = item.Responses.CollectionEqualsHelper(
                rhs.Responses,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Prompt = object.Equals(item.Prompt, rhs.Prompt);
            ret.Speaker = item.Speaker.Equals(rhs.Speaker);
            ret.StartScene = item.StartScene.Equals(rhs.StartScene);
            ret.INTV = MemorySliceExt.SequenceEqual(item.INTV, rhs.INTV);
            ret.ForcedAlias = item.ForcedAlias == rhs.ForcedAlias;
            ret.AudioOutputOverride = item.AudioOutputOverride.Equals(rhs.AudioOutputOverride);
            ret.GreetDistance = item.GreetDistance == rhs.GreetDistance;
            ret.SetParentQuestStage = EqualsMaskHelper.EqualsHelper(
                item.SetParentQuestStage,
                rhs.SetParentQuestStage,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.StartScenePhase = string.Equals(item.StartScenePhase, rhs.StartScenePhase);
            ret.Challenge = item.Challenge == rhs.Challenge;
            ret.ResetGlobal = item.ResetGlobal.Equals(rhs.ResetGlobal);
            ret.SubtitlePriority = item.SubtitlePriority == rhs.SubtitlePriority;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IDialogResponsesGetter item,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDialogResponsesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DialogResponses =>");
            }
            else
            {
                sb.AppendLine($"{name} (DialogResponses) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDialogResponsesGetter item,
            StructuredStringBuilder sb,
            DialogResponses.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if ((printMask?.Flags?.Overall ?? true)
                && item.Flags is {} FlagsItem)
            {
                FlagsItem?.Print(sb, "Flags");
            }
            if (printMask?.Topic ?? true)
            {
                sb.AppendItem(item.Topic.FormKeyNullable, "Topic");
            }
            if (printMask?.PreviousDialog ?? true)
            {
                sb.AppendItem(item.PreviousDialog.FormKeyNullable, "PreviousDialog");
            }
            if (printMask?.SharedDialog ?? true)
            {
                sb.AppendItem(item.SharedDialog.FormKeyNullable, "SharedDialog");
            }
            if (printMask?.DialogGroup ?? true)
            {
                sb.AppendItem(item.DialogGroup.FormKeyNullable, "DialogGroup");
            }
            if ((printMask?.OverrideFileName ?? true)
                && item.OverrideFileName is {} OverrideFileNameItem)
            {
                sb.AppendItem(OverrideFileNameItem, "OverrideFileName");
            }
            if (printMask?.Responses?.Overall ?? true)
            {
                sb.AppendLine("Responses =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Responses)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Prompt ?? true)
                && item.Prompt is {} PromptItem)
            {
                sb.AppendItem(PromptItem, "Prompt");
            }
            if (printMask?.Speaker ?? true)
            {
                sb.AppendItem(item.Speaker.FormKeyNullable, "Speaker");
            }
            if (printMask?.StartScene ?? true)
            {
                sb.AppendItem(item.StartScene.FormKeyNullable, "StartScene");
            }
            if ((printMask?.INTV ?? true)
                && item.INTV is {} INTVItem)
            {
                sb.AppendLine($"INTV => {SpanExt.ToHexString(INTVItem)}");
            }
            if ((printMask?.ForcedAlias ?? true)
                && item.ForcedAlias is {} ForcedAliasItem)
            {
                sb.AppendItem(ForcedAliasItem, "ForcedAlias");
            }
            if (printMask?.AudioOutputOverride ?? true)
            {
                sb.AppendItem(item.AudioOutputOverride.FormKeyNullable, "AudioOutputOverride");
            }
            if ((printMask?.GreetDistance ?? true)
                && item.GreetDistance is {} GreetDistanceItem)
            {
                sb.AppendItem(GreetDistanceItem, "GreetDistance");
            }
            if ((printMask?.SetParentQuestStage?.Overall ?? true)
                && item.SetParentQuestStage is {} SetParentQuestStageItem)
            {
                SetParentQuestStageItem?.Print(sb, "SetParentQuestStage");
            }
            if ((printMask?.StartScenePhase ?? true)
                && item.StartScenePhase is {} StartScenePhaseItem)
            {
                sb.AppendItem(StartScenePhaseItem, "StartScenePhase");
            }
            if ((printMask?.Challenge ?? true)
                && item.Challenge is {} ChallengeItem)
            {
                sb.AppendItem(ChallengeItem, "Challenge");
            }
            if (printMask?.ResetGlobal ?? true)
            {
                sb.AppendItem(item.ResetGlobal.FormKeyNullable, "ResetGlobal");
            }
            if ((printMask?.SubtitlePriority ?? true)
                && item.SubtitlePriority is {} SubtitlePriorityItem)
            {
                sb.AppendItem(SubtitlePriorityItem, "SubtitlePriority");
            }
        }
        
        public static DialogResponses_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogResponses_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (DialogResponses_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (DialogResponses_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (DialogResponses_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (DialogResponses_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (DialogResponses_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (DialogResponses_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new DialogResponses_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogResponses_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogResponses_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (DialogResponses_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogResponses_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogResponsesGetter? lhs,
            IDialogResponsesGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)DialogResponses_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Flags) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Flags, rhs.Flags, out var lhsFlags, out var rhsFlags, out var isFlagsEqual))
                {
                    if (!((DialogResponseFlagsCommon)((IDialogResponseFlagsGetter)lhsFlags).CommonInstance()!).Equals(lhsFlags, rhsFlags, equalsMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Flags))) return false;
                }
                else if (!isFlagsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Topic) ?? true))
            {
                if (!lhs.Topic.Equals(rhs.Topic)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.PreviousDialog) ?? true))
            {
                if (!lhs.PreviousDialog.Equals(rhs.PreviousDialog)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.SharedDialog) ?? true))
            {
                if (!lhs.SharedDialog.Equals(rhs.SharedDialog)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.DialogGroup) ?? true))
            {
                if (!lhs.DialogGroup.Equals(rhs.DialogGroup)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.OverrideFileName) ?? true))
            {
                if (!string.Equals(lhs.OverrideFileName, rhs.OverrideFileName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Responses) ?? true))
            {
                if (!lhs.Responses.SequenceEqual(rhs.Responses, (l, r) => ((DialogResponseCommon)((IDialogResponseGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Responses)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Prompt) ?? true))
            {
                if (!object.Equals(lhs.Prompt, rhs.Prompt)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Speaker) ?? true))
            {
                if (!lhs.Speaker.Equals(rhs.Speaker)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.StartScene) ?? true))
            {
                if (!lhs.StartScene.Equals(rhs.StartScene)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.INTV) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.INTV, rhs.INTV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.ForcedAlias) ?? true))
            {
                if (lhs.ForcedAlias != rhs.ForcedAlias) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.AudioOutputOverride) ?? true))
            {
                if (!lhs.AudioOutputOverride.Equals(rhs.AudioOutputOverride)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.GreetDistance) ?? true))
            {
                if (lhs.GreetDistance != rhs.GreetDistance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.SetParentQuestStage) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SetParentQuestStage, rhs.SetParentQuestStage, out var lhsSetParentQuestStage, out var rhsSetParentQuestStage, out var isSetParentQuestStageEqual))
                {
                    if (!((DialogSetParentQuestStageCommon)((IDialogSetParentQuestStageGetter)lhsSetParentQuestStage).CommonInstance()!).Equals(lhsSetParentQuestStage, rhsSetParentQuestStage, equalsMask?.GetSubCrystal((int)DialogResponses_FieldIndex.SetParentQuestStage))) return false;
                }
                else if (!isSetParentQuestStageEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.StartScenePhase) ?? true))
            {
                if (!string.Equals(lhs.StartScenePhase, rhs.StartScenePhase)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Challenge) ?? true))
            {
                if (lhs.Challenge != rhs.Challenge) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.ResetGlobal) ?? true))
            {
                if (!lhs.ResetGlobal.Equals(rhs.ResetGlobal)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.SubtitlePriority) ?? true))
            {
                if (lhs.SubtitlePriority != rhs.SubtitlePriority) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IDialogResponsesGetter?)lhs,
                rhs: rhs as IDialogResponsesGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IDialogResponsesGetter?)lhs,
                rhs: rhs as IDialogResponsesGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IDialogResponsesGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.Topic);
            hash.Add(item.PreviousDialog);
            hash.Add(item.SharedDialog);
            hash.Add(item.DialogGroup);
            if (item.OverrideFileName is {} OverrideFileNameitem)
            {
                hash.Add(OverrideFileNameitem);
            }
            hash.Add(item.Responses);
            hash.Add(item.Conditions);
            if (item.Prompt is {} Promptitem)
            {
                hash.Add(Promptitem);
            }
            hash.Add(item.Speaker);
            hash.Add(item.StartScene);
            if (item.INTV is {} INTVItem)
            {
                hash.Add(INTVItem);
            }
            if (item.ForcedAlias is {} ForcedAliasitem)
            {
                hash.Add(ForcedAliasitem);
            }
            hash.Add(item.AudioOutputOverride);
            if (item.GreetDistance is {} GreetDistanceitem)
            {
                hash.Add(GreetDistanceitem);
            }
            if (item.SetParentQuestStage is {} SetParentQuestStageitem)
            {
                hash.Add(SetParentQuestStageitem);
            }
            if (item.StartScenePhase is {} StartScenePhaseitem)
            {
                hash.Add(StartScenePhaseitem);
            }
            if (item.Challenge is {} Challengeitem)
            {
                hash.Add(Challengeitem);
            }
            hash.Add(item.ResetGlobal);
            if (item.SubtitlePriority is {} SubtitlePriorityitem)
            {
                hash.Add(SubtitlePriorityitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogResponsesGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogResponsesGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogResponses.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDialogResponsesGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.Topic, out var TopicInfo))
            {
                yield return TopicInfo;
            }
            if (FormLinkInformation.TryFactory(obj.PreviousDialog, out var PreviousDialogInfo))
            {
                yield return PreviousDialogInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SharedDialog, out var SharedDialogInfo))
            {
                yield return SharedDialogInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DialogGroup, out var DialogGroupInfo))
            {
                yield return DialogGroupInfo;
            }
            foreach (var item in obj.Responses.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Speaker, out var SpeakerInfo))
            {
                yield return SpeakerInfo;
            }
            if (FormLinkInformation.TryFactory(obj.StartScene, out var StartSceneInfo))
            {
                yield return StartSceneInfo;
            }
            if (FormLinkInformation.TryFactory(obj.AudioOutputOverride, out var AudioOutputOverrideInfo))
            {
                yield return AudioOutputOverrideInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ResetGlobal, out var ResetGlobalInfo))
            {
                yield return ResetGlobalInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public DialogResponses Duplicate(
            IDialogResponsesGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new DialogResponses(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogResponsesGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogResponsesGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class DialogResponsesSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly DialogResponsesSetterTranslationCommon Instance = new DialogResponsesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogResponsesInternal item,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IDialogResponses item,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponses_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Flags) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.Flags);
                try
                {
                    if(rhs.Flags is {} rhsFlags)
                    {
                        item.Flags = rhsFlags.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Flags));
                    }
                    else
                    {
                        item.Flags = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Topic) ?? true))
            {
                item.Topic.SetTo(rhs.Topic.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.PreviousDialog) ?? true))
            {
                item.PreviousDialog.SetTo(rhs.PreviousDialog.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.SharedDialog) ?? true))
            {
                item.SharedDialog.SetTo(rhs.SharedDialog.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.DialogGroup) ?? true))
            {
                item.DialogGroup.SetTo(rhs.DialogGroup.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.OverrideFileName) ?? true))
            {
                item.OverrideFileName = rhs.OverrideFileName;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Responses) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.Responses);
                try
                {
                    item.Responses.SetTo(
                        rhs.Responses
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Prompt) ?? true))
            {
                item.Prompt = rhs.Prompt?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Speaker) ?? true))
            {
                item.Speaker.SetTo(rhs.Speaker.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.StartScene) ?? true))
            {
                item.StartScene.SetTo(rhs.StartScene.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.INTV) ?? true))
            {
                if(rhs.INTV is {} INTVrhs)
                {
                    item.INTV = INTVrhs.ToArray();
                }
                else
                {
                    item.INTV = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.ForcedAlias) ?? true))
            {
                item.ForcedAlias = rhs.ForcedAlias;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.AudioOutputOverride) ?? true))
            {
                item.AudioOutputOverride.SetTo(rhs.AudioOutputOverride.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.GreetDistance) ?? true))
            {
                item.GreetDistance = rhs.GreetDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.SetParentQuestStage) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.SetParentQuestStage);
                try
                {
                    if(rhs.SetParentQuestStage is {} rhsSetParentQuestStage)
                    {
                        item.SetParentQuestStage = rhsSetParentQuestStage.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponses_FieldIndex.SetParentQuestStage));
                    }
                    else
                    {
                        item.SetParentQuestStage = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.StartScenePhase) ?? true))
            {
                item.StartScenePhase = rhs.StartScenePhase;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Challenge) ?? true))
            {
                item.Challenge = rhs.Challenge;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.ResetGlobal) ?? true))
            {
                item.ResetGlobal.SetTo(rhs.ResetGlobal.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.SubtitlePriority) ?? true))
            {
                item.SubtitlePriority = rhs.SubtitlePriority;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDialogResponses item,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponsesInternal)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponses)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponsesInternal)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponses)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public DialogResponses DeepCopy(
            IDialogResponsesGetter item,
            DialogResponses.TranslationMask? copyMask = null)
        {
            DialogResponses ret = (DialogResponses)((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogResponses DeepCopy(
            IDialogResponsesGetter item,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogResponses ret = (DialogResponses)((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogResponses.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogResponses DeepCopy(
            IDialogResponsesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogResponses ret = (DialogResponses)((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class DialogResponses
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponses_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DialogResponses_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogResponsesCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogResponsesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogResponsesSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class DialogResponsesBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly DialogResponsesBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IDialogResponsesGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((DialogResponsesAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            if (item.Flags is {} FlagsItem)
            {
                ((DialogResponseFlagsBinaryWriteTranslation)((IBinaryItem)FlagsItem).BinaryWriteTranslator).Write(
                    item: FlagsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Topic,
                header: translationParams.ConvertToCustom(RecordTypes.TPIC));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PreviousDialog,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SharedDialog,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DialogGroup,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OverrideFileName,
                header: translationParams.ConvertToCustom(RecordTypes.IOVR),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IDialogResponseGetter>.Instance.Write(
                writer: writer,
                items: item.Responses,
                transl: (MutagenWriter subWriter, IDialogResponseGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((DialogResponseBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Prompt,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Speaker,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.StartScene,
                header: translationParams.ConvertToCustom(RecordTypes.TSCE));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.INTV,
                header: translationParams.ConvertToCustom(RecordTypes.INTV));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ForcedAlias,
                header: translationParams.ConvertToCustom(RecordTypes.ALFA));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AudioOutputOverride,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.GreetDistance,
                header: translationParams.ConvertToCustom(RecordTypes.GREE));
            if (item.SetParentQuestStage is {} SetParentQuestStageItem)
            {
                ((DialogSetParentQuestStageBinaryWriteTranslation)((IBinaryItem)SetParentQuestStageItem).BinaryWriteTranslator).Write(
                    item: SetParentQuestStageItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.StartScenePhase,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0),
                binaryType: StringBinaryType.NullTerminate);
            EnumBinaryTranslation<DialogResponses.ChallengeType, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Challenge,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.INCC));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ResetGlobal,
                header: translationParams.ConvertToCustom(RecordTypes.MODQ));
            EnumBinaryTranslation<DialogResponses.SubtitlePriorityLevel, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.SubtitlePriority,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponsesGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.INFO,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DialogResponsesBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly DialogResponsesBinaryCreateTranslation Instance = new DialogResponsesBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.INFO;
        public static ParseResult FillBinaryRecordTypes(
            IDialogResponsesInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.DialogResponsesAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)DialogResponses_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.ENAM:
                {
                    item.Flags = Mutagen.Bethesda.Fallout4.DialogResponseFlags.CreateFromBinary(frame: frame);
                    return (int)DialogResponses_FieldIndex.Flags;
                }
                case RecordTypeInts.TPIC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Topic.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.Topic;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PreviousDialog.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.PreviousDialog;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SharedDialog.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.SharedDialog;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DialogGroup.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.DialogGroup;
                }
                case RecordTypeInts.IOVR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OverrideFileName = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponses_FieldIndex.OverrideFileName;
                }
                case RecordTypeInts.TRDA:
                {
                    item.Responses.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<DialogResponse>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: DialogResponse_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: DialogResponse.TryCreateFromBinary));
                    return (int)DialogResponses_FieldIndex.Responses;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)DialogResponses_FieldIndex.Conditions;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Prompt = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponses_FieldIndex.Prompt;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Speaker.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.Speaker;
                }
                case RecordTypeInts.TSCE:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.StartScene.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.StartScene;
                }
                case RecordTypeInts.INTV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.INTV = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponses_FieldIndex.INTV;
                }
                case RecordTypeInts.ALFA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ForcedAlias = frame.ReadInt32();
                    return (int)DialogResponses_FieldIndex.ForcedAlias;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AudioOutputOverride.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.AudioOutputOverride;
                }
                case RecordTypeInts.GREE:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GreetDistance = frame.ReadUInt32();
                    return (int)DialogResponses_FieldIndex.GreetDistance;
                }
                case RecordTypeInts.TIQS:
                {
                    item.SetParentQuestStage = Mutagen.Bethesda.Fallout4.DialogSetParentQuestStage.CreateFromBinary(frame: frame);
                    return (int)DialogResponses_FieldIndex.SetParentQuestStage;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.StartScenePhase = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponses_FieldIndex.StartScenePhase;
                }
                case RecordTypeInts.INCC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Challenge = EnumBinaryTranslation<DialogResponses.ChallengeType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)DialogResponses_FieldIndex.Challenge;
                }
                case RecordTypeInts.MODQ:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ResetGlobal.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.ResetGlobal;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SubtitlePriority = EnumBinaryTranslation<DialogResponses.SubtitlePriorityLevel, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)DialogResponses_FieldIndex.SubtitlePriority;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class DialogResponsesBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class DialogResponsesBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IDialogResponsesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponses_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DialogResponses_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogResponsesCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogResponsesSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponsesCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogResponsesBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponsesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IDialogResponses);

        public DialogResponses.MajorFlag MajorFlags => (DialogResponses.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IDialogResponsesAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? DialogResponsesAdapterBinaryOverlay.DialogResponsesAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Flags
        private RangeInt32? _FlagsLocation;
        public IDialogResponseFlagsGetter? Flags => _FlagsLocation.HasValue ? DialogResponseFlagsBinaryOverlay.DialogResponseFlagsFactory(_recordData.Slice(_FlagsLocation!.Value.Min), _package) : default;
        #endregion
        #region Topic
        private int? _TopicLocation;
        public IFormLinkNullableGetter<IDialogTopicGetter> Topic => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IDialogTopicGetter>(_package, _recordData, _TopicLocation);
        #endregion
        #region PreviousDialog
        private int? _PreviousDialogLocation;
        public IFormLinkNullableGetter<IDialogResponsesGetter> PreviousDialog => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IDialogResponsesGetter>(_package, _recordData, _PreviousDialogLocation);
        #endregion
        #region SharedDialog
        private int? _SharedDialogLocation;
        public IFormLinkNullableGetter<IDialogResponsesGetter> SharedDialog => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IDialogResponsesGetter>(_package, _recordData, _SharedDialogLocation);
        #endregion
        #region DialogGroup
        private int? _DialogGroupLocation;
        public IFormLinkNullableGetter<IDialogResponsesGetter> DialogGroup => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IDialogResponsesGetter>(_package, _recordData, _DialogGroupLocation);
        #endregion
        #region OverrideFileName
        private int? _OverrideFileNameLocation;
        public String? OverrideFileName => _OverrideFileNameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _OverrideFileNameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<IDialogResponseGetter> Responses { get; private set; } = Array.Empty<IDialogResponseGetter>();
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = Array.Empty<IConditionGetter>();
        #region Prompt
        private int? _PromptLocation;
        public ITranslatedStringGetter? Prompt => _PromptLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _PromptLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #endregion
        #region Speaker
        private int? _SpeakerLocation;
        public IFormLinkNullableGetter<INpcGetter> Speaker => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<INpcGetter>(_package, _recordData, _SpeakerLocation);
        #endregion
        #region StartScene
        private int? _StartSceneLocation;
        public IFormLinkNullableGetter<ISceneGetter> StartScene => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISceneGetter>(_package, _recordData, _StartSceneLocation);
        #endregion
        #region INTV
        private int? _INTVLocation;
        public ReadOnlyMemorySlice<Byte>? INTV => _INTVLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _INTVLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ForcedAlias
        private int? _ForcedAliasLocation;
        public Int32? ForcedAlias => _ForcedAliasLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ForcedAliasLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region AudioOutputOverride
        private int? _AudioOutputOverrideLocation;
        public IFormLinkNullableGetter<ISoundOutputModelGetter> AudioOutputOverride => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundOutputModelGetter>(_package, _recordData, _AudioOutputOverrideLocation);
        #endregion
        #region GreetDistance
        private int? _GreetDistanceLocation;
        public UInt32? GreetDistance => _GreetDistanceLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _GreetDistanceLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region SetParentQuestStage
        private RangeInt32? _SetParentQuestStageLocation;
        public IDialogSetParentQuestStageGetter? SetParentQuestStage => _SetParentQuestStageLocation.HasValue ? DialogSetParentQuestStageBinaryOverlay.DialogSetParentQuestStageFactory(_recordData.Slice(_SetParentQuestStageLocation!.Value.Min), _package) : default;
        #endregion
        #region StartScenePhase
        private int? _StartScenePhaseLocation;
        public String? StartScenePhase => _StartScenePhaseLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _StartScenePhaseLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Challenge
        private int? _ChallengeLocation;
        public DialogResponses.ChallengeType? Challenge => _ChallengeLocation.HasValue ? (DialogResponses.ChallengeType)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ChallengeLocation!.Value, _package.MetaData.Constants)) : default(DialogResponses.ChallengeType?);
        #endregion
        #region ResetGlobal
        private int? _ResetGlobalLocation;
        public IFormLinkNullableGetter<IGlobalGetter> ResetGlobal => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _ResetGlobalLocation);
        #endregion
        #region SubtitlePriority
        private int? _SubtitlePriorityLocation;
        public DialogResponses.SubtitlePriorityLevel? SubtitlePriority => _SubtitlePriorityLocation.HasValue ? (DialogResponses.SubtitlePriorityLevel)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SubtitlePriorityLocation!.Value, _package.MetaData.Constants)) : default(DialogResponses.SubtitlePriorityLevel?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogResponsesBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDialogResponsesGetter DialogResponsesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DialogResponsesBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IDialogResponsesGetter DialogResponsesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DialogResponsesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)DialogResponses_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.ENAM:
                {
                    _FlagsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)DialogResponses_FieldIndex.Flags;
                }
                case RecordTypeInts.TPIC:
                {
                    _TopicLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.Topic;
                }
                case RecordTypeInts.PNAM:
                {
                    _PreviousDialogLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.PreviousDialog;
                }
                case RecordTypeInts.DNAM:
                {
                    _SharedDialogLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.SharedDialog;
                }
                case RecordTypeInts.GNAM:
                {
                    _DialogGroupLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.DialogGroup;
                }
                case RecordTypeInts.IOVR:
                {
                    _OverrideFileNameLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.OverrideFileName;
                }
                case RecordTypeInts.TRDA:
                {
                    this.Responses = this.ParseRepeatedTypelessSubrecord<IDialogResponseGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: DialogResponse_Registration.TriggerSpecs,
                        factory: DialogResponseBinaryOverlay.DialogResponseFactory);
                    return (int)DialogResponses_FieldIndex.Responses;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)DialogResponses_FieldIndex.Conditions;
                }
                case RecordTypeInts.RNAM:
                {
                    _PromptLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.Prompt;
                }
                case RecordTypeInts.ANAM:
                {
                    _SpeakerLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.Speaker;
                }
                case RecordTypeInts.TSCE:
                {
                    _StartSceneLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.StartScene;
                }
                case RecordTypeInts.INTV:
                {
                    _INTVLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.INTV;
                }
                case RecordTypeInts.ALFA:
                {
                    _ForcedAliasLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.ForcedAlias;
                }
                case RecordTypeInts.ONAM:
                {
                    _AudioOutputOverrideLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.AudioOutputOverride;
                }
                case RecordTypeInts.GREE:
                {
                    _GreetDistanceLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.GreetDistance;
                }
                case RecordTypeInts.TIQS:
                {
                    _SetParentQuestStageLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)DialogResponses_FieldIndex.SetParentQuestStage;
                }
                case RecordTypeInts.NAM0:
                {
                    _StartScenePhaseLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.StartScenePhase;
                }
                case RecordTypeInts.INCC:
                {
                    _ChallengeLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.Challenge;
                }
                case RecordTypeInts.MODQ:
                {
                    _ResetGlobalLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.ResetGlobal;
                }
                case RecordTypeInts.INAM:
                {
                    _SubtitlePriorityLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.SubtitlePriority;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponsesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<DialogResponses>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IDialogResponsesGetter rhs) return false;
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponsesGetter? obj)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

