/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class MorphGroup :
        IEquatable<IMorphGroupGetter>,
        ILoquiObjectSetter<MorphGroup>,
        IMorphGroup
    {
        #region Ctor
        public MorphGroup()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMorphGroupGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region MorphPresets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MorphPreset>? _MorphPresets;
        public ExtendedList<MorphPreset>? MorphPresets
        {
            get => this._MorphPresets;
            set => this._MorphPresets = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMorphPresetGetter>? IMorphGroupGetter.MorphPresets => _MorphPresets;
        #endregion

        #endregion
        #region UnknownMPPK
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _UnknownMPPK;
        public MemorySlice<Byte>? UnknownMPPK
        {
            get => this._UnknownMPPK;
            set => this._UnknownMPPK = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IMorphGroupGetter.UnknownMPPK => this.UnknownMPPK;
        #endregion
        #region UnknownMPGS
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _UnknownMPGS;
        public MemorySlice<Byte>? UnknownMPGS
        {
            get => this._UnknownMPGS;
            set => this._UnknownMPGS = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IMorphGroupGetter.UnknownMPGS => this.UnknownMPGS;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MorphGroupMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMorphGroupGetter rhs) return false;
            return ((MorphGroupCommon)((IMorphGroupGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMorphGroupGetter? obj)
        {
            return ((MorphGroupCommon)((IMorphGroupGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MorphGroupCommon)((IMorphGroupGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Name = initialValue;
                this.MorphPresets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MorphPreset.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MorphPreset.Mask<TItem>?>>());
                this.UnknownMPPK = initialValue;
                this.UnknownMPGS = initialValue;
            }

            public Mask(
                TItem Name,
                TItem MorphPresets,
                TItem UnknownMPPK,
                TItem UnknownMPGS)
            {
                this.Name = Name;
                this.MorphPresets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MorphPreset.Mask<TItem>?>>?>(MorphPresets, Enumerable.Empty<MaskItemIndexed<TItem, MorphPreset.Mask<TItem>?>>());
                this.UnknownMPPK = UnknownMPPK;
                this.UnknownMPGS = UnknownMPGS;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MorphPreset.Mask<TItem>?>>?>? MorphPresets;
            public TItem UnknownMPPK;
            public TItem UnknownMPGS;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.MorphPresets, rhs.MorphPresets)) return false;
                if (!object.Equals(this.UnknownMPPK, rhs.UnknownMPPK)) return false;
                if (!object.Equals(this.UnknownMPGS, rhs.UnknownMPGS)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.MorphPresets);
                hash.Add(this.UnknownMPPK);
                hash.Add(this.UnknownMPGS);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Name)) return false;
                if (this.MorphPresets != null)
                {
                    if (!eval(this.MorphPresets.Overall)) return false;
                    if (this.MorphPresets.Specific != null)
                    {
                        foreach (var item in this.MorphPresets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.UnknownMPPK)) return false;
                if (!eval(this.UnknownMPGS)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Name)) return true;
                if (this.MorphPresets != null)
                {
                    if (eval(this.MorphPresets.Overall)) return true;
                    if (this.MorphPresets.Specific != null)
                    {
                        foreach (var item in this.MorphPresets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.UnknownMPPK)) return true;
                if (eval(this.UnknownMPGS)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MorphGroup.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Name = eval(this.Name);
                if (MorphPresets != null)
                {
                    obj.MorphPresets = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MorphPreset.Mask<R>?>>?>(eval(this.MorphPresets.Overall), Enumerable.Empty<MaskItemIndexed<R, MorphPreset.Mask<R>?>>());
                    if (MorphPresets.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MorphPreset.Mask<R>?>>();
                        obj.MorphPresets.Specific = l;
                        foreach (var item in MorphPresets.Specific)
                        {
                            MaskItemIndexed<R, MorphPreset.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, MorphPreset.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.UnknownMPPK = eval(this.UnknownMPPK);
                obj.UnknownMPGS = eval(this.UnknownMPGS);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MorphGroup.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MorphGroup.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MorphGroup.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.MorphPresets?.Overall ?? true)
                        && MorphPresets is {} MorphPresetsItem)
                    {
                        sb.AppendLine("MorphPresets =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MorphPresetsItem.Overall);
                            if (MorphPresetsItem.Specific != null)
                            {
                                foreach (var subItem in MorphPresetsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.UnknownMPPK ?? true)
                    {
                        sb.AppendItem(UnknownMPPK, "UnknownMPPK");
                    }
                    if (printMask?.UnknownMPGS ?? true)
                    {
                        sb.AppendItem(UnknownMPGS, "UnknownMPGS");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphPreset.ErrorMask?>>?>? MorphPresets;
            public Exception? UnknownMPPK;
            public Exception? UnknownMPGS;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                MorphGroup_FieldIndex enu = (MorphGroup_FieldIndex)index;
                switch (enu)
                {
                    case MorphGroup_FieldIndex.Name:
                        return Name;
                    case MorphGroup_FieldIndex.MorphPresets:
                        return MorphPresets;
                    case MorphGroup_FieldIndex.UnknownMPPK:
                        return UnknownMPPK;
                    case MorphGroup_FieldIndex.UnknownMPGS:
                        return UnknownMPGS;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                MorphGroup_FieldIndex enu = (MorphGroup_FieldIndex)index;
                switch (enu)
                {
                    case MorphGroup_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case MorphGroup_FieldIndex.MorphPresets:
                        this.MorphPresets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphPreset.ErrorMask?>>?>(ex, null);
                        break;
                    case MorphGroup_FieldIndex.UnknownMPPK:
                        this.UnknownMPPK = ex;
                        break;
                    case MorphGroup_FieldIndex.UnknownMPGS:
                        this.UnknownMPGS = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                MorphGroup_FieldIndex enu = (MorphGroup_FieldIndex)index;
                switch (enu)
                {
                    case MorphGroup_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case MorphGroup_FieldIndex.MorphPresets:
                        this.MorphPresets = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphPreset.ErrorMask?>>?>)obj;
                        break;
                    case MorphGroup_FieldIndex.UnknownMPPK:
                        this.UnknownMPPK = (Exception?)obj;
                        break;
                    case MorphGroup_FieldIndex.UnknownMPGS:
                        this.UnknownMPGS = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (MorphPresets != null) return true;
                if (UnknownMPPK != null) return true;
                if (UnknownMPGS != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Name, "Name");
                }
                if (MorphPresets is {} MorphPresetsItem)
                {
                    sb.AppendLine("MorphPresets =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MorphPresetsItem.Overall);
                        if (MorphPresetsItem.Specific != null)
                        {
                            foreach (var subItem in MorphPresetsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(UnknownMPPK, "UnknownMPPK");
                }
                {
                    sb.AppendItem(UnknownMPGS, "UnknownMPGS");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.MorphPresets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphPreset.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MorphPresets?.Overall, rhs.MorphPresets?.Overall), Noggog.ExceptionExt.Combine(this.MorphPresets?.Specific, rhs.MorphPresets?.Specific));
                ret.UnknownMPPK = this.UnknownMPPK.Combine(rhs.UnknownMPPK);
                ret.UnknownMPGS = this.UnknownMPGS.Combine(rhs.UnknownMPGS);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Name;
            public MorphPreset.TranslationMask? MorphPresets;
            public bool UnknownMPPK;
            public bool UnknownMPGS;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Name = defaultOn;
                this.UnknownMPPK = defaultOn;
                this.UnknownMPGS = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Name, null));
                ret.Add((MorphPresets == null ? DefaultOn : !MorphPresets.GetCrystal().CopyNothing, MorphPresets?.GetCrystal()));
                ret.Add((UnknownMPPK, null));
                ret.Add((UnknownMPGS, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MorphGroupCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MorphGroupSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MorphGroupBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MorphGroupBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static MorphGroup CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new MorphGroup();
            ((MorphGroupSetterCommon)((IMorphGroupGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MorphGroup item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MorphGroupSetterCommon)((IMorphGroupGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MorphGroup GetNew()
        {
            return new MorphGroup();
        }

    }
    #endregion

    #region Interface
    public partial interface IMorphGroup :
        IFormLinkContainer,
        ILoquiObjectSetter<IMorphGroup>,
        IMorphGroupGetter,
        INamed,
        INamedRequired
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new ExtendedList<MorphPreset>? MorphPresets { get; set; }
        new MemorySlice<Byte>? UnknownMPPK { get; set; }
        new MemorySlice<Byte>? UnknownMPGS { get; set; }
    }

    public partial interface IMorphGroupGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IMorphGroupGetter>,
        INamedGetter,
        INamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => MorphGroup_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        IReadOnlyList<IMorphPresetGetter>? MorphPresets { get; }
        ReadOnlyMemorySlice<Byte>? UnknownMPPK { get; }
        ReadOnlyMemorySlice<Byte>? UnknownMPGS { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MorphGroupMixIn
    {
        public static void Clear(this IMorphGroup item)
        {
            ((MorphGroupSetterCommon)((IMorphGroupGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MorphGroup.Mask<bool> GetEqualsMask(
            this IMorphGroupGetter item,
            IMorphGroupGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MorphGroupCommon)((IMorphGroupGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMorphGroupGetter item,
            string? name = null,
            MorphGroup.Mask<bool>? printMask = null)
        {
            return ((MorphGroupCommon)((IMorphGroupGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMorphGroupGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MorphGroup.Mask<bool>? printMask = null)
        {
            ((MorphGroupCommon)((IMorphGroupGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMorphGroupGetter item,
            IMorphGroupGetter rhs,
            MorphGroup.TranslationMask? equalsMask = null)
        {
            return ((MorphGroupCommon)((IMorphGroupGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMorphGroup lhs,
            IMorphGroupGetter rhs)
        {
            ((MorphGroupSetterTranslationCommon)((IMorphGroupGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMorphGroup lhs,
            IMorphGroupGetter rhs,
            MorphGroup.TranslationMask? copyMask = null)
        {
            ((MorphGroupSetterTranslationCommon)((IMorphGroupGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMorphGroup lhs,
            IMorphGroupGetter rhs,
            out MorphGroup.ErrorMask errorMask,
            MorphGroup.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MorphGroupSetterTranslationCommon)((IMorphGroupGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MorphGroup.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMorphGroup lhs,
            IMorphGroupGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MorphGroupSetterTranslationCommon)((IMorphGroupGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MorphGroup DeepCopy(
            this IMorphGroupGetter item,
            MorphGroup.TranslationMask? copyMask = null)
        {
            return ((MorphGroupSetterTranslationCommon)((IMorphGroupGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MorphGroup DeepCopy(
            this IMorphGroupGetter item,
            out MorphGroup.ErrorMask errorMask,
            MorphGroup.TranslationMask? copyMask = null)
        {
            return ((MorphGroupSetterTranslationCommon)((IMorphGroupGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MorphGroup DeepCopy(
            this IMorphGroupGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MorphGroupSetterTranslationCommon)((IMorphGroupGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMorphGroup item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MorphGroupSetterCommon)((IMorphGroupGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum MorphGroup_FieldIndex
    {
        Name = 0,
        MorphPresets = 1,
        UnknownMPPK = 2,
        UnknownMPGS = 3,
    }
    #endregion

    #region Registration
    internal partial class MorphGroup_Registration : ILoquiRegistration
    {
        public static readonly MorphGroup_Registration Instance = new MorphGroup_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(MorphGroup.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MorphGroup.ErrorMask);

        public static readonly Type ClassType = typeof(MorphGroup);

        public static readonly Type GetterType = typeof(IMorphGroupGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMorphGroup);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.MorphGroup";

        public const string Name = "MorphGroup";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.MPGN,
                RecordTypes.MPPI,
                RecordTypes.MPPN,
                RecordTypes.MPPM,
                RecordTypes.MPPT,
                RecordTypes.MPPF,
                RecordTypes.MPPC,
                RecordTypes.MPPK,
                RecordTypes.MPGS);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(MorphGroupBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MorphGroupSetterCommon
    {
        public static readonly MorphGroupSetterCommon Instance = new MorphGroupSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMorphGroup item)
        {
            ClearPartial();
            item.Name = default;
            item.MorphPresets = null;
            item.UnknownMPPK = default;
            item.UnknownMPGS = default;
        }
        
        #region Mutagen
        public void RemapLinks(IMorphGroup obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.MorphPresets?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMorphGroup item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: MorphGroupBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class MorphGroupCommon
    {
        public static readonly MorphGroupCommon Instance = new MorphGroupCommon();

        public MorphGroup.Mask<bool> GetEqualsMask(
            IMorphGroupGetter item,
            IMorphGroupGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MorphGroup.Mask<bool>(false);
            ((MorphGroupCommon)((IMorphGroupGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMorphGroupGetter item,
            IMorphGroupGetter rhs,
            MorphGroup.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.MorphPresets = item.MorphPresets.CollectionEqualsHelper(
                rhs.MorphPresets,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.UnknownMPPK = MemorySliceExt.SequenceEqual(item.UnknownMPPK, rhs.UnknownMPPK);
            ret.UnknownMPGS = MemorySliceExt.SequenceEqual(item.UnknownMPGS, rhs.UnknownMPGS);
        }
        
        public string Print(
            IMorphGroupGetter item,
            string? name = null,
            MorphGroup.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMorphGroupGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MorphGroup.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MorphGroup =>");
            }
            else
            {
                sb.AppendLine($"{name} (MorphGroup) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMorphGroupGetter item,
            StructuredStringBuilder sb,
            MorphGroup.Mask<bool>? printMask = null)
        {
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.MorphPresets?.Overall ?? true)
                && item.MorphPresets is {} MorphPresetsItem)
            {
                sb.AppendLine("MorphPresets =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MorphPresetsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.UnknownMPPK ?? true)
                && item.UnknownMPPK is {} UnknownMPPKItem)
            {
                sb.AppendLine($"UnknownMPPK => {SpanExt.ToHexString(UnknownMPPKItem)}");
            }
            if ((printMask?.UnknownMPGS ?? true)
                && item.UnknownMPGS is {} UnknownMPGSItem)
            {
                sb.AppendLine($"UnknownMPGS => {SpanExt.ToHexString(UnknownMPGSItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMorphGroupGetter? lhs,
            IMorphGroupGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)MorphGroup_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorphGroup_FieldIndex.MorphPresets) ?? true))
            {
                if (!lhs.MorphPresets.SequenceEqualNullable(rhs.MorphPresets, (l, r) => ((MorphPresetCommon)((IMorphPresetGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)MorphGroup_FieldIndex.MorphPresets)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorphGroup_FieldIndex.UnknownMPPK) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.UnknownMPPK, rhs.UnknownMPPK)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorphGroup_FieldIndex.UnknownMPGS) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.UnknownMPGS, rhs.UnknownMPGS)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IMorphGroupGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.MorphPresets);
            if (item.UnknownMPPK is {} UnknownMPPKItem)
            {
                hash.Add(UnknownMPPKItem);
            }
            if (item.UnknownMPGS is {} UnknownMPGSItem)
            {
                hash.Add(UnknownMPGSItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MorphGroup.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMorphGroupGetter obj)
        {
            if (obj.MorphPresets is {} MorphPresetsItem)
            {
                foreach (var item in MorphPresetsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class MorphGroupSetterTranslationCommon
    {
        public static readonly MorphGroupSetterTranslationCommon Instance = new MorphGroupSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMorphGroup item,
            IMorphGroupGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)MorphGroup_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)MorphGroup_FieldIndex.MorphPresets) ?? true))
            {
                errorMask?.PushIndex((int)MorphGroup_FieldIndex.MorphPresets);
                try
                {
                    if ((rhs.MorphPresets != null))
                    {
                        item.MorphPresets = 
                            rhs.MorphPresets
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<MorphPreset>();
                    }
                    else
                    {
                        item.MorphPresets = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MorphGroup_FieldIndex.UnknownMPPK) ?? true))
            {
                if(rhs.UnknownMPPK is {} UnknownMPPKrhs)
                {
                    item.UnknownMPPK = UnknownMPPKrhs.ToArray();
                }
                else
                {
                    item.UnknownMPPK = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MorphGroup_FieldIndex.UnknownMPGS) ?? true))
            {
                if(rhs.UnknownMPGS is {} UnknownMPGSrhs)
                {
                    item.UnknownMPGS = UnknownMPGSrhs.ToArray();
                }
                else
                {
                    item.UnknownMPGS = default;
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IMorphGroup item,
            IMorphGroupGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public MorphGroup DeepCopy(
            IMorphGroupGetter item,
            MorphGroup.TranslationMask? copyMask = null)
        {
            MorphGroup ret = (MorphGroup)((MorphGroupCommon)((IMorphGroupGetter)item).CommonInstance()!).GetNew();
            ((MorphGroupSetterTranslationCommon)((IMorphGroupGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MorphGroup DeepCopy(
            IMorphGroupGetter item,
            out MorphGroup.ErrorMask errorMask,
            MorphGroup.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MorphGroup ret = (MorphGroup)((MorphGroupCommon)((IMorphGroupGetter)item).CommonInstance()!).GetNew();
            ((MorphGroupSetterTranslationCommon)((IMorphGroupGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MorphGroup.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MorphGroup DeepCopy(
            IMorphGroupGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MorphGroup ret = (MorphGroup)((MorphGroupCommon)((IMorphGroupGetter)item).CommonInstance()!).GetNew();
            ((MorphGroupSetterTranslationCommon)((IMorphGroupGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class MorphGroup
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MorphGroup_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => MorphGroup_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MorphGroupCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MorphGroupSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MorphGroupSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMorphGroupGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMorphGroupGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMorphGroupGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class MorphGroupBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly MorphGroupBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IMorphGroupGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.MPGN),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IMorphPresetGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.MorphPresets,
                counterType: RecordTypes.MPPC,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IMorphPresetGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((MorphPresetBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownMPPK,
                header: translationParams.ConvertToCustom(RecordTypes.MPPK));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.UnknownMPGS,
                header: translationParams.ConvertToCustom(RecordTypes.MPGS));
        }

        public void Write(
            MutagenWriter writer,
            IMorphGroupGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMorphGroupGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MorphGroupBinaryCreateTranslation
    {
        public static readonly MorphGroupBinaryCreateTranslation Instance = new MorphGroupBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IMorphGroup item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MPGN:
                {
                    if (lastParsed.ShortCircuit((int)MorphGroup_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)MorphGroup_FieldIndex.Name;
                }
                case RecordTypeInts.MPPI:
                case RecordTypeInts.MPPN:
                case RecordTypeInts.MPPM:
                case RecordTypeInts.MPPT:
                case RecordTypeInts.MPPF:
                case RecordTypeInts.MPPC:
                {
                    if (lastParsed.ShortCircuit((int)MorphGroup_FieldIndex.MorphPresets, translationParams)) return ParseResult.Stop;
                    item.MorphPresets = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<MorphPreset>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.MPPC,
                            triggeringRecord: MorphPreset_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: MorphPreset.TryCreateFromBinary)
                        .CastExtendedList<MorphPreset>();
                    return (int)MorphGroup_FieldIndex.MorphPresets;
                }
                case RecordTypeInts.MPPK:
                {
                    if (lastParsed.ShortCircuit((int)MorphGroup_FieldIndex.UnknownMPPK, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UnknownMPPK = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)MorphGroup_FieldIndex.UnknownMPPK;
                }
                case RecordTypeInts.MPGS:
                {
                    if (lastParsed.ShortCircuit((int)MorphGroup_FieldIndex.UnknownMPGS, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UnknownMPGS = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)MorphGroup_FieldIndex.UnknownMPGS;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class MorphGroupBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMorphGroupGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MorphGroupBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class MorphGroupBinaryOverlay :
        PluginBinaryOverlay,
        IMorphGroupGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MorphGroup_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => MorphGroup_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MorphGroupCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MorphGroupSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMorphGroupGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMorphGroupGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMorphGroupGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MorphGroupCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MorphGroupBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MorphGroupBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        public IReadOnlyList<IMorphPresetGetter>? MorphPresets { get; private set; }
        #region UnknownMPPK
        private int? _UnknownMPPKLocation;
        public ReadOnlyMemorySlice<Byte>? UnknownMPPK => _UnknownMPPKLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _UnknownMPPKLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region UnknownMPGS
        private int? _UnknownMPGSLocation;
        public ReadOnlyMemorySlice<Byte>? UnknownMPGS => _UnknownMPGSLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _UnknownMPGSLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MorphGroupBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IMorphGroupGetter MorphGroupFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new MorphGroupBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IMorphGroupGetter MorphGroupFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return MorphGroupFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MPGN:
                {
                    if (lastParsed.ShortCircuit((int)MorphGroup_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    _NameLocation = (stream.Position - offset);
                    return (int)MorphGroup_FieldIndex.Name;
                }
                case RecordTypeInts.MPPI:
                case RecordTypeInts.MPPN:
                case RecordTypeInts.MPPM:
                case RecordTypeInts.MPPT:
                case RecordTypeInts.MPPF:
                case RecordTypeInts.MPPC:
                {
                    if (lastParsed.ShortCircuit((int)MorphGroup_FieldIndex.MorphPresets, translationParams)) return ParseResult.Stop;
                    this.MorphPresets = BinaryOverlayList.FactoryByCountPerItem<IMorphPresetGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: MorphPreset_Registration.TriggerSpecs,
                        countType: RecordTypes.MPPC,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => MorphPresetBinaryOverlay.MorphPresetFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)MorphGroup_FieldIndex.MorphPresets;
                }
                case RecordTypeInts.MPPK:
                {
                    if (lastParsed.ShortCircuit((int)MorphGroup_FieldIndex.UnknownMPPK, translationParams)) return ParseResult.Stop;
                    _UnknownMPPKLocation = (stream.Position - offset);
                    return (int)MorphGroup_FieldIndex.UnknownMPPK;
                }
                case RecordTypeInts.MPGS:
                {
                    if (lastParsed.ShortCircuit((int)MorphGroup_FieldIndex.UnknownMPGS, translationParams)) return ParseResult.Stop;
                    _UnknownMPGSLocation = (stream.Position - offset);
                    return (int)MorphGroup_FieldIndex.UnknownMPGS;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MorphGroupMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMorphGroupGetter rhs) return false;
            return ((MorphGroupCommon)((IMorphGroupGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMorphGroupGetter? obj)
        {
            return ((MorphGroupCommon)((IMorphGroupGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MorphGroupCommon)((IMorphGroupGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

