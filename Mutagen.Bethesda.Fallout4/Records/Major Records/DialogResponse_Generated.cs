/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class DialogResponse :
        IDialogResponse,
        IEquatable<IDialogResponseGetter>,
        ILoquiObjectSetter<DialogResponse>
    {
        #region Ctor
        public DialogResponse()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Emotion
        private readonly IFormLink<IKeywordGetter> _Emotion = new FormLink<IKeywordGetter>();
        public IFormLink<IKeywordGetter> Emotion
        {
            get => _Emotion;
            set => _Emotion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IKeywordGetter> IDialogResponseGetter.Emotion => this.Emotion;
        #endregion
        #region ResponseNumber
        public Byte ResponseNumber { get; set; } = default(Byte);
        #endregion
        #region Sound
        private readonly IFormLink<ISoundDescriptorGetter> _Sound = new FormLink<ISoundDescriptorGetter>();
        public IFormLink<ISoundDescriptorGetter> Sound
        {
            get => _Sound;
            set => _Sound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundDescriptorGetter> IDialogResponseGetter.Sound => this.Sound;
        #endregion
        #region Unknown
        public Byte Unknown { get; set; } = default(Byte);
        #endregion
        #region InterruptPercentage
        public UInt16 InterruptPercentage { get; set; } = default(UInt16);
        #endregion
        #region CameraTargetAlias
        public Int32 CameraTargetAlias { get; set; } = default(Int32);
        #endregion
        #region CameraLocationAlias
        public Int32 CameraLocationAlias { get; set; } = default(Int32);
        #endregion
        #region Text
        public TranslatedString Text { get; set; } = string.Empty;
        ITranslatedStringGetter IDialogResponseGetter.Text => this.Text;
        #endregion
        #region ScriptNotes
        public String ScriptNotes { get; set; } = string.Empty;
        #endregion
        #region Edits
        public String Edits { get; set; } = string.Empty;
        #endregion
        #region AlternateLipText
        public String AlternateLipText { get; set; } = string.Empty;
        #endregion
        #region SpeakerIdleAnimation
        private readonly IFormLinkNullable<IIdleAnimationGetter> _SpeakerIdleAnimation = new FormLinkNullable<IIdleAnimationGetter>();
        public IFormLinkNullable<IIdleAnimationGetter> SpeakerIdleAnimation
        {
            get => _SpeakerIdleAnimation;
            set => _SpeakerIdleAnimation.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IIdleAnimationGetter> IDialogResponseGetter.SpeakerIdleAnimation => this.SpeakerIdleAnimation;
        #endregion
        #region ListenerIdleAnimation
        private readonly IFormLinkNullable<IIdleAnimationGetter> _ListenerIdleAnimation = new FormLinkNullable<IIdleAnimationGetter>();
        public IFormLinkNullable<IIdleAnimationGetter> ListenerIdleAnimation
        {
            get => _ListenerIdleAnimation;
            set => _ListenerIdleAnimation.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IIdleAnimationGetter> IDialogResponseGetter.ListenerIdleAnimation => this.ListenerIdleAnimation;
        #endregion
        #region TextHash
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TextHash;
        public MemorySlice<Byte>? TextHash
        {
            get => this._TextHash;
            set => this._TextHash = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponseGetter.TextHash => this.TextHash;
        #endregion
        #region CameraPath
        private readonly IFormLinkNullable<ICameraPathGetter> _CameraPath = new FormLinkNullable<ICameraPathGetter>();
        public IFormLinkNullable<ICameraPathGetter> CameraPath
        {
            get => _CameraPath;
            set => _CameraPath.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICameraPathGetter> IDialogResponseGetter.CameraPath => this.CameraPath;
        #endregion
        #region StopOnSceneEnd
        public Boolean StopOnSceneEnd { get; set; } = default(Boolean);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponseMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogResponseGetter rhs) return false;
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponseGetter? obj)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Emotion = initialValue;
                this.ResponseNumber = initialValue;
                this.Sound = initialValue;
                this.Unknown = initialValue;
                this.InterruptPercentage = initialValue;
                this.CameraTargetAlias = initialValue;
                this.CameraLocationAlias = initialValue;
                this.Text = initialValue;
                this.ScriptNotes = initialValue;
                this.Edits = initialValue;
                this.AlternateLipText = initialValue;
                this.SpeakerIdleAnimation = initialValue;
                this.ListenerIdleAnimation = initialValue;
                this.TextHash = initialValue;
                this.CameraPath = initialValue;
                this.StopOnSceneEnd = initialValue;
            }

            public Mask(
                TItem Emotion,
                TItem ResponseNumber,
                TItem Sound,
                TItem Unknown,
                TItem InterruptPercentage,
                TItem CameraTargetAlias,
                TItem CameraLocationAlias,
                TItem Text,
                TItem ScriptNotes,
                TItem Edits,
                TItem AlternateLipText,
                TItem SpeakerIdleAnimation,
                TItem ListenerIdleAnimation,
                TItem TextHash,
                TItem CameraPath,
                TItem StopOnSceneEnd)
            {
                this.Emotion = Emotion;
                this.ResponseNumber = ResponseNumber;
                this.Sound = Sound;
                this.Unknown = Unknown;
                this.InterruptPercentage = InterruptPercentage;
                this.CameraTargetAlias = CameraTargetAlias;
                this.CameraLocationAlias = CameraLocationAlias;
                this.Text = Text;
                this.ScriptNotes = ScriptNotes;
                this.Edits = Edits;
                this.AlternateLipText = AlternateLipText;
                this.SpeakerIdleAnimation = SpeakerIdleAnimation;
                this.ListenerIdleAnimation = ListenerIdleAnimation;
                this.TextHash = TextHash;
                this.CameraPath = CameraPath;
                this.StopOnSceneEnd = StopOnSceneEnd;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Emotion;
            public TItem ResponseNumber;
            public TItem Sound;
            public TItem Unknown;
            public TItem InterruptPercentage;
            public TItem CameraTargetAlias;
            public TItem CameraLocationAlias;
            public TItem Text;
            public TItem ScriptNotes;
            public TItem Edits;
            public TItem AlternateLipText;
            public TItem SpeakerIdleAnimation;
            public TItem ListenerIdleAnimation;
            public TItem TextHash;
            public TItem CameraPath;
            public TItem StopOnSceneEnd;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Emotion, rhs.Emotion)) return false;
                if (!object.Equals(this.ResponseNumber, rhs.ResponseNumber)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.InterruptPercentage, rhs.InterruptPercentage)) return false;
                if (!object.Equals(this.CameraTargetAlias, rhs.CameraTargetAlias)) return false;
                if (!object.Equals(this.CameraLocationAlias, rhs.CameraLocationAlias)) return false;
                if (!object.Equals(this.Text, rhs.Text)) return false;
                if (!object.Equals(this.ScriptNotes, rhs.ScriptNotes)) return false;
                if (!object.Equals(this.Edits, rhs.Edits)) return false;
                if (!object.Equals(this.AlternateLipText, rhs.AlternateLipText)) return false;
                if (!object.Equals(this.SpeakerIdleAnimation, rhs.SpeakerIdleAnimation)) return false;
                if (!object.Equals(this.ListenerIdleAnimation, rhs.ListenerIdleAnimation)) return false;
                if (!object.Equals(this.TextHash, rhs.TextHash)) return false;
                if (!object.Equals(this.CameraPath, rhs.CameraPath)) return false;
                if (!object.Equals(this.StopOnSceneEnd, rhs.StopOnSceneEnd)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Emotion);
                hash.Add(this.ResponseNumber);
                hash.Add(this.Sound);
                hash.Add(this.Unknown);
                hash.Add(this.InterruptPercentage);
                hash.Add(this.CameraTargetAlias);
                hash.Add(this.CameraLocationAlias);
                hash.Add(this.Text);
                hash.Add(this.ScriptNotes);
                hash.Add(this.Edits);
                hash.Add(this.AlternateLipText);
                hash.Add(this.SpeakerIdleAnimation);
                hash.Add(this.ListenerIdleAnimation);
                hash.Add(this.TextHash);
                hash.Add(this.CameraPath);
                hash.Add(this.StopOnSceneEnd);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Emotion)) return false;
                if (!eval(this.ResponseNumber)) return false;
                if (!eval(this.Sound)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.InterruptPercentage)) return false;
                if (!eval(this.CameraTargetAlias)) return false;
                if (!eval(this.CameraLocationAlias)) return false;
                if (!eval(this.Text)) return false;
                if (!eval(this.ScriptNotes)) return false;
                if (!eval(this.Edits)) return false;
                if (!eval(this.AlternateLipText)) return false;
                if (!eval(this.SpeakerIdleAnimation)) return false;
                if (!eval(this.ListenerIdleAnimation)) return false;
                if (!eval(this.TextHash)) return false;
                if (!eval(this.CameraPath)) return false;
                if (!eval(this.StopOnSceneEnd)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Emotion)) return true;
                if (eval(this.ResponseNumber)) return true;
                if (eval(this.Sound)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.InterruptPercentage)) return true;
                if (eval(this.CameraTargetAlias)) return true;
                if (eval(this.CameraLocationAlias)) return true;
                if (eval(this.Text)) return true;
                if (eval(this.ScriptNotes)) return true;
                if (eval(this.Edits)) return true;
                if (eval(this.AlternateLipText)) return true;
                if (eval(this.SpeakerIdleAnimation)) return true;
                if (eval(this.ListenerIdleAnimation)) return true;
                if (eval(this.TextHash)) return true;
                if (eval(this.CameraPath)) return true;
                if (eval(this.StopOnSceneEnd)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogResponse.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Emotion = eval(this.Emotion);
                obj.ResponseNumber = eval(this.ResponseNumber);
                obj.Sound = eval(this.Sound);
                obj.Unknown = eval(this.Unknown);
                obj.InterruptPercentage = eval(this.InterruptPercentage);
                obj.CameraTargetAlias = eval(this.CameraTargetAlias);
                obj.CameraLocationAlias = eval(this.CameraLocationAlias);
                obj.Text = eval(this.Text);
                obj.ScriptNotes = eval(this.ScriptNotes);
                obj.Edits = eval(this.Edits);
                obj.AlternateLipText = eval(this.AlternateLipText);
                obj.SpeakerIdleAnimation = eval(this.SpeakerIdleAnimation);
                obj.ListenerIdleAnimation = eval(this.ListenerIdleAnimation);
                obj.TextHash = eval(this.TextHash);
                obj.CameraPath = eval(this.CameraPath);
                obj.StopOnSceneEnd = eval(this.StopOnSceneEnd);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DialogResponse.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DialogResponse.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DialogResponse.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Emotion ?? true)
                    {
                        sb.AppendItem(Emotion, "Emotion");
                    }
                    if (printMask?.ResponseNumber ?? true)
                    {
                        sb.AppendItem(ResponseNumber, "ResponseNumber");
                    }
                    if (printMask?.Sound ?? true)
                    {
                        sb.AppendItem(Sound, "Sound");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.InterruptPercentage ?? true)
                    {
                        sb.AppendItem(InterruptPercentage, "InterruptPercentage");
                    }
                    if (printMask?.CameraTargetAlias ?? true)
                    {
                        sb.AppendItem(CameraTargetAlias, "CameraTargetAlias");
                    }
                    if (printMask?.CameraLocationAlias ?? true)
                    {
                        sb.AppendItem(CameraLocationAlias, "CameraLocationAlias");
                    }
                    if (printMask?.Text ?? true)
                    {
                        sb.AppendItem(Text, "Text");
                    }
                    if (printMask?.ScriptNotes ?? true)
                    {
                        sb.AppendItem(ScriptNotes, "ScriptNotes");
                    }
                    if (printMask?.Edits ?? true)
                    {
                        sb.AppendItem(Edits, "Edits");
                    }
                    if (printMask?.AlternateLipText ?? true)
                    {
                        sb.AppendItem(AlternateLipText, "AlternateLipText");
                    }
                    if (printMask?.SpeakerIdleAnimation ?? true)
                    {
                        sb.AppendItem(SpeakerIdleAnimation, "SpeakerIdleAnimation");
                    }
                    if (printMask?.ListenerIdleAnimation ?? true)
                    {
                        sb.AppendItem(ListenerIdleAnimation, "ListenerIdleAnimation");
                    }
                    if (printMask?.TextHash ?? true)
                    {
                        sb.AppendItem(TextHash, "TextHash");
                    }
                    if (printMask?.CameraPath ?? true)
                    {
                        sb.AppendItem(CameraPath, "CameraPath");
                    }
                    if (printMask?.StopOnSceneEnd ?? true)
                    {
                        sb.AppendItem(StopOnSceneEnd, "StopOnSceneEnd");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Emotion;
            public Exception? ResponseNumber;
            public Exception? Sound;
            public Exception? Unknown;
            public Exception? InterruptPercentage;
            public Exception? CameraTargetAlias;
            public Exception? CameraLocationAlias;
            public Exception? Text;
            public Exception? ScriptNotes;
            public Exception? Edits;
            public Exception? AlternateLipText;
            public Exception? SpeakerIdleAnimation;
            public Exception? ListenerIdleAnimation;
            public Exception? TextHash;
            public Exception? CameraPath;
            public Exception? StopOnSceneEnd;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        return Emotion;
                    case DialogResponse_FieldIndex.ResponseNumber:
                        return ResponseNumber;
                    case DialogResponse_FieldIndex.Sound:
                        return Sound;
                    case DialogResponse_FieldIndex.Unknown:
                        return Unknown;
                    case DialogResponse_FieldIndex.InterruptPercentage:
                        return InterruptPercentage;
                    case DialogResponse_FieldIndex.CameraTargetAlias:
                        return CameraTargetAlias;
                    case DialogResponse_FieldIndex.CameraLocationAlias:
                        return CameraLocationAlias;
                    case DialogResponse_FieldIndex.Text:
                        return Text;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        return ScriptNotes;
                    case DialogResponse_FieldIndex.Edits:
                        return Edits;
                    case DialogResponse_FieldIndex.AlternateLipText:
                        return AlternateLipText;
                    case DialogResponse_FieldIndex.SpeakerIdleAnimation:
                        return SpeakerIdleAnimation;
                    case DialogResponse_FieldIndex.ListenerIdleAnimation:
                        return ListenerIdleAnimation;
                    case DialogResponse_FieldIndex.TextHash:
                        return TextHash;
                    case DialogResponse_FieldIndex.CameraPath:
                        return CameraPath;
                    case DialogResponse_FieldIndex.StopOnSceneEnd:
                        return StopOnSceneEnd;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        this.Emotion = ex;
                        break;
                    case DialogResponse_FieldIndex.ResponseNumber:
                        this.ResponseNumber = ex;
                        break;
                    case DialogResponse_FieldIndex.Sound:
                        this.Sound = ex;
                        break;
                    case DialogResponse_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case DialogResponse_FieldIndex.InterruptPercentage:
                        this.InterruptPercentage = ex;
                        break;
                    case DialogResponse_FieldIndex.CameraTargetAlias:
                        this.CameraTargetAlias = ex;
                        break;
                    case DialogResponse_FieldIndex.CameraLocationAlias:
                        this.CameraLocationAlias = ex;
                        break;
                    case DialogResponse_FieldIndex.Text:
                        this.Text = ex;
                        break;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        this.ScriptNotes = ex;
                        break;
                    case DialogResponse_FieldIndex.Edits:
                        this.Edits = ex;
                        break;
                    case DialogResponse_FieldIndex.AlternateLipText:
                        this.AlternateLipText = ex;
                        break;
                    case DialogResponse_FieldIndex.SpeakerIdleAnimation:
                        this.SpeakerIdleAnimation = ex;
                        break;
                    case DialogResponse_FieldIndex.ListenerIdleAnimation:
                        this.ListenerIdleAnimation = ex;
                        break;
                    case DialogResponse_FieldIndex.TextHash:
                        this.TextHash = ex;
                        break;
                    case DialogResponse_FieldIndex.CameraPath:
                        this.CameraPath = ex;
                        break;
                    case DialogResponse_FieldIndex.StopOnSceneEnd:
                        this.StopOnSceneEnd = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DialogResponse_FieldIndex enu = (DialogResponse_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponse_FieldIndex.Emotion:
                        this.Emotion = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.ResponseNumber:
                        this.ResponseNumber = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Sound:
                        this.Sound = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.InterruptPercentage:
                        this.InterruptPercentage = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.CameraTargetAlias:
                        this.CameraTargetAlias = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.CameraLocationAlias:
                        this.CameraLocationAlias = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Text:
                        this.Text = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.ScriptNotes:
                        this.ScriptNotes = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.Edits:
                        this.Edits = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.AlternateLipText:
                        this.AlternateLipText = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.SpeakerIdleAnimation:
                        this.SpeakerIdleAnimation = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.ListenerIdleAnimation:
                        this.ListenerIdleAnimation = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.TextHash:
                        this.TextHash = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.CameraPath:
                        this.CameraPath = (Exception?)obj;
                        break;
                    case DialogResponse_FieldIndex.StopOnSceneEnd:
                        this.StopOnSceneEnd = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Emotion != null) return true;
                if (ResponseNumber != null) return true;
                if (Sound != null) return true;
                if (Unknown != null) return true;
                if (InterruptPercentage != null) return true;
                if (CameraTargetAlias != null) return true;
                if (CameraLocationAlias != null) return true;
                if (Text != null) return true;
                if (ScriptNotes != null) return true;
                if (Edits != null) return true;
                if (AlternateLipText != null) return true;
                if (SpeakerIdleAnimation != null) return true;
                if (ListenerIdleAnimation != null) return true;
                if (TextHash != null) return true;
                if (CameraPath != null) return true;
                if (StopOnSceneEnd != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Emotion, "Emotion");
                }
                {
                    sb.AppendItem(ResponseNumber, "ResponseNumber");
                }
                {
                    sb.AppendItem(Sound, "Sound");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(InterruptPercentage, "InterruptPercentage");
                }
                {
                    sb.AppendItem(CameraTargetAlias, "CameraTargetAlias");
                }
                {
                    sb.AppendItem(CameraLocationAlias, "CameraLocationAlias");
                }
                {
                    sb.AppendItem(Text, "Text");
                }
                {
                    sb.AppendItem(ScriptNotes, "ScriptNotes");
                }
                {
                    sb.AppendItem(Edits, "Edits");
                }
                {
                    sb.AppendItem(AlternateLipText, "AlternateLipText");
                }
                {
                    sb.AppendItem(SpeakerIdleAnimation, "SpeakerIdleAnimation");
                }
                {
                    sb.AppendItem(ListenerIdleAnimation, "ListenerIdleAnimation");
                }
                {
                    sb.AppendItem(TextHash, "TextHash");
                }
                {
                    sb.AppendItem(CameraPath, "CameraPath");
                }
                {
                    sb.AppendItem(StopOnSceneEnd, "StopOnSceneEnd");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Emotion = this.Emotion.Combine(rhs.Emotion);
                ret.ResponseNumber = this.ResponseNumber.Combine(rhs.ResponseNumber);
                ret.Sound = this.Sound.Combine(rhs.Sound);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.InterruptPercentage = this.InterruptPercentage.Combine(rhs.InterruptPercentage);
                ret.CameraTargetAlias = this.CameraTargetAlias.Combine(rhs.CameraTargetAlias);
                ret.CameraLocationAlias = this.CameraLocationAlias.Combine(rhs.CameraLocationAlias);
                ret.Text = this.Text.Combine(rhs.Text);
                ret.ScriptNotes = this.ScriptNotes.Combine(rhs.ScriptNotes);
                ret.Edits = this.Edits.Combine(rhs.Edits);
                ret.AlternateLipText = this.AlternateLipText.Combine(rhs.AlternateLipText);
                ret.SpeakerIdleAnimation = this.SpeakerIdleAnimation.Combine(rhs.SpeakerIdleAnimation);
                ret.ListenerIdleAnimation = this.ListenerIdleAnimation.Combine(rhs.ListenerIdleAnimation);
                ret.TextHash = this.TextHash.Combine(rhs.TextHash);
                ret.CameraPath = this.CameraPath.Combine(rhs.CameraPath);
                ret.StopOnSceneEnd = this.StopOnSceneEnd.Combine(rhs.StopOnSceneEnd);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Emotion;
            public bool ResponseNumber;
            public bool Sound;
            public bool Unknown;
            public bool InterruptPercentage;
            public bool CameraTargetAlias;
            public bool CameraLocationAlias;
            public bool Text;
            public bool ScriptNotes;
            public bool Edits;
            public bool AlternateLipText;
            public bool SpeakerIdleAnimation;
            public bool ListenerIdleAnimation;
            public bool TextHash;
            public bool CameraPath;
            public bool StopOnSceneEnd;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Emotion = defaultOn;
                this.ResponseNumber = defaultOn;
                this.Sound = defaultOn;
                this.Unknown = defaultOn;
                this.InterruptPercentage = defaultOn;
                this.CameraTargetAlias = defaultOn;
                this.CameraLocationAlias = defaultOn;
                this.Text = defaultOn;
                this.ScriptNotes = defaultOn;
                this.Edits = defaultOn;
                this.AlternateLipText = defaultOn;
                this.SpeakerIdleAnimation = defaultOn;
                this.ListenerIdleAnimation = defaultOn;
                this.TextHash = defaultOn;
                this.CameraPath = defaultOn;
                this.StopOnSceneEnd = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Emotion, null));
                ret.Add((ResponseNumber, null));
                ret.Add((Sound, null));
                ret.Add((Unknown, null));
                ret.Add((InterruptPercentage, null));
                ret.Add((CameraTargetAlias, null));
                ret.Add((CameraLocationAlias, null));
                ret.Add((Text, null));
                ret.Add((ScriptNotes, null));
                ret.Add((Edits, null));
                ret.Add((AlternateLipText, null));
                ret.Add((SpeakerIdleAnimation, null));
                ret.Add((ListenerIdleAnimation, null));
                ret.Add((TextHash, null));
                ret.Add((CameraPath, null));
                ret.Add((StopOnSceneEnd, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponseCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponseSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static DialogResponse CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DialogResponse();
            ((DialogResponseSetterCommon)((IDialogResponseGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogResponse item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DialogResponse GetNew()
        {
            return new DialogResponse();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponse :
        IDialogResponseGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IDialogResponse>
    {
        new IFormLink<IKeywordGetter> Emotion { get; set; }
        new Byte ResponseNumber { get; set; }
        new IFormLink<ISoundDescriptorGetter> Sound { get; set; }
        new Byte Unknown { get; set; }
        new UInt16 InterruptPercentage { get; set; }
        new Int32 CameraTargetAlias { get; set; }
        new Int32 CameraLocationAlias { get; set; }
        new TranslatedString Text { get; set; }
        new String ScriptNotes { get; set; }
        new String Edits { get; set; }
        new String AlternateLipText { get; set; }
        new IFormLinkNullable<IIdleAnimationGetter> SpeakerIdleAnimation { get; set; }
        new IFormLinkNullable<IIdleAnimationGetter> ListenerIdleAnimation { get; set; }
        new MemorySlice<Byte>? TextHash { get; set; }
        new IFormLinkNullable<ICameraPathGetter> CameraPath { get; set; }
        new Boolean StopOnSceneEnd { get; set; }
    }

    public partial interface IDialogResponseGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IDialogResponseGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => DialogResponse_Registration.Instance;
        IFormLinkGetter<IKeywordGetter> Emotion { get; }
        Byte ResponseNumber { get; }
        IFormLinkGetter<ISoundDescriptorGetter> Sound { get; }
        Byte Unknown { get; }
        UInt16 InterruptPercentage { get; }
        Int32 CameraTargetAlias { get; }
        Int32 CameraLocationAlias { get; }
        ITranslatedStringGetter Text { get; }
        String ScriptNotes { get; }
        String Edits { get; }
        String AlternateLipText { get; }
        IFormLinkNullableGetter<IIdleAnimationGetter> SpeakerIdleAnimation { get; }
        IFormLinkNullableGetter<IIdleAnimationGetter> ListenerIdleAnimation { get; }
        ReadOnlyMemorySlice<Byte>? TextHash { get; }
        IFormLinkNullableGetter<ICameraPathGetter> CameraPath { get; }
        Boolean StopOnSceneEnd { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogResponseMixIn
    {
        public static void Clear(this IDialogResponse item)
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogResponse.Mask<bool> GetEqualsMask(
            this IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDialogResponseGetter item,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDialogResponseGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            DialogResponse.TranslationMask? equalsMask = null)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            DialogResponse.TranslationMask? copyMask = null)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogResponse.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogResponse lhs,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            DialogResponse.TranslationMask? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogResponse DeepCopy(
            this IDialogResponseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogResponse item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DialogResponseSetterCommon)((IDialogResponseGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum DialogResponse_FieldIndex
    {
        Emotion = 0,
        ResponseNumber = 1,
        Sound = 2,
        Unknown = 3,
        InterruptPercentage = 4,
        CameraTargetAlias = 5,
        CameraLocationAlias = 6,
        Text = 7,
        ScriptNotes = 8,
        Edits = 9,
        AlternateLipText = 10,
        SpeakerIdleAnimation = 11,
        ListenerIdleAnimation = 12,
        TextHash = 13,
        CameraPath = 14,
        StopOnSceneEnd = 15,
    }
    #endregion

    #region Registration
    internal partial class DialogResponse_Registration : ILoquiRegistration
    {
        public static readonly DialogResponse_Registration Instance = new DialogResponse_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(DialogResponse.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponse.ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponse);

        public static readonly Type GetterType = typeof(IDialogResponseGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogResponse);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.DialogResponse";

        public const string Name = "DialogResponse";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TRDA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TRDA);
            var all = RecordCollection.Factory(
                RecordTypes.TRDA,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.NAM4,
                RecordTypes.SNAM,
                RecordTypes.LNAM,
                RecordTypes.TNAM,
                RecordTypes.NAM9,
                RecordTypes.SRAF,
                RecordTypes.WZMD);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DialogResponseBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DialogResponseSetterCommon
    {
        public static readonly DialogResponseSetterCommon Instance = new DialogResponseSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogResponse item)
        {
            ClearPartial();
            item.Emotion.Clear();
            item.ResponseNumber = default(Byte);
            item.Sound.Clear();
            item.Unknown = default(Byte);
            item.InterruptPercentage = default(UInt16);
            item.CameraTargetAlias = default(Int32);
            item.CameraLocationAlias = default(Int32);
            item.Text.Clear();
            item.ScriptNotes = string.Empty;
            item.Edits = string.Empty;
            item.AlternateLipText = string.Empty;
            item.SpeakerIdleAnimation.Clear();
            item.ListenerIdleAnimation.Clear();
            item.TextHash = default;
            item.CameraPath.Clear();
            item.StopOnSceneEnd = default(Boolean);
        }
        
        #region Mutagen
        public void RemapLinks(IDialogResponse obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Emotion.Relink(mapping);
            obj.Sound.Relink(mapping);
            obj.SpeakerIdleAnimation.Relink(mapping);
            obj.ListenerIdleAnimation.Relink(mapping);
            obj.CameraPath.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogResponse item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: DialogResponseBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class DialogResponseCommon
    {
        public static readonly DialogResponseCommon Instance = new DialogResponseCommon();

        public DialogResponse.Mask<bool> GetEqualsMask(
            IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponse.Mask<bool>(false);
            ((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogResponseGetter item,
            IDialogResponseGetter rhs,
            DialogResponse.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Emotion = item.Emotion.Equals(rhs.Emotion);
            ret.ResponseNumber = item.ResponseNumber == rhs.ResponseNumber;
            ret.Sound = item.Sound.Equals(rhs.Sound);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.InterruptPercentage = item.InterruptPercentage == rhs.InterruptPercentage;
            ret.CameraTargetAlias = item.CameraTargetAlias == rhs.CameraTargetAlias;
            ret.CameraLocationAlias = item.CameraLocationAlias == rhs.CameraLocationAlias;
            ret.Text = object.Equals(item.Text, rhs.Text);
            ret.ScriptNotes = string.Equals(item.ScriptNotes, rhs.ScriptNotes);
            ret.Edits = string.Equals(item.Edits, rhs.Edits);
            ret.AlternateLipText = string.Equals(item.AlternateLipText, rhs.AlternateLipText);
            ret.SpeakerIdleAnimation = item.SpeakerIdleAnimation.Equals(rhs.SpeakerIdleAnimation);
            ret.ListenerIdleAnimation = item.ListenerIdleAnimation.Equals(rhs.ListenerIdleAnimation);
            ret.TextHash = MemorySliceExt.SequenceEqual(item.TextHash, rhs.TextHash);
            ret.CameraPath = item.CameraPath.Equals(rhs.CameraPath);
            ret.StopOnSceneEnd = item.StopOnSceneEnd == rhs.StopOnSceneEnd;
        }
        
        public string Print(
            IDialogResponseGetter item,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDialogResponseGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponse.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DialogResponse =>");
            }
            else
            {
                sb.AppendLine($"{name} (DialogResponse) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDialogResponseGetter item,
            StructuredStringBuilder sb,
            DialogResponse.Mask<bool>? printMask = null)
        {
            if (printMask?.Emotion ?? true)
            {
                sb.AppendItem(item.Emotion.FormKey, "Emotion");
            }
            if (printMask?.ResponseNumber ?? true)
            {
                sb.AppendItem(item.ResponseNumber, "ResponseNumber");
            }
            if (printMask?.Sound ?? true)
            {
                sb.AppendItem(item.Sound.FormKey, "Sound");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.InterruptPercentage ?? true)
            {
                sb.AppendItem(item.InterruptPercentage, "InterruptPercentage");
            }
            if (printMask?.CameraTargetAlias ?? true)
            {
                sb.AppendItem(item.CameraTargetAlias, "CameraTargetAlias");
            }
            if (printMask?.CameraLocationAlias ?? true)
            {
                sb.AppendItem(item.CameraLocationAlias, "CameraLocationAlias");
            }
            if (printMask?.Text ?? true)
            {
                sb.AppendItem(item.Text, "Text");
            }
            if (printMask?.ScriptNotes ?? true)
            {
                sb.AppendItem(item.ScriptNotes, "ScriptNotes");
            }
            if (printMask?.Edits ?? true)
            {
                sb.AppendItem(item.Edits, "Edits");
            }
            if (printMask?.AlternateLipText ?? true)
            {
                sb.AppendItem(item.AlternateLipText, "AlternateLipText");
            }
            if (printMask?.SpeakerIdleAnimation ?? true)
            {
                sb.AppendItem(item.SpeakerIdleAnimation.FormKeyNullable, "SpeakerIdleAnimation");
            }
            if (printMask?.ListenerIdleAnimation ?? true)
            {
                sb.AppendItem(item.ListenerIdleAnimation.FormKeyNullable, "ListenerIdleAnimation");
            }
            if ((printMask?.TextHash ?? true)
                && item.TextHash is {} TextHashItem)
            {
                sb.AppendLine($"TextHash => {SpanExt.ToHexString(TextHashItem)}");
            }
            if (printMask?.CameraPath ?? true)
            {
                sb.AppendItem(item.CameraPath.FormKeyNullable, "CameraPath");
            }
            if (printMask?.StopOnSceneEnd ?? true)
            {
                sb.AppendItem(item.StopOnSceneEnd, "StopOnSceneEnd");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogResponseGetter? lhs,
            IDialogResponseGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Emotion) ?? true))
            {
                if (!lhs.Emotion.Equals(rhs.Emotion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ResponseNumber) ?? true))
            {
                if (lhs.ResponseNumber != rhs.ResponseNumber) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Sound) ?? true))
            {
                if (!lhs.Sound.Equals(rhs.Sound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.InterruptPercentage) ?? true))
            {
                if (lhs.InterruptPercentage != rhs.InterruptPercentage) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.CameraTargetAlias) ?? true))
            {
                if (lhs.CameraTargetAlias != rhs.CameraTargetAlias) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.CameraLocationAlias) ?? true))
            {
                if (lhs.CameraLocationAlias != rhs.CameraLocationAlias) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Text) ?? true))
            {
                if (!object.Equals(lhs.Text, rhs.Text)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ScriptNotes) ?? true))
            {
                if (!string.Equals(lhs.ScriptNotes, rhs.ScriptNotes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Edits) ?? true))
            {
                if (!string.Equals(lhs.Edits, rhs.Edits)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AlternateLipText) ?? true))
            {
                if (!string.Equals(lhs.AlternateLipText, rhs.AlternateLipText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.SpeakerIdleAnimation) ?? true))
            {
                if (!lhs.SpeakerIdleAnimation.Equals(rhs.SpeakerIdleAnimation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ListenerIdleAnimation) ?? true))
            {
                if (!lhs.ListenerIdleAnimation.Equals(rhs.ListenerIdleAnimation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TextHash) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TextHash, rhs.TextHash)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.CameraPath) ?? true))
            {
                if (!lhs.CameraPath.Equals(rhs.CameraPath)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.StopOnSceneEnd) ?? true))
            {
                if (lhs.StopOnSceneEnd != rhs.StopOnSceneEnd) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IDialogResponseGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Emotion);
            hash.Add(item.ResponseNumber);
            hash.Add(item.Sound);
            hash.Add(item.Unknown);
            hash.Add(item.InterruptPercentage);
            hash.Add(item.CameraTargetAlias);
            hash.Add(item.CameraLocationAlias);
            hash.Add(item.Text);
            hash.Add(item.ScriptNotes);
            hash.Add(item.Edits);
            hash.Add(item.AlternateLipText);
            hash.Add(item.SpeakerIdleAnimation);
            hash.Add(item.ListenerIdleAnimation);
            if (item.TextHash is {} TextHashItem)
            {
                hash.Add(TextHashItem);
            }
            hash.Add(item.CameraPath);
            hash.Add(item.StopOnSceneEnd);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DialogResponse.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDialogResponseGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Emotion);
            yield return FormLinkInformation.Factory(obj.Sound);
            if (FormLinkInformation.TryFactory(obj.SpeakerIdleAnimation, out var SpeakerIdleAnimationInfo))
            {
                yield return SpeakerIdleAnimationInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ListenerIdleAnimation, out var ListenerIdleAnimationInfo))
            {
                yield return ListenerIdleAnimationInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CameraPath, out var CameraPathInfo))
            {
                yield return CameraPathInfo;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class DialogResponseSetterTranslationCommon
    {
        public static readonly DialogResponseSetterTranslationCommon Instance = new DialogResponseSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogResponse item,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Emotion) ?? true))
            {
                item.Emotion.SetTo(rhs.Emotion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ResponseNumber) ?? true))
            {
                item.ResponseNumber = rhs.ResponseNumber;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Sound) ?? true))
            {
                item.Sound.SetTo(rhs.Sound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.InterruptPercentage) ?? true))
            {
                item.InterruptPercentage = rhs.InterruptPercentage;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.CameraTargetAlias) ?? true))
            {
                item.CameraTargetAlias = rhs.CameraTargetAlias;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.CameraLocationAlias) ?? true))
            {
                item.CameraLocationAlias = rhs.CameraLocationAlias;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Text) ?? true))
            {
                item.Text = rhs.Text.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ScriptNotes) ?? true))
            {
                item.ScriptNotes = rhs.ScriptNotes;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.Edits) ?? true))
            {
                item.Edits = rhs.Edits;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.AlternateLipText) ?? true))
            {
                item.AlternateLipText = rhs.AlternateLipText;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.SpeakerIdleAnimation) ?? true))
            {
                item.SpeakerIdleAnimation.SetTo(rhs.SpeakerIdleAnimation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.ListenerIdleAnimation) ?? true))
            {
                item.ListenerIdleAnimation.SetTo(rhs.ListenerIdleAnimation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.TextHash) ?? true))
            {
                if(rhs.TextHash is {} TextHashrhs)
                {
                    item.TextHash = TextHashrhs.ToArray();
                }
                else
                {
                    item.TextHash = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.CameraPath) ?? true))
            {
                item.CameraPath.SetTo(rhs.CameraPath.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponse_FieldIndex.StopOnSceneEnd) ?? true))
            {
                item.StopOnSceneEnd = rhs.StopOnSceneEnd;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDialogResponse item,
            IDialogResponseGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            DialogResponse.TranslationMask? copyMask = null)
        {
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            out DialogResponse.ErrorMask errorMask,
            DialogResponse.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogResponse.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogResponse DeepCopy(
            IDialogResponseGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogResponse ret = (DialogResponse)((DialogResponseCommon)((IDialogResponseGetter)item).CommonInstance()!).GetNew();
            ((DialogResponseSetterTranslationCommon)((IDialogResponseGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class DialogResponse
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponse_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DialogResponse_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DialogResponseSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class DialogResponseBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly DialogResponseBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IDialogResponseGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.TRDA)))
            {
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Emotion);
                writer.Write(item.ResponseNumber);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound);
                writer.Write(item.Unknown);
                writer.Write(item.InterruptPercentage);
                writer.Write(item.CameraTargetAlias);
                writer.Write(item.CameraLocationAlias);
            }
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Text,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.IL);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ScriptNotes,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Edits,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AlternateLipText,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpeakerIdleAnimation,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ListenerIdleAnimation,
                header: translationParams.ConvertToCustom(RecordTypes.LNAM));
            DialogResponseBinaryWriteTranslation.WriteBinaryInterruptPercentageTNAM(
                writer: writer,
                item: item);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextHash,
                header: translationParams.ConvertToCustom(RecordTypes.NAM9));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CameraPath,
                header: translationParams.ConvertToCustom(RecordTypes.SRAF));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.StopOnSceneEnd,
                header: translationParams.ConvertToCustom(RecordTypes.WZMD));
        }

        public static partial void WriteBinaryInterruptPercentageTNAMCustom(
            MutagenWriter writer,
            IDialogResponseGetter item);

        public static void WriteBinaryInterruptPercentageTNAM(
            MutagenWriter writer,
            IDialogResponseGetter item)
        {
            WriteBinaryInterruptPercentageTNAMCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponseGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDialogResponseGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DialogResponseBinaryCreateTranslation
    {
        public static readonly DialogResponseBinaryCreateTranslation Instance = new DialogResponseBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IDialogResponse item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TRDA:
                {
                    if (lastParsed.ShortCircuit((int)DialogResponse_FieldIndex.CameraLocationAlias, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Emotion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 1) return null;
                    item.ResponseNumber = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 4) return null;
                    item.Sound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 1) return null;
                    item.Unknown = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 2) return null;
                    item.InterruptPercentage = dataFrame.ReadUInt16();
                    if (dataFrame.Remaining < 4) return null;
                    item.CameraTargetAlias = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.CameraLocationAlias = dataFrame.ReadInt32();
                    return (int)DialogResponse_FieldIndex.CameraLocationAlias;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Text = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.IL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.Text;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ScriptNotes = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.ScriptNotes;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Edits = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.Edits;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AlternateLipText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponse_FieldIndex.AlternateLipText;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpeakerIdleAnimation.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponse_FieldIndex.SpeakerIdleAnimation;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ListenerIdleAnimation.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponse_FieldIndex.ListenerIdleAnimation;
                }
                case RecordTypeInts.TNAM:
                {
                    return DialogResponseBinaryCreateTranslation.FillBinaryInterruptPercentageTNAMCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.NAM9:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextHash = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponse_FieldIndex.TextHash;
                }
                case RecordTypeInts.SRAF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CameraPath.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponse_FieldIndex.CameraPath;
                }
                case RecordTypeInts.WZMD:
                {
                    item.StopOnSceneEnd = true;
                    return (int)DialogResponse_FieldIndex.StopOnSceneEnd;
                }
                default:
                    return ParseResult.Stop;
            }
        }

        public static partial ParseResult FillBinaryInterruptPercentageTNAMCustom(
            MutagenFrame frame,
            IDialogResponse item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class DialogResponseBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDialogResponseGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponseBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class DialogResponseBinaryOverlay :
        PluginBinaryOverlay,
        IDialogResponseGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponse_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DialogResponse_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DialogResponseCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DialogResponseSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDialogResponseGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDialogResponseGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponseCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DialogResponseBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponseBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _TRDALocation;
        #region Emotion
        private int _EmotionLocation => _TRDALocation!.Value.Min;
        private bool _Emotion_IsSet => _TRDALocation.HasValue;
        public IFormLinkGetter<IKeywordGetter> Emotion => _Emotion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(_package, _recordData.Span.Slice(_EmotionLocation, 0x4), isSet: _Emotion_IsSet) : FormLink<IKeywordGetter>.Null;
        #endregion
        #region ResponseNumber
        private int _ResponseNumberLocation => _TRDALocation!.Value.Min + 0x4;
        private bool _ResponseNumber_IsSet => _TRDALocation.HasValue;
        public Byte ResponseNumber => _ResponseNumber_IsSet ? _recordData.Span[_ResponseNumberLocation] : default;
        #endregion
        #region Sound
        private int _SoundLocation => _TRDALocation!.Value.Min + 0x5;
        private bool _Sound_IsSet => _TRDALocation.HasValue;
        public IFormLinkGetter<ISoundDescriptorGetter> Sound => _Sound_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ISoundDescriptorGetter>(_package, _recordData.Span.Slice(_SoundLocation, 0x4), isSet: _Sound_IsSet) : FormLink<ISoundDescriptorGetter>.Null;
        #endregion
        #region Unknown
        private int _UnknownLocation => _TRDALocation!.Value.Min + 0x9;
        private bool _Unknown_IsSet => _TRDALocation.HasValue;
        public Byte Unknown => _Unknown_IsSet ? _recordData.Span[_UnknownLocation] : default;
        #endregion
        #region InterruptPercentage
        private int _InterruptPercentageLocation => _TRDALocation!.Value.Min + 0xA;
        public partial UInt16 GetInterruptPercentageCustom();
        public UInt16 InterruptPercentage => GetInterruptPercentageCustom();
        partial void CustomInterruptPercentageEndPos();
        #endregion
        #region CameraTargetAlias
        private int _CameraTargetAliasLocation => InterruptPercentageEndingPos;
        private bool _CameraTargetAlias_IsSet => _TRDALocation.HasValue;
        public Int32 CameraTargetAlias => _CameraTargetAlias_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_CameraTargetAliasLocation, 4)) : default(Int32);
        #endregion
        #region CameraLocationAlias
        private int _CameraLocationAliasLocation => InterruptPercentageEndingPos + 0x4;
        private bool _CameraLocationAlias_IsSet => _TRDALocation.HasValue;
        public Int32 CameraLocationAlias => _CameraLocationAlias_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_CameraLocationAliasLocation, 4)) : default(Int32);
        #endregion
        #region Text
        private int? _TextLocation;
        public ITranslatedStringGetter Text => _TextLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextLocation.Value, _package.MetaData.Constants), StringsSource.IL, parsingBundle: _package.MetaData) : TranslatedString.Empty;
        #endregion
        #region ScriptNotes
        private int? _ScriptNotesLocation;
        public String ScriptNotes => _ScriptNotesLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScriptNotesLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region Edits
        private int? _EditsLocation;
        public String Edits => _EditsLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EditsLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region AlternateLipText
        private int? _AlternateLipTextLocation;
        public String AlternateLipText => _AlternateLipTextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AlternateLipTextLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region SpeakerIdleAnimation
        private int? _SpeakerIdleAnimationLocation;
        public IFormLinkNullableGetter<IIdleAnimationGetter> SpeakerIdleAnimation => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IIdleAnimationGetter>(_package, _recordData, _SpeakerIdleAnimationLocation);
        #endregion
        #region ListenerIdleAnimation
        private int? _ListenerIdleAnimationLocation;
        public IFormLinkNullableGetter<IIdleAnimationGetter> ListenerIdleAnimation => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IIdleAnimationGetter>(_package, _recordData, _ListenerIdleAnimationLocation);
        #endregion
        #region InterruptPercentageTNAM
        public partial ParseResult InterruptPercentageTNAMCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region TextHash
        private int? _TextHashLocation;
        public ReadOnlyMemorySlice<Byte>? TextHash => _TextHashLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextHashLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region CameraPath
        private int? _CameraPathLocation;
        public IFormLinkNullableGetter<ICameraPathGetter> CameraPath => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICameraPathGetter>(_package, _recordData, _CameraPathLocation);
        #endregion
        #region StopOnSceneEnd
        private int? _StopOnSceneEndLocation;
        public Boolean StopOnSceneEnd => _StopOnSceneEndLocation.HasValue ? true : default(Boolean);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogResponseBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDialogResponseGetter DialogResponseFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DialogResponseBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IDialogResponseGetter DialogResponseFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DialogResponseFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TRDA:
                {
                    if (lastParsed.ShortCircuit((int)DialogResponse_FieldIndex.CameraLocationAlias, translationParams)) return ParseResult.Stop;
                    _TRDALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)DialogResponse_FieldIndex.CameraLocationAlias;
                }
                case RecordTypeInts.NAM1:
                {
                    _TextLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.Text;
                }
                case RecordTypeInts.NAM2:
                {
                    _ScriptNotesLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.ScriptNotes;
                }
                case RecordTypeInts.NAM3:
                {
                    _EditsLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.Edits;
                }
                case RecordTypeInts.NAM4:
                {
                    _AlternateLipTextLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.AlternateLipText;
                }
                case RecordTypeInts.SNAM:
                {
                    _SpeakerIdleAnimationLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.SpeakerIdleAnimation;
                }
                case RecordTypeInts.LNAM:
                {
                    _ListenerIdleAnimationLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.ListenerIdleAnimation;
                }
                case RecordTypeInts.TNAM:
                {
                    return InterruptPercentageTNAMCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.NAM9:
                {
                    _TextHashLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.TextHash;
                }
                case RecordTypeInts.SRAF:
                {
                    _CameraPathLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.CameraPath;
                }
                case RecordTypeInts.WZMD:
                {
                    _StopOnSceneEndLocation = (stream.Position - offset);
                    return (int)DialogResponse_FieldIndex.StopOnSceneEnd;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponseMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDialogResponseGetter rhs) return false;
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponseGetter? obj)
        {
            return ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponseCommon)((IDialogResponseGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

