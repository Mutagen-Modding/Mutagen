/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class WeaponModification :
        AObjectModification,
        IEquatable<IWeaponModificationGetter>,
        ILoquiObjectSetter<WeaponModification>,
        IWeaponModificationInternal
    {
        #region Ctor
        protected WeaponModification()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AObjectModProperty<Weapon.Property>> _Properties = new ExtendedList<AObjectModProperty<Weapon.Property>>();
        public ExtendedList<AObjectModProperty<Weapon.Property>> Properties
        {
            get => this._Properties;
            init => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAObjectModPropertyGetter<Weapon.Property>> IWeaponModificationGetter.Properties => _Properties;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WeaponModificationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AObjectModification.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem Name,
                TItem Description,
                TItem Model,
                TItem Unknown,
                TItem MaxRank,
                TItem LevelTierScaledOffset,
                TItem AttachPoint,
                TItem AttachParentSlots,
                TItem Items,
                TItem Includes,
                TItem TargetOmodKeywords,
                TItem FilterKeywords,
                TItem LooseMod,
                TItem Priority,
                TItem Filter,
                TItem Properties)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags,
                Name: Name,
                Description: Description,
                Model: Model,
                Unknown: Unknown,
                MaxRank: MaxRank,
                LevelTierScaledOffset: LevelTierScaledOffset,
                AttachPoint: AttachPoint,
                AttachParentSlots: AttachParentSlots,
                Items: Items,
                Includes: Includes,
                TargetOmodKeywords: TargetOmodKeywords,
                FilterKeywords: FilterKeywords,
                LooseMod: LooseMod,
                Priority: Priority,
                Filter: Filter)
            {
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>?>? Properties;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Properties);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WeaponModification.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AObjectModProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, AObjectModProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AObjectModProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, AObjectModProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AObjectModProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(WeaponModification.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, WeaponModification.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(WeaponModification.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        sb.AppendLine("Properties =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AObjectModification.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>? Properties;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                WeaponModification_FieldIndex enu = (WeaponModification_FieldIndex)index;
                switch (enu)
                {
                    case WeaponModification_FieldIndex.Properties:
                        return Properties;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                WeaponModification_FieldIndex enu = (WeaponModification_FieldIndex)index;
                switch (enu)
                {
                    case WeaponModification_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                WeaponModification_FieldIndex enu = (WeaponModification_FieldIndex)index;
                switch (enu)
                {
                    case WeaponModification_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Properties != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Properties is {} PropertiesItem)
                {
                    sb.AppendLine("Properties =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), Noggog.ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AObjectModification.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AObjectModProperty.TranslationMask? Properties;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = WeaponModification_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WeaponModificationCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeaponModificationSetterCommon.Instance.RemapLinks(this, mapping);
        public WeaponModification(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private WeaponModification(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal WeaponModification(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public WeaponModification(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public WeaponModification(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<WeaponModification>.ToString(this);
        }

        protected override Type LinkType => typeof(IWeaponModification);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWeaponModificationGetter rhs) return false;
            return ((WeaponModificationCommon)((IWeaponModificationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWeaponModificationGetter? obj)
        {
            return ((WeaponModificationCommon)((IWeaponModificationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WeaponModificationCommon)((IWeaponModificationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeaponModificationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WeaponModificationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static WeaponModification CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new WeaponModification();
            ((WeaponModificationSetterCommon)((IWeaponModificationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out WeaponModification item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((WeaponModificationSetterCommon)((IWeaponModificationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new WeaponModification GetNew()
        {
            return new WeaponModification();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeaponModification :
        IAObjectModificationInternal,
        IFormLinkContainer,
        ILoquiObjectSetter<IWeaponModificationInternal>,
        IModeled,
        INamed,
        INamedRequired,
        ITranslatedNamed,
        ITranslatedNamedRequired,
        IWeaponModificationGetter
    {
        new ExtendedList<AObjectModProperty<Weapon.Property>> Properties { get; }
    }

    public partial interface IWeaponModificationInternal :
        IAObjectModificationInternal,
        IWeaponModification,
        IWeaponModificationGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.OMOD)]
    public partial interface IWeaponModificationGetter :
        IAObjectModificationGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IWeaponModificationGetter>,
        IMapsToGetter<IWeaponModificationGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => WeaponModification_Registration.Instance;
        IReadOnlyList<IAObjectModPropertyGetter<Weapon.Property>> Properties { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WeaponModificationMixIn
    {
        public static void Clear(this IWeaponModificationInternal item)
        {
            ((WeaponModificationSetterCommon)((IWeaponModificationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WeaponModification.Mask<bool> GetEqualsMask(
            this IWeaponModificationGetter item,
            IWeaponModificationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeaponModificationCommon)((IWeaponModificationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IWeaponModificationGetter item,
            string? name = null,
            WeaponModification.Mask<bool>? printMask = null)
        {
            return ((WeaponModificationCommon)((IWeaponModificationGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IWeaponModificationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WeaponModification.Mask<bool>? printMask = null)
        {
            ((WeaponModificationCommon)((IWeaponModificationGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWeaponModificationGetter item,
            IWeaponModificationGetter rhs,
            WeaponModification.TranslationMask? equalsMask = null)
        {
            return ((WeaponModificationCommon)((IWeaponModificationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWeaponModificationInternal lhs,
            IWeaponModificationGetter rhs,
            out WeaponModification.ErrorMask errorMask,
            WeaponModification.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeaponModificationSetterTranslationCommon)((IWeaponModificationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = WeaponModification.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWeaponModificationInternal lhs,
            IWeaponModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeaponModificationSetterTranslationCommon)((IWeaponModificationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static WeaponModification DeepCopy(
            this IWeaponModificationGetter item,
            WeaponModification.TranslationMask? copyMask = null)
        {
            return ((WeaponModificationSetterTranslationCommon)((IWeaponModificationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WeaponModification DeepCopy(
            this IWeaponModificationGetter item,
            out WeaponModification.ErrorMask errorMask,
            WeaponModification.TranslationMask? copyMask = null)
        {
            return ((WeaponModificationSetterTranslationCommon)((IWeaponModificationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WeaponModification DeepCopy(
            this IWeaponModificationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeaponModificationSetterTranslationCommon)((IWeaponModificationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static WeaponModification Duplicate(
            this IWeaponModificationGetter item,
            FormKey formKey,
            WeaponModification.TranslationMask? copyMask = null)
        {
            return ((WeaponModificationCommon)((IWeaponModificationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static WeaponModification Duplicate(
            this IWeaponModificationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((WeaponModificationCommon)((IWeaponModificationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWeaponModificationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((WeaponModificationSetterCommon)((IWeaponModificationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum WeaponModification_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        Name = 7,
        Description = 8,
        Model = 9,
        Unknown = 10,
        MaxRank = 11,
        LevelTierScaledOffset = 12,
        AttachPoint = 13,
        AttachParentSlots = 14,
        Items = 15,
        Includes = 16,
        TargetOmodKeywords = 17,
        FilterKeywords = 18,
        LooseMod = 19,
        Priority = 20,
        Filter = 21,
        Properties = 22,
    }
    #endregion

    #region Registration
    internal partial class WeaponModification_Registration : ILoquiRegistration
    {
        public static readonly WeaponModification_Registration Instance = new WeaponModification_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(WeaponModification.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WeaponModification.ErrorMask);

        public static readonly Type ClassType = typeof(WeaponModification);

        public static readonly Type GetterType = typeof(IWeaponModificationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeaponModification);

        public static readonly Type? InternalSetterType = typeof(IWeaponModificationInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.WeaponModification";

        public const string Name = "WeaponModification";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.OMOD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.OMOD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(WeaponModificationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class WeaponModificationSetterCommon : AObjectModificationSetterCommon
    {
        public new static readonly WeaponModificationSetterCommon Instance = new WeaponModificationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeaponModificationInternal item)
        {
            ClearPartial();
            item.Properties.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAObjectModificationInternal item)
        {
            Clear(item: (IWeaponModificationInternal)item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IWeaponModificationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWeaponModificationInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IWeaponModification obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Properties.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWeaponModificationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IWeaponModificationInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WeaponModificationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WeaponModificationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAObjectModificationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (WeaponModification)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (WeaponModification)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (WeaponModification)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class WeaponModificationCommon : AObjectModificationCommon
    {
        public new static readonly WeaponModificationCommon Instance = new WeaponModificationCommon();

        public WeaponModification.Mask<bool> GetEqualsMask(
            IWeaponModificationGetter item,
            IWeaponModificationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WeaponModification.Mask<bool>(false);
            ((WeaponModificationCommon)((IWeaponModificationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeaponModificationGetter item,
            IWeaponModificationGetter rhs,
            WeaponModification.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IWeaponModificationGetter item,
            string? name = null,
            WeaponModification.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IWeaponModificationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WeaponModification.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"WeaponModification =>");
            }
            else
            {
                sb.AppendLine($"{name} (WeaponModification) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IWeaponModificationGetter item,
            StructuredStringBuilder sb,
            WeaponModification.Mask<bool>? printMask = null)
        {
            AObjectModificationCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Properties?.Overall ?? true)
            {
                sb.AppendLine("Properties =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Properties)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static WeaponModification_FieldIndex ConvertFieldIndex(AObjectModification_FieldIndex index)
        {
            switch (index)
            {
                case AObjectModification_FieldIndex.MajorRecordFlagsRaw:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.FormKey:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.VersionControl:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.EditorID:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.FormVersion:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Version2:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Fallout4MajorRecordFlags:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Name:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Description:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Model:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Unknown:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.MaxRank:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.LevelTierScaledOffset:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.AttachPoint:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.AttachParentSlots:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Items:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Includes:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.TargetOmodKeywords:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.FilterKeywords:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.LooseMod:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Priority:
                    return (WeaponModification_FieldIndex)((int)index);
                case AObjectModification_FieldIndex.Filter:
                    return (WeaponModification_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new WeaponModification_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (WeaponModification_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (WeaponModification_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (WeaponModification_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (WeaponModification_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (WeaponModification_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (WeaponModification_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (WeaponModification_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new WeaponModification_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (WeaponModification_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (WeaponModification_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (WeaponModification_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (WeaponModification_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeaponModificationGetter? lhs,
            IWeaponModificationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAObjectModificationGetter)lhs, (IAObjectModificationGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)WeaponModification_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqual(rhs.Properties, (l, r) => ((AObjectModPropertyCommon<Weapon.Property>)((IAObjectModPropertyGetter<Weapon.Property>)l).CommonInstance(typeof(Weapon.Property))!).Equals(l, r, equalsMask?.GetSubCrystal((int)WeaponModification_FieldIndex.Properties)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAObjectModificationGetter? lhs,
            IAObjectModificationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWeaponModificationGetter?)lhs,
                rhs: rhs as IWeaponModificationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWeaponModificationGetter?)lhs,
                rhs: rhs as IWeaponModificationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWeaponModificationGetter?)lhs,
                rhs: rhs as IWeaponModificationGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IWeaponModificationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Properties);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAObjectModificationGetter item)
        {
            return GetHashCode(item: (IWeaponModificationGetter)item);
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IWeaponModificationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeaponModificationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return WeaponModification.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IWeaponModificationGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Properties.WhereCastable<IAObjectModPropertyGetter<Weapon.Property>, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public WeaponModification Duplicate(
            IWeaponModificationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new WeaponModification(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override AObjectModification Duplicate(
            IAObjectModificationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWeaponModificationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWeaponModificationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWeaponModificationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class WeaponModificationSetterTranslationCommon : AObjectModificationSetterTranslationCommon
    {
        public new static readonly WeaponModificationSetterTranslationCommon Instance = new WeaponModificationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWeaponModificationInternal item,
            IWeaponModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IWeaponModification item,
            IWeaponModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAObjectModification)item,
                (IAObjectModificationGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)WeaponModification_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)WeaponModification_FieldIndex.Properties);
                try
                {
                    item.Properties.SetTo(
                        rhs.Properties
                        .Select(r =>
                        {
                            return r.DeepCopy<Weapon.Property>(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IWeaponModification item,
            IWeaponModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IAObjectModificationInternal item,
            IAObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeaponModificationInternal)item,
                rhs: (IWeaponModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAObjectModification item,
            IAObjectModificationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeaponModification)item,
                rhs: (IWeaponModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeaponModificationInternal)item,
                rhs: (IWeaponModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeaponModification)item,
                rhs: (IWeaponModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeaponModificationInternal)item,
                rhs: (IWeaponModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeaponModification)item,
                rhs: (IWeaponModificationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public WeaponModification DeepCopy(
            IWeaponModificationGetter item,
            WeaponModification.TranslationMask? copyMask = null)
        {
            WeaponModification ret = (WeaponModification)((WeaponModificationCommon)((IWeaponModificationGetter)item).CommonInstance()!).GetNew();
            ((WeaponModificationSetterTranslationCommon)((IWeaponModificationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public WeaponModification DeepCopy(
            IWeaponModificationGetter item,
            out WeaponModification.ErrorMask errorMask,
            WeaponModification.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WeaponModification ret = (WeaponModification)((WeaponModificationCommon)((IWeaponModificationGetter)item).CommonInstance()!).GetNew();
            ((WeaponModificationSetterTranslationCommon)((IWeaponModificationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = WeaponModification.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public WeaponModification DeepCopy(
            IWeaponModificationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WeaponModification ret = (WeaponModification)((WeaponModificationCommon)((IWeaponModificationGetter)item).CommonInstance()!).GetNew();
            ((WeaponModificationSetterTranslationCommon)((IWeaponModificationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class WeaponModification
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeaponModification_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => WeaponModification_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeaponModificationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WeaponModificationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeaponModificationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class WeaponModificationBinaryWriteTranslation :
        AObjectModificationBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly WeaponModificationBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IWeaponModificationGetter item,
            MutagenWriter writer)
        {
            AObjectModificationBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            IWeaponModificationGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.OMOD,
                writeEmbedded: AObjectModificationBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IWeaponModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAObjectModificationGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWeaponModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWeaponModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWeaponModificationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class WeaponModificationBinaryCreateTranslation : AObjectModificationBinaryCreateTranslation
    {
        public new static readonly WeaponModificationBinaryCreateTranslation Instance = new WeaponModificationBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.OMOD;
        public static void FillBinaryStructs(
            IWeaponModificationInternal item,
            MutagenFrame frame)
        {
            AObjectModificationBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class WeaponModificationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class WeaponModificationBinaryOverlay :
        AObjectModificationBinaryOverlay,
        IWeaponModificationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WeaponModification_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => WeaponModification_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeaponModificationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeaponModificationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WeaponModificationCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeaponModificationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WeaponModificationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IWeaponModification);


        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WeaponModificationBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IWeaponModificationGetter WeaponModificationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new WeaponModificationBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IWeaponModificationGetter WeaponModificationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return WeaponModificationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WeaponModificationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<WeaponModification>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWeaponModificationGetter rhs) return false;
            return ((WeaponModificationCommon)((IWeaponModificationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWeaponModificationGetter? obj)
        {
            return ((WeaponModificationCommon)((IWeaponModificationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WeaponModificationCommon)((IWeaponModificationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

