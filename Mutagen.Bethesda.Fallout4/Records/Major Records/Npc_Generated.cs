/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Npc :
        Fallout4MajorRecord,
        IEquatable<INpcGetter>,
        ILoquiObjectSetter<Npc>,
        INpcInternal
    {
        #region Ctor
        protected Npc()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? INpcGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter INpcGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region PreviewTransform
        private readonly IFormLinkNullable<ITransformGetter> _PreviewTransform = new FormLinkNullable<ITransformGetter>();
        public IFormLinkNullable<ITransformGetter> PreviewTransform
        {
            get => _PreviewTransform;
            set => _PreviewTransform.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITransformGetter> INpcGetter.PreviewTransform => this.PreviewTransform;
        #endregion
        #region AnimationSound
        private readonly IFormLinkNullable<IAnimationSoundTagSetGetter> _AnimationSound = new FormLinkNullable<IAnimationSoundTagSetGetter>();
        public IFormLinkNullable<IAnimationSoundTagSetGetter> AnimationSound
        {
            get => _AnimationSound;
            set => _AnimationSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAnimationSoundTagSetGetter> INpcGetter.AnimationSound => this.AnimationSound;
        #endregion
        #region Flags
        public Npc.Flag Flags { get; set; } = default(Npc.Flag);
        #endregion
        #region XpValueOffset
        public Int16 XpValueOffset { get; set; } = default(Int16);
        #endregion
        #region CalcMinLevel
        public Int16 CalcMinLevel { get; set; } = default(Int16);
        #endregion
        #region CalcMaxLevel
        public Int16 CalcMaxLevel { get; set; } = default(Int16);
        #endregion
        #region DispositionBase
        public Int16 DispositionBase { get; set; } = default(Int16);
        #endregion
        #region UseTemplateActors
        public Npc.TemplateActorType UseTemplateActors { get; set; } = default(Npc.TemplateActorType);
        #endregion
        #region BleedoutOverride
        public Int16 BleedoutOverride { get; set; } = default(Int16);
        #endregion
        #region Unknown
        public Int16 Unknown { get; set; } = default(Int16);
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RankPlacement> _Factions = new ExtendedList<RankPlacement>();
        public ExtendedList<RankPlacement> Factions
        {
            get => this._Factions;
            init => this._Factions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRankPlacementGetter> INpcGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        private readonly IFormLinkNullable<ILeveledItemGetter> _DeathItem = new FormLinkNullable<ILeveledItemGetter>();
        public IFormLinkNullable<ILeveledItemGetter> DeathItem
        {
            get => _DeathItem;
            set => _DeathItem.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILeveledItemGetter> INpcGetter.DeathItem => this.DeathItem;
        #endregion
        #region Voice
        private readonly IFormLinkNullable<IVoiceTypeGetter> _Voice = new FormLinkNullable<IVoiceTypeGetter>();
        public IFormLinkNullable<IVoiceTypeGetter> Voice
        {
            get => _Voice;
            set => _Voice.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IVoiceTypeGetter> INpcGetter.Voice => this.Voice;
        #endregion
        #region DefaultTemplate
        private readonly IFormLinkNullable<INpcSpawnGetter> _DefaultTemplate = new FormLinkNullable<INpcSpawnGetter>();
        public IFormLinkNullable<INpcSpawnGetter> DefaultTemplate
        {
            get => _DefaultTemplate;
            set => _DefaultTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<INpcSpawnGetter> INpcGetter.DefaultTemplate => this.DefaultTemplate;
        #endregion
        #region LegendaryTemplate
        private readonly IFormLinkNullable<INpcSpawnGetter> _LegendaryTemplate = new FormLinkNullable<INpcSpawnGetter>();
        public IFormLinkNullable<INpcSpawnGetter> LegendaryTemplate
        {
            get => _LegendaryTemplate;
            set => _LegendaryTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<INpcSpawnGetter> INpcGetter.LegendaryTemplate => this.LegendaryTemplate;
        #endregion
        #region LegendaryChance
        private readonly IFormLinkNullable<IGlobalGetter> _LegendaryChance = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> LegendaryChance
        {
            get => _LegendaryChance;
            set => _LegendaryChance.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> INpcGetter.LegendaryChance => this.LegendaryChance;
        #endregion
        #region TemplateActors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TemplateActors? _TemplateActors;
        public TemplateActors? TemplateActors
        {
            get => _TemplateActors;
            set => _TemplateActors = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITemplateActorsGetter? INpcGetter.TemplateActors => this.TemplateActors;
        #endregion
        #region Race
        private readonly IFormLink<IRaceGetter> _Race = new FormLink<IRaceGetter>();
        public IFormLink<IRaceGetter> Race
        {
            get => _Race;
            set => _Race.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IRaceGetter> INpcGetter.Race => this.Race;
        #endregion
        #region ActorEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? _ActorEffect;
        public ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect
        {
            get => this._ActorEffect;
            set => this._ActorEffect = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? INpcGetter.ActorEffect => _ActorEffect;
        #endregion

        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        /// <summary>
        /// Aspects: IHasDestructible
        /// </summary>
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? INpcGetter.Destructible => this.Destructible;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IHasDestructibleGetter.Destructible => this.Destructible;
        #endregion
        #endregion
        #region Skin
        private readonly IFormLinkNullable<IArmorGetter> _Skin = new FormLinkNullable<IArmorGetter>();
        public IFormLinkNullable<IArmorGetter> Skin
        {
            get => _Skin;
            set => _Skin.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArmorGetter> INpcGetter.Skin => this.Skin;
        #endregion
        #region FarAwayModel
        private readonly IFormLinkNullable<IArmorGetter> _FarAwayModel = new FormLinkNullable<IArmorGetter>();
        public IFormLinkNullable<IArmorGetter> FarAwayModel
        {
            get => _FarAwayModel;
            set => _FarAwayModel.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArmorGetter> INpcGetter.FarAwayModel => this.FarAwayModel;
        #endregion
        #region AttackRace
        private readonly IFormLinkNullable<IRaceGetter> _AttackRace = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> AttackRace
        {
            get => _AttackRace;
            set => _AttackRace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> INpcGetter.AttackRace => this.AttackRace;
        #endregion
        #region Attacks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Attack> _Attacks = new ExtendedList<Attack>();
        public ExtendedList<Attack> Attacks
        {
            get => this._Attacks;
            init => this._Attacks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAttackGetter> INpcGetter.Attacks => _Attacks;
        #endregion

        #endregion
        #region SpectatorOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _SpectatorOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> SpectatorOverridePackageList
        {
            get => _SpectatorOverridePackageList;
            set => _SpectatorOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.SpectatorOverridePackageList => this.SpectatorOverridePackageList;
        #endregion
        #region ObserveDeadBodyOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _ObserveDeadBodyOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList
        {
            get => _ObserveDeadBodyOverridePackageList;
            set => _ObserveDeadBodyOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.ObserveDeadBodyOverridePackageList => this.ObserveDeadBodyOverridePackageList;
        #endregion
        #region GuardWarnOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _GuardWarnOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> GuardWarnOverridePackageList
        {
            get => _GuardWarnOverridePackageList;
            set => _GuardWarnOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.GuardWarnOverridePackageList => this.GuardWarnOverridePackageList;
        #endregion
        #region CombatOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _CombatOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> CombatOverridePackageList
        {
            get => _CombatOverridePackageList;
            set => _CombatOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.CombatOverridePackageList => this.CombatOverridePackageList;
        #endregion
        #region FollowerCommandPackageList
        private readonly IFormLinkNullable<IFormListGetter> _FollowerCommandPackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> FollowerCommandPackageList
        {
            get => _FollowerCommandPackageList;
            set => _FollowerCommandPackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.FollowerCommandPackageList => this.FollowerCommandPackageList;
        #endregion
        #region FollowerElevatorPackageList
        private readonly IFormLinkNullable<IFormListGetter> _FollowerElevatorPackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> FollowerElevatorPackageList
        {
            get => _FollowerElevatorPackageList;
            set => _FollowerElevatorPackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.FollowerElevatorPackageList => this.FollowerElevatorPackageList;
        #endregion
        #region Perks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PerkPlacement>? _Perks;
        public ExtendedList<PerkPlacement>? Perks
        {
            get => this._Perks;
            set => this._Perks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPerkPlacementGetter>? INpcGetter.Perks => _Perks;
        #endregion

        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectProperty>? _Properties;
        public ExtendedList<ObjectProperty>? Properties
        {
            get => this._Properties;
            set => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectPropertyGetter>? INpcGetter.Properties => _Properties;
        #endregion

        #endregion
        #region ForcedLocRefType
        private readonly IFormLinkNullable<ILocationReferenceTypeGetter> _ForcedLocRefType = new FormLinkNullable<ILocationReferenceTypeGetter>();
        public IFormLinkNullable<ILocationReferenceTypeGetter> ForcedLocRefType
        {
            get => _ForcedLocRefType;
            set => _ForcedLocRefType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationReferenceTypeGetter> INpcGetter.ForcedLocRefType => this.ForcedLocRefType;
        #endregion
        #region NativeTerminal
        private readonly IFormLinkNullable<ITerminalGetter> _NativeTerminal = new FormLinkNullable<ITerminalGetter>();
        public IFormLinkNullable<ITerminalGetter> NativeTerminal
        {
            get => _NativeTerminal;
            set => _NativeTerminal.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITerminalGetter> INpcGetter.NativeTerminal => this.NativeTerminal;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ContainerEntry>? _Items;
        public ExtendedList<ContainerEntry>? Items
        {
            get => this._Items;
            set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IContainerEntryGetter>? INpcGetter.Items => _Items;
        #endregion

        #endregion
        #region Aggression
        public Npc.AggressionType Aggression { get; set; } = default(Npc.AggressionType);
        #endregion
        #region Confidence
        public Npc.ConfidenceType Confidence { get; set; } = default(Npc.ConfidenceType);
        #endregion
        #region EnergyLevel
        public Byte EnergyLevel { get; set; } = default(Byte);
        #endregion
        #region Responsibility
        public Npc.ResponsibilityType Responsibility { get; set; } = default(Npc.ResponsibilityType);
        #endregion
        #region Mood
        public Npc.MoodType Mood { get; set; } = default(Npc.MoodType);
        #endregion
        #region Assistance
        public Npc.AssistanceType Assistance { get; set; } = default(Npc.AssistanceType);
        #endregion
        #region AggroRadiusBehaviorEnabled
        public Boolean AggroRadiusBehaviorEnabled { get; set; } = default(Boolean);
        #endregion
        #region AggroRadiusWarn
        public UInt32 AggroRadiusWarn { get; set; } = default(UInt32);
        #endregion
        #region AggroRadiusWarnOrAttack
        public UInt32 AggroRadiusWarnOrAttack { get; set; } = default(UInt32);
        #endregion
        #region AggroRadiusAttack
        public UInt32 AggroRadiusAttack { get; set; } = default(UInt32);
        #endregion
        #region NoSlowApproach
        public Boolean NoSlowApproach { get; set; } = default(Boolean);
        #endregion
        #region Packages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPackageGetter>> _Packages = new ExtendedList<IFormLinkGetter<IPackageGetter>>();
        public ExtendedList<IFormLinkGetter<IPackageGetter>> Packages
        {
            get => this._Packages;
            init => this._Packages = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPackageGetter>> INpcGetter.Packages => _Packages;
        #endregion

        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? INpcGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region AttachParentSlots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _AttachParentSlots;
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots
        {
            get => this._AttachParentSlots;
            set => this._AttachParentSlots = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? INpcGetter.AttachParentSlots => _AttachParentSlots;
        #endregion

        #endregion
        #region ObjectTemplates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectTemplate<Npc.Property>>? _ObjectTemplates;
        public ExtendedList<ObjectTemplate<Npc.Property>>? ObjectTemplates
        {
            get => this._ObjectTemplates;
            set => this._ObjectTemplates = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectTemplateGetter<Npc.Property>>? INpcGetter.ObjectTemplates => _ObjectTemplates;
        #endregion

        #endregion
        #region Class
        private readonly IFormLinkNullable<IClassGetter> _Class = new FormLinkNullable<IClassGetter>();
        public IFormLinkNullable<IClassGetter> Class
        {
            get => _Class;
            set => _Class.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IClassGetter> INpcGetter.Class => this.Class;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? INpcGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region ShortName
        public TranslatedString? ShortName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? INpcGetter.ShortName => this.ShortName;
        #endregion
        #region CalculatedHealth
        public UInt16 CalculatedHealth { get; set; } = default(UInt16);
        #endregion
        #region CalculatedActionPoints
        public UInt16 CalculatedActionPoints { get; set; } = default(UInt16);
        #endregion
        #region FarAwayModelDistance
        public UInt16 FarAwayModelDistance { get; set; } = default(UInt16);
        #endregion
        #region GearedUpWeapons
        public Byte GearedUpWeapons { get; set; } = default(Byte);
        #endregion
        #region Unused
        public Byte Unused { get; set; } = default(Byte);
        #endregion
        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IHeadPartGetter>> _HeadParts = new ExtendedList<IFormLinkGetter<IHeadPartGetter>>();
        public ExtendedList<IFormLinkGetter<IHeadPartGetter>> HeadParts
        {
            get => this._HeadParts;
            init => this._HeadParts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IHeadPartGetter>> INpcGetter.HeadParts => _HeadParts;
        #endregion

        #endregion
        #region HairColor
        private readonly IFormLinkNullable<IColorRecordGetter> _HairColor = new FormLinkNullable<IColorRecordGetter>();
        public IFormLinkNullable<IColorRecordGetter> HairColor
        {
            get => _HairColor;
            set => _HairColor.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IColorRecordGetter> INpcGetter.HairColor => this.HairColor;
        #endregion
        #region FacialHairColor
        private readonly IFormLinkNullable<IColorRecordGetter> _FacialHairColor = new FormLinkNullable<IColorRecordGetter>();
        public IFormLinkNullable<IColorRecordGetter> FacialHairColor
        {
            get => _FacialHairColor;
            set => _FacialHairColor.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IColorRecordGetter> INpcGetter.FacialHairColor => this.FacialHairColor;
        #endregion
        #region CombatStyle
        private readonly IFormLinkNullable<ICombatStyleGetter> _CombatStyle = new FormLinkNullable<ICombatStyleGetter>();
        public IFormLinkNullable<ICombatStyleGetter> CombatStyle
        {
            get => _CombatStyle;
            set => _CombatStyle.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICombatStyleGetter> INpcGetter.CombatStyle => this.CombatStyle;
        #endregion
        #region GiftFilter
        private readonly IFormLinkNullable<IFormListGetter> _GiftFilter = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> GiftFilter
        {
            get => _GiftFilter;
            set => _GiftFilter.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.GiftFilter => this.GiftFilter;
        #endregion
        #region NAM5
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NAM5;
        public MemorySlice<Byte>? NAM5
        {
            get => this._NAM5;
            set => this._NAM5 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INpcGetter.NAM5 => this.NAM5;
        #endregion
        #region HeightMin
        public Single HeightMin { get; set; } = default(Single);
        #endregion
        #region NAM7
        public Single? NAM7 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? INpcGetter.NAM7 => this.NAM7;
        #endregion
        #region HeightMax
        public Single HeightMax { get; set; } = default(Single);
        #endregion
        #region Weight
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcWeight? _Weight;
        public NpcWeight? Weight
        {
            get => _Weight;
            set => _Weight = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcWeightGetter? INpcGetter.Weight => this.Weight;
        #endregion
        #region SoundLevel
        public SoundLevel SoundLevel { get; set; } = default(SoundLevel);
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NpcSound>? _Sounds;
        public ExtendedList<NpcSound>? Sounds
        {
            get => this._Sounds;
            set => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INpcSoundGetter>? INpcGetter.Sounds => _Sounds;
        #endregion

        #endregion
        #region SoundsFinalize
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SoundsFinalize;
        public MemorySlice<Byte>? SoundsFinalize
        {
            get => this._SoundsFinalize;
            set => this._SoundsFinalize = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INpcGetter.SoundsFinalize => this.SoundsFinalize;
        #endregion
        #region InheritsSoundsFrom
        private readonly IFormLinkNullable<INpcGetter> _InheritsSoundsFrom = new FormLinkNullable<INpcGetter>();
        public IFormLinkNullable<INpcGetter> InheritsSoundsFrom
        {
            get => _InheritsSoundsFrom;
            set => _InheritsSoundsFrom.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<INpcGetter> INpcGetter.InheritsSoundsFrom => this.InheritsSoundsFrom;
        #endregion
        #region PowerArmorStand
        private readonly IFormLinkNullable<IFurnitureGetter> _PowerArmorStand = new FormLinkNullable<IFurnitureGetter>();
        public IFormLinkNullable<IFurnitureGetter> PowerArmorStand
        {
            get => _PowerArmorStand;
            set => _PowerArmorStand.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFurnitureGetter> INpcGetter.PowerArmorStand => this.PowerArmorStand;
        #endregion
        #region DefaultOutfit
        private readonly IFormLinkNullable<IOutfitGetter> _DefaultOutfit = new FormLinkNullable<IOutfitGetter>();
        public IFormLinkNullable<IOutfitGetter> DefaultOutfit
        {
            get => _DefaultOutfit;
            set => _DefaultOutfit.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOutfitGetter> INpcGetter.DefaultOutfit => this.DefaultOutfit;
        #endregion
        #region SleepingOutfit
        private readonly IFormLinkNullable<IOutfitGetter> _SleepingOutfit = new FormLinkNullable<IOutfitGetter>();
        public IFormLinkNullable<IOutfitGetter> SleepingOutfit
        {
            get => _SleepingOutfit;
            set => _SleepingOutfit.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOutfitGetter> INpcGetter.SleepingOutfit => this.SleepingOutfit;
        #endregion
        #region DefaultPackageList
        private readonly IFormLinkNullable<IFormListGetter> _DefaultPackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> DefaultPackageList
        {
            get => _DefaultPackageList;
            set => _DefaultPackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.DefaultPackageList => this.DefaultPackageList;
        #endregion
        #region CrimeFaction
        private readonly IFormLinkNullable<IFactionGetter> _CrimeFaction = new FormLinkNullable<IFactionGetter>();
        public IFormLinkNullable<IFactionGetter> CrimeFaction
        {
            get => _CrimeFaction;
            set => _CrimeFaction.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFactionGetter> INpcGetter.CrimeFaction => this.CrimeFaction;
        #endregion
        #region HeadTexture
        private readonly IFormLinkNullable<ITextureSetGetter> _HeadTexture = new FormLinkNullable<ITextureSetGetter>();
        public IFormLinkNullable<ITextureSetGetter> HeadTexture
        {
            get => _HeadTexture;
            set => _HeadTexture.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITextureSetGetter> INpcGetter.HeadTexture => this.HeadTexture;
        #endregion
        #region TextureLighting
        public Color? TextureLighting { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? INpcGetter.TextureLighting => this.TextureLighting;
        #endregion
        #region Morphs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NpcMorph> _Morphs = new ExtendedList<NpcMorph>();
        public ExtendedList<NpcMorph> Morphs
        {
            get => this._Morphs;
            init => this._Morphs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INpcMorphGetter> INpcGetter.Morphs => _Morphs;
        #endregion

        #endregion
        #region FaceTintingLayers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NpcFaceTintingLayer> _FaceTintingLayers = new ExtendedList<NpcFaceTintingLayer>();
        public ExtendedList<NpcFaceTintingLayer> FaceTintingLayers
        {
            get => this._FaceTintingLayers;
            init => this._FaceTintingLayers = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INpcFaceTintingLayerGetter> INpcGetter.FaceTintingLayers => _FaceTintingLayers;
        #endregion

        #endregion
        #region BodyMorphRegionValues
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcBodyMorphRegionValues? _BodyMorphRegionValues;
        public NpcBodyMorphRegionValues? BodyMorphRegionValues
        {
            get => _BodyMorphRegionValues;
            set => _BodyMorphRegionValues = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcBodyMorphRegionValuesGetter? INpcGetter.BodyMorphRegionValues => this.BodyMorphRegionValues;
        #endregion
        #region FaceMorphs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<NpcFaceMorph> _FaceMorphs = new ExtendedList<NpcFaceMorph>();
        public ExtendedList<NpcFaceMorph> FaceMorphs
        {
            get => this._FaceMorphs;
            init => this._FaceMorphs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<INpcFaceMorphGetter> INpcGetter.FaceMorphs => _FaceMorphs;
        #endregion

        #endregion
        #region FacialMorphIntensity
        public Single? FacialMorphIntensity { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? INpcGetter.FacialMorphIntensity => this.FacialMorphIntensity;
        #endregion
        #region ActivateTextOverride
        public TranslatedString? ActivateTextOverride { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? INpcGetter.ActivateTextOverride => this.ActivateTextOverride;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.PreviewTransform = initialValue;
                this.AnimationSound = initialValue;
                this.Flags = initialValue;
                this.XpValueOffset = initialValue;
                this.Level = new MaskItem<TItem, ANpcLevel.Mask<TItem>?>(initialValue, new ANpcLevel.Mask<TItem>(initialValue));
                this.CalcMinLevel = initialValue;
                this.CalcMaxLevel = initialValue;
                this.DispositionBase = initialValue;
                this.UseTemplateActors = initialValue;
                this.BleedoutOverride = initialValue;
                this.Unknown = initialValue;
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = initialValue;
                this.Voice = initialValue;
                this.DefaultTemplate = initialValue;
                this.LegendaryTemplate = initialValue;
                this.LegendaryChance = initialValue;
                this.TemplateActors = new MaskItem<TItem, TemplateActors.Mask<TItem>?>(initialValue, new TemplateActors.Mask<TItem>(initialValue));
                this.Race = initialValue;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Skin = initialValue;
                this.FarAwayModel = initialValue;
                this.AttackRace = initialValue;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.SpectatorOverridePackageList = initialValue;
                this.ObserveDeadBodyOverridePackageList = initialValue;
                this.GuardWarnOverridePackageList = initialValue;
                this.CombatOverridePackageList = initialValue;
                this.FollowerCommandPackageList = initialValue;
                this.FollowerElevatorPackageList = initialValue;
                this.Perks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.ForcedLocRefType = initialValue;
                this.NativeTerminal = initialValue;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.Aggression = initialValue;
                this.Confidence = initialValue;
                this.EnergyLevel = initialValue;
                this.Responsibility = initialValue;
                this.Mood = initialValue;
                this.Assistance = initialValue;
                this.AggroRadiusBehaviorEnabled = initialValue;
                this.AggroRadiusWarn = initialValue;
                this.AggroRadiusWarnOrAttack = initialValue;
                this.AggroRadiusAttack = initialValue;
                this.NoSlowApproach = initialValue;
                this.Packages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.AttachParentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ObjectTemplates = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>());
                this.Class = initialValue;
                this.Name = initialValue;
                this.ShortName = initialValue;
                this.CalculatedHealth = initialValue;
                this.CalculatedActionPoints = initialValue;
                this.FarAwayModelDistance = initialValue;
                this.GearedUpWeapons = initialValue;
                this.Unused = initialValue;
                this.HeadParts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.HairColor = initialValue;
                this.FacialHairColor = initialValue;
                this.CombatStyle = initialValue;
                this.GiftFilter = initialValue;
                this.NAM5 = initialValue;
                this.HeightMin = initialValue;
                this.NAM7 = initialValue;
                this.HeightMax = initialValue;
                this.Weight = new MaskItem<TItem, NpcWeight.Mask<TItem>?>(initialValue, new NpcWeight.Mask<TItem>(initialValue));
                this.SoundLevel = initialValue;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcSound.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NpcSound.Mask<TItem>?>>());
                this.SoundsFinalize = initialValue;
                this.InheritsSoundsFrom = initialValue;
                this.PowerArmorStand = initialValue;
                this.DefaultOutfit = initialValue;
                this.SleepingOutfit = initialValue;
                this.DefaultPackageList = initialValue;
                this.CrimeFaction = initialValue;
                this.HeadTexture = initialValue;
                this.TextureLighting = initialValue;
                this.Morphs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcMorph.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NpcMorph.Mask<TItem>?>>());
                this.FaceTintingLayers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcFaceTintingLayer.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NpcFaceTintingLayer.Mask<TItem>?>>());
                this.BodyMorphRegionValues = new MaskItem<TItem, NpcBodyMorphRegionValues.Mask<TItem>?>(initialValue, new NpcBodyMorphRegionValues.Mask<TItem>(initialValue));
                this.FaceMorphs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcFaceMorph.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, NpcFaceMorph.Mask<TItem>?>>());
                this.FacialMorphIntensity = initialValue;
                this.ActivateTextOverride = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem PreviewTransform,
                TItem AnimationSound,
                TItem Flags,
                TItem XpValueOffset,
                TItem Level,
                TItem CalcMinLevel,
                TItem CalcMaxLevel,
                TItem DispositionBase,
                TItem UseTemplateActors,
                TItem BleedoutOverride,
                TItem Unknown,
                TItem Factions,
                TItem DeathItem,
                TItem Voice,
                TItem DefaultTemplate,
                TItem LegendaryTemplate,
                TItem LegendaryChance,
                TItem TemplateActors,
                TItem Race,
                TItem ActorEffect,
                TItem Destructible,
                TItem Skin,
                TItem FarAwayModel,
                TItem AttackRace,
                TItem Attacks,
                TItem SpectatorOverridePackageList,
                TItem ObserveDeadBodyOverridePackageList,
                TItem GuardWarnOverridePackageList,
                TItem CombatOverridePackageList,
                TItem FollowerCommandPackageList,
                TItem FollowerElevatorPackageList,
                TItem Perks,
                TItem Properties,
                TItem ForcedLocRefType,
                TItem NativeTerminal,
                TItem Items,
                TItem Aggression,
                TItem Confidence,
                TItem EnergyLevel,
                TItem Responsibility,
                TItem Mood,
                TItem Assistance,
                TItem AggroRadiusBehaviorEnabled,
                TItem AggroRadiusWarn,
                TItem AggroRadiusWarnOrAttack,
                TItem AggroRadiusAttack,
                TItem NoSlowApproach,
                TItem Packages,
                TItem Keywords,
                TItem AttachParentSlots,
                TItem ObjectTemplates,
                TItem Class,
                TItem Name,
                TItem ShortName,
                TItem CalculatedHealth,
                TItem CalculatedActionPoints,
                TItem FarAwayModelDistance,
                TItem GearedUpWeapons,
                TItem Unused,
                TItem HeadParts,
                TItem HairColor,
                TItem FacialHairColor,
                TItem CombatStyle,
                TItem GiftFilter,
                TItem NAM5,
                TItem HeightMin,
                TItem NAM7,
                TItem HeightMax,
                TItem Weight,
                TItem SoundLevel,
                TItem Sounds,
                TItem SoundsFinalize,
                TItem InheritsSoundsFrom,
                TItem PowerArmorStand,
                TItem DefaultOutfit,
                TItem SleepingOutfit,
                TItem DefaultPackageList,
                TItem CrimeFaction,
                TItem HeadTexture,
                TItem TextureLighting,
                TItem Morphs,
                TItem FaceTintingLayers,
                TItem BodyMorphRegionValues,
                TItem FaceMorphs,
                TItem FacialMorphIntensity,
                TItem ActivateTextOverride)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.PreviewTransform = PreviewTransform;
                this.AnimationSound = AnimationSound;
                this.Flags = Flags;
                this.XpValueOffset = XpValueOffset;
                this.Level = new MaskItem<TItem, ANpcLevel.Mask<TItem>?>(Level, new ANpcLevel.Mask<TItem>(Level));
                this.CalcMinLevel = CalcMinLevel;
                this.CalcMaxLevel = CalcMaxLevel;
                this.DispositionBase = DispositionBase;
                this.UseTemplateActors = UseTemplateActors;
                this.BleedoutOverride = BleedoutOverride;
                this.Unknown = Unknown;
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(Factions, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = DeathItem;
                this.Voice = Voice;
                this.DefaultTemplate = DefaultTemplate;
                this.LegendaryTemplate = LegendaryTemplate;
                this.LegendaryChance = LegendaryChance;
                this.TemplateActors = new MaskItem<TItem, TemplateActors.Mask<TItem>?>(TemplateActors, new TemplateActors.Mask<TItem>(TemplateActors));
                this.Race = Race;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ActorEffect, Enumerable.Empty<(int Index, TItem Value)>());
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Skin = Skin;
                this.FarAwayModel = FarAwayModel;
                this.AttackRace = AttackRace;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(Attacks, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.SpectatorOverridePackageList = SpectatorOverridePackageList;
                this.ObserveDeadBodyOverridePackageList = ObserveDeadBodyOverridePackageList;
                this.GuardWarnOverridePackageList = GuardWarnOverridePackageList;
                this.CombatOverridePackageList = CombatOverridePackageList;
                this.FollowerCommandPackageList = FollowerCommandPackageList;
                this.FollowerElevatorPackageList = FollowerElevatorPackageList;
                this.Perks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>?>(Perks, Enumerable.Empty<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.ForcedLocRefType = ForcedLocRefType;
                this.NativeTerminal = NativeTerminal;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.Aggression = Aggression;
                this.Confidence = Confidence;
                this.EnergyLevel = EnergyLevel;
                this.Responsibility = Responsibility;
                this.Mood = Mood;
                this.Assistance = Assistance;
                this.AggroRadiusBehaviorEnabled = AggroRadiusBehaviorEnabled;
                this.AggroRadiusWarn = AggroRadiusWarn;
                this.AggroRadiusWarnOrAttack = AggroRadiusWarnOrAttack;
                this.AggroRadiusAttack = AggroRadiusAttack;
                this.NoSlowApproach = NoSlowApproach;
                this.Packages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Packages, Enumerable.Empty<(int Index, TItem Value)>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.AttachParentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AttachParentSlots, Enumerable.Empty<(int Index, TItem Value)>());
                this.ObjectTemplates = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>?>(ObjectTemplates, Enumerable.Empty<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>());
                this.Class = Class;
                this.Name = Name;
                this.ShortName = ShortName;
                this.CalculatedHealth = CalculatedHealth;
                this.CalculatedActionPoints = CalculatedActionPoints;
                this.FarAwayModelDistance = FarAwayModelDistance;
                this.GearedUpWeapons = GearedUpWeapons;
                this.Unused = Unused;
                this.HeadParts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(HeadParts, Enumerable.Empty<(int Index, TItem Value)>());
                this.HairColor = HairColor;
                this.FacialHairColor = FacialHairColor;
                this.CombatStyle = CombatStyle;
                this.GiftFilter = GiftFilter;
                this.NAM5 = NAM5;
                this.HeightMin = HeightMin;
                this.NAM7 = NAM7;
                this.HeightMax = HeightMax;
                this.Weight = new MaskItem<TItem, NpcWeight.Mask<TItem>?>(Weight, new NpcWeight.Mask<TItem>(Weight));
                this.SoundLevel = SoundLevel;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcSound.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, NpcSound.Mask<TItem>?>>());
                this.SoundsFinalize = SoundsFinalize;
                this.InheritsSoundsFrom = InheritsSoundsFrom;
                this.PowerArmorStand = PowerArmorStand;
                this.DefaultOutfit = DefaultOutfit;
                this.SleepingOutfit = SleepingOutfit;
                this.DefaultPackageList = DefaultPackageList;
                this.CrimeFaction = CrimeFaction;
                this.HeadTexture = HeadTexture;
                this.TextureLighting = TextureLighting;
                this.Morphs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcMorph.Mask<TItem>?>>?>(Morphs, Enumerable.Empty<MaskItemIndexed<TItem, NpcMorph.Mask<TItem>?>>());
                this.FaceTintingLayers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcFaceTintingLayer.Mask<TItem>?>>?>(FaceTintingLayers, Enumerable.Empty<MaskItemIndexed<TItem, NpcFaceTintingLayer.Mask<TItem>?>>());
                this.BodyMorphRegionValues = new MaskItem<TItem, NpcBodyMorphRegionValues.Mask<TItem>?>(BodyMorphRegionValues, new NpcBodyMorphRegionValues.Mask<TItem>(BodyMorphRegionValues));
                this.FaceMorphs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcFaceMorph.Mask<TItem>?>>?>(FaceMorphs, Enumerable.Empty<MaskItemIndexed<TItem, NpcFaceMorph.Mask<TItem>?>>());
                this.FacialMorphIntensity = FacialMorphIntensity;
                this.ActivateTextOverride = ActivateTextOverride;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem PreviewTransform;
            public TItem AnimationSound;
            public TItem Flags;
            public TItem XpValueOffset;
            public MaskItem<TItem, ANpcLevel.Mask<TItem>?>? Level { get; set; }
            public TItem CalcMinLevel;
            public TItem CalcMaxLevel;
            public TItem DispositionBase;
            public TItem UseTemplateActors;
            public TItem BleedoutOverride;
            public TItem Unknown;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>? Factions;
            public TItem DeathItem;
            public TItem Voice;
            public TItem DefaultTemplate;
            public TItem LegendaryTemplate;
            public TItem LegendaryChance;
            public MaskItem<TItem, TemplateActors.Mask<TItem>?>? TemplateActors { get; set; }
            public TItem Race;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ActorEffect;
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem Skin;
            public TItem FarAwayModel;
            public TItem AttackRace;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>? Attacks;
            public TItem SpectatorOverridePackageList;
            public TItem ObserveDeadBodyOverridePackageList;
            public TItem GuardWarnOverridePackageList;
            public TItem CombatOverridePackageList;
            public TItem FollowerCommandPackageList;
            public TItem FollowerElevatorPackageList;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>?>? Perks;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>? Properties;
            public TItem ForcedLocRefType;
            public TItem NativeTerminal;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>? Items;
            public TItem Aggression;
            public TItem Confidence;
            public TItem EnergyLevel;
            public TItem Responsibility;
            public TItem Mood;
            public TItem Assistance;
            public TItem AggroRadiusBehaviorEnabled;
            public TItem AggroRadiusWarn;
            public TItem AggroRadiusWarnOrAttack;
            public TItem AggroRadiusAttack;
            public TItem NoSlowApproach;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Packages;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AttachParentSlots;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>?>? ObjectTemplates;
            public TItem Class;
            public TItem Name;
            public TItem ShortName;
            public TItem CalculatedHealth;
            public TItem CalculatedActionPoints;
            public TItem FarAwayModelDistance;
            public TItem GearedUpWeapons;
            public TItem Unused;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? HeadParts;
            public TItem HairColor;
            public TItem FacialHairColor;
            public TItem CombatStyle;
            public TItem GiftFilter;
            public TItem NAM5;
            public TItem HeightMin;
            public TItem NAM7;
            public TItem HeightMax;
            public MaskItem<TItem, NpcWeight.Mask<TItem>?>? Weight { get; set; }
            public TItem SoundLevel;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcSound.Mask<TItem>?>>?>? Sounds;
            public TItem SoundsFinalize;
            public TItem InheritsSoundsFrom;
            public TItem PowerArmorStand;
            public TItem DefaultOutfit;
            public TItem SleepingOutfit;
            public TItem DefaultPackageList;
            public TItem CrimeFaction;
            public TItem HeadTexture;
            public TItem TextureLighting;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcMorph.Mask<TItem>?>>?>? Morphs;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcFaceTintingLayer.Mask<TItem>?>>?>? FaceTintingLayers;
            public MaskItem<TItem, NpcBodyMorphRegionValues.Mask<TItem>?>? BodyMorphRegionValues { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, NpcFaceMorph.Mask<TItem>?>>?>? FaceMorphs;
            public TItem FacialMorphIntensity;
            public TItem ActivateTextOverride;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.PreviewTransform, rhs.PreviewTransform)) return false;
                if (!object.Equals(this.AnimationSound, rhs.AnimationSound)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.XpValueOffset, rhs.XpValueOffset)) return false;
                if (!object.Equals(this.Level, rhs.Level)) return false;
                if (!object.Equals(this.CalcMinLevel, rhs.CalcMinLevel)) return false;
                if (!object.Equals(this.CalcMaxLevel, rhs.CalcMaxLevel)) return false;
                if (!object.Equals(this.DispositionBase, rhs.DispositionBase)) return false;
                if (!object.Equals(this.UseTemplateActors, rhs.UseTemplateActors)) return false;
                if (!object.Equals(this.BleedoutOverride, rhs.BleedoutOverride)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
                if (!object.Equals(this.Voice, rhs.Voice)) return false;
                if (!object.Equals(this.DefaultTemplate, rhs.DefaultTemplate)) return false;
                if (!object.Equals(this.LegendaryTemplate, rhs.LegendaryTemplate)) return false;
                if (!object.Equals(this.LegendaryChance, rhs.LegendaryChance)) return false;
                if (!object.Equals(this.TemplateActors, rhs.TemplateActors)) return false;
                if (!object.Equals(this.Race, rhs.Race)) return false;
                if (!object.Equals(this.ActorEffect, rhs.ActorEffect)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Skin, rhs.Skin)) return false;
                if (!object.Equals(this.FarAwayModel, rhs.FarAwayModel)) return false;
                if (!object.Equals(this.AttackRace, rhs.AttackRace)) return false;
                if (!object.Equals(this.Attacks, rhs.Attacks)) return false;
                if (!object.Equals(this.SpectatorOverridePackageList, rhs.SpectatorOverridePackageList)) return false;
                if (!object.Equals(this.ObserveDeadBodyOverridePackageList, rhs.ObserveDeadBodyOverridePackageList)) return false;
                if (!object.Equals(this.GuardWarnOverridePackageList, rhs.GuardWarnOverridePackageList)) return false;
                if (!object.Equals(this.CombatOverridePackageList, rhs.CombatOverridePackageList)) return false;
                if (!object.Equals(this.FollowerCommandPackageList, rhs.FollowerCommandPackageList)) return false;
                if (!object.Equals(this.FollowerElevatorPackageList, rhs.FollowerElevatorPackageList)) return false;
                if (!object.Equals(this.Perks, rhs.Perks)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.ForcedLocRefType, rhs.ForcedLocRefType)) return false;
                if (!object.Equals(this.NativeTerminal, rhs.NativeTerminal)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.Aggression, rhs.Aggression)) return false;
                if (!object.Equals(this.Confidence, rhs.Confidence)) return false;
                if (!object.Equals(this.EnergyLevel, rhs.EnergyLevel)) return false;
                if (!object.Equals(this.Responsibility, rhs.Responsibility)) return false;
                if (!object.Equals(this.Mood, rhs.Mood)) return false;
                if (!object.Equals(this.Assistance, rhs.Assistance)) return false;
                if (!object.Equals(this.AggroRadiusBehaviorEnabled, rhs.AggroRadiusBehaviorEnabled)) return false;
                if (!object.Equals(this.AggroRadiusWarn, rhs.AggroRadiusWarn)) return false;
                if (!object.Equals(this.AggroRadiusWarnOrAttack, rhs.AggroRadiusWarnOrAttack)) return false;
                if (!object.Equals(this.AggroRadiusAttack, rhs.AggroRadiusAttack)) return false;
                if (!object.Equals(this.NoSlowApproach, rhs.NoSlowApproach)) return false;
                if (!object.Equals(this.Packages, rhs.Packages)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.AttachParentSlots, rhs.AttachParentSlots)) return false;
                if (!object.Equals(this.ObjectTemplates, rhs.ObjectTemplates)) return false;
                if (!object.Equals(this.Class, rhs.Class)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.ShortName, rhs.ShortName)) return false;
                if (!object.Equals(this.CalculatedHealth, rhs.CalculatedHealth)) return false;
                if (!object.Equals(this.CalculatedActionPoints, rhs.CalculatedActionPoints)) return false;
                if (!object.Equals(this.FarAwayModelDistance, rhs.FarAwayModelDistance)) return false;
                if (!object.Equals(this.GearedUpWeapons, rhs.GearedUpWeapons)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.HairColor, rhs.HairColor)) return false;
                if (!object.Equals(this.FacialHairColor, rhs.FacialHairColor)) return false;
                if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
                if (!object.Equals(this.GiftFilter, rhs.GiftFilter)) return false;
                if (!object.Equals(this.NAM5, rhs.NAM5)) return false;
                if (!object.Equals(this.HeightMin, rhs.HeightMin)) return false;
                if (!object.Equals(this.NAM7, rhs.NAM7)) return false;
                if (!object.Equals(this.HeightMax, rhs.HeightMax)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.SoundLevel, rhs.SoundLevel)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                if (!object.Equals(this.SoundsFinalize, rhs.SoundsFinalize)) return false;
                if (!object.Equals(this.InheritsSoundsFrom, rhs.InheritsSoundsFrom)) return false;
                if (!object.Equals(this.PowerArmorStand, rhs.PowerArmorStand)) return false;
                if (!object.Equals(this.DefaultOutfit, rhs.DefaultOutfit)) return false;
                if (!object.Equals(this.SleepingOutfit, rhs.SleepingOutfit)) return false;
                if (!object.Equals(this.DefaultPackageList, rhs.DefaultPackageList)) return false;
                if (!object.Equals(this.CrimeFaction, rhs.CrimeFaction)) return false;
                if (!object.Equals(this.HeadTexture, rhs.HeadTexture)) return false;
                if (!object.Equals(this.TextureLighting, rhs.TextureLighting)) return false;
                if (!object.Equals(this.Morphs, rhs.Morphs)) return false;
                if (!object.Equals(this.FaceTintingLayers, rhs.FaceTintingLayers)) return false;
                if (!object.Equals(this.BodyMorphRegionValues, rhs.BodyMorphRegionValues)) return false;
                if (!object.Equals(this.FaceMorphs, rhs.FaceMorphs)) return false;
                if (!object.Equals(this.FacialMorphIntensity, rhs.FacialMorphIntensity)) return false;
                if (!object.Equals(this.ActivateTextOverride, rhs.ActivateTextOverride)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.PreviewTransform);
                hash.Add(this.AnimationSound);
                hash.Add(this.Flags);
                hash.Add(this.XpValueOffset);
                hash.Add(this.Level);
                hash.Add(this.CalcMinLevel);
                hash.Add(this.CalcMaxLevel);
                hash.Add(this.DispositionBase);
                hash.Add(this.UseTemplateActors);
                hash.Add(this.BleedoutOverride);
                hash.Add(this.Unknown);
                hash.Add(this.Factions);
                hash.Add(this.DeathItem);
                hash.Add(this.Voice);
                hash.Add(this.DefaultTemplate);
                hash.Add(this.LegendaryTemplate);
                hash.Add(this.LegendaryChance);
                hash.Add(this.TemplateActors);
                hash.Add(this.Race);
                hash.Add(this.ActorEffect);
                hash.Add(this.Destructible);
                hash.Add(this.Skin);
                hash.Add(this.FarAwayModel);
                hash.Add(this.AttackRace);
                hash.Add(this.Attacks);
                hash.Add(this.SpectatorOverridePackageList);
                hash.Add(this.ObserveDeadBodyOverridePackageList);
                hash.Add(this.GuardWarnOverridePackageList);
                hash.Add(this.CombatOverridePackageList);
                hash.Add(this.FollowerCommandPackageList);
                hash.Add(this.FollowerElevatorPackageList);
                hash.Add(this.Perks);
                hash.Add(this.Properties);
                hash.Add(this.ForcedLocRefType);
                hash.Add(this.NativeTerminal);
                hash.Add(this.Items);
                hash.Add(this.Aggression);
                hash.Add(this.Confidence);
                hash.Add(this.EnergyLevel);
                hash.Add(this.Responsibility);
                hash.Add(this.Mood);
                hash.Add(this.Assistance);
                hash.Add(this.AggroRadiusBehaviorEnabled);
                hash.Add(this.AggroRadiusWarn);
                hash.Add(this.AggroRadiusWarnOrAttack);
                hash.Add(this.AggroRadiusAttack);
                hash.Add(this.NoSlowApproach);
                hash.Add(this.Packages);
                hash.Add(this.Keywords);
                hash.Add(this.AttachParentSlots);
                hash.Add(this.ObjectTemplates);
                hash.Add(this.Class);
                hash.Add(this.Name);
                hash.Add(this.ShortName);
                hash.Add(this.CalculatedHealth);
                hash.Add(this.CalculatedActionPoints);
                hash.Add(this.FarAwayModelDistance);
                hash.Add(this.GearedUpWeapons);
                hash.Add(this.Unused);
                hash.Add(this.HeadParts);
                hash.Add(this.HairColor);
                hash.Add(this.FacialHairColor);
                hash.Add(this.CombatStyle);
                hash.Add(this.GiftFilter);
                hash.Add(this.NAM5);
                hash.Add(this.HeightMin);
                hash.Add(this.NAM7);
                hash.Add(this.HeightMax);
                hash.Add(this.Weight);
                hash.Add(this.SoundLevel);
                hash.Add(this.Sounds);
                hash.Add(this.SoundsFinalize);
                hash.Add(this.InheritsSoundsFrom);
                hash.Add(this.PowerArmorStand);
                hash.Add(this.DefaultOutfit);
                hash.Add(this.SleepingOutfit);
                hash.Add(this.DefaultPackageList);
                hash.Add(this.CrimeFaction);
                hash.Add(this.HeadTexture);
                hash.Add(this.TextureLighting);
                hash.Add(this.Morphs);
                hash.Add(this.FaceTintingLayers);
                hash.Add(this.BodyMorphRegionValues);
                hash.Add(this.FaceMorphs);
                hash.Add(this.FacialMorphIntensity);
                hash.Add(this.ActivateTextOverride);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.PreviewTransform)) return false;
                if (!eval(this.AnimationSound)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.XpValueOffset)) return false;
                if (Level != null)
                {
                    if (!eval(this.Level.Overall)) return false;
                    if (this.Level.Specific != null && !this.Level.Specific.All(eval)) return false;
                }
                if (!eval(this.CalcMinLevel)) return false;
                if (!eval(this.CalcMaxLevel)) return false;
                if (!eval(this.DispositionBase)) return false;
                if (!eval(this.UseTemplateActors)) return false;
                if (!eval(this.BleedoutOverride)) return false;
                if (!eval(this.Unknown)) return false;
                if (this.Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DeathItem)) return false;
                if (!eval(this.Voice)) return false;
                if (!eval(this.DefaultTemplate)) return false;
                if (!eval(this.LegendaryTemplate)) return false;
                if (!eval(this.LegendaryChance)) return false;
                if (TemplateActors != null)
                {
                    if (!eval(this.TemplateActors.Overall)) return false;
                    if (this.TemplateActors.Specific != null && !this.TemplateActors.Specific.All(eval)) return false;
                }
                if (!eval(this.Race)) return false;
                if (this.ActorEffect != null)
                {
                    if (!eval(this.ActorEffect.Overall)) return false;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.Skin)) return false;
                if (!eval(this.FarAwayModel)) return false;
                if (!eval(this.AttackRace)) return false;
                if (this.Attacks != null)
                {
                    if (!eval(this.Attacks.Overall)) return false;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SpectatorOverridePackageList)) return false;
                if (!eval(this.ObserveDeadBodyOverridePackageList)) return false;
                if (!eval(this.GuardWarnOverridePackageList)) return false;
                if (!eval(this.CombatOverridePackageList)) return false;
                if (!eval(this.FollowerCommandPackageList)) return false;
                if (!eval(this.FollowerElevatorPackageList)) return false;
                if (this.Perks != null)
                {
                    if (!eval(this.Perks.Overall)) return false;
                    if (this.Perks.Specific != null)
                    {
                        foreach (var item in this.Perks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ForcedLocRefType)) return false;
                if (!eval(this.NativeTerminal)) return false;
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Aggression)) return false;
                if (!eval(this.Confidence)) return false;
                if (!eval(this.EnergyLevel)) return false;
                if (!eval(this.Responsibility)) return false;
                if (!eval(this.Mood)) return false;
                if (!eval(this.Assistance)) return false;
                if (!eval(this.AggroRadiusBehaviorEnabled)) return false;
                if (!eval(this.AggroRadiusWarn)) return false;
                if (!eval(this.AggroRadiusWarnOrAttack)) return false;
                if (!eval(this.AggroRadiusAttack)) return false;
                if (!eval(this.NoSlowApproach)) return false;
                if (this.Packages != null)
                {
                    if (!eval(this.Packages.Overall)) return false;
                    if (this.Packages.Specific != null)
                    {
                        foreach (var item in this.Packages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AttachParentSlots != null)
                {
                    if (!eval(this.AttachParentSlots.Overall)) return false;
                    if (this.AttachParentSlots.Specific != null)
                    {
                        foreach (var item in this.AttachParentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ObjectTemplates != null)
                {
                    if (!eval(this.ObjectTemplates.Overall)) return false;
                    if (this.ObjectTemplates.Specific != null)
                    {
                        foreach (var item in this.ObjectTemplates.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Class)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.ShortName)) return false;
                if (!eval(this.CalculatedHealth)) return false;
                if (!eval(this.CalculatedActionPoints)) return false;
                if (!eval(this.FarAwayModelDistance)) return false;
                if (!eval(this.GearedUpWeapons)) return false;
                if (!eval(this.Unused)) return false;
                if (this.HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null)
                    {
                        foreach (var item in this.HeadParts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.HairColor)) return false;
                if (!eval(this.FacialHairColor)) return false;
                if (!eval(this.CombatStyle)) return false;
                if (!eval(this.GiftFilter)) return false;
                if (!eval(this.NAM5)) return false;
                if (!eval(this.HeightMin)) return false;
                if (!eval(this.NAM7)) return false;
                if (!eval(this.HeightMax)) return false;
                if (Weight != null)
                {
                    if (!eval(this.Weight.Overall)) return false;
                    if (this.Weight.Specific != null && !this.Weight.Specific.All(eval)) return false;
                }
                if (!eval(this.SoundLevel)) return false;
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SoundsFinalize)) return false;
                if (!eval(this.InheritsSoundsFrom)) return false;
                if (!eval(this.PowerArmorStand)) return false;
                if (!eval(this.DefaultOutfit)) return false;
                if (!eval(this.SleepingOutfit)) return false;
                if (!eval(this.DefaultPackageList)) return false;
                if (!eval(this.CrimeFaction)) return false;
                if (!eval(this.HeadTexture)) return false;
                if (!eval(this.TextureLighting)) return false;
                if (this.Morphs != null)
                {
                    if (!eval(this.Morphs.Overall)) return false;
                    if (this.Morphs.Specific != null)
                    {
                        foreach (var item in this.Morphs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.FaceTintingLayers != null)
                {
                    if (!eval(this.FaceTintingLayers.Overall)) return false;
                    if (this.FaceTintingLayers.Specific != null)
                    {
                        foreach (var item in this.FaceTintingLayers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (BodyMorphRegionValues != null)
                {
                    if (!eval(this.BodyMorphRegionValues.Overall)) return false;
                    if (this.BodyMorphRegionValues.Specific != null && !this.BodyMorphRegionValues.Specific.All(eval)) return false;
                }
                if (this.FaceMorphs != null)
                {
                    if (!eval(this.FaceMorphs.Overall)) return false;
                    if (this.FaceMorphs.Specific != null)
                    {
                        foreach (var item in this.FaceMorphs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.FacialMorphIntensity)) return false;
                if (!eval(this.ActivateTextOverride)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.PreviewTransform)) return true;
                if (eval(this.AnimationSound)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.XpValueOffset)) return true;
                if (Level != null)
                {
                    if (eval(this.Level.Overall)) return true;
                    if (this.Level.Specific != null && this.Level.Specific.Any(eval)) return true;
                }
                if (eval(this.CalcMinLevel)) return true;
                if (eval(this.CalcMaxLevel)) return true;
                if (eval(this.DispositionBase)) return true;
                if (eval(this.UseTemplateActors)) return true;
                if (eval(this.BleedoutOverride)) return true;
                if (eval(this.Unknown)) return true;
                if (this.Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DeathItem)) return true;
                if (eval(this.Voice)) return true;
                if (eval(this.DefaultTemplate)) return true;
                if (eval(this.LegendaryTemplate)) return true;
                if (eval(this.LegendaryChance)) return true;
                if (TemplateActors != null)
                {
                    if (eval(this.TemplateActors.Overall)) return true;
                    if (this.TemplateActors.Specific != null && this.TemplateActors.Specific.Any(eval)) return true;
                }
                if (eval(this.Race)) return true;
                if (this.ActorEffect != null)
                {
                    if (eval(this.ActorEffect.Overall)) return true;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.Skin)) return true;
                if (eval(this.FarAwayModel)) return true;
                if (eval(this.AttackRace)) return true;
                if (this.Attacks != null)
                {
                    if (eval(this.Attacks.Overall)) return true;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SpectatorOverridePackageList)) return true;
                if (eval(this.ObserveDeadBodyOverridePackageList)) return true;
                if (eval(this.GuardWarnOverridePackageList)) return true;
                if (eval(this.CombatOverridePackageList)) return true;
                if (eval(this.FollowerCommandPackageList)) return true;
                if (eval(this.FollowerElevatorPackageList)) return true;
                if (this.Perks != null)
                {
                    if (eval(this.Perks.Overall)) return true;
                    if (this.Perks.Specific != null)
                    {
                        foreach (var item in this.Perks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ForcedLocRefType)) return true;
                if (eval(this.NativeTerminal)) return true;
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Aggression)) return true;
                if (eval(this.Confidence)) return true;
                if (eval(this.EnergyLevel)) return true;
                if (eval(this.Responsibility)) return true;
                if (eval(this.Mood)) return true;
                if (eval(this.Assistance)) return true;
                if (eval(this.AggroRadiusBehaviorEnabled)) return true;
                if (eval(this.AggroRadiusWarn)) return true;
                if (eval(this.AggroRadiusWarnOrAttack)) return true;
                if (eval(this.AggroRadiusAttack)) return true;
                if (eval(this.NoSlowApproach)) return true;
                if (this.Packages != null)
                {
                    if (eval(this.Packages.Overall)) return true;
                    if (this.Packages.Specific != null)
                    {
                        foreach (var item in this.Packages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AttachParentSlots != null)
                {
                    if (eval(this.AttachParentSlots.Overall)) return true;
                    if (this.AttachParentSlots.Specific != null)
                    {
                        foreach (var item in this.AttachParentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ObjectTemplates != null)
                {
                    if (eval(this.ObjectTemplates.Overall)) return true;
                    if (this.ObjectTemplates.Specific != null)
                    {
                        foreach (var item in this.ObjectTemplates.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Class)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.ShortName)) return true;
                if (eval(this.CalculatedHealth)) return true;
                if (eval(this.CalculatedActionPoints)) return true;
                if (eval(this.FarAwayModelDistance)) return true;
                if (eval(this.GearedUpWeapons)) return true;
                if (eval(this.Unused)) return true;
                if (this.HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null)
                    {
                        foreach (var item in this.HeadParts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.HairColor)) return true;
                if (eval(this.FacialHairColor)) return true;
                if (eval(this.CombatStyle)) return true;
                if (eval(this.GiftFilter)) return true;
                if (eval(this.NAM5)) return true;
                if (eval(this.HeightMin)) return true;
                if (eval(this.NAM7)) return true;
                if (eval(this.HeightMax)) return true;
                if (Weight != null)
                {
                    if (eval(this.Weight.Overall)) return true;
                    if (this.Weight.Specific != null && this.Weight.Specific.Any(eval)) return true;
                }
                if (eval(this.SoundLevel)) return true;
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SoundsFinalize)) return true;
                if (eval(this.InheritsSoundsFrom)) return true;
                if (eval(this.PowerArmorStand)) return true;
                if (eval(this.DefaultOutfit)) return true;
                if (eval(this.SleepingOutfit)) return true;
                if (eval(this.DefaultPackageList)) return true;
                if (eval(this.CrimeFaction)) return true;
                if (eval(this.HeadTexture)) return true;
                if (eval(this.TextureLighting)) return true;
                if (this.Morphs != null)
                {
                    if (eval(this.Morphs.Overall)) return true;
                    if (this.Morphs.Specific != null)
                    {
                        foreach (var item in this.Morphs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.FaceTintingLayers != null)
                {
                    if (eval(this.FaceTintingLayers.Overall)) return true;
                    if (this.FaceTintingLayers.Specific != null)
                    {
                        foreach (var item in this.FaceTintingLayers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (BodyMorphRegionValues != null)
                {
                    if (eval(this.BodyMorphRegionValues.Overall)) return true;
                    if (this.BodyMorphRegionValues.Specific != null && this.BodyMorphRegionValues.Specific.Any(eval)) return true;
                }
                if (this.FaceMorphs != null)
                {
                    if (eval(this.FaceMorphs.Overall)) return true;
                    if (this.FaceMorphs.Specific != null)
                    {
                        foreach (var item in this.FaceMorphs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.FacialMorphIntensity)) return true;
                if (eval(this.ActivateTextOverride)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Npc.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.PreviewTransform = eval(this.PreviewTransform);
                obj.AnimationSound = eval(this.AnimationSound);
                obj.Flags = eval(this.Flags);
                obj.XpValueOffset = eval(this.XpValueOffset);
                obj.Level = this.Level == null ? null : new MaskItem<R, ANpcLevel.Mask<R>?>(eval(this.Level.Overall), this.Level.Specific?.Translate(eval));
                obj.CalcMinLevel = eval(this.CalcMinLevel);
                obj.CalcMaxLevel = eval(this.CalcMaxLevel);
                obj.DispositionBase = eval(this.DispositionBase);
                obj.UseTemplateActors = eval(this.UseTemplateActors);
                obj.BleedoutOverride = eval(this.BleedoutOverride);
                obj.Unknown = eval(this.Unknown);
                if (Factions != null)
                {
                    obj.Factions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RankPlacement.Mask<R>?>>?>(eval(this.Factions.Overall), Enumerable.Empty<MaskItemIndexed<R, RankPlacement.Mask<R>?>>());
                    if (Factions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RankPlacement.Mask<R>?>>();
                        obj.Factions.Specific = l;
                        foreach (var item in Factions.Specific)
                        {
                            MaskItemIndexed<R, RankPlacement.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, RankPlacement.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DeathItem = eval(this.DeathItem);
                obj.Voice = eval(this.Voice);
                obj.DefaultTemplate = eval(this.DefaultTemplate);
                obj.LegendaryTemplate = eval(this.LegendaryTemplate);
                obj.LegendaryChance = eval(this.LegendaryChance);
                obj.TemplateActors = this.TemplateActors == null ? null : new MaskItem<R, TemplateActors.Mask<R>?>(eval(this.TemplateActors.Overall), this.TemplateActors.Specific?.Translate(eval));
                obj.Race = eval(this.Race);
                if (ActorEffect != null)
                {
                    obj.ActorEffect = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ActorEffect.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ActorEffect.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ActorEffect.Specific = l;
                        foreach (var item in ActorEffect.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.Skin = eval(this.Skin);
                obj.FarAwayModel = eval(this.FarAwayModel);
                obj.AttackRace = eval(this.AttackRace);
                if (Attacks != null)
                {
                    obj.Attacks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Attack.Mask<R>?>>?>(eval(this.Attacks.Overall), Enumerable.Empty<MaskItemIndexed<R, Attack.Mask<R>?>>());
                    if (Attacks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Attack.Mask<R>?>>();
                        obj.Attacks.Specific = l;
                        foreach (var item in Attacks.Specific)
                        {
                            MaskItemIndexed<R, Attack.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Attack.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SpectatorOverridePackageList = eval(this.SpectatorOverridePackageList);
                obj.ObserveDeadBodyOverridePackageList = eval(this.ObserveDeadBodyOverridePackageList);
                obj.GuardWarnOverridePackageList = eval(this.GuardWarnOverridePackageList);
                obj.CombatOverridePackageList = eval(this.CombatOverridePackageList);
                obj.FollowerCommandPackageList = eval(this.FollowerCommandPackageList);
                obj.FollowerElevatorPackageList = eval(this.FollowerElevatorPackageList);
                if (Perks != null)
                {
                    obj.Perks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PerkPlacement.Mask<R>?>>?>(eval(this.Perks.Overall), Enumerable.Empty<MaskItemIndexed<R, PerkPlacement.Mask<R>?>>());
                    if (Perks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PerkPlacement.Mask<R>?>>();
                        obj.Perks.Specific = l;
                        foreach (var item in Perks.Specific)
                        {
                            MaskItemIndexed<R, PerkPlacement.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, PerkPlacement.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, ObjectProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ForcedLocRefType = eval(this.ForcedLocRefType);
                obj.NativeTerminal = eval(this.NativeTerminal);
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific)
                        {
                            MaskItemIndexed<R, ContainerEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ContainerEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Aggression = eval(this.Aggression);
                obj.Confidence = eval(this.Confidence);
                obj.EnergyLevel = eval(this.EnergyLevel);
                obj.Responsibility = eval(this.Responsibility);
                obj.Mood = eval(this.Mood);
                obj.Assistance = eval(this.Assistance);
                obj.AggroRadiusBehaviorEnabled = eval(this.AggroRadiusBehaviorEnabled);
                obj.AggroRadiusWarn = eval(this.AggroRadiusWarn);
                obj.AggroRadiusWarnOrAttack = eval(this.AggroRadiusWarnOrAttack);
                obj.AggroRadiusAttack = eval(this.AggroRadiusAttack);
                obj.NoSlowApproach = eval(this.NoSlowApproach);
                if (Packages != null)
                {
                    obj.Packages = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Packages.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Packages.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Packages.Specific = l;
                        foreach (var item in Packages.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (AttachParentSlots != null)
                {
                    obj.AttachParentSlots = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AttachParentSlots.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AttachParentSlots.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AttachParentSlots.Specific = l;
                        foreach (var item in AttachParentSlots.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (ObjectTemplates != null)
                {
                    obj.ObjectTemplates = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectTemplate.Mask<R>?>>?>(eval(this.ObjectTemplates.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectTemplate.Mask<R>?>>());
                    if (ObjectTemplates.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectTemplate.Mask<R>?>>();
                        obj.ObjectTemplates.Specific = l;
                        foreach (var item in ObjectTemplates.Specific)
                        {
                            MaskItemIndexed<R, ObjectTemplate.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectTemplate.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Class = eval(this.Class);
                obj.Name = eval(this.Name);
                obj.ShortName = eval(this.ShortName);
                obj.CalculatedHealth = eval(this.CalculatedHealth);
                obj.CalculatedActionPoints = eval(this.CalculatedActionPoints);
                obj.FarAwayModelDistance = eval(this.FarAwayModelDistance);
                obj.GearedUpWeapons = eval(this.GearedUpWeapons);
                obj.Unused = eval(this.Unused);
                if (HeadParts != null)
                {
                    obj.HeadParts = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.HeadParts.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (HeadParts.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.HeadParts.Specific = l;
                        foreach (var item in HeadParts.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.HairColor = eval(this.HairColor);
                obj.FacialHairColor = eval(this.FacialHairColor);
                obj.CombatStyle = eval(this.CombatStyle);
                obj.GiftFilter = eval(this.GiftFilter);
                obj.NAM5 = eval(this.NAM5);
                obj.HeightMin = eval(this.HeightMin);
                obj.NAM7 = eval(this.NAM7);
                obj.HeightMax = eval(this.HeightMax);
                obj.Weight = this.Weight == null ? null : new MaskItem<R, NpcWeight.Mask<R>?>(eval(this.Weight.Overall), this.Weight.Specific?.Translate(eval));
                obj.SoundLevel = eval(this.SoundLevel);
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NpcSound.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, NpcSound.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NpcSound.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific)
                        {
                            MaskItemIndexed<R, NpcSound.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, NpcSound.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SoundsFinalize = eval(this.SoundsFinalize);
                obj.InheritsSoundsFrom = eval(this.InheritsSoundsFrom);
                obj.PowerArmorStand = eval(this.PowerArmorStand);
                obj.DefaultOutfit = eval(this.DefaultOutfit);
                obj.SleepingOutfit = eval(this.SleepingOutfit);
                obj.DefaultPackageList = eval(this.DefaultPackageList);
                obj.CrimeFaction = eval(this.CrimeFaction);
                obj.HeadTexture = eval(this.HeadTexture);
                obj.TextureLighting = eval(this.TextureLighting);
                if (Morphs != null)
                {
                    obj.Morphs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NpcMorph.Mask<R>?>>?>(eval(this.Morphs.Overall), Enumerable.Empty<MaskItemIndexed<R, NpcMorph.Mask<R>?>>());
                    if (Morphs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NpcMorph.Mask<R>?>>();
                        obj.Morphs.Specific = l;
                        foreach (var item in Morphs.Specific)
                        {
                            MaskItemIndexed<R, NpcMorph.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, NpcMorph.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (FaceTintingLayers != null)
                {
                    obj.FaceTintingLayers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NpcFaceTintingLayer.Mask<R>?>>?>(eval(this.FaceTintingLayers.Overall), Enumerable.Empty<MaskItemIndexed<R, NpcFaceTintingLayer.Mask<R>?>>());
                    if (FaceTintingLayers.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NpcFaceTintingLayer.Mask<R>?>>();
                        obj.FaceTintingLayers.Specific = l;
                        foreach (var item in FaceTintingLayers.Specific)
                        {
                            MaskItemIndexed<R, NpcFaceTintingLayer.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, NpcFaceTintingLayer.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BodyMorphRegionValues = this.BodyMorphRegionValues == null ? null : new MaskItem<R, NpcBodyMorphRegionValues.Mask<R>?>(eval(this.BodyMorphRegionValues.Overall), this.BodyMorphRegionValues.Specific?.Translate(eval));
                if (FaceMorphs != null)
                {
                    obj.FaceMorphs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, NpcFaceMorph.Mask<R>?>>?>(eval(this.FaceMorphs.Overall), Enumerable.Empty<MaskItemIndexed<R, NpcFaceMorph.Mask<R>?>>());
                    if (FaceMorphs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, NpcFaceMorph.Mask<R>?>>();
                        obj.FaceMorphs.Specific = l;
                        foreach (var item in FaceMorphs.Specific)
                        {
                            MaskItemIndexed<R, NpcFaceMorph.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, NpcFaceMorph.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.FacialMorphIntensity = eval(this.FacialMorphIntensity);
                obj.ActivateTextOverride = eval(this.ActivateTextOverride);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Npc.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Npc.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Npc.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.PreviewTransform ?? true)
                    {
                        sb.AppendItem(PreviewTransform, "PreviewTransform");
                    }
                    if (printMask?.AnimationSound ?? true)
                    {
                        sb.AppendItem(AnimationSound, "AnimationSound");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.XpValueOffset ?? true)
                    {
                        sb.AppendItem(XpValueOffset, "XpValueOffset");
                    }
                    if (printMask?.Level?.Overall ?? true)
                    {
                        Level?.Print(sb);
                    }
                    if (printMask?.CalcMinLevel ?? true)
                    {
                        sb.AppendItem(CalcMinLevel, "CalcMinLevel");
                    }
                    if (printMask?.CalcMaxLevel ?? true)
                    {
                        sb.AppendItem(CalcMaxLevel, "CalcMaxLevel");
                    }
                    if (printMask?.DispositionBase ?? true)
                    {
                        sb.AppendItem(DispositionBase, "DispositionBase");
                    }
                    if (printMask?.UseTemplateActors ?? true)
                    {
                        sb.AppendItem(UseTemplateActors, "UseTemplateActors");
                    }
                    if (printMask?.BleedoutOverride ?? true)
                    {
                        sb.AppendItem(BleedoutOverride, "BleedoutOverride");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if ((printMask?.Factions?.Overall ?? true)
                        && Factions is {} FactionsItem)
                    {
                        sb.AppendLine("Factions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FactionsItem.Overall);
                            if (FactionsItem.Specific != null)
                            {
                                foreach (var subItem in FactionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.DeathItem ?? true)
                    {
                        sb.AppendItem(DeathItem, "DeathItem");
                    }
                    if (printMask?.Voice ?? true)
                    {
                        sb.AppendItem(Voice, "Voice");
                    }
                    if (printMask?.DefaultTemplate ?? true)
                    {
                        sb.AppendItem(DefaultTemplate, "DefaultTemplate");
                    }
                    if (printMask?.LegendaryTemplate ?? true)
                    {
                        sb.AppendItem(LegendaryTemplate, "LegendaryTemplate");
                    }
                    if (printMask?.LegendaryChance ?? true)
                    {
                        sb.AppendItem(LegendaryChance, "LegendaryChance");
                    }
                    if (printMask?.TemplateActors?.Overall ?? true)
                    {
                        TemplateActors?.Print(sb);
                    }
                    if (printMask?.Race ?? true)
                    {
                        sb.AppendItem(Race, "Race");
                    }
                    if ((printMask?.ActorEffect?.Overall ?? true)
                        && ActorEffect is {} ActorEffectItem)
                    {
                        sb.AppendLine("ActorEffect =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorEffectItem.Overall);
                            if (ActorEffectItem.Specific != null)
                            {
                                foreach (var subItem in ActorEffectItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.Print(sb);
                    }
                    if (printMask?.Skin ?? true)
                    {
                        sb.AppendItem(Skin, "Skin");
                    }
                    if (printMask?.FarAwayModel ?? true)
                    {
                        sb.AppendItem(FarAwayModel, "FarAwayModel");
                    }
                    if (printMask?.AttackRace ?? true)
                    {
                        sb.AppendItem(AttackRace, "AttackRace");
                    }
                    if ((printMask?.Attacks?.Overall ?? true)
                        && Attacks is {} AttacksItem)
                    {
                        sb.AppendLine("Attacks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AttacksItem.Overall);
                            if (AttacksItem.Specific != null)
                            {
                                foreach (var subItem in AttacksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SpectatorOverridePackageList ?? true)
                    {
                        sb.AppendItem(SpectatorOverridePackageList, "SpectatorOverridePackageList");
                    }
                    if (printMask?.ObserveDeadBodyOverridePackageList ?? true)
                    {
                        sb.AppendItem(ObserveDeadBodyOverridePackageList, "ObserveDeadBodyOverridePackageList");
                    }
                    if (printMask?.GuardWarnOverridePackageList ?? true)
                    {
                        sb.AppendItem(GuardWarnOverridePackageList, "GuardWarnOverridePackageList");
                    }
                    if (printMask?.CombatOverridePackageList ?? true)
                    {
                        sb.AppendItem(CombatOverridePackageList, "CombatOverridePackageList");
                    }
                    if (printMask?.FollowerCommandPackageList ?? true)
                    {
                        sb.AppendItem(FollowerCommandPackageList, "FollowerCommandPackageList");
                    }
                    if (printMask?.FollowerElevatorPackageList ?? true)
                    {
                        sb.AppendItem(FollowerElevatorPackageList, "FollowerElevatorPackageList");
                    }
                    if ((printMask?.Perks?.Overall ?? true)
                        && Perks is {} PerksItem)
                    {
                        sb.AppendLine("Perks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PerksItem.Overall);
                            if (PerksItem.Specific != null)
                            {
                                foreach (var subItem in PerksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        sb.AppendLine("Properties =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ForcedLocRefType ?? true)
                    {
                        sb.AppendItem(ForcedLocRefType, "ForcedLocRefType");
                    }
                    if (printMask?.NativeTerminal ?? true)
                    {
                        sb.AppendItem(NativeTerminal, "NativeTerminal");
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items is {} ItemsItem)
                    {
                        sb.AppendLine("Items =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Aggression ?? true)
                    {
                        sb.AppendItem(Aggression, "Aggression");
                    }
                    if (printMask?.Confidence ?? true)
                    {
                        sb.AppendItem(Confidence, "Confidence");
                    }
                    if (printMask?.EnergyLevel ?? true)
                    {
                        sb.AppendItem(EnergyLevel, "EnergyLevel");
                    }
                    if (printMask?.Responsibility ?? true)
                    {
                        sb.AppendItem(Responsibility, "Responsibility");
                    }
                    if (printMask?.Mood ?? true)
                    {
                        sb.AppendItem(Mood, "Mood");
                    }
                    if (printMask?.Assistance ?? true)
                    {
                        sb.AppendItem(Assistance, "Assistance");
                    }
                    if (printMask?.AggroRadiusBehaviorEnabled ?? true)
                    {
                        sb.AppendItem(AggroRadiusBehaviorEnabled, "AggroRadiusBehaviorEnabled");
                    }
                    if (printMask?.AggroRadiusWarn ?? true)
                    {
                        sb.AppendItem(AggroRadiusWarn, "AggroRadiusWarn");
                    }
                    if (printMask?.AggroRadiusWarnOrAttack ?? true)
                    {
                        sb.AppendItem(AggroRadiusWarnOrAttack, "AggroRadiusWarnOrAttack");
                    }
                    if (printMask?.AggroRadiusAttack ?? true)
                    {
                        sb.AppendItem(AggroRadiusAttack, "AggroRadiusAttack");
                    }
                    if (printMask?.NoSlowApproach ?? true)
                    {
                        sb.AppendItem(NoSlowApproach, "NoSlowApproach");
                    }
                    if ((printMask?.Packages?.Overall ?? true)
                        && Packages is {} PackagesItem)
                    {
                        sb.AppendLine("Packages =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PackagesItem.Overall);
                            if (PackagesItem.Specific != null)
                            {
                                foreach (var subItem in PackagesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.AttachParentSlots?.Overall ?? true)
                        && AttachParentSlots is {} AttachParentSlotsItem)
                    {
                        sb.AppendLine("AttachParentSlots =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AttachParentSlotsItem.Overall);
                            if (AttachParentSlotsItem.Specific != null)
                            {
                                foreach (var subItem in AttachParentSlotsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ObjectTemplates?.Overall ?? true)
                        && ObjectTemplates is {} ObjectTemplatesItem)
                    {
                        sb.AppendLine("ObjectTemplates =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ObjectTemplatesItem.Overall);
                            if (ObjectTemplatesItem.Specific != null)
                            {
                                foreach (var subItem in ObjectTemplatesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Class ?? true)
                    {
                        sb.AppendItem(Class, "Class");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.ShortName ?? true)
                    {
                        sb.AppendItem(ShortName, "ShortName");
                    }
                    if (printMask?.CalculatedHealth ?? true)
                    {
                        sb.AppendItem(CalculatedHealth, "CalculatedHealth");
                    }
                    if (printMask?.CalculatedActionPoints ?? true)
                    {
                        sb.AppendItem(CalculatedActionPoints, "CalculatedActionPoints");
                    }
                    if (printMask?.FarAwayModelDistance ?? true)
                    {
                        sb.AppendItem(FarAwayModelDistance, "FarAwayModelDistance");
                    }
                    if (printMask?.GearedUpWeapons ?? true)
                    {
                        sb.AppendItem(GearedUpWeapons, "GearedUpWeapons");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        sb.AppendItem(Unused, "Unused");
                    }
                    if ((printMask?.HeadParts?.Overall ?? true)
                        && HeadParts is {} HeadPartsItem)
                    {
                        sb.AppendLine("HeadParts =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(HeadPartsItem.Overall);
                            if (HeadPartsItem.Specific != null)
                            {
                                foreach (var subItem in HeadPartsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.HairColor ?? true)
                    {
                        sb.AppendItem(HairColor, "HairColor");
                    }
                    if (printMask?.FacialHairColor ?? true)
                    {
                        sb.AppendItem(FacialHairColor, "FacialHairColor");
                    }
                    if (printMask?.CombatStyle ?? true)
                    {
                        sb.AppendItem(CombatStyle, "CombatStyle");
                    }
                    if (printMask?.GiftFilter ?? true)
                    {
                        sb.AppendItem(GiftFilter, "GiftFilter");
                    }
                    if (printMask?.NAM5 ?? true)
                    {
                        sb.AppendItem(NAM5, "NAM5");
                    }
                    if (printMask?.HeightMin ?? true)
                    {
                        sb.AppendItem(HeightMin, "HeightMin");
                    }
                    if (printMask?.NAM7 ?? true)
                    {
                        sb.AppendItem(NAM7, "NAM7");
                    }
                    if (printMask?.HeightMax ?? true)
                    {
                        sb.AppendItem(HeightMax, "HeightMax");
                    }
                    if (printMask?.Weight?.Overall ?? true)
                    {
                        Weight?.Print(sb);
                    }
                    if (printMask?.SoundLevel ?? true)
                    {
                        sb.AppendItem(SoundLevel, "SoundLevel");
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds is {} SoundsItem)
                    {
                        sb.AppendLine("Sounds =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SoundsFinalize ?? true)
                    {
                        sb.AppendItem(SoundsFinalize, "SoundsFinalize");
                    }
                    if (printMask?.InheritsSoundsFrom ?? true)
                    {
                        sb.AppendItem(InheritsSoundsFrom, "InheritsSoundsFrom");
                    }
                    if (printMask?.PowerArmorStand ?? true)
                    {
                        sb.AppendItem(PowerArmorStand, "PowerArmorStand");
                    }
                    if (printMask?.DefaultOutfit ?? true)
                    {
                        sb.AppendItem(DefaultOutfit, "DefaultOutfit");
                    }
                    if (printMask?.SleepingOutfit ?? true)
                    {
                        sb.AppendItem(SleepingOutfit, "SleepingOutfit");
                    }
                    if (printMask?.DefaultPackageList ?? true)
                    {
                        sb.AppendItem(DefaultPackageList, "DefaultPackageList");
                    }
                    if (printMask?.CrimeFaction ?? true)
                    {
                        sb.AppendItem(CrimeFaction, "CrimeFaction");
                    }
                    if (printMask?.HeadTexture ?? true)
                    {
                        sb.AppendItem(HeadTexture, "HeadTexture");
                    }
                    if (printMask?.TextureLighting ?? true)
                    {
                        sb.AppendItem(TextureLighting, "TextureLighting");
                    }
                    if ((printMask?.Morphs?.Overall ?? true)
                        && Morphs is {} MorphsItem)
                    {
                        sb.AppendLine("Morphs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MorphsItem.Overall);
                            if (MorphsItem.Specific != null)
                            {
                                foreach (var subItem in MorphsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.FaceTintingLayers?.Overall ?? true)
                        && FaceTintingLayers is {} FaceTintingLayersItem)
                    {
                        sb.AppendLine("FaceTintingLayers =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FaceTintingLayersItem.Overall);
                            if (FaceTintingLayersItem.Specific != null)
                            {
                                foreach (var subItem in FaceTintingLayersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.BodyMorphRegionValues?.Overall ?? true)
                    {
                        BodyMorphRegionValues?.Print(sb);
                    }
                    if ((printMask?.FaceMorphs?.Overall ?? true)
                        && FaceMorphs is {} FaceMorphsItem)
                    {
                        sb.AppendLine("FaceMorphs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FaceMorphsItem.Overall);
                            if (FaceMorphsItem.Specific != null)
                            {
                                foreach (var subItem in FaceMorphsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.FacialMorphIntensity ?? true)
                    {
                        sb.AppendItem(FacialMorphIntensity, "FacialMorphIntensity");
                    }
                    if (printMask?.ActivateTextOverride ?? true)
                    {
                        sb.AppendItem(ActivateTextOverride, "ActivateTextOverride");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? PreviewTransform;
            public Exception? AnimationSound;
            public Exception? Flags;
            public Exception? XpValueOffset;
            public MaskItem<Exception?, ANpcLevel.ErrorMask?>? Level;
            public Exception? CalcMinLevel;
            public Exception? CalcMaxLevel;
            public Exception? DispositionBase;
            public Exception? UseTemplateActors;
            public Exception? BleedoutOverride;
            public Exception? Unknown;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>? Factions;
            public Exception? DeathItem;
            public Exception? Voice;
            public Exception? DefaultTemplate;
            public Exception? LegendaryTemplate;
            public Exception? LegendaryChance;
            public MaskItem<Exception?, TemplateActors.ErrorMask?>? TemplateActors;
            public Exception? Race;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ActorEffect;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? Skin;
            public Exception? FarAwayModel;
            public Exception? AttackRace;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>? Attacks;
            public Exception? SpectatorOverridePackageList;
            public Exception? ObserveDeadBodyOverridePackageList;
            public Exception? GuardWarnOverridePackageList;
            public Exception? CombatOverridePackageList;
            public Exception? FollowerCommandPackageList;
            public Exception? FollowerElevatorPackageList;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkPlacement.ErrorMask?>>?>? Perks;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>? Properties;
            public Exception? ForcedLocRefType;
            public Exception? NativeTerminal;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>? Items;
            public Exception? Aggression;
            public Exception? Confidence;
            public Exception? EnergyLevel;
            public Exception? Responsibility;
            public Exception? Mood;
            public Exception? Assistance;
            public Exception? AggroRadiusBehaviorEnabled;
            public Exception? AggroRadiusWarn;
            public Exception? AggroRadiusWarnOrAttack;
            public Exception? AggroRadiusAttack;
            public Exception? NoSlowApproach;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Packages;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AttachParentSlots;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>? ObjectTemplates;
            public Exception? Class;
            public Exception? Name;
            public Exception? ShortName;
            public Exception? CalculatedHealth;
            public Exception? CalculatedActionPoints;
            public Exception? FarAwayModelDistance;
            public Exception? GearedUpWeapons;
            public Exception? Unused;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? HeadParts;
            public Exception? HairColor;
            public Exception? FacialHairColor;
            public Exception? CombatStyle;
            public Exception? GiftFilter;
            public Exception? NAM5;
            public Exception? HeightMin;
            public Exception? NAM7;
            public Exception? HeightMax;
            public MaskItem<Exception?, NpcWeight.ErrorMask?>? Weight;
            public Exception? SoundLevel;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcSound.ErrorMask?>>?>? Sounds;
            public Exception? SoundsFinalize;
            public Exception? InheritsSoundsFrom;
            public Exception? PowerArmorStand;
            public Exception? DefaultOutfit;
            public Exception? SleepingOutfit;
            public Exception? DefaultPackageList;
            public Exception? CrimeFaction;
            public Exception? HeadTexture;
            public Exception? TextureLighting;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcMorph.ErrorMask?>>?>? Morphs;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcFaceTintingLayer.ErrorMask?>>?>? FaceTintingLayers;
            public MaskItem<Exception?, NpcBodyMorphRegionValues.ErrorMask?>? BodyMorphRegionValues;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcFaceMorph.ErrorMask?>>?>? FaceMorphs;
            public Exception? FacialMorphIntensity;
            public Exception? ActivateTextOverride;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Npc_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Npc_FieldIndex.PreviewTransform:
                        return PreviewTransform;
                    case Npc_FieldIndex.AnimationSound:
                        return AnimationSound;
                    case Npc_FieldIndex.Flags:
                        return Flags;
                    case Npc_FieldIndex.XpValueOffset:
                        return XpValueOffset;
                    case Npc_FieldIndex.Level:
                        return Level;
                    case Npc_FieldIndex.CalcMinLevel:
                        return CalcMinLevel;
                    case Npc_FieldIndex.CalcMaxLevel:
                        return CalcMaxLevel;
                    case Npc_FieldIndex.DispositionBase:
                        return DispositionBase;
                    case Npc_FieldIndex.UseTemplateActors:
                        return UseTemplateActors;
                    case Npc_FieldIndex.BleedoutOverride:
                        return BleedoutOverride;
                    case Npc_FieldIndex.Unknown:
                        return Unknown;
                    case Npc_FieldIndex.Factions:
                        return Factions;
                    case Npc_FieldIndex.DeathItem:
                        return DeathItem;
                    case Npc_FieldIndex.Voice:
                        return Voice;
                    case Npc_FieldIndex.DefaultTemplate:
                        return DefaultTemplate;
                    case Npc_FieldIndex.LegendaryTemplate:
                        return LegendaryTemplate;
                    case Npc_FieldIndex.LegendaryChance:
                        return LegendaryChance;
                    case Npc_FieldIndex.TemplateActors:
                        return TemplateActors;
                    case Npc_FieldIndex.Race:
                        return Race;
                    case Npc_FieldIndex.ActorEffect:
                        return ActorEffect;
                    case Npc_FieldIndex.Destructible:
                        return Destructible;
                    case Npc_FieldIndex.Skin:
                        return Skin;
                    case Npc_FieldIndex.FarAwayModel:
                        return FarAwayModel;
                    case Npc_FieldIndex.AttackRace:
                        return AttackRace;
                    case Npc_FieldIndex.Attacks:
                        return Attacks;
                    case Npc_FieldIndex.SpectatorOverridePackageList:
                        return SpectatorOverridePackageList;
                    case Npc_FieldIndex.ObserveDeadBodyOverridePackageList:
                        return ObserveDeadBodyOverridePackageList;
                    case Npc_FieldIndex.GuardWarnOverridePackageList:
                        return GuardWarnOverridePackageList;
                    case Npc_FieldIndex.CombatOverridePackageList:
                        return CombatOverridePackageList;
                    case Npc_FieldIndex.FollowerCommandPackageList:
                        return FollowerCommandPackageList;
                    case Npc_FieldIndex.FollowerElevatorPackageList:
                        return FollowerElevatorPackageList;
                    case Npc_FieldIndex.Perks:
                        return Perks;
                    case Npc_FieldIndex.Properties:
                        return Properties;
                    case Npc_FieldIndex.ForcedLocRefType:
                        return ForcedLocRefType;
                    case Npc_FieldIndex.NativeTerminal:
                        return NativeTerminal;
                    case Npc_FieldIndex.Items:
                        return Items;
                    case Npc_FieldIndex.Aggression:
                        return Aggression;
                    case Npc_FieldIndex.Confidence:
                        return Confidence;
                    case Npc_FieldIndex.EnergyLevel:
                        return EnergyLevel;
                    case Npc_FieldIndex.Responsibility:
                        return Responsibility;
                    case Npc_FieldIndex.Mood:
                        return Mood;
                    case Npc_FieldIndex.Assistance:
                        return Assistance;
                    case Npc_FieldIndex.AggroRadiusBehaviorEnabled:
                        return AggroRadiusBehaviorEnabled;
                    case Npc_FieldIndex.AggroRadiusWarn:
                        return AggroRadiusWarn;
                    case Npc_FieldIndex.AggroRadiusWarnOrAttack:
                        return AggroRadiusWarnOrAttack;
                    case Npc_FieldIndex.AggroRadiusAttack:
                        return AggroRadiusAttack;
                    case Npc_FieldIndex.NoSlowApproach:
                        return NoSlowApproach;
                    case Npc_FieldIndex.Packages:
                        return Packages;
                    case Npc_FieldIndex.Keywords:
                        return Keywords;
                    case Npc_FieldIndex.AttachParentSlots:
                        return AttachParentSlots;
                    case Npc_FieldIndex.ObjectTemplates:
                        return ObjectTemplates;
                    case Npc_FieldIndex.Class:
                        return Class;
                    case Npc_FieldIndex.Name:
                        return Name;
                    case Npc_FieldIndex.ShortName:
                        return ShortName;
                    case Npc_FieldIndex.CalculatedHealth:
                        return CalculatedHealth;
                    case Npc_FieldIndex.CalculatedActionPoints:
                        return CalculatedActionPoints;
                    case Npc_FieldIndex.FarAwayModelDistance:
                        return FarAwayModelDistance;
                    case Npc_FieldIndex.GearedUpWeapons:
                        return GearedUpWeapons;
                    case Npc_FieldIndex.Unused:
                        return Unused;
                    case Npc_FieldIndex.HeadParts:
                        return HeadParts;
                    case Npc_FieldIndex.HairColor:
                        return HairColor;
                    case Npc_FieldIndex.FacialHairColor:
                        return FacialHairColor;
                    case Npc_FieldIndex.CombatStyle:
                        return CombatStyle;
                    case Npc_FieldIndex.GiftFilter:
                        return GiftFilter;
                    case Npc_FieldIndex.NAM5:
                        return NAM5;
                    case Npc_FieldIndex.HeightMin:
                        return HeightMin;
                    case Npc_FieldIndex.NAM7:
                        return NAM7;
                    case Npc_FieldIndex.HeightMax:
                        return HeightMax;
                    case Npc_FieldIndex.Weight:
                        return Weight;
                    case Npc_FieldIndex.SoundLevel:
                        return SoundLevel;
                    case Npc_FieldIndex.Sounds:
                        return Sounds;
                    case Npc_FieldIndex.SoundsFinalize:
                        return SoundsFinalize;
                    case Npc_FieldIndex.InheritsSoundsFrom:
                        return InheritsSoundsFrom;
                    case Npc_FieldIndex.PowerArmorStand:
                        return PowerArmorStand;
                    case Npc_FieldIndex.DefaultOutfit:
                        return DefaultOutfit;
                    case Npc_FieldIndex.SleepingOutfit:
                        return SleepingOutfit;
                    case Npc_FieldIndex.DefaultPackageList:
                        return DefaultPackageList;
                    case Npc_FieldIndex.CrimeFaction:
                        return CrimeFaction;
                    case Npc_FieldIndex.HeadTexture:
                        return HeadTexture;
                    case Npc_FieldIndex.TextureLighting:
                        return TextureLighting;
                    case Npc_FieldIndex.Morphs:
                        return Morphs;
                    case Npc_FieldIndex.FaceTintingLayers:
                        return FaceTintingLayers;
                    case Npc_FieldIndex.BodyMorphRegionValues:
                        return BodyMorphRegionValues;
                    case Npc_FieldIndex.FaceMorphs:
                        return FaceMorphs;
                    case Npc_FieldIndex.FacialMorphIntensity:
                        return FacialMorphIntensity;
                    case Npc_FieldIndex.ActivateTextOverride:
                        return ActivateTextOverride;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.PreviewTransform:
                        this.PreviewTransform = ex;
                        break;
                    case Npc_FieldIndex.AnimationSound:
                        this.AnimationSound = ex;
                        break;
                    case Npc_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Npc_FieldIndex.XpValueOffset:
                        this.XpValueOffset = ex;
                        break;
                    case Npc_FieldIndex.Level:
                        this.Level = new MaskItem<Exception?, ANpcLevel.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.CalcMinLevel:
                        this.CalcMinLevel = ex;
                        break;
                    case Npc_FieldIndex.CalcMaxLevel:
                        this.CalcMaxLevel = ex;
                        break;
                    case Npc_FieldIndex.DispositionBase:
                        this.DispositionBase = ex;
                        break;
                    case Npc_FieldIndex.UseTemplateActors:
                        this.UseTemplateActors = ex;
                        break;
                    case Npc_FieldIndex.BleedoutOverride:
                        this.BleedoutOverride = ex;
                        break;
                    case Npc_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Npc_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.DeathItem:
                        this.DeathItem = ex;
                        break;
                    case Npc_FieldIndex.Voice:
                        this.Voice = ex;
                        break;
                    case Npc_FieldIndex.DefaultTemplate:
                        this.DefaultTemplate = ex;
                        break;
                    case Npc_FieldIndex.LegendaryTemplate:
                        this.LegendaryTemplate = ex;
                        break;
                    case Npc_FieldIndex.LegendaryChance:
                        this.LegendaryChance = ex;
                        break;
                    case Npc_FieldIndex.TemplateActors:
                        this.TemplateActors = new MaskItem<Exception?, TemplateActors.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Race:
                        this.Race = ex;
                        break;
                    case Npc_FieldIndex.ActorEffect:
                        this.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Skin:
                        this.Skin = ex;
                        break;
                    case Npc_FieldIndex.FarAwayModel:
                        this.FarAwayModel = ex;
                        break;
                    case Npc_FieldIndex.AttackRace:
                        this.AttackRace = ex;
                        break;
                    case Npc_FieldIndex.Attacks:
                        this.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.SpectatorOverridePackageList:
                        this.SpectatorOverridePackageList = ex;
                        break;
                    case Npc_FieldIndex.ObserveDeadBodyOverridePackageList:
                        this.ObserveDeadBodyOverridePackageList = ex;
                        break;
                    case Npc_FieldIndex.GuardWarnOverridePackageList:
                        this.GuardWarnOverridePackageList = ex;
                        break;
                    case Npc_FieldIndex.CombatOverridePackageList:
                        this.CombatOverridePackageList = ex;
                        break;
                    case Npc_FieldIndex.FollowerCommandPackageList:
                        this.FollowerCommandPackageList = ex;
                        break;
                    case Npc_FieldIndex.FollowerElevatorPackageList:
                        this.FollowerElevatorPackageList = ex;
                        break;
                    case Npc_FieldIndex.Perks:
                        this.Perks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.ForcedLocRefType:
                        this.ForcedLocRefType = ex;
                        break;
                    case Npc_FieldIndex.NativeTerminal:
                        this.NativeTerminal = ex;
                        break;
                    case Npc_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Aggression:
                        this.Aggression = ex;
                        break;
                    case Npc_FieldIndex.Confidence:
                        this.Confidence = ex;
                        break;
                    case Npc_FieldIndex.EnergyLevel:
                        this.EnergyLevel = ex;
                        break;
                    case Npc_FieldIndex.Responsibility:
                        this.Responsibility = ex;
                        break;
                    case Npc_FieldIndex.Mood:
                        this.Mood = ex;
                        break;
                    case Npc_FieldIndex.Assistance:
                        this.Assistance = ex;
                        break;
                    case Npc_FieldIndex.AggroRadiusBehaviorEnabled:
                        this.AggroRadiusBehaviorEnabled = ex;
                        break;
                    case Npc_FieldIndex.AggroRadiusWarn:
                        this.AggroRadiusWarn = ex;
                        break;
                    case Npc_FieldIndex.AggroRadiusWarnOrAttack:
                        this.AggroRadiusWarnOrAttack = ex;
                        break;
                    case Npc_FieldIndex.AggroRadiusAttack:
                        this.AggroRadiusAttack = ex;
                        break;
                    case Npc_FieldIndex.NoSlowApproach:
                        this.NoSlowApproach = ex;
                        break;
                    case Npc_FieldIndex.Packages:
                        this.Packages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.AttachParentSlots:
                        this.AttachParentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.ObjectTemplates:
                        this.ObjectTemplates = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Class:
                        this.Class = ex;
                        break;
                    case Npc_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Npc_FieldIndex.ShortName:
                        this.ShortName = ex;
                        break;
                    case Npc_FieldIndex.CalculatedHealth:
                        this.CalculatedHealth = ex;
                        break;
                    case Npc_FieldIndex.CalculatedActionPoints:
                        this.CalculatedActionPoints = ex;
                        break;
                    case Npc_FieldIndex.FarAwayModelDistance:
                        this.FarAwayModelDistance = ex;
                        break;
                    case Npc_FieldIndex.GearedUpWeapons:
                        this.GearedUpWeapons = ex;
                        break;
                    case Npc_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    case Npc_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.HairColor:
                        this.HairColor = ex;
                        break;
                    case Npc_FieldIndex.FacialHairColor:
                        this.FacialHairColor = ex;
                        break;
                    case Npc_FieldIndex.CombatStyle:
                        this.CombatStyle = ex;
                        break;
                    case Npc_FieldIndex.GiftFilter:
                        this.GiftFilter = ex;
                        break;
                    case Npc_FieldIndex.NAM5:
                        this.NAM5 = ex;
                        break;
                    case Npc_FieldIndex.HeightMin:
                        this.HeightMin = ex;
                        break;
                    case Npc_FieldIndex.NAM7:
                        this.NAM7 = ex;
                        break;
                    case Npc_FieldIndex.HeightMax:
                        this.HeightMax = ex;
                        break;
                    case Npc_FieldIndex.Weight:
                        this.Weight = new MaskItem<Exception?, NpcWeight.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.SoundLevel:
                        this.SoundLevel = ex;
                        break;
                    case Npc_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcSound.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.SoundsFinalize:
                        this.SoundsFinalize = ex;
                        break;
                    case Npc_FieldIndex.InheritsSoundsFrom:
                        this.InheritsSoundsFrom = ex;
                        break;
                    case Npc_FieldIndex.PowerArmorStand:
                        this.PowerArmorStand = ex;
                        break;
                    case Npc_FieldIndex.DefaultOutfit:
                        this.DefaultOutfit = ex;
                        break;
                    case Npc_FieldIndex.SleepingOutfit:
                        this.SleepingOutfit = ex;
                        break;
                    case Npc_FieldIndex.DefaultPackageList:
                        this.DefaultPackageList = ex;
                        break;
                    case Npc_FieldIndex.CrimeFaction:
                        this.CrimeFaction = ex;
                        break;
                    case Npc_FieldIndex.HeadTexture:
                        this.HeadTexture = ex;
                        break;
                    case Npc_FieldIndex.TextureLighting:
                        this.TextureLighting = ex;
                        break;
                    case Npc_FieldIndex.Morphs:
                        this.Morphs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcMorph.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.FaceTintingLayers:
                        this.FaceTintingLayers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcFaceTintingLayer.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.BodyMorphRegionValues:
                        this.BodyMorphRegionValues = new MaskItem<Exception?, NpcBodyMorphRegionValues.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.FaceMorphs:
                        this.FaceMorphs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcFaceMorph.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.FacialMorphIntensity:
                        this.FacialMorphIntensity = ex;
                        break;
                    case Npc_FieldIndex.ActivateTextOverride:
                        this.ActivateTextOverride = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.PreviewTransform:
                        this.PreviewTransform = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.AnimationSound:
                        this.AnimationSound = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.XpValueOffset:
                        this.XpValueOffset = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Level:
                        this.Level = (MaskItem<Exception?, ANpcLevel.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.CalcMinLevel:
                        this.CalcMinLevel = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CalcMaxLevel:
                        this.CalcMaxLevel = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.DispositionBase:
                        this.DispositionBase = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.UseTemplateActors:
                        this.UseTemplateActors = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.BleedoutOverride:
                        this.BleedoutOverride = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.DeathItem:
                        this.DeathItem = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Voice:
                        this.Voice = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.DefaultTemplate:
                        this.DefaultTemplate = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.LegendaryTemplate:
                        this.LegendaryTemplate = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.LegendaryChance:
                        this.LegendaryChance = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.TemplateActors:
                        this.TemplateActors = (MaskItem<Exception?, TemplateActors.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Race:
                        this.Race = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.ActorEffect:
                        this.ActorEffect = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Skin:
                        this.Skin = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FarAwayModel:
                        this.FarAwayModel = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.AttackRace:
                        this.AttackRace = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Attacks:
                        this.Attacks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.SpectatorOverridePackageList:
                        this.SpectatorOverridePackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.ObserveDeadBodyOverridePackageList:
                        this.ObserveDeadBodyOverridePackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.GuardWarnOverridePackageList:
                        this.GuardWarnOverridePackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CombatOverridePackageList:
                        this.CombatOverridePackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FollowerCommandPackageList:
                        this.FollowerCommandPackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FollowerElevatorPackageList:
                        this.FollowerElevatorPackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Perks:
                        this.Perks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkPlacement.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.ForcedLocRefType:
                        this.ForcedLocRefType = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.NativeTerminal:
                        this.NativeTerminal = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.Aggression:
                        this.Aggression = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Confidence:
                        this.Confidence = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.EnergyLevel:
                        this.EnergyLevel = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Responsibility:
                        this.Responsibility = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Mood:
                        this.Mood = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Assistance:
                        this.Assistance = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.AggroRadiusBehaviorEnabled:
                        this.AggroRadiusBehaviorEnabled = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.AggroRadiusWarn:
                        this.AggroRadiusWarn = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.AggroRadiusWarnOrAttack:
                        this.AggroRadiusWarnOrAttack = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.AggroRadiusAttack:
                        this.AggroRadiusAttack = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.NoSlowApproach:
                        this.NoSlowApproach = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Packages:
                        this.Packages = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.AttachParentSlots:
                        this.AttachParentSlots = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.ObjectTemplates:
                        this.ObjectTemplates = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.Class:
                        this.Class = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.ShortName:
                        this.ShortName = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CalculatedHealth:
                        this.CalculatedHealth = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CalculatedActionPoints:
                        this.CalculatedActionPoints = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FarAwayModelDistance:
                        this.FarAwayModelDistance = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.GearedUpWeapons:
                        this.GearedUpWeapons = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.HairColor:
                        this.HairColor = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FacialHairColor:
                        this.FacialHairColor = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CombatStyle:
                        this.CombatStyle = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.GiftFilter:
                        this.GiftFilter = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.NAM5:
                        this.NAM5 = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.HeightMin:
                        this.HeightMin = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.NAM7:
                        this.NAM7 = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.HeightMax:
                        this.HeightMax = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Weight:
                        this.Weight = (MaskItem<Exception?, NpcWeight.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.SoundLevel:
                        this.SoundLevel = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcSound.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.SoundsFinalize:
                        this.SoundsFinalize = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.InheritsSoundsFrom:
                        this.InheritsSoundsFrom = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.PowerArmorStand:
                        this.PowerArmorStand = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.DefaultOutfit:
                        this.DefaultOutfit = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.SleepingOutfit:
                        this.SleepingOutfit = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.DefaultPackageList:
                        this.DefaultPackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CrimeFaction:
                        this.CrimeFaction = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.HeadTexture:
                        this.HeadTexture = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.TextureLighting:
                        this.TextureLighting = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Morphs:
                        this.Morphs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcMorph.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.FaceTintingLayers:
                        this.FaceTintingLayers = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcFaceTintingLayer.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.BodyMorphRegionValues:
                        this.BodyMorphRegionValues = (MaskItem<Exception?, NpcBodyMorphRegionValues.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.FaceMorphs:
                        this.FaceMorphs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcFaceMorph.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.FacialMorphIntensity:
                        this.FacialMorphIntensity = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.ActivateTextOverride:
                        this.ActivateTextOverride = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (PreviewTransform != null) return true;
                if (AnimationSound != null) return true;
                if (Flags != null) return true;
                if (XpValueOffset != null) return true;
                if (Level != null) return true;
                if (CalcMinLevel != null) return true;
                if (CalcMaxLevel != null) return true;
                if (DispositionBase != null) return true;
                if (UseTemplateActors != null) return true;
                if (BleedoutOverride != null) return true;
                if (Unknown != null) return true;
                if (Factions != null) return true;
                if (DeathItem != null) return true;
                if (Voice != null) return true;
                if (DefaultTemplate != null) return true;
                if (LegendaryTemplate != null) return true;
                if (LegendaryChance != null) return true;
                if (TemplateActors != null) return true;
                if (Race != null) return true;
                if (ActorEffect != null) return true;
                if (Destructible != null) return true;
                if (Skin != null) return true;
                if (FarAwayModel != null) return true;
                if (AttackRace != null) return true;
                if (Attacks != null) return true;
                if (SpectatorOverridePackageList != null) return true;
                if (ObserveDeadBodyOverridePackageList != null) return true;
                if (GuardWarnOverridePackageList != null) return true;
                if (CombatOverridePackageList != null) return true;
                if (FollowerCommandPackageList != null) return true;
                if (FollowerElevatorPackageList != null) return true;
                if (Perks != null) return true;
                if (Properties != null) return true;
                if (ForcedLocRefType != null) return true;
                if (NativeTerminal != null) return true;
                if (Items != null) return true;
                if (Aggression != null) return true;
                if (Confidence != null) return true;
                if (EnergyLevel != null) return true;
                if (Responsibility != null) return true;
                if (Mood != null) return true;
                if (Assistance != null) return true;
                if (AggroRadiusBehaviorEnabled != null) return true;
                if (AggroRadiusWarn != null) return true;
                if (AggroRadiusWarnOrAttack != null) return true;
                if (AggroRadiusAttack != null) return true;
                if (NoSlowApproach != null) return true;
                if (Packages != null) return true;
                if (Keywords != null) return true;
                if (AttachParentSlots != null) return true;
                if (ObjectTemplates != null) return true;
                if (Class != null) return true;
                if (Name != null) return true;
                if (ShortName != null) return true;
                if (CalculatedHealth != null) return true;
                if (CalculatedActionPoints != null) return true;
                if (FarAwayModelDistance != null) return true;
                if (GearedUpWeapons != null) return true;
                if (Unused != null) return true;
                if (HeadParts != null) return true;
                if (HairColor != null) return true;
                if (FacialHairColor != null) return true;
                if (CombatStyle != null) return true;
                if (GiftFilter != null) return true;
                if (NAM5 != null) return true;
                if (HeightMin != null) return true;
                if (NAM7 != null) return true;
                if (HeightMax != null) return true;
                if (Weight != null) return true;
                if (SoundLevel != null) return true;
                if (Sounds != null) return true;
                if (SoundsFinalize != null) return true;
                if (InheritsSoundsFrom != null) return true;
                if (PowerArmorStand != null) return true;
                if (DefaultOutfit != null) return true;
                if (SleepingOutfit != null) return true;
                if (DefaultPackageList != null) return true;
                if (CrimeFaction != null) return true;
                if (HeadTexture != null) return true;
                if (TextureLighting != null) return true;
                if (Morphs != null) return true;
                if (FaceTintingLayers != null) return true;
                if (BodyMorphRegionValues != null) return true;
                if (FaceMorphs != null) return true;
                if (FacialMorphIntensity != null) return true;
                if (ActivateTextOverride != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(PreviewTransform, "PreviewTransform");
                }
                {
                    sb.AppendItem(AnimationSound, "AnimationSound");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(XpValueOffset, "XpValueOffset");
                }
                Level?.Print(sb);
                {
                    sb.AppendItem(CalcMinLevel, "CalcMinLevel");
                }
                {
                    sb.AppendItem(CalcMaxLevel, "CalcMaxLevel");
                }
                {
                    sb.AppendItem(DispositionBase, "DispositionBase");
                }
                {
                    sb.AppendItem(UseTemplateActors, "UseTemplateActors");
                }
                {
                    sb.AppendItem(BleedoutOverride, "BleedoutOverride");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                if (Factions is {} FactionsItem)
                {
                    sb.AppendLine("Factions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FactionsItem.Overall);
                        if (FactionsItem.Specific != null)
                        {
                            foreach (var subItem in FactionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(DeathItem, "DeathItem");
                }
                {
                    sb.AppendItem(Voice, "Voice");
                }
                {
                    sb.AppendItem(DefaultTemplate, "DefaultTemplate");
                }
                {
                    sb.AppendItem(LegendaryTemplate, "LegendaryTemplate");
                }
                {
                    sb.AppendItem(LegendaryChance, "LegendaryChance");
                }
                TemplateActors?.Print(sb);
                {
                    sb.AppendItem(Race, "Race");
                }
                if (ActorEffect is {} ActorEffectItem)
                {
                    sb.AppendLine("ActorEffect =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorEffectItem.Overall);
                        if (ActorEffectItem.Specific != null)
                        {
                            foreach (var subItem in ActorEffectItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                Destructible?.Print(sb);
                {
                    sb.AppendItem(Skin, "Skin");
                }
                {
                    sb.AppendItem(FarAwayModel, "FarAwayModel");
                }
                {
                    sb.AppendItem(AttackRace, "AttackRace");
                }
                if (Attacks is {} AttacksItem)
                {
                    sb.AppendLine("Attacks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AttacksItem.Overall);
                        if (AttacksItem.Specific != null)
                        {
                            foreach (var subItem in AttacksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(SpectatorOverridePackageList, "SpectatorOverridePackageList");
                }
                {
                    sb.AppendItem(ObserveDeadBodyOverridePackageList, "ObserveDeadBodyOverridePackageList");
                }
                {
                    sb.AppendItem(GuardWarnOverridePackageList, "GuardWarnOverridePackageList");
                }
                {
                    sb.AppendItem(CombatOverridePackageList, "CombatOverridePackageList");
                }
                {
                    sb.AppendItem(FollowerCommandPackageList, "FollowerCommandPackageList");
                }
                {
                    sb.AppendItem(FollowerElevatorPackageList, "FollowerElevatorPackageList");
                }
                if (Perks is {} PerksItem)
                {
                    sb.AppendLine("Perks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PerksItem.Overall);
                        if (PerksItem.Specific != null)
                        {
                            foreach (var subItem in PerksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Properties is {} PropertiesItem)
                {
                    sb.AppendLine("Properties =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ForcedLocRefType, "ForcedLocRefType");
                }
                {
                    sb.AppendItem(NativeTerminal, "NativeTerminal");
                }
                if (Items is {} ItemsItem)
                {
                    sb.AppendLine("Items =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Aggression, "Aggression");
                }
                {
                    sb.AppendItem(Confidence, "Confidence");
                }
                {
                    sb.AppendItem(EnergyLevel, "EnergyLevel");
                }
                {
                    sb.AppendItem(Responsibility, "Responsibility");
                }
                {
                    sb.AppendItem(Mood, "Mood");
                }
                {
                    sb.AppendItem(Assistance, "Assistance");
                }
                {
                    sb.AppendItem(AggroRadiusBehaviorEnabled, "AggroRadiusBehaviorEnabled");
                }
                {
                    sb.AppendItem(AggroRadiusWarn, "AggroRadiusWarn");
                }
                {
                    sb.AppendItem(AggroRadiusWarnOrAttack, "AggroRadiusWarnOrAttack");
                }
                {
                    sb.AppendItem(AggroRadiusAttack, "AggroRadiusAttack");
                }
                {
                    sb.AppendItem(NoSlowApproach, "NoSlowApproach");
                }
                if (Packages is {} PackagesItem)
                {
                    sb.AppendLine("Packages =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PackagesItem.Overall);
                        if (PackagesItem.Specific != null)
                        {
                            foreach (var subItem in PackagesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (AttachParentSlots is {} AttachParentSlotsItem)
                {
                    sb.AppendLine("AttachParentSlots =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AttachParentSlotsItem.Overall);
                        if (AttachParentSlotsItem.Specific != null)
                        {
                            foreach (var subItem in AttachParentSlotsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (ObjectTemplates is {} ObjectTemplatesItem)
                {
                    sb.AppendLine("ObjectTemplates =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ObjectTemplatesItem.Overall);
                        if (ObjectTemplatesItem.Specific != null)
                        {
                            foreach (var subItem in ObjectTemplatesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Class, "Class");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(ShortName, "ShortName");
                }
                {
                    sb.AppendItem(CalculatedHealth, "CalculatedHealth");
                }
                {
                    sb.AppendItem(CalculatedActionPoints, "CalculatedActionPoints");
                }
                {
                    sb.AppendItem(FarAwayModelDistance, "FarAwayModelDistance");
                }
                {
                    sb.AppendItem(GearedUpWeapons, "GearedUpWeapons");
                }
                {
                    sb.AppendItem(Unused, "Unused");
                }
                if (HeadParts is {} HeadPartsItem)
                {
                    sb.AppendLine("HeadParts =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(HeadPartsItem.Overall);
                        if (HeadPartsItem.Specific != null)
                        {
                            foreach (var subItem in HeadPartsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(HairColor, "HairColor");
                }
                {
                    sb.AppendItem(FacialHairColor, "FacialHairColor");
                }
                {
                    sb.AppendItem(CombatStyle, "CombatStyle");
                }
                {
                    sb.AppendItem(GiftFilter, "GiftFilter");
                }
                {
                    sb.AppendItem(NAM5, "NAM5");
                }
                {
                    sb.AppendItem(HeightMin, "HeightMin");
                }
                {
                    sb.AppendItem(NAM7, "NAM7");
                }
                {
                    sb.AppendItem(HeightMax, "HeightMax");
                }
                Weight?.Print(sb);
                {
                    sb.AppendItem(SoundLevel, "SoundLevel");
                }
                if (Sounds is {} SoundsItem)
                {
                    sb.AppendLine("Sounds =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(SoundsFinalize, "SoundsFinalize");
                }
                {
                    sb.AppendItem(InheritsSoundsFrom, "InheritsSoundsFrom");
                }
                {
                    sb.AppendItem(PowerArmorStand, "PowerArmorStand");
                }
                {
                    sb.AppendItem(DefaultOutfit, "DefaultOutfit");
                }
                {
                    sb.AppendItem(SleepingOutfit, "SleepingOutfit");
                }
                {
                    sb.AppendItem(DefaultPackageList, "DefaultPackageList");
                }
                {
                    sb.AppendItem(CrimeFaction, "CrimeFaction");
                }
                {
                    sb.AppendItem(HeadTexture, "HeadTexture");
                }
                {
                    sb.AppendItem(TextureLighting, "TextureLighting");
                }
                if (Morphs is {} MorphsItem)
                {
                    sb.AppendLine("Morphs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MorphsItem.Overall);
                        if (MorphsItem.Specific != null)
                        {
                            foreach (var subItem in MorphsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (FaceTintingLayers is {} FaceTintingLayersItem)
                {
                    sb.AppendLine("FaceTintingLayers =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FaceTintingLayersItem.Overall);
                        if (FaceTintingLayersItem.Specific != null)
                        {
                            foreach (var subItem in FaceTintingLayersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                BodyMorphRegionValues?.Print(sb);
                if (FaceMorphs is {} FaceMorphsItem)
                {
                    sb.AppendLine("FaceMorphs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FaceMorphsItem.Overall);
                        if (FaceMorphsItem.Specific != null)
                        {
                            foreach (var subItem in FaceMorphsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(FacialMorphIntensity, "FacialMorphIntensity");
                }
                {
                    sb.AppendItem(ActivateTextOverride, "ActivateTextOverride");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.PreviewTransform = this.PreviewTransform.Combine(rhs.PreviewTransform);
                ret.AnimationSound = this.AnimationSound.Combine(rhs.AnimationSound);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.XpValueOffset = this.XpValueOffset.Combine(rhs.XpValueOffset);
                ret.Level = this.Level.Combine(rhs.Level, (l, r) => l.Combine(r));
                ret.CalcMinLevel = this.CalcMinLevel.Combine(rhs.CalcMinLevel);
                ret.CalcMaxLevel = this.CalcMaxLevel.Combine(rhs.CalcMaxLevel);
                ret.DispositionBase = this.DispositionBase.Combine(rhs.DispositionBase);
                ret.UseTemplateActors = this.UseTemplateActors.Combine(rhs.UseTemplateActors);
                ret.BleedoutOverride = this.BleedoutOverride.Combine(rhs.BleedoutOverride);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), Noggog.ExceptionExt.Combine(this.Factions?.Specific, rhs.Factions?.Specific));
                ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
                ret.Voice = this.Voice.Combine(rhs.Voice);
                ret.DefaultTemplate = this.DefaultTemplate.Combine(rhs.DefaultTemplate);
                ret.LegendaryTemplate = this.LegendaryTemplate.Combine(rhs.LegendaryTemplate);
                ret.LegendaryChance = this.LegendaryChance.Combine(rhs.LegendaryChance);
                ret.TemplateActors = this.TemplateActors.Combine(rhs.TemplateActors, (l, r) => l.Combine(r));
                ret.Race = this.Race.Combine(rhs.Race);
                ret.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ActorEffect?.Overall, rhs.ActorEffect?.Overall), Noggog.ExceptionExt.Combine(this.ActorEffect?.Specific, rhs.ActorEffect?.Specific));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Skin = this.Skin.Combine(rhs.Skin);
                ret.FarAwayModel = this.FarAwayModel.Combine(rhs.FarAwayModel);
                ret.AttackRace = this.AttackRace.Combine(rhs.AttackRace);
                ret.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Attacks?.Overall, rhs.Attacks?.Overall), Noggog.ExceptionExt.Combine(this.Attacks?.Specific, rhs.Attacks?.Specific));
                ret.SpectatorOverridePackageList = this.SpectatorOverridePackageList.Combine(rhs.SpectatorOverridePackageList);
                ret.ObserveDeadBodyOverridePackageList = this.ObserveDeadBodyOverridePackageList.Combine(rhs.ObserveDeadBodyOverridePackageList);
                ret.GuardWarnOverridePackageList = this.GuardWarnOverridePackageList.Combine(rhs.GuardWarnOverridePackageList);
                ret.CombatOverridePackageList = this.CombatOverridePackageList.Combine(rhs.CombatOverridePackageList);
                ret.FollowerCommandPackageList = this.FollowerCommandPackageList.Combine(rhs.FollowerCommandPackageList);
                ret.FollowerElevatorPackageList = this.FollowerElevatorPackageList.Combine(rhs.FollowerElevatorPackageList);
                ret.Perks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkPlacement.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Perks?.Overall, rhs.Perks?.Overall), Noggog.ExceptionExt.Combine(this.Perks?.Specific, rhs.Perks?.Specific));
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), Noggog.ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                ret.ForcedLocRefType = this.ForcedLocRefType.Combine(rhs.ForcedLocRefType);
                ret.NativeTerminal = this.NativeTerminal.Combine(rhs.NativeTerminal);
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), Noggog.ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.Aggression = this.Aggression.Combine(rhs.Aggression);
                ret.Confidence = this.Confidence.Combine(rhs.Confidence);
                ret.EnergyLevel = this.EnergyLevel.Combine(rhs.EnergyLevel);
                ret.Responsibility = this.Responsibility.Combine(rhs.Responsibility);
                ret.Mood = this.Mood.Combine(rhs.Mood);
                ret.Assistance = this.Assistance.Combine(rhs.Assistance);
                ret.AggroRadiusBehaviorEnabled = this.AggroRadiusBehaviorEnabled.Combine(rhs.AggroRadiusBehaviorEnabled);
                ret.AggroRadiusWarn = this.AggroRadiusWarn.Combine(rhs.AggroRadiusWarn);
                ret.AggroRadiusWarnOrAttack = this.AggroRadiusWarnOrAttack.Combine(rhs.AggroRadiusWarnOrAttack);
                ret.AggroRadiusAttack = this.AggroRadiusAttack.Combine(rhs.AggroRadiusAttack);
                ret.NoSlowApproach = this.NoSlowApproach.Combine(rhs.NoSlowApproach);
                ret.Packages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Packages?.Overall, rhs.Packages?.Overall), Noggog.ExceptionExt.Combine(this.Packages?.Specific, rhs.Packages?.Specific));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.AttachParentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.AttachParentSlots?.Overall, rhs.AttachParentSlots?.Overall), Noggog.ExceptionExt.Combine(this.AttachParentSlots?.Specific, rhs.AttachParentSlots?.Specific));
                ret.ObjectTemplates = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ObjectTemplates?.Overall, rhs.ObjectTemplates?.Overall), Noggog.ExceptionExt.Combine(this.ObjectTemplates?.Specific, rhs.ObjectTemplates?.Specific));
                ret.Class = this.Class.Combine(rhs.Class);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.ShortName = this.ShortName.Combine(rhs.ShortName);
                ret.CalculatedHealth = this.CalculatedHealth.Combine(rhs.CalculatedHealth);
                ret.CalculatedActionPoints = this.CalculatedActionPoints.Combine(rhs.CalculatedActionPoints);
                ret.FarAwayModelDistance = this.FarAwayModelDistance.Combine(rhs.FarAwayModelDistance);
                ret.GearedUpWeapons = this.GearedUpWeapons.Combine(rhs.GearedUpWeapons);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                ret.HeadParts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.HeadParts?.Overall, rhs.HeadParts?.Overall), Noggog.ExceptionExt.Combine(this.HeadParts?.Specific, rhs.HeadParts?.Specific));
                ret.HairColor = this.HairColor.Combine(rhs.HairColor);
                ret.FacialHairColor = this.FacialHairColor.Combine(rhs.FacialHairColor);
                ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
                ret.GiftFilter = this.GiftFilter.Combine(rhs.GiftFilter);
                ret.NAM5 = this.NAM5.Combine(rhs.NAM5);
                ret.HeightMin = this.HeightMin.Combine(rhs.HeightMin);
                ret.NAM7 = this.NAM7.Combine(rhs.NAM7);
                ret.HeightMax = this.HeightMax.Combine(rhs.HeightMax);
                ret.Weight = this.Weight.Combine(rhs.Weight, (l, r) => l.Combine(r));
                ret.SoundLevel = this.SoundLevel.Combine(rhs.SoundLevel);
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcSound.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), Noggog.ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                ret.SoundsFinalize = this.SoundsFinalize.Combine(rhs.SoundsFinalize);
                ret.InheritsSoundsFrom = this.InheritsSoundsFrom.Combine(rhs.InheritsSoundsFrom);
                ret.PowerArmorStand = this.PowerArmorStand.Combine(rhs.PowerArmorStand);
                ret.DefaultOutfit = this.DefaultOutfit.Combine(rhs.DefaultOutfit);
                ret.SleepingOutfit = this.SleepingOutfit.Combine(rhs.SleepingOutfit);
                ret.DefaultPackageList = this.DefaultPackageList.Combine(rhs.DefaultPackageList);
                ret.CrimeFaction = this.CrimeFaction.Combine(rhs.CrimeFaction);
                ret.HeadTexture = this.HeadTexture.Combine(rhs.HeadTexture);
                ret.TextureLighting = this.TextureLighting.Combine(rhs.TextureLighting);
                ret.Morphs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcMorph.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Morphs?.Overall, rhs.Morphs?.Overall), Noggog.ExceptionExt.Combine(this.Morphs?.Specific, rhs.Morphs?.Specific));
                ret.FaceTintingLayers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcFaceTintingLayer.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.FaceTintingLayers?.Overall, rhs.FaceTintingLayers?.Overall), Noggog.ExceptionExt.Combine(this.FaceTintingLayers?.Specific, rhs.FaceTintingLayers?.Specific));
                ret.BodyMorphRegionValues = this.BodyMorphRegionValues.Combine(rhs.BodyMorphRegionValues, (l, r) => l.Combine(r));
                ret.FaceMorphs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, NpcFaceMorph.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.FaceMorphs?.Overall, rhs.FaceMorphs?.Overall), Noggog.ExceptionExt.Combine(this.FaceMorphs?.Specific, rhs.FaceMorphs?.Specific));
                ret.FacialMorphIntensity = this.FacialMorphIntensity.Combine(rhs.FacialMorphIntensity);
                ret.ActivateTextOverride = this.ActivateTextOverride.Combine(rhs.ActivateTextOverride);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool PreviewTransform;
            public bool AnimationSound;
            public bool Flags;
            public bool XpValueOffset;
            public ANpcLevel.TranslationMask? Level;
            public bool CalcMinLevel;
            public bool CalcMaxLevel;
            public bool DispositionBase;
            public bool UseTemplateActors;
            public bool BleedoutOverride;
            public bool Unknown;
            public RankPlacement.TranslationMask? Factions;
            public bool DeathItem;
            public bool Voice;
            public bool DefaultTemplate;
            public bool LegendaryTemplate;
            public bool LegendaryChance;
            public TemplateActors.TranslationMask? TemplateActors;
            public bool Race;
            public bool ActorEffect;
            public Destructible.TranslationMask? Destructible;
            public bool Skin;
            public bool FarAwayModel;
            public bool AttackRace;
            public Attack.TranslationMask? Attacks;
            public bool SpectatorOverridePackageList;
            public bool ObserveDeadBodyOverridePackageList;
            public bool GuardWarnOverridePackageList;
            public bool CombatOverridePackageList;
            public bool FollowerCommandPackageList;
            public bool FollowerElevatorPackageList;
            public PerkPlacement.TranslationMask? Perks;
            public ObjectProperty.TranslationMask? Properties;
            public bool ForcedLocRefType;
            public bool NativeTerminal;
            public ContainerEntry.TranslationMask? Items;
            public bool Aggression;
            public bool Confidence;
            public bool EnergyLevel;
            public bool Responsibility;
            public bool Mood;
            public bool Assistance;
            public bool AggroRadiusBehaviorEnabled;
            public bool AggroRadiusWarn;
            public bool AggroRadiusWarnOrAttack;
            public bool AggroRadiusAttack;
            public bool NoSlowApproach;
            public bool Packages;
            public bool Keywords;
            public bool AttachParentSlots;
            public ObjectTemplate.TranslationMask? ObjectTemplates;
            public bool Class;
            public bool Name;
            public bool ShortName;
            public bool CalculatedHealth;
            public bool CalculatedActionPoints;
            public bool FarAwayModelDistance;
            public bool GearedUpWeapons;
            public bool Unused;
            public bool HeadParts;
            public bool HairColor;
            public bool FacialHairColor;
            public bool CombatStyle;
            public bool GiftFilter;
            public bool NAM5;
            public bool HeightMin;
            public bool NAM7;
            public bool HeightMax;
            public NpcWeight.TranslationMask? Weight;
            public bool SoundLevel;
            public NpcSound.TranslationMask? Sounds;
            public bool SoundsFinalize;
            public bool InheritsSoundsFrom;
            public bool PowerArmorStand;
            public bool DefaultOutfit;
            public bool SleepingOutfit;
            public bool DefaultPackageList;
            public bool CrimeFaction;
            public bool HeadTexture;
            public bool TextureLighting;
            public NpcMorph.TranslationMask? Morphs;
            public NpcFaceTintingLayer.TranslationMask? FaceTintingLayers;
            public NpcBodyMorphRegionValues.TranslationMask? BodyMorphRegionValues;
            public NpcFaceMorph.TranslationMask? FaceMorphs;
            public bool FacialMorphIntensity;
            public bool ActivateTextOverride;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.PreviewTransform = defaultOn;
                this.AnimationSound = defaultOn;
                this.Flags = defaultOn;
                this.XpValueOffset = defaultOn;
                this.CalcMinLevel = defaultOn;
                this.CalcMaxLevel = defaultOn;
                this.DispositionBase = defaultOn;
                this.UseTemplateActors = defaultOn;
                this.BleedoutOverride = defaultOn;
                this.Unknown = defaultOn;
                this.DeathItem = defaultOn;
                this.Voice = defaultOn;
                this.DefaultTemplate = defaultOn;
                this.LegendaryTemplate = defaultOn;
                this.LegendaryChance = defaultOn;
                this.Race = defaultOn;
                this.ActorEffect = defaultOn;
                this.Skin = defaultOn;
                this.FarAwayModel = defaultOn;
                this.AttackRace = defaultOn;
                this.SpectatorOverridePackageList = defaultOn;
                this.ObserveDeadBodyOverridePackageList = defaultOn;
                this.GuardWarnOverridePackageList = defaultOn;
                this.CombatOverridePackageList = defaultOn;
                this.FollowerCommandPackageList = defaultOn;
                this.FollowerElevatorPackageList = defaultOn;
                this.ForcedLocRefType = defaultOn;
                this.NativeTerminal = defaultOn;
                this.Aggression = defaultOn;
                this.Confidence = defaultOn;
                this.EnergyLevel = defaultOn;
                this.Responsibility = defaultOn;
                this.Mood = defaultOn;
                this.Assistance = defaultOn;
                this.AggroRadiusBehaviorEnabled = defaultOn;
                this.AggroRadiusWarn = defaultOn;
                this.AggroRadiusWarnOrAttack = defaultOn;
                this.AggroRadiusAttack = defaultOn;
                this.NoSlowApproach = defaultOn;
                this.Packages = defaultOn;
                this.Keywords = defaultOn;
                this.AttachParentSlots = defaultOn;
                this.Class = defaultOn;
                this.Name = defaultOn;
                this.ShortName = defaultOn;
                this.CalculatedHealth = defaultOn;
                this.CalculatedActionPoints = defaultOn;
                this.FarAwayModelDistance = defaultOn;
                this.GearedUpWeapons = defaultOn;
                this.Unused = defaultOn;
                this.HeadParts = defaultOn;
                this.HairColor = defaultOn;
                this.FacialHairColor = defaultOn;
                this.CombatStyle = defaultOn;
                this.GiftFilter = defaultOn;
                this.NAM5 = defaultOn;
                this.HeightMin = defaultOn;
                this.NAM7 = defaultOn;
                this.HeightMax = defaultOn;
                this.SoundLevel = defaultOn;
                this.SoundsFinalize = defaultOn;
                this.InheritsSoundsFrom = defaultOn;
                this.PowerArmorStand = defaultOn;
                this.DefaultOutfit = defaultOn;
                this.SleepingOutfit = defaultOn;
                this.DefaultPackageList = defaultOn;
                this.CrimeFaction = defaultOn;
                this.HeadTexture = defaultOn;
                this.TextureLighting = defaultOn;
                this.FacialMorphIntensity = defaultOn;
                this.ActivateTextOverride = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((PreviewTransform, null));
                ret.Add((AnimationSound, null));
                ret.Add((Flags, null));
                ret.Add((XpValueOffset, null));
                ret.Add((Level != null ? Level.OnOverall : DefaultOn, Level?.GetCrystal()));
                ret.Add((CalcMinLevel, null));
                ret.Add((CalcMaxLevel, null));
                ret.Add((DispositionBase, null));
                ret.Add((UseTemplateActors, null));
                ret.Add((BleedoutOverride, null));
                ret.Add((Unknown, null));
                ret.Add((Factions == null ? DefaultOn : !Factions.GetCrystal().CopyNothing, Factions?.GetCrystal()));
                ret.Add((DeathItem, null));
                ret.Add((Voice, null));
                ret.Add((DefaultTemplate, null));
                ret.Add((LegendaryTemplate, null));
                ret.Add((LegendaryChance, null));
                ret.Add((TemplateActors != null ? TemplateActors.OnOverall : DefaultOn, TemplateActors?.GetCrystal()));
                ret.Add((Race, null));
                ret.Add((ActorEffect, null));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((Skin, null));
                ret.Add((FarAwayModel, null));
                ret.Add((AttackRace, null));
                ret.Add((Attacks == null ? DefaultOn : !Attacks.GetCrystal().CopyNothing, Attacks?.GetCrystal()));
                ret.Add((SpectatorOverridePackageList, null));
                ret.Add((ObserveDeadBodyOverridePackageList, null));
                ret.Add((GuardWarnOverridePackageList, null));
                ret.Add((CombatOverridePackageList, null));
                ret.Add((FollowerCommandPackageList, null));
                ret.Add((FollowerElevatorPackageList, null));
                ret.Add((Perks == null ? DefaultOn : !Perks.GetCrystal().CopyNothing, Perks?.GetCrystal()));
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
                ret.Add((ForcedLocRefType, null));
                ret.Add((NativeTerminal, null));
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
                ret.Add((Aggression, null));
                ret.Add((Confidence, null));
                ret.Add((EnergyLevel, null));
                ret.Add((Responsibility, null));
                ret.Add((Mood, null));
                ret.Add((Assistance, null));
                ret.Add((AggroRadiusBehaviorEnabled, null));
                ret.Add((AggroRadiusWarn, null));
                ret.Add((AggroRadiusWarnOrAttack, null));
                ret.Add((AggroRadiusAttack, null));
                ret.Add((NoSlowApproach, null));
                ret.Add((Packages, null));
                ret.Add((Keywords, null));
                ret.Add((AttachParentSlots, null));
                ret.Add((ObjectTemplates == null ? DefaultOn : !ObjectTemplates.GetCrystal().CopyNothing, ObjectTemplates?.GetCrystal()));
                ret.Add((Class, null));
                ret.Add((Name, null));
                ret.Add((ShortName, null));
                ret.Add((CalculatedHealth, null));
                ret.Add((CalculatedActionPoints, null));
                ret.Add((FarAwayModelDistance, null));
                ret.Add((GearedUpWeapons, null));
                ret.Add((Unused, null));
                ret.Add((HeadParts, null));
                ret.Add((HairColor, null));
                ret.Add((FacialHairColor, null));
                ret.Add((CombatStyle, null));
                ret.Add((GiftFilter, null));
                ret.Add((NAM5, null));
                ret.Add((HeightMin, null));
                ret.Add((NAM7, null));
                ret.Add((HeightMax, null));
                ret.Add((Weight != null ? Weight.OnOverall : DefaultOn, Weight?.GetCrystal()));
                ret.Add((SoundLevel, null));
                ret.Add((Sounds == null ? DefaultOn : !Sounds.GetCrystal().CopyNothing, Sounds?.GetCrystal()));
                ret.Add((SoundsFinalize, null));
                ret.Add((InheritsSoundsFrom, null));
                ret.Add((PowerArmorStand, null));
                ret.Add((DefaultOutfit, null));
                ret.Add((SleepingOutfit, null));
                ret.Add((DefaultPackageList, null));
                ret.Add((CrimeFaction, null));
                ret.Add((HeadTexture, null));
                ret.Add((TextureLighting, null));
                ret.Add((Morphs == null ? DefaultOn : !Morphs.GetCrystal().CopyNothing, Morphs?.GetCrystal()));
                ret.Add((FaceTintingLayers == null ? DefaultOn : !FaceTintingLayers.GetCrystal().CopyNothing, FaceTintingLayers?.GetCrystal()));
                ret.Add((BodyMorphRegionValues != null ? BodyMorphRegionValues.OnOverall : DefaultOn, BodyMorphRegionValues?.GetCrystal()));
                ret.Add((FaceMorphs == null ? DefaultOn : !FaceMorphs.GetCrystal().CopyNothing, FaceMorphs?.GetCrystal()));
                ret.Add((FacialMorphIntensity, null));
                ret.Add((ActivateTextOverride, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Npc_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcSetterCommon.Instance.RemapLinks(this, mapping);
        public Npc(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Npc(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Npc(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Npc(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Npc(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Npc>.ToString(this);
        }

        protected override Type LinkType => typeof(INpc);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not INpcGetter rhs) return false;
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcGetter? obj)
        {
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcCommon)((INpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Npc CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Npc();
            ((NpcSetterCommon)((INpcGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Npc item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NpcSetterCommon)((INpcGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Npc GetNew()
        {
            return new Npc();
        }

    }
    #endregion

    #region Interface
    public partial interface INpc :
        IAliasVoiceType,
        IConstructibleObjectTarget,
        IExplodeSpawn,
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IHasDestructible,
        IHasVoiceType,
        IHaveVirtualMachineAdapter,
        IKeyworded<IKeywordGetter>,
        ILockList,
        ILoquiObjectSetter<INpcInternal>,
        INamed,
        INamedRequired,
        INpcGetter,
        INpcSpawn,
        IObjectBounded,
        IObjectId,
        IOwner,
        IReferenceableObject,
        IScripted,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new IFormLinkNullable<ITransformGetter> PreviewTransform { get; set; }
        new IFormLinkNullable<IAnimationSoundTagSetGetter> AnimationSound { get; set; }
        new Npc.Flag Flags { get; set; }
        new Int16 XpValueOffset { get; set; }
        new ANpcLevel Level { get; set; }
        new Int16 CalcMinLevel { get; set; }
        new Int16 CalcMaxLevel { get; set; }
        new Int16 DispositionBase { get; set; }
        new Npc.TemplateActorType UseTemplateActors { get; set; }
        new Int16 BleedoutOverride { get; set; }
        new Int16 Unknown { get; set; }
        new ExtendedList<RankPlacement> Factions { get; }
        new IFormLinkNullable<ILeveledItemGetter> DeathItem { get; set; }
        new IFormLinkNullable<IVoiceTypeGetter> Voice { get; set; }
        new IFormLinkNullable<INpcSpawnGetter> DefaultTemplate { get; set; }
        new IFormLinkNullable<INpcSpawnGetter> LegendaryTemplate { get; set; }
        new IFormLinkNullable<IGlobalGetter> LegendaryChance { get; set; }
        new TemplateActors? TemplateActors { get; set; }
        new IFormLink<IRaceGetter> Race { get; set; }
        new ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; set; }
        /// <summary>
        /// Aspects: IHasDestructible
        /// </summary>
        new Destructible? Destructible { get; set; }
        new IFormLinkNullable<IArmorGetter> Skin { get; set; }
        new IFormLinkNullable<IArmorGetter> FarAwayModel { get; set; }
        new IFormLinkNullable<IRaceGetter> AttackRace { get; set; }
        new ExtendedList<Attack> Attacks { get; }
        new IFormLinkNullable<IFormListGetter> SpectatorOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> GuardWarnOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> CombatOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> FollowerCommandPackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> FollowerElevatorPackageList { get; set; }
        new ExtendedList<PerkPlacement>? Perks { get; set; }
        new ExtendedList<ObjectProperty>? Properties { get; set; }
        new IFormLinkNullable<ILocationReferenceTypeGetter> ForcedLocRefType { get; set; }
        new IFormLinkNullable<ITerminalGetter> NativeTerminal { get; set; }
        new ExtendedList<ContainerEntry>? Items { get; set; }
        new Npc.AggressionType Aggression { get; set; }
        new Npc.ConfidenceType Confidence { get; set; }
        new Byte EnergyLevel { get; set; }
        new Npc.ResponsibilityType Responsibility { get; set; }
        new Npc.MoodType Mood { get; set; }
        new Npc.AssistanceType Assistance { get; set; }
        new Boolean AggroRadiusBehaviorEnabled { get; set; }
        new UInt32 AggroRadiusWarn { get; set; }
        new UInt32 AggroRadiusWarnOrAttack { get; set; }
        new UInt32 AggroRadiusAttack { get; set; }
        new Boolean NoSlowApproach { get; set; }
        new ExtendedList<IFormLinkGetter<IPackageGetter>> Packages { get; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; set; }
        new ExtendedList<ObjectTemplate<Npc.Property>>? ObjectTemplates { get; set; }
        new IFormLinkNullable<IClassGetter> Class { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new TranslatedString? ShortName { get; set; }
        new UInt16 CalculatedHealth { get; set; }
        new UInt16 CalculatedActionPoints { get; set; }
        new UInt16 FarAwayModelDistance { get; set; }
        new Byte GearedUpWeapons { get; set; }
        new Byte Unused { get; set; }
        new ExtendedList<IFormLinkGetter<IHeadPartGetter>> HeadParts { get; }
        new IFormLinkNullable<IColorRecordGetter> HairColor { get; set; }
        new IFormLinkNullable<IColorRecordGetter> FacialHairColor { get; set; }
        new IFormLinkNullable<ICombatStyleGetter> CombatStyle { get; set; }
        new IFormLinkNullable<IFormListGetter> GiftFilter { get; set; }
        new MemorySlice<Byte>? NAM5 { get; set; }
        new Single HeightMin { get; set; }
        new Single? NAM7 { get; set; }
        new Single HeightMax { get; set; }
        new NpcWeight? Weight { get; set; }
        new SoundLevel SoundLevel { get; set; }
        new ExtendedList<NpcSound>? Sounds { get; set; }
        new MemorySlice<Byte>? SoundsFinalize { get; set; }
        new IFormLinkNullable<INpcGetter> InheritsSoundsFrom { get; set; }
        new IFormLinkNullable<IFurnitureGetter> PowerArmorStand { get; set; }
        new IFormLinkNullable<IOutfitGetter> DefaultOutfit { get; set; }
        new IFormLinkNullable<IOutfitGetter> SleepingOutfit { get; set; }
        new IFormLinkNullable<IFormListGetter> DefaultPackageList { get; set; }
        new IFormLinkNullable<IFactionGetter> CrimeFaction { get; set; }
        new IFormLinkNullable<ITextureSetGetter> HeadTexture { get; set; }
        new Color? TextureLighting { get; set; }
        new ExtendedList<NpcMorph> Morphs { get; }
        new ExtendedList<NpcFaceTintingLayer> FaceTintingLayers { get; }
        new NpcBodyMorphRegionValues? BodyMorphRegionValues { get; set; }
        new ExtendedList<NpcFaceMorph> FaceMorphs { get; }
        new Single? FacialMorphIntensity { get; set; }
        new TranslatedString? ActivateTextOverride { get; set; }
        #region Mutagen
        new Npc.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface INpcInternal :
        IFallout4MajorRecordInternal,
        INpc,
        INpcGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.NPC_)]
    public partial interface INpcGetter :
        IFallout4MajorRecordGetter,
        IAliasVoiceTypeGetter,
        IBinaryItem,
        IConstructibleObjectTargetGetter,
        IExplodeSpawnGetter,
        IFormLinkContainerGetter,
        IHasDestructibleGetter,
        IHasVoiceTypeGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILockListGetter,
        ILoquiObject<INpcGetter>,
        IMapsToGetter<INpcGetter>,
        INamedGetter,
        INamedRequiredGetter,
        INpcSpawnGetter,
        IObjectBoundedGetter,
        IObjectIdGetter,
        IOwnerGetter,
        IReferenceableObjectGetter,
        IScriptedGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Npc_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        IFormLinkNullableGetter<ITransformGetter> PreviewTransform { get; }
        IFormLinkNullableGetter<IAnimationSoundTagSetGetter> AnimationSound { get; }
        Npc.Flag Flags { get; }
        Int16 XpValueOffset { get; }
        IANpcLevelGetter Level { get; }
        Int16 CalcMinLevel { get; }
        Int16 CalcMaxLevel { get; }
        Int16 DispositionBase { get; }
        Npc.TemplateActorType UseTemplateActors { get; }
        Int16 BleedoutOverride { get; }
        Int16 Unknown { get; }
        IReadOnlyList<IRankPlacementGetter> Factions { get; }
        IFormLinkNullableGetter<ILeveledItemGetter> DeathItem { get; }
        IFormLinkNullableGetter<IVoiceTypeGetter> Voice { get; }
        IFormLinkNullableGetter<INpcSpawnGetter> DefaultTemplate { get; }
        IFormLinkNullableGetter<INpcSpawnGetter> LegendaryTemplate { get; }
        IFormLinkNullableGetter<IGlobalGetter> LegendaryChance { get; }
        ITemplateActorsGetter? TemplateActors { get; }
        IFormLinkGetter<IRaceGetter> Race { get; }
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; }
        #region Destructible
        /// <summary>
        /// Aspects: IHasDestructibleGetter
        /// </summary>
        IDestructibleGetter? Destructible { get; }
        #endregion
        IFormLinkNullableGetter<IArmorGetter> Skin { get; }
        IFormLinkNullableGetter<IArmorGetter> FarAwayModel { get; }
        IFormLinkNullableGetter<IRaceGetter> AttackRace { get; }
        IReadOnlyList<IAttackGetter> Attacks { get; }
        IFormLinkNullableGetter<IFormListGetter> SpectatorOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> ObserveDeadBodyOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> GuardWarnOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> CombatOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> FollowerCommandPackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> FollowerElevatorPackageList { get; }
        IReadOnlyList<IPerkPlacementGetter>? Perks { get; }
        IReadOnlyList<IObjectPropertyGetter>? Properties { get; }
        IFormLinkNullableGetter<ILocationReferenceTypeGetter> ForcedLocRefType { get; }
        IFormLinkNullableGetter<ITerminalGetter> NativeTerminal { get; }
        IReadOnlyList<IContainerEntryGetter>? Items { get; }
        Npc.AggressionType Aggression { get; }
        Npc.ConfidenceType Confidence { get; }
        Byte EnergyLevel { get; }
        Npc.ResponsibilityType Responsibility { get; }
        Npc.MoodType Mood { get; }
        Npc.AssistanceType Assistance { get; }
        Boolean AggroRadiusBehaviorEnabled { get; }
        UInt32 AggroRadiusWarn { get; }
        UInt32 AggroRadiusWarnOrAttack { get; }
        UInt32 AggroRadiusAttack { get; }
        Boolean NoSlowApproach { get; }
        IReadOnlyList<IFormLinkGetter<IPackageGetter>> Packages { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; }
        IReadOnlyList<IObjectTemplateGetter<Npc.Property>>? ObjectTemplates { get; }
        IFormLinkNullableGetter<IClassGetter> Class { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        ITranslatedStringGetter? ShortName { get; }
        UInt16 CalculatedHealth { get; }
        UInt16 CalculatedActionPoints { get; }
        UInt16 FarAwayModelDistance { get; }
        Byte GearedUpWeapons { get; }
        Byte Unused { get; }
        IReadOnlyList<IFormLinkGetter<IHeadPartGetter>> HeadParts { get; }
        IFormLinkNullableGetter<IColorRecordGetter> HairColor { get; }
        IFormLinkNullableGetter<IColorRecordGetter> FacialHairColor { get; }
        IFormLinkNullableGetter<ICombatStyleGetter> CombatStyle { get; }
        IFormLinkNullableGetter<IFormListGetter> GiftFilter { get; }
        ReadOnlyMemorySlice<Byte>? NAM5 { get; }
        Single HeightMin { get; }
        Single? NAM7 { get; }
        Single HeightMax { get; }
        INpcWeightGetter? Weight { get; }
        SoundLevel SoundLevel { get; }
        IReadOnlyList<INpcSoundGetter>? Sounds { get; }
        ReadOnlyMemorySlice<Byte>? SoundsFinalize { get; }
        IFormLinkNullableGetter<INpcGetter> InheritsSoundsFrom { get; }
        IFormLinkNullableGetter<IFurnitureGetter> PowerArmorStand { get; }
        IFormLinkNullableGetter<IOutfitGetter> DefaultOutfit { get; }
        IFormLinkNullableGetter<IOutfitGetter> SleepingOutfit { get; }
        IFormLinkNullableGetter<IFormListGetter> DefaultPackageList { get; }
        IFormLinkNullableGetter<IFactionGetter> CrimeFaction { get; }
        IFormLinkNullableGetter<ITextureSetGetter> HeadTexture { get; }
        Color? TextureLighting { get; }
        IReadOnlyList<INpcMorphGetter> Morphs { get; }
        IReadOnlyList<INpcFaceTintingLayerGetter> FaceTintingLayers { get; }
        INpcBodyMorphRegionValuesGetter? BodyMorphRegionValues { get; }
        IReadOnlyList<INpcFaceMorphGetter> FaceMorphs { get; }
        Single? FacialMorphIntensity { get; }
        ITranslatedStringGetter? ActivateTextOverride { get; }

        #region Mutagen
        Npc.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class NpcMixIn
    {
        public static void Clear(this INpcInternal item)
        {
            ((NpcSetterCommon)((INpcGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Npc.Mask<bool> GetEqualsMask(
            this INpcGetter item,
            INpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INpcGetter item,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INpcGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            ((NpcCommon)((INpcGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcGetter item,
            INpcGetter rhs,
            Npc.TranslationMask? equalsMask = null)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcInternal lhs,
            INpcGetter rhs,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcSetterTranslationCommon)((INpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Npc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcInternal lhs,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcSetterTranslationCommon)((INpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Npc Duplicate(
            this INpcGetter item,
            FormKey formKey,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Npc Duplicate(
            this INpcGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NpcSetterCommon)((INpcGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum Npc_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        PreviewTransform = 9,
        AnimationSound = 10,
        Flags = 11,
        XpValueOffset = 12,
        Level = 13,
        CalcMinLevel = 14,
        CalcMaxLevel = 15,
        DispositionBase = 16,
        UseTemplateActors = 17,
        BleedoutOverride = 18,
        Unknown = 19,
        Factions = 20,
        DeathItem = 21,
        Voice = 22,
        DefaultTemplate = 23,
        LegendaryTemplate = 24,
        LegendaryChance = 25,
        TemplateActors = 26,
        Race = 27,
        ActorEffect = 28,
        Destructible = 29,
        Skin = 30,
        FarAwayModel = 31,
        AttackRace = 32,
        Attacks = 33,
        SpectatorOverridePackageList = 34,
        ObserveDeadBodyOverridePackageList = 35,
        GuardWarnOverridePackageList = 36,
        CombatOverridePackageList = 37,
        FollowerCommandPackageList = 38,
        FollowerElevatorPackageList = 39,
        Perks = 40,
        Properties = 41,
        ForcedLocRefType = 42,
        NativeTerminal = 43,
        Items = 44,
        Aggression = 45,
        Confidence = 46,
        EnergyLevel = 47,
        Responsibility = 48,
        Mood = 49,
        Assistance = 50,
        AggroRadiusBehaviorEnabled = 51,
        AggroRadiusWarn = 52,
        AggroRadiusWarnOrAttack = 53,
        AggroRadiusAttack = 54,
        NoSlowApproach = 55,
        Packages = 56,
        Keywords = 57,
        AttachParentSlots = 58,
        ObjectTemplates = 59,
        Class = 60,
        Name = 61,
        ShortName = 62,
        CalculatedHealth = 63,
        CalculatedActionPoints = 64,
        FarAwayModelDistance = 65,
        GearedUpWeapons = 66,
        Unused = 67,
        HeadParts = 68,
        HairColor = 69,
        FacialHairColor = 70,
        CombatStyle = 71,
        GiftFilter = 72,
        NAM5 = 73,
        HeightMin = 74,
        NAM7 = 75,
        HeightMax = 76,
        Weight = 77,
        SoundLevel = 78,
        Sounds = 79,
        SoundsFinalize = 80,
        InheritsSoundsFrom = 81,
        PowerArmorStand = 82,
        DefaultOutfit = 83,
        SleepingOutfit = 84,
        DefaultPackageList = 85,
        CrimeFaction = 86,
        HeadTexture = 87,
        TextureLighting = 88,
        Morphs = 89,
        FaceTintingLayers = 90,
        BodyMorphRegionValues = 91,
        FaceMorphs = 92,
        FacialMorphIntensity = 93,
        ActivateTextOverride = 94,
    }
    #endregion

    #region Registration
    internal partial class Npc_Registration : ILoquiRegistration
    {
        public static readonly Npc_Registration Instance = new Npc_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 88;

        public const ushort FieldCount = 95;

        public static readonly Type MaskType = typeof(Npc.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Npc.ErrorMask);

        public static readonly Type ClassType = typeof(Npc);

        public static readonly Type GetterType = typeof(INpcGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpc);

        public static readonly Type? InternalSetterType = typeof(INpcInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Npc";

        public const string Name = "Npc";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NPC_;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.NPC_);
            var all = RecordCollection.Factory(
                RecordTypes.NPC_,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.PTRN,
                RecordTypes.STCP,
                RecordTypes.ACBS,
                RecordTypes.SNAM,
                RecordTypes.INAM,
                RecordTypes.VTCK,
                RecordTypes.TPLT,
                RecordTypes.LTPT,
                RecordTypes.LTPC,
                RecordTypes.TPTA,
                RecordTypes.RNAM,
                RecordTypes.SPLO,
                RecordTypes.SPCT,
                RecordTypes.DEST,
                RecordTypes.DAMC,
                RecordTypes.DSTD,
                RecordTypes.WNAM,
                RecordTypes.ANAM,
                RecordTypes.ATKR,
                RecordTypes.ATKD,
                RecordTypes.ATKE,
                RecordTypes.ATKW,
                RecordTypes.ATKS,
                RecordTypes.ATKT,
                RecordTypes.SPOR,
                RecordTypes.OCOR,
                RecordTypes.GWOR,
                RecordTypes.ECOR,
                RecordTypes.FCPL,
                RecordTypes.RCLR,
                RecordTypes.PRKR,
                RecordTypes.PRKZ,
                RecordTypes.PRPS,
                RecordTypes.FTYP,
                RecordTypes.NTRM,
                RecordTypes.CNTO,
                RecordTypes.COCT,
                RecordTypes.COED,
                RecordTypes.AIDT,
                RecordTypes.PKID,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.APPR,
                RecordTypes.OBTE,
                RecordTypes.OBTF,
                RecordTypes.FULL,
                RecordTypes.OBTS,
                RecordTypes.STOP,
                RecordTypes.CNAM,
                RecordTypes.SHRT,
                RecordTypes.DATA,
                RecordTypes.DNAM,
                RecordTypes.PNAM,
                RecordTypes.HCLF,
                RecordTypes.BCLF,
                RecordTypes.ZNAM,
                RecordTypes.GNAM,
                RecordTypes.NAM5,
                RecordTypes.NAM6,
                RecordTypes.NAM7,
                RecordTypes.NAM4,
                RecordTypes.MWGT,
                RecordTypes.NAM8,
                RecordTypes.CS2K,
                RecordTypes.CS2D,
                RecordTypes.CS2H,
                RecordTypes.CS2E,
                RecordTypes.CS2F,
                RecordTypes.CSCR,
                RecordTypes.PFRN,
                RecordTypes.DOFT,
                RecordTypes.SOFT,
                RecordTypes.DPLT,
                RecordTypes.CRIF,
                RecordTypes.FTST,
                RecordTypes.QNAM,
                RecordTypes.MSDK,
                RecordTypes.MSDV,
                RecordTypes.TETI,
                RecordTypes.TEND,
                RecordTypes.MRSV,
                RecordTypes.FMRI,
                RecordTypes.FMRS,
                RecordTypes.FMIN,
                RecordTypes.ATTX);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NpcBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NpcSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly NpcSetterCommon Instance = new NpcSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.PreviewTransform.Clear();
            item.AnimationSound.Clear();
            item.Flags = default(Npc.Flag);
            item.XpValueOffset = default(Int16);
            item.Level.Clear();
            item.CalcMinLevel = default(Int16);
            item.CalcMaxLevel = default(Int16);
            item.DispositionBase = default(Int16);
            item.UseTemplateActors = default(Npc.TemplateActorType);
            item.BleedoutOverride = default(Int16);
            item.Unknown = default(Int16);
            item.Factions.Clear();
            item.DeathItem.Clear();
            item.Voice.Clear();
            item.DefaultTemplate.Clear();
            item.LegendaryTemplate.Clear();
            item.LegendaryChance.Clear();
            item.TemplateActors = null;
            item.Race.Clear();
            item.ActorEffect = null;
            item.Destructible = null;
            item.Skin.Clear();
            item.FarAwayModel.Clear();
            item.AttackRace.Clear();
            item.Attacks.Clear();
            item.SpectatorOverridePackageList.Clear();
            item.ObserveDeadBodyOverridePackageList.Clear();
            item.GuardWarnOverridePackageList.Clear();
            item.CombatOverridePackageList.Clear();
            item.FollowerCommandPackageList.Clear();
            item.FollowerElevatorPackageList.Clear();
            item.Perks = null;
            item.Properties = null;
            item.ForcedLocRefType.Clear();
            item.NativeTerminal.Clear();
            item.Items = null;
            item.Aggression = default(Npc.AggressionType);
            item.Confidence = default(Npc.ConfidenceType);
            item.EnergyLevel = default(Byte);
            item.Responsibility = default(Npc.ResponsibilityType);
            item.Mood = default(Npc.MoodType);
            item.Assistance = default(Npc.AssistanceType);
            item.AggroRadiusBehaviorEnabled = default(Boolean);
            item.AggroRadiusWarn = default(UInt32);
            item.AggroRadiusWarnOrAttack = default(UInt32);
            item.AggroRadiusAttack = default(UInt32);
            item.NoSlowApproach = default(Boolean);
            item.Packages.Clear();
            item.Keywords = null;
            item.AttachParentSlots = null;
            item.ObjectTemplates = null;
            item.Class.Clear();
            item.Name = default;
            item.ShortName = default;
            item.CalculatedHealth = default(UInt16);
            item.CalculatedActionPoints = default(UInt16);
            item.FarAwayModelDistance = default(UInt16);
            item.GearedUpWeapons = default(Byte);
            item.Unused = default(Byte);
            item.HeadParts.Clear();
            item.HairColor.Clear();
            item.FacialHairColor.Clear();
            item.CombatStyle.Clear();
            item.GiftFilter.Clear();
            item.NAM5 = default;
            item.HeightMin = default(Single);
            item.NAM7 = default;
            item.HeightMax = default(Single);
            item.Weight = null;
            item.SoundLevel = default(SoundLevel);
            item.Sounds = null;
            item.SoundsFinalize = default;
            item.InheritsSoundsFrom.Clear();
            item.PowerArmorStand.Clear();
            item.DefaultOutfit.Clear();
            item.SleepingOutfit.Clear();
            item.DefaultPackageList.Clear();
            item.CrimeFaction.Clear();
            item.HeadTexture.Clear();
            item.TextureLighting = default;
            item.Morphs.Clear();
            item.FaceTintingLayers.Clear();
            item.BodyMorphRegionValues = null;
            item.FaceMorphs.Clear();
            item.FacialMorphIntensity = default;
            item.ActivateTextOverride = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (INpcInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INpcInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(INpc obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.PreviewTransform.Relink(mapping);
            obj.AnimationSound.Relink(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.DeathItem.Relink(mapping);
            obj.Voice.Relink(mapping);
            obj.DefaultTemplate.Relink(mapping);
            obj.LegendaryTemplate.Relink(mapping);
            obj.LegendaryChance.Relink(mapping);
            obj.TemplateActors?.RemapLinks(mapping);
            obj.Race.Relink(mapping);
            obj.ActorEffect?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.Skin.Relink(mapping);
            obj.FarAwayModel.Relink(mapping);
            obj.AttackRace.Relink(mapping);
            obj.Attacks.RemapLinks(mapping);
            obj.SpectatorOverridePackageList.Relink(mapping);
            obj.ObserveDeadBodyOverridePackageList.Relink(mapping);
            obj.GuardWarnOverridePackageList.Relink(mapping);
            obj.CombatOverridePackageList.Relink(mapping);
            obj.FollowerCommandPackageList.Relink(mapping);
            obj.FollowerElevatorPackageList.Relink(mapping);
            obj.Perks?.RemapLinks(mapping);
            obj.Properties?.RemapLinks(mapping);
            obj.ForcedLocRefType.Relink(mapping);
            obj.NativeTerminal.Relink(mapping);
            obj.Items?.RemapLinks(mapping);
            obj.Packages.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.AttachParentSlots?.RemapLinks(mapping);
            obj.ObjectTemplates?.RemapLinks(mapping);
            obj.Class.Relink(mapping);
            obj.HeadParts.RemapLinks(mapping);
            obj.HairColor.Relink(mapping);
            obj.FacialHairColor.Relink(mapping);
            obj.CombatStyle.Relink(mapping);
            obj.GiftFilter.Relink(mapping);
            obj.Sounds?.RemapLinks(mapping);
            obj.InheritsSoundsFrom.Relink(mapping);
            obj.PowerArmorStand.Relink(mapping);
            obj.DefaultOutfit.Relink(mapping);
            obj.SleepingOutfit.Relink(mapping);
            obj.DefaultPackageList.Relink(mapping);
            obj.CrimeFaction.Relink(mapping);
            obj.HeadTexture.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<INpcInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NpcBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: NpcBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Npc)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Npc)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class NpcCommon : Fallout4MajorRecordCommon
    {
        public new static readonly NpcCommon Instance = new NpcCommon();

        public Npc.Mask<bool> GetEqualsMask(
            INpcGetter item,
            INpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Npc.Mask<bool>(false);
            ((NpcCommon)((INpcGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcGetter item,
            INpcGetter rhs,
            Npc.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.PreviewTransform = item.PreviewTransform.Equals(rhs.PreviewTransform);
            ret.AnimationSound = item.AnimationSound.Equals(rhs.AnimationSound);
            ret.Flags = item.Flags == rhs.Flags;
            ret.XpValueOffset = item.XpValueOffset == rhs.XpValueOffset;
            ret.Level = MaskItemExt.Factory(item.Level.GetEqualsMask(rhs.Level, include), include);
            ret.CalcMinLevel = item.CalcMinLevel == rhs.CalcMinLevel;
            ret.CalcMaxLevel = item.CalcMaxLevel == rhs.CalcMaxLevel;
            ret.DispositionBase = item.DispositionBase == rhs.DispositionBase;
            ret.UseTemplateActors = item.UseTemplateActors == rhs.UseTemplateActors;
            ret.BleedoutOverride = item.BleedoutOverride == rhs.BleedoutOverride;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DeathItem = item.DeathItem.Equals(rhs.DeathItem);
            ret.Voice = item.Voice.Equals(rhs.Voice);
            ret.DefaultTemplate = item.DefaultTemplate.Equals(rhs.DefaultTemplate);
            ret.LegendaryTemplate = item.LegendaryTemplate.Equals(rhs.LegendaryTemplate);
            ret.LegendaryChance = item.LegendaryChance.Equals(rhs.LegendaryChance);
            ret.TemplateActors = EqualsMaskHelper.EqualsHelper(
                item.TemplateActors,
                rhs.TemplateActors,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Race = item.Race.Equals(rhs.Race);
            ret.ActorEffect = item.ActorEffect.CollectionEqualsHelper(
                rhs.ActorEffect,
                (l, r) => object.Equals(l, r),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Skin = item.Skin.Equals(rhs.Skin);
            ret.FarAwayModel = item.FarAwayModel.Equals(rhs.FarAwayModel);
            ret.AttackRace = item.AttackRace.Equals(rhs.AttackRace);
            ret.Attacks = item.Attacks.CollectionEqualsHelper(
                rhs.Attacks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SpectatorOverridePackageList = item.SpectatorOverridePackageList.Equals(rhs.SpectatorOverridePackageList);
            ret.ObserveDeadBodyOverridePackageList = item.ObserveDeadBodyOverridePackageList.Equals(rhs.ObserveDeadBodyOverridePackageList);
            ret.GuardWarnOverridePackageList = item.GuardWarnOverridePackageList.Equals(rhs.GuardWarnOverridePackageList);
            ret.CombatOverridePackageList = item.CombatOverridePackageList.Equals(rhs.CombatOverridePackageList);
            ret.FollowerCommandPackageList = item.FollowerCommandPackageList.Equals(rhs.FollowerCommandPackageList);
            ret.FollowerElevatorPackageList = item.FollowerElevatorPackageList.Equals(rhs.FollowerElevatorPackageList);
            ret.Perks = item.Perks.CollectionEqualsHelper(
                rhs.Perks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ForcedLocRefType = item.ForcedLocRefType.Equals(rhs.ForcedLocRefType);
            ret.NativeTerminal = item.NativeTerminal.Equals(rhs.NativeTerminal);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Aggression = item.Aggression == rhs.Aggression;
            ret.Confidence = item.Confidence == rhs.Confidence;
            ret.EnergyLevel = item.EnergyLevel == rhs.EnergyLevel;
            ret.Responsibility = item.Responsibility == rhs.Responsibility;
            ret.Mood = item.Mood == rhs.Mood;
            ret.Assistance = item.Assistance == rhs.Assistance;
            ret.AggroRadiusBehaviorEnabled = item.AggroRadiusBehaviorEnabled == rhs.AggroRadiusBehaviorEnabled;
            ret.AggroRadiusWarn = item.AggroRadiusWarn == rhs.AggroRadiusWarn;
            ret.AggroRadiusWarnOrAttack = item.AggroRadiusWarnOrAttack == rhs.AggroRadiusWarnOrAttack;
            ret.AggroRadiusAttack = item.AggroRadiusAttack == rhs.AggroRadiusAttack;
            ret.NoSlowApproach = item.NoSlowApproach == rhs.NoSlowApproach;
            ret.Packages = item.Packages.CollectionEqualsHelper(
                rhs.Packages,
                (l, r) => object.Equals(l, r),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.AttachParentSlots = item.AttachParentSlots.CollectionEqualsHelper(
                rhs.AttachParentSlots,
                (l, r) => object.Equals(l, r),
                include);
            ret.ObjectTemplates = item.ObjectTemplates.CollectionEqualsHelper(
                rhs.ObjectTemplates,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Class = item.Class.Equals(rhs.Class);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.ShortName = object.Equals(item.ShortName, rhs.ShortName);
            ret.CalculatedHealth = item.CalculatedHealth == rhs.CalculatedHealth;
            ret.CalculatedActionPoints = item.CalculatedActionPoints == rhs.CalculatedActionPoints;
            ret.FarAwayModelDistance = item.FarAwayModelDistance == rhs.FarAwayModelDistance;
            ret.GearedUpWeapons = item.GearedUpWeapons == rhs.GearedUpWeapons;
            ret.Unused = item.Unused == rhs.Unused;
            ret.HeadParts = item.HeadParts.CollectionEqualsHelper(
                rhs.HeadParts,
                (l, r) => object.Equals(l, r),
                include);
            ret.HairColor = item.HairColor.Equals(rhs.HairColor);
            ret.FacialHairColor = item.FacialHairColor.Equals(rhs.FacialHairColor);
            ret.CombatStyle = item.CombatStyle.Equals(rhs.CombatStyle);
            ret.GiftFilter = item.GiftFilter.Equals(rhs.GiftFilter);
            ret.NAM5 = MemorySliceExt.SequenceEqual(item.NAM5, rhs.NAM5);
            ret.HeightMin = item.HeightMin.EqualsWithin(rhs.HeightMin);
            ret.NAM7 = item.NAM7.EqualsWithin(rhs.NAM7);
            ret.HeightMax = item.HeightMax.EqualsWithin(rhs.HeightMax);
            ret.Weight = EqualsMaskHelper.EqualsHelper(
                item.Weight,
                rhs.Weight,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SoundLevel = item.SoundLevel == rhs.SoundLevel;
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SoundsFinalize = MemorySliceExt.SequenceEqual(item.SoundsFinalize, rhs.SoundsFinalize);
            ret.InheritsSoundsFrom = item.InheritsSoundsFrom.Equals(rhs.InheritsSoundsFrom);
            ret.PowerArmorStand = item.PowerArmorStand.Equals(rhs.PowerArmorStand);
            ret.DefaultOutfit = item.DefaultOutfit.Equals(rhs.DefaultOutfit);
            ret.SleepingOutfit = item.SleepingOutfit.Equals(rhs.SleepingOutfit);
            ret.DefaultPackageList = item.DefaultPackageList.Equals(rhs.DefaultPackageList);
            ret.CrimeFaction = item.CrimeFaction.Equals(rhs.CrimeFaction);
            ret.HeadTexture = item.HeadTexture.Equals(rhs.HeadTexture);
            ret.TextureLighting = item.TextureLighting.ColorOnlyEquals(rhs.TextureLighting);
            ret.Morphs = item.Morphs.CollectionEqualsHelper(
                rhs.Morphs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.FaceTintingLayers = item.FaceTintingLayers.CollectionEqualsHelper(
                rhs.FaceTintingLayers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BodyMorphRegionValues = EqualsMaskHelper.EqualsHelper(
                item.BodyMorphRegionValues,
                rhs.BodyMorphRegionValues,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FaceMorphs = item.FaceMorphs.CollectionEqualsHelper(
                rhs.FaceMorphs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.FacialMorphIntensity = item.FacialMorphIntensity.EqualsWithin(rhs.FacialMorphIntensity);
            ret.ActivateTextOverride = object.Equals(item.ActivateTextOverride, rhs.ActivateTextOverride);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            INpcGetter item,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INpcGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Npc =>");
            }
            else
            {
                sb.AppendLine($"{name} (Npc) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INpcGetter item,
            StructuredStringBuilder sb,
            Npc.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if (printMask?.PreviewTransform ?? true)
            {
                sb.AppendItem(item.PreviewTransform.FormKeyNullable, "PreviewTransform");
            }
            if (printMask?.AnimationSound ?? true)
            {
                sb.AppendItem(item.AnimationSound.FormKeyNullable, "AnimationSound");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.XpValueOffset ?? true)
            {
                sb.AppendItem(item.XpValueOffset, "XpValueOffset");
            }
            if (printMask?.Level?.Overall ?? true)
            {
                item.Level?.Print(sb, "Level");
            }
            if (printMask?.CalcMinLevel ?? true)
            {
                sb.AppendItem(item.CalcMinLevel, "CalcMinLevel");
            }
            if (printMask?.CalcMaxLevel ?? true)
            {
                sb.AppendItem(item.CalcMaxLevel, "CalcMaxLevel");
            }
            if (printMask?.DispositionBase ?? true)
            {
                sb.AppendItem(item.DispositionBase, "DispositionBase");
            }
            if (printMask?.UseTemplateActors ?? true)
            {
                sb.AppendItem(item.UseTemplateActors, "UseTemplateActors");
            }
            if (printMask?.BleedoutOverride ?? true)
            {
                sb.AppendItem(item.BleedoutOverride, "BleedoutOverride");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                sb.AppendLine("Factions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Factions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.DeathItem ?? true)
            {
                sb.AppendItem(item.DeathItem.FormKeyNullable, "DeathItem");
            }
            if (printMask?.Voice ?? true)
            {
                sb.AppendItem(item.Voice.FormKeyNullable, "Voice");
            }
            if (printMask?.DefaultTemplate ?? true)
            {
                sb.AppendItem(item.DefaultTemplate.FormKeyNullable, "DefaultTemplate");
            }
            if (printMask?.LegendaryTemplate ?? true)
            {
                sb.AppendItem(item.LegendaryTemplate.FormKeyNullable, "LegendaryTemplate");
            }
            if (printMask?.LegendaryChance ?? true)
            {
                sb.AppendItem(item.LegendaryChance.FormKeyNullable, "LegendaryChance");
            }
            if ((printMask?.TemplateActors?.Overall ?? true)
                && item.TemplateActors is {} TemplateActorsItem)
            {
                TemplateActorsItem?.Print(sb, "TemplateActors");
            }
            if (printMask?.Race ?? true)
            {
                sb.AppendItem(item.Race.FormKey, "Race");
            }
            if ((printMask?.ActorEffect?.Overall ?? true)
                && item.ActorEffect is {} ActorEffectItem)
            {
                sb.AppendLine("ActorEffect =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ActorEffectItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible is {} DestructibleItem)
            {
                DestructibleItem?.Print(sb, "Destructible");
            }
            if (printMask?.Skin ?? true)
            {
                sb.AppendItem(item.Skin.FormKeyNullable, "Skin");
            }
            if (printMask?.FarAwayModel ?? true)
            {
                sb.AppendItem(item.FarAwayModel.FormKeyNullable, "FarAwayModel");
            }
            if (printMask?.AttackRace ?? true)
            {
                sb.AppendItem(item.AttackRace.FormKeyNullable, "AttackRace");
            }
            if (printMask?.Attacks?.Overall ?? true)
            {
                sb.AppendLine("Attacks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Attacks)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.SpectatorOverridePackageList ?? true)
            {
                sb.AppendItem(item.SpectatorOverridePackageList.FormKeyNullable, "SpectatorOverridePackageList");
            }
            if (printMask?.ObserveDeadBodyOverridePackageList ?? true)
            {
                sb.AppendItem(item.ObserveDeadBodyOverridePackageList.FormKeyNullable, "ObserveDeadBodyOverridePackageList");
            }
            if (printMask?.GuardWarnOverridePackageList ?? true)
            {
                sb.AppendItem(item.GuardWarnOverridePackageList.FormKeyNullable, "GuardWarnOverridePackageList");
            }
            if (printMask?.CombatOverridePackageList ?? true)
            {
                sb.AppendItem(item.CombatOverridePackageList.FormKeyNullable, "CombatOverridePackageList");
            }
            if (printMask?.FollowerCommandPackageList ?? true)
            {
                sb.AppendItem(item.FollowerCommandPackageList.FormKeyNullable, "FollowerCommandPackageList");
            }
            if (printMask?.FollowerElevatorPackageList ?? true)
            {
                sb.AppendItem(item.FollowerElevatorPackageList.FormKeyNullable, "FollowerElevatorPackageList");
            }
            if ((printMask?.Perks?.Overall ?? true)
                && item.Perks is {} PerksItem)
            {
                sb.AppendLine("Perks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PerksItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Properties?.Overall ?? true)
                && item.Properties is {} PropertiesItem)
            {
                sb.AppendLine("Properties =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PropertiesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.ForcedLocRefType ?? true)
            {
                sb.AppendItem(item.ForcedLocRefType.FormKeyNullable, "ForcedLocRefType");
            }
            if (printMask?.NativeTerminal ?? true)
            {
                sb.AppendItem(item.NativeTerminal.FormKeyNullable, "NativeTerminal");
            }
            if ((printMask?.Items?.Overall ?? true)
                && item.Items is {} ItemsItem)
            {
                sb.AppendLine("Items =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ItemsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Aggression ?? true)
            {
                sb.AppendItem(item.Aggression, "Aggression");
            }
            if (printMask?.Confidence ?? true)
            {
                sb.AppendItem(item.Confidence, "Confidence");
            }
            if (printMask?.EnergyLevel ?? true)
            {
                sb.AppendItem(item.EnergyLevel, "EnergyLevel");
            }
            if (printMask?.Responsibility ?? true)
            {
                sb.AppendItem(item.Responsibility, "Responsibility");
            }
            if (printMask?.Mood ?? true)
            {
                sb.AppendItem(item.Mood, "Mood");
            }
            if (printMask?.Assistance ?? true)
            {
                sb.AppendItem(item.Assistance, "Assistance");
            }
            if (printMask?.AggroRadiusBehaviorEnabled ?? true)
            {
                sb.AppendItem(item.AggroRadiusBehaviorEnabled, "AggroRadiusBehaviorEnabled");
            }
            if (printMask?.AggroRadiusWarn ?? true)
            {
                sb.AppendItem(item.AggroRadiusWarn, "AggroRadiusWarn");
            }
            if (printMask?.AggroRadiusWarnOrAttack ?? true)
            {
                sb.AppendItem(item.AggroRadiusWarnOrAttack, "AggroRadiusWarnOrAttack");
            }
            if (printMask?.AggroRadiusAttack ?? true)
            {
                sb.AppendItem(item.AggroRadiusAttack, "AggroRadiusAttack");
            }
            if (printMask?.NoSlowApproach ?? true)
            {
                sb.AppendItem(item.NoSlowApproach, "NoSlowApproach");
            }
            if (printMask?.Packages?.Overall ?? true)
            {
                sb.AppendLine("Packages =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Packages)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.AttachParentSlots?.Overall ?? true)
                && item.AttachParentSlots is {} AttachParentSlotsItem)
            {
                sb.AppendLine("AttachParentSlots =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AttachParentSlotsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.ObjectTemplates?.Overall ?? true)
                && item.ObjectTemplates is {} ObjectTemplatesItem)
            {
                sb.AppendLine("ObjectTemplates =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ObjectTemplatesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Class ?? true)
            {
                sb.AppendItem(item.Class.FormKeyNullable, "Class");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.ShortName ?? true)
                && item.ShortName is {} ShortNameItem)
            {
                sb.AppendItem(ShortNameItem, "ShortName");
            }
            if (printMask?.CalculatedHealth ?? true)
            {
                sb.AppendItem(item.CalculatedHealth, "CalculatedHealth");
            }
            if (printMask?.CalculatedActionPoints ?? true)
            {
                sb.AppendItem(item.CalculatedActionPoints, "CalculatedActionPoints");
            }
            if (printMask?.FarAwayModelDistance ?? true)
            {
                sb.AppendItem(item.FarAwayModelDistance, "FarAwayModelDistance");
            }
            if (printMask?.GearedUpWeapons ?? true)
            {
                sb.AppendItem(item.GearedUpWeapons, "GearedUpWeapons");
            }
            if (printMask?.Unused ?? true)
            {
                sb.AppendItem(item.Unused, "Unused");
            }
            if (printMask?.HeadParts?.Overall ?? true)
            {
                sb.AppendLine("HeadParts =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.HeadParts)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.HairColor ?? true)
            {
                sb.AppendItem(item.HairColor.FormKeyNullable, "HairColor");
            }
            if (printMask?.FacialHairColor ?? true)
            {
                sb.AppendItem(item.FacialHairColor.FormKeyNullable, "FacialHairColor");
            }
            if (printMask?.CombatStyle ?? true)
            {
                sb.AppendItem(item.CombatStyle.FormKeyNullable, "CombatStyle");
            }
            if (printMask?.GiftFilter ?? true)
            {
                sb.AppendItem(item.GiftFilter.FormKeyNullable, "GiftFilter");
            }
            if ((printMask?.NAM5 ?? true)
                && item.NAM5 is {} NAM5Item)
            {
                sb.AppendLine($"NAM5 => {SpanExt.ToHexString(NAM5Item)}");
            }
            if (printMask?.HeightMin ?? true)
            {
                sb.AppendItem(item.HeightMin, "HeightMin");
            }
            if ((printMask?.NAM7 ?? true)
                && item.NAM7 is {} NAM7Item)
            {
                sb.AppendItem(NAM7Item, "NAM7");
            }
            if (printMask?.HeightMax ?? true)
            {
                sb.AppendItem(item.HeightMax, "HeightMax");
            }
            if ((printMask?.Weight?.Overall ?? true)
                && item.Weight is {} WeightItem)
            {
                WeightItem?.Print(sb, "Weight");
            }
            if (printMask?.SoundLevel ?? true)
            {
                sb.AppendItem(item.SoundLevel, "SoundLevel");
            }
            if ((printMask?.Sounds?.Overall ?? true)
                && item.Sounds is {} SoundsItem)
            {
                sb.AppendLine("Sounds =>");
                using (sb.Brace())
                {
                    foreach (var subItem in SoundsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.SoundsFinalize ?? true)
                && item.SoundsFinalize is {} SoundsFinalizeItem)
            {
                sb.AppendLine($"SoundsFinalize => {SpanExt.ToHexString(SoundsFinalizeItem)}");
            }
            if (printMask?.InheritsSoundsFrom ?? true)
            {
                sb.AppendItem(item.InheritsSoundsFrom.FormKeyNullable, "InheritsSoundsFrom");
            }
            if (printMask?.PowerArmorStand ?? true)
            {
                sb.AppendItem(item.PowerArmorStand.FormKeyNullable, "PowerArmorStand");
            }
            if (printMask?.DefaultOutfit ?? true)
            {
                sb.AppendItem(item.DefaultOutfit.FormKeyNullable, "DefaultOutfit");
            }
            if (printMask?.SleepingOutfit ?? true)
            {
                sb.AppendItem(item.SleepingOutfit.FormKeyNullable, "SleepingOutfit");
            }
            if (printMask?.DefaultPackageList ?? true)
            {
                sb.AppendItem(item.DefaultPackageList.FormKeyNullable, "DefaultPackageList");
            }
            if (printMask?.CrimeFaction ?? true)
            {
                sb.AppendItem(item.CrimeFaction.FormKeyNullable, "CrimeFaction");
            }
            if (printMask?.HeadTexture ?? true)
            {
                sb.AppendItem(item.HeadTexture.FormKeyNullable, "HeadTexture");
            }
            if ((printMask?.TextureLighting ?? true)
                && item.TextureLighting is {} TextureLightingItem)
            {
                sb.AppendItem(TextureLightingItem, "TextureLighting");
            }
            if (printMask?.Morphs?.Overall ?? true)
            {
                sb.AppendLine("Morphs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Morphs)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.FaceTintingLayers?.Overall ?? true)
            {
                sb.AppendLine("FaceTintingLayers =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.FaceTintingLayers)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.BodyMorphRegionValues?.Overall ?? true)
                && item.BodyMorphRegionValues is {} BodyMorphRegionValuesItem)
            {
                BodyMorphRegionValuesItem?.Print(sb, "BodyMorphRegionValues");
            }
            if (printMask?.FaceMorphs?.Overall ?? true)
            {
                sb.AppendLine("FaceMorphs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.FaceMorphs)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.FacialMorphIntensity ?? true)
                && item.FacialMorphIntensity is {} FacialMorphIntensityItem)
            {
                sb.AppendItem(FacialMorphIntensityItem, "FacialMorphIntensity");
            }
            if ((printMask?.ActivateTextOverride ?? true)
                && item.ActivateTextOverride is {} ActivateTextOverrideItem)
            {
                sb.AppendItem(ActivateTextOverrideItem, "ActivateTextOverride");
            }
        }
        
        public static Npc_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Npc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Npc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Npc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Npc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Npc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Npc_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (Npc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Npc_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Npc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcGetter? lhs,
            INpcGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.PreviewTransform) ?? true))
            {
                if (!lhs.PreviewTransform.Equals(rhs.PreviewTransform)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.AnimationSound) ?? true))
            {
                if (!lhs.AnimationSound.Equals(rhs.AnimationSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.XpValueOffset) ?? true))
            {
                if (lhs.XpValueOffset != rhs.XpValueOffset) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Level) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Level, rhs.Level, out var lhsLevel, out var rhsLevel, out var isLevelEqual))
                {
                    if (!((ANpcLevelCommon)((IANpcLevelGetter)lhsLevel).CommonInstance()!).Equals(lhsLevel, rhsLevel, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Level))) return false;
                }
                else if (!isLevelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.CalcMinLevel) ?? true))
            {
                if (lhs.CalcMinLevel != rhs.CalcMinLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.CalcMaxLevel) ?? true))
            {
                if (lhs.CalcMaxLevel != rhs.CalcMaxLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.DispositionBase) ?? true))
            {
                if (lhs.DispositionBase != rhs.DispositionBase) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.UseTemplateActors) ?? true))
            {
                if (lhs.UseTemplateActors != rhs.UseTemplateActors) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.BleedoutOverride) ?? true))
            {
                if (lhs.BleedoutOverride != rhs.BleedoutOverride) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Factions) ?? true))
            {
                if (!lhs.Factions.SequenceEqual(rhs.Factions, (l, r) => ((RankPlacementCommon)((IRankPlacementGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Factions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.DeathItem) ?? true))
            {
                if (!lhs.DeathItem.Equals(rhs.DeathItem)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Voice) ?? true))
            {
                if (!lhs.Voice.Equals(rhs.Voice)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.DefaultTemplate) ?? true))
            {
                if (!lhs.DefaultTemplate.Equals(rhs.DefaultTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.LegendaryTemplate) ?? true))
            {
                if (!lhs.LegendaryTemplate.Equals(rhs.LegendaryTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.LegendaryChance) ?? true))
            {
                if (!lhs.LegendaryChance.Equals(rhs.LegendaryChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.TemplateActors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TemplateActors, rhs.TemplateActors, out var lhsTemplateActors, out var rhsTemplateActors, out var isTemplateActorsEqual))
                {
                    if (!((TemplateActorsCommon)((ITemplateActorsGetter)lhsTemplateActors).CommonInstance()!).Equals(lhsTemplateActors, rhsTemplateActors, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.TemplateActors))) return false;
                }
                else if (!isTemplateActorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Race) ?? true))
            {
                if (!lhs.Race.Equals(rhs.Race)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.ActorEffect) ?? true))
            {
                if (!lhs.ActorEffect.SequenceEqualNullable(rhs.ActorEffect)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Destructible) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Destructible, rhs.Destructible, out var lhsDestructible, out var rhsDestructible, out var isDestructibleEqual))
                {
                    if (!((DestructibleCommon)((IDestructibleGetter)lhsDestructible).CommonInstance()!).Equals(lhsDestructible, rhsDestructible, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Destructible))) return false;
                }
                else if (!isDestructibleEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Skin) ?? true))
            {
                if (!lhs.Skin.Equals(rhs.Skin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FarAwayModel) ?? true))
            {
                if (!lhs.FarAwayModel.Equals(rhs.FarAwayModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.AttackRace) ?? true))
            {
                if (!lhs.AttackRace.Equals(rhs.AttackRace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Attacks) ?? true))
            {
                if (!lhs.Attacks.SequenceEqual(rhs.Attacks, (l, r) => ((AttackCommon)((IAttackGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Attacks)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.SpectatorOverridePackageList) ?? true))
            {
                if (!lhs.SpectatorOverridePackageList.Equals(rhs.SpectatorOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.ObserveDeadBodyOverridePackageList) ?? true))
            {
                if (!lhs.ObserveDeadBodyOverridePackageList.Equals(rhs.ObserveDeadBodyOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.GuardWarnOverridePackageList) ?? true))
            {
                if (!lhs.GuardWarnOverridePackageList.Equals(rhs.GuardWarnOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatOverridePackageList) ?? true))
            {
                if (!lhs.CombatOverridePackageList.Equals(rhs.CombatOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FollowerCommandPackageList) ?? true))
            {
                if (!lhs.FollowerCommandPackageList.Equals(rhs.FollowerCommandPackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FollowerElevatorPackageList) ?? true))
            {
                if (!lhs.FollowerElevatorPackageList.Equals(rhs.FollowerElevatorPackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Perks) ?? true))
            {
                if (!lhs.Perks.SequenceEqualNullable(rhs.Perks, (l, r) => ((PerkPlacementCommon)((IPerkPlacementGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Perks)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqualNullable(rhs.Properties, (l, r) => ((ObjectPropertyCommon)((IObjectPropertyGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Properties)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.ForcedLocRefType) ?? true))
            {
                if (!lhs.ForcedLocRefType.Equals(rhs.ForcedLocRefType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.NativeTerminal) ?? true))
            {
                if (!lhs.NativeTerminal.Equals(rhs.NativeTerminal)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Items) ?? true))
            {
                if (!lhs.Items.SequenceEqualNullable(rhs.Items, (l, r) => ((ContainerEntryCommon)((IContainerEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Items)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Aggression) ?? true))
            {
                if (lhs.Aggression != rhs.Aggression) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Confidence) ?? true))
            {
                if (lhs.Confidence != rhs.Confidence) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.EnergyLevel) ?? true))
            {
                if (lhs.EnergyLevel != rhs.EnergyLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Responsibility) ?? true))
            {
                if (lhs.Responsibility != rhs.Responsibility) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Mood) ?? true))
            {
                if (lhs.Mood != rhs.Mood) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Assistance) ?? true))
            {
                if (lhs.Assistance != rhs.Assistance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.AggroRadiusBehaviorEnabled) ?? true))
            {
                if (lhs.AggroRadiusBehaviorEnabled != rhs.AggroRadiusBehaviorEnabled) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.AggroRadiusWarn) ?? true))
            {
                if (lhs.AggroRadiusWarn != rhs.AggroRadiusWarn) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.AggroRadiusWarnOrAttack) ?? true))
            {
                if (lhs.AggroRadiusWarnOrAttack != rhs.AggroRadiusWarnOrAttack) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.AggroRadiusAttack) ?? true))
            {
                if (lhs.AggroRadiusAttack != rhs.AggroRadiusAttack) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.NoSlowApproach) ?? true))
            {
                if (lhs.NoSlowApproach != rhs.NoSlowApproach) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Packages) ?? true))
            {
                if (!lhs.Packages.SequenceEqualNullable(rhs.Packages)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.AttachParentSlots) ?? true))
            {
                if (!lhs.AttachParentSlots.SequenceEqualNullable(rhs.AttachParentSlots)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.ObjectTemplates) ?? true))
            {
                if (!lhs.ObjectTemplates.SequenceEqualNullable(rhs.ObjectTemplates, (l, r) => ((ObjectTemplateCommon<Npc.Property>)((IObjectTemplateGetter<Npc.Property>)l).CommonInstance(typeof(Npc.Property))!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.ObjectTemplates)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Class) ?? true))
            {
                if (!lhs.Class.Equals(rhs.Class)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.ShortName) ?? true))
            {
                if (!object.Equals(lhs.ShortName, rhs.ShortName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.CalculatedHealth) ?? true))
            {
                if (lhs.CalculatedHealth != rhs.CalculatedHealth) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.CalculatedActionPoints) ?? true))
            {
                if (lhs.CalculatedActionPoints != rhs.CalculatedActionPoints) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FarAwayModelDistance) ?? true))
            {
                if (lhs.FarAwayModelDistance != rhs.FarAwayModelDistance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.GearedUpWeapons) ?? true))
            {
                if (lhs.GearedUpWeapons != rhs.GearedUpWeapons) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Unused) ?? true))
            {
                if (lhs.Unused != rhs.Unused) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.HeadParts) ?? true))
            {
                if (!lhs.HeadParts.SequenceEqualNullable(rhs.HeadParts)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.HairColor) ?? true))
            {
                if (!lhs.HairColor.Equals(rhs.HairColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FacialHairColor) ?? true))
            {
                if (!lhs.FacialHairColor.Equals(rhs.FacialHairColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatStyle) ?? true))
            {
                if (!lhs.CombatStyle.Equals(rhs.CombatStyle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.GiftFilter) ?? true))
            {
                if (!lhs.GiftFilter.Equals(rhs.GiftFilter)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.NAM5) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NAM5, rhs.NAM5)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.HeightMin) ?? true))
            {
                if (!lhs.HeightMin.EqualsWithin(rhs.HeightMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.NAM7) ?? true))
            {
                if (!lhs.NAM7.EqualsWithin(rhs.NAM7)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.HeightMax) ?? true))
            {
                if (!lhs.HeightMax.EqualsWithin(rhs.HeightMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Weight) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Weight, rhs.Weight, out var lhsWeight, out var rhsWeight, out var isWeightEqual))
                {
                    if (!((NpcWeightCommon)((INpcWeightGetter)lhsWeight).CommonInstance()!).Equals(lhsWeight, rhsWeight, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Weight))) return false;
                }
                else if (!isWeightEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.SoundLevel) ?? true))
            {
                if (lhs.SoundLevel != rhs.SoundLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Sounds) ?? true))
            {
                if (!lhs.Sounds.SequenceEqualNullable(rhs.Sounds, (l, r) => ((NpcSoundCommon)((INpcSoundGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Sounds)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.SoundsFinalize) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.SoundsFinalize, rhs.SoundsFinalize)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.InheritsSoundsFrom) ?? true))
            {
                if (!lhs.InheritsSoundsFrom.Equals(rhs.InheritsSoundsFrom)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.PowerArmorStand) ?? true))
            {
                if (!lhs.PowerArmorStand.Equals(rhs.PowerArmorStand)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.DefaultOutfit) ?? true))
            {
                if (!lhs.DefaultOutfit.Equals(rhs.DefaultOutfit)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.SleepingOutfit) ?? true))
            {
                if (!lhs.SleepingOutfit.Equals(rhs.SleepingOutfit)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.DefaultPackageList) ?? true))
            {
                if (!lhs.DefaultPackageList.Equals(rhs.DefaultPackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.CrimeFaction) ?? true))
            {
                if (!lhs.CrimeFaction.Equals(rhs.CrimeFaction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.HeadTexture) ?? true))
            {
                if (!lhs.HeadTexture.Equals(rhs.HeadTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.TextureLighting) ?? true))
            {
                if (!lhs.TextureLighting.ColorOnlyEquals(rhs.TextureLighting)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Morphs) ?? true))
            {
                if (!lhs.Morphs.SequenceEqual(rhs.Morphs, (l, r) => ((NpcMorphCommon)((INpcMorphGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Morphs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceTintingLayers) ?? true))
            {
                if (!lhs.FaceTintingLayers.SequenceEqual(rhs.FaceTintingLayers, (l, r) => ((NpcFaceTintingLayerCommon)((INpcFaceTintingLayerGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.FaceTintingLayers)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.BodyMorphRegionValues) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BodyMorphRegionValues, rhs.BodyMorphRegionValues, out var lhsBodyMorphRegionValues, out var rhsBodyMorphRegionValues, out var isBodyMorphRegionValuesEqual))
                {
                    if (!((NpcBodyMorphRegionValuesCommon)((INpcBodyMorphRegionValuesGetter)lhsBodyMorphRegionValues).CommonInstance()!).Equals(lhsBodyMorphRegionValues, rhsBodyMorphRegionValues, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.BodyMorphRegionValues))) return false;
                }
                else if (!isBodyMorphRegionValuesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceMorphs) ?? true))
            {
                if (!lhs.FaceMorphs.SequenceEqual(rhs.FaceMorphs, (l, r) => ((NpcFaceMorphCommon)((INpcFaceMorphGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.FaceMorphs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FacialMorphIntensity) ?? true))
            {
                if (!lhs.FacialMorphIntensity.EqualsWithin(rhs.FacialMorphIntensity)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.ActivateTextOverride) ?? true))
            {
                if (!object.Equals(lhs.ActivateTextOverride, rhs.ActivateTextOverride)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (INpcGetter?)lhs,
                rhs: rhs as INpcGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (INpcGetter?)lhs,
                rhs: rhs as INpcGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(INpcGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            hash.Add(item.PreviewTransform);
            hash.Add(item.AnimationSound);
            hash.Add(item.Flags);
            hash.Add(item.XpValueOffset);
            hash.Add(item.Level);
            hash.Add(item.CalcMinLevel);
            hash.Add(item.CalcMaxLevel);
            hash.Add(item.DispositionBase);
            hash.Add(item.UseTemplateActors);
            hash.Add(item.BleedoutOverride);
            hash.Add(item.Unknown);
            hash.Add(item.Factions);
            hash.Add(item.DeathItem);
            hash.Add(item.Voice);
            hash.Add(item.DefaultTemplate);
            hash.Add(item.LegendaryTemplate);
            hash.Add(item.LegendaryChance);
            if (item.TemplateActors is {} TemplateActorsitem)
            {
                hash.Add(TemplateActorsitem);
            }
            hash.Add(item.Race);
            hash.Add(item.ActorEffect);
            if (item.Destructible is {} Destructibleitem)
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.Skin);
            hash.Add(item.FarAwayModel);
            hash.Add(item.AttackRace);
            hash.Add(item.Attacks);
            hash.Add(item.SpectatorOverridePackageList);
            hash.Add(item.ObserveDeadBodyOverridePackageList);
            hash.Add(item.GuardWarnOverridePackageList);
            hash.Add(item.CombatOverridePackageList);
            hash.Add(item.FollowerCommandPackageList);
            hash.Add(item.FollowerElevatorPackageList);
            hash.Add(item.Perks);
            hash.Add(item.Properties);
            hash.Add(item.ForcedLocRefType);
            hash.Add(item.NativeTerminal);
            hash.Add(item.Items);
            hash.Add(item.Aggression);
            hash.Add(item.Confidence);
            hash.Add(item.EnergyLevel);
            hash.Add(item.Responsibility);
            hash.Add(item.Mood);
            hash.Add(item.Assistance);
            hash.Add(item.AggroRadiusBehaviorEnabled);
            hash.Add(item.AggroRadiusWarn);
            hash.Add(item.AggroRadiusWarnOrAttack);
            hash.Add(item.AggroRadiusAttack);
            hash.Add(item.NoSlowApproach);
            hash.Add(item.Packages);
            hash.Add(item.Keywords);
            hash.Add(item.AttachParentSlots);
            hash.Add(item.ObjectTemplates);
            hash.Add(item.Class);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.ShortName is {} ShortNameitem)
            {
                hash.Add(ShortNameitem);
            }
            hash.Add(item.CalculatedHealth);
            hash.Add(item.CalculatedActionPoints);
            hash.Add(item.FarAwayModelDistance);
            hash.Add(item.GearedUpWeapons);
            hash.Add(item.Unused);
            hash.Add(item.HeadParts);
            hash.Add(item.HairColor);
            hash.Add(item.FacialHairColor);
            hash.Add(item.CombatStyle);
            hash.Add(item.GiftFilter);
            if (item.NAM5 is {} NAM5Item)
            {
                hash.Add(NAM5Item);
            }
            hash.Add(item.HeightMin);
            if (item.NAM7 is {} NAM7item)
            {
                hash.Add(NAM7item);
            }
            hash.Add(item.HeightMax);
            if (item.Weight is {} Weightitem)
            {
                hash.Add(Weightitem);
            }
            hash.Add(item.SoundLevel);
            hash.Add(item.Sounds);
            if (item.SoundsFinalize is {} SoundsFinalizeItem)
            {
                hash.Add(SoundsFinalizeItem);
            }
            hash.Add(item.InheritsSoundsFrom);
            hash.Add(item.PowerArmorStand);
            hash.Add(item.DefaultOutfit);
            hash.Add(item.SleepingOutfit);
            hash.Add(item.DefaultPackageList);
            hash.Add(item.CrimeFaction);
            hash.Add(item.HeadTexture);
            if (item.TextureLighting is {} TextureLightingitem)
            {
                hash.Add(TextureLightingitem);
            }
            hash.Add(item.Morphs);
            hash.Add(item.FaceTintingLayers);
            if (item.BodyMorphRegionValues is {} BodyMorphRegionValuesitem)
            {
                hash.Add(BodyMorphRegionValuesitem);
            }
            hash.Add(item.FaceMorphs);
            if (item.FacialMorphIntensity is {} FacialMorphIntensityitem)
            {
                hash.Add(FacialMorphIntensityitem);
            }
            if (item.ActivateTextOverride is {} ActivateTextOverrideitem)
            {
                hash.Add(ActivateTextOverrideitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (INpcGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (INpcGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Npc.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INpcGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.PreviewTransform, out var PreviewTransformInfo))
            {
                yield return PreviewTransformInfo;
            }
            if (FormLinkInformation.TryFactory(obj.AnimationSound, out var AnimationSoundInfo))
            {
                yield return AnimationSoundInfo;
            }
            foreach (var item in obj.Factions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.DeathItem, out var DeathItemInfo))
            {
                yield return DeathItemInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Voice, out var VoiceInfo))
            {
                yield return VoiceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DefaultTemplate, out var DefaultTemplateInfo))
            {
                yield return DefaultTemplateInfo;
            }
            if (FormLinkInformation.TryFactory(obj.LegendaryTemplate, out var LegendaryTemplateInfo))
            {
                yield return LegendaryTemplateInfo;
            }
            if (FormLinkInformation.TryFactory(obj.LegendaryChance, out var LegendaryChanceInfo))
            {
                yield return LegendaryChanceInfo;
            }
            if (obj.TemplateActors is {} TemplateActorsItems)
            {
                foreach (var item in TemplateActorsItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield return FormLinkInformation.Factory(obj.Race);
            if (obj.ActorEffect is {} ActorEffectItem)
            {
                foreach (var item in ActorEffectItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.Skin, out var SkinInfo))
            {
                yield return SkinInfo;
            }
            if (FormLinkInformation.TryFactory(obj.FarAwayModel, out var FarAwayModelInfo))
            {
                yield return FarAwayModelInfo;
            }
            if (FormLinkInformation.TryFactory(obj.AttackRace, out var AttackRaceInfo))
            {
                yield return AttackRaceInfo;
            }
            foreach (var item in obj.Attacks.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.SpectatorOverridePackageList, out var SpectatorOverridePackageListInfo))
            {
                yield return SpectatorOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ObserveDeadBodyOverridePackageList, out var ObserveDeadBodyOverridePackageListInfo))
            {
                yield return ObserveDeadBodyOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.GuardWarnOverridePackageList, out var GuardWarnOverridePackageListInfo))
            {
                yield return GuardWarnOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CombatOverridePackageList, out var CombatOverridePackageListInfo))
            {
                yield return CombatOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.FollowerCommandPackageList, out var FollowerCommandPackageListInfo))
            {
                yield return FollowerCommandPackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.FollowerElevatorPackageList, out var FollowerElevatorPackageListInfo))
            {
                yield return FollowerElevatorPackageListInfo;
            }
            if (obj.Perks is {} PerksItem)
            {
                foreach (var item in PerksItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Properties is {} PropertiesItem)
            {
                foreach (var item in PropertiesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.ForcedLocRefType, out var ForcedLocRefTypeInfo))
            {
                yield return ForcedLocRefTypeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.NativeTerminal, out var NativeTerminalInfo))
            {
                yield return NativeTerminalInfo;
            }
            if (obj.Items is {} ItemsItem)
            {
                foreach (var item in ItemsItem.WhereCastable<IContainerEntryGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Packages)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.AttachParentSlots is {} AttachParentSlotsItem)
            {
                foreach (var item in AttachParentSlotsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ObjectTemplates is {} ObjectTemplatesItem)
            {
                foreach (var item in ObjectTemplatesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.Class, out var ClassInfo))
            {
                yield return ClassInfo;
            }
            foreach (var item in obj.HeadParts)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.HairColor, out var HairColorInfo))
            {
                yield return HairColorInfo;
            }
            if (FormLinkInformation.TryFactory(obj.FacialHairColor, out var FacialHairColorInfo))
            {
                yield return FacialHairColorInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CombatStyle, out var CombatStyleInfo))
            {
                yield return CombatStyleInfo;
            }
            if (FormLinkInformation.TryFactory(obj.GiftFilter, out var GiftFilterInfo))
            {
                yield return GiftFilterInfo;
            }
            if (obj.Sounds is {} SoundsItem)
            {
                foreach (var item in SoundsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.InheritsSoundsFrom, out var InheritsSoundsFromInfo))
            {
                yield return InheritsSoundsFromInfo;
            }
            if (FormLinkInformation.TryFactory(obj.PowerArmorStand, out var PowerArmorStandInfo))
            {
                yield return PowerArmorStandInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DefaultOutfit, out var DefaultOutfitInfo))
            {
                yield return DefaultOutfitInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SleepingOutfit, out var SleepingOutfitInfo))
            {
                yield return SleepingOutfitInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DefaultPackageList, out var DefaultPackageListInfo))
            {
                yield return DefaultPackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CrimeFaction, out var CrimeFactionInfo))
            {
                yield return CrimeFactionInfo;
            }
            if (FormLinkInformation.TryFactory(obj.HeadTexture, out var HeadTextureInfo))
            {
                yield return HeadTextureInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public Npc Duplicate(
            INpcGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Npc(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INpcGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INpcGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class NpcSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly NpcSetterTranslationCommon Instance = new NpcSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcInternal item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            INpc item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Npc_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.PreviewTransform) ?? true))
            {
                item.PreviewTransform.SetTo(rhs.PreviewTransform.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AnimationSound) ?? true))
            {
                item.AnimationSound.SetTo(rhs.AnimationSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.XpValueOffset) ?? true))
            {
                item.XpValueOffset = rhs.XpValueOffset;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Level) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Level);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Level) ?? true))
                    {
                        item.Level = rhs.Level.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Npc_FieldIndex.Level),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CalcMinLevel) ?? true))
            {
                item.CalcMinLevel = rhs.CalcMinLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CalcMaxLevel) ?? true))
            {
                item.CalcMaxLevel = rhs.CalcMaxLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DispositionBase) ?? true))
            {
                item.DispositionBase = rhs.DispositionBase;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.UseTemplateActors) ?? true))
            {
                item.UseTemplateActors = rhs.UseTemplateActors;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.BleedoutOverride) ?? true))
            {
                item.BleedoutOverride = rhs.BleedoutOverride;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Factions);
                try
                {
                    item.Factions.SetTo(
                        rhs.Factions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DeathItem) ?? true))
            {
                item.DeathItem.SetTo(rhs.DeathItem.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Voice) ?? true))
            {
                item.Voice.SetTo(rhs.Voice.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DefaultTemplate) ?? true))
            {
                item.DefaultTemplate.SetTo(rhs.DefaultTemplate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.LegendaryTemplate) ?? true))
            {
                item.LegendaryTemplate.SetTo(rhs.LegendaryTemplate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.LegendaryChance) ?? true))
            {
                item.LegendaryChance.SetTo(rhs.LegendaryChance.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.TemplateActors) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.TemplateActors);
                try
                {
                    if(rhs.TemplateActors is {} rhsTemplateActors)
                    {
                        item.TemplateActors = rhsTemplateActors.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.TemplateActors));
                    }
                    else
                    {
                        item.TemplateActors = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Race) ?? true))
            {
                item.Race.SetTo(rhs.Race.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ActorEffect) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.ActorEffect);
                try
                {
                    if ((rhs.ActorEffect != null))
                    {
                        item.ActorEffect = 
                            rhs.ActorEffect
                                .Select(b => (IFormLinkGetter<ISpellRecordGetter>)new FormLink<ISpellRecordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
                    }
                    else
                    {
                        item.ActorEffect = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible is {} rhsDestructible)
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Skin) ?? true))
            {
                item.Skin.SetTo(rhs.Skin.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FarAwayModel) ?? true))
            {
                item.FarAwayModel.SetTo(rhs.FarAwayModel.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AttackRace) ?? true))
            {
                item.AttackRace.SetTo(rhs.AttackRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Attacks) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Attacks);
                try
                {
                    item.Attacks.SetTo(
                        rhs.Attacks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.SpectatorOverridePackageList) ?? true))
            {
                item.SpectatorOverridePackageList.SetTo(rhs.SpectatorOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ObserveDeadBodyOverridePackageList) ?? true))
            {
                item.ObserveDeadBodyOverridePackageList.SetTo(rhs.ObserveDeadBodyOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.GuardWarnOverridePackageList) ?? true))
            {
                item.GuardWarnOverridePackageList.SetTo(rhs.GuardWarnOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatOverridePackageList) ?? true))
            {
                item.CombatOverridePackageList.SetTo(rhs.CombatOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FollowerCommandPackageList) ?? true))
            {
                item.FollowerCommandPackageList.SetTo(rhs.FollowerCommandPackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FollowerElevatorPackageList) ?? true))
            {
                item.FollowerElevatorPackageList.SetTo(rhs.FollowerElevatorPackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Perks) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Perks);
                try
                {
                    if ((rhs.Perks != null))
                    {
                        item.Perks = 
                            rhs.Perks
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<PerkPlacement>();
                    }
                    else
                    {
                        item.Perks = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Properties);
                try
                {
                    if ((rhs.Properties != null))
                    {
                        item.Properties = 
                            rhs.Properties
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectProperty>();
                    }
                    else
                    {
                        item.Properties = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ForcedLocRefType) ?? true))
            {
                item.ForcedLocRefType.SetTo(rhs.ForcedLocRefType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.NativeTerminal) ?? true))
            {
                item.NativeTerminal.SetTo(rhs.NativeTerminal.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Items);
                try
                {
                    if ((rhs.Items != null))
                    {
                        item.Items = 
                            rhs.Items
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ContainerEntry>();
                    }
                    else
                    {
                        item.Items = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Aggression) ?? true))
            {
                item.Aggression = rhs.Aggression;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Confidence) ?? true))
            {
                item.Confidence = rhs.Confidence;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.EnergyLevel) ?? true))
            {
                item.EnergyLevel = rhs.EnergyLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Responsibility) ?? true))
            {
                item.Responsibility = rhs.Responsibility;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Mood) ?? true))
            {
                item.Mood = rhs.Mood;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Assistance) ?? true))
            {
                item.Assistance = rhs.Assistance;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AggroRadiusBehaviorEnabled) ?? true))
            {
                item.AggroRadiusBehaviorEnabled = rhs.AggroRadiusBehaviorEnabled;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AggroRadiusWarn) ?? true))
            {
                item.AggroRadiusWarn = rhs.AggroRadiusWarn;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AggroRadiusWarnOrAttack) ?? true))
            {
                item.AggroRadiusWarnOrAttack = rhs.AggroRadiusWarnOrAttack;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AggroRadiusAttack) ?? true))
            {
                item.AggroRadiusAttack = rhs.AggroRadiusAttack;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.NoSlowApproach) ?? true))
            {
                item.NoSlowApproach = rhs.NoSlowApproach;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Packages) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Packages);
                try
                {
                    item.Packages.SetTo(
                        rhs.Packages
                            .Select(b => (IFormLinkGetter<IPackageGetter>)new FormLink<IPackageGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AttachParentSlots) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.AttachParentSlots);
                try
                {
                    if ((rhs.AttachParentSlots != null))
                    {
                        item.AttachParentSlots = 
                            rhs.AttachParentSlots
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.AttachParentSlots = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ObjectTemplates) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.ObjectTemplates);
                try
                {
                    if ((rhs.ObjectTemplates != null))
                    {
                        item.ObjectTemplates = 
                            rhs.ObjectTemplates
                            .Select(r =>
                            {
                                return r.DeepCopy<Npc.Property>(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectTemplate<Npc.Property>>();
                    }
                    else
                    {
                        item.ObjectTemplates = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Class) ?? true))
            {
                item.Class.SetTo(rhs.Class.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ShortName) ?? true))
            {
                item.ShortName = rhs.ShortName?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CalculatedHealth) ?? true))
            {
                item.CalculatedHealth = rhs.CalculatedHealth;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CalculatedActionPoints) ?? true))
            {
                item.CalculatedActionPoints = rhs.CalculatedActionPoints;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FarAwayModelDistance) ?? true))
            {
                item.FarAwayModelDistance = rhs.FarAwayModelDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.GearedUpWeapons) ?? true))
            {
                item.GearedUpWeapons = rhs.GearedUpWeapons;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.HeadParts);
                try
                {
                    item.HeadParts.SetTo(
                        rhs.HeadParts
                            .Select(b => (IFormLinkGetter<IHeadPartGetter>)new FormLink<IHeadPartGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HairColor) ?? true))
            {
                item.HairColor.SetTo(rhs.HairColor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FacialHairColor) ?? true))
            {
                item.FacialHairColor.SetTo(rhs.FacialHairColor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatStyle) ?? true))
            {
                item.CombatStyle.SetTo(rhs.CombatStyle.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.GiftFilter) ?? true))
            {
                item.GiftFilter.SetTo(rhs.GiftFilter.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.NAM5) ?? true))
            {
                if(rhs.NAM5 is {} NAM5rhs)
                {
                    item.NAM5 = NAM5rhs.ToArray();
                }
                else
                {
                    item.NAM5 = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HeightMin) ?? true))
            {
                item.HeightMin = rhs.HeightMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.NAM7) ?? true))
            {
                item.NAM7 = rhs.NAM7;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HeightMax) ?? true))
            {
                item.HeightMax = rhs.HeightMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Weight) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Weight);
                try
                {
                    if(rhs.Weight is {} rhsWeight)
                    {
                        item.Weight = rhsWeight.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.Weight));
                    }
                    else
                    {
                        item.Weight = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.SoundLevel) ?? true))
            {
                item.SoundLevel = rhs.SoundLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Sounds);
                try
                {
                    if ((rhs.Sounds != null))
                    {
                        item.Sounds = 
                            rhs.Sounds
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<NpcSound>();
                    }
                    else
                    {
                        item.Sounds = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.SoundsFinalize) ?? true))
            {
                if(rhs.SoundsFinalize is {} SoundsFinalizerhs)
                {
                    item.SoundsFinalize = SoundsFinalizerhs.ToArray();
                }
                else
                {
                    item.SoundsFinalize = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.InheritsSoundsFrom) ?? true))
            {
                item.InheritsSoundsFrom.SetTo(rhs.InheritsSoundsFrom.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.PowerArmorStand) ?? true))
            {
                item.PowerArmorStand.SetTo(rhs.PowerArmorStand.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DefaultOutfit) ?? true))
            {
                item.DefaultOutfit.SetTo(rhs.DefaultOutfit.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.SleepingOutfit) ?? true))
            {
                item.SleepingOutfit.SetTo(rhs.SleepingOutfit.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DefaultPackageList) ?? true))
            {
                item.DefaultPackageList.SetTo(rhs.DefaultPackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CrimeFaction) ?? true))
            {
                item.CrimeFaction.SetTo(rhs.CrimeFaction.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HeadTexture) ?? true))
            {
                item.HeadTexture.SetTo(rhs.HeadTexture.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.TextureLighting) ?? true))
            {
                item.TextureLighting = rhs.TextureLighting;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Morphs) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Morphs);
                try
                {
                    item.Morphs.SetTo(
                        rhs.Morphs
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceTintingLayers) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.FaceTintingLayers);
                try
                {
                    item.FaceTintingLayers.SetTo(
                        rhs.FaceTintingLayers
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.BodyMorphRegionValues) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.BodyMorphRegionValues);
                try
                {
                    if(rhs.BodyMorphRegionValues is {} rhsBodyMorphRegionValues)
                    {
                        item.BodyMorphRegionValues = rhsBodyMorphRegionValues.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.BodyMorphRegionValues));
                    }
                    else
                    {
                        item.BodyMorphRegionValues = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceMorphs) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.FaceMorphs);
                try
                {
                    item.FaceMorphs.SetTo(
                        rhs.FaceMorphs
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FacialMorphIntensity) ?? true))
            {
                item.FacialMorphIntensity = rhs.FacialMorphIntensity;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ActivateTextOverride) ?? true))
            {
                item.ActivateTextOverride = rhs.ActivateTextOverride?.DeepCopy();
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            INpc item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpcInternal)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpc)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpcInternal)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpc)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Npc DeepCopy(
            INpcGetter item,
            Npc.TranslationMask? copyMask = null)
        {
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ((NpcSetterTranslationCommon)((INpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Npc DeepCopy(
            INpcGetter item,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ((NpcSetterTranslationCommon)((INpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Npc.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Npc DeepCopy(
            INpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ((NpcSetterTranslationCommon)((INpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Npc
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Npc_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Npc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return NpcSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class NpcBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly NpcBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            INpcGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            INpcGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PreviewTransform,
                header: translationParams.ConvertToCustom(RecordTypes.PTRN));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AnimationSound,
                header: translationParams.ConvertToCustom(RecordTypes.STCP));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.ACBS)))
            {
                NpcBinaryWriteTranslation.WriteBinaryFlags(
                    writer: writer,
                    item: item);
                writer.Write(item.XpValueOffset);
                NpcBinaryWriteTranslation.WriteBinaryLevel(
                    writer: writer,
                    item: item);
                writer.Write(item.CalcMinLevel);
                writer.Write(item.CalcMaxLevel);
                writer.Write(item.DispositionBase);
                EnumBinaryTranslation<Npc.TemplateActorType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.UseTemplateActors,
                    length: 2);
                writer.Write(item.BleedoutOverride);
                writer.Write(item.Unknown);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IRankPlacementGetter>.Instance.Write(
                writer: writer,
                items: item.Factions,
                transl: (MutagenWriter subWriter, IRankPlacementGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((RankPlacementBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DeathItem,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Voice,
                header: translationParams.ConvertToCustom(RecordTypes.VTCK));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultTemplate,
                header: translationParams.ConvertToCustom(RecordTypes.TPLT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LegendaryTemplate,
                header: translationParams.ConvertToCustom(RecordTypes.LTPT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LegendaryChance,
                header: translationParams.ConvertToCustom(RecordTypes.LTPC));
            if (item.TemplateActors is {} TemplateActorsItem)
            {
                ((TemplateActorsBinaryWriteTranslation)((IBinaryItem)TemplateActorsItem).BinaryWriteTranslator).Write(
                    item: TemplateActorsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Race,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.ActorEffect,
                counterType: RecordTypes.SPCT,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.SPLO),
                subRecordPerItem: true,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellRecordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.Destructible is {} DestructibleItem)
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Skin,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FarAwayModel,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackRace,
                header: translationParams.ConvertToCustom(RecordTypes.ATKR));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAttackGetter>.Instance.Write(
                writer: writer,
                items: item.Attacks,
                transl: (MutagenWriter subWriter, IAttackGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AttackBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpectatorOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.SPOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObserveDeadBodyOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.OCOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GuardWarnOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.GWOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.ECOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FollowerCommandPackageList,
                header: translationParams.ConvertToCustom(RecordTypes.FCPL));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FollowerElevatorPackageList,
                header: translationParams.ConvertToCustom(RecordTypes.RCLR));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IPerkPlacementGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Perks,
                counterType: RecordTypes.PRKZ,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IPerkPlacementGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((PerkPlacementBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectPropertyGetter>.Instance.Write(
                writer: writer,
                items: item.Properties,
                recordType: translationParams.ConvertToCustom(RecordTypes.PRPS),
                transl: (MutagenWriter subWriter, IObjectPropertyGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ObjectPropertyBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ForcedLocRefType,
                header: translationParams.ConvertToCustom(RecordTypes.FTYP));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NativeTerminal,
                header: translationParams.ConvertToCustom(RecordTypes.NTRM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IContainerEntryGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Items,
                counterType: RecordTypes.COCT,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IContainerEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ContainerEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.AIDT)))
            {
                EnumBinaryTranslation<Npc.AggressionType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Aggression,
                    length: 1);
                EnumBinaryTranslation<Npc.ConfidenceType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Confidence,
                    length: 1);
                writer.Write(item.EnergyLevel);
                EnumBinaryTranslation<Npc.ResponsibilityType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Responsibility,
                    length: 1);
                EnumBinaryTranslation<Npc.MoodType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Mood,
                    length: 1);
                EnumBinaryTranslation<Npc.AssistanceType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Assistance,
                    length: 1);
                writer.Write(item.AggroRadiusBehaviorEnabled, length: 2);
                writer.Write(item.AggroRadiusWarn);
                writer.Write(item.AggroRadiusWarnOrAttack);
                writer.Write(item.AggroRadiusAttack);
                writer.Write(item.NoSlowApproach, length: 4);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPackageGetter>>.Instance.Write(
                writer: writer,
                items: item.Packages,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPackageGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.PKID));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.AttachParentSlots,
                recordType: translationParams.ConvertToCustom(RecordTypes.APPR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectTemplateGetter<Npc.Property>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.ObjectTemplates,
                counterType: RecordTypes.OBTE,
                counterLength: 4,
                endMarker: RecordTypes.STOP,
                transl: (MutagenWriter subWriter, IObjectTemplateGetter<Npc.Property> subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ObjectTemplateBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write<Npc.Property>(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Class,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ShortName,
                header: translationParams.ConvertToCustom(RecordTypes.SHRT),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            using (HeaderExport.Subrecord(writer, RecordTypes.DATA)) { }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DNAM)))
            {
                writer.Write(item.CalculatedHealth);
                writer.Write(item.CalculatedActionPoints);
                writer.Write(item.FarAwayModelDistance);
                writer.Write(item.GearedUpWeapons);
                writer.Write(item.Unused);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IHeadPartGetter>>.Instance.Write(
                writer: writer,
                items: item.HeadParts,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IHeadPartGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.PNAM));
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HairColor,
                header: translationParams.ConvertToCustom(RecordTypes.HCLF));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FacialHairColor,
                header: translationParams.ConvertToCustom(RecordTypes.BCLF));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatStyle,
                header: translationParams.ConvertToCustom(RecordTypes.ZNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GiftFilter,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NAM5,
                header: translationParams.ConvertToCustom(RecordTypes.NAM5));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HeightMin,
                header: translationParams.ConvertToCustom(RecordTypes.NAM6));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NAM7,
                header: translationParams.ConvertToCustom(RecordTypes.NAM7));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HeightMax,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4));
            if (item.Weight is {} WeightItem)
            {
                ((NpcWeightBinaryWriteTranslation)((IBinaryItem)WeightItem).BinaryWriteTranslator).Write(
                    item: WeightItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            EnumBinaryTranslation<SoundLevel, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.SoundLevel,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.NAM8));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<INpcSoundGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Sounds,
                counterType: RecordTypes.CS2H,
                counterLength: 4,
                endMarker: RecordTypes.CS2E,
                transl: (MutagenWriter subWriter, INpcSoundGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((NpcSoundBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SoundsFinalize,
                header: translationParams.ConvertToCustom(RecordTypes.CS2F));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InheritsSoundsFrom,
                header: translationParams.ConvertToCustom(RecordTypes.CSCR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PowerArmorStand,
                header: translationParams.ConvertToCustom(RecordTypes.PFRN));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultOutfit,
                header: translationParams.ConvertToCustom(RecordTypes.DOFT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SleepingOutfit,
                header: translationParams.ConvertToCustom(RecordTypes.SOFT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultPackageList,
                header: translationParams.ConvertToCustom(RecordTypes.DPLT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CrimeFaction,
                header: translationParams.ConvertToCustom(RecordTypes.CRIF));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HeadTexture,
                header: translationParams.ConvertToCustom(RecordTypes.FTST));
            ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureLighting,
                header: translationParams.ConvertToCustom(RecordTypes.QNAM),
                binaryType: ColorBinaryType.AlphaFloat);
            NpcBinaryWriteTranslation.WriteBinaryMorphParsing(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<INpcFaceTintingLayerGetter>.Instance.Write(
                writer: writer,
                items: item.FaceTintingLayers,
                transl: (MutagenWriter subWriter, INpcFaceTintingLayerGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((NpcFaceTintingLayerBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.BodyMorphRegionValues is {} BodyMorphRegionValuesItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.MRSV))
                {
                    ((NpcBodyMorphRegionValuesBinaryWriteTranslation)((IBinaryItem)BodyMorphRegionValuesItem).BinaryWriteTranslator).Write(
                        item: BodyMorphRegionValuesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<INpcFaceMorphGetter>.Instance.Write(
                writer: writer,
                items: item.FaceMorphs,
                transl: (MutagenWriter subWriter, INpcFaceMorphGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((NpcFaceMorphBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FacialMorphIntensity,
                header: translationParams.ConvertToCustom(RecordTypes.FMIN));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ActivateTextOverride,
                header: translationParams.ConvertToCustom(RecordTypes.ATTX),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
        }

        public static partial void WriteBinaryFlagsCustom(
            MutagenWriter writer,
            INpcGetter item);

        public static void WriteBinaryFlags(
            MutagenWriter writer,
            INpcGetter item)
        {
            WriteBinaryFlagsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryLevelCustom(
            MutagenWriter writer,
            INpcGetter item);

        public static void WriteBinaryLevel(
            MutagenWriter writer,
            INpcGetter item)
        {
            WriteBinaryLevelCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryMorphParsingCustom(
            MutagenWriter writer,
            INpcGetter item);

        public static void WriteBinaryMorphParsing(
            MutagenWriter writer,
            INpcGetter item)
        {
            WriteBinaryMorphParsingCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            INpcGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.NPC_,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NpcBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly NpcBinaryCreateTranslation Instance = new NpcBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.NPC_;
        public static void FillBinaryStructs(
            INpcInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            INpcInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Npc_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.PTRN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PreviewTransform.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.PreviewTransform;
                }
                case RecordTypeInts.STCP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.AnimationSound;
                }
                case RecordTypeInts.ACBS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    NpcBinaryCreateTranslation.FillBinaryFlagsCustom(
                        frame: dataFrame,
                        item: item);
                    if (dataFrame.Remaining < 2) return null;
                    item.XpValueOffset = dataFrame.ReadInt16();
                    NpcBinaryCreateTranslation.FillBinaryLevelCustom(
                        frame: dataFrame,
                        item: item);
                    if (dataFrame.Remaining < 2) return null;
                    item.CalcMinLevel = dataFrame.ReadInt16();
                    if (dataFrame.Remaining < 2) return null;
                    item.CalcMaxLevel = dataFrame.ReadInt16();
                    if (dataFrame.Remaining < 2) return null;
                    item.DispositionBase = dataFrame.ReadInt16();
                    if (dataFrame.Remaining < 2) return null;
                    item.UseTemplateActors = EnumBinaryTranslation<Npc.TemplateActorType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 2);
                    if (dataFrame.Remaining < 2) return null;
                    item.BleedoutOverride = dataFrame.ReadInt16();
                    if (dataFrame.Remaining < 2) return null;
                    item.Unknown = dataFrame.ReadInt16();
                    return (int)Npc_FieldIndex.Unknown;
                }
                case RecordTypeInts.SNAM:
                {
                    item.Factions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<RankPlacement>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: RankPlacement_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: RankPlacement.TryCreateFromBinary));
                    return (int)Npc_FieldIndex.Factions;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DeathItem.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.DeathItem;
                }
                case RecordTypeInts.VTCK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Voice.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.Voice;
                }
                case RecordTypeInts.TPLT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.DefaultTemplate;
                }
                case RecordTypeInts.LTPT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LegendaryTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.LegendaryTemplate;
                }
                case RecordTypeInts.LTPC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LegendaryChance.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.LegendaryChance;
                }
                case RecordTypeInts.TPTA:
                {
                    item.TemplateActors = Mutagen.Bethesda.Fallout4.TemplateActors.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.TemplateActors;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Race.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.Race;
                }
                case RecordTypeInts.SPLO:
                case RecordTypeInts.SPCT:
                {
                    item.ActorEffect = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.SPCT),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.SPLO),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
                    return (int)Npc_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSTD:
                {
                    item.Destructible = Mutagen.Bethesda.Fallout4.Destructible.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Npc_FieldIndex.Destructible;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Skin.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.Skin;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FarAwayModel.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.FarAwayModel;
                }
                case RecordTypeInts.ATKR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttackRace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.AttackRace;
                }
                case RecordTypeInts.ATKD:
                case RecordTypeInts.ATKE:
                case RecordTypeInts.ATKW:
                case RecordTypeInts.ATKS:
                case RecordTypeInts.ATKT:
                {
                    item.Attacks.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Attack>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Attack_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Attack.TryCreateFromBinary));
                    return (int)Npc_FieldIndex.Attacks;
                }
                case RecordTypeInts.SPOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpectatorOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.SpectatorOverridePackageList;
                }
                case RecordTypeInts.OCOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObserveDeadBodyOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.ObserveDeadBodyOverridePackageList;
                }
                case RecordTypeInts.GWOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GuardWarnOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.GuardWarnOverridePackageList;
                }
                case RecordTypeInts.ECOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.CombatOverridePackageList;
                }
                case RecordTypeInts.FCPL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FollowerCommandPackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.FollowerCommandPackageList;
                }
                case RecordTypeInts.RCLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FollowerElevatorPackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.FollowerElevatorPackageList;
                }
                case RecordTypeInts.PRKR:
                case RecordTypeInts.PRKZ:
                {
                    item.Perks = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<PerkPlacement>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.PRKZ,
                            triggeringRecord: PerkPlacement_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: PerkPlacement.TryCreateFromBinary)
                        .CastExtendedList<PerkPlacement>();
                    return (int)Npc_FieldIndex.Perks;
                }
                case RecordTypeInts.PRPS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Properties = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectProperty>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ObjectProperty.TryCreateFromBinary)
                        .CastExtendedList<ObjectProperty>();
                    return (int)Npc_FieldIndex.Properties;
                }
                case RecordTypeInts.FTYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ForcedLocRefType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.ForcedLocRefType;
                }
                case RecordTypeInts.NTRM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NativeTerminal.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.NativeTerminal;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    item.Items = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ContainerEntry>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.COCT,
                            triggeringRecord: ContainerEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ContainerEntry.TryCreateFromBinary)
                        .CastExtendedList<ContainerEntry>();
                    return (int)Npc_FieldIndex.Items;
                }
                case RecordTypeInts.AIDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.Aggression = EnumBinaryTranslation<Npc.AggressionType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.Confidence = EnumBinaryTranslation<Npc.ConfidenceType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.EnergyLevel = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.Responsibility = EnumBinaryTranslation<Npc.ResponsibilityType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.Mood = EnumBinaryTranslation<Npc.MoodType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.Assistance = EnumBinaryTranslation<Npc.AssistanceType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 2) return null;
                    item.AggroRadiusBehaviorEnabled = BooleanBinaryTranslation<MutagenFrame>.Instance.Parse(
                        reader: dataFrame,
                        byteLength: 2,
                        importantByteLength: 1);
                    if (dataFrame.Remaining < 4) return null;
                    item.AggroRadiusWarn = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.AggroRadiusWarnOrAttack = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.AggroRadiusAttack = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.NoSlowApproach = BooleanBinaryTranslation<MutagenFrame>.Instance.Parse(
                        reader: dataFrame,
                        byteLength: 4,
                        importantByteLength: 1);
                    return (int)Npc_FieldIndex.NoSlowApproach;
                }
                case RecordTypeInts.PKID:
                {
                    item.Packages.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPackageGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.PKID),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Npc_FieldIndex.Packages;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Npc_FieldIndex.Keywords;
                }
                case RecordTypeInts.APPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttachParentSlots = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Npc_FieldIndex.AttachParentSlots;
                }
                case RecordTypeInts.OBTE:
                {
                    item.ObjectTemplates = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectTemplate<Npc.Property>>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.OBTE,
                            triggeringRecord: ObjectTemplate_Registration.TriggerSpecs,
                            endMarker: RecordTypes.STOP,
                            translationParams: translationParams,
                            transl: ObjectTemplate<Npc.Property>.TryCreateFromBinary)
                        .CastExtendedList<ObjectTemplate<Npc.Property>>();
                    return (int)Npc_FieldIndex.ObjectTemplates;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Class.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.Class;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Npc_FieldIndex.Name;
                }
                case RecordTypeInts.SHRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ShortName = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Npc_FieldIndex.ShortName;
                }
                case RecordTypeInts.DATA:
                {
                    frame.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 2) return null;
                    item.CalculatedHealth = dataFrame.ReadUInt16();
                    if (dataFrame.Remaining < 2) return null;
                    item.CalculatedActionPoints = dataFrame.ReadUInt16();
                    if (dataFrame.Remaining < 2) return null;
                    item.FarAwayModelDistance = dataFrame.ReadUInt16();
                    if (dataFrame.Remaining < 1) return null;
                    item.GearedUpWeapons = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.Unused = dataFrame.ReadUInt8();
                    return (int)Npc_FieldIndex.Unused;
                }
                case RecordTypeInts.PNAM:
                {
                    item.HeadParts.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IHeadPartGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.PNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Npc_FieldIndex.HeadParts;
                }
                case RecordTypeInts.HCLF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HairColor.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.HairColor;
                }
                case RecordTypeInts.BCLF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FacialHairColor.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.FacialHairColor;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatStyle.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.CombatStyle;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GiftFilter.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.GiftFilter;
                }
                case RecordTypeInts.NAM5:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM5 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.NAM5;
                }
                case RecordTypeInts.NAM6:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeightMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.HeightMin;
                }
                case RecordTypeInts.NAM7:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM7 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.NAM7;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeightMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.HeightMax;
                }
                case RecordTypeInts.MWGT:
                {
                    item.Weight = Mutagen.Bethesda.Fallout4.NpcWeight.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.Weight;
                }
                case RecordTypeInts.NAM8:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SoundLevel = EnumBinaryTranslation<SoundLevel, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Npc_FieldIndex.SoundLevel;
                }
                case RecordTypeInts.CS2K:
                case RecordTypeInts.CS2D:
                case RecordTypeInts.CS2H:
                {
                    item.Sounds = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<NpcSound>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.CS2H,
                            triggeringRecord: NpcSound_Registration.TriggerSpecs,
                            endMarker: RecordTypes.CS2E,
                            translationParams: translationParams,
                            transl: NpcSound.TryCreateFromBinary)
                        .CastExtendedList<NpcSound>();
                    return (int)Npc_FieldIndex.Sounds;
                }
                case RecordTypeInts.CS2F:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SoundsFinalize = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.SoundsFinalize;
                }
                case RecordTypeInts.CSCR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InheritsSoundsFrom.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.InheritsSoundsFrom;
                }
                case RecordTypeInts.PFRN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PowerArmorStand.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.PowerArmorStand;
                }
                case RecordTypeInts.DOFT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultOutfit.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.DefaultOutfit;
                }
                case RecordTypeInts.SOFT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SleepingOutfit.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.SleepingOutfit;
                }
                case RecordTypeInts.DPLT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultPackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.DefaultPackageList;
                }
                case RecordTypeInts.CRIF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CrimeFaction.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.CrimeFaction;
                }
                case RecordTypeInts.FTST:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeadTexture.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.HeadTexture;
                }
                case RecordTypeInts.QNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureLighting = frame.ReadColor(ColorBinaryType.AlphaFloat);
                    return (int)Npc_FieldIndex.TextureLighting;
                }
                case RecordTypeInts.MSDK:
                case RecordTypeInts.MSDV:
                {
                    return NpcBinaryCreateTranslation.FillBinaryMorphParsingCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.TETI:
                {
                    item.FaceTintingLayers.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<NpcFaceTintingLayer>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: NpcFaceTintingLayer_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: NpcFaceTintingLayer.TryCreateFromBinary));
                    return (int)Npc_FieldIndex.FaceTintingLayers;
                }
                case RecordTypeInts.MRSV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.BodyMorphRegionValues = Mutagen.Bethesda.Fallout4.NpcBodyMorphRegionValues.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.BodyMorphRegionValues;
                }
                case RecordTypeInts.FMRI:
                case RecordTypeInts.FMRS:
                {
                    item.FaceMorphs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<NpcFaceMorph>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: NpcFaceMorph_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: NpcFaceMorph.TryCreateFromBinary));
                    return (int)Npc_FieldIndex.FaceMorphs;
                }
                case RecordTypeInts.FMIN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FacialMorphIntensity = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.FacialMorphIntensity;
                }
                case RecordTypeInts.ATTX:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActivateTextOverride = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Npc_FieldIndex.ActivateTextOverride;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryFlagsCustom(
            MutagenFrame frame,
            INpcInternal item);

        public static partial void FillBinaryLevelCustom(
            MutagenFrame frame,
            INpcInternal item);

        public static partial ParseResult FillBinaryMorphParsingCustom(
            MutagenFrame frame,
            INpcInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class NpcBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class NpcBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        INpcGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Npc_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Npc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(INpc);

        public Npc.MajorFlag MajorFlags => (Npc.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region PreviewTransform
        private int? _PreviewTransformLocation;
        public IFormLinkNullableGetter<ITransformGetter> PreviewTransform => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITransformGetter>(_package, _recordData, _PreviewTransformLocation);
        #endregion
        #region AnimationSound
        private int? _AnimationSoundLocation;
        public IFormLinkNullableGetter<IAnimationSoundTagSetGetter> AnimationSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IAnimationSoundTagSetGetter>(_package, _recordData, _AnimationSoundLocation);
        #endregion
        private RangeInt32? _ACBSLocation;
        #region Flags
        private int _FlagsLocation => _ACBSLocation!.Value.Min;
        public partial Npc.Flag GetFlagsCustom();
        public Npc.Flag Flags => GetFlagsCustom();
        #endregion
        #region XpValueOffset
        private int _XpValueOffsetLocation => _ACBSLocation!.Value.Min + 0x4;
        private bool _XpValueOffset_IsSet => _ACBSLocation.HasValue;
        public Int16 XpValueOffset => _XpValueOffset_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_recordData.Slice(_XpValueOffsetLocation, 2)) : default(Int16);
        #endregion
        #region CalcMinLevel
        private int _CalcMinLevelLocation => _ACBSLocation!.Value.Min + 0x8;
        private bool _CalcMinLevel_IsSet => _ACBSLocation.HasValue;
        public Int16 CalcMinLevel => _CalcMinLevel_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_recordData.Slice(_CalcMinLevelLocation, 2)) : default(Int16);
        #endregion
        #region CalcMaxLevel
        private int _CalcMaxLevelLocation => _ACBSLocation!.Value.Min + 0xA;
        private bool _CalcMaxLevel_IsSet => _ACBSLocation.HasValue;
        public Int16 CalcMaxLevel => _CalcMaxLevel_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_recordData.Slice(_CalcMaxLevelLocation, 2)) : default(Int16);
        #endregion
        #region DispositionBase
        private int _DispositionBaseLocation => _ACBSLocation!.Value.Min + 0xC;
        private bool _DispositionBase_IsSet => _ACBSLocation.HasValue;
        public Int16 DispositionBase => _DispositionBase_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_recordData.Slice(_DispositionBaseLocation, 2)) : default(Int16);
        #endregion
        #region UseTemplateActors
        private int _UseTemplateActorsLocation => _ACBSLocation!.Value.Min + 0xE;
        private bool _UseTemplateActors_IsSet => _ACBSLocation.HasValue;
        public Npc.TemplateActorType UseTemplateActors => _UseTemplateActors_IsSet ? (Npc.TemplateActorType)BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Span.Slice(_UseTemplateActorsLocation, 0x2)) : default;
        #endregion
        #region BleedoutOverride
        private int _BleedoutOverrideLocation => _ACBSLocation!.Value.Min + 0x10;
        private bool _BleedoutOverride_IsSet => _ACBSLocation.HasValue;
        public Int16 BleedoutOverride => _BleedoutOverride_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_recordData.Slice(_BleedoutOverrideLocation, 2)) : default(Int16);
        #endregion
        #region Unknown
        private int _UnknownLocation => _ACBSLocation!.Value.Min + 0x12;
        private bool _Unknown_IsSet => _ACBSLocation.HasValue;
        public Int16 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_recordData.Slice(_UnknownLocation, 2)) : default(Int16);
        #endregion
        public IReadOnlyList<IRankPlacementGetter> Factions { get; private set; } = [];
        #region DeathItem
        private int? _DeathItemLocation;
        public IFormLinkNullableGetter<ILeveledItemGetter> DeathItem => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILeveledItemGetter>(_package, _recordData, _DeathItemLocation);
        #endregion
        #region Voice
        private int? _VoiceLocation;
        public IFormLinkNullableGetter<IVoiceTypeGetter> Voice => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IVoiceTypeGetter>(_package, _recordData, _VoiceLocation);
        #endregion
        #region DefaultTemplate
        private int? _DefaultTemplateLocation;
        public IFormLinkNullableGetter<INpcSpawnGetter> DefaultTemplate => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<INpcSpawnGetter>(_package, _recordData, _DefaultTemplateLocation);
        #endregion
        #region LegendaryTemplate
        private int? _LegendaryTemplateLocation;
        public IFormLinkNullableGetter<INpcSpawnGetter> LegendaryTemplate => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<INpcSpawnGetter>(_package, _recordData, _LegendaryTemplateLocation);
        #endregion
        #region LegendaryChance
        private int? _LegendaryChanceLocation;
        public IFormLinkNullableGetter<IGlobalGetter> LegendaryChance => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _LegendaryChanceLocation);
        #endregion
        #region TemplateActors
        private RangeInt32? _TemplateActorsLocation;
        public ITemplateActorsGetter? TemplateActors => _TemplateActorsLocation.HasValue ? TemplateActorsBinaryOverlay.TemplateActorsFactory(_recordData.Slice(_TemplateActorsLocation!.Value.Min), _package) : default;
        #endregion
        #region Race
        private int? _RaceLocation;
        public IFormLinkGetter<IRaceGetter> Race => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _RaceLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region Skin
        private int? _SkinLocation;
        public IFormLinkNullableGetter<IArmorGetter> Skin => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArmorGetter>(_package, _recordData, _SkinLocation);
        #endregion
        #region FarAwayModel
        private int? _FarAwayModelLocation;
        public IFormLinkNullableGetter<IArmorGetter> FarAwayModel => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArmorGetter>(_package, _recordData, _FarAwayModelLocation);
        #endregion
        #region AttackRace
        private int? _AttackRaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> AttackRace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _AttackRaceLocation);
        #endregion
        public IReadOnlyList<IAttackGetter> Attacks { get; private set; } = [];
        #region SpectatorOverridePackageList
        private int? _SpectatorOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> SpectatorOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _SpectatorOverridePackageListLocation);
        #endregion
        #region ObserveDeadBodyOverridePackageList
        private int? _ObserveDeadBodyOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> ObserveDeadBodyOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _ObserveDeadBodyOverridePackageListLocation);
        #endregion
        #region GuardWarnOverridePackageList
        private int? _GuardWarnOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> GuardWarnOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _GuardWarnOverridePackageListLocation);
        #endregion
        #region CombatOverridePackageList
        private int? _CombatOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> CombatOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _CombatOverridePackageListLocation);
        #endregion
        #region FollowerCommandPackageList
        private int? _FollowerCommandPackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> FollowerCommandPackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _FollowerCommandPackageListLocation);
        #endregion
        #region FollowerElevatorPackageList
        private int? _FollowerElevatorPackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> FollowerElevatorPackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _FollowerElevatorPackageListLocation);
        #endregion
        public IReadOnlyList<IPerkPlacementGetter>? Perks { get; private set; }
        public IReadOnlyList<IObjectPropertyGetter>? Properties { get; private set; }
        #region ForcedLocRefType
        private int? _ForcedLocRefTypeLocation;
        public IFormLinkNullableGetter<ILocationReferenceTypeGetter> ForcedLocRefType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILocationReferenceTypeGetter>(_package, _recordData, _ForcedLocRefTypeLocation);
        #endregion
        #region NativeTerminal
        private int? _NativeTerminalLocation;
        public IFormLinkNullableGetter<ITerminalGetter> NativeTerminal => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITerminalGetter>(_package, _recordData, _NativeTerminalLocation);
        #endregion
        public IReadOnlyList<IContainerEntryGetter>? Items { get; private set; }
        private RangeInt32? _AIDTLocation;
        #region Aggression
        private int _AggressionLocation => _AIDTLocation!.Value.Min;
        private bool _Aggression_IsSet => _AIDTLocation.HasValue;
        public Npc.AggressionType Aggression => _Aggression_IsSet ? (Npc.AggressionType)_recordData.Span.Slice(_AggressionLocation, 0x1)[0] : default;
        #endregion
        #region Confidence
        private int _ConfidenceLocation => _AIDTLocation!.Value.Min + 0x1;
        private bool _Confidence_IsSet => _AIDTLocation.HasValue;
        public Npc.ConfidenceType Confidence => _Confidence_IsSet ? (Npc.ConfidenceType)_recordData.Span.Slice(_ConfidenceLocation, 0x1)[0] : default;
        #endregion
        #region EnergyLevel
        private int _EnergyLevelLocation => _AIDTLocation!.Value.Min + 0x2;
        private bool _EnergyLevel_IsSet => _AIDTLocation.HasValue;
        public Byte EnergyLevel => _EnergyLevel_IsSet ? _recordData.Span[_EnergyLevelLocation] : default;
        #endregion
        #region Responsibility
        private int _ResponsibilityLocation => _AIDTLocation!.Value.Min + 0x3;
        private bool _Responsibility_IsSet => _AIDTLocation.HasValue;
        public Npc.ResponsibilityType Responsibility => _Responsibility_IsSet ? (Npc.ResponsibilityType)_recordData.Span.Slice(_ResponsibilityLocation, 0x1)[0] : default;
        #endregion
        #region Mood
        private int _MoodLocation => _AIDTLocation!.Value.Min + 0x4;
        private bool _Mood_IsSet => _AIDTLocation.HasValue;
        public Npc.MoodType Mood => _Mood_IsSet ? (Npc.MoodType)_recordData.Span.Slice(_MoodLocation, 0x1)[0] : default;
        #endregion
        #region Assistance
        private int _AssistanceLocation => _AIDTLocation!.Value.Min + 0x5;
        private bool _Assistance_IsSet => _AIDTLocation.HasValue;
        public Npc.AssistanceType Assistance => _Assistance_IsSet ? (Npc.AssistanceType)_recordData.Span.Slice(_AssistanceLocation, 0x1)[0] : default;
        #endregion
        #region AggroRadiusBehaviorEnabled
        private int _AggroRadiusBehaviorEnabledLocation => _AIDTLocation!.Value.Min + 0x6;
        private bool _AggroRadiusBehaviorEnabled_IsSet => _AIDTLocation.HasValue;
        public Boolean AggroRadiusBehaviorEnabled => _AggroRadiusBehaviorEnabled_IsSet ? _recordData.Slice(_AggroRadiusBehaviorEnabledLocation, 2)[0] >= 1 : default(Boolean);
        #endregion
        #region AggroRadiusWarn
        private int _AggroRadiusWarnLocation => _AIDTLocation!.Value.Min + 0x8;
        private bool _AggroRadiusWarn_IsSet => _AIDTLocation.HasValue;
        public UInt32 AggroRadiusWarn => _AggroRadiusWarn_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_AggroRadiusWarnLocation, 4)) : default(UInt32);
        #endregion
        #region AggroRadiusWarnOrAttack
        private int _AggroRadiusWarnOrAttackLocation => _AIDTLocation!.Value.Min + 0xC;
        private bool _AggroRadiusWarnOrAttack_IsSet => _AIDTLocation.HasValue;
        public UInt32 AggroRadiusWarnOrAttack => _AggroRadiusWarnOrAttack_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_AggroRadiusWarnOrAttackLocation, 4)) : default(UInt32);
        #endregion
        #region AggroRadiusAttack
        private int _AggroRadiusAttackLocation => _AIDTLocation!.Value.Min + 0x10;
        private bool _AggroRadiusAttack_IsSet => _AIDTLocation.HasValue;
        public UInt32 AggroRadiusAttack => _AggroRadiusAttack_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_AggroRadiusAttackLocation, 4)) : default(UInt32);
        #endregion
        #region NoSlowApproach
        private int _NoSlowApproachLocation => _AIDTLocation!.Value.Min + 0x14;
        private bool _NoSlowApproach_IsSet => _AIDTLocation.HasValue;
        public Boolean NoSlowApproach => _NoSlowApproach_IsSet ? _recordData.Slice(_NoSlowApproachLocation, 4)[0] >= 1 : default(Boolean);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IPackageGetter>> Packages { get; private set; } = [];
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; private set; }
        public IReadOnlyList<IObjectTemplateGetter<Npc.Property>>? ObjectTemplates { get; private set; }
        #region Class
        private int? _ClassLocation;
        public IFormLinkNullableGetter<IClassGetter> Class => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IClassGetter>(_package, _recordData, _ClassLocation);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region ShortName
        private int? _ShortNameLocation;
        public ITranslatedStringGetter? ShortName => _ShortNameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ShortNameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        private RangeInt32? _DNAMLocation;
        #region CalculatedHealth
        private int _CalculatedHealthLocation => _DNAMLocation!.Value.Min;
        private bool _CalculatedHealth_IsSet => _DNAMLocation.HasValue;
        public UInt16 CalculatedHealth => _CalculatedHealth_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_CalculatedHealthLocation, 2)) : default(UInt16);
        #endregion
        #region CalculatedActionPoints
        private int _CalculatedActionPointsLocation => _DNAMLocation!.Value.Min + 0x2;
        private bool _CalculatedActionPoints_IsSet => _DNAMLocation.HasValue;
        public UInt16 CalculatedActionPoints => _CalculatedActionPoints_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_CalculatedActionPointsLocation, 2)) : default(UInt16);
        #endregion
        #region FarAwayModelDistance
        private int _FarAwayModelDistanceLocation => _DNAMLocation!.Value.Min + 0x4;
        private bool _FarAwayModelDistance_IsSet => _DNAMLocation.HasValue;
        public UInt16 FarAwayModelDistance => _FarAwayModelDistance_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_FarAwayModelDistanceLocation, 2)) : default(UInt16);
        #endregion
        #region GearedUpWeapons
        private int _GearedUpWeaponsLocation => _DNAMLocation!.Value.Min + 0x6;
        private bool _GearedUpWeapons_IsSet => _DNAMLocation.HasValue;
        public Byte GearedUpWeapons => _GearedUpWeapons_IsSet ? _recordData.Span[_GearedUpWeaponsLocation] : default;
        #endregion
        #region Unused
        private int _UnusedLocation => _DNAMLocation!.Value.Min + 0x7;
        private bool _Unused_IsSet => _DNAMLocation.HasValue;
        public Byte Unused => _Unused_IsSet ? _recordData.Span[_UnusedLocation] : default;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IHeadPartGetter>> HeadParts { get; private set; } = [];
        #region HairColor
        private int? _HairColorLocation;
        public IFormLinkNullableGetter<IColorRecordGetter> HairColor => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IColorRecordGetter>(_package, _recordData, _HairColorLocation);
        #endregion
        #region FacialHairColor
        private int? _FacialHairColorLocation;
        public IFormLinkNullableGetter<IColorRecordGetter> FacialHairColor => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IColorRecordGetter>(_package, _recordData, _FacialHairColorLocation);
        #endregion
        #region CombatStyle
        private int? _CombatStyleLocation;
        public IFormLinkNullableGetter<ICombatStyleGetter> CombatStyle => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICombatStyleGetter>(_package, _recordData, _CombatStyleLocation);
        #endregion
        #region GiftFilter
        private int? _GiftFilterLocation;
        public IFormLinkNullableGetter<IFormListGetter> GiftFilter => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _GiftFilterLocation);
        #endregion
        #region NAM5
        private int? _NAM5Location;
        public ReadOnlyMemorySlice<Byte>? NAM5 => _NAM5Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM5Location.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region HeightMin
        private int? _HeightMinLocation;
        public Single HeightMin => _HeightMinLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HeightMinLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region NAM7
        private int? _NAM7Location;
        public Single? NAM7 => _NAM7Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM7Location.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region HeightMax
        private int? _HeightMaxLocation;
        public Single HeightMax => _HeightMaxLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HeightMaxLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region Weight
        private RangeInt32? _WeightLocation;
        public INpcWeightGetter? Weight => _WeightLocation.HasValue ? NpcWeightBinaryOverlay.NpcWeightFactory(_recordData.Slice(_WeightLocation!.Value.Min), _package) : default;
        #endregion
        #region SoundLevel
        private int? _SoundLevelLocation;
        public SoundLevel SoundLevel => _SoundLevelLocation.HasValue ? (SoundLevel)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SoundLevelLocation!.Value, _package.MetaData.Constants)) : default(SoundLevel);
        #endregion
        public IReadOnlyList<INpcSoundGetter>? Sounds { get; private set; }
        #region SoundsFinalize
        private int? _SoundsFinalizeLocation;
        public ReadOnlyMemorySlice<Byte>? SoundsFinalize => _SoundsFinalizeLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _SoundsFinalizeLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region InheritsSoundsFrom
        private int? _InheritsSoundsFromLocation;
        public IFormLinkNullableGetter<INpcGetter> InheritsSoundsFrom => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<INpcGetter>(_package, _recordData, _InheritsSoundsFromLocation);
        #endregion
        #region PowerArmorStand
        private int? _PowerArmorStandLocation;
        public IFormLinkNullableGetter<IFurnitureGetter> PowerArmorStand => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFurnitureGetter>(_package, _recordData, _PowerArmorStandLocation);
        #endregion
        #region DefaultOutfit
        private int? _DefaultOutfitLocation;
        public IFormLinkNullableGetter<IOutfitGetter> DefaultOutfit => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IOutfitGetter>(_package, _recordData, _DefaultOutfitLocation);
        #endregion
        #region SleepingOutfit
        private int? _SleepingOutfitLocation;
        public IFormLinkNullableGetter<IOutfitGetter> SleepingOutfit => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IOutfitGetter>(_package, _recordData, _SleepingOutfitLocation);
        #endregion
        #region DefaultPackageList
        private int? _DefaultPackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> DefaultPackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _DefaultPackageListLocation);
        #endregion
        #region CrimeFaction
        private int? _CrimeFactionLocation;
        public IFormLinkNullableGetter<IFactionGetter> CrimeFaction => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFactionGetter>(_package, _recordData, _CrimeFactionLocation);
        #endregion
        #region HeadTexture
        private int? _HeadTextureLocation;
        public IFormLinkNullableGetter<ITextureSetGetter> HeadTexture => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITextureSetGetter>(_package, _recordData, _HeadTextureLocation);
        #endregion
        #region TextureLighting
        private int? _TextureLightingLocation;
        public Color? TextureLighting => _TextureLightingLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextureLightingLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.AlphaFloat) : default(Color?);
        #endregion
        #region MorphParsing
        public partial ParseResult MorphParsingCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        public IReadOnlyList<INpcFaceTintingLayerGetter> FaceTintingLayers { get; private set; } = [];
        public INpcBodyMorphRegionValuesGetter? BodyMorphRegionValues { get; private set; }
        public IReadOnlyList<INpcFaceMorphGetter> FaceMorphs { get; private set; } = [];
        #region FacialMorphIntensity
        private int? _FacialMorphIntensityLocation;
        public Single? FacialMorphIntensity => _FacialMorphIntensityLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FacialMorphIntensityLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region ActivateTextOverride
        private int? _ActivateTextOverrideLocation;
        public ITranslatedStringGetter? ActivateTextOverride => _ActivateTextOverrideLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ActivateTextOverrideLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INpcGetter NpcFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new NpcBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static INpcGetter NpcFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NpcFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Npc_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Npc_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.PTRN:
                {
                    _PreviewTransformLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.PreviewTransform;
                }
                case RecordTypeInts.STCP:
                {
                    _AnimationSoundLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.AnimationSound;
                }
                case RecordTypeInts.ACBS:
                {
                    _ACBSLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Npc_FieldIndex.Unknown;
                }
                case RecordTypeInts.SNAM:
                {
                    this.Factions = BinaryOverlayList.FactoryByArray<IRankPlacementGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => RankPlacementBinaryOverlay.RankPlacementFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: RankPlacement_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Npc_FieldIndex.Factions;
                }
                case RecordTypeInts.INAM:
                {
                    _DeathItemLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.DeathItem;
                }
                case RecordTypeInts.VTCK:
                {
                    _VoiceLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Voice;
                }
                case RecordTypeInts.TPLT:
                {
                    _DefaultTemplateLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.DefaultTemplate;
                }
                case RecordTypeInts.LTPT:
                {
                    _LegendaryTemplateLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.LegendaryTemplate;
                }
                case RecordTypeInts.LTPC:
                {
                    _LegendaryChanceLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.LegendaryChance;
                }
                case RecordTypeInts.TPTA:
                {
                    _TemplateActorsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Npc_FieldIndex.TemplateActors;
                }
                case RecordTypeInts.RNAM:
                {
                    _RaceLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Race;
                }
                case RecordTypeInts.SPLO:
                case RecordTypeInts.SPCT:
                {
                    this.ActorEffect = BinaryOverlayList.FactoryByCountPerItem<IFormLinkGetter<ISpellRecordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.SPCT,
                        trigger: RecordTypes.SPLO,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellRecordGetter>(p, s));
                    return (int)Npc_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSTD:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Npc_FieldIndex.Destructible;
                }
                case RecordTypeInts.WNAM:
                {
                    _SkinLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Skin;
                }
                case RecordTypeInts.ANAM:
                {
                    _FarAwayModelLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.FarAwayModel;
                }
                case RecordTypeInts.ATKR:
                {
                    _AttackRaceLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.AttackRace;
                }
                case RecordTypeInts.ATKD:
                case RecordTypeInts.ATKE:
                case RecordTypeInts.ATKW:
                case RecordTypeInts.ATKS:
                case RecordTypeInts.ATKT:
                {
                    this.Attacks = this.ParseRepeatedTypelessSubrecord<IAttackGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: Attack_Registration.TriggerSpecs,
                        factory: AttackBinaryOverlay.AttackFactory);
                    return (int)Npc_FieldIndex.Attacks;
                }
                case RecordTypeInts.SPOR:
                {
                    _SpectatorOverridePackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.SpectatorOverridePackageList;
                }
                case RecordTypeInts.OCOR:
                {
                    _ObserveDeadBodyOverridePackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.ObserveDeadBodyOverridePackageList;
                }
                case RecordTypeInts.GWOR:
                {
                    _GuardWarnOverridePackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.GuardWarnOverridePackageList;
                }
                case RecordTypeInts.ECOR:
                {
                    _CombatOverridePackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.CombatOverridePackageList;
                }
                case RecordTypeInts.FCPL:
                {
                    _FollowerCommandPackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.FollowerCommandPackageList;
                }
                case RecordTypeInts.RCLR:
                {
                    _FollowerElevatorPackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.FollowerElevatorPackageList;
                }
                case RecordTypeInts.PRKR:
                case RecordTypeInts.PRKZ:
                {
                    this.Perks = BinaryOverlayList.FactoryByCountPerItem<IPerkPlacementGetter>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x5,
                        countLength: 4,
                        countType: RecordTypes.PRKZ,
                        trigger: RecordTypes.PRKR,
                        getter: (s, p) => PerkPlacementBinaryOverlay.PerkPlacementFactory(s, p),
                        skipHeader: false);
                    return (int)Npc_FieldIndex.Perks;
                }
                case RecordTypeInts.PRPS:
                {
                    this.Properties = BinaryOverlayList.FactoryByStartIndexWithTrigger<IObjectPropertyGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 8,
                        getter: (s, p) => ObjectPropertyBinaryOverlay.ObjectPropertyFactory(s, p));
                    return (int)Npc_FieldIndex.Properties;
                }
                case RecordTypeInts.FTYP:
                {
                    _ForcedLocRefTypeLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.ForcedLocRefType;
                }
                case RecordTypeInts.NTRM:
                {
                    _NativeTerminalLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.NativeTerminal;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    this.Items = BinaryOverlayList.FactoryByCountPerItem<IContainerEntryGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: ContainerEntry_Registration.TriggerSpecs,
                        countType: RecordTypes.COCT,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ContainerEntryBinaryOverlay.ContainerEntryFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)Npc_FieldIndex.Items;
                }
                case RecordTypeInts.AIDT:
                {
                    _AIDTLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Npc_FieldIndex.NoSlowApproach;
                }
                case RecordTypeInts.PKID:
                {
                    this.Packages = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IPackageGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPackageGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.PKID,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Npc_FieldIndex.Packages;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Npc_FieldIndex.Keywords;
                }
                case RecordTypeInts.APPR:
                {
                    this.AttachParentSlots = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Npc_FieldIndex.AttachParentSlots;
                }
                case RecordTypeInts.OBTE:
                {
                    this.ObjectTemplates = BinaryOverlayList.FactoryByCountPerItem<IObjectTemplateGetter<Npc.Property>>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: ObjectTemplate_Registration.TriggerSpecs,
                        countType: RecordTypes.OBTE,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ObjectTemplateBinaryOverlay<Npc.Property>.ObjectTemplateFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false,
                        endMarker: RecordTypes.STOP);
                    return (int)Npc_FieldIndex.ObjectTemplates;
                }
                case RecordTypeInts.CNAM:
                {
                    _ClassLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Class;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Name;
                }
                case RecordTypeInts.SHRT:
                {
                    _ShortNameLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.ShortName;
                }
                case RecordTypeInts.DATA:
                {
                    stream.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Npc_FieldIndex.Unused;
                }
                case RecordTypeInts.PNAM:
                {
                    this.HeadParts = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IHeadPartGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IHeadPartGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.PNAM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Npc_FieldIndex.HeadParts;
                }
                case RecordTypeInts.HCLF:
                {
                    _HairColorLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.HairColor;
                }
                case RecordTypeInts.BCLF:
                {
                    _FacialHairColorLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.FacialHairColor;
                }
                case RecordTypeInts.ZNAM:
                {
                    _CombatStyleLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.CombatStyle;
                }
                case RecordTypeInts.GNAM:
                {
                    _GiftFilterLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.GiftFilter;
                }
                case RecordTypeInts.NAM5:
                {
                    _NAM5Location = (stream.Position - offset);
                    return (int)Npc_FieldIndex.NAM5;
                }
                case RecordTypeInts.NAM6:
                {
                    _HeightMinLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.HeightMin;
                }
                case RecordTypeInts.NAM7:
                {
                    _NAM7Location = (stream.Position - offset);
                    return (int)Npc_FieldIndex.NAM7;
                }
                case RecordTypeInts.NAM4:
                {
                    _HeightMaxLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.HeightMax;
                }
                case RecordTypeInts.MWGT:
                {
                    _WeightLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Npc_FieldIndex.Weight;
                }
                case RecordTypeInts.NAM8:
                {
                    _SoundLevelLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.SoundLevel;
                }
                case RecordTypeInts.CS2K:
                case RecordTypeInts.CS2D:
                case RecordTypeInts.CS2H:
                {
                    this.Sounds = BinaryOverlayList.FactoryByCountPerItem<INpcSoundGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: NpcSound_Registration.TriggerSpecs,
                        countType: RecordTypes.CS2H,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => NpcSoundBinaryOverlay.NpcSoundFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false,
                        endMarker: RecordTypes.CS2E);
                    return (int)Npc_FieldIndex.Sounds;
                }
                case RecordTypeInts.CS2F:
                {
                    _SoundsFinalizeLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.SoundsFinalize;
                }
                case RecordTypeInts.CSCR:
                {
                    _InheritsSoundsFromLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.InheritsSoundsFrom;
                }
                case RecordTypeInts.PFRN:
                {
                    _PowerArmorStandLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.PowerArmorStand;
                }
                case RecordTypeInts.DOFT:
                {
                    _DefaultOutfitLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.DefaultOutfit;
                }
                case RecordTypeInts.SOFT:
                {
                    _SleepingOutfitLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.SleepingOutfit;
                }
                case RecordTypeInts.DPLT:
                {
                    _DefaultPackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.DefaultPackageList;
                }
                case RecordTypeInts.CRIF:
                {
                    _CrimeFactionLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.CrimeFaction;
                }
                case RecordTypeInts.FTST:
                {
                    _HeadTextureLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.HeadTexture;
                }
                case RecordTypeInts.QNAM:
                {
                    _TextureLightingLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.TextureLighting;
                }
                case RecordTypeInts.MSDK:
                case RecordTypeInts.MSDV:
                {
                    return MorphParsingCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.TETI:
                {
                    this.FaceTintingLayers = this.ParseRepeatedTypelessSubrecord<INpcFaceTintingLayerGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: NpcFaceTintingLayer_Registration.TriggerSpecs,
                        factory: NpcFaceTintingLayerBinaryOverlay.NpcFaceTintingLayerFactory);
                    return (int)Npc_FieldIndex.FaceTintingLayers;
                }
                case RecordTypeInts.MRSV:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.BodyMorphRegionValues = NpcBodyMorphRegionValuesBinaryOverlay.NpcBodyMorphRegionValuesFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Npc_FieldIndex.BodyMorphRegionValues;
                }
                case RecordTypeInts.FMRI:
                case RecordTypeInts.FMRS:
                {
                    this.FaceMorphs = this.ParseRepeatedTypelessSubrecord<INpcFaceMorphGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: NpcFaceMorph_Registration.TriggerSpecs,
                        factory: NpcFaceMorphBinaryOverlay.NpcFaceMorphFactory);
                    return (int)Npc_FieldIndex.FaceMorphs;
                }
                case RecordTypeInts.FMIN:
                {
                    _FacialMorphIntensityLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.FacialMorphIntensity;
                }
                case RecordTypeInts.ATTX:
                {
                    _ActivateTextOverrideLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.ActivateTextOverride;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Npc>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not INpcGetter rhs) return false;
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcGetter? obj)
        {
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcCommon)((INpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

