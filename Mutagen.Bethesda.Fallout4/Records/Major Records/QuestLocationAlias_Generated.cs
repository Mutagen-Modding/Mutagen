/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class QuestLocationAlias :
        AQuestAlias,
        IEquatable<IQuestLocationAliasGetter>,
        ILoquiObjectSetter<QuestLocationAlias>,
        IQuestLocationAlias
    {
        #region Ctor
        public QuestLocationAlias()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ID
        public UInt32 ID { get; set; } = default(UInt32);
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IQuestLocationAliasGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Flags
        public AQuestAlias.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AQuestAlias.Flag? IQuestLocationAliasGetter.Flags => this.Flags;
        #endregion
        #region AliasIDToForceIntoWhenFilled
        public Int32? AliasIDToForceIntoWhenFilled { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IQuestLocationAliasGetter.AliasIDToForceIntoWhenFilled => this.AliasIDToForceIntoWhenFilled;
        #endregion
        #region SpecificLocation
        private readonly IFormLinkNullable<ILocationGetter> _SpecificLocation = new FormLinkNullable<ILocationGetter>();
        public IFormLinkNullable<ILocationGetter> SpecificLocation
        {
            get => _SpecificLocation;
            set => _SpecificLocation.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationGetter> IQuestLocationAliasGetter.SpecificLocation => this.SpecificLocation;
        #endregion
        #region ReferenceAliasLocation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ReferenceAliasLocation? _ReferenceAliasLocation;
        public ReferenceAliasLocation? ReferenceAliasLocation
        {
            get => _ReferenceAliasLocation;
            set => _ReferenceAliasLocation = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReferenceAliasLocationGetter? IQuestLocationAliasGetter.ReferenceAliasLocation => this.ReferenceAliasLocation;
        #endregion
        #region ExternalAliasLocation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExternalAliasLocation? _ExternalAliasLocation;
        public ExternalAliasLocation? ExternalAliasLocation
        {
            get => _ExternalAliasLocation;
            set => _ExternalAliasLocation = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IExternalAliasLocationGetter? IQuestLocationAliasGetter.ExternalAliasLocation => this.ExternalAliasLocation;
        #endregion
        #region FindMatchingRefFromEvent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FindMatchingRefFromEvent? _FindMatchingRefFromEvent;
        public FindMatchingRefFromEvent? FindMatchingRefFromEvent
        {
            get => _FindMatchingRefFromEvent;
            set => _FindMatchingRefFromEvent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFindMatchingRefFromEventGetter? IQuestLocationAliasGetter.FindMatchingRefFromEvent => this.FindMatchingRefFromEvent;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IQuestLocationAliasGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region ClosestToAlias
        public Int32? ClosestToAlias { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IQuestLocationAliasGetter.ClosestToAlias => this.ClosestToAlias;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestLocationAliasMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IQuestLocationAliasGetter rhs) return false;
            return ((QuestLocationAliasCommon)((IQuestLocationAliasGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestLocationAliasGetter? obj)
        {
            return ((QuestLocationAliasCommon)((IQuestLocationAliasGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestLocationAliasCommon)((IQuestLocationAliasGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AQuestAlias.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ID = initialValue;
                this.Name = initialValue;
                this.Flags = initialValue;
                this.AliasIDToForceIntoWhenFilled = initialValue;
                this.SpecificLocation = initialValue;
                this.ReferenceAliasLocation = new MaskItem<TItem, ReferenceAliasLocation.Mask<TItem>?>(initialValue, new ReferenceAliasLocation.Mask<TItem>(initialValue));
                this.ExternalAliasLocation = new MaskItem<TItem, ExternalAliasLocation.Mask<TItem>?>(initialValue, new ExternalAliasLocation.Mask<TItem>(initialValue));
                this.FindMatchingRefFromEvent = new MaskItem<TItem, FindMatchingRefFromEvent.Mask<TItem>?>(initialValue, new FindMatchingRefFromEvent.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.ClosestToAlias = initialValue;
            }

            public Mask(
                TItem ID,
                TItem Name,
                TItem Flags,
                TItem AliasIDToForceIntoWhenFilled,
                TItem SpecificLocation,
                TItem ReferenceAliasLocation,
                TItem ExternalAliasLocation,
                TItem FindMatchingRefFromEvent,
                TItem Conditions,
                TItem ClosestToAlias)
            : base()
            {
                this.ID = ID;
                this.Name = Name;
                this.Flags = Flags;
                this.AliasIDToForceIntoWhenFilled = AliasIDToForceIntoWhenFilled;
                this.SpecificLocation = SpecificLocation;
                this.ReferenceAliasLocation = new MaskItem<TItem, ReferenceAliasLocation.Mask<TItem>?>(ReferenceAliasLocation, new ReferenceAliasLocation.Mask<TItem>(ReferenceAliasLocation));
                this.ExternalAliasLocation = new MaskItem<TItem, ExternalAliasLocation.Mask<TItem>?>(ExternalAliasLocation, new ExternalAliasLocation.Mask<TItem>(ExternalAliasLocation));
                this.FindMatchingRefFromEvent = new MaskItem<TItem, FindMatchingRefFromEvent.Mask<TItem>?>(FindMatchingRefFromEvent, new FindMatchingRefFromEvent.Mask<TItem>(FindMatchingRefFromEvent));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.ClosestToAlias = ClosestToAlias;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ID;
            public TItem Name;
            public TItem Flags;
            public TItem AliasIDToForceIntoWhenFilled;
            public TItem SpecificLocation;
            public MaskItem<TItem, ReferenceAliasLocation.Mask<TItem>?>? ReferenceAliasLocation { get; set; }
            public MaskItem<TItem, ExternalAliasLocation.Mask<TItem>?>? ExternalAliasLocation { get; set; }
            public MaskItem<TItem, FindMatchingRefFromEvent.Mask<TItem>?>? FindMatchingRefFromEvent { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem ClosestToAlias;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ID, rhs.ID)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.AliasIDToForceIntoWhenFilled, rhs.AliasIDToForceIntoWhenFilled)) return false;
                if (!object.Equals(this.SpecificLocation, rhs.SpecificLocation)) return false;
                if (!object.Equals(this.ReferenceAliasLocation, rhs.ReferenceAliasLocation)) return false;
                if (!object.Equals(this.ExternalAliasLocation, rhs.ExternalAliasLocation)) return false;
                if (!object.Equals(this.FindMatchingRefFromEvent, rhs.FindMatchingRefFromEvent)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.ClosestToAlias, rhs.ClosestToAlias)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ID);
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.AliasIDToForceIntoWhenFilled);
                hash.Add(this.SpecificLocation);
                hash.Add(this.ReferenceAliasLocation);
                hash.Add(this.ExternalAliasLocation);
                hash.Add(this.FindMatchingRefFromEvent);
                hash.Add(this.Conditions);
                hash.Add(this.ClosestToAlias);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.ID)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.AliasIDToForceIntoWhenFilled)) return false;
                if (!eval(this.SpecificLocation)) return false;
                if (ReferenceAliasLocation != null)
                {
                    if (!eval(this.ReferenceAliasLocation.Overall)) return false;
                    if (this.ReferenceAliasLocation.Specific != null && !this.ReferenceAliasLocation.Specific.All(eval)) return false;
                }
                if (ExternalAliasLocation != null)
                {
                    if (!eval(this.ExternalAliasLocation.Overall)) return false;
                    if (this.ExternalAliasLocation.Specific != null && !this.ExternalAliasLocation.Specific.All(eval)) return false;
                }
                if (FindMatchingRefFromEvent != null)
                {
                    if (!eval(this.FindMatchingRefFromEvent.Overall)) return false;
                    if (this.FindMatchingRefFromEvent.Specific != null && !this.FindMatchingRefFromEvent.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ClosestToAlias)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.ID)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.AliasIDToForceIntoWhenFilled)) return true;
                if (eval(this.SpecificLocation)) return true;
                if (ReferenceAliasLocation != null)
                {
                    if (eval(this.ReferenceAliasLocation.Overall)) return true;
                    if (this.ReferenceAliasLocation.Specific != null && this.ReferenceAliasLocation.Specific.Any(eval)) return true;
                }
                if (ExternalAliasLocation != null)
                {
                    if (eval(this.ExternalAliasLocation.Overall)) return true;
                    if (this.ExternalAliasLocation.Specific != null && this.ExternalAliasLocation.Specific.Any(eval)) return true;
                }
                if (FindMatchingRefFromEvent != null)
                {
                    if (eval(this.FindMatchingRefFromEvent.Overall)) return true;
                    if (this.FindMatchingRefFromEvent.Specific != null && this.FindMatchingRefFromEvent.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ClosestToAlias)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new QuestLocationAlias.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ID = eval(this.ID);
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.AliasIDToForceIntoWhenFilled = eval(this.AliasIDToForceIntoWhenFilled);
                obj.SpecificLocation = eval(this.SpecificLocation);
                obj.ReferenceAliasLocation = this.ReferenceAliasLocation == null ? null : new MaskItem<R, ReferenceAliasLocation.Mask<R>?>(eval(this.ReferenceAliasLocation.Overall), this.ReferenceAliasLocation.Specific?.Translate(eval));
                obj.ExternalAliasLocation = this.ExternalAliasLocation == null ? null : new MaskItem<R, ExternalAliasLocation.Mask<R>?>(eval(this.ExternalAliasLocation.Overall), this.ExternalAliasLocation.Specific?.Translate(eval));
                obj.FindMatchingRefFromEvent = this.FindMatchingRefFromEvent == null ? null : new MaskItem<R, FindMatchingRefFromEvent.Mask<R>?>(eval(this.FindMatchingRefFromEvent.Overall), this.FindMatchingRefFromEvent.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ClosestToAlias = eval(this.ClosestToAlias);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(QuestLocationAlias.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, QuestLocationAlias.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(QuestLocationAlias.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ID ?? true)
                    {
                        sb.AppendItem(ID, "ID");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.AliasIDToForceIntoWhenFilled ?? true)
                    {
                        sb.AppendItem(AliasIDToForceIntoWhenFilled, "AliasIDToForceIntoWhenFilled");
                    }
                    if (printMask?.SpecificLocation ?? true)
                    {
                        sb.AppendItem(SpecificLocation, "SpecificLocation");
                    }
                    if (printMask?.ReferenceAliasLocation?.Overall ?? true)
                    {
                        ReferenceAliasLocation?.Print(sb);
                    }
                    if (printMask?.ExternalAliasLocation?.Overall ?? true)
                    {
                        ExternalAliasLocation?.Print(sb);
                    }
                    if (printMask?.FindMatchingRefFromEvent?.Overall ?? true)
                    {
                        FindMatchingRefFromEvent?.Print(sb);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ClosestToAlias ?? true)
                    {
                        sb.AppendItem(ClosestToAlias, "ClosestToAlias");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AQuestAlias.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ID;
            public Exception? Name;
            public Exception? Flags;
            public Exception? AliasIDToForceIntoWhenFilled;
            public Exception? SpecificLocation;
            public MaskItem<Exception?, ReferenceAliasLocation.ErrorMask?>? ReferenceAliasLocation;
            public MaskItem<Exception?, ExternalAliasLocation.ErrorMask?>? ExternalAliasLocation;
            public MaskItem<Exception?, FindMatchingRefFromEvent.ErrorMask?>? FindMatchingRefFromEvent;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? ClosestToAlias;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                QuestLocationAlias_FieldIndex enu = (QuestLocationAlias_FieldIndex)index;
                switch (enu)
                {
                    case QuestLocationAlias_FieldIndex.ID:
                        return ID;
                    case QuestLocationAlias_FieldIndex.Name:
                        return Name;
                    case QuestLocationAlias_FieldIndex.Flags:
                        return Flags;
                    case QuestLocationAlias_FieldIndex.AliasIDToForceIntoWhenFilled:
                        return AliasIDToForceIntoWhenFilled;
                    case QuestLocationAlias_FieldIndex.SpecificLocation:
                        return SpecificLocation;
                    case QuestLocationAlias_FieldIndex.ReferenceAliasLocation:
                        return ReferenceAliasLocation;
                    case QuestLocationAlias_FieldIndex.ExternalAliasLocation:
                        return ExternalAliasLocation;
                    case QuestLocationAlias_FieldIndex.FindMatchingRefFromEvent:
                        return FindMatchingRefFromEvent;
                    case QuestLocationAlias_FieldIndex.Conditions:
                        return Conditions;
                    case QuestLocationAlias_FieldIndex.ClosestToAlias:
                        return ClosestToAlias;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                QuestLocationAlias_FieldIndex enu = (QuestLocationAlias_FieldIndex)index;
                switch (enu)
                {
                    case QuestLocationAlias_FieldIndex.ID:
                        this.ID = ex;
                        break;
                    case QuestLocationAlias_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case QuestLocationAlias_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case QuestLocationAlias_FieldIndex.AliasIDToForceIntoWhenFilled:
                        this.AliasIDToForceIntoWhenFilled = ex;
                        break;
                    case QuestLocationAlias_FieldIndex.SpecificLocation:
                        this.SpecificLocation = ex;
                        break;
                    case QuestLocationAlias_FieldIndex.ReferenceAliasLocation:
                        this.ReferenceAliasLocation = new MaskItem<Exception?, ReferenceAliasLocation.ErrorMask?>(ex, null);
                        break;
                    case QuestLocationAlias_FieldIndex.ExternalAliasLocation:
                        this.ExternalAliasLocation = new MaskItem<Exception?, ExternalAliasLocation.ErrorMask?>(ex, null);
                        break;
                    case QuestLocationAlias_FieldIndex.FindMatchingRefFromEvent:
                        this.FindMatchingRefFromEvent = new MaskItem<Exception?, FindMatchingRefFromEvent.ErrorMask?>(ex, null);
                        break;
                    case QuestLocationAlias_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case QuestLocationAlias_FieldIndex.ClosestToAlias:
                        this.ClosestToAlias = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                QuestLocationAlias_FieldIndex enu = (QuestLocationAlias_FieldIndex)index;
                switch (enu)
                {
                    case QuestLocationAlias_FieldIndex.ID:
                        this.ID = (Exception?)obj;
                        break;
                    case QuestLocationAlias_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case QuestLocationAlias_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case QuestLocationAlias_FieldIndex.AliasIDToForceIntoWhenFilled:
                        this.AliasIDToForceIntoWhenFilled = (Exception?)obj;
                        break;
                    case QuestLocationAlias_FieldIndex.SpecificLocation:
                        this.SpecificLocation = (Exception?)obj;
                        break;
                    case QuestLocationAlias_FieldIndex.ReferenceAliasLocation:
                        this.ReferenceAliasLocation = (MaskItem<Exception?, ReferenceAliasLocation.ErrorMask?>?)obj;
                        break;
                    case QuestLocationAlias_FieldIndex.ExternalAliasLocation:
                        this.ExternalAliasLocation = (MaskItem<Exception?, ExternalAliasLocation.ErrorMask?>?)obj;
                        break;
                    case QuestLocationAlias_FieldIndex.FindMatchingRefFromEvent:
                        this.FindMatchingRefFromEvent = (MaskItem<Exception?, FindMatchingRefFromEvent.ErrorMask?>?)obj;
                        break;
                    case QuestLocationAlias_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case QuestLocationAlias_FieldIndex.ClosestToAlias:
                        this.ClosestToAlias = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ID != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (AliasIDToForceIntoWhenFilled != null) return true;
                if (SpecificLocation != null) return true;
                if (ReferenceAliasLocation != null) return true;
                if (ExternalAliasLocation != null) return true;
                if (FindMatchingRefFromEvent != null) return true;
                if (Conditions != null) return true;
                if (ClosestToAlias != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(ID, "ID");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(AliasIDToForceIntoWhenFilled, "AliasIDToForceIntoWhenFilled");
                }
                {
                    sb.AppendItem(SpecificLocation, "SpecificLocation");
                }
                ReferenceAliasLocation?.Print(sb);
                ExternalAliasLocation?.Print(sb);
                FindMatchingRefFromEvent?.Print(sb);
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ClosestToAlias, "ClosestToAlias");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ID = this.ID.Combine(rhs.ID);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.AliasIDToForceIntoWhenFilled = this.AliasIDToForceIntoWhenFilled.Combine(rhs.AliasIDToForceIntoWhenFilled);
                ret.SpecificLocation = this.SpecificLocation.Combine(rhs.SpecificLocation);
                ret.ReferenceAliasLocation = this.ReferenceAliasLocation.Combine(rhs.ReferenceAliasLocation, (l, r) => l.Combine(r));
                ret.ExternalAliasLocation = this.ExternalAliasLocation.Combine(rhs.ExternalAliasLocation, (l, r) => l.Combine(r));
                ret.FindMatchingRefFromEvent = this.FindMatchingRefFromEvent.Combine(rhs.FindMatchingRefFromEvent, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.ClosestToAlias = this.ClosestToAlias.Combine(rhs.ClosestToAlias);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AQuestAlias.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ID;
            public bool Name;
            public bool Flags;
            public bool AliasIDToForceIntoWhenFilled;
            public bool SpecificLocation;
            public ReferenceAliasLocation.TranslationMask? ReferenceAliasLocation;
            public ExternalAliasLocation.TranslationMask? ExternalAliasLocation;
            public FindMatchingRefFromEvent.TranslationMask? FindMatchingRefFromEvent;
            public Condition.TranslationMask? Conditions;
            public bool ClosestToAlias;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ID = defaultOn;
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.AliasIDToForceIntoWhenFilled = defaultOn;
                this.SpecificLocation = defaultOn;
                this.ClosestToAlias = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ID, null));
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((AliasIDToForceIntoWhenFilled, null));
                ret.Add((SpecificLocation, null));
                ret.Add((ReferenceAliasLocation != null ? ReferenceAliasLocation.OnOverall : DefaultOn, ReferenceAliasLocation?.GetCrystal()));
                ret.Add((ExternalAliasLocation != null ? ExternalAliasLocation.OnOverall : DefaultOn, ExternalAliasLocation?.GetCrystal()));
                ret.Add((FindMatchingRefFromEvent != null ? FindMatchingRefFromEvent.OnOverall : DefaultOn, FindMatchingRefFromEvent?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((ClosestToAlias, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestLocationAliasCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestLocationAliasSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestLocationAliasBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestLocationAliasBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static QuestLocationAlias CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new QuestLocationAlias();
            ((QuestLocationAliasSetterCommon)((IQuestLocationAliasGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out QuestLocationAlias item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((QuestLocationAliasSetterCommon)((IQuestLocationAliasGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new QuestLocationAlias GetNew()
        {
            return new QuestLocationAlias();
        }

    }
    #endregion

    #region Interface
    public partial interface IQuestLocationAlias :
        IAQuestAlias,
        IFormLinkContainer,
        ILoquiObjectSetter<IQuestLocationAlias>,
        INamed,
        INamedRequired,
        IQuestLocationAliasGetter
    {
        new UInt32 ID { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new AQuestAlias.Flag? Flags { get; set; }
        new Int32? AliasIDToForceIntoWhenFilled { get; set; }
        new IFormLinkNullable<ILocationGetter> SpecificLocation { get; set; }
        new ReferenceAliasLocation? ReferenceAliasLocation { get; set; }
        new ExternalAliasLocation? ExternalAliasLocation { get; set; }
        new FindMatchingRefFromEvent? FindMatchingRefFromEvent { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new Int32? ClosestToAlias { get; set; }
    }

    public partial interface IQuestLocationAliasGetter :
        IAQuestAliasGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IQuestLocationAliasGetter>,
        INamedGetter,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => QuestLocationAlias_Registration.Instance;
        UInt32 ID { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        AQuestAlias.Flag? Flags { get; }
        Int32? AliasIDToForceIntoWhenFilled { get; }
        IFormLinkNullableGetter<ILocationGetter> SpecificLocation { get; }
        IReferenceAliasLocationGetter? ReferenceAliasLocation { get; }
        IExternalAliasLocationGetter? ExternalAliasLocation { get; }
        IFindMatchingRefFromEventGetter? FindMatchingRefFromEvent { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        Int32? ClosestToAlias { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class QuestLocationAliasMixIn
    {
        public static void Clear(this IQuestLocationAlias item)
        {
            ((QuestLocationAliasSetterCommon)((IQuestLocationAliasGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static QuestLocationAlias.Mask<bool> GetEqualsMask(
            this IQuestLocationAliasGetter item,
            IQuestLocationAliasGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestLocationAliasCommon)((IQuestLocationAliasGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IQuestLocationAliasGetter item,
            string? name = null,
            QuestLocationAlias.Mask<bool>? printMask = null)
        {
            return ((QuestLocationAliasCommon)((IQuestLocationAliasGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IQuestLocationAliasGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            QuestLocationAlias.Mask<bool>? printMask = null)
        {
            ((QuestLocationAliasCommon)((IQuestLocationAliasGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IQuestLocationAliasGetter item,
            IQuestLocationAliasGetter rhs,
            QuestLocationAlias.TranslationMask? equalsMask = null)
        {
            return ((QuestLocationAliasCommon)((IQuestLocationAliasGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IQuestLocationAlias lhs,
            IQuestLocationAliasGetter rhs,
            out QuestLocationAlias.ErrorMask errorMask,
            QuestLocationAlias.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((QuestLocationAliasSetterTranslationCommon)((IQuestLocationAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = QuestLocationAlias.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IQuestLocationAlias lhs,
            IQuestLocationAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((QuestLocationAliasSetterTranslationCommon)((IQuestLocationAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static QuestLocationAlias DeepCopy(
            this IQuestLocationAliasGetter item,
            QuestLocationAlias.TranslationMask? copyMask = null)
        {
            return ((QuestLocationAliasSetterTranslationCommon)((IQuestLocationAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static QuestLocationAlias DeepCopy(
            this IQuestLocationAliasGetter item,
            out QuestLocationAlias.ErrorMask errorMask,
            QuestLocationAlias.TranslationMask? copyMask = null)
        {
            return ((QuestLocationAliasSetterTranslationCommon)((IQuestLocationAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static QuestLocationAlias DeepCopy(
            this IQuestLocationAliasGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((QuestLocationAliasSetterTranslationCommon)((IQuestLocationAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IQuestLocationAlias item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((QuestLocationAliasSetterCommon)((IQuestLocationAliasGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum QuestLocationAlias_FieldIndex
    {
        ID = 0,
        Name = 1,
        Flags = 2,
        AliasIDToForceIntoWhenFilled = 3,
        SpecificLocation = 4,
        ReferenceAliasLocation = 5,
        ExternalAliasLocation = 6,
        FindMatchingRefFromEvent = 7,
        Conditions = 8,
        ClosestToAlias = 9,
    }
    #endregion

    #region Registration
    internal partial class QuestLocationAlias_Registration : ILoquiRegistration
    {
        public static readonly QuestLocationAlias_Registration Instance = new QuestLocationAlias_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(QuestLocationAlias.Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestLocationAlias.ErrorMask);

        public static readonly Type ClassType = typeof(QuestLocationAlias);

        public static readonly Type GetterType = typeof(IQuestLocationAliasGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuestLocationAlias);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.QuestLocationAlias";

        public const string Name = "QuestLocationAlias";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var endTriggers = RecordCollection.Factory(RecordTypes.ALED);
            var triggers = RecordCollection.Factory();
            var all = RecordCollection.Factory(
                RecordTypes.ALED,
                RecordTypes.ALID,
                RecordTypes.FNAM,
                RecordTypes.ALFI,
                RecordTypes.ALFL,
                RecordTypes.ALFA,
                RecordTypes.KNAM,
                RecordTypes.ALEQ,
                RecordTypes.ALEA,
                RecordTypes.ALFE,
                RecordTypes.ALFD,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.ALCC);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers,
                endRecordTypes: endTriggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(QuestLocationAliasBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class QuestLocationAliasSetterCommon : AQuestAliasSetterCommon
    {
        public new static readonly QuestLocationAliasSetterCommon Instance = new QuestLocationAliasSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IQuestLocationAlias item)
        {
            ClearPartial();
            item.ID = default(UInt32);
            item.Name = default;
            item.Flags = default;
            item.AliasIDToForceIntoWhenFilled = default;
            item.SpecificLocation.Clear();
            item.ReferenceAliasLocation = null;
            item.ExternalAliasLocation = null;
            item.FindMatchingRefFromEvent = null;
            item.Conditions.Clear();
            item.ClosestToAlias = default;
            base.Clear(item);
        }
        
        public override void Clear(IAQuestAlias item)
        {
            Clear(item: (IQuestLocationAlias)item);
        }
        
        #region Mutagen
        public void RemapLinks(IQuestLocationAlias obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.SpecificLocation.Relink(mapping);
            obj.ReferenceAliasLocation?.RemapLinks(mapping);
            obj.ExternalAliasLocation?.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IQuestLocationAlias item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: QuestLocationAliasBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: QuestLocationAliasBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAQuestAlias item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (QuestLocationAlias)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class QuestLocationAliasCommon : AQuestAliasCommon
    {
        public new static readonly QuestLocationAliasCommon Instance = new QuestLocationAliasCommon();

        public QuestLocationAlias.Mask<bool> GetEqualsMask(
            IQuestLocationAliasGetter item,
            IQuestLocationAliasGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new QuestLocationAlias.Mask<bool>(false);
            ((QuestLocationAliasCommon)((IQuestLocationAliasGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestLocationAliasGetter item,
            IQuestLocationAliasGetter rhs,
            QuestLocationAlias.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ID = item.ID == rhs.ID;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.AliasIDToForceIntoWhenFilled = item.AliasIDToForceIntoWhenFilled == rhs.AliasIDToForceIntoWhenFilled;
            ret.SpecificLocation = item.SpecificLocation.Equals(rhs.SpecificLocation);
            ret.ReferenceAliasLocation = EqualsMaskHelper.EqualsHelper(
                item.ReferenceAliasLocation,
                rhs.ReferenceAliasLocation,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ExternalAliasLocation = EqualsMaskHelper.EqualsHelper(
                item.ExternalAliasLocation,
                rhs.ExternalAliasLocation,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FindMatchingRefFromEvent = EqualsMaskHelper.EqualsHelper(
                item.FindMatchingRefFromEvent,
                rhs.FindMatchingRefFromEvent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ClosestToAlias = item.ClosestToAlias == rhs.ClosestToAlias;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IQuestLocationAliasGetter item,
            string? name = null,
            QuestLocationAlias.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IQuestLocationAliasGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            QuestLocationAlias.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"QuestLocationAlias =>");
            }
            else
            {
                sb.AppendLine($"{name} (QuestLocationAlias) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IQuestLocationAliasGetter item,
            StructuredStringBuilder sb,
            QuestLocationAlias.Mask<bool>? printMask = null)
        {
            AQuestAliasCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ID ?? true)
            {
                sb.AppendItem(item.ID, "ID");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.AliasIDToForceIntoWhenFilled ?? true)
                && item.AliasIDToForceIntoWhenFilled is {} AliasIDToForceIntoWhenFilledItem)
            {
                sb.AppendItem(AliasIDToForceIntoWhenFilledItem, "AliasIDToForceIntoWhenFilled");
            }
            if (printMask?.SpecificLocation ?? true)
            {
                sb.AppendItem(item.SpecificLocation.FormKeyNullable, "SpecificLocation");
            }
            if ((printMask?.ReferenceAliasLocation?.Overall ?? true)
                && item.ReferenceAliasLocation is {} ReferenceAliasLocationItem)
            {
                ReferenceAliasLocationItem?.Print(sb, "ReferenceAliasLocation");
            }
            if ((printMask?.ExternalAliasLocation?.Overall ?? true)
                && item.ExternalAliasLocation is {} ExternalAliasLocationItem)
            {
                ExternalAliasLocationItem?.Print(sb, "ExternalAliasLocation");
            }
            if ((printMask?.FindMatchingRefFromEvent?.Overall ?? true)
                && item.FindMatchingRefFromEvent is {} FindMatchingRefFromEventItem)
            {
                FindMatchingRefFromEventItem?.Print(sb, "FindMatchingRefFromEvent");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ClosestToAlias ?? true)
                && item.ClosestToAlias is {} ClosestToAliasItem)
            {
                sb.AppendItem(ClosestToAliasItem, "ClosestToAlias");
            }
        }
        
        public static QuestLocationAlias_FieldIndex ConvertFieldIndex(AQuestAlias_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestLocationAliasGetter? lhs,
            IQuestLocationAliasGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAQuestAliasGetter)lhs, (IAQuestAliasGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.ID) ?? true))
            {
                if (lhs.ID != rhs.ID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.AliasIDToForceIntoWhenFilled) ?? true))
            {
                if (lhs.AliasIDToForceIntoWhenFilled != rhs.AliasIDToForceIntoWhenFilled) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.SpecificLocation) ?? true))
            {
                if (!lhs.SpecificLocation.Equals(rhs.SpecificLocation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.ReferenceAliasLocation) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ReferenceAliasLocation, rhs.ReferenceAliasLocation, out var lhsReferenceAliasLocation, out var rhsReferenceAliasLocation, out var isReferenceAliasLocationEqual))
                {
                    if (!((ReferenceAliasLocationCommon)((IReferenceAliasLocationGetter)lhsReferenceAliasLocation).CommonInstance()!).Equals(lhsReferenceAliasLocation, rhsReferenceAliasLocation, equalsMask?.GetSubCrystal((int)QuestLocationAlias_FieldIndex.ReferenceAliasLocation))) return false;
                }
                else if (!isReferenceAliasLocationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.ExternalAliasLocation) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ExternalAliasLocation, rhs.ExternalAliasLocation, out var lhsExternalAliasLocation, out var rhsExternalAliasLocation, out var isExternalAliasLocationEqual))
                {
                    if (!((ExternalAliasLocationCommon)((IExternalAliasLocationGetter)lhsExternalAliasLocation).CommonInstance()!).Equals(lhsExternalAliasLocation, rhsExternalAliasLocation, equalsMask?.GetSubCrystal((int)QuestLocationAlias_FieldIndex.ExternalAliasLocation))) return false;
                }
                else if (!isExternalAliasLocationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.FindMatchingRefFromEvent) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FindMatchingRefFromEvent, rhs.FindMatchingRefFromEvent, out var lhsFindMatchingRefFromEvent, out var rhsFindMatchingRefFromEvent, out var isFindMatchingRefFromEventEqual))
                {
                    if (!((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)lhsFindMatchingRefFromEvent).CommonInstance()!).Equals(lhsFindMatchingRefFromEvent, rhsFindMatchingRefFromEvent, equalsMask?.GetSubCrystal((int)QuestLocationAlias_FieldIndex.FindMatchingRefFromEvent))) return false;
                }
                else if (!isFindMatchingRefFromEventEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)QuestLocationAlias_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.ClosestToAlias) ?? true))
            {
                if (lhs.ClosestToAlias != rhs.ClosestToAlias) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAQuestAliasGetter? lhs,
            IAQuestAliasGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IQuestLocationAliasGetter?)lhs,
                rhs: rhs as IQuestLocationAliasGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IQuestLocationAliasGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ID);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.AliasIDToForceIntoWhenFilled is {} AliasIDToForceIntoWhenFilleditem)
            {
                hash.Add(AliasIDToForceIntoWhenFilleditem);
            }
            hash.Add(item.SpecificLocation);
            if (item.ReferenceAliasLocation is {} ReferenceAliasLocationitem)
            {
                hash.Add(ReferenceAliasLocationitem);
            }
            if (item.ExternalAliasLocation is {} ExternalAliasLocationitem)
            {
                hash.Add(ExternalAliasLocationitem);
            }
            if (item.FindMatchingRefFromEvent is {} FindMatchingRefFromEventitem)
            {
                hash.Add(FindMatchingRefFromEventitem);
            }
            hash.Add(item.Conditions);
            if (item.ClosestToAlias is {} ClosestToAliasitem)
            {
                hash.Add(ClosestToAliasitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAQuestAliasGetter item)
        {
            return GetHashCode(item: (IQuestLocationAliasGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return QuestLocationAlias.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IQuestLocationAliasGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.SpecificLocation, out var SpecificLocationInfo))
            {
                yield return SpecificLocationInfo;
            }
            if (obj.ReferenceAliasLocation is {} ReferenceAliasLocationItems)
            {
                foreach (var item in ReferenceAliasLocationItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.ExternalAliasLocation is {} ExternalAliasLocationItems)
            {
                foreach (var item in ExternalAliasLocationItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Conditions.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class QuestLocationAliasSetterTranslationCommon : AQuestAliasSetterTranslationCommon
    {
        public new static readonly QuestLocationAliasSetterTranslationCommon Instance = new QuestLocationAliasSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IQuestLocationAlias item,
            IQuestLocationAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAQuestAlias)item,
                (IAQuestAliasGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.ID) ?? true))
            {
                item.ID = rhs.ID;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.AliasIDToForceIntoWhenFilled) ?? true))
            {
                item.AliasIDToForceIntoWhenFilled = rhs.AliasIDToForceIntoWhenFilled;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.SpecificLocation) ?? true))
            {
                item.SpecificLocation.SetTo(rhs.SpecificLocation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.ReferenceAliasLocation) ?? true))
            {
                errorMask?.PushIndex((int)QuestLocationAlias_FieldIndex.ReferenceAliasLocation);
                try
                {
                    if(rhs.ReferenceAliasLocation is {} rhsReferenceAliasLocation)
                    {
                        item.ReferenceAliasLocation = rhsReferenceAliasLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestLocationAlias_FieldIndex.ReferenceAliasLocation));
                    }
                    else
                    {
                        item.ReferenceAliasLocation = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.ExternalAliasLocation) ?? true))
            {
                errorMask?.PushIndex((int)QuestLocationAlias_FieldIndex.ExternalAliasLocation);
                try
                {
                    if(rhs.ExternalAliasLocation is {} rhsExternalAliasLocation)
                    {
                        item.ExternalAliasLocation = rhsExternalAliasLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestLocationAlias_FieldIndex.ExternalAliasLocation));
                    }
                    else
                    {
                        item.ExternalAliasLocation = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.FindMatchingRefFromEvent) ?? true))
            {
                errorMask?.PushIndex((int)QuestLocationAlias_FieldIndex.FindMatchingRefFromEvent);
                try
                {
                    if(rhs.FindMatchingRefFromEvent is {} rhsFindMatchingRefFromEvent)
                    {
                        item.FindMatchingRefFromEvent = rhsFindMatchingRefFromEvent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestLocationAlias_FieldIndex.FindMatchingRefFromEvent));
                    }
                    else
                    {
                        item.FindMatchingRefFromEvent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)QuestLocationAlias_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLocationAlias_FieldIndex.ClosestToAlias) ?? true))
            {
                item.ClosestToAlias = rhs.ClosestToAlias;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IQuestLocationAlias item,
            IQuestLocationAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IAQuestAlias item,
            IAQuestAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuestLocationAlias)item,
                rhs: (IQuestLocationAliasGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public QuestLocationAlias DeepCopy(
            IQuestLocationAliasGetter item,
            QuestLocationAlias.TranslationMask? copyMask = null)
        {
            QuestLocationAlias ret = (QuestLocationAlias)((QuestLocationAliasCommon)((IQuestLocationAliasGetter)item).CommonInstance()!).GetNew();
            ((QuestLocationAliasSetterTranslationCommon)((IQuestLocationAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public QuestLocationAlias DeepCopy(
            IQuestLocationAliasGetter item,
            out QuestLocationAlias.ErrorMask errorMask,
            QuestLocationAlias.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            QuestLocationAlias ret = (QuestLocationAlias)((QuestLocationAliasCommon)((IQuestLocationAliasGetter)item).CommonInstance()!).GetNew();
            ((QuestLocationAliasSetterTranslationCommon)((IQuestLocationAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = QuestLocationAlias.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public QuestLocationAlias DeepCopy(
            IQuestLocationAliasGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            QuestLocationAlias ret = (QuestLocationAlias)((QuestLocationAliasCommon)((IQuestLocationAliasGetter)item).CommonInstance()!).GetNew();
            ((QuestLocationAliasSetterTranslationCommon)((IQuestLocationAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class QuestLocationAlias
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestLocationAlias_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => QuestLocationAlias_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestLocationAliasCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return QuestLocationAliasSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestLocationAliasSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class QuestLocationAliasBinaryWriteTranslation :
        AQuestAliasBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly QuestLocationAliasBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IQuestLocationAliasGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            IQuestLocationAliasGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.ALID),
                binaryType: StringBinaryType.NullTerminate);
            EnumBinaryTranslation<AQuestAlias.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.AliasIDToForceIntoWhenFilled,
                header: translationParams.ConvertToCustom(RecordTypes.ALFI));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpecificLocation,
                header: translationParams.ConvertToCustom(RecordTypes.ALFL));
            if (item.ReferenceAliasLocation is {} ReferenceAliasLocationItem)
            {
                ((ReferenceAliasLocationBinaryWriteTranslation)((IBinaryItem)ReferenceAliasLocationItem).BinaryWriteTranslator).Write(
                    item: ReferenceAliasLocationItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.ExternalAliasLocation is {} ExternalAliasLocationItem)
            {
                ((ExternalAliasLocationBinaryWriteTranslation)((IBinaryItem)ExternalAliasLocationItem).BinaryWriteTranslator).Write(
                    item: ExternalAliasLocationItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.FindMatchingRefFromEvent is {} FindMatchingRefFromEventItem)
            {
                ((FindMatchingRefFromEventBinaryWriteTranslation)((IBinaryItem)FindMatchingRefFromEventItem).BinaryWriteTranslator).Write(
                    item: FindMatchingRefFromEventItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ClosestToAlias,
                header: translationParams.ConvertToCustom(RecordTypes.ALCC));
        }

        public void Write(
            MutagenWriter writer,
            IQuestLocationAliasGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.ALED)) { } // End Marker
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IQuestLocationAliasGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAQuestAliasGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IQuestLocationAliasGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class QuestLocationAliasBinaryCreateTranslation : AQuestAliasBinaryCreateTranslation
    {
        public new static readonly QuestLocationAliasBinaryCreateTranslation Instance = new QuestLocationAliasBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IQuestLocationAlias item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IQuestLocationAlias item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ALID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)QuestLocationAlias_FieldIndex.Name;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<AQuestAlias.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)QuestLocationAlias_FieldIndex.Flags;
                }
                case RecordTypeInts.ALFI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AliasIDToForceIntoWhenFilled = frame.ReadInt32();
                    return (int)QuestLocationAlias_FieldIndex.AliasIDToForceIntoWhenFilled;
                }
                case RecordTypeInts.ALFL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpecificLocation.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestLocationAlias_FieldIndex.SpecificLocation;
                }
                case RecordTypeInts.ALFA:
                case RecordTypeInts.KNAM:
                {
                    item.ReferenceAliasLocation = Mutagen.Bethesda.Fallout4.ReferenceAliasLocation.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestLocationAlias_FieldIndex.ReferenceAliasLocation;
                }
                case RecordTypeInts.ALEQ:
                case RecordTypeInts.ALEA:
                {
                    item.ExternalAliasLocation = Mutagen.Bethesda.Fallout4.ExternalAliasLocation.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestLocationAlias_FieldIndex.ExternalAliasLocation;
                }
                case RecordTypeInts.ALFE:
                case RecordTypeInts.ALFD:
                {
                    item.FindMatchingRefFromEvent = Mutagen.Bethesda.Fallout4.FindMatchingRefFromEvent.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestLocationAlias_FieldIndex.FindMatchingRefFromEvent;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)QuestLocationAlias_FieldIndex.Conditions;
                }
                case RecordTypeInts.ALCC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ClosestToAlias = frame.ReadInt32();
                    return (int)QuestLocationAlias_FieldIndex.ClosestToAlias;
                }
                case RecordTypeInts.ALED: // End Marker
                {
                    frame.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class QuestLocationAliasBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class QuestLocationAliasBinaryOverlay :
        AQuestAliasBinaryOverlay,
        IQuestLocationAliasGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestLocationAlias_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => QuestLocationAlias_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestLocationAliasCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestLocationAliasSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestLocationAliasCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestLocationAliasBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestLocationAliasBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public AQuestAlias.Flag? Flags => EnumBinaryTranslation<AQuestAlias.Flag, MutagenFrame, MutagenWriter>.Instance.ParseRecordNullable(_FlagsLocation, _recordData, _package, 4);
        #endregion
        #region AliasIDToForceIntoWhenFilled
        private int? _AliasIDToForceIntoWhenFilledLocation;
        public Int32? AliasIDToForceIntoWhenFilled => _AliasIDToForceIntoWhenFilledLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AliasIDToForceIntoWhenFilledLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region SpecificLocation
        private int? _SpecificLocationLocation;
        public IFormLinkNullableGetter<ILocationGetter> SpecificLocation => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILocationGetter>(_package, _recordData, _SpecificLocationLocation);
        #endregion
        public IReferenceAliasLocationGetter? ReferenceAliasLocation { get; private set; }
        public IExternalAliasLocationGetter? ExternalAliasLocation { get; private set; }
        public IFindMatchingRefFromEventGetter? FindMatchingRefFromEvent { get; private set; }
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = [];
        #region ClosestToAlias
        private int? _ClosestToAliasLocation;
        public Int32? ClosestToAlias => _ClosestToAliasLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ClosestToAliasLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected QuestLocationAliasBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IQuestLocationAliasGetter QuestLocationAliasFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new QuestLocationAliasBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IQuestLocationAliasGetter QuestLocationAliasFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return QuestLocationAliasFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ALID:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)QuestLocationAlias_FieldIndex.Name;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)QuestLocationAlias_FieldIndex.Flags;
                }
                case RecordTypeInts.ALFI:
                {
                    _AliasIDToForceIntoWhenFilledLocation = (stream.Position - offset);
                    return (int)QuestLocationAlias_FieldIndex.AliasIDToForceIntoWhenFilled;
                }
                case RecordTypeInts.ALFL:
                {
                    _SpecificLocationLocation = (stream.Position - offset);
                    return (int)QuestLocationAlias_FieldIndex.SpecificLocation;
                }
                case RecordTypeInts.ALFA:
                case RecordTypeInts.KNAM:
                {
                    this.ReferenceAliasLocation = ReferenceAliasLocationBinaryOverlay.ReferenceAliasLocationFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestLocationAlias_FieldIndex.ReferenceAliasLocation;
                }
                case RecordTypeInts.ALEQ:
                case RecordTypeInts.ALEA:
                {
                    this.ExternalAliasLocation = ExternalAliasLocationBinaryOverlay.ExternalAliasLocationFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestLocationAlias_FieldIndex.ExternalAliasLocation;
                }
                case RecordTypeInts.ALFE:
                case RecordTypeInts.ALFD:
                {
                    this.FindMatchingRefFromEvent = FindMatchingRefFromEventBinaryOverlay.FindMatchingRefFromEventFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestLocationAlias_FieldIndex.FindMatchingRefFromEvent;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)QuestLocationAlias_FieldIndex.Conditions;
                }
                case RecordTypeInts.ALCC:
                {
                    _ClosestToAliasLocation = (stream.Position - offset);
                    return (int)QuestLocationAlias_FieldIndex.ClosestToAlias;
                }
                case RecordTypeInts.ALED: // End Marker
                {
                    stream.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestLocationAliasMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IQuestLocationAliasGetter rhs) return false;
            return ((QuestLocationAliasCommon)((IQuestLocationAliasGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestLocationAliasGetter? obj)
        {
            return ((QuestLocationAliasCommon)((IQuestLocationAliasGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestLocationAliasCommon)((IQuestLocationAliasGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

