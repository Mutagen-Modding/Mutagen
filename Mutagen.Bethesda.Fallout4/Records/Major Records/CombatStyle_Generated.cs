/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class CombatStyle :
        Fallout4MajorRecord,
        ICombatStyleInternal,
        IEquatable<ICombatStyleGetter>,
        ILoquiObjectSetter<CombatStyle>
    {
        #region Ctor
        protected CombatStyle()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region OffensiveMult
        public Single OffensiveMult { get; set; } = default(Single);
        #endregion
        #region DefensiveMult
        public Single DefensiveMult { get; set; } = default(Single);
        #endregion
        #region GroupOffensiveMult
        public Single GroupOffensiveMult { get; set; } = default(Single);
        #endregion
        #region EquipmentScoreMultMelee
        public Single EquipmentScoreMultMelee { get; set; } = default(Single);
        #endregion
        #region EquipmentScoreMultMagic
        public Single EquipmentScoreMultMagic { get; set; } = default(Single);
        #endregion
        #region EquipmentScoreMultRanged
        public Single EquipmentScoreMultRanged { get; set; } = default(Single);
        #endregion
        #region EquipmentScoreMultShout
        public Single EquipmentScoreMultShout { get; set; } = default(Single);
        #endregion
        #region EquipmentScoreMultUnarmed
        public Single EquipmentScoreMultUnarmed { get; set; } = default(Single);
        #endregion
        #region EquipmentScoreMultStaff
        public Single EquipmentScoreMultStaff { get; set; } = default(Single);
        #endregion
        #region AvoidThreatChance
        public Single AvoidThreatChance { get; set; } = default(Single);
        #endregion
        #region DodgeThreadChance
        public Single DodgeThreadChance { get; set; } = default(Single);
        #endregion
        #region EvadeThreatChance
        public Single EvadeThreatChance { get; set; } = default(Single);
        #endregion
        #region CSMD
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _CSMD;
        public MemorySlice<Byte>? CSMD
        {
            get => this._CSMD;
            set => this._CSMD = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ICombatStyleGetter.CSMD => this.CSMD;
        #endregion
        #region MeleeAttackStaggeredMult
        public Single MeleeAttackStaggeredMult { get; set; } = default(Single);
        #endregion
        #region MeleePowerAttackStaggeredMult
        public Single MeleePowerAttackStaggeredMult { get; set; } = default(Single);
        #endregion
        #region MeleePowerAttackBlockingMult
        public Single MeleePowerAttackBlockingMult { get; set; } = default(Single);
        #endregion
        #region MeleeBashMult
        public Single MeleeBashMult { get; set; } = default(Single);
        #endregion
        #region MeleeBashRecoilMult
        public Single MeleeBashRecoilMult { get; set; } = default(Single);
        #endregion
        #region MeleeBashAttackMult
        public Single MeleeBashAttackMult { get; set; } = default(Single);
        #endregion
        #region MeleeBashPowerAttackMult
        public Single MeleeBashPowerAttackMult { get; set; } = default(Single);
        #endregion
        #region MeleeSpecialAttackMult
        public Single MeleeSpecialAttackMult { get; set; } = default(Single);
        #endregion
        #region MeleeBlockWhenStaggeredMult
        public Single MeleeBlockWhenStaggeredMult { get; set; } = default(Single);
        #endregion
        #region MeleeAttackWhenStaggeredMult
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _MeleeAttackWhenStaggeredMult;
        public Single MeleeAttackWhenStaggeredMult
        {
            get => this._MeleeAttackWhenStaggeredMult;
            set
            {
                this.CSMEDataTypeState &= ~CSMEDataType.Break0;
                this._MeleeAttackWhenStaggeredMult = value;
            }
        }
        #endregion
        #region RangedAccuracyMult
        public Single? RangedAccuracyMult { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICombatStyleGetter.RangedAccuracyMult => this.RangedAccuracyMult;
        #endregion
        #region CloseRangeDuelingCircleMult
        public Single CloseRangeDuelingCircleMult { get; set; } = default(Single);
        #endregion
        #region CloseRangeDuelingFallbackMult
        public Single CloseRangeDuelingFallbackMult { get; set; } = default(Single);
        #endregion
        #region CloseRangeFlankDistance
        public Single CloseRangeFlankDistance { get; set; } = default(Single);
        #endregion
        #region CloseRangeFlankingStalkTime
        public Single CloseRangeFlankingStalkTime { get; set; } = default(Single);
        #endregion
        #region CloseRangeChargeDistance
        public Single CloseRangeChargeDistance { get; set; } = default(Single);
        #endregion
        #region CloseRangeChargingThrowProbability
        public Single CloseRangeChargingThrowProbability { get; set; } = default(Single);
        #endregion
        #region CloseRangeChargingSprintFastProbability
        public Single CloseRangeChargingSprintFastProbability { get; set; } = default(Single);
        #endregion
        #region CloseRangeChargingSideswipeProbability
        public Single CloseRangeChargingSideswipeProbability { get; set; } = default(Single);
        #endregion
        #region CloseRangeChargingDisengageProbability
        public Single CloseRangeChargingDisengageProbability { get; set; } = default(Single);
        #endregion
        #region CloseRangeChargingThrowMaxTargets
        public UInt32 CloseRangeChargingThrowMaxTargets { get; set; } = default(UInt32);
        #endregion
        #region CloseRangeFlankingVariance
        public Single CloseRangeFlankingVariance { get; set; } = default(Single);
        #endregion
        #region LongRangeStrafeMult
        public Single LongRangeStrafeMult { get; set; } = default(Single);
        #endregion
        #region LongRangeAdjustRangeMult
        public Single LongRangeAdjustRangeMult { get; set; } = default(Single);
        #endregion
        #region LongRangeCrouchMult
        public Single LongRangeCrouchMult { get; set; } = default(Single);
        #endregion
        #region LongRangeWaitMult
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _LongRangeWaitMult;
        public Single LongRangeWaitMult
        {
            get => this._LongRangeWaitMult;
            set
            {
                this.CSLRDataTypeState &= ~CSLRDataType.Break0;
                this._LongRangeWaitMult = value;
            }
        }
        #endregion
        #region LongRangeRangeMult
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _LongRangeRangeMult;
        public Single LongRangeRangeMult
        {
            get => this._LongRangeRangeMult;
            set
            {
                this.CSLRDataTypeState &= ~CSLRDataType.Break0;
                this.CSLRDataTypeState &= ~CSLRDataType.Break1;
                this._LongRangeRangeMult = value;
            }
        }
        #endregion
        #region CoverSearchDistanceMult
        public Single? CoverSearchDistanceMult { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICombatStyleGetter.CoverSearchDistanceMult => this.CoverSearchDistanceMult;
        #endregion
        #region HoverChance
        public Single HoverChance { get; set; } = default(Single);
        #endregion
        #region DiveBombChance
        public Single DiveBombChance { get; set; } = default(Single);
        #endregion
        #region GroundAttackChance
        public Single GroundAttackChance { get; set; } = default(Single);
        #endregion
        #region HoverTime
        public Single HoverTime { get; set; } = default(Single);
        #endregion
        #region GroundAttackTime
        public Single GroundAttackTime { get; set; } = default(Single);
        #endregion
        #region PerchAttackChance
        public Single PerchAttackChance { get; set; } = default(Single);
        #endregion
        #region PerchAttackTime
        public Single PerchAttackTime { get; set; } = default(Single);
        #endregion
        #region FlyingAttackChance
        public Single FlyingAttackChance { get; set; } = default(Single);
        #endregion
        #region Flags
        public CombatStyle.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        CombatStyle.Flag? ICombatStyleGetter.Flags => this.Flags;
        #endregion
        #region CSMEDataTypeState
        public CombatStyle.CSMEDataType CSMEDataTypeState { get; set; } = default(CombatStyle.CSMEDataType);
        #endregion
        #region CSLRDataTypeState
        public CombatStyle.CSLRDataType CSLRDataTypeState { get; set; } = default(CombatStyle.CSLRDataType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CombatStyleMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.OffensiveMult = initialValue;
                this.DefensiveMult = initialValue;
                this.GroupOffensiveMult = initialValue;
                this.EquipmentScoreMultMelee = initialValue;
                this.EquipmentScoreMultMagic = initialValue;
                this.EquipmentScoreMultRanged = initialValue;
                this.EquipmentScoreMultShout = initialValue;
                this.EquipmentScoreMultUnarmed = initialValue;
                this.EquipmentScoreMultStaff = initialValue;
                this.AvoidThreatChance = initialValue;
                this.DodgeThreadChance = initialValue;
                this.EvadeThreatChance = initialValue;
                this.CSMD = initialValue;
                this.MeleeAttackStaggeredMult = initialValue;
                this.MeleePowerAttackStaggeredMult = initialValue;
                this.MeleePowerAttackBlockingMult = initialValue;
                this.MeleeBashMult = initialValue;
                this.MeleeBashRecoilMult = initialValue;
                this.MeleeBashAttackMult = initialValue;
                this.MeleeBashPowerAttackMult = initialValue;
                this.MeleeSpecialAttackMult = initialValue;
                this.MeleeBlockWhenStaggeredMult = initialValue;
                this.MeleeAttackWhenStaggeredMult = initialValue;
                this.RangedAccuracyMult = initialValue;
                this.CloseRangeDuelingCircleMult = initialValue;
                this.CloseRangeDuelingFallbackMult = initialValue;
                this.CloseRangeFlankDistance = initialValue;
                this.CloseRangeFlankingStalkTime = initialValue;
                this.CloseRangeChargeDistance = initialValue;
                this.CloseRangeChargingThrowProbability = initialValue;
                this.CloseRangeChargingSprintFastProbability = initialValue;
                this.CloseRangeChargingSideswipeProbability = initialValue;
                this.CloseRangeChargingDisengageProbability = initialValue;
                this.CloseRangeChargingThrowMaxTargets = initialValue;
                this.CloseRangeFlankingVariance = initialValue;
                this.LongRangeStrafeMult = initialValue;
                this.LongRangeAdjustRangeMult = initialValue;
                this.LongRangeCrouchMult = initialValue;
                this.LongRangeWaitMult = initialValue;
                this.LongRangeRangeMult = initialValue;
                this.CoverSearchDistanceMult = initialValue;
                this.HoverChance = initialValue;
                this.DiveBombChance = initialValue;
                this.GroundAttackChance = initialValue;
                this.HoverTime = initialValue;
                this.GroundAttackTime = initialValue;
                this.PerchAttackChance = initialValue;
                this.PerchAttackTime = initialValue;
                this.FlyingAttackChance = initialValue;
                this.Flags = initialValue;
                this.CSMEDataTypeState = initialValue;
                this.CSLRDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem OffensiveMult,
                TItem DefensiveMult,
                TItem GroupOffensiveMult,
                TItem EquipmentScoreMultMelee,
                TItem EquipmentScoreMultMagic,
                TItem EquipmentScoreMultRanged,
                TItem EquipmentScoreMultShout,
                TItem EquipmentScoreMultUnarmed,
                TItem EquipmentScoreMultStaff,
                TItem AvoidThreatChance,
                TItem DodgeThreadChance,
                TItem EvadeThreatChance,
                TItem CSMD,
                TItem MeleeAttackStaggeredMult,
                TItem MeleePowerAttackStaggeredMult,
                TItem MeleePowerAttackBlockingMult,
                TItem MeleeBashMult,
                TItem MeleeBashRecoilMult,
                TItem MeleeBashAttackMult,
                TItem MeleeBashPowerAttackMult,
                TItem MeleeSpecialAttackMult,
                TItem MeleeBlockWhenStaggeredMult,
                TItem MeleeAttackWhenStaggeredMult,
                TItem RangedAccuracyMult,
                TItem CloseRangeDuelingCircleMult,
                TItem CloseRangeDuelingFallbackMult,
                TItem CloseRangeFlankDistance,
                TItem CloseRangeFlankingStalkTime,
                TItem CloseRangeChargeDistance,
                TItem CloseRangeChargingThrowProbability,
                TItem CloseRangeChargingSprintFastProbability,
                TItem CloseRangeChargingSideswipeProbability,
                TItem CloseRangeChargingDisengageProbability,
                TItem CloseRangeChargingThrowMaxTargets,
                TItem CloseRangeFlankingVariance,
                TItem LongRangeStrafeMult,
                TItem LongRangeAdjustRangeMult,
                TItem LongRangeCrouchMult,
                TItem LongRangeWaitMult,
                TItem LongRangeRangeMult,
                TItem CoverSearchDistanceMult,
                TItem HoverChance,
                TItem DiveBombChance,
                TItem GroundAttackChance,
                TItem HoverTime,
                TItem GroundAttackTime,
                TItem PerchAttackChance,
                TItem PerchAttackTime,
                TItem FlyingAttackChance,
                TItem Flags,
                TItem CSMEDataTypeState,
                TItem CSLRDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.OffensiveMult = OffensiveMult;
                this.DefensiveMult = DefensiveMult;
                this.GroupOffensiveMult = GroupOffensiveMult;
                this.EquipmentScoreMultMelee = EquipmentScoreMultMelee;
                this.EquipmentScoreMultMagic = EquipmentScoreMultMagic;
                this.EquipmentScoreMultRanged = EquipmentScoreMultRanged;
                this.EquipmentScoreMultShout = EquipmentScoreMultShout;
                this.EquipmentScoreMultUnarmed = EquipmentScoreMultUnarmed;
                this.EquipmentScoreMultStaff = EquipmentScoreMultStaff;
                this.AvoidThreatChance = AvoidThreatChance;
                this.DodgeThreadChance = DodgeThreadChance;
                this.EvadeThreatChance = EvadeThreatChance;
                this.CSMD = CSMD;
                this.MeleeAttackStaggeredMult = MeleeAttackStaggeredMult;
                this.MeleePowerAttackStaggeredMult = MeleePowerAttackStaggeredMult;
                this.MeleePowerAttackBlockingMult = MeleePowerAttackBlockingMult;
                this.MeleeBashMult = MeleeBashMult;
                this.MeleeBashRecoilMult = MeleeBashRecoilMult;
                this.MeleeBashAttackMult = MeleeBashAttackMult;
                this.MeleeBashPowerAttackMult = MeleeBashPowerAttackMult;
                this.MeleeSpecialAttackMult = MeleeSpecialAttackMult;
                this.MeleeBlockWhenStaggeredMult = MeleeBlockWhenStaggeredMult;
                this.MeleeAttackWhenStaggeredMult = MeleeAttackWhenStaggeredMult;
                this.RangedAccuracyMult = RangedAccuracyMult;
                this.CloseRangeDuelingCircleMult = CloseRangeDuelingCircleMult;
                this.CloseRangeDuelingFallbackMult = CloseRangeDuelingFallbackMult;
                this.CloseRangeFlankDistance = CloseRangeFlankDistance;
                this.CloseRangeFlankingStalkTime = CloseRangeFlankingStalkTime;
                this.CloseRangeChargeDistance = CloseRangeChargeDistance;
                this.CloseRangeChargingThrowProbability = CloseRangeChargingThrowProbability;
                this.CloseRangeChargingSprintFastProbability = CloseRangeChargingSprintFastProbability;
                this.CloseRangeChargingSideswipeProbability = CloseRangeChargingSideswipeProbability;
                this.CloseRangeChargingDisengageProbability = CloseRangeChargingDisengageProbability;
                this.CloseRangeChargingThrowMaxTargets = CloseRangeChargingThrowMaxTargets;
                this.CloseRangeFlankingVariance = CloseRangeFlankingVariance;
                this.LongRangeStrafeMult = LongRangeStrafeMult;
                this.LongRangeAdjustRangeMult = LongRangeAdjustRangeMult;
                this.LongRangeCrouchMult = LongRangeCrouchMult;
                this.LongRangeWaitMult = LongRangeWaitMult;
                this.LongRangeRangeMult = LongRangeRangeMult;
                this.CoverSearchDistanceMult = CoverSearchDistanceMult;
                this.HoverChance = HoverChance;
                this.DiveBombChance = DiveBombChance;
                this.GroundAttackChance = GroundAttackChance;
                this.HoverTime = HoverTime;
                this.GroundAttackTime = GroundAttackTime;
                this.PerchAttackChance = PerchAttackChance;
                this.PerchAttackTime = PerchAttackTime;
                this.FlyingAttackChance = FlyingAttackChance;
                this.Flags = Flags;
                this.CSMEDataTypeState = CSMEDataTypeState;
                this.CSLRDataTypeState = CSLRDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem OffensiveMult;
            public TItem DefensiveMult;
            public TItem GroupOffensiveMult;
            public TItem EquipmentScoreMultMelee;
            public TItem EquipmentScoreMultMagic;
            public TItem EquipmentScoreMultRanged;
            public TItem EquipmentScoreMultShout;
            public TItem EquipmentScoreMultUnarmed;
            public TItem EquipmentScoreMultStaff;
            public TItem AvoidThreatChance;
            public TItem DodgeThreadChance;
            public TItem EvadeThreatChance;
            public TItem CSMD;
            public TItem MeleeAttackStaggeredMult;
            public TItem MeleePowerAttackStaggeredMult;
            public TItem MeleePowerAttackBlockingMult;
            public TItem MeleeBashMult;
            public TItem MeleeBashRecoilMult;
            public TItem MeleeBashAttackMult;
            public TItem MeleeBashPowerAttackMult;
            public TItem MeleeSpecialAttackMult;
            public TItem MeleeBlockWhenStaggeredMult;
            public TItem MeleeAttackWhenStaggeredMult;
            public TItem RangedAccuracyMult;
            public TItem CloseRangeDuelingCircleMult;
            public TItem CloseRangeDuelingFallbackMult;
            public TItem CloseRangeFlankDistance;
            public TItem CloseRangeFlankingStalkTime;
            public TItem CloseRangeChargeDistance;
            public TItem CloseRangeChargingThrowProbability;
            public TItem CloseRangeChargingSprintFastProbability;
            public TItem CloseRangeChargingSideswipeProbability;
            public TItem CloseRangeChargingDisengageProbability;
            public TItem CloseRangeChargingThrowMaxTargets;
            public TItem CloseRangeFlankingVariance;
            public TItem LongRangeStrafeMult;
            public TItem LongRangeAdjustRangeMult;
            public TItem LongRangeCrouchMult;
            public TItem LongRangeWaitMult;
            public TItem LongRangeRangeMult;
            public TItem CoverSearchDistanceMult;
            public TItem HoverChance;
            public TItem DiveBombChance;
            public TItem GroundAttackChance;
            public TItem HoverTime;
            public TItem GroundAttackTime;
            public TItem PerchAttackChance;
            public TItem PerchAttackTime;
            public TItem FlyingAttackChance;
            public TItem Flags;
            public TItem CSMEDataTypeState;
            public TItem CSLRDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.OffensiveMult, rhs.OffensiveMult)) return false;
                if (!object.Equals(this.DefensiveMult, rhs.DefensiveMult)) return false;
                if (!object.Equals(this.GroupOffensiveMult, rhs.GroupOffensiveMult)) return false;
                if (!object.Equals(this.EquipmentScoreMultMelee, rhs.EquipmentScoreMultMelee)) return false;
                if (!object.Equals(this.EquipmentScoreMultMagic, rhs.EquipmentScoreMultMagic)) return false;
                if (!object.Equals(this.EquipmentScoreMultRanged, rhs.EquipmentScoreMultRanged)) return false;
                if (!object.Equals(this.EquipmentScoreMultShout, rhs.EquipmentScoreMultShout)) return false;
                if (!object.Equals(this.EquipmentScoreMultUnarmed, rhs.EquipmentScoreMultUnarmed)) return false;
                if (!object.Equals(this.EquipmentScoreMultStaff, rhs.EquipmentScoreMultStaff)) return false;
                if (!object.Equals(this.AvoidThreatChance, rhs.AvoidThreatChance)) return false;
                if (!object.Equals(this.DodgeThreadChance, rhs.DodgeThreadChance)) return false;
                if (!object.Equals(this.EvadeThreatChance, rhs.EvadeThreatChance)) return false;
                if (!object.Equals(this.CSMD, rhs.CSMD)) return false;
                if (!object.Equals(this.MeleeAttackStaggeredMult, rhs.MeleeAttackStaggeredMult)) return false;
                if (!object.Equals(this.MeleePowerAttackStaggeredMult, rhs.MeleePowerAttackStaggeredMult)) return false;
                if (!object.Equals(this.MeleePowerAttackBlockingMult, rhs.MeleePowerAttackBlockingMult)) return false;
                if (!object.Equals(this.MeleeBashMult, rhs.MeleeBashMult)) return false;
                if (!object.Equals(this.MeleeBashRecoilMult, rhs.MeleeBashRecoilMult)) return false;
                if (!object.Equals(this.MeleeBashAttackMult, rhs.MeleeBashAttackMult)) return false;
                if (!object.Equals(this.MeleeBashPowerAttackMult, rhs.MeleeBashPowerAttackMult)) return false;
                if (!object.Equals(this.MeleeSpecialAttackMult, rhs.MeleeSpecialAttackMult)) return false;
                if (!object.Equals(this.MeleeBlockWhenStaggeredMult, rhs.MeleeBlockWhenStaggeredMult)) return false;
                if (!object.Equals(this.MeleeAttackWhenStaggeredMult, rhs.MeleeAttackWhenStaggeredMult)) return false;
                if (!object.Equals(this.RangedAccuracyMult, rhs.RangedAccuracyMult)) return false;
                if (!object.Equals(this.CloseRangeDuelingCircleMult, rhs.CloseRangeDuelingCircleMult)) return false;
                if (!object.Equals(this.CloseRangeDuelingFallbackMult, rhs.CloseRangeDuelingFallbackMult)) return false;
                if (!object.Equals(this.CloseRangeFlankDistance, rhs.CloseRangeFlankDistance)) return false;
                if (!object.Equals(this.CloseRangeFlankingStalkTime, rhs.CloseRangeFlankingStalkTime)) return false;
                if (!object.Equals(this.CloseRangeChargeDistance, rhs.CloseRangeChargeDistance)) return false;
                if (!object.Equals(this.CloseRangeChargingThrowProbability, rhs.CloseRangeChargingThrowProbability)) return false;
                if (!object.Equals(this.CloseRangeChargingSprintFastProbability, rhs.CloseRangeChargingSprintFastProbability)) return false;
                if (!object.Equals(this.CloseRangeChargingSideswipeProbability, rhs.CloseRangeChargingSideswipeProbability)) return false;
                if (!object.Equals(this.CloseRangeChargingDisengageProbability, rhs.CloseRangeChargingDisengageProbability)) return false;
                if (!object.Equals(this.CloseRangeChargingThrowMaxTargets, rhs.CloseRangeChargingThrowMaxTargets)) return false;
                if (!object.Equals(this.CloseRangeFlankingVariance, rhs.CloseRangeFlankingVariance)) return false;
                if (!object.Equals(this.LongRangeStrafeMult, rhs.LongRangeStrafeMult)) return false;
                if (!object.Equals(this.LongRangeAdjustRangeMult, rhs.LongRangeAdjustRangeMult)) return false;
                if (!object.Equals(this.LongRangeCrouchMult, rhs.LongRangeCrouchMult)) return false;
                if (!object.Equals(this.LongRangeWaitMult, rhs.LongRangeWaitMult)) return false;
                if (!object.Equals(this.LongRangeRangeMult, rhs.LongRangeRangeMult)) return false;
                if (!object.Equals(this.CoverSearchDistanceMult, rhs.CoverSearchDistanceMult)) return false;
                if (!object.Equals(this.HoverChance, rhs.HoverChance)) return false;
                if (!object.Equals(this.DiveBombChance, rhs.DiveBombChance)) return false;
                if (!object.Equals(this.GroundAttackChance, rhs.GroundAttackChance)) return false;
                if (!object.Equals(this.HoverTime, rhs.HoverTime)) return false;
                if (!object.Equals(this.GroundAttackTime, rhs.GroundAttackTime)) return false;
                if (!object.Equals(this.PerchAttackChance, rhs.PerchAttackChance)) return false;
                if (!object.Equals(this.PerchAttackTime, rhs.PerchAttackTime)) return false;
                if (!object.Equals(this.FlyingAttackChance, rhs.FlyingAttackChance)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.CSMEDataTypeState, rhs.CSMEDataTypeState)) return false;
                if (!object.Equals(this.CSLRDataTypeState, rhs.CSLRDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.OffensiveMult);
                hash.Add(this.DefensiveMult);
                hash.Add(this.GroupOffensiveMult);
                hash.Add(this.EquipmentScoreMultMelee);
                hash.Add(this.EquipmentScoreMultMagic);
                hash.Add(this.EquipmentScoreMultRanged);
                hash.Add(this.EquipmentScoreMultShout);
                hash.Add(this.EquipmentScoreMultUnarmed);
                hash.Add(this.EquipmentScoreMultStaff);
                hash.Add(this.AvoidThreatChance);
                hash.Add(this.DodgeThreadChance);
                hash.Add(this.EvadeThreatChance);
                hash.Add(this.CSMD);
                hash.Add(this.MeleeAttackStaggeredMult);
                hash.Add(this.MeleePowerAttackStaggeredMult);
                hash.Add(this.MeleePowerAttackBlockingMult);
                hash.Add(this.MeleeBashMult);
                hash.Add(this.MeleeBashRecoilMult);
                hash.Add(this.MeleeBashAttackMult);
                hash.Add(this.MeleeBashPowerAttackMult);
                hash.Add(this.MeleeSpecialAttackMult);
                hash.Add(this.MeleeBlockWhenStaggeredMult);
                hash.Add(this.MeleeAttackWhenStaggeredMult);
                hash.Add(this.RangedAccuracyMult);
                hash.Add(this.CloseRangeDuelingCircleMult);
                hash.Add(this.CloseRangeDuelingFallbackMult);
                hash.Add(this.CloseRangeFlankDistance);
                hash.Add(this.CloseRangeFlankingStalkTime);
                hash.Add(this.CloseRangeChargeDistance);
                hash.Add(this.CloseRangeChargingThrowProbability);
                hash.Add(this.CloseRangeChargingSprintFastProbability);
                hash.Add(this.CloseRangeChargingSideswipeProbability);
                hash.Add(this.CloseRangeChargingDisengageProbability);
                hash.Add(this.CloseRangeChargingThrowMaxTargets);
                hash.Add(this.CloseRangeFlankingVariance);
                hash.Add(this.LongRangeStrafeMult);
                hash.Add(this.LongRangeAdjustRangeMult);
                hash.Add(this.LongRangeCrouchMult);
                hash.Add(this.LongRangeWaitMult);
                hash.Add(this.LongRangeRangeMult);
                hash.Add(this.CoverSearchDistanceMult);
                hash.Add(this.HoverChance);
                hash.Add(this.DiveBombChance);
                hash.Add(this.GroundAttackChance);
                hash.Add(this.HoverTime);
                hash.Add(this.GroundAttackTime);
                hash.Add(this.PerchAttackChance);
                hash.Add(this.PerchAttackTime);
                hash.Add(this.FlyingAttackChance);
                hash.Add(this.Flags);
                hash.Add(this.CSMEDataTypeState);
                hash.Add(this.CSLRDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.OffensiveMult)) return false;
                if (!eval(this.DefensiveMult)) return false;
                if (!eval(this.GroupOffensiveMult)) return false;
                if (!eval(this.EquipmentScoreMultMelee)) return false;
                if (!eval(this.EquipmentScoreMultMagic)) return false;
                if (!eval(this.EquipmentScoreMultRanged)) return false;
                if (!eval(this.EquipmentScoreMultShout)) return false;
                if (!eval(this.EquipmentScoreMultUnarmed)) return false;
                if (!eval(this.EquipmentScoreMultStaff)) return false;
                if (!eval(this.AvoidThreatChance)) return false;
                if (!eval(this.DodgeThreadChance)) return false;
                if (!eval(this.EvadeThreatChance)) return false;
                if (!eval(this.CSMD)) return false;
                if (!eval(this.MeleeAttackStaggeredMult)) return false;
                if (!eval(this.MeleePowerAttackStaggeredMult)) return false;
                if (!eval(this.MeleePowerAttackBlockingMult)) return false;
                if (!eval(this.MeleeBashMult)) return false;
                if (!eval(this.MeleeBashRecoilMult)) return false;
                if (!eval(this.MeleeBashAttackMult)) return false;
                if (!eval(this.MeleeBashPowerAttackMult)) return false;
                if (!eval(this.MeleeSpecialAttackMult)) return false;
                if (!eval(this.MeleeBlockWhenStaggeredMult)) return false;
                if (!eval(this.MeleeAttackWhenStaggeredMult)) return false;
                if (!eval(this.RangedAccuracyMult)) return false;
                if (!eval(this.CloseRangeDuelingCircleMult)) return false;
                if (!eval(this.CloseRangeDuelingFallbackMult)) return false;
                if (!eval(this.CloseRangeFlankDistance)) return false;
                if (!eval(this.CloseRangeFlankingStalkTime)) return false;
                if (!eval(this.CloseRangeChargeDistance)) return false;
                if (!eval(this.CloseRangeChargingThrowProbability)) return false;
                if (!eval(this.CloseRangeChargingSprintFastProbability)) return false;
                if (!eval(this.CloseRangeChargingSideswipeProbability)) return false;
                if (!eval(this.CloseRangeChargingDisengageProbability)) return false;
                if (!eval(this.CloseRangeChargingThrowMaxTargets)) return false;
                if (!eval(this.CloseRangeFlankingVariance)) return false;
                if (!eval(this.LongRangeStrafeMult)) return false;
                if (!eval(this.LongRangeAdjustRangeMult)) return false;
                if (!eval(this.LongRangeCrouchMult)) return false;
                if (!eval(this.LongRangeWaitMult)) return false;
                if (!eval(this.LongRangeRangeMult)) return false;
                if (!eval(this.CoverSearchDistanceMult)) return false;
                if (!eval(this.HoverChance)) return false;
                if (!eval(this.DiveBombChance)) return false;
                if (!eval(this.GroundAttackChance)) return false;
                if (!eval(this.HoverTime)) return false;
                if (!eval(this.GroundAttackTime)) return false;
                if (!eval(this.PerchAttackChance)) return false;
                if (!eval(this.PerchAttackTime)) return false;
                if (!eval(this.FlyingAttackChance)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.CSMEDataTypeState)) return false;
                if (!eval(this.CSLRDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.OffensiveMult)) return true;
                if (eval(this.DefensiveMult)) return true;
                if (eval(this.GroupOffensiveMult)) return true;
                if (eval(this.EquipmentScoreMultMelee)) return true;
                if (eval(this.EquipmentScoreMultMagic)) return true;
                if (eval(this.EquipmentScoreMultRanged)) return true;
                if (eval(this.EquipmentScoreMultShout)) return true;
                if (eval(this.EquipmentScoreMultUnarmed)) return true;
                if (eval(this.EquipmentScoreMultStaff)) return true;
                if (eval(this.AvoidThreatChance)) return true;
                if (eval(this.DodgeThreadChance)) return true;
                if (eval(this.EvadeThreatChance)) return true;
                if (eval(this.CSMD)) return true;
                if (eval(this.MeleeAttackStaggeredMult)) return true;
                if (eval(this.MeleePowerAttackStaggeredMult)) return true;
                if (eval(this.MeleePowerAttackBlockingMult)) return true;
                if (eval(this.MeleeBashMult)) return true;
                if (eval(this.MeleeBashRecoilMult)) return true;
                if (eval(this.MeleeBashAttackMult)) return true;
                if (eval(this.MeleeBashPowerAttackMult)) return true;
                if (eval(this.MeleeSpecialAttackMult)) return true;
                if (eval(this.MeleeBlockWhenStaggeredMult)) return true;
                if (eval(this.MeleeAttackWhenStaggeredMult)) return true;
                if (eval(this.RangedAccuracyMult)) return true;
                if (eval(this.CloseRangeDuelingCircleMult)) return true;
                if (eval(this.CloseRangeDuelingFallbackMult)) return true;
                if (eval(this.CloseRangeFlankDistance)) return true;
                if (eval(this.CloseRangeFlankingStalkTime)) return true;
                if (eval(this.CloseRangeChargeDistance)) return true;
                if (eval(this.CloseRangeChargingThrowProbability)) return true;
                if (eval(this.CloseRangeChargingSprintFastProbability)) return true;
                if (eval(this.CloseRangeChargingSideswipeProbability)) return true;
                if (eval(this.CloseRangeChargingDisengageProbability)) return true;
                if (eval(this.CloseRangeChargingThrowMaxTargets)) return true;
                if (eval(this.CloseRangeFlankingVariance)) return true;
                if (eval(this.LongRangeStrafeMult)) return true;
                if (eval(this.LongRangeAdjustRangeMult)) return true;
                if (eval(this.LongRangeCrouchMult)) return true;
                if (eval(this.LongRangeWaitMult)) return true;
                if (eval(this.LongRangeRangeMult)) return true;
                if (eval(this.CoverSearchDistanceMult)) return true;
                if (eval(this.HoverChance)) return true;
                if (eval(this.DiveBombChance)) return true;
                if (eval(this.GroundAttackChance)) return true;
                if (eval(this.HoverTime)) return true;
                if (eval(this.GroundAttackTime)) return true;
                if (eval(this.PerchAttackChance)) return true;
                if (eval(this.PerchAttackTime)) return true;
                if (eval(this.FlyingAttackChance)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.CSMEDataTypeState)) return true;
                if (eval(this.CSLRDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CombatStyle.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.OffensiveMult = eval(this.OffensiveMult);
                obj.DefensiveMult = eval(this.DefensiveMult);
                obj.GroupOffensiveMult = eval(this.GroupOffensiveMult);
                obj.EquipmentScoreMultMelee = eval(this.EquipmentScoreMultMelee);
                obj.EquipmentScoreMultMagic = eval(this.EquipmentScoreMultMagic);
                obj.EquipmentScoreMultRanged = eval(this.EquipmentScoreMultRanged);
                obj.EquipmentScoreMultShout = eval(this.EquipmentScoreMultShout);
                obj.EquipmentScoreMultUnarmed = eval(this.EquipmentScoreMultUnarmed);
                obj.EquipmentScoreMultStaff = eval(this.EquipmentScoreMultStaff);
                obj.AvoidThreatChance = eval(this.AvoidThreatChance);
                obj.DodgeThreadChance = eval(this.DodgeThreadChance);
                obj.EvadeThreatChance = eval(this.EvadeThreatChance);
                obj.CSMD = eval(this.CSMD);
                obj.MeleeAttackStaggeredMult = eval(this.MeleeAttackStaggeredMult);
                obj.MeleePowerAttackStaggeredMult = eval(this.MeleePowerAttackStaggeredMult);
                obj.MeleePowerAttackBlockingMult = eval(this.MeleePowerAttackBlockingMult);
                obj.MeleeBashMult = eval(this.MeleeBashMult);
                obj.MeleeBashRecoilMult = eval(this.MeleeBashRecoilMult);
                obj.MeleeBashAttackMult = eval(this.MeleeBashAttackMult);
                obj.MeleeBashPowerAttackMult = eval(this.MeleeBashPowerAttackMult);
                obj.MeleeSpecialAttackMult = eval(this.MeleeSpecialAttackMult);
                obj.MeleeBlockWhenStaggeredMult = eval(this.MeleeBlockWhenStaggeredMult);
                obj.MeleeAttackWhenStaggeredMult = eval(this.MeleeAttackWhenStaggeredMult);
                obj.RangedAccuracyMult = eval(this.RangedAccuracyMult);
                obj.CloseRangeDuelingCircleMult = eval(this.CloseRangeDuelingCircleMult);
                obj.CloseRangeDuelingFallbackMult = eval(this.CloseRangeDuelingFallbackMult);
                obj.CloseRangeFlankDistance = eval(this.CloseRangeFlankDistance);
                obj.CloseRangeFlankingStalkTime = eval(this.CloseRangeFlankingStalkTime);
                obj.CloseRangeChargeDistance = eval(this.CloseRangeChargeDistance);
                obj.CloseRangeChargingThrowProbability = eval(this.CloseRangeChargingThrowProbability);
                obj.CloseRangeChargingSprintFastProbability = eval(this.CloseRangeChargingSprintFastProbability);
                obj.CloseRangeChargingSideswipeProbability = eval(this.CloseRangeChargingSideswipeProbability);
                obj.CloseRangeChargingDisengageProbability = eval(this.CloseRangeChargingDisengageProbability);
                obj.CloseRangeChargingThrowMaxTargets = eval(this.CloseRangeChargingThrowMaxTargets);
                obj.CloseRangeFlankingVariance = eval(this.CloseRangeFlankingVariance);
                obj.LongRangeStrafeMult = eval(this.LongRangeStrafeMult);
                obj.LongRangeAdjustRangeMult = eval(this.LongRangeAdjustRangeMult);
                obj.LongRangeCrouchMult = eval(this.LongRangeCrouchMult);
                obj.LongRangeWaitMult = eval(this.LongRangeWaitMult);
                obj.LongRangeRangeMult = eval(this.LongRangeRangeMult);
                obj.CoverSearchDistanceMult = eval(this.CoverSearchDistanceMult);
                obj.HoverChance = eval(this.HoverChance);
                obj.DiveBombChance = eval(this.DiveBombChance);
                obj.GroundAttackChance = eval(this.GroundAttackChance);
                obj.HoverTime = eval(this.HoverTime);
                obj.GroundAttackTime = eval(this.GroundAttackTime);
                obj.PerchAttackChance = eval(this.PerchAttackChance);
                obj.PerchAttackTime = eval(this.PerchAttackTime);
                obj.FlyingAttackChance = eval(this.FlyingAttackChance);
                obj.Flags = eval(this.Flags);
                obj.CSMEDataTypeState = eval(this.CSMEDataTypeState);
                obj.CSLRDataTypeState = eval(this.CSLRDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CombatStyle.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CombatStyle.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CombatStyle.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.OffensiveMult ?? true)
                    {
                        sb.AppendItem(OffensiveMult, "OffensiveMult");
                    }
                    if (printMask?.DefensiveMult ?? true)
                    {
                        sb.AppendItem(DefensiveMult, "DefensiveMult");
                    }
                    if (printMask?.GroupOffensiveMult ?? true)
                    {
                        sb.AppendItem(GroupOffensiveMult, "GroupOffensiveMult");
                    }
                    if (printMask?.EquipmentScoreMultMelee ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMultMelee, "EquipmentScoreMultMelee");
                    }
                    if (printMask?.EquipmentScoreMultMagic ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMultMagic, "EquipmentScoreMultMagic");
                    }
                    if (printMask?.EquipmentScoreMultRanged ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMultRanged, "EquipmentScoreMultRanged");
                    }
                    if (printMask?.EquipmentScoreMultShout ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMultShout, "EquipmentScoreMultShout");
                    }
                    if (printMask?.EquipmentScoreMultUnarmed ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMultUnarmed, "EquipmentScoreMultUnarmed");
                    }
                    if (printMask?.EquipmentScoreMultStaff ?? true)
                    {
                        sb.AppendItem(EquipmentScoreMultStaff, "EquipmentScoreMultStaff");
                    }
                    if (printMask?.AvoidThreatChance ?? true)
                    {
                        sb.AppendItem(AvoidThreatChance, "AvoidThreatChance");
                    }
                    if (printMask?.DodgeThreadChance ?? true)
                    {
                        sb.AppendItem(DodgeThreadChance, "DodgeThreadChance");
                    }
                    if (printMask?.EvadeThreatChance ?? true)
                    {
                        sb.AppendItem(EvadeThreatChance, "EvadeThreatChance");
                    }
                    if (printMask?.CSMD ?? true)
                    {
                        sb.AppendItem(CSMD, "CSMD");
                    }
                    if (printMask?.MeleeAttackStaggeredMult ?? true)
                    {
                        sb.AppendItem(MeleeAttackStaggeredMult, "MeleeAttackStaggeredMult");
                    }
                    if (printMask?.MeleePowerAttackStaggeredMult ?? true)
                    {
                        sb.AppendItem(MeleePowerAttackStaggeredMult, "MeleePowerAttackStaggeredMult");
                    }
                    if (printMask?.MeleePowerAttackBlockingMult ?? true)
                    {
                        sb.AppendItem(MeleePowerAttackBlockingMult, "MeleePowerAttackBlockingMult");
                    }
                    if (printMask?.MeleeBashMult ?? true)
                    {
                        sb.AppendItem(MeleeBashMult, "MeleeBashMult");
                    }
                    if (printMask?.MeleeBashRecoilMult ?? true)
                    {
                        sb.AppendItem(MeleeBashRecoilMult, "MeleeBashRecoilMult");
                    }
                    if (printMask?.MeleeBashAttackMult ?? true)
                    {
                        sb.AppendItem(MeleeBashAttackMult, "MeleeBashAttackMult");
                    }
                    if (printMask?.MeleeBashPowerAttackMult ?? true)
                    {
                        sb.AppendItem(MeleeBashPowerAttackMult, "MeleeBashPowerAttackMult");
                    }
                    if (printMask?.MeleeSpecialAttackMult ?? true)
                    {
                        sb.AppendItem(MeleeSpecialAttackMult, "MeleeSpecialAttackMult");
                    }
                    if (printMask?.MeleeBlockWhenStaggeredMult ?? true)
                    {
                        sb.AppendItem(MeleeBlockWhenStaggeredMult, "MeleeBlockWhenStaggeredMult");
                    }
                    if (printMask?.MeleeAttackWhenStaggeredMult ?? true)
                    {
                        sb.AppendItem(MeleeAttackWhenStaggeredMult, "MeleeAttackWhenStaggeredMult");
                    }
                    if (printMask?.RangedAccuracyMult ?? true)
                    {
                        sb.AppendItem(RangedAccuracyMult, "RangedAccuracyMult");
                    }
                    if (printMask?.CloseRangeDuelingCircleMult ?? true)
                    {
                        sb.AppendItem(CloseRangeDuelingCircleMult, "CloseRangeDuelingCircleMult");
                    }
                    if (printMask?.CloseRangeDuelingFallbackMult ?? true)
                    {
                        sb.AppendItem(CloseRangeDuelingFallbackMult, "CloseRangeDuelingFallbackMult");
                    }
                    if (printMask?.CloseRangeFlankDistance ?? true)
                    {
                        sb.AppendItem(CloseRangeFlankDistance, "CloseRangeFlankDistance");
                    }
                    if (printMask?.CloseRangeFlankingStalkTime ?? true)
                    {
                        sb.AppendItem(CloseRangeFlankingStalkTime, "CloseRangeFlankingStalkTime");
                    }
                    if (printMask?.CloseRangeChargeDistance ?? true)
                    {
                        sb.AppendItem(CloseRangeChargeDistance, "CloseRangeChargeDistance");
                    }
                    if (printMask?.CloseRangeChargingThrowProbability ?? true)
                    {
                        sb.AppendItem(CloseRangeChargingThrowProbability, "CloseRangeChargingThrowProbability");
                    }
                    if (printMask?.CloseRangeChargingSprintFastProbability ?? true)
                    {
                        sb.AppendItem(CloseRangeChargingSprintFastProbability, "CloseRangeChargingSprintFastProbability");
                    }
                    if (printMask?.CloseRangeChargingSideswipeProbability ?? true)
                    {
                        sb.AppendItem(CloseRangeChargingSideswipeProbability, "CloseRangeChargingSideswipeProbability");
                    }
                    if (printMask?.CloseRangeChargingDisengageProbability ?? true)
                    {
                        sb.AppendItem(CloseRangeChargingDisengageProbability, "CloseRangeChargingDisengageProbability");
                    }
                    if (printMask?.CloseRangeChargingThrowMaxTargets ?? true)
                    {
                        sb.AppendItem(CloseRangeChargingThrowMaxTargets, "CloseRangeChargingThrowMaxTargets");
                    }
                    if (printMask?.CloseRangeFlankingVariance ?? true)
                    {
                        sb.AppendItem(CloseRangeFlankingVariance, "CloseRangeFlankingVariance");
                    }
                    if (printMask?.LongRangeStrafeMult ?? true)
                    {
                        sb.AppendItem(LongRangeStrafeMult, "LongRangeStrafeMult");
                    }
                    if (printMask?.LongRangeAdjustRangeMult ?? true)
                    {
                        sb.AppendItem(LongRangeAdjustRangeMult, "LongRangeAdjustRangeMult");
                    }
                    if (printMask?.LongRangeCrouchMult ?? true)
                    {
                        sb.AppendItem(LongRangeCrouchMult, "LongRangeCrouchMult");
                    }
                    if (printMask?.LongRangeWaitMult ?? true)
                    {
                        sb.AppendItem(LongRangeWaitMult, "LongRangeWaitMult");
                    }
                    if (printMask?.LongRangeRangeMult ?? true)
                    {
                        sb.AppendItem(LongRangeRangeMult, "LongRangeRangeMult");
                    }
                    if (printMask?.CoverSearchDistanceMult ?? true)
                    {
                        sb.AppendItem(CoverSearchDistanceMult, "CoverSearchDistanceMult");
                    }
                    if (printMask?.HoverChance ?? true)
                    {
                        sb.AppendItem(HoverChance, "HoverChance");
                    }
                    if (printMask?.DiveBombChance ?? true)
                    {
                        sb.AppendItem(DiveBombChance, "DiveBombChance");
                    }
                    if (printMask?.GroundAttackChance ?? true)
                    {
                        sb.AppendItem(GroundAttackChance, "GroundAttackChance");
                    }
                    if (printMask?.HoverTime ?? true)
                    {
                        sb.AppendItem(HoverTime, "HoverTime");
                    }
                    if (printMask?.GroundAttackTime ?? true)
                    {
                        sb.AppendItem(GroundAttackTime, "GroundAttackTime");
                    }
                    if (printMask?.PerchAttackChance ?? true)
                    {
                        sb.AppendItem(PerchAttackChance, "PerchAttackChance");
                    }
                    if (printMask?.PerchAttackTime ?? true)
                    {
                        sb.AppendItem(PerchAttackTime, "PerchAttackTime");
                    }
                    if (printMask?.FlyingAttackChance ?? true)
                    {
                        sb.AppendItem(FlyingAttackChance, "FlyingAttackChance");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.CSMEDataTypeState ?? true)
                    {
                        sb.AppendItem(CSMEDataTypeState, "CSMEDataTypeState");
                    }
                    if (printMask?.CSLRDataTypeState ?? true)
                    {
                        sb.AppendItem(CSLRDataTypeState, "CSLRDataTypeState");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? OffensiveMult;
            public Exception? DefensiveMult;
            public Exception? GroupOffensiveMult;
            public Exception? EquipmentScoreMultMelee;
            public Exception? EquipmentScoreMultMagic;
            public Exception? EquipmentScoreMultRanged;
            public Exception? EquipmentScoreMultShout;
            public Exception? EquipmentScoreMultUnarmed;
            public Exception? EquipmentScoreMultStaff;
            public Exception? AvoidThreatChance;
            public Exception? DodgeThreadChance;
            public Exception? EvadeThreatChance;
            public Exception? CSMD;
            public Exception? MeleeAttackStaggeredMult;
            public Exception? MeleePowerAttackStaggeredMult;
            public Exception? MeleePowerAttackBlockingMult;
            public Exception? MeleeBashMult;
            public Exception? MeleeBashRecoilMult;
            public Exception? MeleeBashAttackMult;
            public Exception? MeleeBashPowerAttackMult;
            public Exception? MeleeSpecialAttackMult;
            public Exception? MeleeBlockWhenStaggeredMult;
            public Exception? MeleeAttackWhenStaggeredMult;
            public Exception? RangedAccuracyMult;
            public Exception? CloseRangeDuelingCircleMult;
            public Exception? CloseRangeDuelingFallbackMult;
            public Exception? CloseRangeFlankDistance;
            public Exception? CloseRangeFlankingStalkTime;
            public Exception? CloseRangeChargeDistance;
            public Exception? CloseRangeChargingThrowProbability;
            public Exception? CloseRangeChargingSprintFastProbability;
            public Exception? CloseRangeChargingSideswipeProbability;
            public Exception? CloseRangeChargingDisengageProbability;
            public Exception? CloseRangeChargingThrowMaxTargets;
            public Exception? CloseRangeFlankingVariance;
            public Exception? LongRangeStrafeMult;
            public Exception? LongRangeAdjustRangeMult;
            public Exception? LongRangeCrouchMult;
            public Exception? LongRangeWaitMult;
            public Exception? LongRangeRangeMult;
            public Exception? CoverSearchDistanceMult;
            public Exception? HoverChance;
            public Exception? DiveBombChance;
            public Exception? GroundAttackChance;
            public Exception? HoverTime;
            public Exception? GroundAttackTime;
            public Exception? PerchAttackChance;
            public Exception? PerchAttackTime;
            public Exception? FlyingAttackChance;
            public Exception? Flags;
            public Exception? CSMEDataTypeState;
            public Exception? CSLRDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyle_FieldIndex.OffensiveMult:
                        return OffensiveMult;
                    case CombatStyle_FieldIndex.DefensiveMult:
                        return DefensiveMult;
                    case CombatStyle_FieldIndex.GroupOffensiveMult:
                        return GroupOffensiveMult;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMelee:
                        return EquipmentScoreMultMelee;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMagic:
                        return EquipmentScoreMultMagic;
                    case CombatStyle_FieldIndex.EquipmentScoreMultRanged:
                        return EquipmentScoreMultRanged;
                    case CombatStyle_FieldIndex.EquipmentScoreMultShout:
                        return EquipmentScoreMultShout;
                    case CombatStyle_FieldIndex.EquipmentScoreMultUnarmed:
                        return EquipmentScoreMultUnarmed;
                    case CombatStyle_FieldIndex.EquipmentScoreMultStaff:
                        return EquipmentScoreMultStaff;
                    case CombatStyle_FieldIndex.AvoidThreatChance:
                        return AvoidThreatChance;
                    case CombatStyle_FieldIndex.DodgeThreadChance:
                        return DodgeThreadChance;
                    case CombatStyle_FieldIndex.EvadeThreatChance:
                        return EvadeThreatChance;
                    case CombatStyle_FieldIndex.CSMD:
                        return CSMD;
                    case CombatStyle_FieldIndex.MeleeAttackStaggeredMult:
                        return MeleeAttackStaggeredMult;
                    case CombatStyle_FieldIndex.MeleePowerAttackStaggeredMult:
                        return MeleePowerAttackStaggeredMult;
                    case CombatStyle_FieldIndex.MeleePowerAttackBlockingMult:
                        return MeleePowerAttackBlockingMult;
                    case CombatStyle_FieldIndex.MeleeBashMult:
                        return MeleeBashMult;
                    case CombatStyle_FieldIndex.MeleeBashRecoilMult:
                        return MeleeBashRecoilMult;
                    case CombatStyle_FieldIndex.MeleeBashAttackMult:
                        return MeleeBashAttackMult;
                    case CombatStyle_FieldIndex.MeleeBashPowerAttackMult:
                        return MeleeBashPowerAttackMult;
                    case CombatStyle_FieldIndex.MeleeSpecialAttackMult:
                        return MeleeSpecialAttackMult;
                    case CombatStyle_FieldIndex.MeleeBlockWhenStaggeredMult:
                        return MeleeBlockWhenStaggeredMult;
                    case CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult:
                        return MeleeAttackWhenStaggeredMult;
                    case CombatStyle_FieldIndex.RangedAccuracyMult:
                        return RangedAccuracyMult;
                    case CombatStyle_FieldIndex.CloseRangeDuelingCircleMult:
                        return CloseRangeDuelingCircleMult;
                    case CombatStyle_FieldIndex.CloseRangeDuelingFallbackMult:
                        return CloseRangeDuelingFallbackMult;
                    case CombatStyle_FieldIndex.CloseRangeFlankDistance:
                        return CloseRangeFlankDistance;
                    case CombatStyle_FieldIndex.CloseRangeFlankingStalkTime:
                        return CloseRangeFlankingStalkTime;
                    case CombatStyle_FieldIndex.CloseRangeChargeDistance:
                        return CloseRangeChargeDistance;
                    case CombatStyle_FieldIndex.CloseRangeChargingThrowProbability:
                        return CloseRangeChargingThrowProbability;
                    case CombatStyle_FieldIndex.CloseRangeChargingSprintFastProbability:
                        return CloseRangeChargingSprintFastProbability;
                    case CombatStyle_FieldIndex.CloseRangeChargingSideswipeProbability:
                        return CloseRangeChargingSideswipeProbability;
                    case CombatStyle_FieldIndex.CloseRangeChargingDisengageProbability:
                        return CloseRangeChargingDisengageProbability;
                    case CombatStyle_FieldIndex.CloseRangeChargingThrowMaxTargets:
                        return CloseRangeChargingThrowMaxTargets;
                    case CombatStyle_FieldIndex.CloseRangeFlankingVariance:
                        return CloseRangeFlankingVariance;
                    case CombatStyle_FieldIndex.LongRangeStrafeMult:
                        return LongRangeStrafeMult;
                    case CombatStyle_FieldIndex.LongRangeAdjustRangeMult:
                        return LongRangeAdjustRangeMult;
                    case CombatStyle_FieldIndex.LongRangeCrouchMult:
                        return LongRangeCrouchMult;
                    case CombatStyle_FieldIndex.LongRangeWaitMult:
                        return LongRangeWaitMult;
                    case CombatStyle_FieldIndex.LongRangeRangeMult:
                        return LongRangeRangeMult;
                    case CombatStyle_FieldIndex.CoverSearchDistanceMult:
                        return CoverSearchDistanceMult;
                    case CombatStyle_FieldIndex.HoverChance:
                        return HoverChance;
                    case CombatStyle_FieldIndex.DiveBombChance:
                        return DiveBombChance;
                    case CombatStyle_FieldIndex.GroundAttackChance:
                        return GroundAttackChance;
                    case CombatStyle_FieldIndex.HoverTime:
                        return HoverTime;
                    case CombatStyle_FieldIndex.GroundAttackTime:
                        return GroundAttackTime;
                    case CombatStyle_FieldIndex.PerchAttackChance:
                        return PerchAttackChance;
                    case CombatStyle_FieldIndex.PerchAttackTime:
                        return PerchAttackTime;
                    case CombatStyle_FieldIndex.FlyingAttackChance:
                        return FlyingAttackChance;
                    case CombatStyle_FieldIndex.Flags:
                        return Flags;
                    case CombatStyle_FieldIndex.CSMEDataTypeState:
                        return CSMEDataTypeState;
                    case CombatStyle_FieldIndex.CSLRDataTypeState:
                        return CSLRDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyle_FieldIndex.OffensiveMult:
                        this.OffensiveMult = ex;
                        break;
                    case CombatStyle_FieldIndex.DefensiveMult:
                        this.DefensiveMult = ex;
                        break;
                    case CombatStyle_FieldIndex.GroupOffensiveMult:
                        this.GroupOffensiveMult = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMelee:
                        this.EquipmentScoreMultMelee = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMagic:
                        this.EquipmentScoreMultMagic = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultRanged:
                        this.EquipmentScoreMultRanged = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultShout:
                        this.EquipmentScoreMultShout = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultUnarmed:
                        this.EquipmentScoreMultUnarmed = ex;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultStaff:
                        this.EquipmentScoreMultStaff = ex;
                        break;
                    case CombatStyle_FieldIndex.AvoidThreatChance:
                        this.AvoidThreatChance = ex;
                        break;
                    case CombatStyle_FieldIndex.DodgeThreadChance:
                        this.DodgeThreadChance = ex;
                        break;
                    case CombatStyle_FieldIndex.EvadeThreatChance:
                        this.EvadeThreatChance = ex;
                        break;
                    case CombatStyle_FieldIndex.CSMD:
                        this.CSMD = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeAttackStaggeredMult:
                        this.MeleeAttackStaggeredMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleePowerAttackStaggeredMult:
                        this.MeleePowerAttackStaggeredMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleePowerAttackBlockingMult:
                        this.MeleePowerAttackBlockingMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashMult:
                        this.MeleeBashMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashRecoilMult:
                        this.MeleeBashRecoilMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashAttackMult:
                        this.MeleeBashAttackMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashPowerAttackMult:
                        this.MeleeBashPowerAttackMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeSpecialAttackMult:
                        this.MeleeSpecialAttackMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeBlockWhenStaggeredMult:
                        this.MeleeBlockWhenStaggeredMult = ex;
                        break;
                    case CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult:
                        this.MeleeAttackWhenStaggeredMult = ex;
                        break;
                    case CombatStyle_FieldIndex.RangedAccuracyMult:
                        this.RangedAccuracyMult = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeDuelingCircleMult:
                        this.CloseRangeDuelingCircleMult = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeDuelingFallbackMult:
                        this.CloseRangeDuelingFallbackMult = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeFlankDistance:
                        this.CloseRangeFlankDistance = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeFlankingStalkTime:
                        this.CloseRangeFlankingStalkTime = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargeDistance:
                        this.CloseRangeChargeDistance = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingThrowProbability:
                        this.CloseRangeChargingThrowProbability = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingSprintFastProbability:
                        this.CloseRangeChargingSprintFastProbability = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingSideswipeProbability:
                        this.CloseRangeChargingSideswipeProbability = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingDisengageProbability:
                        this.CloseRangeChargingDisengageProbability = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingThrowMaxTargets:
                        this.CloseRangeChargingThrowMaxTargets = ex;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeFlankingVariance:
                        this.CloseRangeFlankingVariance = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeStrafeMult:
                        this.LongRangeStrafeMult = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeAdjustRangeMult:
                        this.LongRangeAdjustRangeMult = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeCrouchMult:
                        this.LongRangeCrouchMult = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeWaitMult:
                        this.LongRangeWaitMult = ex;
                        break;
                    case CombatStyle_FieldIndex.LongRangeRangeMult:
                        this.LongRangeRangeMult = ex;
                        break;
                    case CombatStyle_FieldIndex.CoverSearchDistanceMult:
                        this.CoverSearchDistanceMult = ex;
                        break;
                    case CombatStyle_FieldIndex.HoverChance:
                        this.HoverChance = ex;
                        break;
                    case CombatStyle_FieldIndex.DiveBombChance:
                        this.DiveBombChance = ex;
                        break;
                    case CombatStyle_FieldIndex.GroundAttackChance:
                        this.GroundAttackChance = ex;
                        break;
                    case CombatStyle_FieldIndex.HoverTime:
                        this.HoverTime = ex;
                        break;
                    case CombatStyle_FieldIndex.GroundAttackTime:
                        this.GroundAttackTime = ex;
                        break;
                    case CombatStyle_FieldIndex.PerchAttackChance:
                        this.PerchAttackChance = ex;
                        break;
                    case CombatStyle_FieldIndex.PerchAttackTime:
                        this.PerchAttackTime = ex;
                        break;
                    case CombatStyle_FieldIndex.FlyingAttackChance:
                        this.FlyingAttackChance = ex;
                        break;
                    case CombatStyle_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case CombatStyle_FieldIndex.CSMEDataTypeState:
                        this.CSMEDataTypeState = ex;
                        break;
                    case CombatStyle_FieldIndex.CSLRDataTypeState:
                        this.CSLRDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                CombatStyle_FieldIndex enu = (CombatStyle_FieldIndex)index;
                switch (enu)
                {
                    case CombatStyle_FieldIndex.OffensiveMult:
                        this.OffensiveMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.DefensiveMult:
                        this.DefensiveMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.GroupOffensiveMult:
                        this.GroupOffensiveMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMelee:
                        this.EquipmentScoreMultMelee = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultMagic:
                        this.EquipmentScoreMultMagic = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultRanged:
                        this.EquipmentScoreMultRanged = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultShout:
                        this.EquipmentScoreMultShout = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultUnarmed:
                        this.EquipmentScoreMultUnarmed = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EquipmentScoreMultStaff:
                        this.EquipmentScoreMultStaff = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.AvoidThreatChance:
                        this.AvoidThreatChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.DodgeThreadChance:
                        this.DodgeThreadChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.EvadeThreatChance:
                        this.EvadeThreatChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CSMD:
                        this.CSMD = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeAttackStaggeredMult:
                        this.MeleeAttackStaggeredMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleePowerAttackStaggeredMult:
                        this.MeleePowerAttackStaggeredMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleePowerAttackBlockingMult:
                        this.MeleePowerAttackBlockingMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashMult:
                        this.MeleeBashMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashRecoilMult:
                        this.MeleeBashRecoilMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashAttackMult:
                        this.MeleeBashAttackMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeBashPowerAttackMult:
                        this.MeleeBashPowerAttackMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeSpecialAttackMult:
                        this.MeleeSpecialAttackMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeBlockWhenStaggeredMult:
                        this.MeleeBlockWhenStaggeredMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult:
                        this.MeleeAttackWhenStaggeredMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.RangedAccuracyMult:
                        this.RangedAccuracyMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeDuelingCircleMult:
                        this.CloseRangeDuelingCircleMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeDuelingFallbackMult:
                        this.CloseRangeDuelingFallbackMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeFlankDistance:
                        this.CloseRangeFlankDistance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeFlankingStalkTime:
                        this.CloseRangeFlankingStalkTime = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargeDistance:
                        this.CloseRangeChargeDistance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingThrowProbability:
                        this.CloseRangeChargingThrowProbability = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingSprintFastProbability:
                        this.CloseRangeChargingSprintFastProbability = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingSideswipeProbability:
                        this.CloseRangeChargingSideswipeProbability = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingDisengageProbability:
                        this.CloseRangeChargingDisengageProbability = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeChargingThrowMaxTargets:
                        this.CloseRangeChargingThrowMaxTargets = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CloseRangeFlankingVariance:
                        this.CloseRangeFlankingVariance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeStrafeMult:
                        this.LongRangeStrafeMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeAdjustRangeMult:
                        this.LongRangeAdjustRangeMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeCrouchMult:
                        this.LongRangeCrouchMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeWaitMult:
                        this.LongRangeWaitMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.LongRangeRangeMult:
                        this.LongRangeRangeMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CoverSearchDistanceMult:
                        this.CoverSearchDistanceMult = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.HoverChance:
                        this.HoverChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.DiveBombChance:
                        this.DiveBombChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.GroundAttackChance:
                        this.GroundAttackChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.HoverTime:
                        this.HoverTime = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.GroundAttackTime:
                        this.GroundAttackTime = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.PerchAttackChance:
                        this.PerchAttackChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.PerchAttackTime:
                        this.PerchAttackTime = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.FlyingAttackChance:
                        this.FlyingAttackChance = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CSMEDataTypeState:
                        this.CSMEDataTypeState = (Exception?)obj;
                        break;
                    case CombatStyle_FieldIndex.CSLRDataTypeState:
                        this.CSLRDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (OffensiveMult != null) return true;
                if (DefensiveMult != null) return true;
                if (GroupOffensiveMult != null) return true;
                if (EquipmentScoreMultMelee != null) return true;
                if (EquipmentScoreMultMagic != null) return true;
                if (EquipmentScoreMultRanged != null) return true;
                if (EquipmentScoreMultShout != null) return true;
                if (EquipmentScoreMultUnarmed != null) return true;
                if (EquipmentScoreMultStaff != null) return true;
                if (AvoidThreatChance != null) return true;
                if (DodgeThreadChance != null) return true;
                if (EvadeThreatChance != null) return true;
                if (CSMD != null) return true;
                if (MeleeAttackStaggeredMult != null) return true;
                if (MeleePowerAttackStaggeredMult != null) return true;
                if (MeleePowerAttackBlockingMult != null) return true;
                if (MeleeBashMult != null) return true;
                if (MeleeBashRecoilMult != null) return true;
                if (MeleeBashAttackMult != null) return true;
                if (MeleeBashPowerAttackMult != null) return true;
                if (MeleeSpecialAttackMult != null) return true;
                if (MeleeBlockWhenStaggeredMult != null) return true;
                if (MeleeAttackWhenStaggeredMult != null) return true;
                if (RangedAccuracyMult != null) return true;
                if (CloseRangeDuelingCircleMult != null) return true;
                if (CloseRangeDuelingFallbackMult != null) return true;
                if (CloseRangeFlankDistance != null) return true;
                if (CloseRangeFlankingStalkTime != null) return true;
                if (CloseRangeChargeDistance != null) return true;
                if (CloseRangeChargingThrowProbability != null) return true;
                if (CloseRangeChargingSprintFastProbability != null) return true;
                if (CloseRangeChargingSideswipeProbability != null) return true;
                if (CloseRangeChargingDisengageProbability != null) return true;
                if (CloseRangeChargingThrowMaxTargets != null) return true;
                if (CloseRangeFlankingVariance != null) return true;
                if (LongRangeStrafeMult != null) return true;
                if (LongRangeAdjustRangeMult != null) return true;
                if (LongRangeCrouchMult != null) return true;
                if (LongRangeWaitMult != null) return true;
                if (LongRangeRangeMult != null) return true;
                if (CoverSearchDistanceMult != null) return true;
                if (HoverChance != null) return true;
                if (DiveBombChance != null) return true;
                if (GroundAttackChance != null) return true;
                if (HoverTime != null) return true;
                if (GroundAttackTime != null) return true;
                if (PerchAttackChance != null) return true;
                if (PerchAttackTime != null) return true;
                if (FlyingAttackChance != null) return true;
                if (Flags != null) return true;
                if (CSMEDataTypeState != null) return true;
                if (CSLRDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(OffensiveMult, "OffensiveMult");
                }
                {
                    sb.AppendItem(DefensiveMult, "DefensiveMult");
                }
                {
                    sb.AppendItem(GroupOffensiveMult, "GroupOffensiveMult");
                }
                {
                    sb.AppendItem(EquipmentScoreMultMelee, "EquipmentScoreMultMelee");
                }
                {
                    sb.AppendItem(EquipmentScoreMultMagic, "EquipmentScoreMultMagic");
                }
                {
                    sb.AppendItem(EquipmentScoreMultRanged, "EquipmentScoreMultRanged");
                }
                {
                    sb.AppendItem(EquipmentScoreMultShout, "EquipmentScoreMultShout");
                }
                {
                    sb.AppendItem(EquipmentScoreMultUnarmed, "EquipmentScoreMultUnarmed");
                }
                {
                    sb.AppendItem(EquipmentScoreMultStaff, "EquipmentScoreMultStaff");
                }
                {
                    sb.AppendItem(AvoidThreatChance, "AvoidThreatChance");
                }
                {
                    sb.AppendItem(DodgeThreadChance, "DodgeThreadChance");
                }
                {
                    sb.AppendItem(EvadeThreatChance, "EvadeThreatChance");
                }
                {
                    sb.AppendItem(CSMD, "CSMD");
                }
                {
                    sb.AppendItem(MeleeAttackStaggeredMult, "MeleeAttackStaggeredMult");
                }
                {
                    sb.AppendItem(MeleePowerAttackStaggeredMult, "MeleePowerAttackStaggeredMult");
                }
                {
                    sb.AppendItem(MeleePowerAttackBlockingMult, "MeleePowerAttackBlockingMult");
                }
                {
                    sb.AppendItem(MeleeBashMult, "MeleeBashMult");
                }
                {
                    sb.AppendItem(MeleeBashRecoilMult, "MeleeBashRecoilMult");
                }
                {
                    sb.AppendItem(MeleeBashAttackMult, "MeleeBashAttackMult");
                }
                {
                    sb.AppendItem(MeleeBashPowerAttackMult, "MeleeBashPowerAttackMult");
                }
                {
                    sb.AppendItem(MeleeSpecialAttackMult, "MeleeSpecialAttackMult");
                }
                {
                    sb.AppendItem(MeleeBlockWhenStaggeredMult, "MeleeBlockWhenStaggeredMult");
                }
                {
                    sb.AppendItem(MeleeAttackWhenStaggeredMult, "MeleeAttackWhenStaggeredMult");
                }
                {
                    sb.AppendItem(RangedAccuracyMult, "RangedAccuracyMult");
                }
                {
                    sb.AppendItem(CloseRangeDuelingCircleMult, "CloseRangeDuelingCircleMult");
                }
                {
                    sb.AppendItem(CloseRangeDuelingFallbackMult, "CloseRangeDuelingFallbackMult");
                }
                {
                    sb.AppendItem(CloseRangeFlankDistance, "CloseRangeFlankDistance");
                }
                {
                    sb.AppendItem(CloseRangeFlankingStalkTime, "CloseRangeFlankingStalkTime");
                }
                {
                    sb.AppendItem(CloseRangeChargeDistance, "CloseRangeChargeDistance");
                }
                {
                    sb.AppendItem(CloseRangeChargingThrowProbability, "CloseRangeChargingThrowProbability");
                }
                {
                    sb.AppendItem(CloseRangeChargingSprintFastProbability, "CloseRangeChargingSprintFastProbability");
                }
                {
                    sb.AppendItem(CloseRangeChargingSideswipeProbability, "CloseRangeChargingSideswipeProbability");
                }
                {
                    sb.AppendItem(CloseRangeChargingDisengageProbability, "CloseRangeChargingDisengageProbability");
                }
                {
                    sb.AppendItem(CloseRangeChargingThrowMaxTargets, "CloseRangeChargingThrowMaxTargets");
                }
                {
                    sb.AppendItem(CloseRangeFlankingVariance, "CloseRangeFlankingVariance");
                }
                {
                    sb.AppendItem(LongRangeStrafeMult, "LongRangeStrafeMult");
                }
                {
                    sb.AppendItem(LongRangeAdjustRangeMult, "LongRangeAdjustRangeMult");
                }
                {
                    sb.AppendItem(LongRangeCrouchMult, "LongRangeCrouchMult");
                }
                {
                    sb.AppendItem(LongRangeWaitMult, "LongRangeWaitMult");
                }
                {
                    sb.AppendItem(LongRangeRangeMult, "LongRangeRangeMult");
                }
                {
                    sb.AppendItem(CoverSearchDistanceMult, "CoverSearchDistanceMult");
                }
                {
                    sb.AppendItem(HoverChance, "HoverChance");
                }
                {
                    sb.AppendItem(DiveBombChance, "DiveBombChance");
                }
                {
                    sb.AppendItem(GroundAttackChance, "GroundAttackChance");
                }
                {
                    sb.AppendItem(HoverTime, "HoverTime");
                }
                {
                    sb.AppendItem(GroundAttackTime, "GroundAttackTime");
                }
                {
                    sb.AppendItem(PerchAttackChance, "PerchAttackChance");
                }
                {
                    sb.AppendItem(PerchAttackTime, "PerchAttackTime");
                }
                {
                    sb.AppendItem(FlyingAttackChance, "FlyingAttackChance");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(CSMEDataTypeState, "CSMEDataTypeState");
                }
                {
                    sb.AppendItem(CSLRDataTypeState, "CSLRDataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.OffensiveMult = this.OffensiveMult.Combine(rhs.OffensiveMult);
                ret.DefensiveMult = this.DefensiveMult.Combine(rhs.DefensiveMult);
                ret.GroupOffensiveMult = this.GroupOffensiveMult.Combine(rhs.GroupOffensiveMult);
                ret.EquipmentScoreMultMelee = this.EquipmentScoreMultMelee.Combine(rhs.EquipmentScoreMultMelee);
                ret.EquipmentScoreMultMagic = this.EquipmentScoreMultMagic.Combine(rhs.EquipmentScoreMultMagic);
                ret.EquipmentScoreMultRanged = this.EquipmentScoreMultRanged.Combine(rhs.EquipmentScoreMultRanged);
                ret.EquipmentScoreMultShout = this.EquipmentScoreMultShout.Combine(rhs.EquipmentScoreMultShout);
                ret.EquipmentScoreMultUnarmed = this.EquipmentScoreMultUnarmed.Combine(rhs.EquipmentScoreMultUnarmed);
                ret.EquipmentScoreMultStaff = this.EquipmentScoreMultStaff.Combine(rhs.EquipmentScoreMultStaff);
                ret.AvoidThreatChance = this.AvoidThreatChance.Combine(rhs.AvoidThreatChance);
                ret.DodgeThreadChance = this.DodgeThreadChance.Combine(rhs.DodgeThreadChance);
                ret.EvadeThreatChance = this.EvadeThreatChance.Combine(rhs.EvadeThreatChance);
                ret.CSMD = this.CSMD.Combine(rhs.CSMD);
                ret.MeleeAttackStaggeredMult = this.MeleeAttackStaggeredMult.Combine(rhs.MeleeAttackStaggeredMult);
                ret.MeleePowerAttackStaggeredMult = this.MeleePowerAttackStaggeredMult.Combine(rhs.MeleePowerAttackStaggeredMult);
                ret.MeleePowerAttackBlockingMult = this.MeleePowerAttackBlockingMult.Combine(rhs.MeleePowerAttackBlockingMult);
                ret.MeleeBashMult = this.MeleeBashMult.Combine(rhs.MeleeBashMult);
                ret.MeleeBashRecoilMult = this.MeleeBashRecoilMult.Combine(rhs.MeleeBashRecoilMult);
                ret.MeleeBashAttackMult = this.MeleeBashAttackMult.Combine(rhs.MeleeBashAttackMult);
                ret.MeleeBashPowerAttackMult = this.MeleeBashPowerAttackMult.Combine(rhs.MeleeBashPowerAttackMult);
                ret.MeleeSpecialAttackMult = this.MeleeSpecialAttackMult.Combine(rhs.MeleeSpecialAttackMult);
                ret.MeleeBlockWhenStaggeredMult = this.MeleeBlockWhenStaggeredMult.Combine(rhs.MeleeBlockWhenStaggeredMult);
                ret.MeleeAttackWhenStaggeredMult = this.MeleeAttackWhenStaggeredMult.Combine(rhs.MeleeAttackWhenStaggeredMult);
                ret.RangedAccuracyMult = this.RangedAccuracyMult.Combine(rhs.RangedAccuracyMult);
                ret.CloseRangeDuelingCircleMult = this.CloseRangeDuelingCircleMult.Combine(rhs.CloseRangeDuelingCircleMult);
                ret.CloseRangeDuelingFallbackMult = this.CloseRangeDuelingFallbackMult.Combine(rhs.CloseRangeDuelingFallbackMult);
                ret.CloseRangeFlankDistance = this.CloseRangeFlankDistance.Combine(rhs.CloseRangeFlankDistance);
                ret.CloseRangeFlankingStalkTime = this.CloseRangeFlankingStalkTime.Combine(rhs.CloseRangeFlankingStalkTime);
                ret.CloseRangeChargeDistance = this.CloseRangeChargeDistance.Combine(rhs.CloseRangeChargeDistance);
                ret.CloseRangeChargingThrowProbability = this.CloseRangeChargingThrowProbability.Combine(rhs.CloseRangeChargingThrowProbability);
                ret.CloseRangeChargingSprintFastProbability = this.CloseRangeChargingSprintFastProbability.Combine(rhs.CloseRangeChargingSprintFastProbability);
                ret.CloseRangeChargingSideswipeProbability = this.CloseRangeChargingSideswipeProbability.Combine(rhs.CloseRangeChargingSideswipeProbability);
                ret.CloseRangeChargingDisengageProbability = this.CloseRangeChargingDisengageProbability.Combine(rhs.CloseRangeChargingDisengageProbability);
                ret.CloseRangeChargingThrowMaxTargets = this.CloseRangeChargingThrowMaxTargets.Combine(rhs.CloseRangeChargingThrowMaxTargets);
                ret.CloseRangeFlankingVariance = this.CloseRangeFlankingVariance.Combine(rhs.CloseRangeFlankingVariance);
                ret.LongRangeStrafeMult = this.LongRangeStrafeMult.Combine(rhs.LongRangeStrafeMult);
                ret.LongRangeAdjustRangeMult = this.LongRangeAdjustRangeMult.Combine(rhs.LongRangeAdjustRangeMult);
                ret.LongRangeCrouchMult = this.LongRangeCrouchMult.Combine(rhs.LongRangeCrouchMult);
                ret.LongRangeWaitMult = this.LongRangeWaitMult.Combine(rhs.LongRangeWaitMult);
                ret.LongRangeRangeMult = this.LongRangeRangeMult.Combine(rhs.LongRangeRangeMult);
                ret.CoverSearchDistanceMult = this.CoverSearchDistanceMult.Combine(rhs.CoverSearchDistanceMult);
                ret.HoverChance = this.HoverChance.Combine(rhs.HoverChance);
                ret.DiveBombChance = this.DiveBombChance.Combine(rhs.DiveBombChance);
                ret.GroundAttackChance = this.GroundAttackChance.Combine(rhs.GroundAttackChance);
                ret.HoverTime = this.HoverTime.Combine(rhs.HoverTime);
                ret.GroundAttackTime = this.GroundAttackTime.Combine(rhs.GroundAttackTime);
                ret.PerchAttackChance = this.PerchAttackChance.Combine(rhs.PerchAttackChance);
                ret.PerchAttackTime = this.PerchAttackTime.Combine(rhs.PerchAttackTime);
                ret.FlyingAttackChance = this.FlyingAttackChance.Combine(rhs.FlyingAttackChance);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.CSMEDataTypeState = this.CSMEDataTypeState.Combine(rhs.CSMEDataTypeState);
                ret.CSLRDataTypeState = this.CSLRDataTypeState.Combine(rhs.CSLRDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool OffensiveMult;
            public bool DefensiveMult;
            public bool GroupOffensiveMult;
            public bool EquipmentScoreMultMelee;
            public bool EquipmentScoreMultMagic;
            public bool EquipmentScoreMultRanged;
            public bool EquipmentScoreMultShout;
            public bool EquipmentScoreMultUnarmed;
            public bool EquipmentScoreMultStaff;
            public bool AvoidThreatChance;
            public bool DodgeThreadChance;
            public bool EvadeThreatChance;
            public bool CSMD;
            public bool MeleeAttackStaggeredMult;
            public bool MeleePowerAttackStaggeredMult;
            public bool MeleePowerAttackBlockingMult;
            public bool MeleeBashMult;
            public bool MeleeBashRecoilMult;
            public bool MeleeBashAttackMult;
            public bool MeleeBashPowerAttackMult;
            public bool MeleeSpecialAttackMult;
            public bool MeleeBlockWhenStaggeredMult;
            public bool MeleeAttackWhenStaggeredMult;
            public bool RangedAccuracyMult;
            public bool CloseRangeDuelingCircleMult;
            public bool CloseRangeDuelingFallbackMult;
            public bool CloseRangeFlankDistance;
            public bool CloseRangeFlankingStalkTime;
            public bool CloseRangeChargeDistance;
            public bool CloseRangeChargingThrowProbability;
            public bool CloseRangeChargingSprintFastProbability;
            public bool CloseRangeChargingSideswipeProbability;
            public bool CloseRangeChargingDisengageProbability;
            public bool CloseRangeChargingThrowMaxTargets;
            public bool CloseRangeFlankingVariance;
            public bool LongRangeStrafeMult;
            public bool LongRangeAdjustRangeMult;
            public bool LongRangeCrouchMult;
            public bool LongRangeWaitMult;
            public bool LongRangeRangeMult;
            public bool CoverSearchDistanceMult;
            public bool HoverChance;
            public bool DiveBombChance;
            public bool GroundAttackChance;
            public bool HoverTime;
            public bool GroundAttackTime;
            public bool PerchAttackChance;
            public bool PerchAttackTime;
            public bool FlyingAttackChance;
            public bool Flags;
            public bool CSMEDataTypeState;
            public bool CSLRDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.OffensiveMult = defaultOn;
                this.DefensiveMult = defaultOn;
                this.GroupOffensiveMult = defaultOn;
                this.EquipmentScoreMultMelee = defaultOn;
                this.EquipmentScoreMultMagic = defaultOn;
                this.EquipmentScoreMultRanged = defaultOn;
                this.EquipmentScoreMultShout = defaultOn;
                this.EquipmentScoreMultUnarmed = defaultOn;
                this.EquipmentScoreMultStaff = defaultOn;
                this.AvoidThreatChance = defaultOn;
                this.DodgeThreadChance = defaultOn;
                this.EvadeThreatChance = defaultOn;
                this.CSMD = defaultOn;
                this.MeleeAttackStaggeredMult = defaultOn;
                this.MeleePowerAttackStaggeredMult = defaultOn;
                this.MeleePowerAttackBlockingMult = defaultOn;
                this.MeleeBashMult = defaultOn;
                this.MeleeBashRecoilMult = defaultOn;
                this.MeleeBashAttackMult = defaultOn;
                this.MeleeBashPowerAttackMult = defaultOn;
                this.MeleeSpecialAttackMult = defaultOn;
                this.MeleeBlockWhenStaggeredMult = defaultOn;
                this.MeleeAttackWhenStaggeredMult = defaultOn;
                this.RangedAccuracyMult = defaultOn;
                this.CloseRangeDuelingCircleMult = defaultOn;
                this.CloseRangeDuelingFallbackMult = defaultOn;
                this.CloseRangeFlankDistance = defaultOn;
                this.CloseRangeFlankingStalkTime = defaultOn;
                this.CloseRangeChargeDistance = defaultOn;
                this.CloseRangeChargingThrowProbability = defaultOn;
                this.CloseRangeChargingSprintFastProbability = defaultOn;
                this.CloseRangeChargingSideswipeProbability = defaultOn;
                this.CloseRangeChargingDisengageProbability = defaultOn;
                this.CloseRangeChargingThrowMaxTargets = defaultOn;
                this.CloseRangeFlankingVariance = defaultOn;
                this.LongRangeStrafeMult = defaultOn;
                this.LongRangeAdjustRangeMult = defaultOn;
                this.LongRangeCrouchMult = defaultOn;
                this.LongRangeWaitMult = defaultOn;
                this.LongRangeRangeMult = defaultOn;
                this.CoverSearchDistanceMult = defaultOn;
                this.HoverChance = defaultOn;
                this.DiveBombChance = defaultOn;
                this.GroundAttackChance = defaultOn;
                this.HoverTime = defaultOn;
                this.GroundAttackTime = defaultOn;
                this.PerchAttackChance = defaultOn;
                this.PerchAttackTime = defaultOn;
                this.FlyingAttackChance = defaultOn;
                this.Flags = defaultOn;
                this.CSMEDataTypeState = defaultOn;
                this.CSLRDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((OffensiveMult, null));
                ret.Add((DefensiveMult, null));
                ret.Add((GroupOffensiveMult, null));
                ret.Add((EquipmentScoreMultMelee, null));
                ret.Add((EquipmentScoreMultMagic, null));
                ret.Add((EquipmentScoreMultRanged, null));
                ret.Add((EquipmentScoreMultShout, null));
                ret.Add((EquipmentScoreMultUnarmed, null));
                ret.Add((EquipmentScoreMultStaff, null));
                ret.Add((AvoidThreatChance, null));
                ret.Add((DodgeThreadChance, null));
                ret.Add((EvadeThreatChance, null));
                ret.Add((CSMD, null));
                ret.Add((MeleeAttackStaggeredMult, null));
                ret.Add((MeleePowerAttackStaggeredMult, null));
                ret.Add((MeleePowerAttackBlockingMult, null));
                ret.Add((MeleeBashMult, null));
                ret.Add((MeleeBashRecoilMult, null));
                ret.Add((MeleeBashAttackMult, null));
                ret.Add((MeleeBashPowerAttackMult, null));
                ret.Add((MeleeSpecialAttackMult, null));
                ret.Add((MeleeBlockWhenStaggeredMult, null));
                ret.Add((MeleeAttackWhenStaggeredMult, null));
                ret.Add((RangedAccuracyMult, null));
                ret.Add((CloseRangeDuelingCircleMult, null));
                ret.Add((CloseRangeDuelingFallbackMult, null));
                ret.Add((CloseRangeFlankDistance, null));
                ret.Add((CloseRangeFlankingStalkTime, null));
                ret.Add((CloseRangeChargeDistance, null));
                ret.Add((CloseRangeChargingThrowProbability, null));
                ret.Add((CloseRangeChargingSprintFastProbability, null));
                ret.Add((CloseRangeChargingSideswipeProbability, null));
                ret.Add((CloseRangeChargingDisengageProbability, null));
                ret.Add((CloseRangeChargingThrowMaxTargets, null));
                ret.Add((CloseRangeFlankingVariance, null));
                ret.Add((LongRangeStrafeMult, null));
                ret.Add((LongRangeAdjustRangeMult, null));
                ret.Add((LongRangeCrouchMult, null));
                ret.Add((LongRangeWaitMult, null));
                ret.Add((LongRangeRangeMult, null));
                ret.Add((CoverSearchDistanceMult, null));
                ret.Add((HoverChance, null));
                ret.Add((DiveBombChance, null));
                ret.Add((GroundAttackChance, null));
                ret.Add((HoverTime, null));
                ret.Add((GroundAttackTime, null));
                ret.Add((PerchAttackChance, null));
                ret.Add((PerchAttackTime, null));
                ret.Add((FlyingAttackChance, null));
                ret.Add((Flags, null));
                ret.Add((CSMEDataTypeState, null));
                ret.Add((CSLRDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = CombatStyle_Registration.TriggeringRecordType;
        public CombatStyle(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private CombatStyle(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal CombatStyle(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public CombatStyle(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public CombatStyle(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<CombatStyle>.ToString(this);
        }

        protected override Type LinkType => typeof(ICombatStyle);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum CSMEDataType
        {
            Break0 = 1
        }
        [Flags]
        public enum CSLRDataType
        {
            Break0 = 1,
            Break1 = 2
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ICombatStyleGetter rhs) return false;
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICombatStyleGetter? obj)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CombatStyleBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStyleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static CombatStyle CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CombatStyle();
            ((CombatStyleSetterCommon)((ICombatStyleGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CombatStyle item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new CombatStyle GetNew()
        {
            return new CombatStyle();
        }

    }
    #endregion

    #region Interface
    public partial interface ICombatStyle :
        ICombatStyleGetter,
        IFallout4MajorRecordInternal,
        ILoquiObjectSetter<ICombatStyleInternal>
    {
        new Single OffensiveMult { get; set; }
        new Single DefensiveMult { get; set; }
        new Single GroupOffensiveMult { get; set; }
        new Single EquipmentScoreMultMelee { get; set; }
        new Single EquipmentScoreMultMagic { get; set; }
        new Single EquipmentScoreMultRanged { get; set; }
        new Single EquipmentScoreMultShout { get; set; }
        new Single EquipmentScoreMultUnarmed { get; set; }
        new Single EquipmentScoreMultStaff { get; set; }
        new Single AvoidThreatChance { get; set; }
        new Single DodgeThreadChance { get; set; }
        new Single EvadeThreatChance { get; set; }
        new MemorySlice<Byte>? CSMD { get; set; }
        new Single MeleeAttackStaggeredMult { get; set; }
        new Single MeleePowerAttackStaggeredMult { get; set; }
        new Single MeleePowerAttackBlockingMult { get; set; }
        new Single MeleeBashMult { get; set; }
        new Single MeleeBashRecoilMult { get; set; }
        new Single MeleeBashAttackMult { get; set; }
        new Single MeleeBashPowerAttackMult { get; set; }
        new Single MeleeSpecialAttackMult { get; set; }
        new Single MeleeBlockWhenStaggeredMult { get; set; }
        new Single MeleeAttackWhenStaggeredMult { get; set; }
        new Single? RangedAccuracyMult { get; set; }
        new Single CloseRangeDuelingCircleMult { get; set; }
        new Single CloseRangeDuelingFallbackMult { get; set; }
        new Single CloseRangeFlankDistance { get; set; }
        new Single CloseRangeFlankingStalkTime { get; set; }
        new Single CloseRangeChargeDistance { get; set; }
        new Single CloseRangeChargingThrowProbability { get; set; }
        new Single CloseRangeChargingSprintFastProbability { get; set; }
        new Single CloseRangeChargingSideswipeProbability { get; set; }
        new Single CloseRangeChargingDisengageProbability { get; set; }
        new UInt32 CloseRangeChargingThrowMaxTargets { get; set; }
        new Single CloseRangeFlankingVariance { get; set; }
        new Single LongRangeStrafeMult { get; set; }
        new Single LongRangeAdjustRangeMult { get; set; }
        new Single LongRangeCrouchMult { get; set; }
        new Single LongRangeWaitMult { get; set; }
        new Single LongRangeRangeMult { get; set; }
        new Single? CoverSearchDistanceMult { get; set; }
        new Single HoverChance { get; set; }
        new Single DiveBombChance { get; set; }
        new Single GroundAttackChance { get; set; }
        new Single HoverTime { get; set; }
        new Single GroundAttackTime { get; set; }
        new Single PerchAttackChance { get; set; }
        new Single PerchAttackTime { get; set; }
        new Single FlyingAttackChance { get; set; }
        new CombatStyle.Flag? Flags { get; set; }
        new CombatStyle.CSMEDataType CSMEDataTypeState { get; set; }
        new CombatStyle.CSLRDataType CSLRDataTypeState { get; set; }
        #region Mutagen
        new CombatStyle.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ICombatStyleInternal :
        IFallout4MajorRecordInternal,
        ICombatStyle,
        ICombatStyleGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.CSTY)]
    public partial interface ICombatStyleGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        ILoquiObject<ICombatStyleGetter>,
        IMapsToGetter<ICombatStyleGetter>
    {
        static new ILoquiRegistration StaticRegistration => CombatStyle_Registration.Instance;
        Single OffensiveMult { get; }
        Single DefensiveMult { get; }
        Single GroupOffensiveMult { get; }
        Single EquipmentScoreMultMelee { get; }
        Single EquipmentScoreMultMagic { get; }
        Single EquipmentScoreMultRanged { get; }
        Single EquipmentScoreMultShout { get; }
        Single EquipmentScoreMultUnarmed { get; }
        Single EquipmentScoreMultStaff { get; }
        Single AvoidThreatChance { get; }
        Single DodgeThreadChance { get; }
        Single EvadeThreatChance { get; }
        ReadOnlyMemorySlice<Byte>? CSMD { get; }
        Single MeleeAttackStaggeredMult { get; }
        Single MeleePowerAttackStaggeredMult { get; }
        Single MeleePowerAttackBlockingMult { get; }
        Single MeleeBashMult { get; }
        Single MeleeBashRecoilMult { get; }
        Single MeleeBashAttackMult { get; }
        Single MeleeBashPowerAttackMult { get; }
        Single MeleeSpecialAttackMult { get; }
        Single MeleeBlockWhenStaggeredMult { get; }
        Single MeleeAttackWhenStaggeredMult { get; }
        Single? RangedAccuracyMult { get; }
        Single CloseRangeDuelingCircleMult { get; }
        Single CloseRangeDuelingFallbackMult { get; }
        Single CloseRangeFlankDistance { get; }
        Single CloseRangeFlankingStalkTime { get; }
        Single CloseRangeChargeDistance { get; }
        Single CloseRangeChargingThrowProbability { get; }
        Single CloseRangeChargingSprintFastProbability { get; }
        Single CloseRangeChargingSideswipeProbability { get; }
        Single CloseRangeChargingDisengageProbability { get; }
        UInt32 CloseRangeChargingThrowMaxTargets { get; }
        Single CloseRangeFlankingVariance { get; }
        Single LongRangeStrafeMult { get; }
        Single LongRangeAdjustRangeMult { get; }
        Single LongRangeCrouchMult { get; }
        Single LongRangeWaitMult { get; }
        Single LongRangeRangeMult { get; }
        Single? CoverSearchDistanceMult { get; }
        Single HoverChance { get; }
        Single DiveBombChance { get; }
        Single GroundAttackChance { get; }
        Single HoverTime { get; }
        Single GroundAttackTime { get; }
        Single PerchAttackChance { get; }
        Single PerchAttackTime { get; }
        Single FlyingAttackChance { get; }
        CombatStyle.Flag? Flags { get; }
        CombatStyle.CSMEDataType CSMEDataTypeState { get; }
        CombatStyle.CSLRDataType CSLRDataTypeState { get; }

        #region Mutagen
        CombatStyle.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class CombatStyleMixIn
    {
        public static void Clear(this ICombatStyleInternal item)
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CombatStyle.Mask<bool> GetEqualsMask(
            this ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICombatStyleGetter item,
            string? name = null,
            CombatStyle.Mask<bool>? printMask = null)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICombatStyleGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CombatStyle.Mask<bool>? printMask = null)
        {
            ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            CombatStyle.TranslationMask? equalsMask = null)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICombatStyleInternal lhs,
            ICombatStyleGetter rhs,
            out CombatStyle.ErrorMask errorMask,
            CombatStyle.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CombatStyle.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICombatStyleInternal lhs,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CombatStyle DeepCopy(
            this ICombatStyleGetter item,
            CombatStyle.TranslationMask? copyMask = null)
        {
            return ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CombatStyle DeepCopy(
            this ICombatStyleGetter item,
            out CombatStyle.ErrorMask errorMask,
            CombatStyle.TranslationMask? copyMask = null)
        {
            return ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CombatStyle DeepCopy(
            this ICombatStyleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static CombatStyle Duplicate(
            this ICombatStyleGetter item,
            FormKey formKey,
            CombatStyle.TranslationMask? copyMask = null)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static CombatStyle Duplicate(
            this ICombatStyleGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICombatStyleInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CombatStyleSetterCommon)((ICombatStyleGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum CombatStyle_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        OffensiveMult = 7,
        DefensiveMult = 8,
        GroupOffensiveMult = 9,
        EquipmentScoreMultMelee = 10,
        EquipmentScoreMultMagic = 11,
        EquipmentScoreMultRanged = 12,
        EquipmentScoreMultShout = 13,
        EquipmentScoreMultUnarmed = 14,
        EquipmentScoreMultStaff = 15,
        AvoidThreatChance = 16,
        DodgeThreadChance = 17,
        EvadeThreatChance = 18,
        CSMD = 19,
        MeleeAttackStaggeredMult = 20,
        MeleePowerAttackStaggeredMult = 21,
        MeleePowerAttackBlockingMult = 22,
        MeleeBashMult = 23,
        MeleeBashRecoilMult = 24,
        MeleeBashAttackMult = 25,
        MeleeBashPowerAttackMult = 26,
        MeleeSpecialAttackMult = 27,
        MeleeBlockWhenStaggeredMult = 28,
        MeleeAttackWhenStaggeredMult = 29,
        RangedAccuracyMult = 30,
        CloseRangeDuelingCircleMult = 31,
        CloseRangeDuelingFallbackMult = 32,
        CloseRangeFlankDistance = 33,
        CloseRangeFlankingStalkTime = 34,
        CloseRangeChargeDistance = 35,
        CloseRangeChargingThrowProbability = 36,
        CloseRangeChargingSprintFastProbability = 37,
        CloseRangeChargingSideswipeProbability = 38,
        CloseRangeChargingDisengageProbability = 39,
        CloseRangeChargingThrowMaxTargets = 40,
        CloseRangeFlankingVariance = 41,
        LongRangeStrafeMult = 42,
        LongRangeAdjustRangeMult = 43,
        LongRangeCrouchMult = 44,
        LongRangeWaitMult = 45,
        LongRangeRangeMult = 46,
        CoverSearchDistanceMult = 47,
        HoverChance = 48,
        DiveBombChance = 49,
        GroundAttackChance = 50,
        HoverTime = 51,
        GroundAttackTime = 52,
        PerchAttackChance = 53,
        PerchAttackTime = 54,
        FlyingAttackChance = 55,
        Flags = 56,
        CSMEDataTypeState = 57,
        CSLRDataTypeState = 58,
    }
    #endregion

    #region Registration
    internal partial class CombatStyle_Registration : ILoquiRegistration
    {
        public static readonly CombatStyle_Registration Instance = new CombatStyle_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 52;

        public const ushort FieldCount = 59;

        public static readonly Type MaskType = typeof(CombatStyle.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CombatStyle.ErrorMask);

        public static readonly Type ClassType = typeof(CombatStyle);

        public static readonly Type GetterType = typeof(ICombatStyleGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICombatStyle);

        public static readonly Type? InternalSetterType = typeof(ICombatStyleInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.CombatStyle";

        public const string Name = "CombatStyle";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CSTY;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.CSTY);
            var all = RecordCollection.Factory(
                RecordTypes.CSTY,
                RecordTypes.CSGD,
                RecordTypes.CSMD,
                RecordTypes.CSME,
                RecordTypes.CSRA,
                RecordTypes.CSCR,
                RecordTypes.CSLR,
                RecordTypes.CSCV,
                RecordTypes.CSFL,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CombatStyleBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CombatStyleSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly CombatStyleSetterCommon Instance = new CombatStyleSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICombatStyleInternal item)
        {
            ClearPartial();
            item.OffensiveMult = default(Single);
            item.DefensiveMult = default(Single);
            item.GroupOffensiveMult = default(Single);
            item.EquipmentScoreMultMelee = default(Single);
            item.EquipmentScoreMultMagic = default(Single);
            item.EquipmentScoreMultRanged = default(Single);
            item.EquipmentScoreMultShout = default(Single);
            item.EquipmentScoreMultUnarmed = default(Single);
            item.EquipmentScoreMultStaff = default(Single);
            item.AvoidThreatChance = default(Single);
            item.DodgeThreadChance = default(Single);
            item.EvadeThreatChance = default(Single);
            item.CSMD = default;
            item.MeleeAttackStaggeredMult = default(Single);
            item.MeleePowerAttackStaggeredMult = default(Single);
            item.MeleePowerAttackBlockingMult = default(Single);
            item.MeleeBashMult = default(Single);
            item.MeleeBashRecoilMult = default(Single);
            item.MeleeBashAttackMult = default(Single);
            item.MeleeBashPowerAttackMult = default(Single);
            item.MeleeSpecialAttackMult = default(Single);
            item.MeleeBlockWhenStaggeredMult = default(Single);
            item.MeleeAttackWhenStaggeredMult = default(Single);
            item.RangedAccuracyMult = default;
            item.CloseRangeDuelingCircleMult = default(Single);
            item.CloseRangeDuelingFallbackMult = default(Single);
            item.CloseRangeFlankDistance = default(Single);
            item.CloseRangeFlankingStalkTime = default(Single);
            item.CloseRangeChargeDistance = default(Single);
            item.CloseRangeChargingThrowProbability = default(Single);
            item.CloseRangeChargingSprintFastProbability = default(Single);
            item.CloseRangeChargingSideswipeProbability = default(Single);
            item.CloseRangeChargingDisengageProbability = default(Single);
            item.CloseRangeChargingThrowMaxTargets = default(UInt32);
            item.CloseRangeFlankingVariance = default(Single);
            item.LongRangeStrafeMult = default(Single);
            item.LongRangeAdjustRangeMult = default(Single);
            item.LongRangeCrouchMult = default(Single);
            item.LongRangeWaitMult = default(Single);
            item.LongRangeRangeMult = default(Single);
            item.CoverSearchDistanceMult = default;
            item.HoverChance = default(Single);
            item.DiveBombChance = default(Single);
            item.GroundAttackChance = default(Single);
            item.HoverTime = default(Single);
            item.GroundAttackTime = default(Single);
            item.PerchAttackChance = default(Single);
            item.PerchAttackTime = default(Single);
            item.FlyingAttackChance = default(Single);
            item.Flags = default;
            item.CSMEDataTypeState = default(CombatStyle.CSMEDataType);
            item.CSLRDataTypeState = default(CombatStyle.CSLRDataType);
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ICombatStyleInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICombatStyleInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ICombatStyle obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICombatStyleInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ICombatStyleInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CombatStyleBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CombatStyleBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (CombatStyle)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (CombatStyle)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class CombatStyleCommon : Fallout4MajorRecordCommon
    {
        public new static readonly CombatStyleCommon Instance = new CombatStyleCommon();

        public CombatStyle.Mask<bool> GetEqualsMask(
            ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CombatStyle.Mask<bool>(false);
            ((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICombatStyleGetter item,
            ICombatStyleGetter rhs,
            CombatStyle.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.OffensiveMult = item.OffensiveMult.EqualsWithin(rhs.OffensiveMult);
            ret.DefensiveMult = item.DefensiveMult.EqualsWithin(rhs.DefensiveMult);
            ret.GroupOffensiveMult = item.GroupOffensiveMult.EqualsWithin(rhs.GroupOffensiveMult);
            ret.EquipmentScoreMultMelee = item.EquipmentScoreMultMelee.EqualsWithin(rhs.EquipmentScoreMultMelee);
            ret.EquipmentScoreMultMagic = item.EquipmentScoreMultMagic.EqualsWithin(rhs.EquipmentScoreMultMagic);
            ret.EquipmentScoreMultRanged = item.EquipmentScoreMultRanged.EqualsWithin(rhs.EquipmentScoreMultRanged);
            ret.EquipmentScoreMultShout = item.EquipmentScoreMultShout.EqualsWithin(rhs.EquipmentScoreMultShout);
            ret.EquipmentScoreMultUnarmed = item.EquipmentScoreMultUnarmed.EqualsWithin(rhs.EquipmentScoreMultUnarmed);
            ret.EquipmentScoreMultStaff = item.EquipmentScoreMultStaff.EqualsWithin(rhs.EquipmentScoreMultStaff);
            ret.AvoidThreatChance = item.AvoidThreatChance.EqualsWithin(rhs.AvoidThreatChance);
            ret.DodgeThreadChance = item.DodgeThreadChance.EqualsWithin(rhs.DodgeThreadChance);
            ret.EvadeThreatChance = item.EvadeThreatChance.EqualsWithin(rhs.EvadeThreatChance);
            ret.CSMD = MemorySliceExt.SequenceEqual(item.CSMD, rhs.CSMD);
            ret.MeleeAttackStaggeredMult = item.MeleeAttackStaggeredMult.EqualsWithin(rhs.MeleeAttackStaggeredMult);
            ret.MeleePowerAttackStaggeredMult = item.MeleePowerAttackStaggeredMult.EqualsWithin(rhs.MeleePowerAttackStaggeredMult);
            ret.MeleePowerAttackBlockingMult = item.MeleePowerAttackBlockingMult.EqualsWithin(rhs.MeleePowerAttackBlockingMult);
            ret.MeleeBashMult = item.MeleeBashMult.EqualsWithin(rhs.MeleeBashMult);
            ret.MeleeBashRecoilMult = item.MeleeBashRecoilMult.EqualsWithin(rhs.MeleeBashRecoilMult);
            ret.MeleeBashAttackMult = item.MeleeBashAttackMult.EqualsWithin(rhs.MeleeBashAttackMult);
            ret.MeleeBashPowerAttackMult = item.MeleeBashPowerAttackMult.EqualsWithin(rhs.MeleeBashPowerAttackMult);
            ret.MeleeSpecialAttackMult = item.MeleeSpecialAttackMult.EqualsWithin(rhs.MeleeSpecialAttackMult);
            ret.MeleeBlockWhenStaggeredMult = item.MeleeBlockWhenStaggeredMult.EqualsWithin(rhs.MeleeBlockWhenStaggeredMult);
            ret.MeleeAttackWhenStaggeredMult = item.MeleeAttackWhenStaggeredMult.EqualsWithin(rhs.MeleeAttackWhenStaggeredMult);
            ret.RangedAccuracyMult = item.RangedAccuracyMult.EqualsWithin(rhs.RangedAccuracyMult);
            ret.CloseRangeDuelingCircleMult = item.CloseRangeDuelingCircleMult.EqualsWithin(rhs.CloseRangeDuelingCircleMult);
            ret.CloseRangeDuelingFallbackMult = item.CloseRangeDuelingFallbackMult.EqualsWithin(rhs.CloseRangeDuelingFallbackMult);
            ret.CloseRangeFlankDistance = item.CloseRangeFlankDistance.EqualsWithin(rhs.CloseRangeFlankDistance);
            ret.CloseRangeFlankingStalkTime = item.CloseRangeFlankingStalkTime.EqualsWithin(rhs.CloseRangeFlankingStalkTime);
            ret.CloseRangeChargeDistance = item.CloseRangeChargeDistance.EqualsWithin(rhs.CloseRangeChargeDistance);
            ret.CloseRangeChargingThrowProbability = item.CloseRangeChargingThrowProbability.EqualsWithin(rhs.CloseRangeChargingThrowProbability);
            ret.CloseRangeChargingSprintFastProbability = item.CloseRangeChargingSprintFastProbability.EqualsWithin(rhs.CloseRangeChargingSprintFastProbability);
            ret.CloseRangeChargingSideswipeProbability = item.CloseRangeChargingSideswipeProbability.EqualsWithin(rhs.CloseRangeChargingSideswipeProbability);
            ret.CloseRangeChargingDisengageProbability = item.CloseRangeChargingDisengageProbability.EqualsWithin(rhs.CloseRangeChargingDisengageProbability);
            ret.CloseRangeChargingThrowMaxTargets = item.CloseRangeChargingThrowMaxTargets == rhs.CloseRangeChargingThrowMaxTargets;
            ret.CloseRangeFlankingVariance = item.CloseRangeFlankingVariance.EqualsWithin(rhs.CloseRangeFlankingVariance);
            ret.LongRangeStrafeMult = item.LongRangeStrafeMult.EqualsWithin(rhs.LongRangeStrafeMult);
            ret.LongRangeAdjustRangeMult = item.LongRangeAdjustRangeMult.EqualsWithin(rhs.LongRangeAdjustRangeMult);
            ret.LongRangeCrouchMult = item.LongRangeCrouchMult.EqualsWithin(rhs.LongRangeCrouchMult);
            ret.LongRangeWaitMult = item.LongRangeWaitMult.EqualsWithin(rhs.LongRangeWaitMult);
            ret.LongRangeRangeMult = item.LongRangeRangeMult.EqualsWithin(rhs.LongRangeRangeMult);
            ret.CoverSearchDistanceMult = item.CoverSearchDistanceMult.EqualsWithin(rhs.CoverSearchDistanceMult);
            ret.HoverChance = item.HoverChance.EqualsWithin(rhs.HoverChance);
            ret.DiveBombChance = item.DiveBombChance.EqualsWithin(rhs.DiveBombChance);
            ret.GroundAttackChance = item.GroundAttackChance.EqualsWithin(rhs.GroundAttackChance);
            ret.HoverTime = item.HoverTime.EqualsWithin(rhs.HoverTime);
            ret.GroundAttackTime = item.GroundAttackTime.EqualsWithin(rhs.GroundAttackTime);
            ret.PerchAttackChance = item.PerchAttackChance.EqualsWithin(rhs.PerchAttackChance);
            ret.PerchAttackTime = item.PerchAttackTime.EqualsWithin(rhs.PerchAttackTime);
            ret.FlyingAttackChance = item.FlyingAttackChance.EqualsWithin(rhs.FlyingAttackChance);
            ret.Flags = item.Flags == rhs.Flags;
            ret.CSMEDataTypeState = item.CSMEDataTypeState == rhs.CSMEDataTypeState;
            ret.CSLRDataTypeState = item.CSLRDataTypeState == rhs.CSLRDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ICombatStyleGetter item,
            string? name = null,
            CombatStyle.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICombatStyleGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CombatStyle.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CombatStyle =>");
            }
            else
            {
                sb.AppendLine($"{name} (CombatStyle) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICombatStyleGetter item,
            StructuredStringBuilder sb,
            CombatStyle.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.OffensiveMult ?? true)
            {
                sb.AppendItem(item.OffensiveMult, "OffensiveMult");
            }
            if (printMask?.DefensiveMult ?? true)
            {
                sb.AppendItem(item.DefensiveMult, "DefensiveMult");
            }
            if (printMask?.GroupOffensiveMult ?? true)
            {
                sb.AppendItem(item.GroupOffensiveMult, "GroupOffensiveMult");
            }
            if (printMask?.EquipmentScoreMultMelee ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMultMelee, "EquipmentScoreMultMelee");
            }
            if (printMask?.EquipmentScoreMultMagic ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMultMagic, "EquipmentScoreMultMagic");
            }
            if (printMask?.EquipmentScoreMultRanged ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMultRanged, "EquipmentScoreMultRanged");
            }
            if (printMask?.EquipmentScoreMultShout ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMultShout, "EquipmentScoreMultShout");
            }
            if (printMask?.EquipmentScoreMultUnarmed ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMultUnarmed, "EquipmentScoreMultUnarmed");
            }
            if (printMask?.EquipmentScoreMultStaff ?? true)
            {
                sb.AppendItem(item.EquipmentScoreMultStaff, "EquipmentScoreMultStaff");
            }
            if (printMask?.AvoidThreatChance ?? true)
            {
                sb.AppendItem(item.AvoidThreatChance, "AvoidThreatChance");
            }
            if (printMask?.DodgeThreadChance ?? true)
            {
                sb.AppendItem(item.DodgeThreadChance, "DodgeThreadChance");
            }
            if (printMask?.EvadeThreatChance ?? true)
            {
                sb.AppendItem(item.EvadeThreatChance, "EvadeThreatChance");
            }
            if ((printMask?.CSMD ?? true)
                && item.CSMD is {} CSMDItem)
            {
                sb.AppendLine($"CSMD => {SpanExt.ToHexString(CSMDItem)}");
            }
            if (printMask?.MeleeAttackStaggeredMult ?? true)
            {
                sb.AppendItem(item.MeleeAttackStaggeredMult, "MeleeAttackStaggeredMult");
            }
            if (printMask?.MeleePowerAttackStaggeredMult ?? true)
            {
                sb.AppendItem(item.MeleePowerAttackStaggeredMult, "MeleePowerAttackStaggeredMult");
            }
            if (printMask?.MeleePowerAttackBlockingMult ?? true)
            {
                sb.AppendItem(item.MeleePowerAttackBlockingMult, "MeleePowerAttackBlockingMult");
            }
            if (printMask?.MeleeBashMult ?? true)
            {
                sb.AppendItem(item.MeleeBashMult, "MeleeBashMult");
            }
            if (printMask?.MeleeBashRecoilMult ?? true)
            {
                sb.AppendItem(item.MeleeBashRecoilMult, "MeleeBashRecoilMult");
            }
            if (printMask?.MeleeBashAttackMult ?? true)
            {
                sb.AppendItem(item.MeleeBashAttackMult, "MeleeBashAttackMult");
            }
            if (printMask?.MeleeBashPowerAttackMult ?? true)
            {
                sb.AppendItem(item.MeleeBashPowerAttackMult, "MeleeBashPowerAttackMult");
            }
            if (printMask?.MeleeSpecialAttackMult ?? true)
            {
                sb.AppendItem(item.MeleeSpecialAttackMult, "MeleeSpecialAttackMult");
            }
            if (printMask?.MeleeBlockWhenStaggeredMult ?? true)
            {
                sb.AppendItem(item.MeleeBlockWhenStaggeredMult, "MeleeBlockWhenStaggeredMult");
            }
            if (printMask?.MeleeAttackWhenStaggeredMult ?? true)
            {
                sb.AppendItem(item.MeleeAttackWhenStaggeredMult, "MeleeAttackWhenStaggeredMult");
            }
            if ((printMask?.RangedAccuracyMult ?? true)
                && item.RangedAccuracyMult is {} RangedAccuracyMultItem)
            {
                sb.AppendItem(RangedAccuracyMultItem, "RangedAccuracyMult");
            }
            if (printMask?.CloseRangeDuelingCircleMult ?? true)
            {
                sb.AppendItem(item.CloseRangeDuelingCircleMult, "CloseRangeDuelingCircleMult");
            }
            if (printMask?.CloseRangeDuelingFallbackMult ?? true)
            {
                sb.AppendItem(item.CloseRangeDuelingFallbackMult, "CloseRangeDuelingFallbackMult");
            }
            if (printMask?.CloseRangeFlankDistance ?? true)
            {
                sb.AppendItem(item.CloseRangeFlankDistance, "CloseRangeFlankDistance");
            }
            if (printMask?.CloseRangeFlankingStalkTime ?? true)
            {
                sb.AppendItem(item.CloseRangeFlankingStalkTime, "CloseRangeFlankingStalkTime");
            }
            if (printMask?.CloseRangeChargeDistance ?? true)
            {
                sb.AppendItem(item.CloseRangeChargeDistance, "CloseRangeChargeDistance");
            }
            if (printMask?.CloseRangeChargingThrowProbability ?? true)
            {
                sb.AppendItem(item.CloseRangeChargingThrowProbability, "CloseRangeChargingThrowProbability");
            }
            if (printMask?.CloseRangeChargingSprintFastProbability ?? true)
            {
                sb.AppendItem(item.CloseRangeChargingSprintFastProbability, "CloseRangeChargingSprintFastProbability");
            }
            if (printMask?.CloseRangeChargingSideswipeProbability ?? true)
            {
                sb.AppendItem(item.CloseRangeChargingSideswipeProbability, "CloseRangeChargingSideswipeProbability");
            }
            if (printMask?.CloseRangeChargingDisengageProbability ?? true)
            {
                sb.AppendItem(item.CloseRangeChargingDisengageProbability, "CloseRangeChargingDisengageProbability");
            }
            if (printMask?.CloseRangeChargingThrowMaxTargets ?? true)
            {
                sb.AppendItem(item.CloseRangeChargingThrowMaxTargets, "CloseRangeChargingThrowMaxTargets");
            }
            if (printMask?.CloseRangeFlankingVariance ?? true)
            {
                sb.AppendItem(item.CloseRangeFlankingVariance, "CloseRangeFlankingVariance");
            }
            if (printMask?.LongRangeStrafeMult ?? true)
            {
                sb.AppendItem(item.LongRangeStrafeMult, "LongRangeStrafeMult");
            }
            if (printMask?.LongRangeAdjustRangeMult ?? true)
            {
                sb.AppendItem(item.LongRangeAdjustRangeMult, "LongRangeAdjustRangeMult");
            }
            if (printMask?.LongRangeCrouchMult ?? true)
            {
                sb.AppendItem(item.LongRangeCrouchMult, "LongRangeCrouchMult");
            }
            if (printMask?.LongRangeWaitMult ?? true)
            {
                sb.AppendItem(item.LongRangeWaitMult, "LongRangeWaitMult");
            }
            if (printMask?.LongRangeRangeMult ?? true)
            {
                sb.AppendItem(item.LongRangeRangeMult, "LongRangeRangeMult");
            }
            if ((printMask?.CoverSearchDistanceMult ?? true)
                && item.CoverSearchDistanceMult is {} CoverSearchDistanceMultItem)
            {
                sb.AppendItem(CoverSearchDistanceMultItem, "CoverSearchDistanceMult");
            }
            if (printMask?.HoverChance ?? true)
            {
                sb.AppendItem(item.HoverChance, "HoverChance");
            }
            if (printMask?.DiveBombChance ?? true)
            {
                sb.AppendItem(item.DiveBombChance, "DiveBombChance");
            }
            if (printMask?.GroundAttackChance ?? true)
            {
                sb.AppendItem(item.GroundAttackChance, "GroundAttackChance");
            }
            if (printMask?.HoverTime ?? true)
            {
                sb.AppendItem(item.HoverTime, "HoverTime");
            }
            if (printMask?.GroundAttackTime ?? true)
            {
                sb.AppendItem(item.GroundAttackTime, "GroundAttackTime");
            }
            if (printMask?.PerchAttackChance ?? true)
            {
                sb.AppendItem(item.PerchAttackChance, "PerchAttackChance");
            }
            if (printMask?.PerchAttackTime ?? true)
            {
                sb.AppendItem(item.PerchAttackTime, "PerchAttackTime");
            }
            if (printMask?.FlyingAttackChance ?? true)
            {
                sb.AppendItem(item.FlyingAttackChance, "FlyingAttackChance");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.CSMEDataTypeState ?? true)
            {
                sb.AppendItem(item.CSMEDataTypeState, "CSMEDataTypeState");
            }
            if (printMask?.CSLRDataTypeState ?? true)
            {
                sb.AppendItem(item.CSLRDataTypeState, "CSLRDataTypeState");
            }
        }
        
        public static CombatStyle_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CombatStyle_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (CombatStyle_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (CombatStyle_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (CombatStyle_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (CombatStyle_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (CombatStyle_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (CombatStyle_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new CombatStyle_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (CombatStyle_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (CombatStyle_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICombatStyleGetter? lhs,
            ICombatStyleGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.OffensiveMult) ?? true))
            {
                if (!lhs.OffensiveMult.EqualsWithin(rhs.OffensiveMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DefensiveMult) ?? true))
            {
                if (!lhs.DefensiveMult.EqualsWithin(rhs.DefensiveMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.GroupOffensiveMult) ?? true))
            {
                if (!lhs.GroupOffensiveMult.EqualsWithin(rhs.GroupOffensiveMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultMelee) ?? true))
            {
                if (!lhs.EquipmentScoreMultMelee.EqualsWithin(rhs.EquipmentScoreMultMelee)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultMagic) ?? true))
            {
                if (!lhs.EquipmentScoreMultMagic.EqualsWithin(rhs.EquipmentScoreMultMagic)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultRanged) ?? true))
            {
                if (!lhs.EquipmentScoreMultRanged.EqualsWithin(rhs.EquipmentScoreMultRanged)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultShout) ?? true))
            {
                if (!lhs.EquipmentScoreMultShout.EqualsWithin(rhs.EquipmentScoreMultShout)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultUnarmed) ?? true))
            {
                if (!lhs.EquipmentScoreMultUnarmed.EqualsWithin(rhs.EquipmentScoreMultUnarmed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultStaff) ?? true))
            {
                if (!lhs.EquipmentScoreMultStaff.EqualsWithin(rhs.EquipmentScoreMultStaff)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.AvoidThreatChance) ?? true))
            {
                if (!lhs.AvoidThreatChance.EqualsWithin(rhs.AvoidThreatChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeThreadChance) ?? true))
            {
                if (!lhs.DodgeThreadChance.EqualsWithin(rhs.DodgeThreadChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EvadeThreatChance) ?? true))
            {
                if (!lhs.EvadeThreatChance.EqualsWithin(rhs.EvadeThreatChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CSMD) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.CSMD, rhs.CSMD)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeAttackStaggeredMult) ?? true))
            {
                if (!lhs.MeleeAttackStaggeredMult.EqualsWithin(rhs.MeleeAttackStaggeredMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleePowerAttackStaggeredMult) ?? true))
            {
                if (!lhs.MeleePowerAttackStaggeredMult.EqualsWithin(rhs.MeleePowerAttackStaggeredMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleePowerAttackBlockingMult) ?? true))
            {
                if (!lhs.MeleePowerAttackBlockingMult.EqualsWithin(rhs.MeleePowerAttackBlockingMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashMult) ?? true))
            {
                if (!lhs.MeleeBashMult.EqualsWithin(rhs.MeleeBashMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashRecoilMult) ?? true))
            {
                if (!lhs.MeleeBashRecoilMult.EqualsWithin(rhs.MeleeBashRecoilMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashAttackMult) ?? true))
            {
                if (!lhs.MeleeBashAttackMult.EqualsWithin(rhs.MeleeBashAttackMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashPowerAttackMult) ?? true))
            {
                if (!lhs.MeleeBashPowerAttackMult.EqualsWithin(rhs.MeleeBashPowerAttackMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeSpecialAttackMult) ?? true))
            {
                if (!lhs.MeleeSpecialAttackMult.EqualsWithin(rhs.MeleeSpecialAttackMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBlockWhenStaggeredMult) ?? true))
            {
                if (!lhs.MeleeBlockWhenStaggeredMult.EqualsWithin(rhs.MeleeBlockWhenStaggeredMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult) ?? true))
            {
                if (!lhs.MeleeAttackWhenStaggeredMult.EqualsWithin(rhs.MeleeAttackWhenStaggeredMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedAccuracyMult) ?? true))
            {
                if (!lhs.RangedAccuracyMult.EqualsWithin(rhs.RangedAccuracyMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeDuelingCircleMult) ?? true))
            {
                if (!lhs.CloseRangeDuelingCircleMult.EqualsWithin(rhs.CloseRangeDuelingCircleMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeDuelingFallbackMult) ?? true))
            {
                if (!lhs.CloseRangeDuelingFallbackMult.EqualsWithin(rhs.CloseRangeDuelingFallbackMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeFlankDistance) ?? true))
            {
                if (!lhs.CloseRangeFlankDistance.EqualsWithin(rhs.CloseRangeFlankDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeFlankingStalkTime) ?? true))
            {
                if (!lhs.CloseRangeFlankingStalkTime.EqualsWithin(rhs.CloseRangeFlankingStalkTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargeDistance) ?? true))
            {
                if (!lhs.CloseRangeChargeDistance.EqualsWithin(rhs.CloseRangeChargeDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingThrowProbability) ?? true))
            {
                if (!lhs.CloseRangeChargingThrowProbability.EqualsWithin(rhs.CloseRangeChargingThrowProbability)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingSprintFastProbability) ?? true))
            {
                if (!lhs.CloseRangeChargingSprintFastProbability.EqualsWithin(rhs.CloseRangeChargingSprintFastProbability)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingSideswipeProbability) ?? true))
            {
                if (!lhs.CloseRangeChargingSideswipeProbability.EqualsWithin(rhs.CloseRangeChargingSideswipeProbability)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingDisengageProbability) ?? true))
            {
                if (!lhs.CloseRangeChargingDisengageProbability.EqualsWithin(rhs.CloseRangeChargingDisengageProbability)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingThrowMaxTargets) ?? true))
            {
                if (lhs.CloseRangeChargingThrowMaxTargets != rhs.CloseRangeChargingThrowMaxTargets) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeFlankingVariance) ?? true))
            {
                if (!lhs.CloseRangeFlankingVariance.EqualsWithin(rhs.CloseRangeFlankingVariance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeStrafeMult) ?? true))
            {
                if (!lhs.LongRangeStrafeMult.EqualsWithin(rhs.LongRangeStrafeMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeAdjustRangeMult) ?? true))
            {
                if (!lhs.LongRangeAdjustRangeMult.EqualsWithin(rhs.LongRangeAdjustRangeMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeCrouchMult) ?? true))
            {
                if (!lhs.LongRangeCrouchMult.EqualsWithin(rhs.LongRangeCrouchMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeWaitMult) ?? true))
            {
                if (!lhs.LongRangeWaitMult.EqualsWithin(rhs.LongRangeWaitMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeRangeMult) ?? true))
            {
                if (!lhs.LongRangeRangeMult.EqualsWithin(rhs.LongRangeRangeMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CoverSearchDistanceMult) ?? true))
            {
                if (!lhs.CoverSearchDistanceMult.EqualsWithin(rhs.CoverSearchDistanceMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HoverChance) ?? true))
            {
                if (!lhs.HoverChance.EqualsWithin(rhs.HoverChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DiveBombChance) ?? true))
            {
                if (!lhs.DiveBombChance.EqualsWithin(rhs.DiveBombChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.GroundAttackChance) ?? true))
            {
                if (!lhs.GroundAttackChance.EqualsWithin(rhs.GroundAttackChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HoverTime) ?? true))
            {
                if (!lhs.HoverTime.EqualsWithin(rhs.HoverTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.GroundAttackTime) ?? true))
            {
                if (!lhs.GroundAttackTime.EqualsWithin(rhs.GroundAttackTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PerchAttackChance) ?? true))
            {
                if (!lhs.PerchAttackChance.EqualsWithin(rhs.PerchAttackChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PerchAttackTime) ?? true))
            {
                if (!lhs.PerchAttackTime.EqualsWithin(rhs.PerchAttackTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlyingAttackChance) ?? true))
            {
                if (!lhs.FlyingAttackChance.EqualsWithin(rhs.FlyingAttackChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CSMEDataTypeState) ?? true))
            {
                if (lhs.CSMEDataTypeState != rhs.CSMEDataTypeState) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CSLRDataTypeState) ?? true))
            {
                if (lhs.CSLRDataTypeState != rhs.CSLRDataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ICombatStyleGetter?)lhs,
                rhs: rhs as ICombatStyleGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ICombatStyleGetter?)lhs,
                rhs: rhs as ICombatStyleGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ICombatStyleGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.OffensiveMult);
            hash.Add(item.DefensiveMult);
            hash.Add(item.GroupOffensiveMult);
            hash.Add(item.EquipmentScoreMultMelee);
            hash.Add(item.EquipmentScoreMultMagic);
            hash.Add(item.EquipmentScoreMultRanged);
            hash.Add(item.EquipmentScoreMultShout);
            hash.Add(item.EquipmentScoreMultUnarmed);
            hash.Add(item.EquipmentScoreMultStaff);
            hash.Add(item.AvoidThreatChance);
            hash.Add(item.DodgeThreadChance);
            hash.Add(item.EvadeThreatChance);
            if (item.CSMD is {} CSMDItem)
            {
                hash.Add(CSMDItem);
            }
            hash.Add(item.MeleeAttackStaggeredMult);
            hash.Add(item.MeleePowerAttackStaggeredMult);
            hash.Add(item.MeleePowerAttackBlockingMult);
            hash.Add(item.MeleeBashMult);
            hash.Add(item.MeleeBashRecoilMult);
            hash.Add(item.MeleeBashAttackMult);
            hash.Add(item.MeleeBashPowerAttackMult);
            hash.Add(item.MeleeSpecialAttackMult);
            hash.Add(item.MeleeBlockWhenStaggeredMult);
            hash.Add(item.MeleeAttackWhenStaggeredMult);
            if (item.RangedAccuracyMult is {} RangedAccuracyMultitem)
            {
                hash.Add(RangedAccuracyMultitem);
            }
            hash.Add(item.CloseRangeDuelingCircleMult);
            hash.Add(item.CloseRangeDuelingFallbackMult);
            hash.Add(item.CloseRangeFlankDistance);
            hash.Add(item.CloseRangeFlankingStalkTime);
            hash.Add(item.CloseRangeChargeDistance);
            hash.Add(item.CloseRangeChargingThrowProbability);
            hash.Add(item.CloseRangeChargingSprintFastProbability);
            hash.Add(item.CloseRangeChargingSideswipeProbability);
            hash.Add(item.CloseRangeChargingDisengageProbability);
            hash.Add(item.CloseRangeChargingThrowMaxTargets);
            hash.Add(item.CloseRangeFlankingVariance);
            hash.Add(item.LongRangeStrafeMult);
            hash.Add(item.LongRangeAdjustRangeMult);
            hash.Add(item.LongRangeCrouchMult);
            hash.Add(item.LongRangeWaitMult);
            hash.Add(item.LongRangeRangeMult);
            if (item.CoverSearchDistanceMult is {} CoverSearchDistanceMultitem)
            {
                hash.Add(CoverSearchDistanceMultitem);
            }
            hash.Add(item.HoverChance);
            hash.Add(item.DiveBombChance);
            hash.Add(item.GroundAttackChance);
            hash.Add(item.HoverTime);
            hash.Add(item.GroundAttackTime);
            hash.Add(item.PerchAttackChance);
            hash.Add(item.PerchAttackTime);
            hash.Add(item.FlyingAttackChance);
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.CSMEDataTypeState);
            hash.Add(item.CSLRDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ICombatStyleGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICombatStyleGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return CombatStyle.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICombatStyleGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public CombatStyle Duplicate(
            ICombatStyleGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new CombatStyle(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICombatStyleGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICombatStyleGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class CombatStyleSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly CombatStyleSetterTranslationCommon Instance = new CombatStyleSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICombatStyleInternal item,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ICombatStyle item,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.OffensiveMult) ?? true))
            {
                item.OffensiveMult = rhs.OffensiveMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DefensiveMult) ?? true))
            {
                item.DefensiveMult = rhs.DefensiveMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.GroupOffensiveMult) ?? true))
            {
                item.GroupOffensiveMult = rhs.GroupOffensiveMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultMelee) ?? true))
            {
                item.EquipmentScoreMultMelee = rhs.EquipmentScoreMultMelee;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultMagic) ?? true))
            {
                item.EquipmentScoreMultMagic = rhs.EquipmentScoreMultMagic;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultRanged) ?? true))
            {
                item.EquipmentScoreMultRanged = rhs.EquipmentScoreMultRanged;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultShout) ?? true))
            {
                item.EquipmentScoreMultShout = rhs.EquipmentScoreMultShout;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultUnarmed) ?? true))
            {
                item.EquipmentScoreMultUnarmed = rhs.EquipmentScoreMultUnarmed;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EquipmentScoreMultStaff) ?? true))
            {
                item.EquipmentScoreMultStaff = rhs.EquipmentScoreMultStaff;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.AvoidThreatChance) ?? true))
            {
                item.AvoidThreatChance = rhs.AvoidThreatChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DodgeThreadChance) ?? true))
            {
                item.DodgeThreadChance = rhs.DodgeThreadChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.EvadeThreatChance) ?? true))
            {
                item.EvadeThreatChance = rhs.EvadeThreatChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CSMD) ?? true))
            {
                if(rhs.CSMD is {} CSMDrhs)
                {
                    item.CSMD = CSMDrhs.ToArray();
                }
                else
                {
                    item.CSMD = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeAttackStaggeredMult) ?? true))
            {
                item.MeleeAttackStaggeredMult = rhs.MeleeAttackStaggeredMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleePowerAttackStaggeredMult) ?? true))
            {
                item.MeleePowerAttackStaggeredMult = rhs.MeleePowerAttackStaggeredMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleePowerAttackBlockingMult) ?? true))
            {
                item.MeleePowerAttackBlockingMult = rhs.MeleePowerAttackBlockingMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashMult) ?? true))
            {
                item.MeleeBashMult = rhs.MeleeBashMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashRecoilMult) ?? true))
            {
                item.MeleeBashRecoilMult = rhs.MeleeBashRecoilMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashAttackMult) ?? true))
            {
                item.MeleeBashAttackMult = rhs.MeleeBashAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBashPowerAttackMult) ?? true))
            {
                item.MeleeBashPowerAttackMult = rhs.MeleeBashPowerAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeSpecialAttackMult) ?? true))
            {
                item.MeleeSpecialAttackMult = rhs.MeleeSpecialAttackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeBlockWhenStaggeredMult) ?? true))
            {
                item.MeleeBlockWhenStaggeredMult = rhs.MeleeBlockWhenStaggeredMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult) ?? true))
            {
                item.MeleeAttackWhenStaggeredMult = rhs.MeleeAttackWhenStaggeredMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.RangedAccuracyMult) ?? true))
            {
                item.RangedAccuracyMult = rhs.RangedAccuracyMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeDuelingCircleMult) ?? true))
            {
                item.CloseRangeDuelingCircleMult = rhs.CloseRangeDuelingCircleMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeDuelingFallbackMult) ?? true))
            {
                item.CloseRangeDuelingFallbackMult = rhs.CloseRangeDuelingFallbackMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeFlankDistance) ?? true))
            {
                item.CloseRangeFlankDistance = rhs.CloseRangeFlankDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeFlankingStalkTime) ?? true))
            {
                item.CloseRangeFlankingStalkTime = rhs.CloseRangeFlankingStalkTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargeDistance) ?? true))
            {
                item.CloseRangeChargeDistance = rhs.CloseRangeChargeDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingThrowProbability) ?? true))
            {
                item.CloseRangeChargingThrowProbability = rhs.CloseRangeChargingThrowProbability;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingSprintFastProbability) ?? true))
            {
                item.CloseRangeChargingSprintFastProbability = rhs.CloseRangeChargingSprintFastProbability;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingSideswipeProbability) ?? true))
            {
                item.CloseRangeChargingSideswipeProbability = rhs.CloseRangeChargingSideswipeProbability;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingDisengageProbability) ?? true))
            {
                item.CloseRangeChargingDisengageProbability = rhs.CloseRangeChargingDisengageProbability;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeChargingThrowMaxTargets) ?? true))
            {
                item.CloseRangeChargingThrowMaxTargets = rhs.CloseRangeChargingThrowMaxTargets;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CloseRangeFlankingVariance) ?? true))
            {
                item.CloseRangeFlankingVariance = rhs.CloseRangeFlankingVariance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeStrafeMult) ?? true))
            {
                item.LongRangeStrafeMult = rhs.LongRangeStrafeMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeAdjustRangeMult) ?? true))
            {
                item.LongRangeAdjustRangeMult = rhs.LongRangeAdjustRangeMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeCrouchMult) ?? true))
            {
                item.LongRangeCrouchMult = rhs.LongRangeCrouchMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeWaitMult) ?? true))
            {
                item.LongRangeWaitMult = rhs.LongRangeWaitMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.LongRangeRangeMult) ?? true))
            {
                item.LongRangeRangeMult = rhs.LongRangeRangeMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CoverSearchDistanceMult) ?? true))
            {
                item.CoverSearchDistanceMult = rhs.CoverSearchDistanceMult;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HoverChance) ?? true))
            {
                item.HoverChance = rhs.HoverChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.DiveBombChance) ?? true))
            {
                item.DiveBombChance = rhs.DiveBombChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.GroundAttackChance) ?? true))
            {
                item.GroundAttackChance = rhs.GroundAttackChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.HoverTime) ?? true))
            {
                item.HoverTime = rhs.HoverTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.GroundAttackTime) ?? true))
            {
                item.GroundAttackTime = rhs.GroundAttackTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PerchAttackChance) ?? true))
            {
                item.PerchAttackChance = rhs.PerchAttackChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.PerchAttackTime) ?? true))
            {
                item.PerchAttackTime = rhs.PerchAttackTime;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.FlyingAttackChance) ?? true))
            {
                item.FlyingAttackChance = rhs.FlyingAttackChance;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CSMEDataTypeState) ?? true))
            {
                item.CSMEDataTypeState = rhs.CSMEDataTypeState;
            }
            if ((copyMask?.GetShouldTranslate((int)CombatStyle_FieldIndex.CSLRDataTypeState) ?? true))
            {
                item.CSLRDataTypeState = rhs.CSLRDataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICombatStyle item,
            ICombatStyleGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICombatStyleInternal)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICombatStyle)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICombatStyleInternal)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICombatStyle)item,
                rhs: (ICombatStyleGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public CombatStyle DeepCopy(
            ICombatStyleGetter item,
            CombatStyle.TranslationMask? copyMask = null)
        {
            CombatStyle ret = (CombatStyle)((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CombatStyle DeepCopy(
            ICombatStyleGetter item,
            out CombatStyle.ErrorMask errorMask,
            CombatStyle.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CombatStyle ret = (CombatStyle)((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CombatStyle.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CombatStyle DeepCopy(
            ICombatStyleGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CombatStyle ret = (CombatStyle)((CombatStyleCommon)((ICombatStyleGetter)item).CommonInstance()!).GetNew();
            ((CombatStyleSetterTranslationCommon)((ICombatStyleGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class CombatStyle
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyle_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => CombatStyle_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CombatStyleCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CombatStyleSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CombatStyleSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class CombatStyleBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly CombatStyleBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ICombatStyleGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ICombatStyleGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSGD)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.OffensiveMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DefensiveMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.GroupOffensiveMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EquipmentScoreMultMelee);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EquipmentScoreMultMagic);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EquipmentScoreMultRanged);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EquipmentScoreMultShout);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EquipmentScoreMultUnarmed);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EquipmentScoreMultStaff);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AvoidThreatChance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DodgeThreadChance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EvadeThreatChance);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CSMD,
                header: translationParams.ConvertToCustom(RecordTypes.CSMD));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSME)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeAttackStaggeredMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleePowerAttackStaggeredMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleePowerAttackBlockingMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeBashMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeBashRecoilMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeBashAttackMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeBashPowerAttackMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeSpecialAttackMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MeleeBlockWhenStaggeredMult);
                if (!item.CSMEDataTypeState.HasFlag(CombatStyle.CSMEDataType.Break0))
                {
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.MeleeAttackWhenStaggeredMult);
                }
            }
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.RangedAccuracyMult,
                header: translationParams.ConvertToCustom(RecordTypes.CSRA));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSCR)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CloseRangeDuelingCircleMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CloseRangeDuelingFallbackMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CloseRangeFlankDistance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CloseRangeFlankingStalkTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CloseRangeChargeDistance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CloseRangeChargingThrowProbability);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CloseRangeChargingSprintFastProbability);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CloseRangeChargingSideswipeProbability);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CloseRangeChargingDisengageProbability);
                writer.Write(item.CloseRangeChargingThrowMaxTargets);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CloseRangeFlankingVariance);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSLR)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.LongRangeStrafeMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.LongRangeAdjustRangeMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.LongRangeCrouchMult);
                if (!item.CSLRDataTypeState.HasFlag(CombatStyle.CSLRDataType.Break0))
                {
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.LongRangeWaitMult);
                    if (!item.CSLRDataTypeState.HasFlag(CombatStyle.CSLRDataType.Break1))
                    {
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.LongRangeRangeMult);
                    }
                }
            }
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.CoverSearchDistanceMult,
                header: translationParams.ConvertToCustom(RecordTypes.CSCV));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CSFL)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HoverChance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DiveBombChance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.GroundAttackChance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HoverTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.GroundAttackTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.PerchAttackChance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.PerchAttackTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FlyingAttackChance);
            }
            EnumBinaryTranslation<CombatStyle.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
        }

        public void Write(
            MutagenWriter writer,
            ICombatStyleGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.CSTY,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICombatStyleGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ICombatStyleGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ICombatStyleGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CombatStyleBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly CombatStyleBinaryCreateTranslation Instance = new CombatStyleBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CSTY;
        public static void FillBinaryStructs(
            ICombatStyleInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ICombatStyleInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CSGD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.OffensiveMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DefensiveMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.GroupOffensiveMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipmentScoreMultMelee = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipmentScoreMultMagic = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipmentScoreMultRanged = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipmentScoreMultShout = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipmentScoreMultUnarmed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipmentScoreMultStaff = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AvoidThreatChance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DodgeThreadChance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EvadeThreatChance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)CombatStyle_FieldIndex.EvadeThreatChance;
                }
                case RecordTypeInts.CSMD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CSMD = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)CombatStyle_FieldIndex.CSMD;
                }
                case RecordTypeInts.CSME:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeAttackStaggeredMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleePowerAttackStaggeredMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleePowerAttackBlockingMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeBashMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeBashRecoilMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeBashAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeBashPowerAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeSpecialAttackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeBlockWhenStaggeredMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.CSMEDataTypeState |= CombatStyle.CSMEDataType.Break0;
                        return (int)CombatStyle_FieldIndex.MeleeBlockWhenStaggeredMult;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.MeleeAttackWhenStaggeredMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult;
                }
                case RecordTypeInts.CSRA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RangedAccuracyMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)CombatStyle_FieldIndex.RangedAccuracyMult;
                }
                case RecordTypeInts.CSCR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeDuelingCircleMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeDuelingFallbackMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeFlankDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeFlankingStalkTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeChargeDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeChargingThrowProbability = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeChargingSprintFastProbability = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeChargingSideswipeProbability = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeChargingDisengageProbability = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeChargingThrowMaxTargets = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.CloseRangeFlankingVariance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)CombatStyle_FieldIndex.CloseRangeFlankingVariance;
                }
                case RecordTypeInts.CSLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeStrafeMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeAdjustRangeMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeCrouchMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.CSLRDataTypeState |= CombatStyle.CSLRDataType.Break0;
                        return (int)CombatStyle_FieldIndex.LongRangeCrouchMult;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeWaitMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.CSLRDataTypeState |= CombatStyle.CSLRDataType.Break1;
                        return (int)CombatStyle_FieldIndex.LongRangeWaitMult;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.LongRangeRangeMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)CombatStyle_FieldIndex.LongRangeRangeMult;
                }
                case RecordTypeInts.CSCV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CoverSearchDistanceMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)CombatStyle_FieldIndex.CoverSearchDistanceMult;
                }
                case RecordTypeInts.CSFL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.HoverChance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DiveBombChance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.GroundAttackChance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HoverTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.GroundAttackTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.PerchAttackChance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.PerchAttackTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FlyingAttackChance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)CombatStyle_FieldIndex.FlyingAttackChance;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<CombatStyle.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)CombatStyle_FieldIndex.Flags;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class CombatStyleBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class CombatStyleBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ICombatStyleGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CombatStyle_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => CombatStyle_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CombatStyleCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CombatStyleSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CombatStyleBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CombatStyleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ICombatStyle);

        public CombatStyle.MajorFlag MajorFlags => (CombatStyle.MajorFlag)this.MajorRecordFlagsRaw;

        private RangeInt32? _CSGDLocation;
        #region OffensiveMult
        private int _OffensiveMultLocation => _CSGDLocation!.Value.Min;
        private bool _OffensiveMult_IsSet => _CSGDLocation.HasValue;
        public Single OffensiveMult => _OffensiveMult_IsSet ? _recordData.Slice(_OffensiveMultLocation, 4).Float() : default(Single);
        #endregion
        #region DefensiveMult
        private int _DefensiveMultLocation => _CSGDLocation!.Value.Min + 0x4;
        private bool _DefensiveMult_IsSet => _CSGDLocation.HasValue;
        public Single DefensiveMult => _DefensiveMult_IsSet ? _recordData.Slice(_DefensiveMultLocation, 4).Float() : default(Single);
        #endregion
        #region GroupOffensiveMult
        private int _GroupOffensiveMultLocation => _CSGDLocation!.Value.Min + 0x8;
        private bool _GroupOffensiveMult_IsSet => _CSGDLocation.HasValue;
        public Single GroupOffensiveMult => _GroupOffensiveMult_IsSet ? _recordData.Slice(_GroupOffensiveMultLocation, 4).Float() : default(Single);
        #endregion
        #region EquipmentScoreMultMelee
        private int _EquipmentScoreMultMeleeLocation => _CSGDLocation!.Value.Min + 0xC;
        private bool _EquipmentScoreMultMelee_IsSet => _CSGDLocation.HasValue;
        public Single EquipmentScoreMultMelee => _EquipmentScoreMultMelee_IsSet ? _recordData.Slice(_EquipmentScoreMultMeleeLocation, 4).Float() : default(Single);
        #endregion
        #region EquipmentScoreMultMagic
        private int _EquipmentScoreMultMagicLocation => _CSGDLocation!.Value.Min + 0x10;
        private bool _EquipmentScoreMultMagic_IsSet => _CSGDLocation.HasValue;
        public Single EquipmentScoreMultMagic => _EquipmentScoreMultMagic_IsSet ? _recordData.Slice(_EquipmentScoreMultMagicLocation, 4).Float() : default(Single);
        #endregion
        #region EquipmentScoreMultRanged
        private int _EquipmentScoreMultRangedLocation => _CSGDLocation!.Value.Min + 0x14;
        private bool _EquipmentScoreMultRanged_IsSet => _CSGDLocation.HasValue;
        public Single EquipmentScoreMultRanged => _EquipmentScoreMultRanged_IsSet ? _recordData.Slice(_EquipmentScoreMultRangedLocation, 4).Float() : default(Single);
        #endregion
        #region EquipmentScoreMultShout
        private int _EquipmentScoreMultShoutLocation => _CSGDLocation!.Value.Min + 0x18;
        private bool _EquipmentScoreMultShout_IsSet => _CSGDLocation.HasValue;
        public Single EquipmentScoreMultShout => _EquipmentScoreMultShout_IsSet ? _recordData.Slice(_EquipmentScoreMultShoutLocation, 4).Float() : default(Single);
        #endregion
        #region EquipmentScoreMultUnarmed
        private int _EquipmentScoreMultUnarmedLocation => _CSGDLocation!.Value.Min + 0x1C;
        private bool _EquipmentScoreMultUnarmed_IsSet => _CSGDLocation.HasValue;
        public Single EquipmentScoreMultUnarmed => _EquipmentScoreMultUnarmed_IsSet ? _recordData.Slice(_EquipmentScoreMultUnarmedLocation, 4).Float() : default(Single);
        #endregion
        #region EquipmentScoreMultStaff
        private int _EquipmentScoreMultStaffLocation => _CSGDLocation!.Value.Min + 0x20;
        private bool _EquipmentScoreMultStaff_IsSet => _CSGDLocation.HasValue;
        public Single EquipmentScoreMultStaff => _EquipmentScoreMultStaff_IsSet ? _recordData.Slice(_EquipmentScoreMultStaffLocation, 4).Float() : default(Single);
        #endregion
        #region AvoidThreatChance
        private int _AvoidThreatChanceLocation => _CSGDLocation!.Value.Min + 0x24;
        private bool _AvoidThreatChance_IsSet => _CSGDLocation.HasValue;
        public Single AvoidThreatChance => _AvoidThreatChance_IsSet ? _recordData.Slice(_AvoidThreatChanceLocation, 4).Float() : default(Single);
        #endregion
        #region DodgeThreadChance
        private int _DodgeThreadChanceLocation => _CSGDLocation!.Value.Min + 0x28;
        private bool _DodgeThreadChance_IsSet => _CSGDLocation.HasValue;
        public Single DodgeThreadChance => _DodgeThreadChance_IsSet ? _recordData.Slice(_DodgeThreadChanceLocation, 4).Float() : default(Single);
        #endregion
        #region EvadeThreatChance
        private int _EvadeThreatChanceLocation => _CSGDLocation!.Value.Min + 0x2C;
        private bool _EvadeThreatChance_IsSet => _CSGDLocation.HasValue;
        public Single EvadeThreatChance => _EvadeThreatChance_IsSet ? _recordData.Slice(_EvadeThreatChanceLocation, 4).Float() : default(Single);
        #endregion
        #region CSMD
        private int? _CSMDLocation;
        public ReadOnlyMemorySlice<Byte>? CSMD => _CSMDLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _CSMDLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        private RangeInt32? _CSMELocation;
        public CombatStyle.CSMEDataType CSMEDataTypeState { get; private set; }
        #region MeleeAttackStaggeredMult
        private int _MeleeAttackStaggeredMultLocation => _CSMELocation!.Value.Min;
        private bool _MeleeAttackStaggeredMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeAttackStaggeredMult => _MeleeAttackStaggeredMult_IsSet ? _recordData.Slice(_MeleeAttackStaggeredMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleePowerAttackStaggeredMult
        private int _MeleePowerAttackStaggeredMultLocation => _CSMELocation!.Value.Min + 0x4;
        private bool _MeleePowerAttackStaggeredMult_IsSet => _CSMELocation.HasValue;
        public Single MeleePowerAttackStaggeredMult => _MeleePowerAttackStaggeredMult_IsSet ? _recordData.Slice(_MeleePowerAttackStaggeredMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleePowerAttackBlockingMult
        private int _MeleePowerAttackBlockingMultLocation => _CSMELocation!.Value.Min + 0x8;
        private bool _MeleePowerAttackBlockingMult_IsSet => _CSMELocation.HasValue;
        public Single MeleePowerAttackBlockingMult => _MeleePowerAttackBlockingMult_IsSet ? _recordData.Slice(_MeleePowerAttackBlockingMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeBashMult
        private int _MeleeBashMultLocation => _CSMELocation!.Value.Min + 0xC;
        private bool _MeleeBashMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeBashMult => _MeleeBashMult_IsSet ? _recordData.Slice(_MeleeBashMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeBashRecoilMult
        private int _MeleeBashRecoilMultLocation => _CSMELocation!.Value.Min + 0x10;
        private bool _MeleeBashRecoilMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeBashRecoilMult => _MeleeBashRecoilMult_IsSet ? _recordData.Slice(_MeleeBashRecoilMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeBashAttackMult
        private int _MeleeBashAttackMultLocation => _CSMELocation!.Value.Min + 0x14;
        private bool _MeleeBashAttackMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeBashAttackMult => _MeleeBashAttackMult_IsSet ? _recordData.Slice(_MeleeBashAttackMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeBashPowerAttackMult
        private int _MeleeBashPowerAttackMultLocation => _CSMELocation!.Value.Min + 0x18;
        private bool _MeleeBashPowerAttackMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeBashPowerAttackMult => _MeleeBashPowerAttackMult_IsSet ? _recordData.Slice(_MeleeBashPowerAttackMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeSpecialAttackMult
        private int _MeleeSpecialAttackMultLocation => _CSMELocation!.Value.Min + 0x1C;
        private bool _MeleeSpecialAttackMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeSpecialAttackMult => _MeleeSpecialAttackMult_IsSet ? _recordData.Slice(_MeleeSpecialAttackMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeBlockWhenStaggeredMult
        private int _MeleeBlockWhenStaggeredMultLocation => _CSMELocation!.Value.Min + 0x20;
        private bool _MeleeBlockWhenStaggeredMult_IsSet => _CSMELocation.HasValue;
        public Single MeleeBlockWhenStaggeredMult => _MeleeBlockWhenStaggeredMult_IsSet ? _recordData.Slice(_MeleeBlockWhenStaggeredMultLocation, 4).Float() : default(Single);
        #endregion
        #region MeleeAttackWhenStaggeredMult
        private int _MeleeAttackWhenStaggeredMultLocation => _CSMELocation!.Value.Min + 0x24;
        private bool _MeleeAttackWhenStaggeredMult_IsSet => _CSMELocation.HasValue && !CSMEDataTypeState.HasFlag(CombatStyle.CSMEDataType.Break0);
        public Single MeleeAttackWhenStaggeredMult => _MeleeAttackWhenStaggeredMult_IsSet ? _recordData.Slice(_MeleeAttackWhenStaggeredMultLocation, 4).Float() : default(Single);
        #endregion
        #region RangedAccuracyMult
        private int? _RangedAccuracyMultLocation;
        public Single? RangedAccuracyMult => _RangedAccuracyMultLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _RangedAccuracyMultLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        private RangeInt32? _CSCRLocation;
        #region CloseRangeDuelingCircleMult
        private int _CloseRangeDuelingCircleMultLocation => _CSCRLocation!.Value.Min;
        private bool _CloseRangeDuelingCircleMult_IsSet => _CSCRLocation.HasValue;
        public Single CloseRangeDuelingCircleMult => _CloseRangeDuelingCircleMult_IsSet ? _recordData.Slice(_CloseRangeDuelingCircleMultLocation, 4).Float() : default(Single);
        #endregion
        #region CloseRangeDuelingFallbackMult
        private int _CloseRangeDuelingFallbackMultLocation => _CSCRLocation!.Value.Min + 0x4;
        private bool _CloseRangeDuelingFallbackMult_IsSet => _CSCRLocation.HasValue;
        public Single CloseRangeDuelingFallbackMult => _CloseRangeDuelingFallbackMult_IsSet ? _recordData.Slice(_CloseRangeDuelingFallbackMultLocation, 4).Float() : default(Single);
        #endregion
        #region CloseRangeFlankDistance
        private int _CloseRangeFlankDistanceLocation => _CSCRLocation!.Value.Min + 0x8;
        private bool _CloseRangeFlankDistance_IsSet => _CSCRLocation.HasValue;
        public Single CloseRangeFlankDistance => _CloseRangeFlankDistance_IsSet ? _recordData.Slice(_CloseRangeFlankDistanceLocation, 4).Float() : default(Single);
        #endregion
        #region CloseRangeFlankingStalkTime
        private int _CloseRangeFlankingStalkTimeLocation => _CSCRLocation!.Value.Min + 0xC;
        private bool _CloseRangeFlankingStalkTime_IsSet => _CSCRLocation.HasValue;
        public Single CloseRangeFlankingStalkTime => _CloseRangeFlankingStalkTime_IsSet ? _recordData.Slice(_CloseRangeFlankingStalkTimeLocation, 4).Float() : default(Single);
        #endregion
        #region CloseRangeChargeDistance
        private int _CloseRangeChargeDistanceLocation => _CSCRLocation!.Value.Min + 0x10;
        private bool _CloseRangeChargeDistance_IsSet => _CSCRLocation.HasValue;
        public Single CloseRangeChargeDistance => _CloseRangeChargeDistance_IsSet ? _recordData.Slice(_CloseRangeChargeDistanceLocation, 4).Float() : default(Single);
        #endregion
        #region CloseRangeChargingThrowProbability
        private int _CloseRangeChargingThrowProbabilityLocation => _CSCRLocation!.Value.Min + 0x14;
        private bool _CloseRangeChargingThrowProbability_IsSet => _CSCRLocation.HasValue;
        public Single CloseRangeChargingThrowProbability => _CloseRangeChargingThrowProbability_IsSet ? _recordData.Slice(_CloseRangeChargingThrowProbabilityLocation, 4).Float() : default(Single);
        #endregion
        #region CloseRangeChargingSprintFastProbability
        private int _CloseRangeChargingSprintFastProbabilityLocation => _CSCRLocation!.Value.Min + 0x18;
        private bool _CloseRangeChargingSprintFastProbability_IsSet => _CSCRLocation.HasValue;
        public Single CloseRangeChargingSprintFastProbability => _CloseRangeChargingSprintFastProbability_IsSet ? _recordData.Slice(_CloseRangeChargingSprintFastProbabilityLocation, 4).Float() : default(Single);
        #endregion
        #region CloseRangeChargingSideswipeProbability
        private int _CloseRangeChargingSideswipeProbabilityLocation => _CSCRLocation!.Value.Min + 0x1C;
        private bool _CloseRangeChargingSideswipeProbability_IsSet => _CSCRLocation.HasValue;
        public Single CloseRangeChargingSideswipeProbability => _CloseRangeChargingSideswipeProbability_IsSet ? _recordData.Slice(_CloseRangeChargingSideswipeProbabilityLocation, 4).Float() : default(Single);
        #endregion
        #region CloseRangeChargingDisengageProbability
        private int _CloseRangeChargingDisengageProbabilityLocation => _CSCRLocation!.Value.Min + 0x20;
        private bool _CloseRangeChargingDisengageProbability_IsSet => _CSCRLocation.HasValue;
        public Single CloseRangeChargingDisengageProbability => _CloseRangeChargingDisengageProbability_IsSet ? _recordData.Slice(_CloseRangeChargingDisengageProbabilityLocation, 4).Float() : default(Single);
        #endregion
        #region CloseRangeChargingThrowMaxTargets
        private int _CloseRangeChargingThrowMaxTargetsLocation => _CSCRLocation!.Value.Min + 0x24;
        private bool _CloseRangeChargingThrowMaxTargets_IsSet => _CSCRLocation.HasValue;
        public UInt32 CloseRangeChargingThrowMaxTargets => _CloseRangeChargingThrowMaxTargets_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_CloseRangeChargingThrowMaxTargetsLocation, 4)) : default(UInt32);
        #endregion
        #region CloseRangeFlankingVariance
        private int _CloseRangeFlankingVarianceLocation => _CSCRLocation!.Value.Min + 0x28;
        private bool _CloseRangeFlankingVariance_IsSet => _CSCRLocation.HasValue;
        public Single CloseRangeFlankingVariance => _CloseRangeFlankingVariance_IsSet ? _recordData.Slice(_CloseRangeFlankingVarianceLocation, 4).Float() : default(Single);
        #endregion
        private RangeInt32? _CSLRLocation;
        public CombatStyle.CSLRDataType CSLRDataTypeState { get; private set; }
        #region LongRangeStrafeMult
        private int _LongRangeStrafeMultLocation => _CSLRLocation!.Value.Min;
        private bool _LongRangeStrafeMult_IsSet => _CSLRLocation.HasValue;
        public Single LongRangeStrafeMult => _LongRangeStrafeMult_IsSet ? _recordData.Slice(_LongRangeStrafeMultLocation, 4).Float() : default(Single);
        #endregion
        #region LongRangeAdjustRangeMult
        private int _LongRangeAdjustRangeMultLocation => _CSLRLocation!.Value.Min + 0x4;
        private bool _LongRangeAdjustRangeMult_IsSet => _CSLRLocation.HasValue;
        public Single LongRangeAdjustRangeMult => _LongRangeAdjustRangeMult_IsSet ? _recordData.Slice(_LongRangeAdjustRangeMultLocation, 4).Float() : default(Single);
        #endregion
        #region LongRangeCrouchMult
        private int _LongRangeCrouchMultLocation => _CSLRLocation!.Value.Min + 0x8;
        private bool _LongRangeCrouchMult_IsSet => _CSLRLocation.HasValue;
        public Single LongRangeCrouchMult => _LongRangeCrouchMult_IsSet ? _recordData.Slice(_LongRangeCrouchMultLocation, 4).Float() : default(Single);
        #endregion
        #region LongRangeWaitMult
        private int _LongRangeWaitMultLocation => _CSLRLocation!.Value.Min + 0xC;
        private bool _LongRangeWaitMult_IsSet => _CSLRLocation.HasValue && !CSLRDataTypeState.HasFlag(CombatStyle.CSLRDataType.Break0);
        public Single LongRangeWaitMult => _LongRangeWaitMult_IsSet ? _recordData.Slice(_LongRangeWaitMultLocation, 4).Float() : default(Single);
        #endregion
        #region LongRangeRangeMult
        private int _LongRangeRangeMultLocation => _CSLRLocation!.Value.Min + 0x10;
        private bool _LongRangeRangeMult_IsSet => _CSLRLocation.HasValue && !CSLRDataTypeState.HasFlag(CombatStyle.CSLRDataType.Break1);
        public Single LongRangeRangeMult => _LongRangeRangeMult_IsSet ? _recordData.Slice(_LongRangeRangeMultLocation, 4).Float() : default(Single);
        #endregion
        #region CoverSearchDistanceMult
        private int? _CoverSearchDistanceMultLocation;
        public Single? CoverSearchDistanceMult => _CoverSearchDistanceMultLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _CoverSearchDistanceMultLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        private RangeInt32? _CSFLLocation;
        #region HoverChance
        private int _HoverChanceLocation => _CSFLLocation!.Value.Min;
        private bool _HoverChance_IsSet => _CSFLLocation.HasValue;
        public Single HoverChance => _HoverChance_IsSet ? _recordData.Slice(_HoverChanceLocation, 4).Float() : default(Single);
        #endregion
        #region DiveBombChance
        private int _DiveBombChanceLocation => _CSFLLocation!.Value.Min + 0x4;
        private bool _DiveBombChance_IsSet => _CSFLLocation.HasValue;
        public Single DiveBombChance => _DiveBombChance_IsSet ? _recordData.Slice(_DiveBombChanceLocation, 4).Float() : default(Single);
        #endregion
        #region GroundAttackChance
        private int _GroundAttackChanceLocation => _CSFLLocation!.Value.Min + 0x8;
        private bool _GroundAttackChance_IsSet => _CSFLLocation.HasValue;
        public Single GroundAttackChance => _GroundAttackChance_IsSet ? _recordData.Slice(_GroundAttackChanceLocation, 4).Float() : default(Single);
        #endregion
        #region HoverTime
        private int _HoverTimeLocation => _CSFLLocation!.Value.Min + 0xC;
        private bool _HoverTime_IsSet => _CSFLLocation.HasValue;
        public Single HoverTime => _HoverTime_IsSet ? _recordData.Slice(_HoverTimeLocation, 4).Float() : default(Single);
        #endregion
        #region GroundAttackTime
        private int _GroundAttackTimeLocation => _CSFLLocation!.Value.Min + 0x10;
        private bool _GroundAttackTime_IsSet => _CSFLLocation.HasValue;
        public Single GroundAttackTime => _GroundAttackTime_IsSet ? _recordData.Slice(_GroundAttackTimeLocation, 4).Float() : default(Single);
        #endregion
        #region PerchAttackChance
        private int _PerchAttackChanceLocation => _CSFLLocation!.Value.Min + 0x14;
        private bool _PerchAttackChance_IsSet => _CSFLLocation.HasValue;
        public Single PerchAttackChance => _PerchAttackChance_IsSet ? _recordData.Slice(_PerchAttackChanceLocation, 4).Float() : default(Single);
        #endregion
        #region PerchAttackTime
        private int _PerchAttackTimeLocation => _CSFLLocation!.Value.Min + 0x18;
        private bool _PerchAttackTime_IsSet => _CSFLLocation.HasValue;
        public Single PerchAttackTime => _PerchAttackTime_IsSet ? _recordData.Slice(_PerchAttackTimeLocation, 4).Float() : default(Single);
        #endregion
        #region FlyingAttackChance
        private int _FlyingAttackChanceLocation => _CSFLLocation!.Value.Min + 0x1C;
        private bool _FlyingAttackChance_IsSet => _CSFLLocation.HasValue;
        public Single FlyingAttackChance => _FlyingAttackChance_IsSet ? _recordData.Slice(_FlyingAttackChanceLocation, 4).Float() : default(Single);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public CombatStyle.Flag? Flags => _FlagsLocation.HasValue ? (CombatStyle.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(CombatStyle.Flag?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CombatStyleBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICombatStyleGetter CombatStyleFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new CombatStyleBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ICombatStyleGetter CombatStyleFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CombatStyleFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CSGD:
                {
                    _CSGDLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.EvadeThreatChance;
                }
                case RecordTypeInts.CSMD:
                {
                    _CSMDLocation = (stream.Position - offset);
                    return (int)CombatStyle_FieldIndex.CSMD;
                }
                case RecordTypeInts.CSME:
                {
                    _CSMELocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x24)
                    {
                        this.CSMEDataTypeState |= CombatStyle.CSMEDataType.Break0;
                    }
                    return (int)CombatStyle_FieldIndex.MeleeAttackWhenStaggeredMult;
                }
                case RecordTypeInts.CSRA:
                {
                    _RangedAccuracyMultLocation = (stream.Position - offset);
                    return (int)CombatStyle_FieldIndex.RangedAccuracyMult;
                }
                case RecordTypeInts.CSCR:
                {
                    _CSCRLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.CloseRangeFlankingVariance;
                }
                case RecordTypeInts.CSLR:
                {
                    _CSLRLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0xC)
                    {
                        this.CSLRDataTypeState |= CombatStyle.CSLRDataType.Break0;
                    }
                    if (subLen <= 0x10)
                    {
                        this.CSLRDataTypeState |= CombatStyle.CSLRDataType.Break1;
                    }
                    return (int)CombatStyle_FieldIndex.LongRangeRangeMult;
                }
                case RecordTypeInts.CSCV:
                {
                    _CoverSearchDistanceMultLocation = (stream.Position - offset);
                    return (int)CombatStyle_FieldIndex.CoverSearchDistanceMult;
                }
                case RecordTypeInts.CSFL:
                {
                    _CSFLLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)CombatStyle_FieldIndex.FlyingAttackChance;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)CombatStyle_FieldIndex.Flags;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CombatStyleMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<CombatStyle>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ICombatStyleGetter rhs) return false;
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICombatStyleGetter? obj)
        {
            return ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CombatStyleCommon)((ICombatStyleGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

