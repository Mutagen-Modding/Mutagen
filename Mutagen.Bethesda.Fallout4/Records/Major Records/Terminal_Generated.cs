/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Terminal :
        Fallout4MajorRecord,
        IEquatable<ITerminalGetter>,
        ILoquiObjectSetter<Terminal>,
        ITerminalInternal
    {
        #region Ctor
        protected Terminal()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapterIndexed? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        public VirtualMachineAdapterIndexed? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterIndexedGetter? ITerminalGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ITerminalGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region PreviewTransform
        private readonly IFormLinkNullable<ITransformGetter> _PreviewTransform = new FormLinkNullable<ITransformGetter>();
        public IFormLinkNullable<ITransformGetter> PreviewTransform
        {
            get => _PreviewTransform;
            set => _PreviewTransform.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITransformGetter> ITerminalGetter.PreviewTransform => this.PreviewTransform;
        #endregion
        #region HeaderText
        public TranslatedString? HeaderText { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITerminalGetter.HeaderText => this.HeaderText;
        #endregion
        #region WelcomeText
        public TranslatedString? WelcomeText { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITerminalGetter.WelcomeText => this.WelcomeText;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITerminalGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ITerminalGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? ITerminalGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectProperty>? _Properties;
        public ExtendedList<ObjectProperty>? Properties
        {
            get => this._Properties;
            set => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectPropertyGetter>? ITerminalGetter.Properties => _Properties;
        #endregion

        #endregion
        #region PNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _PNAM;
        public MemorySlice<Byte>? PNAM
        {
            get => this._PNAM;
            set => this._PNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ITerminalGetter.PNAM => this.PNAM;
        #endregion
        #region LoopingSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _LoopingSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> LoopingSound
        {
            get => _LoopingSound;
            set => _LoopingSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> ITerminalGetter.LoopingSound => this.LoopingSound;
        #endregion
        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FNAM;
        public MemorySlice<Byte>? FNAM
        {
            get => this._FNAM;
            set => this._FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ITerminalGetter.FNAM => this.FNAM;
        #endregion
        #region Holotapes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TerminalHolotapeEntry>? _Holotapes;
        public ExtendedList<TerminalHolotapeEntry>? Holotapes
        {
            get => this._Holotapes;
            set => this._Holotapes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITerminalHolotapeEntryGetter>? ITerminalGetter.Holotapes => _Holotapes;
        #endregion

        #endregion
        #region Flags
        public Terminal.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Terminal.Flag? ITerminalGetter.Flags => this.Flags;
        #endregion
        #region WorkbenchData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _WorkbenchData;
        public MemorySlice<Byte>? WorkbenchData
        {
            get => this._WorkbenchData;
            set => this._WorkbenchData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ITerminalGetter.WorkbenchData => this.WorkbenchData;
        #endregion
        #region MarkerModel
        public String? MarkerModel { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITerminalGetter.MarkerModel => this.MarkerModel;
        #endregion
        #region MarkerParameters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FurnitureMarkerParameters>? _MarkerParameters;
        public ExtendedList<FurnitureMarkerParameters>? MarkerParameters
        {
            get => this._MarkerParameters;
            set => this._MarkerParameters = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFurnitureMarkerParametersGetter>? ITerminalGetter.MarkerParameters => _MarkerParameters;
        #endregion

        #endregion
        #region BodyTexts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TerminalBodyText>? _BodyTexts;
        public ExtendedList<TerminalBodyText>? BodyTexts
        {
            get => this._BodyTexts;
            set => this._BodyTexts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITerminalBodyTextGetter>? ITerminalGetter.BodyTexts => _BodyTexts;
        #endregion

        #endregion
        #region MenuItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TerminalMenuItem>? _MenuItems;
        public ExtendedList<TerminalMenuItem>? MenuItems
        {
            get => this._MenuItems;
            set => this._MenuItems = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITerminalMenuItemGetter>? ITerminalGetter.MenuItems => _MenuItems;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TerminalMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapterIndexed.Mask<TItem>?>(initialValue, new VirtualMachineAdapterIndexed.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.PreviewTransform = initialValue;
                this.HeaderText = initialValue;
                this.WelcomeText = initialValue;
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.PNAM = initialValue;
                this.LoopingSound = initialValue;
                this.FNAM = initialValue;
                this.Holotapes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalHolotapeEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TerminalHolotapeEntry.Mask<TItem>?>>());
                this.Flags = initialValue;
                this.WorkbenchData = initialValue;
                this.MarkerModel = initialValue;
                this.MarkerParameters = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>());
                this.BodyTexts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalBodyText.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TerminalBodyText.Mask<TItem>?>>());
                this.MenuItems = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalMenuItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TerminalMenuItem.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem PreviewTransform,
                TItem HeaderText,
                TItem WelcomeText,
                TItem Name,
                TItem Model,
                TItem Keywords,
                TItem Properties,
                TItem PNAM,
                TItem LoopingSound,
                TItem FNAM,
                TItem Holotapes,
                TItem Flags,
                TItem WorkbenchData,
                TItem MarkerModel,
                TItem MarkerParameters,
                TItem BodyTexts,
                TItem MenuItems)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapterIndexed.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapterIndexed.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.PreviewTransform = PreviewTransform;
                this.HeaderText = HeaderText;
                this.WelcomeText = WelcomeText;
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.PNAM = PNAM;
                this.LoopingSound = LoopingSound;
                this.FNAM = FNAM;
                this.Holotapes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalHolotapeEntry.Mask<TItem>?>>?>(Holotapes, Enumerable.Empty<MaskItemIndexed<TItem, TerminalHolotapeEntry.Mask<TItem>?>>());
                this.Flags = Flags;
                this.WorkbenchData = WorkbenchData;
                this.MarkerModel = MarkerModel;
                this.MarkerParameters = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>?>(MarkerParameters, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>());
                this.BodyTexts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalBodyText.Mask<TItem>?>>?>(BodyTexts, Enumerable.Empty<MaskItemIndexed<TItem, TerminalBodyText.Mask<TItem>?>>());
                this.MenuItems = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalMenuItem.Mask<TItem>?>>?>(MenuItems, Enumerable.Empty<MaskItemIndexed<TItem, TerminalMenuItem.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapterIndexed.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem PreviewTransform;
            public TItem HeaderText;
            public TItem WelcomeText;
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>? Properties;
            public TItem PNAM;
            public TItem LoopingSound;
            public TItem FNAM;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalHolotapeEntry.Mask<TItem>?>>?>? Holotapes;
            public TItem Flags;
            public TItem WorkbenchData;
            public TItem MarkerModel;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>?>? MarkerParameters;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalBodyText.Mask<TItem>?>>?>? BodyTexts;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TerminalMenuItem.Mask<TItem>?>>?>? MenuItems;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.PreviewTransform, rhs.PreviewTransform)) return false;
                if (!object.Equals(this.HeaderText, rhs.HeaderText)) return false;
                if (!object.Equals(this.WelcomeText, rhs.WelcomeText)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.PNAM, rhs.PNAM)) return false;
                if (!object.Equals(this.LoopingSound, rhs.LoopingSound)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.Holotapes, rhs.Holotapes)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.WorkbenchData, rhs.WorkbenchData)) return false;
                if (!object.Equals(this.MarkerModel, rhs.MarkerModel)) return false;
                if (!object.Equals(this.MarkerParameters, rhs.MarkerParameters)) return false;
                if (!object.Equals(this.BodyTexts, rhs.BodyTexts)) return false;
                if (!object.Equals(this.MenuItems, rhs.MenuItems)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.PreviewTransform);
                hash.Add(this.HeaderText);
                hash.Add(this.WelcomeText);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Keywords);
                hash.Add(this.Properties);
                hash.Add(this.PNAM);
                hash.Add(this.LoopingSound);
                hash.Add(this.FNAM);
                hash.Add(this.Holotapes);
                hash.Add(this.Flags);
                hash.Add(this.WorkbenchData);
                hash.Add(this.MarkerModel);
                hash.Add(this.MarkerParameters);
                hash.Add(this.BodyTexts);
                hash.Add(this.MenuItems);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.PreviewTransform)) return false;
                if (!eval(this.HeaderText)) return false;
                if (!eval(this.WelcomeText)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.PNAM)) return false;
                if (!eval(this.LoopingSound)) return false;
                if (!eval(this.FNAM)) return false;
                if (this.Holotapes != null)
                {
                    if (!eval(this.Holotapes.Overall)) return false;
                    if (this.Holotapes.Specific != null)
                    {
                        foreach (var item in this.Holotapes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.WorkbenchData)) return false;
                if (!eval(this.MarkerModel)) return false;
                if (this.MarkerParameters != null)
                {
                    if (!eval(this.MarkerParameters.Overall)) return false;
                    if (this.MarkerParameters.Specific != null)
                    {
                        foreach (var item in this.MarkerParameters.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.BodyTexts != null)
                {
                    if (!eval(this.BodyTexts.Overall)) return false;
                    if (this.BodyTexts.Specific != null)
                    {
                        foreach (var item in this.BodyTexts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MenuItems != null)
                {
                    if (!eval(this.MenuItems.Overall)) return false;
                    if (this.MenuItems.Specific != null)
                    {
                        foreach (var item in this.MenuItems.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.PreviewTransform)) return true;
                if (eval(this.HeaderText)) return true;
                if (eval(this.WelcomeText)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.PNAM)) return true;
                if (eval(this.LoopingSound)) return true;
                if (eval(this.FNAM)) return true;
                if (this.Holotapes != null)
                {
                    if (eval(this.Holotapes.Overall)) return true;
                    if (this.Holotapes.Specific != null)
                    {
                        foreach (var item in this.Holotapes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Flags)) return true;
                if (eval(this.WorkbenchData)) return true;
                if (eval(this.MarkerModel)) return true;
                if (this.MarkerParameters != null)
                {
                    if (eval(this.MarkerParameters.Overall)) return true;
                    if (this.MarkerParameters.Specific != null)
                    {
                        foreach (var item in this.MarkerParameters.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.BodyTexts != null)
                {
                    if (eval(this.BodyTexts.Overall)) return true;
                    if (this.BodyTexts.Specific != null)
                    {
                        foreach (var item in this.BodyTexts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MenuItems != null)
                {
                    if (eval(this.MenuItems.Overall)) return true;
                    if (this.MenuItems.Specific != null)
                    {
                        foreach (var item in this.MenuItems.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Terminal.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapterIndexed.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.PreviewTransform = eval(this.PreviewTransform);
                obj.HeaderText = eval(this.HeaderText);
                obj.WelcomeText = eval(this.WelcomeText);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, ObjectProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.PNAM = eval(this.PNAM);
                obj.LoopingSound = eval(this.LoopingSound);
                obj.FNAM = eval(this.FNAM);
                if (Holotapes != null)
                {
                    obj.Holotapes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TerminalHolotapeEntry.Mask<R>?>>?>(eval(this.Holotapes.Overall), Enumerable.Empty<MaskItemIndexed<R, TerminalHolotapeEntry.Mask<R>?>>());
                    if (Holotapes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TerminalHolotapeEntry.Mask<R>?>>();
                        obj.Holotapes.Specific = l;
                        foreach (var item in Holotapes.Specific)
                        {
                            MaskItemIndexed<R, TerminalHolotapeEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, TerminalHolotapeEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Flags = eval(this.Flags);
                obj.WorkbenchData = eval(this.WorkbenchData);
                obj.MarkerModel = eval(this.MarkerModel);
                if (MarkerParameters != null)
                {
                    obj.MarkerParameters = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>>?>(eval(this.MarkerParameters.Overall), Enumerable.Empty<MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>>());
                    if (MarkerParameters.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>>();
                        obj.MarkerParameters.Specific = l;
                        foreach (var item in MarkerParameters.Specific)
                        {
                            MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (BodyTexts != null)
                {
                    obj.BodyTexts = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TerminalBodyText.Mask<R>?>>?>(eval(this.BodyTexts.Overall), Enumerable.Empty<MaskItemIndexed<R, TerminalBodyText.Mask<R>?>>());
                    if (BodyTexts.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TerminalBodyText.Mask<R>?>>();
                        obj.BodyTexts.Specific = l;
                        foreach (var item in BodyTexts.Specific)
                        {
                            MaskItemIndexed<R, TerminalBodyText.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, TerminalBodyText.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (MenuItems != null)
                {
                    obj.MenuItems = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TerminalMenuItem.Mask<R>?>>?>(eval(this.MenuItems.Overall), Enumerable.Empty<MaskItemIndexed<R, TerminalMenuItem.Mask<R>?>>());
                    if (MenuItems.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TerminalMenuItem.Mask<R>?>>();
                        obj.MenuItems.Specific = l;
                        foreach (var item in MenuItems.Specific)
                        {
                            MaskItemIndexed<R, TerminalMenuItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, TerminalMenuItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Terminal.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Terminal.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Terminal.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.PreviewTransform ?? true)
                    {
                        sb.AppendItem(PreviewTransform, "PreviewTransform");
                    }
                    if (printMask?.HeaderText ?? true)
                    {
                        sb.AppendItem(HeaderText, "HeaderText");
                    }
                    if (printMask?.WelcomeText ?? true)
                    {
                        sb.AppendItem(WelcomeText, "WelcomeText");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        sb.AppendLine("Properties =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.PNAM ?? true)
                    {
                        sb.AppendItem(PNAM, "PNAM");
                    }
                    if (printMask?.LoopingSound ?? true)
                    {
                        sb.AppendItem(LoopingSound, "LoopingSound");
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        sb.AppendItem(FNAM, "FNAM");
                    }
                    if ((printMask?.Holotapes?.Overall ?? true)
                        && Holotapes is {} HolotapesItem)
                    {
                        sb.AppendLine("Holotapes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(HolotapesItem.Overall);
                            if (HolotapesItem.Specific != null)
                            {
                                foreach (var subItem in HolotapesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.WorkbenchData ?? true)
                    {
                        sb.AppendItem(WorkbenchData, "WorkbenchData");
                    }
                    if (printMask?.MarkerModel ?? true)
                    {
                        sb.AppendItem(MarkerModel, "MarkerModel");
                    }
                    if ((printMask?.MarkerParameters?.Overall ?? true)
                        && MarkerParameters is {} MarkerParametersItem)
                    {
                        sb.AppendLine("MarkerParameters =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MarkerParametersItem.Overall);
                            if (MarkerParametersItem.Specific != null)
                            {
                                foreach (var subItem in MarkerParametersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.BodyTexts?.Overall ?? true)
                        && BodyTexts is {} BodyTextsItem)
                    {
                        sb.AppendLine("BodyTexts =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(BodyTextsItem.Overall);
                            if (BodyTextsItem.Specific != null)
                            {
                                foreach (var subItem in BodyTextsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MenuItems?.Overall ?? true)
                        && MenuItems is {} MenuItemsItem)
                    {
                        sb.AppendLine("MenuItems =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MenuItemsItem.Overall);
                            if (MenuItemsItem.Specific != null)
                            {
                                foreach (var subItem in MenuItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapterIndexed.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? PreviewTransform;
            public Exception? HeaderText;
            public Exception? WelcomeText;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>? Properties;
            public Exception? PNAM;
            public Exception? LoopingSound;
            public Exception? FNAM;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalHolotapeEntry.ErrorMask?>>?>? Holotapes;
            public Exception? Flags;
            public Exception? WorkbenchData;
            public Exception? MarkerModel;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>? MarkerParameters;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalBodyText.ErrorMask?>>?>? BodyTexts;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalMenuItem.ErrorMask?>>?>? MenuItems;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Terminal_FieldIndex enu = (Terminal_FieldIndex)index;
                switch (enu)
                {
                    case Terminal_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Terminal_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Terminal_FieldIndex.PreviewTransform:
                        return PreviewTransform;
                    case Terminal_FieldIndex.HeaderText:
                        return HeaderText;
                    case Terminal_FieldIndex.WelcomeText:
                        return WelcomeText;
                    case Terminal_FieldIndex.Name:
                        return Name;
                    case Terminal_FieldIndex.Model:
                        return Model;
                    case Terminal_FieldIndex.Keywords:
                        return Keywords;
                    case Terminal_FieldIndex.Properties:
                        return Properties;
                    case Terminal_FieldIndex.PNAM:
                        return PNAM;
                    case Terminal_FieldIndex.LoopingSound:
                        return LoopingSound;
                    case Terminal_FieldIndex.FNAM:
                        return FNAM;
                    case Terminal_FieldIndex.Holotapes:
                        return Holotapes;
                    case Terminal_FieldIndex.Flags:
                        return Flags;
                    case Terminal_FieldIndex.WorkbenchData:
                        return WorkbenchData;
                    case Terminal_FieldIndex.MarkerModel:
                        return MarkerModel;
                    case Terminal_FieldIndex.MarkerParameters:
                        return MarkerParameters;
                    case Terminal_FieldIndex.BodyTexts:
                        return BodyTexts;
                    case Terminal_FieldIndex.MenuItems:
                        return MenuItems;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Terminal_FieldIndex enu = (Terminal_FieldIndex)index;
                switch (enu)
                {
                    case Terminal_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapterIndexed.ErrorMask?>(ex, null);
                        break;
                    case Terminal_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Terminal_FieldIndex.PreviewTransform:
                        this.PreviewTransform = ex;
                        break;
                    case Terminal_FieldIndex.HeaderText:
                        this.HeaderText = ex;
                        break;
                    case Terminal_FieldIndex.WelcomeText:
                        this.WelcomeText = ex;
                        break;
                    case Terminal_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Terminal_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Terminal_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Terminal_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(ex, null);
                        break;
                    case Terminal_FieldIndex.PNAM:
                        this.PNAM = ex;
                        break;
                    case Terminal_FieldIndex.LoopingSound:
                        this.LoopingSound = ex;
                        break;
                    case Terminal_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case Terminal_FieldIndex.Holotapes:
                        this.Holotapes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalHolotapeEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case Terminal_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Terminal_FieldIndex.WorkbenchData:
                        this.WorkbenchData = ex;
                        break;
                    case Terminal_FieldIndex.MarkerModel:
                        this.MarkerModel = ex;
                        break;
                    case Terminal_FieldIndex.MarkerParameters:
                        this.MarkerParameters = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>(ex, null);
                        break;
                    case Terminal_FieldIndex.BodyTexts:
                        this.BodyTexts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalBodyText.ErrorMask?>>?>(ex, null);
                        break;
                    case Terminal_FieldIndex.MenuItems:
                        this.MenuItems = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalMenuItem.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Terminal_FieldIndex enu = (Terminal_FieldIndex)index;
                switch (enu)
                {
                    case Terminal_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapterIndexed.ErrorMask?>?)obj;
                        break;
                    case Terminal_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Terminal_FieldIndex.PreviewTransform:
                        this.PreviewTransform = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.HeaderText:
                        this.HeaderText = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.WelcomeText:
                        this.WelcomeText = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Terminal_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Terminal_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>)obj;
                        break;
                    case Terminal_FieldIndex.PNAM:
                        this.PNAM = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.LoopingSound:
                        this.LoopingSound = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.Holotapes:
                        this.Holotapes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalHolotapeEntry.ErrorMask?>>?>)obj;
                        break;
                    case Terminal_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.WorkbenchData:
                        this.WorkbenchData = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.MarkerModel:
                        this.MarkerModel = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.MarkerParameters:
                        this.MarkerParameters = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>)obj;
                        break;
                    case Terminal_FieldIndex.BodyTexts:
                        this.BodyTexts = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalBodyText.ErrorMask?>>?>)obj;
                        break;
                    case Terminal_FieldIndex.MenuItems:
                        this.MenuItems = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalMenuItem.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (PreviewTransform != null) return true;
                if (HeaderText != null) return true;
                if (WelcomeText != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Keywords != null) return true;
                if (Properties != null) return true;
                if (PNAM != null) return true;
                if (LoopingSound != null) return true;
                if (FNAM != null) return true;
                if (Holotapes != null) return true;
                if (Flags != null) return true;
                if (WorkbenchData != null) return true;
                if (MarkerModel != null) return true;
                if (MarkerParameters != null) return true;
                if (BodyTexts != null) return true;
                if (MenuItems != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(PreviewTransform, "PreviewTransform");
                }
                {
                    sb.AppendItem(HeaderText, "HeaderText");
                }
                {
                    sb.AppendItem(WelcomeText, "WelcomeText");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                Model?.Print(sb);
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Properties is {} PropertiesItem)
                {
                    sb.AppendLine("Properties =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(PNAM, "PNAM");
                }
                {
                    sb.AppendItem(LoopingSound, "LoopingSound");
                }
                {
                    sb.AppendItem(FNAM, "FNAM");
                }
                if (Holotapes is {} HolotapesItem)
                {
                    sb.AppendLine("Holotapes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(HolotapesItem.Overall);
                        if (HolotapesItem.Specific != null)
                        {
                            foreach (var subItem in HolotapesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(WorkbenchData, "WorkbenchData");
                }
                {
                    sb.AppendItem(MarkerModel, "MarkerModel");
                }
                if (MarkerParameters is {} MarkerParametersItem)
                {
                    sb.AppendLine("MarkerParameters =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MarkerParametersItem.Overall);
                        if (MarkerParametersItem.Specific != null)
                        {
                            foreach (var subItem in MarkerParametersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (BodyTexts is {} BodyTextsItem)
                {
                    sb.AppendLine("BodyTexts =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(BodyTextsItem.Overall);
                        if (BodyTextsItem.Specific != null)
                        {
                            foreach (var subItem in BodyTextsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (MenuItems is {} MenuItemsItem)
                {
                    sb.AppendLine("MenuItems =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MenuItemsItem.Overall);
                        if (MenuItemsItem.Specific != null)
                        {
                            foreach (var subItem in MenuItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.PreviewTransform = this.PreviewTransform.Combine(rhs.PreviewTransform);
                ret.HeaderText = this.HeaderText.Combine(rhs.HeaderText);
                ret.WelcomeText = this.WelcomeText.Combine(rhs.WelcomeText);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), Noggog.ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                ret.PNAM = this.PNAM.Combine(rhs.PNAM);
                ret.LoopingSound = this.LoopingSound.Combine(rhs.LoopingSound);
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.Holotapes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalHolotapeEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Holotapes?.Overall, rhs.Holotapes?.Overall), Noggog.ExceptionExt.Combine(this.Holotapes?.Specific, rhs.Holotapes?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.WorkbenchData = this.WorkbenchData.Combine(rhs.WorkbenchData);
                ret.MarkerModel = this.MarkerModel.Combine(rhs.MarkerModel);
                ret.MarkerParameters = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MarkerParameters?.Overall, rhs.MarkerParameters?.Overall), Noggog.ExceptionExt.Combine(this.MarkerParameters?.Specific, rhs.MarkerParameters?.Specific));
                ret.BodyTexts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalBodyText.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.BodyTexts?.Overall, rhs.BodyTexts?.Overall), Noggog.ExceptionExt.Combine(this.BodyTexts?.Specific, rhs.BodyTexts?.Specific));
                ret.MenuItems = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TerminalMenuItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MenuItems?.Overall, rhs.MenuItems?.Overall), Noggog.ExceptionExt.Combine(this.MenuItems?.Specific, rhs.MenuItems?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapterIndexed.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool PreviewTransform;
            public bool HeaderText;
            public bool WelcomeText;
            public bool Name;
            public Model.TranslationMask? Model;
            public bool Keywords;
            public ObjectProperty.TranslationMask? Properties;
            public bool PNAM;
            public bool LoopingSound;
            public bool FNAM;
            public TerminalHolotapeEntry.TranslationMask? Holotapes;
            public bool Flags;
            public bool WorkbenchData;
            public bool MarkerModel;
            public FurnitureMarkerParameters.TranslationMask? MarkerParameters;
            public TerminalBodyText.TranslationMask? BodyTexts;
            public TerminalMenuItem.TranslationMask? MenuItems;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.PreviewTransform = defaultOn;
                this.HeaderText = defaultOn;
                this.WelcomeText = defaultOn;
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.PNAM = defaultOn;
                this.LoopingSound = defaultOn;
                this.FNAM = defaultOn;
                this.Flags = defaultOn;
                this.WorkbenchData = defaultOn;
                this.MarkerModel = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((PreviewTransform, null));
                ret.Add((HeaderText, null));
                ret.Add((WelcomeText, null));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
                ret.Add((PNAM, null));
                ret.Add((LoopingSound, null));
                ret.Add((FNAM, null));
                ret.Add((Holotapes == null ? DefaultOn : !Holotapes.GetCrystal().CopyNothing, Holotapes?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((WorkbenchData, null));
                ret.Add((MarkerModel, null));
                ret.Add((MarkerParameters == null ? DefaultOn : !MarkerParameters.GetCrystal().CopyNothing, MarkerParameters?.GetCrystal()));
                ret.Add((BodyTexts == null ? DefaultOn : !BodyTexts.GetCrystal().CopyNothing, BodyTexts?.GetCrystal()));
                ret.Add((MenuItems == null ? DefaultOn : !MenuItems.GetCrystal().CopyNothing, MenuItems?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Terminal_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TerminalCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TerminalSetterCommon.Instance.RemapLinks(this, mapping);
        public Terminal(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Terminal(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Terminal(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Terminal(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Terminal(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Terminal>.ToString(this);
        }

        protected override Type LinkType => typeof(ITerminal);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITerminalGetter rhs) return false;
            return ((TerminalCommon)((ITerminalGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITerminalGetter? obj)
        {
            return ((TerminalCommon)((ITerminalGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TerminalCommon)((ITerminalGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TerminalBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TerminalBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Terminal CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Terminal();
            ((TerminalSetterCommon)((ITerminalGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Terminal item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TerminalSetterCommon)((ITerminalGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Terminal GetNew()
        {
            return new Terminal();
        }

    }
    #endregion

    #region Interface
    public partial interface ITerminal :
        IConstructibleObjectTarget,
        IExplodeSpawn,
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<ITerminalInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IPlaceableObject,
        IReferenceableObject,
        IStaticTarget,
        ITerminalGetter,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        new VirtualMachineAdapterIndexed? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new IFormLinkNullable<ITransformGetter> PreviewTransform { get; set; }
        new TranslatedString? HeaderText { get; set; }
        new TranslatedString? WelcomeText { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<ObjectProperty>? Properties { get; set; }
        new MemorySlice<Byte>? PNAM { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> LoopingSound { get; set; }
        new MemorySlice<Byte>? FNAM { get; set; }
        new ExtendedList<TerminalHolotapeEntry>? Holotapes { get; set; }
        new Terminal.Flag? Flags { get; set; }
        new MemorySlice<Byte>? WorkbenchData { get; set; }
        new String? MarkerModel { get; set; }
        new ExtendedList<FurnitureMarkerParameters>? MarkerParameters { get; set; }
        new ExtendedList<TerminalBodyText>? BodyTexts { get; set; }
        new ExtendedList<TerminalMenuItem>? MenuItems { get; set; }
        #region Mutagen
        new Terminal.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ITerminalInternal :
        IFallout4MajorRecordInternal,
        ITerminal,
        ITerminalGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.TERM)]
    public partial interface ITerminalGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IConstructibleObjectTargetGetter,
        IExplodeSpawnGetter,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<ITerminalGetter>,
        IMapsToGetter<ITerminalGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IPlaceableObjectGetter,
        IReferenceableObjectGetter,
        IStaticTargetGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Terminal_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter
        /// </summary>
        IVirtualMachineAdapterIndexedGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        IFormLinkNullableGetter<ITransformGetter> PreviewTransform { get; }
        ITranslatedStringGetter? HeaderText { get; }
        ITranslatedStringGetter? WelcomeText { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IReadOnlyList<IObjectPropertyGetter>? Properties { get; }
        ReadOnlyMemorySlice<Byte>? PNAM { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> LoopingSound { get; }
        ReadOnlyMemorySlice<Byte>? FNAM { get; }
        IReadOnlyList<ITerminalHolotapeEntryGetter>? Holotapes { get; }
        Terminal.Flag? Flags { get; }
        ReadOnlyMemorySlice<Byte>? WorkbenchData { get; }
        String? MarkerModel { get; }
        IReadOnlyList<IFurnitureMarkerParametersGetter>? MarkerParameters { get; }
        IReadOnlyList<ITerminalBodyTextGetter>? BodyTexts { get; }
        IReadOnlyList<ITerminalMenuItemGetter>? MenuItems { get; }

        #region Mutagen
        Terminal.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class TerminalMixIn
    {
        public static void Clear(this ITerminalInternal item)
        {
            ((TerminalSetterCommon)((ITerminalGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Terminal.Mask<bool> GetEqualsMask(
            this ITerminalGetter item,
            ITerminalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITerminalGetter item,
            string? name = null,
            Terminal.Mask<bool>? printMask = null)
        {
            return ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITerminalGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Terminal.Mask<bool>? printMask = null)
        {
            ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITerminalGetter item,
            ITerminalGetter rhs,
            Terminal.TranslationMask? equalsMask = null)
        {
            return ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITerminalInternal lhs,
            ITerminalGetter rhs,
            out Terminal.ErrorMask errorMask,
            Terminal.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TerminalSetterTranslationCommon)((ITerminalGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Terminal.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITerminalInternal lhs,
            ITerminalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TerminalSetterTranslationCommon)((ITerminalGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Terminal DeepCopy(
            this ITerminalGetter item,
            Terminal.TranslationMask? copyMask = null)
        {
            return ((TerminalSetterTranslationCommon)((ITerminalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Terminal DeepCopy(
            this ITerminalGetter item,
            out Terminal.ErrorMask errorMask,
            Terminal.TranslationMask? copyMask = null)
        {
            return ((TerminalSetterTranslationCommon)((ITerminalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Terminal DeepCopy(
            this ITerminalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TerminalSetterTranslationCommon)((ITerminalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Terminal Duplicate(
            this ITerminalGetter item,
            FormKey formKey,
            Terminal.TranslationMask? copyMask = null)
        {
            return ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Terminal Duplicate(
            this ITerminalGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITerminalInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TerminalSetterCommon)((ITerminalGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum Terminal_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        PreviewTransform = 9,
        HeaderText = 10,
        WelcomeText = 11,
        Name = 12,
        Model = 13,
        Keywords = 14,
        Properties = 15,
        PNAM = 16,
        LoopingSound = 17,
        FNAM = 18,
        Holotapes = 19,
        Flags = 20,
        WorkbenchData = 21,
        MarkerModel = 22,
        MarkerParameters = 23,
        BodyTexts = 24,
        MenuItems = 25,
    }
    #endregion

    #region Registration
    internal partial class Terminal_Registration : ILoquiRegistration
    {
        public static readonly Terminal_Registration Instance = new Terminal_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 19;

        public const ushort FieldCount = 26;

        public static readonly Type MaskType = typeof(Terminal.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Terminal.ErrorMask);

        public static readonly Type ClassType = typeof(Terminal);

        public static readonly Type GetterType = typeof(ITerminalGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITerminal);

        public static readonly Type? InternalSetterType = typeof(ITerminalInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Terminal";

        public const string Name = "Terminal";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TERM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TERM);
            var all = RecordCollection.Factory(
                RecordTypes.TERM,
                RecordTypes.MNAM,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.PTRN,
                RecordTypes.NAM0,
                RecordTypes.WNAM,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.MODC,
                RecordTypes.MODT,
                RecordTypes.MODS,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.PRPS,
                RecordTypes.PNAM,
                RecordTypes.FNAM,
                RecordTypes.CNTO,
                RecordTypes.COCT,
                RecordTypes.WBDT,
                RecordTypes.XMRK,
                RecordTypes.SNAM,
                RecordTypes.BSIZ,
                RecordTypes.BTXT,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.ISIZ,
                RecordTypes.ITXT,
                RecordTypes.RNAM,
                RecordTypes.ANAM,
                RecordTypes.ITID,
                RecordTypes.UNAM,
                RecordTypes.VNAM,
                RecordTypes.TNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TerminalBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TerminalSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly TerminalSetterCommon Instance = new TerminalSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITerminalInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.PreviewTransform.Clear();
            item.HeaderText = default;
            item.WelcomeText = default;
            item.Name = default;
            item.Model = null;
            item.Keywords = null;
            item.Properties = null;
            item.PNAM = default;
            item.LoopingSound.Clear();
            item.FNAM = default;
            item.Holotapes = null;
            item.Flags = default;
            item.WorkbenchData = default;
            item.MarkerModel = default;
            item.MarkerParameters = null;
            item.BodyTexts = null;
            item.MenuItems = null;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ITerminalInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITerminalInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ITerminal obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.PreviewTransform.Relink(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Properties?.RemapLinks(mapping);
            obj.LoopingSound.Relink(mapping);
            obj.Holotapes?.RemapLinks(mapping);
            obj.MarkerParameters?.RemapLinks(mapping);
            obj.BodyTexts?.RemapLinks(mapping);
            obj.MenuItems?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITerminalInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ITerminalInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TerminalBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TerminalBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Terminal)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Terminal)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class TerminalCommon : Fallout4MajorRecordCommon
    {
        public new static readonly TerminalCommon Instance = new TerminalCommon();

        public Terminal.Mask<bool> GetEqualsMask(
            ITerminalGetter item,
            ITerminalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Terminal.Mask<bool>(false);
            ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITerminalGetter item,
            ITerminalGetter rhs,
            Terminal.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.PreviewTransform = item.PreviewTransform.Equals(rhs.PreviewTransform);
            ret.HeaderText = object.Equals(item.HeaderText, rhs.HeaderText);
            ret.WelcomeText = object.Equals(item.WelcomeText, rhs.WelcomeText);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.PNAM = MemorySliceExt.SequenceEqual(item.PNAM, rhs.PNAM);
            ret.LoopingSound = item.LoopingSound.Equals(rhs.LoopingSound);
            ret.FNAM = MemorySliceExt.SequenceEqual(item.FNAM, rhs.FNAM);
            ret.Holotapes = item.Holotapes.CollectionEqualsHelper(
                rhs.Holotapes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.WorkbenchData = MemorySliceExt.SequenceEqual(item.WorkbenchData, rhs.WorkbenchData);
            ret.MarkerModel = string.Equals(item.MarkerModel, rhs.MarkerModel);
            ret.MarkerParameters = item.MarkerParameters.CollectionEqualsHelper(
                rhs.MarkerParameters,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BodyTexts = item.BodyTexts.CollectionEqualsHelper(
                rhs.BodyTexts,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MenuItems = item.MenuItems.CollectionEqualsHelper(
                rhs.MenuItems,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ITerminalGetter item,
            string? name = null,
            Terminal.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITerminalGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Terminal.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Terminal =>");
            }
            else
            {
                sb.AppendLine($"{name} (Terminal) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITerminalGetter item,
            StructuredStringBuilder sb,
            Terminal.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if (printMask?.PreviewTransform ?? true)
            {
                sb.AppendItem(item.PreviewTransform.FormKeyNullable, "PreviewTransform");
            }
            if ((printMask?.HeaderText ?? true)
                && item.HeaderText is {} HeaderTextItem)
            {
                sb.AppendItem(HeaderTextItem, "HeaderText");
            }
            if ((printMask?.WelcomeText ?? true)
                && item.WelcomeText is {} WelcomeTextItem)
            {
                sb.AppendItem(WelcomeTextItem, "WelcomeText");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Properties?.Overall ?? true)
                && item.Properties is {} PropertiesItem)
            {
                sb.AppendLine("Properties =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PropertiesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.PNAM ?? true)
                && item.PNAM is {} PNAMItem)
            {
                sb.AppendLine($"PNAM => {SpanExt.ToHexString(PNAMItem)}");
            }
            if (printMask?.LoopingSound ?? true)
            {
                sb.AppendItem(item.LoopingSound.FormKeyNullable, "LoopingSound");
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM is {} FNAMItem)
            {
                sb.AppendLine($"FNAM => {SpanExt.ToHexString(FNAMItem)}");
            }
            if ((printMask?.Holotapes?.Overall ?? true)
                && item.Holotapes is {} HolotapesItem)
            {
                sb.AppendLine("Holotapes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in HolotapesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.WorkbenchData ?? true)
                && item.WorkbenchData is {} WorkbenchDataItem)
            {
                sb.AppendLine($"WorkbenchData => {SpanExt.ToHexString(WorkbenchDataItem)}");
            }
            if ((printMask?.MarkerModel ?? true)
                && item.MarkerModel is {} MarkerModelItem)
            {
                sb.AppendItem(MarkerModelItem, "MarkerModel");
            }
            if ((printMask?.MarkerParameters?.Overall ?? true)
                && item.MarkerParameters is {} MarkerParametersItem)
            {
                sb.AppendLine("MarkerParameters =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MarkerParametersItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.BodyTexts?.Overall ?? true)
                && item.BodyTexts is {} BodyTextsItem)
            {
                sb.AppendLine("BodyTexts =>");
                using (sb.Brace())
                {
                    foreach (var subItem in BodyTextsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.MenuItems?.Overall ?? true)
                && item.MenuItems is {} MenuItemsItem)
            {
                sb.AppendLine("MenuItems =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MenuItemsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static Terminal_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Terminal_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Terminal_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Terminal_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Terminal_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Terminal_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Terminal_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (Terminal_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Terminal_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Terminal_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Terminal_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Terminal_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Terminal_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITerminalGetter? lhs,
            ITerminalGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterIndexedCommon)((IVirtualMachineAdapterIndexedGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.PreviewTransform) ?? true))
            {
                if (!lhs.PreviewTransform.Equals(rhs.PreviewTransform)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.HeaderText) ?? true))
            {
                if (!object.Equals(lhs.HeaderText, rhs.HeaderText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.WelcomeText) ?? true))
            {
                if (!object.Equals(lhs.WelcomeText, rhs.WelcomeText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqualNullable(rhs.Properties, (l, r) => ((ObjectPropertyCommon)((IObjectPropertyGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.Properties)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.PNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.PNAM, rhs.PNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.LoopingSound) ?? true))
            {
                if (!lhs.LoopingSound.Equals(rhs.LoopingSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.FNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FNAM, rhs.FNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Holotapes) ?? true))
            {
                if (!lhs.Holotapes.SequenceEqualNullable(rhs.Holotapes, (l, r) => ((TerminalHolotapeEntryCommon)((ITerminalHolotapeEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.Holotapes)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.WorkbenchData) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.WorkbenchData, rhs.WorkbenchData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.MarkerModel) ?? true))
            {
                if (!string.Equals(lhs.MarkerModel, rhs.MarkerModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.MarkerParameters) ?? true))
            {
                if (!lhs.MarkerParameters.SequenceEqualNullable(rhs.MarkerParameters, (l, r) => ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.MarkerParameters)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.BodyTexts) ?? true))
            {
                if (!lhs.BodyTexts.SequenceEqualNullable(rhs.BodyTexts, (l, r) => ((TerminalBodyTextCommon)((ITerminalBodyTextGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.BodyTexts)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.MenuItems) ?? true))
            {
                if (!lhs.MenuItems.SequenceEqualNullable(rhs.MenuItems, (l, r) => ((TerminalMenuItemCommon)((ITerminalMenuItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.MenuItems)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITerminalGetter?)lhs,
                rhs: rhs as ITerminalGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITerminalGetter?)lhs,
                rhs: rhs as ITerminalGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ITerminalGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            hash.Add(item.PreviewTransform);
            if (item.HeaderText is {} HeaderTextitem)
            {
                hash.Add(HeaderTextitem);
            }
            if (item.WelcomeText is {} WelcomeTextitem)
            {
                hash.Add(WelcomeTextitem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.Properties);
            if (item.PNAM is {} PNAMItem)
            {
                hash.Add(PNAMItem);
            }
            hash.Add(item.LoopingSound);
            if (item.FNAM is {} FNAMItem)
            {
                hash.Add(FNAMItem);
            }
            hash.Add(item.Holotapes);
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.WorkbenchData is {} WorkbenchDataItem)
            {
                hash.Add(WorkbenchDataItem);
            }
            if (item.MarkerModel is {} MarkerModelitem)
            {
                hash.Add(MarkerModelitem);
            }
            hash.Add(item.MarkerParameters);
            hash.Add(item.BodyTexts);
            hash.Add(item.MenuItems);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ITerminalGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITerminalGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Terminal.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITerminalGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.PreviewTransform, out var PreviewTransformInfo))
            {
                yield return PreviewTransformInfo;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Properties is {} PropertiesItem)
            {
                foreach (var item in PropertiesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.LoopingSound, out var LoopingSoundInfo))
            {
                yield return LoopingSoundInfo;
            }
            if (obj.Holotapes is {} HolotapesItem)
            {
                foreach (var item in HolotapesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.MarkerParameters is {} MarkerParametersItem)
            {
                foreach (var item in MarkerParametersItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.BodyTexts is {} BodyTextsItem)
            {
                foreach (var item in BodyTextsItem.WhereCastable<ITerminalBodyTextGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.MenuItems is {} MenuItemsItem)
            {
                foreach (var item in MenuItemsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Terminal Duplicate(
            ITerminalGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Terminal(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITerminalGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITerminalGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class TerminalSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly TerminalSetterTranslationCommon Instance = new TerminalSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITerminalInternal item,
            ITerminalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ITerminal item,
            ITerminalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Terminal_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Terminal_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.PreviewTransform) ?? true))
            {
                item.PreviewTransform.SetTo(rhs.PreviewTransform.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.HeaderText) ?? true))
            {
                item.HeaderText = rhs.HeaderText?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.WelcomeText) ?? true))
            {
                item.WelcomeText = rhs.WelcomeText?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Terminal_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.Properties);
                try
                {
                    if ((rhs.Properties != null))
                    {
                        item.Properties = 
                            rhs.Properties
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectProperty>();
                    }
                    else
                    {
                        item.Properties = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.PNAM) ?? true))
            {
                if(rhs.PNAM is {} PNAMrhs)
                {
                    item.PNAM = PNAMrhs.ToArray();
                }
                else
                {
                    item.PNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.LoopingSound) ?? true))
            {
                item.LoopingSound.SetTo(rhs.LoopingSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.FNAM) ?? true))
            {
                if(rhs.FNAM is {} FNAMrhs)
                {
                    item.FNAM = FNAMrhs.ToArray();
                }
                else
                {
                    item.FNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Holotapes) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.Holotapes);
                try
                {
                    if ((rhs.Holotapes != null))
                    {
                        item.Holotapes = 
                            rhs.Holotapes
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<TerminalHolotapeEntry>();
                    }
                    else
                    {
                        item.Holotapes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.WorkbenchData) ?? true))
            {
                if(rhs.WorkbenchData is {} WorkbenchDatarhs)
                {
                    item.WorkbenchData = WorkbenchDatarhs.ToArray();
                }
                else
                {
                    item.WorkbenchData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.MarkerModel) ?? true))
            {
                item.MarkerModel = rhs.MarkerModel;
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.MarkerParameters) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.MarkerParameters);
                try
                {
                    if ((rhs.MarkerParameters != null))
                    {
                        item.MarkerParameters = 
                            rhs.MarkerParameters
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<FurnitureMarkerParameters>();
                    }
                    else
                    {
                        item.MarkerParameters = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.BodyTexts) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.BodyTexts);
                try
                {
                    if ((rhs.BodyTexts != null))
                    {
                        item.BodyTexts = 
                            rhs.BodyTexts
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<TerminalBodyText>();
                    }
                    else
                    {
                        item.BodyTexts = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.MenuItems) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.MenuItems);
                try
                {
                    if ((rhs.MenuItems != null))
                    {
                        item.MenuItems = 
                            rhs.MenuItems
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<TerminalMenuItem>();
                    }
                    else
                    {
                        item.MenuItems = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITerminal item,
            ITerminalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITerminalInternal)item,
                rhs: (ITerminalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITerminal)item,
                rhs: (ITerminalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITerminalInternal)item,
                rhs: (ITerminalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITerminal)item,
                rhs: (ITerminalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Terminal DeepCopy(
            ITerminalGetter item,
            Terminal.TranslationMask? copyMask = null)
        {
            Terminal ret = (Terminal)((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).GetNew();
            ((TerminalSetterTranslationCommon)((ITerminalGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Terminal DeepCopy(
            ITerminalGetter item,
            out Terminal.ErrorMask errorMask,
            Terminal.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Terminal ret = (Terminal)((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).GetNew();
            ((TerminalSetterTranslationCommon)((ITerminalGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Terminal.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Terminal DeepCopy(
            ITerminalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Terminal ret = (Terminal)((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).GetNew();
            ((TerminalSetterTranslationCommon)((ITerminalGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Terminal
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Terminal_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Terminal_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TerminalCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TerminalSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TerminalSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class TerminalBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly TerminalBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ITerminalGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            TerminalBinaryWriteTranslation.WriteBinaryLoopingSoundExport(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            ITerminalGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterIndexedBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PreviewTransform,
                header: translationParams.ConvertToCustom(RecordTypes.PTRN));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HeaderText,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WelcomeText,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectPropertyGetter>.Instance.Write(
                writer: writer,
                items: item.Properties,
                recordType: translationParams.ConvertToCustom(RecordTypes.PRPS),
                transl: (MutagenWriter subWriter, IObjectPropertyGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ObjectPropertyBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PNAM,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FNAM,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ITerminalHolotapeEntryGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Holotapes,
                counterType: RecordTypes.COCT,
                counterLength: 4,
                transl: (MutagenWriter subWriter, ITerminalHolotapeEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((TerminalHolotapeEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            TerminalBinaryWriteTranslation.WriteBinaryFlags(
                writer: writer,
                item: item);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WorkbenchData,
                header: translationParams.ConvertToCustom(RecordTypes.WBDT));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MarkerModel,
                header: translationParams.ConvertToCustom(RecordTypes.XMRK),
                binaryType: StringBinaryType.NullTerminate);
            TerminalBinaryWriteTranslation.WriteBinaryMarkerParameters(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ITerminalBodyTextGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.BodyTexts,
                counterType: RecordTypes.BSIZ,
                counterLength: 4,
                transl: (MutagenWriter subWriter, ITerminalBodyTextGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((TerminalBodyTextBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ITerminalMenuItemGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.MenuItems,
                counterType: RecordTypes.ISIZ,
                counterLength: 4,
                transl: (MutagenWriter subWriter, ITerminalMenuItemGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((TerminalMenuItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public static partial void WriteBinaryLoopingSoundExportCustom(
            MutagenWriter writer,
            ITerminalGetter item);

        public static void WriteBinaryLoopingSoundExport(
            MutagenWriter writer,
            ITerminalGetter item)
        {
            WriteBinaryLoopingSoundExportCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFlagsCustom(
            MutagenWriter writer,
            ITerminalGetter item);

        public static void WriteBinaryFlags(
            MutagenWriter writer,
            ITerminalGetter item)
        {
            WriteBinaryFlagsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryMarkerParametersCustom(
            MutagenWriter writer,
            ITerminalGetter item);

        public static void WriteBinaryMarkerParameters(
            MutagenWriter writer,
            ITerminalGetter item)
        {
            WriteBinaryMarkerParametersCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            ITerminalGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.TERM,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITerminalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITerminalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITerminalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TerminalBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly TerminalBinaryCreateTranslation Instance = new TerminalBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.TERM;
        public static void FillBinaryStructs(
            ITerminalInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            TerminalBinaryCreateTranslation.FillBinaryLoopingSoundExportCustom(
                frame: frame,
                item: item);
        }

        public static ParseResult FillBinaryRecordTypes(
            ITerminalInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapterIndexed.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Terminal_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Terminal_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.PTRN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PreviewTransform.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Terminal_FieldIndex.PreviewTransform;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeaderText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Terminal_FieldIndex.HeaderText;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WelcomeText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Terminal_FieldIndex.WelcomeText;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Terminal_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MODS:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Terminal_FieldIndex.Model;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Terminal_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Properties = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectProperty>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ObjectProperty.TryCreateFromBinary)
                        .CastExtendedList<ObjectProperty>();
                    return (int)Terminal_FieldIndex.Properties;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Terminal_FieldIndex.PNAM;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Terminal_FieldIndex.FNAM;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    item.Holotapes = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<TerminalHolotapeEntry>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.COCT,
                            triggeringRecord: TerminalHolotapeEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: TerminalHolotapeEntry.TryCreateFromBinary)
                        .CastExtendedList<TerminalHolotapeEntry>();
                    return (int)Terminal_FieldIndex.Holotapes;
                }
                case RecordTypeInts.MNAM:
                {
                    TerminalBinaryCreateTranslation.FillBinaryFlagsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Terminal_FieldIndex.Flags;
                }
                case RecordTypeInts.WBDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WorkbenchData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Terminal_FieldIndex.WorkbenchData;
                }
                case RecordTypeInts.XMRK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MarkerModel = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Terminal_FieldIndex.MarkerModel;
                }
                case RecordTypeInts.SNAM:
                {
                    TerminalBinaryCreateTranslation.FillBinaryMarkerParametersCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Terminal_FieldIndex.MarkerParameters;
                }
                case RecordTypeInts.BSIZ:
                {
                    item.BodyTexts = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<TerminalBodyText>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.BSIZ,
                            triggeringRecord: TerminalBodyText_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: TerminalBodyText.TryCreateFromBinary)
                        .CastExtendedList<TerminalBodyText>();
                    return (int)Terminal_FieldIndex.BodyTexts;
                }
                case RecordTypeInts.ISIZ:
                {
                    item.MenuItems = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<TerminalMenuItem>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.ISIZ,
                            triggeringRecord: TerminalMenuItem_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: TerminalMenuItem.TryCreateFromBinary)
                        .CastExtendedList<TerminalMenuItem>();
                    return (int)Terminal_FieldIndex.MenuItems;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryLoopingSoundExportCustom(
            MutagenFrame frame,
            ITerminalInternal item);

        public static partial void FillBinaryFlagsCustom(
            MutagenFrame frame,
            ITerminalInternal item,
            PreviousParse lastParsed);

        public static partial void FillBinaryMarkerParametersCustom(
            MutagenFrame frame,
            ITerminalInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class TerminalBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class TerminalBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ITerminalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Terminal_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Terminal_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TerminalCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TerminalSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TerminalCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TerminalBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TerminalBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ITerminal);

        public Terminal.MajorFlag MajorFlags => (Terminal.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterIndexedGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterIndexedBinaryOverlay.VirtualMachineAdapterIndexedFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region PreviewTransform
        private int? _PreviewTransformLocation;
        public IFormLinkNullableGetter<ITransformGetter> PreviewTransform => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITransformGetter>(_package, _recordData, _PreviewTransformLocation);
        #endregion
        #region HeaderText
        private int? _HeaderTextLocation;
        public ITranslatedStringGetter? HeaderText => _HeaderTextLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HeaderTextLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #endregion
        #region WelcomeText
        private int? _WelcomeTextLocation;
        public ITranslatedStringGetter? WelcomeText => _WelcomeTextLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _WelcomeTextLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IObjectPropertyGetter>? Properties { get; private set; }
        #region PNAM
        private int? _PNAMLocation;
        public ReadOnlyMemorySlice<Byte>? PNAM => _PNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _PNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region LoopingSoundExport
        partial void LoopingSoundExportCustomParse(
            OverlayStream stream,
            int offset);
        protected int LoopingSoundExportEndingPos;
        #endregion
        #region FNAM
        private int? _FNAMLocation;
        public ReadOnlyMemorySlice<Byte>? FNAM => _FNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<ITerminalHolotapeEntryGetter>? Holotapes { get; private set; }
        #region Flags
        partial void FlagsCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset);
        public partial Terminal.Flag? GetFlagsCustom();
        public Terminal.Flag? Flags => GetFlagsCustom();
        #endregion
        #region WorkbenchData
        private int? _WorkbenchDataLocation;
        public ReadOnlyMemorySlice<Byte>? WorkbenchData => _WorkbenchDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WorkbenchDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region MarkerModel
        private int? _MarkerModelLocation;
        public String? MarkerModel => _MarkerModelLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MarkerModelLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region MarkerParameters
        partial void MarkerParametersCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        public IReadOnlyList<ITerminalBodyTextGetter>? BodyTexts { get; private set; }
        public IReadOnlyList<ITerminalMenuItemGetter>? MenuItems { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TerminalBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITerminalGetter TerminalFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TerminalBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ITerminalGetter TerminalFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TerminalFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Terminal_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Terminal_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.PTRN:
                {
                    _PreviewTransformLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.PreviewTransform;
                }
                case RecordTypeInts.NAM0:
                {
                    _HeaderTextLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.HeaderText;
                }
                case RecordTypeInts.WNAM:
                {
                    _WelcomeTextLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.WelcomeText;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MODS:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Terminal_FieldIndex.Model;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Terminal_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    this.Properties = BinaryOverlayList.FactoryByStartIndexWithTrigger<IObjectPropertyGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 8,
                        getter: (s, p) => ObjectPropertyBinaryOverlay.ObjectPropertyFactory(s, p));
                    return (int)Terminal_FieldIndex.Properties;
                }
                case RecordTypeInts.PNAM:
                {
                    _PNAMLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.PNAM;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.FNAM;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    this.Holotapes = BinaryOverlayList.FactoryByCountPerItem<ITerminalHolotapeEntryGetter>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x8,
                        countLength: 4,
                        countType: RecordTypes.COCT,
                        trigger: RecordTypes.CNTO,
                        getter: (s, p) => TerminalHolotapeEntryBinaryOverlay.TerminalHolotapeEntryFactory(s, p),
                        skipHeader: false);
                    return (int)Terminal_FieldIndex.Holotapes;
                }
                case RecordTypeInts.MNAM:
                {
                    FlagsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)Terminal_FieldIndex.Flags;
                }
                case RecordTypeInts.WBDT:
                {
                    _WorkbenchDataLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.WorkbenchData;
                }
                case RecordTypeInts.XMRK:
                {
                    _MarkerModelLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.MarkerModel;
                }
                case RecordTypeInts.SNAM:
                {
                    MarkerParametersCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Terminal_FieldIndex.MarkerParameters;
                }
                case RecordTypeInts.BSIZ:
                {
                    this.BodyTexts = BinaryOverlayList.FactoryByCountPerItem<ITerminalBodyTextGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: TerminalBodyText_Registration.TriggerSpecs,
                        countType: RecordTypes.BSIZ,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => TerminalBodyTextBinaryOverlay.TerminalBodyTextFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)Terminal_FieldIndex.BodyTexts;
                }
                case RecordTypeInts.ISIZ:
                {
                    this.MenuItems = BinaryOverlayList.FactoryByCountPerItem<ITerminalMenuItemGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: TerminalMenuItem_Registration.TriggerSpecs,
                        countType: RecordTypes.ISIZ,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => TerminalMenuItemBinaryOverlay.TerminalMenuItemFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)Terminal_FieldIndex.MenuItems;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TerminalMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Terminal>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITerminalGetter rhs) return false;
            return ((TerminalCommon)((ITerminalGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITerminalGetter? obj)
        {
            return ((TerminalCommon)((ITerminalGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TerminalCommon)((ITerminalGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

