/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class GodRays :
        Fallout4MajorRecord,
        IEquatable<IGodRaysGetter>,
        IGodRaysInternal,
        ILoquiObjectSetter<GodRays>
    {
        #region Ctor
        protected GodRays()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region BackColor
        public Color BackColor { get; set; } = default(Color);
        #endregion
        #region ForwardColor
        public Color ForwardColor { get; set; } = default(Color);
        #endregion
        #region Intensity
        public Single Intensity { get; set; } = default(Single);
        #endregion
        #region AirColorScale
        public Single AirColorScale { get; set; } = default(Single);
        #endregion
        #region BackColorScale
        public Single BackColorScale { get; set; } = default(Single);
        #endregion
        #region ForwardColorScale
        public Single ForwardColorScale { get; set; } = default(Single);
        #endregion
        #region BackPhase
        public Single BackPhase { get; set; } = default(Single);
        #endregion
        #region AirColor
        public Color AirColor { get; set; } = default(Color);
        #endregion
        #region ForwardPhase
        public Single ForwardPhase { get; set; } = default(Single);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GodRaysMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.BackColor = initialValue;
                this.ForwardColor = initialValue;
                this.Intensity = initialValue;
                this.AirColorScale = initialValue;
                this.BackColorScale = initialValue;
                this.ForwardColorScale = initialValue;
                this.BackPhase = initialValue;
                this.AirColor = initialValue;
                this.ForwardPhase = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem BackColor,
                TItem ForwardColor,
                TItem Intensity,
                TItem AirColorScale,
                TItem BackColorScale,
                TItem ForwardColorScale,
                TItem BackPhase,
                TItem AirColor,
                TItem ForwardPhase)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.BackColor = BackColor;
                this.ForwardColor = ForwardColor;
                this.Intensity = Intensity;
                this.AirColorScale = AirColorScale;
                this.BackColorScale = BackColorScale;
                this.ForwardColorScale = ForwardColorScale;
                this.BackPhase = BackPhase;
                this.AirColor = AirColor;
                this.ForwardPhase = ForwardPhase;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem BackColor;
            public TItem ForwardColor;
            public TItem Intensity;
            public TItem AirColorScale;
            public TItem BackColorScale;
            public TItem ForwardColorScale;
            public TItem BackPhase;
            public TItem AirColor;
            public TItem ForwardPhase;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.BackColor, rhs.BackColor)) return false;
                if (!object.Equals(this.ForwardColor, rhs.ForwardColor)) return false;
                if (!object.Equals(this.Intensity, rhs.Intensity)) return false;
                if (!object.Equals(this.AirColorScale, rhs.AirColorScale)) return false;
                if (!object.Equals(this.BackColorScale, rhs.BackColorScale)) return false;
                if (!object.Equals(this.ForwardColorScale, rhs.ForwardColorScale)) return false;
                if (!object.Equals(this.BackPhase, rhs.BackPhase)) return false;
                if (!object.Equals(this.AirColor, rhs.AirColor)) return false;
                if (!object.Equals(this.ForwardPhase, rhs.ForwardPhase)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.BackColor);
                hash.Add(this.ForwardColor);
                hash.Add(this.Intensity);
                hash.Add(this.AirColorScale);
                hash.Add(this.BackColorScale);
                hash.Add(this.ForwardColorScale);
                hash.Add(this.BackPhase);
                hash.Add(this.AirColor);
                hash.Add(this.ForwardPhase);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.BackColor)) return false;
                if (!eval(this.ForwardColor)) return false;
                if (!eval(this.Intensity)) return false;
                if (!eval(this.AirColorScale)) return false;
                if (!eval(this.BackColorScale)) return false;
                if (!eval(this.ForwardColorScale)) return false;
                if (!eval(this.BackPhase)) return false;
                if (!eval(this.AirColor)) return false;
                if (!eval(this.ForwardPhase)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.BackColor)) return true;
                if (eval(this.ForwardColor)) return true;
                if (eval(this.Intensity)) return true;
                if (eval(this.AirColorScale)) return true;
                if (eval(this.BackColorScale)) return true;
                if (eval(this.ForwardColorScale)) return true;
                if (eval(this.BackPhase)) return true;
                if (eval(this.AirColor)) return true;
                if (eval(this.ForwardPhase)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GodRays.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.BackColor = eval(this.BackColor);
                obj.ForwardColor = eval(this.ForwardColor);
                obj.Intensity = eval(this.Intensity);
                obj.AirColorScale = eval(this.AirColorScale);
                obj.BackColorScale = eval(this.BackColorScale);
                obj.ForwardColorScale = eval(this.ForwardColorScale);
                obj.BackPhase = eval(this.BackPhase);
                obj.AirColor = eval(this.AirColor);
                obj.ForwardPhase = eval(this.ForwardPhase);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(GodRays.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, GodRays.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(GodRays.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.BackColor ?? true)
                    {
                        sb.AppendItem(BackColor, "BackColor");
                    }
                    if (printMask?.ForwardColor ?? true)
                    {
                        sb.AppendItem(ForwardColor, "ForwardColor");
                    }
                    if (printMask?.Intensity ?? true)
                    {
                        sb.AppendItem(Intensity, "Intensity");
                    }
                    if (printMask?.AirColorScale ?? true)
                    {
                        sb.AppendItem(AirColorScale, "AirColorScale");
                    }
                    if (printMask?.BackColorScale ?? true)
                    {
                        sb.AppendItem(BackColorScale, "BackColorScale");
                    }
                    if (printMask?.ForwardColorScale ?? true)
                    {
                        sb.AppendItem(ForwardColorScale, "ForwardColorScale");
                    }
                    if (printMask?.BackPhase ?? true)
                    {
                        sb.AppendItem(BackPhase, "BackPhase");
                    }
                    if (printMask?.AirColor ?? true)
                    {
                        sb.AppendItem(AirColor, "AirColor");
                    }
                    if (printMask?.ForwardPhase ?? true)
                    {
                        sb.AppendItem(ForwardPhase, "ForwardPhase");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? BackColor;
            public Exception? ForwardColor;
            public Exception? Intensity;
            public Exception? AirColorScale;
            public Exception? BackColorScale;
            public Exception? ForwardColorScale;
            public Exception? BackPhase;
            public Exception? AirColor;
            public Exception? ForwardPhase;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                GodRays_FieldIndex enu = (GodRays_FieldIndex)index;
                switch (enu)
                {
                    case GodRays_FieldIndex.BackColor:
                        return BackColor;
                    case GodRays_FieldIndex.ForwardColor:
                        return ForwardColor;
                    case GodRays_FieldIndex.Intensity:
                        return Intensity;
                    case GodRays_FieldIndex.AirColorScale:
                        return AirColorScale;
                    case GodRays_FieldIndex.BackColorScale:
                        return BackColorScale;
                    case GodRays_FieldIndex.ForwardColorScale:
                        return ForwardColorScale;
                    case GodRays_FieldIndex.BackPhase:
                        return BackPhase;
                    case GodRays_FieldIndex.AirColor:
                        return AirColor;
                    case GodRays_FieldIndex.ForwardPhase:
                        return ForwardPhase;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                GodRays_FieldIndex enu = (GodRays_FieldIndex)index;
                switch (enu)
                {
                    case GodRays_FieldIndex.BackColor:
                        this.BackColor = ex;
                        break;
                    case GodRays_FieldIndex.ForwardColor:
                        this.ForwardColor = ex;
                        break;
                    case GodRays_FieldIndex.Intensity:
                        this.Intensity = ex;
                        break;
                    case GodRays_FieldIndex.AirColorScale:
                        this.AirColorScale = ex;
                        break;
                    case GodRays_FieldIndex.BackColorScale:
                        this.BackColorScale = ex;
                        break;
                    case GodRays_FieldIndex.ForwardColorScale:
                        this.ForwardColorScale = ex;
                        break;
                    case GodRays_FieldIndex.BackPhase:
                        this.BackPhase = ex;
                        break;
                    case GodRays_FieldIndex.AirColor:
                        this.AirColor = ex;
                        break;
                    case GodRays_FieldIndex.ForwardPhase:
                        this.ForwardPhase = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                GodRays_FieldIndex enu = (GodRays_FieldIndex)index;
                switch (enu)
                {
                    case GodRays_FieldIndex.BackColor:
                        this.BackColor = (Exception?)obj;
                        break;
                    case GodRays_FieldIndex.ForwardColor:
                        this.ForwardColor = (Exception?)obj;
                        break;
                    case GodRays_FieldIndex.Intensity:
                        this.Intensity = (Exception?)obj;
                        break;
                    case GodRays_FieldIndex.AirColorScale:
                        this.AirColorScale = (Exception?)obj;
                        break;
                    case GodRays_FieldIndex.BackColorScale:
                        this.BackColorScale = (Exception?)obj;
                        break;
                    case GodRays_FieldIndex.ForwardColorScale:
                        this.ForwardColorScale = (Exception?)obj;
                        break;
                    case GodRays_FieldIndex.BackPhase:
                        this.BackPhase = (Exception?)obj;
                        break;
                    case GodRays_FieldIndex.AirColor:
                        this.AirColor = (Exception?)obj;
                        break;
                    case GodRays_FieldIndex.ForwardPhase:
                        this.ForwardPhase = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (BackColor != null) return true;
                if (ForwardColor != null) return true;
                if (Intensity != null) return true;
                if (AirColorScale != null) return true;
                if (BackColorScale != null) return true;
                if (ForwardColorScale != null) return true;
                if (BackPhase != null) return true;
                if (AirColor != null) return true;
                if (ForwardPhase != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(BackColor, "BackColor");
                }
                {
                    sb.AppendItem(ForwardColor, "ForwardColor");
                }
                {
                    sb.AppendItem(Intensity, "Intensity");
                }
                {
                    sb.AppendItem(AirColorScale, "AirColorScale");
                }
                {
                    sb.AppendItem(BackColorScale, "BackColorScale");
                }
                {
                    sb.AppendItem(ForwardColorScale, "ForwardColorScale");
                }
                {
                    sb.AppendItem(BackPhase, "BackPhase");
                }
                {
                    sb.AppendItem(AirColor, "AirColor");
                }
                {
                    sb.AppendItem(ForwardPhase, "ForwardPhase");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.BackColor = this.BackColor.Combine(rhs.BackColor);
                ret.ForwardColor = this.ForwardColor.Combine(rhs.ForwardColor);
                ret.Intensity = this.Intensity.Combine(rhs.Intensity);
                ret.AirColorScale = this.AirColorScale.Combine(rhs.AirColorScale);
                ret.BackColorScale = this.BackColorScale.Combine(rhs.BackColorScale);
                ret.ForwardColorScale = this.ForwardColorScale.Combine(rhs.ForwardColorScale);
                ret.BackPhase = this.BackPhase.Combine(rhs.BackPhase);
                ret.AirColor = this.AirColor.Combine(rhs.AirColor);
                ret.ForwardPhase = this.ForwardPhase.Combine(rhs.ForwardPhase);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool BackColor;
            public bool ForwardColor;
            public bool Intensity;
            public bool AirColorScale;
            public bool BackColorScale;
            public bool ForwardColorScale;
            public bool BackPhase;
            public bool AirColor;
            public bool ForwardPhase;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.BackColor = defaultOn;
                this.ForwardColor = defaultOn;
                this.Intensity = defaultOn;
                this.AirColorScale = defaultOn;
                this.BackColorScale = defaultOn;
                this.ForwardColorScale = defaultOn;
                this.BackPhase = defaultOn;
                this.AirColor = defaultOn;
                this.ForwardPhase = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((BackColor, null));
                ret.Add((ForwardColor, null));
                ret.Add((Intensity, null));
                ret.Add((AirColorScale, null));
                ret.Add((BackColorScale, null));
                ret.Add((ForwardColorScale, null));
                ret.Add((BackPhase, null));
                ret.Add((AirColor, null));
                ret.Add((ForwardPhase, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = GodRays_Registration.TriggeringRecordType;
        public GodRays(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private GodRays(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal GodRays(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public GodRays(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public GodRays(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<GodRays>.ToString(this);
        }

        protected override Type LinkType => typeof(IGodRays);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IGodRaysGetter rhs) return false;
            return ((GodRaysCommon)((IGodRaysGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGodRaysGetter? obj)
        {
            return ((GodRaysCommon)((IGodRaysGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GodRaysCommon)((IGodRaysGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GodRaysBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GodRaysBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static GodRays CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new GodRays();
            ((GodRaysSetterCommon)((IGodRaysGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out GodRays item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((GodRaysSetterCommon)((IGodRaysGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new GodRays GetNew()
        {
            return new GodRays();
        }

    }
    #endregion

    #region Interface
    public partial interface IGodRays :
        IFallout4MajorRecordInternal,
        IGodRaysGetter,
        ILoquiObjectSetter<IGodRaysInternal>
    {
        new Color BackColor { get; set; }
        new Color ForwardColor { get; set; }
        new Single Intensity { get; set; }
        new Single AirColorScale { get; set; }
        new Single BackColorScale { get; set; }
        new Single ForwardColorScale { get; set; }
        new Single BackPhase { get; set; }
        new Color AirColor { get; set; }
        new Single ForwardPhase { get; set; }
    }

    public partial interface IGodRaysInternal :
        IFallout4MajorRecordInternal,
        IGodRays,
        IGodRaysGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.GDRY)]
    public partial interface IGodRaysGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IGodRaysGetter>,
        IMapsToGetter<IGodRaysGetter>
    {
        static new ILoquiRegistration StaticRegistration => GodRays_Registration.Instance;
        Color BackColor { get; }
        Color ForwardColor { get; }
        Single Intensity { get; }
        Single AirColorScale { get; }
        Single BackColorScale { get; }
        Single ForwardColorScale { get; }
        Single BackPhase { get; }
        Color AirColor { get; }
        Single ForwardPhase { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GodRaysMixIn
    {
        public static void Clear(this IGodRaysInternal item)
        {
            ((GodRaysSetterCommon)((IGodRaysGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GodRays.Mask<bool> GetEqualsMask(
            this IGodRaysGetter item,
            IGodRaysGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GodRaysCommon)((IGodRaysGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IGodRaysGetter item,
            string? name = null,
            GodRays.Mask<bool>? printMask = null)
        {
            return ((GodRaysCommon)((IGodRaysGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IGodRaysGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GodRays.Mask<bool>? printMask = null)
        {
            ((GodRaysCommon)((IGodRaysGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGodRaysGetter item,
            IGodRaysGetter rhs,
            GodRays.TranslationMask? equalsMask = null)
        {
            return ((GodRaysCommon)((IGodRaysGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGodRaysInternal lhs,
            IGodRaysGetter rhs,
            out GodRays.ErrorMask errorMask,
            GodRays.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GodRaysSetterTranslationCommon)((IGodRaysGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = GodRays.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGodRaysInternal lhs,
            IGodRaysGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GodRaysSetterTranslationCommon)((IGodRaysGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static GodRays DeepCopy(
            this IGodRaysGetter item,
            GodRays.TranslationMask? copyMask = null)
        {
            return ((GodRaysSetterTranslationCommon)((IGodRaysGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GodRays DeepCopy(
            this IGodRaysGetter item,
            out GodRays.ErrorMask errorMask,
            GodRays.TranslationMask? copyMask = null)
        {
            return ((GodRaysSetterTranslationCommon)((IGodRaysGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GodRays DeepCopy(
            this IGodRaysGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GodRaysSetterTranslationCommon)((IGodRaysGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static GodRays Duplicate(
            this IGodRaysGetter item,
            FormKey formKey,
            GodRays.TranslationMask? copyMask = null)
        {
            return ((GodRaysCommon)((IGodRaysGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static GodRays Duplicate(
            this IGodRaysGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((GodRaysCommon)((IGodRaysGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGodRaysInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((GodRaysSetterCommon)((IGodRaysGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum GodRays_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        BackColor = 7,
        ForwardColor = 8,
        Intensity = 9,
        AirColorScale = 10,
        BackColorScale = 11,
        ForwardColorScale = 12,
        BackPhase = 13,
        AirColor = 14,
        ForwardPhase = 15,
    }
    #endregion

    #region Registration
    internal partial class GodRays_Registration : ILoquiRegistration
    {
        public static readonly GodRays_Registration Instance = new GodRays_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(GodRays.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GodRays.ErrorMask);

        public static readonly Type ClassType = typeof(GodRays);

        public static readonly Type GetterType = typeof(IGodRaysGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGodRays);

        public static readonly Type? InternalSetterType = typeof(IGodRaysInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.GodRays";

        public const string Name = "GodRays";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.GDRY;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.GDRY);
            var all = RecordCollection.Factory(
                RecordTypes.GDRY,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(GodRaysBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class GodRaysSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly GodRaysSetterCommon Instance = new GodRaysSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGodRaysInternal item)
        {
            ClearPartial();
            item.BackColor = default(Color);
            item.ForwardColor = default(Color);
            item.Intensity = default(Single);
            item.AirColorScale = default(Single);
            item.BackColorScale = default(Single);
            item.ForwardColorScale = default(Single);
            item.BackPhase = default(Single);
            item.AirColor = default(Color);
            item.ForwardPhase = default(Single);
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IGodRaysInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IGodRaysInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IGodRays obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGodRaysInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IGodRaysInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: GodRaysBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: GodRaysBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (GodRays)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (GodRays)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class GodRaysCommon : Fallout4MajorRecordCommon
    {
        public new static readonly GodRaysCommon Instance = new GodRaysCommon();

        public GodRays.Mask<bool> GetEqualsMask(
            IGodRaysGetter item,
            IGodRaysGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GodRays.Mask<bool>(false);
            ((GodRaysCommon)((IGodRaysGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGodRaysGetter item,
            IGodRaysGetter rhs,
            GodRays.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.BackColor = item.BackColor.ColorOnlyEquals(rhs.BackColor);
            ret.ForwardColor = item.ForwardColor.ColorOnlyEquals(rhs.ForwardColor);
            ret.Intensity = item.Intensity.EqualsWithin(rhs.Intensity);
            ret.AirColorScale = item.AirColorScale.EqualsWithin(rhs.AirColorScale);
            ret.BackColorScale = item.BackColorScale.EqualsWithin(rhs.BackColorScale);
            ret.ForwardColorScale = item.ForwardColorScale.EqualsWithin(rhs.ForwardColorScale);
            ret.BackPhase = item.BackPhase.EqualsWithin(rhs.BackPhase);
            ret.AirColor = item.AirColor.ColorOnlyEquals(rhs.AirColor);
            ret.ForwardPhase = item.ForwardPhase.EqualsWithin(rhs.ForwardPhase);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IGodRaysGetter item,
            string? name = null,
            GodRays.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IGodRaysGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GodRays.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"GodRays =>");
            }
            else
            {
                sb.AppendLine($"{name} (GodRays) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IGodRaysGetter item,
            StructuredStringBuilder sb,
            GodRays.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.BackColor ?? true)
            {
                sb.AppendItem(item.BackColor, "BackColor");
            }
            if (printMask?.ForwardColor ?? true)
            {
                sb.AppendItem(item.ForwardColor, "ForwardColor");
            }
            if (printMask?.Intensity ?? true)
            {
                sb.AppendItem(item.Intensity, "Intensity");
            }
            if (printMask?.AirColorScale ?? true)
            {
                sb.AppendItem(item.AirColorScale, "AirColorScale");
            }
            if (printMask?.BackColorScale ?? true)
            {
                sb.AppendItem(item.BackColorScale, "BackColorScale");
            }
            if (printMask?.ForwardColorScale ?? true)
            {
                sb.AppendItem(item.ForwardColorScale, "ForwardColorScale");
            }
            if (printMask?.BackPhase ?? true)
            {
                sb.AppendItem(item.BackPhase, "BackPhase");
            }
            if (printMask?.AirColor ?? true)
            {
                sb.AppendItem(item.AirColor, "AirColor");
            }
            if (printMask?.ForwardPhase ?? true)
            {
                sb.AppendItem(item.ForwardPhase, "ForwardPhase");
            }
        }
        
        public static GodRays_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GodRays_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (GodRays_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (GodRays_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (GodRays_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (GodRays_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (GodRays_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (GodRays_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new GodRays_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GodRays_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (GodRays_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (GodRays_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (GodRays_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGodRaysGetter? lhs,
            IGodRaysGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)GodRays_FieldIndex.BackColor) ?? true))
            {
                if (!lhs.BackColor.ColorOnlyEquals(rhs.BackColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GodRays_FieldIndex.ForwardColor) ?? true))
            {
                if (!lhs.ForwardColor.ColorOnlyEquals(rhs.ForwardColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GodRays_FieldIndex.Intensity) ?? true))
            {
                if (!lhs.Intensity.EqualsWithin(rhs.Intensity)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GodRays_FieldIndex.AirColorScale) ?? true))
            {
                if (!lhs.AirColorScale.EqualsWithin(rhs.AirColorScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GodRays_FieldIndex.BackColorScale) ?? true))
            {
                if (!lhs.BackColorScale.EqualsWithin(rhs.BackColorScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GodRays_FieldIndex.ForwardColorScale) ?? true))
            {
                if (!lhs.ForwardColorScale.EqualsWithin(rhs.ForwardColorScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GodRays_FieldIndex.BackPhase) ?? true))
            {
                if (!lhs.BackPhase.EqualsWithin(rhs.BackPhase)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GodRays_FieldIndex.AirColor) ?? true))
            {
                if (!lhs.AirColor.ColorOnlyEquals(rhs.AirColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GodRays_FieldIndex.ForwardPhase) ?? true))
            {
                if (!lhs.ForwardPhase.EqualsWithin(rhs.ForwardPhase)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGodRaysGetter?)lhs,
                rhs: rhs as IGodRaysGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGodRaysGetter?)lhs,
                rhs: rhs as IGodRaysGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IGodRaysGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.BackColor);
            hash.Add(item.ForwardColor);
            hash.Add(item.Intensity);
            hash.Add(item.AirColorScale);
            hash.Add(item.BackColorScale);
            hash.Add(item.ForwardColorScale);
            hash.Add(item.BackPhase);
            hash.Add(item.AirColor);
            hash.Add(item.ForwardPhase);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IGodRaysGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IGodRaysGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return GodRays.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IGodRaysGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public GodRays Duplicate(
            IGodRaysGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new GodRays(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGodRaysGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGodRaysGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class GodRaysSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly GodRaysSetterTranslationCommon Instance = new GodRaysSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGodRaysInternal item,
            IGodRaysGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IGodRays item,
            IGodRaysGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)GodRays_FieldIndex.BackColor) ?? true))
            {
                item.BackColor = rhs.BackColor;
            }
            if ((copyMask?.GetShouldTranslate((int)GodRays_FieldIndex.ForwardColor) ?? true))
            {
                item.ForwardColor = rhs.ForwardColor;
            }
            if ((copyMask?.GetShouldTranslate((int)GodRays_FieldIndex.Intensity) ?? true))
            {
                item.Intensity = rhs.Intensity;
            }
            if ((copyMask?.GetShouldTranslate((int)GodRays_FieldIndex.AirColorScale) ?? true))
            {
                item.AirColorScale = rhs.AirColorScale;
            }
            if ((copyMask?.GetShouldTranslate((int)GodRays_FieldIndex.BackColorScale) ?? true))
            {
                item.BackColorScale = rhs.BackColorScale;
            }
            if ((copyMask?.GetShouldTranslate((int)GodRays_FieldIndex.ForwardColorScale) ?? true))
            {
                item.ForwardColorScale = rhs.ForwardColorScale;
            }
            if ((copyMask?.GetShouldTranslate((int)GodRays_FieldIndex.BackPhase) ?? true))
            {
                item.BackPhase = rhs.BackPhase;
            }
            if ((copyMask?.GetShouldTranslate((int)GodRays_FieldIndex.AirColor) ?? true))
            {
                item.AirColor = rhs.AirColor;
            }
            if ((copyMask?.GetShouldTranslate((int)GodRays_FieldIndex.ForwardPhase) ?? true))
            {
                item.ForwardPhase = rhs.ForwardPhase;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IGodRays item,
            IGodRaysGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGodRaysInternal)item,
                rhs: (IGodRaysGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGodRays)item,
                rhs: (IGodRaysGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGodRaysInternal)item,
                rhs: (IGodRaysGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGodRays)item,
                rhs: (IGodRaysGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public GodRays DeepCopy(
            IGodRaysGetter item,
            GodRays.TranslationMask? copyMask = null)
        {
            GodRays ret = (GodRays)((GodRaysCommon)((IGodRaysGetter)item).CommonInstance()!).GetNew();
            ((GodRaysSetterTranslationCommon)((IGodRaysGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public GodRays DeepCopy(
            IGodRaysGetter item,
            out GodRays.ErrorMask errorMask,
            GodRays.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GodRays ret = (GodRays)((GodRaysCommon)((IGodRaysGetter)item).CommonInstance()!).GetNew();
            ((GodRaysSetterTranslationCommon)((IGodRaysGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = GodRays.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public GodRays DeepCopy(
            IGodRaysGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GodRays ret = (GodRays)((GodRaysCommon)((IGodRaysGetter)item).CommonInstance()!).GetNew();
            ((GodRaysSetterTranslationCommon)((IGodRaysGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class GodRays
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GodRays_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GodRays_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GodRaysCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GodRaysSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GodRaysSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class GodRaysBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly GodRaysBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IGodRaysGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BackColor,
                    binaryType: ColorBinaryType.NoAlphaFloat);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ForwardColor,
                    binaryType: ColorBinaryType.NoAlphaFloat);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Intensity);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AirColorScale);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BackColorScale);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ForwardColorScale);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BackPhase);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AirColor,
                    binaryType: ColorBinaryType.NoAlphaFloat);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ForwardPhase);
            }
        }

        public void Write(
            MutagenWriter writer,
            IGodRaysGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.GDRY,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IGodRaysGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGodRaysGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGodRaysGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class GodRaysBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly GodRaysBinaryCreateTranslation Instance = new GodRaysBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.GDRY;
        public static ParseResult FillBinaryRecordTypes(
            IGodRaysInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 12) return null;
                    item.BackColor = dataFrame.ReadColor(ColorBinaryType.NoAlphaFloat);
                    if (dataFrame.Remaining < 12) return null;
                    item.ForwardColor = dataFrame.ReadColor(ColorBinaryType.NoAlphaFloat);
                    if (dataFrame.Remaining < 4) return null;
                    item.Intensity = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AirColorScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BackColorScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ForwardColorScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BackPhase = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 12) return null;
                    item.AirColor = dataFrame.ReadColor(ColorBinaryType.NoAlphaFloat);
                    if (dataFrame.Remaining < 4) return null;
                    item.ForwardPhase = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)GodRays_FieldIndex.ForwardPhase;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class GodRaysBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class GodRaysBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IGodRaysGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GodRays_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GodRays_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GodRaysCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GodRaysSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GodRaysBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GodRaysBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IGodRays);


        private RangeInt32? _DATALocation;
        #region BackColor
        private int _BackColorLocation => _DATALocation!.Value.Min;
        private bool _BackColor_IsSet => _DATALocation.HasValue;
        public Color BackColor => _BackColor_IsSet ? _recordData.Slice(_BackColorLocation, 12).ReadColor(ColorBinaryType.NoAlphaFloat) : default(Color);
        #endregion
        #region ForwardColor
        private int _ForwardColorLocation => _DATALocation!.Value.Min + 0xC;
        private bool _ForwardColor_IsSet => _DATALocation.HasValue;
        public Color ForwardColor => _ForwardColor_IsSet ? _recordData.Slice(_ForwardColorLocation, 12).ReadColor(ColorBinaryType.NoAlphaFloat) : default(Color);
        #endregion
        #region Intensity
        private int _IntensityLocation => _DATALocation!.Value.Min + 0x18;
        private bool _Intensity_IsSet => _DATALocation.HasValue;
        public Single Intensity => _Intensity_IsSet ? _recordData.Slice(_IntensityLocation, 4).Float() : default(Single);
        #endregion
        #region AirColorScale
        private int _AirColorScaleLocation => _DATALocation!.Value.Min + 0x1C;
        private bool _AirColorScale_IsSet => _DATALocation.HasValue;
        public Single AirColorScale => _AirColorScale_IsSet ? _recordData.Slice(_AirColorScaleLocation, 4).Float() : default(Single);
        #endregion
        #region BackColorScale
        private int _BackColorScaleLocation => _DATALocation!.Value.Min + 0x20;
        private bool _BackColorScale_IsSet => _DATALocation.HasValue;
        public Single BackColorScale => _BackColorScale_IsSet ? _recordData.Slice(_BackColorScaleLocation, 4).Float() : default(Single);
        #endregion
        #region ForwardColorScale
        private int _ForwardColorScaleLocation => _DATALocation!.Value.Min + 0x24;
        private bool _ForwardColorScale_IsSet => _DATALocation.HasValue;
        public Single ForwardColorScale => _ForwardColorScale_IsSet ? _recordData.Slice(_ForwardColorScaleLocation, 4).Float() : default(Single);
        #endregion
        #region BackPhase
        private int _BackPhaseLocation => _DATALocation!.Value.Min + 0x28;
        private bool _BackPhase_IsSet => _DATALocation.HasValue;
        public Single BackPhase => _BackPhase_IsSet ? _recordData.Slice(_BackPhaseLocation, 4).Float() : default(Single);
        #endregion
        #region AirColor
        private int _AirColorLocation => _DATALocation!.Value.Min + 0x2C;
        private bool _AirColor_IsSet => _DATALocation.HasValue;
        public Color AirColor => _AirColor_IsSet ? _recordData.Slice(_AirColorLocation, 12).ReadColor(ColorBinaryType.NoAlphaFloat) : default(Color);
        #endregion
        #region ForwardPhase
        private int _ForwardPhaseLocation => _DATALocation!.Value.Min + 0x38;
        private bool _ForwardPhase_IsSet => _DATALocation.HasValue;
        public Single ForwardPhase => _ForwardPhase_IsSet ? _recordData.Slice(_ForwardPhaseLocation, 4).Float() : default(Single);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected GodRaysBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IGodRaysGetter GodRaysFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new GodRaysBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IGodRaysGetter GodRaysFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return GodRaysFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)GodRays_FieldIndex.ForwardPhase;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GodRaysMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<GodRays>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IGodRaysGetter rhs) return false;
            return ((GodRaysCommon)((IGodRaysGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGodRaysGetter? obj)
        {
            return ((GodRaysCommon)((IGodRaysGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GodRaysCommon)((IGodRaysGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

