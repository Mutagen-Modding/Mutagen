/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ImageSpace :
        Fallout4MajorRecord,
        IEquatable<IImageSpaceGetter>,
        IImageSpaceInternal,
        ILoquiObjectSetter<ImageSpace>
    {
        #region Ctor
        protected ImageSpace()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region HdrEyeAdaptSpeed
        public Single HdrEyeAdaptSpeed { get; set; } = default(Single);
        #endregion
        #region HdrTonemapE
        public Single HdrTonemapE { get; set; } = default(Single);
        #endregion
        #region HdrBloomThreshold
        public Single HdrBloomThreshold { get; set; } = default(Single);
        #endregion
        #region HdrBloomScale
        public Single HdrBloomScale { get; set; } = default(Single);
        #endregion
        #region HdrAutoExposureMax
        public Single HdrAutoExposureMax { get; set; } = default(Single);
        #endregion
        #region HdrAutoExposureMin
        public Single HdrAutoExposureMin { get; set; } = default(Single);
        #endregion
        #region HdrSunlightScale
        public Single HdrSunlightScale { get; set; } = default(Single);
        #endregion
        #region HdrSkyScale
        public Single HdrSkyScale { get; set; } = default(Single);
        #endregion
        #region HdrMiddleGray
        public Single HdrMiddleGray { get; set; } = default(Single);
        #endregion
        #region CinematicSaturation
        public Single CinematicSaturation { get; set; } = default(Single);
        #endregion
        #region CinematicBrightness
        public Single CinematicBrightness { get; set; } = default(Single);
        #endregion
        #region CinematicContrast
        public Single CinematicContrast { get; set; } = default(Single);
        #endregion
        #region TintAmount
        public Single TintAmount { get; set; } = default(Single);
        #endregion
        #region TintColor
        public Color TintColor { get; set; } = default(Color);
        #endregion
        #region DepthOfFieldStrength
        public Single DepthOfFieldStrength { get; set; } = default(Single);
        #endregion
        #region DepthOfFieldDistance
        public Single DepthOfFieldDistance { get; set; } = default(Single);
        #endregion
        #region DepthOfFieldRange
        public Single DepthOfFieldRange { get; set; } = default(Single);
        #endregion
        #region DepthOfFieldUnused
        public Int16 DepthOfFieldUnused { get; set; } = default(Int16);
        #endregion
        #region DepthOfFieldBlurRadius
        public Byte DepthOfFieldBlurRadius { get; set; } = default(Byte);
        public static RangeUInt8 DepthOfFieldBlurRadius_Range = new RangeUInt8(0, 7);
        #endregion
        #region DepthOfFieldSky
        public Boolean DepthOfFieldSky { get; set; } = default(Boolean);
        #endregion
        #region DepthOfFieldVignetteRadius
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _DepthOfFieldVignetteRadius;
        public Single DepthOfFieldVignetteRadius
        {
            get => this._DepthOfFieldVignetteRadius;
            set
            {
                this.DNAMDataTypeState &= ~DNAMDataType.Break0;
                this._DepthOfFieldVignetteRadius = value;
            }
        }
        #endregion
        #region DepthOfFieldVignetteStrength
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _DepthOfFieldVignetteStrength;
        public Single DepthOfFieldVignetteStrength
        {
            get => this._DepthOfFieldVignetteStrength;
            set
            {
                this.DNAMDataTypeState &= ~DNAMDataType.Break0;
                this._DepthOfFieldVignetteStrength = value;
            }
        }
        #endregion
        #region Lut
        public String? Lut { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IImageSpaceGetter.Lut => this.Lut;
        #endregion
        #region DNAMDataTypeState
        public ImageSpace.DNAMDataType DNAMDataTypeState { get; set; } = default(ImageSpace.DNAMDataType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ImageSpaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.HdrEyeAdaptSpeed = initialValue;
                this.HdrTonemapE = initialValue;
                this.HdrBloomThreshold = initialValue;
                this.HdrBloomScale = initialValue;
                this.HdrAutoExposureMax = initialValue;
                this.HdrAutoExposureMin = initialValue;
                this.HdrSunlightScale = initialValue;
                this.HdrSkyScale = initialValue;
                this.HdrMiddleGray = initialValue;
                this.CinematicSaturation = initialValue;
                this.CinematicBrightness = initialValue;
                this.CinematicContrast = initialValue;
                this.TintAmount = initialValue;
                this.TintColor = initialValue;
                this.DepthOfFieldStrength = initialValue;
                this.DepthOfFieldDistance = initialValue;
                this.DepthOfFieldRange = initialValue;
                this.DepthOfFieldUnused = initialValue;
                this.DepthOfFieldBlurRadius = initialValue;
                this.DepthOfFieldSky = initialValue;
                this.DepthOfFieldVignetteRadius = initialValue;
                this.DepthOfFieldVignetteStrength = initialValue;
                this.Lut = initialValue;
                this.DNAMDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem HdrEyeAdaptSpeed,
                TItem HdrTonemapE,
                TItem HdrBloomThreshold,
                TItem HdrBloomScale,
                TItem HdrAutoExposureMax,
                TItem HdrAutoExposureMin,
                TItem HdrSunlightScale,
                TItem HdrSkyScale,
                TItem HdrMiddleGray,
                TItem CinematicSaturation,
                TItem CinematicBrightness,
                TItem CinematicContrast,
                TItem TintAmount,
                TItem TintColor,
                TItem DepthOfFieldStrength,
                TItem DepthOfFieldDistance,
                TItem DepthOfFieldRange,
                TItem DepthOfFieldUnused,
                TItem DepthOfFieldBlurRadius,
                TItem DepthOfFieldSky,
                TItem DepthOfFieldVignetteRadius,
                TItem DepthOfFieldVignetteStrength,
                TItem Lut,
                TItem DNAMDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.HdrEyeAdaptSpeed = HdrEyeAdaptSpeed;
                this.HdrTonemapE = HdrTonemapE;
                this.HdrBloomThreshold = HdrBloomThreshold;
                this.HdrBloomScale = HdrBloomScale;
                this.HdrAutoExposureMax = HdrAutoExposureMax;
                this.HdrAutoExposureMin = HdrAutoExposureMin;
                this.HdrSunlightScale = HdrSunlightScale;
                this.HdrSkyScale = HdrSkyScale;
                this.HdrMiddleGray = HdrMiddleGray;
                this.CinematicSaturation = CinematicSaturation;
                this.CinematicBrightness = CinematicBrightness;
                this.CinematicContrast = CinematicContrast;
                this.TintAmount = TintAmount;
                this.TintColor = TintColor;
                this.DepthOfFieldStrength = DepthOfFieldStrength;
                this.DepthOfFieldDistance = DepthOfFieldDistance;
                this.DepthOfFieldRange = DepthOfFieldRange;
                this.DepthOfFieldUnused = DepthOfFieldUnused;
                this.DepthOfFieldBlurRadius = DepthOfFieldBlurRadius;
                this.DepthOfFieldSky = DepthOfFieldSky;
                this.DepthOfFieldVignetteRadius = DepthOfFieldVignetteRadius;
                this.DepthOfFieldVignetteStrength = DepthOfFieldVignetteStrength;
                this.Lut = Lut;
                this.DNAMDataTypeState = DNAMDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem HdrEyeAdaptSpeed;
            public TItem HdrTonemapE;
            public TItem HdrBloomThreshold;
            public TItem HdrBloomScale;
            public TItem HdrAutoExposureMax;
            public TItem HdrAutoExposureMin;
            public TItem HdrSunlightScale;
            public TItem HdrSkyScale;
            public TItem HdrMiddleGray;
            public TItem CinematicSaturation;
            public TItem CinematicBrightness;
            public TItem CinematicContrast;
            public TItem TintAmount;
            public TItem TintColor;
            public TItem DepthOfFieldStrength;
            public TItem DepthOfFieldDistance;
            public TItem DepthOfFieldRange;
            public TItem DepthOfFieldUnused;
            public TItem DepthOfFieldBlurRadius;
            public TItem DepthOfFieldSky;
            public TItem DepthOfFieldVignetteRadius;
            public TItem DepthOfFieldVignetteStrength;
            public TItem Lut;
            public TItem DNAMDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.HdrEyeAdaptSpeed, rhs.HdrEyeAdaptSpeed)) return false;
                if (!object.Equals(this.HdrTonemapE, rhs.HdrTonemapE)) return false;
                if (!object.Equals(this.HdrBloomThreshold, rhs.HdrBloomThreshold)) return false;
                if (!object.Equals(this.HdrBloomScale, rhs.HdrBloomScale)) return false;
                if (!object.Equals(this.HdrAutoExposureMax, rhs.HdrAutoExposureMax)) return false;
                if (!object.Equals(this.HdrAutoExposureMin, rhs.HdrAutoExposureMin)) return false;
                if (!object.Equals(this.HdrSunlightScale, rhs.HdrSunlightScale)) return false;
                if (!object.Equals(this.HdrSkyScale, rhs.HdrSkyScale)) return false;
                if (!object.Equals(this.HdrMiddleGray, rhs.HdrMiddleGray)) return false;
                if (!object.Equals(this.CinematicSaturation, rhs.CinematicSaturation)) return false;
                if (!object.Equals(this.CinematicBrightness, rhs.CinematicBrightness)) return false;
                if (!object.Equals(this.CinematicContrast, rhs.CinematicContrast)) return false;
                if (!object.Equals(this.TintAmount, rhs.TintAmount)) return false;
                if (!object.Equals(this.TintColor, rhs.TintColor)) return false;
                if (!object.Equals(this.DepthOfFieldStrength, rhs.DepthOfFieldStrength)) return false;
                if (!object.Equals(this.DepthOfFieldDistance, rhs.DepthOfFieldDistance)) return false;
                if (!object.Equals(this.DepthOfFieldRange, rhs.DepthOfFieldRange)) return false;
                if (!object.Equals(this.DepthOfFieldUnused, rhs.DepthOfFieldUnused)) return false;
                if (!object.Equals(this.DepthOfFieldBlurRadius, rhs.DepthOfFieldBlurRadius)) return false;
                if (!object.Equals(this.DepthOfFieldSky, rhs.DepthOfFieldSky)) return false;
                if (!object.Equals(this.DepthOfFieldVignetteRadius, rhs.DepthOfFieldVignetteRadius)) return false;
                if (!object.Equals(this.DepthOfFieldVignetteStrength, rhs.DepthOfFieldVignetteStrength)) return false;
                if (!object.Equals(this.Lut, rhs.Lut)) return false;
                if (!object.Equals(this.DNAMDataTypeState, rhs.DNAMDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.HdrEyeAdaptSpeed);
                hash.Add(this.HdrTonemapE);
                hash.Add(this.HdrBloomThreshold);
                hash.Add(this.HdrBloomScale);
                hash.Add(this.HdrAutoExposureMax);
                hash.Add(this.HdrAutoExposureMin);
                hash.Add(this.HdrSunlightScale);
                hash.Add(this.HdrSkyScale);
                hash.Add(this.HdrMiddleGray);
                hash.Add(this.CinematicSaturation);
                hash.Add(this.CinematicBrightness);
                hash.Add(this.CinematicContrast);
                hash.Add(this.TintAmount);
                hash.Add(this.TintColor);
                hash.Add(this.DepthOfFieldStrength);
                hash.Add(this.DepthOfFieldDistance);
                hash.Add(this.DepthOfFieldRange);
                hash.Add(this.DepthOfFieldUnused);
                hash.Add(this.DepthOfFieldBlurRadius);
                hash.Add(this.DepthOfFieldSky);
                hash.Add(this.DepthOfFieldVignetteRadius);
                hash.Add(this.DepthOfFieldVignetteStrength);
                hash.Add(this.Lut);
                hash.Add(this.DNAMDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.HdrEyeAdaptSpeed)) return false;
                if (!eval(this.HdrTonemapE)) return false;
                if (!eval(this.HdrBloomThreshold)) return false;
                if (!eval(this.HdrBloomScale)) return false;
                if (!eval(this.HdrAutoExposureMax)) return false;
                if (!eval(this.HdrAutoExposureMin)) return false;
                if (!eval(this.HdrSunlightScale)) return false;
                if (!eval(this.HdrSkyScale)) return false;
                if (!eval(this.HdrMiddleGray)) return false;
                if (!eval(this.CinematicSaturation)) return false;
                if (!eval(this.CinematicBrightness)) return false;
                if (!eval(this.CinematicContrast)) return false;
                if (!eval(this.TintAmount)) return false;
                if (!eval(this.TintColor)) return false;
                if (!eval(this.DepthOfFieldStrength)) return false;
                if (!eval(this.DepthOfFieldDistance)) return false;
                if (!eval(this.DepthOfFieldRange)) return false;
                if (!eval(this.DepthOfFieldUnused)) return false;
                if (!eval(this.DepthOfFieldBlurRadius)) return false;
                if (!eval(this.DepthOfFieldSky)) return false;
                if (!eval(this.DepthOfFieldVignetteRadius)) return false;
                if (!eval(this.DepthOfFieldVignetteStrength)) return false;
                if (!eval(this.Lut)) return false;
                if (!eval(this.DNAMDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.HdrEyeAdaptSpeed)) return true;
                if (eval(this.HdrTonemapE)) return true;
                if (eval(this.HdrBloomThreshold)) return true;
                if (eval(this.HdrBloomScale)) return true;
                if (eval(this.HdrAutoExposureMax)) return true;
                if (eval(this.HdrAutoExposureMin)) return true;
                if (eval(this.HdrSunlightScale)) return true;
                if (eval(this.HdrSkyScale)) return true;
                if (eval(this.HdrMiddleGray)) return true;
                if (eval(this.CinematicSaturation)) return true;
                if (eval(this.CinematicBrightness)) return true;
                if (eval(this.CinematicContrast)) return true;
                if (eval(this.TintAmount)) return true;
                if (eval(this.TintColor)) return true;
                if (eval(this.DepthOfFieldStrength)) return true;
                if (eval(this.DepthOfFieldDistance)) return true;
                if (eval(this.DepthOfFieldRange)) return true;
                if (eval(this.DepthOfFieldUnused)) return true;
                if (eval(this.DepthOfFieldBlurRadius)) return true;
                if (eval(this.DepthOfFieldSky)) return true;
                if (eval(this.DepthOfFieldVignetteRadius)) return true;
                if (eval(this.DepthOfFieldVignetteStrength)) return true;
                if (eval(this.Lut)) return true;
                if (eval(this.DNAMDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ImageSpace.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.HdrEyeAdaptSpeed = eval(this.HdrEyeAdaptSpeed);
                obj.HdrTonemapE = eval(this.HdrTonemapE);
                obj.HdrBloomThreshold = eval(this.HdrBloomThreshold);
                obj.HdrBloomScale = eval(this.HdrBloomScale);
                obj.HdrAutoExposureMax = eval(this.HdrAutoExposureMax);
                obj.HdrAutoExposureMin = eval(this.HdrAutoExposureMin);
                obj.HdrSunlightScale = eval(this.HdrSunlightScale);
                obj.HdrSkyScale = eval(this.HdrSkyScale);
                obj.HdrMiddleGray = eval(this.HdrMiddleGray);
                obj.CinematicSaturation = eval(this.CinematicSaturation);
                obj.CinematicBrightness = eval(this.CinematicBrightness);
                obj.CinematicContrast = eval(this.CinematicContrast);
                obj.TintAmount = eval(this.TintAmount);
                obj.TintColor = eval(this.TintColor);
                obj.DepthOfFieldStrength = eval(this.DepthOfFieldStrength);
                obj.DepthOfFieldDistance = eval(this.DepthOfFieldDistance);
                obj.DepthOfFieldRange = eval(this.DepthOfFieldRange);
                obj.DepthOfFieldUnused = eval(this.DepthOfFieldUnused);
                obj.DepthOfFieldBlurRadius = eval(this.DepthOfFieldBlurRadius);
                obj.DepthOfFieldSky = eval(this.DepthOfFieldSky);
                obj.DepthOfFieldVignetteRadius = eval(this.DepthOfFieldVignetteRadius);
                obj.DepthOfFieldVignetteStrength = eval(this.DepthOfFieldVignetteStrength);
                obj.Lut = eval(this.Lut);
                obj.DNAMDataTypeState = eval(this.DNAMDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ImageSpace.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ImageSpace.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ImageSpace.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.HdrEyeAdaptSpeed ?? true)
                    {
                        sb.AppendItem(HdrEyeAdaptSpeed, "HdrEyeAdaptSpeed");
                    }
                    if (printMask?.HdrTonemapE ?? true)
                    {
                        sb.AppendItem(HdrTonemapE, "HdrTonemapE");
                    }
                    if (printMask?.HdrBloomThreshold ?? true)
                    {
                        sb.AppendItem(HdrBloomThreshold, "HdrBloomThreshold");
                    }
                    if (printMask?.HdrBloomScale ?? true)
                    {
                        sb.AppendItem(HdrBloomScale, "HdrBloomScale");
                    }
                    if (printMask?.HdrAutoExposureMax ?? true)
                    {
                        sb.AppendItem(HdrAutoExposureMax, "HdrAutoExposureMax");
                    }
                    if (printMask?.HdrAutoExposureMin ?? true)
                    {
                        sb.AppendItem(HdrAutoExposureMin, "HdrAutoExposureMin");
                    }
                    if (printMask?.HdrSunlightScale ?? true)
                    {
                        sb.AppendItem(HdrSunlightScale, "HdrSunlightScale");
                    }
                    if (printMask?.HdrSkyScale ?? true)
                    {
                        sb.AppendItem(HdrSkyScale, "HdrSkyScale");
                    }
                    if (printMask?.HdrMiddleGray ?? true)
                    {
                        sb.AppendItem(HdrMiddleGray, "HdrMiddleGray");
                    }
                    if (printMask?.CinematicSaturation ?? true)
                    {
                        sb.AppendItem(CinematicSaturation, "CinematicSaturation");
                    }
                    if (printMask?.CinematicBrightness ?? true)
                    {
                        sb.AppendItem(CinematicBrightness, "CinematicBrightness");
                    }
                    if (printMask?.CinematicContrast ?? true)
                    {
                        sb.AppendItem(CinematicContrast, "CinematicContrast");
                    }
                    if (printMask?.TintAmount ?? true)
                    {
                        sb.AppendItem(TintAmount, "TintAmount");
                    }
                    if (printMask?.TintColor ?? true)
                    {
                        sb.AppendItem(TintColor, "TintColor");
                    }
                    if (printMask?.DepthOfFieldStrength ?? true)
                    {
                        sb.AppendItem(DepthOfFieldStrength, "DepthOfFieldStrength");
                    }
                    if (printMask?.DepthOfFieldDistance ?? true)
                    {
                        sb.AppendItem(DepthOfFieldDistance, "DepthOfFieldDistance");
                    }
                    if (printMask?.DepthOfFieldRange ?? true)
                    {
                        sb.AppendItem(DepthOfFieldRange, "DepthOfFieldRange");
                    }
                    if (printMask?.DepthOfFieldUnused ?? true)
                    {
                        sb.AppendItem(DepthOfFieldUnused, "DepthOfFieldUnused");
                    }
                    if (printMask?.DepthOfFieldBlurRadius ?? true)
                    {
                        sb.AppendItem(DepthOfFieldBlurRadius, "DepthOfFieldBlurRadius");
                    }
                    if (printMask?.DepthOfFieldSky ?? true)
                    {
                        sb.AppendItem(DepthOfFieldSky, "DepthOfFieldSky");
                    }
                    if (printMask?.DepthOfFieldVignetteRadius ?? true)
                    {
                        sb.AppendItem(DepthOfFieldVignetteRadius, "DepthOfFieldVignetteRadius");
                    }
                    if (printMask?.DepthOfFieldVignetteStrength ?? true)
                    {
                        sb.AppendItem(DepthOfFieldVignetteStrength, "DepthOfFieldVignetteStrength");
                    }
                    if (printMask?.Lut ?? true)
                    {
                        sb.AppendItem(Lut, "Lut");
                    }
                    if (printMask?.DNAMDataTypeState ?? true)
                    {
                        sb.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? HdrEyeAdaptSpeed;
            public Exception? HdrTonemapE;
            public Exception? HdrBloomThreshold;
            public Exception? HdrBloomScale;
            public Exception? HdrAutoExposureMax;
            public Exception? HdrAutoExposureMin;
            public Exception? HdrSunlightScale;
            public Exception? HdrSkyScale;
            public Exception? HdrMiddleGray;
            public Exception? CinematicSaturation;
            public Exception? CinematicBrightness;
            public Exception? CinematicContrast;
            public Exception? TintAmount;
            public Exception? TintColor;
            public Exception? DepthOfFieldStrength;
            public Exception? DepthOfFieldDistance;
            public Exception? DepthOfFieldRange;
            public Exception? DepthOfFieldUnused;
            public Exception? DepthOfFieldBlurRadius;
            public Exception? DepthOfFieldSky;
            public Exception? DepthOfFieldVignetteRadius;
            public Exception? DepthOfFieldVignetteStrength;
            public Exception? Lut;
            public Exception? DNAMDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ImageSpace_FieldIndex enu = (ImageSpace_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpace_FieldIndex.HdrEyeAdaptSpeed:
                        return HdrEyeAdaptSpeed;
                    case ImageSpace_FieldIndex.HdrTonemapE:
                        return HdrTonemapE;
                    case ImageSpace_FieldIndex.HdrBloomThreshold:
                        return HdrBloomThreshold;
                    case ImageSpace_FieldIndex.HdrBloomScale:
                        return HdrBloomScale;
                    case ImageSpace_FieldIndex.HdrAutoExposureMax:
                        return HdrAutoExposureMax;
                    case ImageSpace_FieldIndex.HdrAutoExposureMin:
                        return HdrAutoExposureMin;
                    case ImageSpace_FieldIndex.HdrSunlightScale:
                        return HdrSunlightScale;
                    case ImageSpace_FieldIndex.HdrSkyScale:
                        return HdrSkyScale;
                    case ImageSpace_FieldIndex.HdrMiddleGray:
                        return HdrMiddleGray;
                    case ImageSpace_FieldIndex.CinematicSaturation:
                        return CinematicSaturation;
                    case ImageSpace_FieldIndex.CinematicBrightness:
                        return CinematicBrightness;
                    case ImageSpace_FieldIndex.CinematicContrast:
                        return CinematicContrast;
                    case ImageSpace_FieldIndex.TintAmount:
                        return TintAmount;
                    case ImageSpace_FieldIndex.TintColor:
                        return TintColor;
                    case ImageSpace_FieldIndex.DepthOfFieldStrength:
                        return DepthOfFieldStrength;
                    case ImageSpace_FieldIndex.DepthOfFieldDistance:
                        return DepthOfFieldDistance;
                    case ImageSpace_FieldIndex.DepthOfFieldRange:
                        return DepthOfFieldRange;
                    case ImageSpace_FieldIndex.DepthOfFieldUnused:
                        return DepthOfFieldUnused;
                    case ImageSpace_FieldIndex.DepthOfFieldBlurRadius:
                        return DepthOfFieldBlurRadius;
                    case ImageSpace_FieldIndex.DepthOfFieldSky:
                        return DepthOfFieldSky;
                    case ImageSpace_FieldIndex.DepthOfFieldVignetteRadius:
                        return DepthOfFieldVignetteRadius;
                    case ImageSpace_FieldIndex.DepthOfFieldVignetteStrength:
                        return DepthOfFieldVignetteStrength;
                    case ImageSpace_FieldIndex.Lut:
                        return Lut;
                    case ImageSpace_FieldIndex.DNAMDataTypeState:
                        return DNAMDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ImageSpace_FieldIndex enu = (ImageSpace_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpace_FieldIndex.HdrEyeAdaptSpeed:
                        this.HdrEyeAdaptSpeed = ex;
                        break;
                    case ImageSpace_FieldIndex.HdrTonemapE:
                        this.HdrTonemapE = ex;
                        break;
                    case ImageSpace_FieldIndex.HdrBloomThreshold:
                        this.HdrBloomThreshold = ex;
                        break;
                    case ImageSpace_FieldIndex.HdrBloomScale:
                        this.HdrBloomScale = ex;
                        break;
                    case ImageSpace_FieldIndex.HdrAutoExposureMax:
                        this.HdrAutoExposureMax = ex;
                        break;
                    case ImageSpace_FieldIndex.HdrAutoExposureMin:
                        this.HdrAutoExposureMin = ex;
                        break;
                    case ImageSpace_FieldIndex.HdrSunlightScale:
                        this.HdrSunlightScale = ex;
                        break;
                    case ImageSpace_FieldIndex.HdrSkyScale:
                        this.HdrSkyScale = ex;
                        break;
                    case ImageSpace_FieldIndex.HdrMiddleGray:
                        this.HdrMiddleGray = ex;
                        break;
                    case ImageSpace_FieldIndex.CinematicSaturation:
                        this.CinematicSaturation = ex;
                        break;
                    case ImageSpace_FieldIndex.CinematicBrightness:
                        this.CinematicBrightness = ex;
                        break;
                    case ImageSpace_FieldIndex.CinematicContrast:
                        this.CinematicContrast = ex;
                        break;
                    case ImageSpace_FieldIndex.TintAmount:
                        this.TintAmount = ex;
                        break;
                    case ImageSpace_FieldIndex.TintColor:
                        this.TintColor = ex;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldStrength:
                        this.DepthOfFieldStrength = ex;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldDistance:
                        this.DepthOfFieldDistance = ex;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldRange:
                        this.DepthOfFieldRange = ex;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldUnused:
                        this.DepthOfFieldUnused = ex;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldBlurRadius:
                        this.DepthOfFieldBlurRadius = ex;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldSky:
                        this.DepthOfFieldSky = ex;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldVignetteRadius:
                        this.DepthOfFieldVignetteRadius = ex;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldVignetteStrength:
                        this.DepthOfFieldVignetteStrength = ex;
                        break;
                    case ImageSpace_FieldIndex.Lut:
                        this.Lut = ex;
                        break;
                    case ImageSpace_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ImageSpace_FieldIndex enu = (ImageSpace_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpace_FieldIndex.HdrEyeAdaptSpeed:
                        this.HdrEyeAdaptSpeed = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.HdrTonemapE:
                        this.HdrTonemapE = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.HdrBloomThreshold:
                        this.HdrBloomThreshold = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.HdrBloomScale:
                        this.HdrBloomScale = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.HdrAutoExposureMax:
                        this.HdrAutoExposureMax = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.HdrAutoExposureMin:
                        this.HdrAutoExposureMin = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.HdrSunlightScale:
                        this.HdrSunlightScale = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.HdrSkyScale:
                        this.HdrSkyScale = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.HdrMiddleGray:
                        this.HdrMiddleGray = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.CinematicSaturation:
                        this.CinematicSaturation = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.CinematicBrightness:
                        this.CinematicBrightness = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.CinematicContrast:
                        this.CinematicContrast = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.TintAmount:
                        this.TintAmount = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.TintColor:
                        this.TintColor = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldStrength:
                        this.DepthOfFieldStrength = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldDistance:
                        this.DepthOfFieldDistance = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldRange:
                        this.DepthOfFieldRange = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldUnused:
                        this.DepthOfFieldUnused = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldBlurRadius:
                        this.DepthOfFieldBlurRadius = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldSky:
                        this.DepthOfFieldSky = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldVignetteRadius:
                        this.DepthOfFieldVignetteRadius = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.DepthOfFieldVignetteStrength:
                        this.DepthOfFieldVignetteStrength = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.Lut:
                        this.Lut = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.DNAMDataTypeState:
                        this.DNAMDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (HdrEyeAdaptSpeed != null) return true;
                if (HdrTonemapE != null) return true;
                if (HdrBloomThreshold != null) return true;
                if (HdrBloomScale != null) return true;
                if (HdrAutoExposureMax != null) return true;
                if (HdrAutoExposureMin != null) return true;
                if (HdrSunlightScale != null) return true;
                if (HdrSkyScale != null) return true;
                if (HdrMiddleGray != null) return true;
                if (CinematicSaturation != null) return true;
                if (CinematicBrightness != null) return true;
                if (CinematicContrast != null) return true;
                if (TintAmount != null) return true;
                if (TintColor != null) return true;
                if (DepthOfFieldStrength != null) return true;
                if (DepthOfFieldDistance != null) return true;
                if (DepthOfFieldRange != null) return true;
                if (DepthOfFieldUnused != null) return true;
                if (DepthOfFieldBlurRadius != null) return true;
                if (DepthOfFieldSky != null) return true;
                if (DepthOfFieldVignetteRadius != null) return true;
                if (DepthOfFieldVignetteStrength != null) return true;
                if (Lut != null) return true;
                if (DNAMDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(HdrEyeAdaptSpeed, "HdrEyeAdaptSpeed");
                }
                {
                    sb.AppendItem(HdrTonemapE, "HdrTonemapE");
                }
                {
                    sb.AppendItem(HdrBloomThreshold, "HdrBloomThreshold");
                }
                {
                    sb.AppendItem(HdrBloomScale, "HdrBloomScale");
                }
                {
                    sb.AppendItem(HdrAutoExposureMax, "HdrAutoExposureMax");
                }
                {
                    sb.AppendItem(HdrAutoExposureMin, "HdrAutoExposureMin");
                }
                {
                    sb.AppendItem(HdrSunlightScale, "HdrSunlightScale");
                }
                {
                    sb.AppendItem(HdrSkyScale, "HdrSkyScale");
                }
                {
                    sb.AppendItem(HdrMiddleGray, "HdrMiddleGray");
                }
                {
                    sb.AppendItem(CinematicSaturation, "CinematicSaturation");
                }
                {
                    sb.AppendItem(CinematicBrightness, "CinematicBrightness");
                }
                {
                    sb.AppendItem(CinematicContrast, "CinematicContrast");
                }
                {
                    sb.AppendItem(TintAmount, "TintAmount");
                }
                {
                    sb.AppendItem(TintColor, "TintColor");
                }
                {
                    sb.AppendItem(DepthOfFieldStrength, "DepthOfFieldStrength");
                }
                {
                    sb.AppendItem(DepthOfFieldDistance, "DepthOfFieldDistance");
                }
                {
                    sb.AppendItem(DepthOfFieldRange, "DepthOfFieldRange");
                }
                {
                    sb.AppendItem(DepthOfFieldUnused, "DepthOfFieldUnused");
                }
                {
                    sb.AppendItem(DepthOfFieldBlurRadius, "DepthOfFieldBlurRadius");
                }
                {
                    sb.AppendItem(DepthOfFieldSky, "DepthOfFieldSky");
                }
                {
                    sb.AppendItem(DepthOfFieldVignetteRadius, "DepthOfFieldVignetteRadius");
                }
                {
                    sb.AppendItem(DepthOfFieldVignetteStrength, "DepthOfFieldVignetteStrength");
                }
                {
                    sb.AppendItem(Lut, "Lut");
                }
                {
                    sb.AppendItem(DNAMDataTypeState, "DNAMDataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.HdrEyeAdaptSpeed = this.HdrEyeAdaptSpeed.Combine(rhs.HdrEyeAdaptSpeed);
                ret.HdrTonemapE = this.HdrTonemapE.Combine(rhs.HdrTonemapE);
                ret.HdrBloomThreshold = this.HdrBloomThreshold.Combine(rhs.HdrBloomThreshold);
                ret.HdrBloomScale = this.HdrBloomScale.Combine(rhs.HdrBloomScale);
                ret.HdrAutoExposureMax = this.HdrAutoExposureMax.Combine(rhs.HdrAutoExposureMax);
                ret.HdrAutoExposureMin = this.HdrAutoExposureMin.Combine(rhs.HdrAutoExposureMin);
                ret.HdrSunlightScale = this.HdrSunlightScale.Combine(rhs.HdrSunlightScale);
                ret.HdrSkyScale = this.HdrSkyScale.Combine(rhs.HdrSkyScale);
                ret.HdrMiddleGray = this.HdrMiddleGray.Combine(rhs.HdrMiddleGray);
                ret.CinematicSaturation = this.CinematicSaturation.Combine(rhs.CinematicSaturation);
                ret.CinematicBrightness = this.CinematicBrightness.Combine(rhs.CinematicBrightness);
                ret.CinematicContrast = this.CinematicContrast.Combine(rhs.CinematicContrast);
                ret.TintAmount = this.TintAmount.Combine(rhs.TintAmount);
                ret.TintColor = this.TintColor.Combine(rhs.TintColor);
                ret.DepthOfFieldStrength = this.DepthOfFieldStrength.Combine(rhs.DepthOfFieldStrength);
                ret.DepthOfFieldDistance = this.DepthOfFieldDistance.Combine(rhs.DepthOfFieldDistance);
                ret.DepthOfFieldRange = this.DepthOfFieldRange.Combine(rhs.DepthOfFieldRange);
                ret.DepthOfFieldUnused = this.DepthOfFieldUnused.Combine(rhs.DepthOfFieldUnused);
                ret.DepthOfFieldBlurRadius = this.DepthOfFieldBlurRadius.Combine(rhs.DepthOfFieldBlurRadius);
                ret.DepthOfFieldSky = this.DepthOfFieldSky.Combine(rhs.DepthOfFieldSky);
                ret.DepthOfFieldVignetteRadius = this.DepthOfFieldVignetteRadius.Combine(rhs.DepthOfFieldVignetteRadius);
                ret.DepthOfFieldVignetteStrength = this.DepthOfFieldVignetteStrength.Combine(rhs.DepthOfFieldVignetteStrength);
                ret.Lut = this.Lut.Combine(rhs.Lut);
                ret.DNAMDataTypeState = this.DNAMDataTypeState.Combine(rhs.DNAMDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool HdrEyeAdaptSpeed;
            public bool HdrTonemapE;
            public bool HdrBloomThreshold;
            public bool HdrBloomScale;
            public bool HdrAutoExposureMax;
            public bool HdrAutoExposureMin;
            public bool HdrSunlightScale;
            public bool HdrSkyScale;
            public bool HdrMiddleGray;
            public bool CinematicSaturation;
            public bool CinematicBrightness;
            public bool CinematicContrast;
            public bool TintAmount;
            public bool TintColor;
            public bool DepthOfFieldStrength;
            public bool DepthOfFieldDistance;
            public bool DepthOfFieldRange;
            public bool DepthOfFieldUnused;
            public bool DepthOfFieldBlurRadius;
            public bool DepthOfFieldSky;
            public bool DepthOfFieldVignetteRadius;
            public bool DepthOfFieldVignetteStrength;
            public bool Lut;
            public bool DNAMDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.HdrEyeAdaptSpeed = defaultOn;
                this.HdrTonemapE = defaultOn;
                this.HdrBloomThreshold = defaultOn;
                this.HdrBloomScale = defaultOn;
                this.HdrAutoExposureMax = defaultOn;
                this.HdrAutoExposureMin = defaultOn;
                this.HdrSunlightScale = defaultOn;
                this.HdrSkyScale = defaultOn;
                this.HdrMiddleGray = defaultOn;
                this.CinematicSaturation = defaultOn;
                this.CinematicBrightness = defaultOn;
                this.CinematicContrast = defaultOn;
                this.TintAmount = defaultOn;
                this.TintColor = defaultOn;
                this.DepthOfFieldStrength = defaultOn;
                this.DepthOfFieldDistance = defaultOn;
                this.DepthOfFieldRange = defaultOn;
                this.DepthOfFieldUnused = defaultOn;
                this.DepthOfFieldBlurRadius = defaultOn;
                this.DepthOfFieldSky = defaultOn;
                this.DepthOfFieldVignetteRadius = defaultOn;
                this.DepthOfFieldVignetteStrength = defaultOn;
                this.Lut = defaultOn;
                this.DNAMDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((HdrEyeAdaptSpeed, null));
                ret.Add((HdrTonemapE, null));
                ret.Add((HdrBloomThreshold, null));
                ret.Add((HdrBloomScale, null));
                ret.Add((HdrAutoExposureMax, null));
                ret.Add((HdrAutoExposureMin, null));
                ret.Add((HdrSunlightScale, null));
                ret.Add((HdrSkyScale, null));
                ret.Add((HdrMiddleGray, null));
                ret.Add((CinematicSaturation, null));
                ret.Add((CinematicBrightness, null));
                ret.Add((CinematicContrast, null));
                ret.Add((TintAmount, null));
                ret.Add((TintColor, null));
                ret.Add((DepthOfFieldStrength, null));
                ret.Add((DepthOfFieldDistance, null));
                ret.Add((DepthOfFieldRange, null));
                ret.Add((DepthOfFieldUnused, null));
                ret.Add((DepthOfFieldBlurRadius, null));
                ret.Add((DepthOfFieldSky, null));
                ret.Add((DepthOfFieldVignetteRadius, null));
                ret.Add((DepthOfFieldVignetteStrength, null));
                ret.Add((Lut, null));
                ret.Add((DNAMDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ImageSpace_Registration.TriggeringRecordType;
        public ImageSpace(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ImageSpace(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ImageSpace(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ImageSpace(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public ImageSpace(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ImageSpace>.ToString(this);
        }

        protected override Type LinkType => typeof(IImageSpace);

        [Flags]
        public enum DNAMDataType
        {
            Break0 = 1
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IImageSpaceGetter rhs) return false;
            return ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IImageSpaceGetter? obj)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ImageSpaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ImageSpaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ImageSpace CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ImageSpace();
            ((ImageSpaceSetterCommon)((IImageSpaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ImageSpace item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ImageSpaceSetterCommon)((IImageSpaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ImageSpace GetNew()
        {
            return new ImageSpace();
        }

    }
    #endregion

    #region Interface
    public partial interface IImageSpace :
        IFallout4MajorRecordInternal,
        IImageSpaceGetter,
        ILoquiObjectSetter<IImageSpaceInternal>
    {
        new Single HdrEyeAdaptSpeed { get; set; }
        new Single HdrTonemapE { get; set; }
        new Single HdrBloomThreshold { get; set; }
        new Single HdrBloomScale { get; set; }
        new Single HdrAutoExposureMax { get; set; }
        new Single HdrAutoExposureMin { get; set; }
        new Single HdrSunlightScale { get; set; }
        new Single HdrSkyScale { get; set; }
        new Single HdrMiddleGray { get; set; }
        new Single CinematicSaturation { get; set; }
        new Single CinematicBrightness { get; set; }
        new Single CinematicContrast { get; set; }
        new Single TintAmount { get; set; }
        new Color TintColor { get; set; }
        new Single DepthOfFieldStrength { get; set; }
        new Single DepthOfFieldDistance { get; set; }
        new Single DepthOfFieldRange { get; set; }
        new Int16 DepthOfFieldUnused { get; set; }
        new Byte DepthOfFieldBlurRadius { get; set; }
        new Boolean DepthOfFieldSky { get; set; }
        new Single DepthOfFieldVignetteRadius { get; set; }
        new Single DepthOfFieldVignetteStrength { get; set; }
        new String? Lut { get; set; }
        new ImageSpace.DNAMDataType DNAMDataTypeState { get; set; }
    }

    public partial interface IImageSpaceInternal :
        IFallout4MajorRecordInternal,
        IImageSpace,
        IImageSpaceGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.IMGS)]
    public partial interface IImageSpaceGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IImageSpaceGetter>,
        IMapsToGetter<IImageSpaceGetter>
    {
        static new ILoquiRegistration StaticRegistration => ImageSpace_Registration.Instance;
        Single HdrEyeAdaptSpeed { get; }
        Single HdrTonemapE { get; }
        Single HdrBloomThreshold { get; }
        Single HdrBloomScale { get; }
        Single HdrAutoExposureMax { get; }
        Single HdrAutoExposureMin { get; }
        Single HdrSunlightScale { get; }
        Single HdrSkyScale { get; }
        Single HdrMiddleGray { get; }
        Single CinematicSaturation { get; }
        Single CinematicBrightness { get; }
        Single CinematicContrast { get; }
        Single TintAmount { get; }
        Color TintColor { get; }
        Single DepthOfFieldStrength { get; }
        Single DepthOfFieldDistance { get; }
        Single DepthOfFieldRange { get; }
        Int16 DepthOfFieldUnused { get; }
        Byte DepthOfFieldBlurRadius { get; }
        Boolean DepthOfFieldSky { get; }
        Single DepthOfFieldVignetteRadius { get; }
        Single DepthOfFieldVignetteStrength { get; }
        String? Lut { get; }
        ImageSpace.DNAMDataType DNAMDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ImageSpaceMixIn
    {
        public static void Clear(this IImageSpaceInternal item)
        {
            ((ImageSpaceSetterCommon)((IImageSpaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ImageSpace.Mask<bool> GetEqualsMask(
            this IImageSpaceGetter item,
            IImageSpaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IImageSpaceGetter item,
            string? name = null,
            ImageSpace.Mask<bool>? printMask = null)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IImageSpaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ImageSpace.Mask<bool>? printMask = null)
        {
            ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IImageSpaceGetter item,
            IImageSpaceGetter rhs,
            ImageSpace.TranslationMask? equalsMask = null)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IImageSpaceInternal lhs,
            IImageSpaceGetter rhs,
            out ImageSpace.ErrorMask errorMask,
            ImageSpace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ImageSpace.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IImageSpaceInternal lhs,
            IImageSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ImageSpace DeepCopy(
            this IImageSpaceGetter item,
            ImageSpace.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ImageSpace DeepCopy(
            this IImageSpaceGetter item,
            out ImageSpace.ErrorMask errorMask,
            ImageSpace.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ImageSpace DeepCopy(
            this IImageSpaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ImageSpace Duplicate(
            this IImageSpaceGetter item,
            FormKey formKey,
            ImageSpace.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ImageSpace Duplicate(
            this IImageSpaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IImageSpaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ImageSpaceSetterCommon)((IImageSpaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum ImageSpace_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        HdrEyeAdaptSpeed = 7,
        HdrTonemapE = 8,
        HdrBloomThreshold = 9,
        HdrBloomScale = 10,
        HdrAutoExposureMax = 11,
        HdrAutoExposureMin = 12,
        HdrSunlightScale = 13,
        HdrSkyScale = 14,
        HdrMiddleGray = 15,
        CinematicSaturation = 16,
        CinematicBrightness = 17,
        CinematicContrast = 18,
        TintAmount = 19,
        TintColor = 20,
        DepthOfFieldStrength = 21,
        DepthOfFieldDistance = 22,
        DepthOfFieldRange = 23,
        DepthOfFieldUnused = 24,
        DepthOfFieldBlurRadius = 25,
        DepthOfFieldSky = 26,
        DepthOfFieldVignetteRadius = 27,
        DepthOfFieldVignetteStrength = 28,
        Lut = 29,
        DNAMDataTypeState = 30,
    }
    #endregion

    #region Registration
    internal partial class ImageSpace_Registration : ILoquiRegistration
    {
        public static readonly ImageSpace_Registration Instance = new ImageSpace_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 24;

        public const ushort FieldCount = 31;

        public static readonly Type MaskType = typeof(ImageSpace.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ImageSpace.ErrorMask);

        public static readonly Type ClassType = typeof(ImageSpace);

        public static readonly Type GetterType = typeof(IImageSpaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IImageSpace);

        public static readonly Type? InternalSetterType = typeof(IImageSpaceInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.ImageSpace";

        public const string Name = "ImageSpace";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.IMGS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.IMGS);
            var all = RecordCollection.Factory(
                RecordTypes.IMGS,
                RecordTypes.ENAM,
                RecordTypes.HNAM,
                RecordTypes.CNAM,
                RecordTypes.TNAM,
                RecordTypes.DNAM,
                RecordTypes.TX00);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ImageSpaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ImageSpaceSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly ImageSpaceSetterCommon Instance = new ImageSpaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IImageSpaceInternal item)
        {
            ClearPartial();
            item.HdrEyeAdaptSpeed = default(Single);
            item.HdrTonemapE = default(Single);
            item.HdrBloomThreshold = default(Single);
            item.HdrBloomScale = default(Single);
            item.HdrAutoExposureMax = default(Single);
            item.HdrAutoExposureMin = default(Single);
            item.HdrSunlightScale = default(Single);
            item.HdrSkyScale = default(Single);
            item.HdrMiddleGray = default(Single);
            item.CinematicSaturation = default(Single);
            item.CinematicBrightness = default(Single);
            item.CinematicContrast = default(Single);
            item.TintAmount = default(Single);
            item.TintColor = default(Color);
            item.DepthOfFieldStrength = default(Single);
            item.DepthOfFieldDistance = default(Single);
            item.DepthOfFieldRange = default(Single);
            item.DepthOfFieldUnused = default(Int16);
            item.DepthOfFieldBlurRadius = default(Byte);
            item.DepthOfFieldSky = default(Boolean);
            item.DepthOfFieldVignetteRadius = default(Single);
            item.DepthOfFieldVignetteStrength = default(Single);
            item.Lut = default;
            item.DNAMDataTypeState = default(ImageSpace.DNAMDataType);
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IImageSpaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IImageSpaceInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IImageSpace obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IImageSpaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IImageSpaceInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ImageSpaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ImageSpaceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ImageSpace)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ImageSpace)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ImageSpaceCommon : Fallout4MajorRecordCommon
    {
        public new static readonly ImageSpaceCommon Instance = new ImageSpaceCommon();

        public ImageSpace.Mask<bool> GetEqualsMask(
            IImageSpaceGetter item,
            IImageSpaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ImageSpace.Mask<bool>(false);
            ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IImageSpaceGetter item,
            IImageSpaceGetter rhs,
            ImageSpace.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.HdrEyeAdaptSpeed = item.HdrEyeAdaptSpeed.EqualsWithin(rhs.HdrEyeAdaptSpeed);
            ret.HdrTonemapE = item.HdrTonemapE.EqualsWithin(rhs.HdrTonemapE);
            ret.HdrBloomThreshold = item.HdrBloomThreshold.EqualsWithin(rhs.HdrBloomThreshold);
            ret.HdrBloomScale = item.HdrBloomScale.EqualsWithin(rhs.HdrBloomScale);
            ret.HdrAutoExposureMax = item.HdrAutoExposureMax.EqualsWithin(rhs.HdrAutoExposureMax);
            ret.HdrAutoExposureMin = item.HdrAutoExposureMin.EqualsWithin(rhs.HdrAutoExposureMin);
            ret.HdrSunlightScale = item.HdrSunlightScale.EqualsWithin(rhs.HdrSunlightScale);
            ret.HdrSkyScale = item.HdrSkyScale.EqualsWithin(rhs.HdrSkyScale);
            ret.HdrMiddleGray = item.HdrMiddleGray.EqualsWithin(rhs.HdrMiddleGray);
            ret.CinematicSaturation = item.CinematicSaturation.EqualsWithin(rhs.CinematicSaturation);
            ret.CinematicBrightness = item.CinematicBrightness.EqualsWithin(rhs.CinematicBrightness);
            ret.CinematicContrast = item.CinematicContrast.EqualsWithin(rhs.CinematicContrast);
            ret.TintAmount = item.TintAmount.EqualsWithin(rhs.TintAmount);
            ret.TintColor = item.TintColor.ColorOnlyEquals(rhs.TintColor);
            ret.DepthOfFieldStrength = item.DepthOfFieldStrength.EqualsWithin(rhs.DepthOfFieldStrength);
            ret.DepthOfFieldDistance = item.DepthOfFieldDistance.EqualsWithin(rhs.DepthOfFieldDistance);
            ret.DepthOfFieldRange = item.DepthOfFieldRange.EqualsWithin(rhs.DepthOfFieldRange);
            ret.DepthOfFieldUnused = item.DepthOfFieldUnused == rhs.DepthOfFieldUnused;
            ret.DepthOfFieldBlurRadius = item.DepthOfFieldBlurRadius == rhs.DepthOfFieldBlurRadius;
            ret.DepthOfFieldSky = item.DepthOfFieldSky == rhs.DepthOfFieldSky;
            ret.DepthOfFieldVignetteRadius = item.DepthOfFieldVignetteRadius.EqualsWithin(rhs.DepthOfFieldVignetteRadius);
            ret.DepthOfFieldVignetteStrength = item.DepthOfFieldVignetteStrength.EqualsWithin(rhs.DepthOfFieldVignetteStrength);
            ret.Lut = string.Equals(item.Lut, rhs.Lut);
            ret.DNAMDataTypeState = item.DNAMDataTypeState == rhs.DNAMDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IImageSpaceGetter item,
            string? name = null,
            ImageSpace.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IImageSpaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ImageSpace.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ImageSpace =>");
            }
            else
            {
                sb.AppendLine($"{name} (ImageSpace) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IImageSpaceGetter item,
            StructuredStringBuilder sb,
            ImageSpace.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.HdrEyeAdaptSpeed ?? true)
            {
                sb.AppendItem(item.HdrEyeAdaptSpeed, "HdrEyeAdaptSpeed");
            }
            if (printMask?.HdrTonemapE ?? true)
            {
                sb.AppendItem(item.HdrTonemapE, "HdrTonemapE");
            }
            if (printMask?.HdrBloomThreshold ?? true)
            {
                sb.AppendItem(item.HdrBloomThreshold, "HdrBloomThreshold");
            }
            if (printMask?.HdrBloomScale ?? true)
            {
                sb.AppendItem(item.HdrBloomScale, "HdrBloomScale");
            }
            if (printMask?.HdrAutoExposureMax ?? true)
            {
                sb.AppendItem(item.HdrAutoExposureMax, "HdrAutoExposureMax");
            }
            if (printMask?.HdrAutoExposureMin ?? true)
            {
                sb.AppendItem(item.HdrAutoExposureMin, "HdrAutoExposureMin");
            }
            if (printMask?.HdrSunlightScale ?? true)
            {
                sb.AppendItem(item.HdrSunlightScale, "HdrSunlightScale");
            }
            if (printMask?.HdrSkyScale ?? true)
            {
                sb.AppendItem(item.HdrSkyScale, "HdrSkyScale");
            }
            if (printMask?.HdrMiddleGray ?? true)
            {
                sb.AppendItem(item.HdrMiddleGray, "HdrMiddleGray");
            }
            if (printMask?.CinematicSaturation ?? true)
            {
                sb.AppendItem(item.CinematicSaturation, "CinematicSaturation");
            }
            if (printMask?.CinematicBrightness ?? true)
            {
                sb.AppendItem(item.CinematicBrightness, "CinematicBrightness");
            }
            if (printMask?.CinematicContrast ?? true)
            {
                sb.AppendItem(item.CinematicContrast, "CinematicContrast");
            }
            if (printMask?.TintAmount ?? true)
            {
                sb.AppendItem(item.TintAmount, "TintAmount");
            }
            if (printMask?.TintColor ?? true)
            {
                sb.AppendItem(item.TintColor, "TintColor");
            }
            if (printMask?.DepthOfFieldStrength ?? true)
            {
                sb.AppendItem(item.DepthOfFieldStrength, "DepthOfFieldStrength");
            }
            if (printMask?.DepthOfFieldDistance ?? true)
            {
                sb.AppendItem(item.DepthOfFieldDistance, "DepthOfFieldDistance");
            }
            if (printMask?.DepthOfFieldRange ?? true)
            {
                sb.AppendItem(item.DepthOfFieldRange, "DepthOfFieldRange");
            }
            if (printMask?.DepthOfFieldUnused ?? true)
            {
                sb.AppendItem(item.DepthOfFieldUnused, "DepthOfFieldUnused");
            }
            if (printMask?.DepthOfFieldBlurRadius ?? true)
            {
                sb.AppendItem(item.DepthOfFieldBlurRadius, "DepthOfFieldBlurRadius");
            }
            if (printMask?.DepthOfFieldSky ?? true)
            {
                sb.AppendItem(item.DepthOfFieldSky, "DepthOfFieldSky");
            }
            if (printMask?.DepthOfFieldVignetteRadius ?? true)
            {
                sb.AppendItem(item.DepthOfFieldVignetteRadius, "DepthOfFieldVignetteRadius");
            }
            if (printMask?.DepthOfFieldVignetteStrength ?? true)
            {
                sb.AppendItem(item.DepthOfFieldVignetteStrength, "DepthOfFieldVignetteStrength");
            }
            if ((printMask?.Lut ?? true)
                && item.Lut is {} LutItem)
            {
                sb.AppendItem(LutItem, "Lut");
            }
            if (printMask?.DNAMDataTypeState ?? true)
            {
                sb.AppendItem(item.DNAMDataTypeState, "DNAMDataTypeState");
            }
        }
        
        public static ImageSpace_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ImageSpace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (ImageSpace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (ImageSpace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (ImageSpace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (ImageSpace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (ImageSpace_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (ImageSpace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ImageSpace_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ImageSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ImageSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ImageSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ImageSpace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IImageSpaceGetter? lhs,
            IImageSpaceGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrEyeAdaptSpeed) ?? true))
            {
                if (!lhs.HdrEyeAdaptSpeed.EqualsWithin(rhs.HdrEyeAdaptSpeed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrTonemapE) ?? true))
            {
                if (!lhs.HdrTonemapE.EqualsWithin(rhs.HdrTonemapE)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrBloomThreshold) ?? true))
            {
                if (!lhs.HdrBloomThreshold.EqualsWithin(rhs.HdrBloomThreshold)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrBloomScale) ?? true))
            {
                if (!lhs.HdrBloomScale.EqualsWithin(rhs.HdrBloomScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrAutoExposureMax) ?? true))
            {
                if (!lhs.HdrAutoExposureMax.EqualsWithin(rhs.HdrAutoExposureMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrAutoExposureMin) ?? true))
            {
                if (!lhs.HdrAutoExposureMin.EqualsWithin(rhs.HdrAutoExposureMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrSunlightScale) ?? true))
            {
                if (!lhs.HdrSunlightScale.EqualsWithin(rhs.HdrSunlightScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrSkyScale) ?? true))
            {
                if (!lhs.HdrSkyScale.EqualsWithin(rhs.HdrSkyScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrMiddleGray) ?? true))
            {
                if (!lhs.HdrMiddleGray.EqualsWithin(rhs.HdrMiddleGray)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.CinematicSaturation) ?? true))
            {
                if (!lhs.CinematicSaturation.EqualsWithin(rhs.CinematicSaturation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.CinematicBrightness) ?? true))
            {
                if (!lhs.CinematicBrightness.EqualsWithin(rhs.CinematicBrightness)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.CinematicContrast) ?? true))
            {
                if (!lhs.CinematicContrast.EqualsWithin(rhs.CinematicContrast)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.TintAmount) ?? true))
            {
                if (!lhs.TintAmount.EqualsWithin(rhs.TintAmount)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.TintColor) ?? true))
            {
                if (!lhs.TintColor.ColorOnlyEquals(rhs.TintColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldStrength) ?? true))
            {
                if (!lhs.DepthOfFieldStrength.EqualsWithin(rhs.DepthOfFieldStrength)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldDistance) ?? true))
            {
                if (!lhs.DepthOfFieldDistance.EqualsWithin(rhs.DepthOfFieldDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldRange) ?? true))
            {
                if (!lhs.DepthOfFieldRange.EqualsWithin(rhs.DepthOfFieldRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldUnused) ?? true))
            {
                if (lhs.DepthOfFieldUnused != rhs.DepthOfFieldUnused) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldBlurRadius) ?? true))
            {
                if (lhs.DepthOfFieldBlurRadius != rhs.DepthOfFieldBlurRadius) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldSky) ?? true))
            {
                if (lhs.DepthOfFieldSky != rhs.DepthOfFieldSky) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldVignetteRadius) ?? true))
            {
                if (!lhs.DepthOfFieldVignetteRadius.EqualsWithin(rhs.DepthOfFieldVignetteRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldVignetteStrength) ?? true))
            {
                if (!lhs.DepthOfFieldVignetteStrength.EqualsWithin(rhs.DepthOfFieldVignetteStrength)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.Lut) ?? true))
            {
                if (!string.Equals(lhs.Lut, rhs.Lut)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DNAMDataTypeState) ?? true))
            {
                if (lhs.DNAMDataTypeState != rhs.DNAMDataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IImageSpaceGetter?)lhs,
                rhs: rhs as IImageSpaceGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IImageSpaceGetter?)lhs,
                rhs: rhs as IImageSpaceGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IImageSpaceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.HdrEyeAdaptSpeed);
            hash.Add(item.HdrTonemapE);
            hash.Add(item.HdrBloomThreshold);
            hash.Add(item.HdrBloomScale);
            hash.Add(item.HdrAutoExposureMax);
            hash.Add(item.HdrAutoExposureMin);
            hash.Add(item.HdrSunlightScale);
            hash.Add(item.HdrSkyScale);
            hash.Add(item.HdrMiddleGray);
            hash.Add(item.CinematicSaturation);
            hash.Add(item.CinematicBrightness);
            hash.Add(item.CinematicContrast);
            hash.Add(item.TintAmount);
            hash.Add(item.TintColor);
            hash.Add(item.DepthOfFieldStrength);
            hash.Add(item.DepthOfFieldDistance);
            hash.Add(item.DepthOfFieldRange);
            hash.Add(item.DepthOfFieldUnused);
            hash.Add(item.DepthOfFieldBlurRadius);
            hash.Add(item.DepthOfFieldSky);
            hash.Add(item.DepthOfFieldVignetteRadius);
            hash.Add(item.DepthOfFieldVignetteStrength);
            if (item.Lut is {} Lutitem)
            {
                hash.Add(Lutitem);
            }
            hash.Add(item.DNAMDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IImageSpaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IImageSpaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ImageSpace.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IImageSpaceGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public ImageSpace Duplicate(
            IImageSpaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ImageSpace(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IImageSpaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IImageSpaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ImageSpaceSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly ImageSpaceSetterTranslationCommon Instance = new ImageSpaceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IImageSpaceInternal item,
            IImageSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IImageSpace item,
            IImageSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrEyeAdaptSpeed) ?? true))
            {
                item.HdrEyeAdaptSpeed = rhs.HdrEyeAdaptSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrTonemapE) ?? true))
            {
                item.HdrTonemapE = rhs.HdrTonemapE;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrBloomThreshold) ?? true))
            {
                item.HdrBloomThreshold = rhs.HdrBloomThreshold;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrBloomScale) ?? true))
            {
                item.HdrBloomScale = rhs.HdrBloomScale;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrAutoExposureMax) ?? true))
            {
                item.HdrAutoExposureMax = rhs.HdrAutoExposureMax;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrAutoExposureMin) ?? true))
            {
                item.HdrAutoExposureMin = rhs.HdrAutoExposureMin;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrSunlightScale) ?? true))
            {
                item.HdrSunlightScale = rhs.HdrSunlightScale;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrSkyScale) ?? true))
            {
                item.HdrSkyScale = rhs.HdrSkyScale;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.HdrMiddleGray) ?? true))
            {
                item.HdrMiddleGray = rhs.HdrMiddleGray;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.CinematicSaturation) ?? true))
            {
                item.CinematicSaturation = rhs.CinematicSaturation;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.CinematicBrightness) ?? true))
            {
                item.CinematicBrightness = rhs.CinematicBrightness;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.CinematicContrast) ?? true))
            {
                item.CinematicContrast = rhs.CinematicContrast;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.TintAmount) ?? true))
            {
                item.TintAmount = rhs.TintAmount;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.TintColor) ?? true))
            {
                item.TintColor = rhs.TintColor;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldStrength) ?? true))
            {
                item.DepthOfFieldStrength = rhs.DepthOfFieldStrength;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldDistance) ?? true))
            {
                item.DepthOfFieldDistance = rhs.DepthOfFieldDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldRange) ?? true))
            {
                item.DepthOfFieldRange = rhs.DepthOfFieldRange;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldUnused) ?? true))
            {
                item.DepthOfFieldUnused = rhs.DepthOfFieldUnused;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldBlurRadius) ?? true))
            {
                item.DepthOfFieldBlurRadius = rhs.DepthOfFieldBlurRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldSky) ?? true))
            {
                item.DepthOfFieldSky = rhs.DepthOfFieldSky;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldVignetteRadius) ?? true))
            {
                item.DepthOfFieldVignetteRadius = rhs.DepthOfFieldVignetteRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfFieldVignetteStrength) ?? true))
            {
                item.DepthOfFieldVignetteStrength = rhs.DepthOfFieldVignetteStrength;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.Lut) ?? true))
            {
                item.Lut = rhs.Lut;
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DNAMDataTypeState) ?? true))
            {
                item.DNAMDataTypeState = rhs.DNAMDataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IImageSpace item,
            IImageSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImageSpaceInternal)item,
                rhs: (IImageSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImageSpace)item,
                rhs: (IImageSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImageSpaceInternal)item,
                rhs: (IImageSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImageSpace)item,
                rhs: (IImageSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ImageSpace DeepCopy(
            IImageSpaceGetter item,
            ImageSpace.TranslationMask? copyMask = null)
        {
            ImageSpace ret = (ImageSpace)((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).GetNew();
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ImageSpace DeepCopy(
            IImageSpaceGetter item,
            out ImageSpace.ErrorMask errorMask,
            ImageSpace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ImageSpace ret = (ImageSpace)((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).GetNew();
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ImageSpace.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ImageSpace DeepCopy(
            IImageSpaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ImageSpace ret = (ImageSpace)((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).GetNew();
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ImageSpace
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ImageSpace_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ImageSpace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ImageSpaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ImageSpaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ImageSpaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class ImageSpaceBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ImageSpaceBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IImageSpaceGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IImageSpaceGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            ImageSpaceBinaryWriteTranslation.WriteBinaryENAMParsing(
                writer: writer,
                item: item);
            if (writer.MetaData.FormVersion!.Value >= 16)
            {
                using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.HNAM)))
                {
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.HdrEyeAdaptSpeed);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.HdrTonemapE);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.HdrBloomThreshold);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.HdrBloomScale);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.HdrAutoExposureMax);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.HdrAutoExposureMin);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.HdrSunlightScale);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.HdrSkyScale);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.HdrMiddleGray);
                }
            }
            if (writer.MetaData.FormVersion!.Value >= 16)
            {
                using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CNAM)))
                {
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.CinematicSaturation);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.CinematicBrightness);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.CinematicContrast);
                }
            }
            if (writer.MetaData.FormVersion!.Value >= 16)
            {
                using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.TNAM)))
                {
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.TintAmount);
                    ColorBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.TintColor,
                        binaryType: ColorBinaryType.NoAlphaFloat);
                }
            }
            if (writer.MetaData.FormVersion!.Value >= 16)
            {
                using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DNAM)))
                {
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.DepthOfFieldStrength);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.DepthOfFieldDistance);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.DepthOfFieldRange);
                    writer.Write(item.DepthOfFieldUnused);
                    ImageSpaceBinaryWriteTranslation.WriteBinaryDepthOfFieldBlurRadius(
                        writer: writer,
                        item: item);
                    ImageSpaceBinaryWriteTranslation.WriteBinaryDepthOfFieldSky(
                        writer: writer,
                        item: item);
                    if (!item.DNAMDataTypeState.HasFlag(ImageSpace.DNAMDataType.Break0))
                    {
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.DepthOfFieldVignetteRadius);
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.DepthOfFieldVignetteStrength);
                    }
                }
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Lut,
                header: translationParams.ConvertToCustom(RecordTypes.TX00),
                binaryType: StringBinaryType.NullTerminate);
        }

        public static partial void WriteBinaryENAMParsingCustom(
            MutagenWriter writer,
            IImageSpaceGetter item);

        public static void WriteBinaryENAMParsing(
            MutagenWriter writer,
            IImageSpaceGetter item)
        {
            WriteBinaryENAMParsingCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryDepthOfFieldBlurRadiusCustom(
            MutagenWriter writer,
            IImageSpaceGetter item);

        public static void WriteBinaryDepthOfFieldBlurRadius(
            MutagenWriter writer,
            IImageSpaceGetter item)
        {
            WriteBinaryDepthOfFieldBlurRadiusCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryDepthOfFieldSkyCustom(
            MutagenWriter writer,
            IImageSpaceGetter item);

        public static void WriteBinaryDepthOfFieldSky(
            MutagenWriter writer,
            IImageSpaceGetter item)
        {
            WriteBinaryDepthOfFieldSkyCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IImageSpaceGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.IMGS,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IImageSpaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IImageSpaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IImageSpaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ImageSpaceBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly ImageSpaceBinaryCreateTranslation Instance = new ImageSpaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.IMGS;
        public static void FillBinaryStructs(
            IImageSpaceInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IImageSpaceInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ENAM:
                {
                    return ImageSpaceBinaryCreateTranslation.FillBinaryENAMParsingCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.HdrEyeAdaptSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HdrTonemapE = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HdrBloomThreshold = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HdrBloomScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HdrAutoExposureMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HdrAutoExposureMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HdrSunlightScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HdrSkyScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HdrMiddleGray = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)ImageSpace_FieldIndex.HdrMiddleGray;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.CinematicSaturation = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CinematicBrightness = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CinematicContrast = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)ImageSpace_FieldIndex.CinematicContrast;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.TintAmount = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 12) return null;
                    item.TintColor = dataFrame.ReadColor(ColorBinaryType.NoAlphaFloat);
                    return (int)ImageSpace_FieldIndex.TintColor;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.DepthOfFieldStrength = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DepthOfFieldDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DepthOfFieldRange = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 2) return null;
                    item.DepthOfFieldUnused = dataFrame.ReadInt16();
                    ImageSpaceBinaryCreateTranslation.FillBinaryDepthOfFieldBlurRadiusCustom(
                        frame: dataFrame,
                        item: item);
                    ImageSpaceBinaryCreateTranslation.FillBinaryDepthOfFieldSkyCustom(
                        frame: dataFrame,
                        item: item);
                    if (dataFrame.Complete)
                    {
                        item.DNAMDataTypeState |= ImageSpace.DNAMDataType.Break0;
                        return (int)ImageSpace_FieldIndex.DepthOfFieldSky;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.DepthOfFieldVignetteRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DepthOfFieldVignetteStrength = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)ImageSpace_FieldIndex.DepthOfFieldVignetteStrength;
                }
                case RecordTypeInts.TX00:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Lut = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ImageSpace_FieldIndex.Lut;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial ParseResult FillBinaryENAMParsingCustom(
            MutagenFrame frame,
            IImageSpaceInternal item,
            PreviousParse lastParsed);

        public static partial void FillBinaryDepthOfFieldBlurRadiusCustom(
            MutagenFrame frame,
            IImageSpaceInternal item);

        public static partial void FillBinaryDepthOfFieldSkyCustom(
            MutagenFrame frame,
            IImageSpaceInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ImageSpaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class ImageSpaceBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IImageSpaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ImageSpace_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ImageSpace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ImageSpaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ImageSpaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ImageSpaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ImageSpaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IImageSpace);


        #region ENAMParsing
        public partial ParseResult ENAMParsingCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        private RangeInt32? _HNAMLocation;
        #region HdrEyeAdaptSpeed
        private int _HdrEyeAdaptSpeedLocation => _HNAMLocation!.Value.Min;
        private bool _HdrEyeAdaptSpeed_IsSet => _HNAMLocation.HasValue;
        public Single HdrEyeAdaptSpeed => _HdrEyeAdaptSpeed_IsSet ? _recordData.Slice(_HdrEyeAdaptSpeedLocation, 4).Float() : default(Single);
        #endregion
        #region HdrTonemapE
        private int _HdrTonemapELocation => _HNAMLocation!.Value.Min + 0x4;
        private bool _HdrTonemapE_IsSet => _HNAMLocation.HasValue;
        public Single HdrTonemapE => _HdrTonemapE_IsSet ? _recordData.Slice(_HdrTonemapELocation, 4).Float() : default(Single);
        #endregion
        #region HdrBloomThreshold
        private int _HdrBloomThresholdLocation => _HNAMLocation!.Value.Min + 0x8;
        private bool _HdrBloomThreshold_IsSet => _HNAMLocation.HasValue;
        public Single HdrBloomThreshold => _HdrBloomThreshold_IsSet ? _recordData.Slice(_HdrBloomThresholdLocation, 4).Float() : default(Single);
        #endregion
        #region HdrBloomScale
        private int _HdrBloomScaleLocation => _HNAMLocation!.Value.Min + 0xC;
        private bool _HdrBloomScale_IsSet => _HNAMLocation.HasValue;
        public Single HdrBloomScale => _HdrBloomScale_IsSet ? _recordData.Slice(_HdrBloomScaleLocation, 4).Float() : default(Single);
        #endregion
        #region HdrAutoExposureMax
        private int _HdrAutoExposureMaxLocation => _HNAMLocation!.Value.Min + 0x10;
        private bool _HdrAutoExposureMax_IsSet => _HNAMLocation.HasValue;
        public Single HdrAutoExposureMax => _HdrAutoExposureMax_IsSet ? _recordData.Slice(_HdrAutoExposureMaxLocation, 4).Float() : default(Single);
        #endregion
        #region HdrAutoExposureMin
        private int _HdrAutoExposureMinLocation => _HNAMLocation!.Value.Min + 0x14;
        private bool _HdrAutoExposureMin_IsSet => _HNAMLocation.HasValue;
        public Single HdrAutoExposureMin => _HdrAutoExposureMin_IsSet ? _recordData.Slice(_HdrAutoExposureMinLocation, 4).Float() : default(Single);
        #endregion
        #region HdrSunlightScale
        private int _HdrSunlightScaleLocation => _HNAMLocation!.Value.Min + 0x18;
        private bool _HdrSunlightScale_IsSet => _HNAMLocation.HasValue;
        public Single HdrSunlightScale => _HdrSunlightScale_IsSet ? _recordData.Slice(_HdrSunlightScaleLocation, 4).Float() : default(Single);
        #endregion
        #region HdrSkyScale
        private int _HdrSkyScaleLocation => _HNAMLocation!.Value.Min + 0x1C;
        private bool _HdrSkyScale_IsSet => _HNAMLocation.HasValue;
        public Single HdrSkyScale => _HdrSkyScale_IsSet ? _recordData.Slice(_HdrSkyScaleLocation, 4).Float() : default(Single);
        #endregion
        #region HdrMiddleGray
        private int _HdrMiddleGrayLocation => _HNAMLocation!.Value.Min + 0x20;
        private bool _HdrMiddleGray_IsSet => _HNAMLocation.HasValue;
        public Single HdrMiddleGray => _HdrMiddleGray_IsSet ? _recordData.Slice(_HdrMiddleGrayLocation, 4).Float() : default(Single);
        #endregion
        private RangeInt32? _CNAMLocation;
        #region CinematicSaturation
        private int _CinematicSaturationLocation => _CNAMLocation!.Value.Min;
        private bool _CinematicSaturation_IsSet => _CNAMLocation.HasValue;
        public Single CinematicSaturation => _CinematicSaturation_IsSet ? _recordData.Slice(_CinematicSaturationLocation, 4).Float() : default(Single);
        #endregion
        #region CinematicBrightness
        private int _CinematicBrightnessLocation => _CNAMLocation!.Value.Min + 0x4;
        private bool _CinematicBrightness_IsSet => _CNAMLocation.HasValue;
        public Single CinematicBrightness => _CinematicBrightness_IsSet ? _recordData.Slice(_CinematicBrightnessLocation, 4).Float() : default(Single);
        #endregion
        #region CinematicContrast
        private int _CinematicContrastLocation => _CNAMLocation!.Value.Min + 0x8;
        private bool _CinematicContrast_IsSet => _CNAMLocation.HasValue;
        public Single CinematicContrast => _CinematicContrast_IsSet ? _recordData.Slice(_CinematicContrastLocation, 4).Float() : default(Single);
        #endregion
        private RangeInt32? _TNAMLocation;
        #region TintAmount
        private int _TintAmountLocation => _TNAMLocation!.Value.Min;
        private bool _TintAmount_IsSet => _TNAMLocation.HasValue;
        public Single TintAmount => _TintAmount_IsSet ? _recordData.Slice(_TintAmountLocation, 4).Float() : default(Single);
        #endregion
        #region TintColor
        private int _TintColorLocation => _TNAMLocation!.Value.Min + 0x4;
        private bool _TintColor_IsSet => _TNAMLocation.HasValue;
        public Color TintColor => _TintColor_IsSet ? _recordData.Slice(_TintColorLocation, 12).ReadColor(ColorBinaryType.NoAlphaFloat) : default(Color);
        #endregion
        private RangeInt32? _DNAMLocation;
        public ImageSpace.DNAMDataType DNAMDataTypeState { get; private set; }
        #region DepthOfFieldStrength
        private int _DepthOfFieldStrengthLocation => _DNAMLocation!.Value.Min;
        private bool _DepthOfFieldStrength_IsSet => _DNAMLocation.HasValue;
        public Single DepthOfFieldStrength => _DepthOfFieldStrength_IsSet ? _recordData.Slice(_DepthOfFieldStrengthLocation, 4).Float() : default(Single);
        #endregion
        #region DepthOfFieldDistance
        private int _DepthOfFieldDistanceLocation => _DNAMLocation!.Value.Min + 0x4;
        private bool _DepthOfFieldDistance_IsSet => _DNAMLocation.HasValue;
        public Single DepthOfFieldDistance => _DepthOfFieldDistance_IsSet ? _recordData.Slice(_DepthOfFieldDistanceLocation, 4).Float() : default(Single);
        #endregion
        #region DepthOfFieldRange
        private int _DepthOfFieldRangeLocation => _DNAMLocation!.Value.Min + 0x8;
        private bool _DepthOfFieldRange_IsSet => _DNAMLocation.HasValue;
        public Single DepthOfFieldRange => _DepthOfFieldRange_IsSet ? _recordData.Slice(_DepthOfFieldRangeLocation, 4).Float() : default(Single);
        #endregion
        #region DepthOfFieldUnused
        private int _DepthOfFieldUnusedLocation => _DNAMLocation!.Value.Min + 0xC;
        private bool _DepthOfFieldUnused_IsSet => _DNAMLocation.HasValue;
        public Int16 DepthOfFieldUnused => _DepthOfFieldUnused_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_recordData.Slice(_DepthOfFieldUnusedLocation, 2)) : default(Int16);
        #endregion
        #region DepthOfFieldBlurRadius
        private int _DepthOfFieldBlurRadiusLocation => _DNAMLocation!.Value.Min + 0xE;
        public partial Byte GetDepthOfFieldBlurRadiusCustom();
        public Byte DepthOfFieldBlurRadius => GetDepthOfFieldBlurRadiusCustom();
        #endregion
        #region DepthOfFieldSky
        private int _DepthOfFieldSkyLocation => _DNAMLocation!.Value.Min + 0xF;
        public partial Boolean GetDepthOfFieldSkyCustom();
        public Boolean DepthOfFieldSky => GetDepthOfFieldSkyCustom();
        #endregion
        #region DepthOfFieldVignetteRadius
        private int _DepthOfFieldVignetteRadiusLocation => _DNAMLocation!.Value.Min + 0x10;
        private bool _DepthOfFieldVignetteRadius_IsSet => _DNAMLocation.HasValue && !DNAMDataTypeState.HasFlag(ImageSpace.DNAMDataType.Break0);
        public Single DepthOfFieldVignetteRadius => _DepthOfFieldVignetteRadius_IsSet ? _recordData.Slice(_DepthOfFieldVignetteRadiusLocation, 4).Float() : default(Single);
        #endregion
        #region DepthOfFieldVignetteStrength
        private int _DepthOfFieldVignetteStrengthLocation => _DNAMLocation!.Value.Min + 0x14;
        private bool _DepthOfFieldVignetteStrength_IsSet => _DNAMLocation.HasValue && !DNAMDataTypeState.HasFlag(ImageSpace.DNAMDataType.Break0);
        public Single DepthOfFieldVignetteStrength => _DepthOfFieldVignetteStrength_IsSet ? _recordData.Slice(_DepthOfFieldVignetteStrengthLocation, 4).Float() : default(Single);
        #endregion
        #region Lut
        private int? _LutLocation;
        public String? Lut => _LutLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LutLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ImageSpaceBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IImageSpaceGetter ImageSpaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ImageSpaceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ENAM:
                {
                    return ENAMParsingCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.HNAM:
                {
                    _HNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)ImageSpace_FieldIndex.HdrMiddleGray;
                }
                case RecordTypeInts.CNAM:
                {
                    _CNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)ImageSpace_FieldIndex.CinematicContrast;
                }
                case RecordTypeInts.TNAM:
                {
                    _TNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)ImageSpace_FieldIndex.TintColor;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x10)
                    {
                        this.DNAMDataTypeState |= ImageSpace.DNAMDataType.Break0;
                    }
                    return (int)ImageSpace_FieldIndex.DepthOfFieldVignetteStrength;
                }
                case RecordTypeInts.TX00:
                {
                    _LutLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.Lut;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ImageSpaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ImageSpace>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IImageSpaceGetter rhs) return false;
            return ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IImageSpaceGetter? obj)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

