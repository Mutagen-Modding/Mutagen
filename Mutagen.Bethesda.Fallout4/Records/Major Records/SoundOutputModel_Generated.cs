/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class SoundOutputModel :
        Fallout4MajorRecord,
        IEquatable<ISoundOutputModelGetter>,
        ILoquiObjectSetter<SoundOutputModel>,
        ISoundOutputModelInternal
    {
        #region Ctor
        protected SoundOutputModel()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundOutputData? _Data;
        public SoundOutputData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundOutputDataGetter? ISoundOutputModelGetter.Data => this.Data;
        #endregion
        #region Type
        public SoundOutputModel.TypeEnum? Type { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SoundOutputModel.TypeEnum? ISoundOutputModelGetter.Type => this.Type;
        #endregion
        #region StaticAttenuation
        public Single? StaticAttenuation { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ISoundOutputModelGetter.StaticAttenuation => this.StaticAttenuation;
        #endregion
        #region OutputChannels
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundOutputChannels? _OutputChannels;
        public SoundOutputChannels? OutputChannels
        {
            get => _OutputChannels;
            set => _OutputChannels = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundOutputChannelsGetter? ISoundOutputModelGetter.OutputChannels => this.OutputChannels;
        #endregion
        #region DynamicAttentuation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DynamicAttentuationValues? _DynamicAttentuation;
        public DynamicAttentuationValues? DynamicAttentuation
        {
            get => _DynamicAttentuation;
            set => _DynamicAttentuation = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDynamicAttentuationValuesGetter? ISoundOutputModelGetter.DynamicAttentuation => this.DynamicAttentuation;
        #endregion
        #region EffectChain
        private readonly IFormLinkNullable<IAudioEffectChainGetter> _EffectChain = new FormLinkNullable<IAudioEffectChainGetter>();
        public IFormLinkNullable<IAudioEffectChainGetter> EffectChain
        {
            get => _EffectChain;
            set => _EffectChain.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAudioEffectChainGetter> ISoundOutputModelGetter.EffectChain => this.EffectChain;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundOutputModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Data = new MaskItem<TItem, SoundOutputData.Mask<TItem>?>(initialValue, new SoundOutputData.Mask<TItem>(initialValue));
                this.Type = initialValue;
                this.StaticAttenuation = initialValue;
                this.OutputChannels = new MaskItem<TItem, SoundOutputChannels.Mask<TItem>?>(initialValue, new SoundOutputChannels.Mask<TItem>(initialValue));
                this.DynamicAttentuation = new MaskItem<TItem, DynamicAttentuationValues.Mask<TItem>?>(initialValue, new DynamicAttentuationValues.Mask<TItem>(initialValue));
                this.EffectChain = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem Data,
                TItem Type,
                TItem StaticAttenuation,
                TItem OutputChannels,
                TItem DynamicAttentuation,
                TItem EffectChain)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.Data = new MaskItem<TItem, SoundOutputData.Mask<TItem>?>(Data, new SoundOutputData.Mask<TItem>(Data));
                this.Type = Type;
                this.StaticAttenuation = StaticAttenuation;
                this.OutputChannels = new MaskItem<TItem, SoundOutputChannels.Mask<TItem>?>(OutputChannels, new SoundOutputChannels.Mask<TItem>(OutputChannels));
                this.DynamicAttentuation = new MaskItem<TItem, DynamicAttentuationValues.Mask<TItem>?>(DynamicAttentuation, new DynamicAttentuationValues.Mask<TItem>(DynamicAttentuation));
                this.EffectChain = EffectChain;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, SoundOutputData.Mask<TItem>?>? Data { get; set; }
            public TItem Type;
            public TItem StaticAttenuation;
            public MaskItem<TItem, SoundOutputChannels.Mask<TItem>?>? OutputChannels { get; set; }
            public MaskItem<TItem, DynamicAttentuationValues.Mask<TItem>?>? DynamicAttentuation { get; set; }
            public TItem EffectChain;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.StaticAttenuation, rhs.StaticAttenuation)) return false;
                if (!object.Equals(this.OutputChannels, rhs.OutputChannels)) return false;
                if (!object.Equals(this.DynamicAttentuation, rhs.DynamicAttentuation)) return false;
                if (!object.Equals(this.EffectChain, rhs.EffectChain)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Data);
                hash.Add(this.Type);
                hash.Add(this.StaticAttenuation);
                hash.Add(this.OutputChannels);
                hash.Add(this.DynamicAttentuation);
                hash.Add(this.EffectChain);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (!eval(this.Type)) return false;
                if (!eval(this.StaticAttenuation)) return false;
                if (OutputChannels != null)
                {
                    if (!eval(this.OutputChannels.Overall)) return false;
                    if (this.OutputChannels.Specific != null && !this.OutputChannels.Specific.All(eval)) return false;
                }
                if (DynamicAttentuation != null)
                {
                    if (!eval(this.DynamicAttentuation.Overall)) return false;
                    if (this.DynamicAttentuation.Specific != null && !this.DynamicAttentuation.Specific.All(eval)) return false;
                }
                if (!eval(this.EffectChain)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (eval(this.Type)) return true;
                if (eval(this.StaticAttenuation)) return true;
                if (OutputChannels != null)
                {
                    if (eval(this.OutputChannels.Overall)) return true;
                    if (this.OutputChannels.Specific != null && this.OutputChannels.Specific.Any(eval)) return true;
                }
                if (DynamicAttentuation != null)
                {
                    if (eval(this.DynamicAttentuation.Overall)) return true;
                    if (this.DynamicAttentuation.Specific != null && this.DynamicAttentuation.Specific.Any(eval)) return true;
                }
                if (eval(this.EffectChain)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundOutputModel.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Data = this.Data == null ? null : new MaskItem<R, SoundOutputData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.Type = eval(this.Type);
                obj.StaticAttenuation = eval(this.StaticAttenuation);
                obj.OutputChannels = this.OutputChannels == null ? null : new MaskItem<R, SoundOutputChannels.Mask<R>?>(eval(this.OutputChannels.Overall), this.OutputChannels.Specific?.Translate(eval));
                obj.DynamicAttentuation = this.DynamicAttentuation == null ? null : new MaskItem<R, DynamicAttentuationValues.Mask<R>?>(eval(this.DynamicAttentuation.Overall), this.DynamicAttentuation.Specific?.Translate(eval));
                obj.EffectChain = eval(this.EffectChain);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SoundOutputModel.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SoundOutputModel.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SoundOutputModel.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.StaticAttenuation ?? true)
                    {
                        sb.AppendItem(StaticAttenuation, "StaticAttenuation");
                    }
                    if (printMask?.OutputChannels?.Overall ?? true)
                    {
                        OutputChannels?.Print(sb);
                    }
                    if (printMask?.DynamicAttentuation?.Overall ?? true)
                    {
                        DynamicAttentuation?.Print(sb);
                    }
                    if (printMask?.EffectChain ?? true)
                    {
                        sb.AppendItem(EffectChain, "EffectChain");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, SoundOutputData.ErrorMask?>? Data;
            public Exception? Type;
            public Exception? StaticAttenuation;
            public MaskItem<Exception?, SoundOutputChannels.ErrorMask?>? OutputChannels;
            public MaskItem<Exception?, DynamicAttentuationValues.ErrorMask?>? DynamicAttentuation;
            public Exception? EffectChain;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SoundOutputModel_FieldIndex enu = (SoundOutputModel_FieldIndex)index;
                switch (enu)
                {
                    case SoundOutputModel_FieldIndex.Data:
                        return Data;
                    case SoundOutputModel_FieldIndex.Type:
                        return Type;
                    case SoundOutputModel_FieldIndex.StaticAttenuation:
                        return StaticAttenuation;
                    case SoundOutputModel_FieldIndex.OutputChannels:
                        return OutputChannels;
                    case SoundOutputModel_FieldIndex.DynamicAttentuation:
                        return DynamicAttentuation;
                    case SoundOutputModel_FieldIndex.EffectChain:
                        return EffectChain;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SoundOutputModel_FieldIndex enu = (SoundOutputModel_FieldIndex)index;
                switch (enu)
                {
                    case SoundOutputModel_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, SoundOutputData.ErrorMask?>(ex, null);
                        break;
                    case SoundOutputModel_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case SoundOutputModel_FieldIndex.StaticAttenuation:
                        this.StaticAttenuation = ex;
                        break;
                    case SoundOutputModel_FieldIndex.OutputChannels:
                        this.OutputChannels = new MaskItem<Exception?, SoundOutputChannels.ErrorMask?>(ex, null);
                        break;
                    case SoundOutputModel_FieldIndex.DynamicAttentuation:
                        this.DynamicAttentuation = new MaskItem<Exception?, DynamicAttentuationValues.ErrorMask?>(ex, null);
                        break;
                    case SoundOutputModel_FieldIndex.EffectChain:
                        this.EffectChain = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SoundOutputModel_FieldIndex enu = (SoundOutputModel_FieldIndex)index;
                switch (enu)
                {
                    case SoundOutputModel_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, SoundOutputData.ErrorMask?>?)obj;
                        break;
                    case SoundOutputModel_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case SoundOutputModel_FieldIndex.StaticAttenuation:
                        this.StaticAttenuation = (Exception?)obj;
                        break;
                    case SoundOutputModel_FieldIndex.OutputChannels:
                        this.OutputChannels = (MaskItem<Exception?, SoundOutputChannels.ErrorMask?>?)obj;
                        break;
                    case SoundOutputModel_FieldIndex.DynamicAttentuation:
                        this.DynamicAttentuation = (MaskItem<Exception?, DynamicAttentuationValues.ErrorMask?>?)obj;
                        break;
                    case SoundOutputModel_FieldIndex.EffectChain:
                        this.EffectChain = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Data != null) return true;
                if (Type != null) return true;
                if (StaticAttenuation != null) return true;
                if (OutputChannels != null) return true;
                if (DynamicAttentuation != null) return true;
                if (EffectChain != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                Data?.Print(sb);
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(StaticAttenuation, "StaticAttenuation");
                }
                OutputChannels?.Print(sb);
                DynamicAttentuation?.Print(sb);
                {
                    sb.AppendItem(EffectChain, "EffectChain");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.Type = this.Type.Combine(rhs.Type);
                ret.StaticAttenuation = this.StaticAttenuation.Combine(rhs.StaticAttenuation);
                ret.OutputChannels = this.OutputChannels.Combine(rhs.OutputChannels, (l, r) => l.Combine(r));
                ret.DynamicAttentuation = this.DynamicAttentuation.Combine(rhs.DynamicAttentuation, (l, r) => l.Combine(r));
                ret.EffectChain = this.EffectChain.Combine(rhs.EffectChain);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public SoundOutputData.TranslationMask? Data;
            public bool Type;
            public bool StaticAttenuation;
            public SoundOutputChannels.TranslationMask? OutputChannels;
            public DynamicAttentuationValues.TranslationMask? DynamicAttentuation;
            public bool EffectChain;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Type = defaultOn;
                this.StaticAttenuation = defaultOn;
                this.EffectChain = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((Type, null));
                ret.Add((StaticAttenuation, null));
                ret.Add((OutputChannels != null ? OutputChannels.OnOverall : DefaultOn, OutputChannels?.GetCrystal()));
                ret.Add((DynamicAttentuation != null ? DynamicAttentuation.OnOverall : DefaultOn, DynamicAttentuation?.GetCrystal()));
                ret.Add((EffectChain, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SoundOutputModel_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SoundOutputModelCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SoundOutputModelSetterCommon.Instance.RemapLinks(this, mapping);
        public SoundOutputModel(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private SoundOutputModel(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal SoundOutputModel(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SoundOutputModel(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public SoundOutputModel(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<SoundOutputModel>.ToString(this);
        }

        protected override Type LinkType => typeof(ISoundOutputModel);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISoundOutputModelGetter rhs) return false;
            return ((SoundOutputModelCommon)((ISoundOutputModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundOutputModelGetter? obj)
        {
            return ((SoundOutputModelCommon)((ISoundOutputModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundOutputModelCommon)((ISoundOutputModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundOutputModelBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundOutputModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SoundOutputModel CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SoundOutputModel();
            ((SoundOutputModelSetterCommon)((ISoundOutputModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundOutputModel item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SoundOutputModelSetterCommon)((ISoundOutputModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SoundOutputModel GetNew()
        {
            return new SoundOutputModel();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundOutputModel :
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        ILoquiObjectSetter<ISoundOutputModelInternal>,
        ISoundOutputModelGetter
    {
        new SoundOutputData? Data { get; set; }
        new SoundOutputModel.TypeEnum? Type { get; set; }
        new Single? StaticAttenuation { get; set; }
        new SoundOutputChannels? OutputChannels { get; set; }
        new DynamicAttentuationValues? DynamicAttentuation { get; set; }
        new IFormLinkNullable<IAudioEffectChainGetter> EffectChain { get; set; }
    }

    public partial interface ISoundOutputModelInternal :
        IFallout4MajorRecordInternal,
        ISoundOutputModel,
        ISoundOutputModelGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.SOPM)]
    public partial interface ISoundOutputModelGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISoundOutputModelGetter>,
        IMapsToGetter<ISoundOutputModelGetter>
    {
        static new ILoquiRegistration StaticRegistration => SoundOutputModel_Registration.Instance;
        ISoundOutputDataGetter? Data { get; }
        SoundOutputModel.TypeEnum? Type { get; }
        Single? StaticAttenuation { get; }
        ISoundOutputChannelsGetter? OutputChannels { get; }
        IDynamicAttentuationValuesGetter? DynamicAttentuation { get; }
        IFormLinkNullableGetter<IAudioEffectChainGetter> EffectChain { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundOutputModelMixIn
    {
        public static void Clear(this ISoundOutputModelInternal item)
        {
            ((SoundOutputModelSetterCommon)((ISoundOutputModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundOutputModel.Mask<bool> GetEqualsMask(
            this ISoundOutputModelGetter item,
            ISoundOutputModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundOutputModelCommon)((ISoundOutputModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISoundOutputModelGetter item,
            string? name = null,
            SoundOutputModel.Mask<bool>? printMask = null)
        {
            return ((SoundOutputModelCommon)((ISoundOutputModelGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISoundOutputModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundOutputModel.Mask<bool>? printMask = null)
        {
            ((SoundOutputModelCommon)((ISoundOutputModelGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundOutputModelGetter item,
            ISoundOutputModelGetter rhs,
            SoundOutputModel.TranslationMask? equalsMask = null)
        {
            return ((SoundOutputModelCommon)((ISoundOutputModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISoundOutputModelInternal lhs,
            ISoundOutputModelGetter rhs,
            out SoundOutputModel.ErrorMask errorMask,
            SoundOutputModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundOutputModelSetterTranslationCommon)((ISoundOutputModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundOutputModel.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundOutputModelInternal lhs,
            ISoundOutputModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundOutputModelSetterTranslationCommon)((ISoundOutputModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundOutputModel DeepCopy(
            this ISoundOutputModelGetter item,
            SoundOutputModel.TranslationMask? copyMask = null)
        {
            return ((SoundOutputModelSetterTranslationCommon)((ISoundOutputModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundOutputModel DeepCopy(
            this ISoundOutputModelGetter item,
            out SoundOutputModel.ErrorMask errorMask,
            SoundOutputModel.TranslationMask? copyMask = null)
        {
            return ((SoundOutputModelSetterTranslationCommon)((ISoundOutputModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundOutputModel DeepCopy(
            this ISoundOutputModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundOutputModelSetterTranslationCommon)((ISoundOutputModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SoundOutputModel Duplicate(
            this ISoundOutputModelGetter item,
            FormKey formKey,
            SoundOutputModel.TranslationMask? copyMask = null)
        {
            return ((SoundOutputModelCommon)((ISoundOutputModelGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static SoundOutputModel Duplicate(
            this ISoundOutputModelGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SoundOutputModelCommon)((ISoundOutputModelGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundOutputModelInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SoundOutputModelSetterCommon)((ISoundOutputModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum SoundOutputModel_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        Data = 7,
        Type = 8,
        StaticAttenuation = 9,
        OutputChannels = 10,
        DynamicAttentuation = 11,
        EffectChain = 12,
    }
    #endregion

    #region Registration
    internal partial class SoundOutputModel_Registration : ILoquiRegistration
    {
        public static readonly SoundOutputModel_Registration Instance = new SoundOutputModel_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(SoundOutputModel.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundOutputModel.ErrorMask);

        public static readonly Type ClassType = typeof(SoundOutputModel);

        public static readonly Type GetterType = typeof(ISoundOutputModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundOutputModel);

        public static readonly Type? InternalSetterType = typeof(ISoundOutputModelInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.SoundOutputModel";

        public const string Name = "SoundOutputModel";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SOPM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SOPM);
            var all = RecordCollection.Factory(
                RecordTypes.SOPM,
                RecordTypes.NAM1,
                RecordTypes.MNAM,
                RecordTypes.VNAM,
                RecordTypes.ONAM,
                RecordTypes.ATTN,
                RecordTypes.ENAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SoundOutputModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SoundOutputModelSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly SoundOutputModelSetterCommon Instance = new SoundOutputModelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundOutputModelInternal item)
        {
            ClearPartial();
            item.Data = null;
            item.Type = default;
            item.StaticAttenuation = default;
            item.OutputChannels = null;
            item.DynamicAttentuation = null;
            item.EffectChain.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ISoundOutputModelInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISoundOutputModelInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISoundOutputModel obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.EffectChain.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundOutputModelInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISoundOutputModelInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SoundOutputModelBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SoundOutputModelBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SoundOutputModel)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SoundOutputModel)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SoundOutputModelCommon : Fallout4MajorRecordCommon
    {
        public new static readonly SoundOutputModelCommon Instance = new SoundOutputModelCommon();

        public SoundOutputModel.Mask<bool> GetEqualsMask(
            ISoundOutputModelGetter item,
            ISoundOutputModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundOutputModel.Mask<bool>(false);
            ((SoundOutputModelCommon)((ISoundOutputModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundOutputModelGetter item,
            ISoundOutputModelGetter rhs,
            SoundOutputModel.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Type = item.Type == rhs.Type;
            ret.StaticAttenuation = item.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation);
            ret.OutputChannels = EqualsMaskHelper.EqualsHelper(
                item.OutputChannels,
                rhs.OutputChannels,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DynamicAttentuation = EqualsMaskHelper.EqualsHelper(
                item.DynamicAttentuation,
                rhs.DynamicAttentuation,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EffectChain = item.EffectChain.Equals(rhs.EffectChain);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISoundOutputModelGetter item,
            string? name = null,
            SoundOutputModel.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISoundOutputModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundOutputModel.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SoundOutputModel =>");
            }
            else
            {
                sb.AppendLine($"{name} (SoundOutputModel) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISoundOutputModelGetter item,
            StructuredStringBuilder sb,
            SoundOutputModel.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
            if ((printMask?.Type ?? true)
                && item.Type is {} TypeItem)
            {
                sb.AppendItem(TypeItem, "Type");
            }
            if ((printMask?.StaticAttenuation ?? true)
                && item.StaticAttenuation is {} StaticAttenuationItem)
            {
                sb.AppendItem(StaticAttenuationItem, "StaticAttenuation");
            }
            if ((printMask?.OutputChannels?.Overall ?? true)
                && item.OutputChannels is {} OutputChannelsItem)
            {
                OutputChannelsItem?.Print(sb, "OutputChannels");
            }
            if ((printMask?.DynamicAttentuation?.Overall ?? true)
                && item.DynamicAttentuation is {} DynamicAttentuationItem)
            {
                DynamicAttentuationItem?.Print(sb, "DynamicAttentuation");
            }
            if (printMask?.EffectChain ?? true)
            {
                sb.AppendItem(item.EffectChain.FormKeyNullable, "EffectChain");
            }
        }
        
        public static SoundOutputModel_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundOutputModel_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (SoundOutputModel_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (SoundOutputModel_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (SoundOutputModel_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (SoundOutputModel_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (SoundOutputModel_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (SoundOutputModel_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new SoundOutputModel_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundOutputModel_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SoundOutputModel_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SoundOutputModel_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SoundOutputModel_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundOutputModelGetter? lhs,
            ISoundOutputModelGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SoundOutputModel_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((SoundOutputDataCommon)((ISoundOutputDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)SoundOutputModel_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundOutputModel_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundOutputModel_FieldIndex.StaticAttenuation) ?? true))
            {
                if (!lhs.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundOutputModel_FieldIndex.OutputChannels) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.OutputChannels, rhs.OutputChannels, out var lhsOutputChannels, out var rhsOutputChannels, out var isOutputChannelsEqual))
                {
                    if (!((SoundOutputChannelsCommon)((ISoundOutputChannelsGetter)lhsOutputChannels).CommonInstance()!).Equals(lhsOutputChannels, rhsOutputChannels, equalsMask?.GetSubCrystal((int)SoundOutputModel_FieldIndex.OutputChannels))) return false;
                }
                else if (!isOutputChannelsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundOutputModel_FieldIndex.DynamicAttentuation) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DynamicAttentuation, rhs.DynamicAttentuation, out var lhsDynamicAttentuation, out var rhsDynamicAttentuation, out var isDynamicAttentuationEqual))
                {
                    if (!((DynamicAttentuationValuesCommon)((IDynamicAttentuationValuesGetter)lhsDynamicAttentuation).CommonInstance()!).Equals(lhsDynamicAttentuation, rhsDynamicAttentuation, equalsMask?.GetSubCrystal((int)SoundOutputModel_FieldIndex.DynamicAttentuation))) return false;
                }
                else if (!isDynamicAttentuationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundOutputModel_FieldIndex.EffectChain) ?? true))
            {
                if (!lhs.EffectChain.Equals(rhs.EffectChain)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISoundOutputModelGetter?)lhs,
                rhs: rhs as ISoundOutputModelGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISoundOutputModelGetter?)lhs,
                rhs: rhs as ISoundOutputModelGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISoundOutputModelGetter item)
        {
            var hash = new HashCode();
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            if (item.Type is {} Typeitem)
            {
                hash.Add(Typeitem);
            }
            if (item.StaticAttenuation is {} StaticAttenuationitem)
            {
                hash.Add(StaticAttenuationitem);
            }
            if (item.OutputChannels is {} OutputChannelsitem)
            {
                hash.Add(OutputChannelsitem);
            }
            if (item.DynamicAttentuation is {} DynamicAttentuationitem)
            {
                hash.Add(DynamicAttentuationitem);
            }
            hash.Add(item.EffectChain);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundOutputModelGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundOutputModelGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SoundOutputModel.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISoundOutputModelGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.EffectChain, out var EffectChainInfo))
            {
                yield return EffectChainInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public SoundOutputModel Duplicate(
            ISoundOutputModelGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SoundOutputModel(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundOutputModelGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundOutputModelGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SoundOutputModelSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly SoundOutputModelSetterTranslationCommon Instance = new SoundOutputModelSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundOutputModelInternal item,
            ISoundOutputModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISoundOutputModel item,
            ISoundOutputModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SoundOutputModel_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)SoundOutputModel_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoundOutputModel_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputModel_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputModel_FieldIndex.StaticAttenuation) ?? true))
            {
                item.StaticAttenuation = rhs.StaticAttenuation;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputModel_FieldIndex.OutputChannels) ?? true))
            {
                errorMask?.PushIndex((int)SoundOutputModel_FieldIndex.OutputChannels);
                try
                {
                    if(rhs.OutputChannels is {} rhsOutputChannels)
                    {
                        item.OutputChannels = rhsOutputChannels.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoundOutputModel_FieldIndex.OutputChannels));
                    }
                    else
                    {
                        item.OutputChannels = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputModel_FieldIndex.DynamicAttentuation) ?? true))
            {
                errorMask?.PushIndex((int)SoundOutputModel_FieldIndex.DynamicAttentuation);
                try
                {
                    if(rhs.DynamicAttentuation is {} rhsDynamicAttentuation)
                    {
                        item.DynamicAttentuation = rhsDynamicAttentuation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoundOutputModel_FieldIndex.DynamicAttentuation));
                    }
                    else
                    {
                        item.DynamicAttentuation = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundOutputModel_FieldIndex.EffectChain) ?? true))
            {
                item.EffectChain.SetTo(rhs.EffectChain.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISoundOutputModel item,
            ISoundOutputModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundOutputModelInternal)item,
                rhs: (ISoundOutputModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundOutputModel)item,
                rhs: (ISoundOutputModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundOutputModelInternal)item,
                rhs: (ISoundOutputModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundOutputModel)item,
                rhs: (ISoundOutputModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SoundOutputModel DeepCopy(
            ISoundOutputModelGetter item,
            SoundOutputModel.TranslationMask? copyMask = null)
        {
            SoundOutputModel ret = (SoundOutputModel)((SoundOutputModelCommon)((ISoundOutputModelGetter)item).CommonInstance()!).GetNew();
            ((SoundOutputModelSetterTranslationCommon)((ISoundOutputModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundOutputModel DeepCopy(
            ISoundOutputModelGetter item,
            out SoundOutputModel.ErrorMask errorMask,
            SoundOutputModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundOutputModel ret = (SoundOutputModel)((SoundOutputModelCommon)((ISoundOutputModelGetter)item).CommonInstance()!).GetNew();
            ((SoundOutputModelSetterTranslationCommon)((ISoundOutputModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundOutputModel.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundOutputModel DeepCopy(
            ISoundOutputModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundOutputModel ret = (SoundOutputModel)((SoundOutputModelCommon)((ISoundOutputModelGetter)item).CommonInstance()!).GetNew();
            ((SoundOutputModelSetterTranslationCommon)((ISoundOutputModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundOutputModel
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundOutputModel_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundOutputModel_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundOutputModelCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SoundOutputModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundOutputModelSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundOutputModelBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SoundOutputModelBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISoundOutputModelGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.Data is {} DataItem)
            {
                ((SoundOutputDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            EnumBinaryTranslation<SoundOutputModel.TypeEnum, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Type,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StaticAttenuation,
                integerType: FloatIntegerType.UShort,
                multiplier: 100f,
                divisor: null,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            if (item.OutputChannels is {} OutputChannelsItem)
            {
                ((SoundOutputChannelsBinaryWriteTranslation)((IBinaryItem)OutputChannelsItem).BinaryWriteTranslator).Write(
                    item: OutputChannelsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.DynamicAttentuation is {} DynamicAttentuationItem)
            {
                ((DynamicAttentuationValuesBinaryWriteTranslation)((IBinaryItem)DynamicAttentuationItem).BinaryWriteTranslator).Write(
                    item: DynamicAttentuationItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EffectChain,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
        }

        public void Write(
            MutagenWriter writer,
            ISoundOutputModelGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SOPM,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISoundOutputModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISoundOutputModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISoundOutputModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SoundOutputModelBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly SoundOutputModelBinaryCreateTranslation Instance = new SoundOutputModelBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SOPM;
        public static ParseResult FillBinaryRecordTypes(
            ISoundOutputModelInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NAM1:
                {
                    item.Data = Mutagen.Bethesda.Fallout4.SoundOutputData.CreateFromBinary(frame: frame);
                    return (int)SoundOutputModel_FieldIndex.Data;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Type = EnumBinaryTranslation<SoundOutputModel.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)SoundOutputModel_FieldIndex.Type;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.StaticAttenuation = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        integerType: FloatIntegerType.UShort,
                        multiplier: null,
                        divisor: 100f);
                    return (int)SoundOutputModel_FieldIndex.StaticAttenuation;
                }
                case RecordTypeInts.ONAM:
                {
                    item.OutputChannels = Mutagen.Bethesda.Fallout4.SoundOutputChannels.CreateFromBinary(frame: frame);
                    return (int)SoundOutputModel_FieldIndex.OutputChannels;
                }
                case RecordTypeInts.ATTN:
                {
                    item.DynamicAttentuation = Mutagen.Bethesda.Fallout4.DynamicAttentuationValues.CreateFromBinary(frame: frame);
                    return (int)SoundOutputModel_FieldIndex.DynamicAttentuation;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EffectChain.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SoundOutputModel_FieldIndex.EffectChain;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SoundOutputModelBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class SoundOutputModelBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ISoundOutputModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundOutputModel_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundOutputModel_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundOutputModelCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundOutputModelSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SoundOutputModelCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundOutputModelBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundOutputModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISoundOutputModel);


        #region Data
        private RangeInt32? _DataLocation;
        public ISoundOutputDataGetter? Data => _DataLocation.HasValue ? SoundOutputDataBinaryOverlay.SoundOutputDataFactory(_recordData.Slice(_DataLocation!.Value.Min), _package) : default;
        #endregion
        #region Type
        private int? _TypeLocation;
        public SoundOutputModel.TypeEnum? Type => _TypeLocation.HasValue ? (SoundOutputModel.TypeEnum)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TypeLocation!.Value, _package.MetaData.Constants)) : default(SoundOutputModel.TypeEnum?);
        #endregion
        #region StaticAttenuation
        private int? _StaticAttenuationLocation;
        public Single? StaticAttenuation => _StaticAttenuationLocation.HasValue ? FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_recordData, _StaticAttenuationLocation.Value, _package.MetaData.Constants), FloatIntegerType.UShort, multiplier: null, divisor: 100f) : default(Single?);
        #endregion
        #region OutputChannels
        private RangeInt32? _OutputChannelsLocation;
        public ISoundOutputChannelsGetter? OutputChannels => _OutputChannelsLocation.HasValue ? SoundOutputChannelsBinaryOverlay.SoundOutputChannelsFactory(_recordData.Slice(_OutputChannelsLocation!.Value.Min), _package) : default;
        #endregion
        #region DynamicAttentuation
        private RangeInt32? _DynamicAttentuationLocation;
        public IDynamicAttentuationValuesGetter? DynamicAttentuation => _DynamicAttentuationLocation.HasValue ? DynamicAttentuationValuesBinaryOverlay.DynamicAttentuationValuesFactory(_recordData.Slice(_DynamicAttentuationLocation!.Value.Min), _package) : default;
        #endregion
        #region EffectChain
        private int? _EffectChainLocation;
        public IFormLinkNullableGetter<IAudioEffectChainGetter> EffectChain => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IAudioEffectChainGetter>(_package, _recordData, _EffectChainLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundOutputModelBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISoundOutputModelGetter SoundOutputModelFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SoundOutputModelBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISoundOutputModelGetter SoundOutputModelFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SoundOutputModelFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NAM1:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)SoundOutputModel_FieldIndex.Data;
                }
                case RecordTypeInts.MNAM:
                {
                    _TypeLocation = (stream.Position - offset);
                    return (int)SoundOutputModel_FieldIndex.Type;
                }
                case RecordTypeInts.VNAM:
                {
                    _StaticAttenuationLocation = (stream.Position - offset);
                    return (int)SoundOutputModel_FieldIndex.StaticAttenuation;
                }
                case RecordTypeInts.ONAM:
                {
                    _OutputChannelsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)SoundOutputModel_FieldIndex.OutputChannels;
                }
                case RecordTypeInts.ATTN:
                {
                    _DynamicAttentuationLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)SoundOutputModel_FieldIndex.DynamicAttentuation;
                }
                case RecordTypeInts.ENAM:
                {
                    _EffectChainLocation = (stream.Position - offset);
                    return (int)SoundOutputModel_FieldIndex.EffectChain;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundOutputModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<SoundOutputModel>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISoundOutputModelGetter rhs) return false;
            return ((SoundOutputModelCommon)((ISoundOutputModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundOutputModelGetter? obj)
        {
            return ((SoundOutputModelCommon)((ISoundOutputModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundOutputModelCommon)((ISoundOutputModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

