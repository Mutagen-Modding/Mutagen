/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Tree :
        Fallout4MajorRecord,
        IEquatable<ITreeGetter>,
        ILoquiObjectSetter<Tree>,
        ITreeInternal
    {
        #region Ctor
        protected Tree()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? ITreeGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ITreeGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ITreeGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Ingredient
        private readonly IFormLinkNullable<IHarvestTargetGetter> _Ingredient = new FormLinkNullable<IHarvestTargetGetter>();
        public IFormLinkNullable<IHarvestTargetGetter> Ingredient
        {
            get => _Ingredient;
            set => _Ingredient.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IHarvestTargetGetter> ITreeGetter.Ingredient => this.Ingredient;
        #endregion
        #region HarvestSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _HarvestSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> HarvestSound
        {
            get => _HarvestSound;
            set => _HarvestSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> ITreeGetter.HarvestSound => this.HarvestSound;
        #endregion
        #region Production
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SeasonalIngredientProduction? _Production;
        public SeasonalIngredientProduction? Production
        {
            get => _Production;
            set => _Production = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISeasonalIngredientProductionGetter? ITreeGetter.Production => this.Production;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITreeGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region TrunkFlexibility
        public Single TrunkFlexibility { get; set; } = default(Single);
        #endregion
        #region BranchFlexibility
        public Single BranchFlexibility { get; set; } = default(Single);
        #endregion
        #region TrunkAmplitude
        public Single TrunkAmplitude { get; set; } = default(Single);
        #endregion
        #region FrontAmplitude
        public Single FrontAmplitude { get; set; } = default(Single);
        #endregion
        #region BackAmplitude
        public Single BackAmplitude { get; set; } = default(Single);
        #endregion
        #region SideAmplitude
        public Single SideAmplitude { get; set; } = default(Single);
        #endregion
        #region FrontFrequency
        public Single FrontFrequency { get; set; } = default(Single);
        #endregion
        #region BackFrequency
        public Single BackFrequency { get; set; } = default(Single);
        #endregion
        #region SideFrequency
        public Single SideFrequency { get; set; } = default(Single);
        #endregion
        #region LeafFlexibility
        public Single LeafFlexibility { get; set; } = default(Single);
        #endregion
        #region LeafAmplitude
        public Single LeafAmplitude { get; set; } = default(Single);
        #endregion
        #region LeafFrequency
        public Single LeafFrequency { get; set; } = default(Single);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TreeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Ingredient = initialValue;
                this.HarvestSound = initialValue;
                this.Production = new MaskItem<TItem, SeasonalIngredientProduction.Mask<TItem>?>(initialValue, new SeasonalIngredientProduction.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.TrunkFlexibility = initialValue;
                this.BranchFlexibility = initialValue;
                this.TrunkAmplitude = initialValue;
                this.FrontAmplitude = initialValue;
                this.BackAmplitude = initialValue;
                this.SideAmplitude = initialValue;
                this.FrontFrequency = initialValue;
                this.BackFrequency = initialValue;
                this.SideFrequency = initialValue;
                this.LeafFlexibility = initialValue;
                this.LeafAmplitude = initialValue;
                this.LeafFrequency = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Model,
                TItem Ingredient,
                TItem HarvestSound,
                TItem Production,
                TItem Name,
                TItem TrunkFlexibility,
                TItem BranchFlexibility,
                TItem TrunkAmplitude,
                TItem FrontAmplitude,
                TItem BackAmplitude,
                TItem SideAmplitude,
                TItem FrontFrequency,
                TItem BackFrequency,
                TItem SideFrequency,
                TItem LeafFlexibility,
                TItem LeafAmplitude,
                TItem LeafFrequency)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Ingredient = Ingredient;
                this.HarvestSound = HarvestSound;
                this.Production = new MaskItem<TItem, SeasonalIngredientProduction.Mask<TItem>?>(Production, new SeasonalIngredientProduction.Mask<TItem>(Production));
                this.Name = Name;
                this.TrunkFlexibility = TrunkFlexibility;
                this.BranchFlexibility = BranchFlexibility;
                this.TrunkAmplitude = TrunkAmplitude;
                this.FrontAmplitude = FrontAmplitude;
                this.BackAmplitude = BackAmplitude;
                this.SideAmplitude = SideAmplitude;
                this.FrontFrequency = FrontFrequency;
                this.BackFrequency = BackFrequency;
                this.SideFrequency = SideFrequency;
                this.LeafFlexibility = LeafFlexibility;
                this.LeafAmplitude = LeafAmplitude;
                this.LeafFrequency = LeafFrequency;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem Ingredient;
            public TItem HarvestSound;
            public MaskItem<TItem, SeasonalIngredientProduction.Mask<TItem>?>? Production { get; set; }
            public TItem Name;
            public TItem TrunkFlexibility;
            public TItem BranchFlexibility;
            public TItem TrunkAmplitude;
            public TItem FrontAmplitude;
            public TItem BackAmplitude;
            public TItem SideAmplitude;
            public TItem FrontFrequency;
            public TItem BackFrequency;
            public TItem SideFrequency;
            public TItem LeafFlexibility;
            public TItem LeafAmplitude;
            public TItem LeafFrequency;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Ingredient, rhs.Ingredient)) return false;
                if (!object.Equals(this.HarvestSound, rhs.HarvestSound)) return false;
                if (!object.Equals(this.Production, rhs.Production)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.TrunkFlexibility, rhs.TrunkFlexibility)) return false;
                if (!object.Equals(this.BranchFlexibility, rhs.BranchFlexibility)) return false;
                if (!object.Equals(this.TrunkAmplitude, rhs.TrunkAmplitude)) return false;
                if (!object.Equals(this.FrontAmplitude, rhs.FrontAmplitude)) return false;
                if (!object.Equals(this.BackAmplitude, rhs.BackAmplitude)) return false;
                if (!object.Equals(this.SideAmplitude, rhs.SideAmplitude)) return false;
                if (!object.Equals(this.FrontFrequency, rhs.FrontFrequency)) return false;
                if (!object.Equals(this.BackFrequency, rhs.BackFrequency)) return false;
                if (!object.Equals(this.SideFrequency, rhs.SideFrequency)) return false;
                if (!object.Equals(this.LeafFlexibility, rhs.LeafFlexibility)) return false;
                if (!object.Equals(this.LeafAmplitude, rhs.LeafAmplitude)) return false;
                if (!object.Equals(this.LeafFrequency, rhs.LeafFrequency)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Model);
                hash.Add(this.Ingredient);
                hash.Add(this.HarvestSound);
                hash.Add(this.Production);
                hash.Add(this.Name);
                hash.Add(this.TrunkFlexibility);
                hash.Add(this.BranchFlexibility);
                hash.Add(this.TrunkAmplitude);
                hash.Add(this.FrontAmplitude);
                hash.Add(this.BackAmplitude);
                hash.Add(this.SideAmplitude);
                hash.Add(this.FrontFrequency);
                hash.Add(this.BackFrequency);
                hash.Add(this.SideFrequency);
                hash.Add(this.LeafFlexibility);
                hash.Add(this.LeafAmplitude);
                hash.Add(this.LeafFrequency);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.Ingredient)) return false;
                if (!eval(this.HarvestSound)) return false;
                if (Production != null)
                {
                    if (!eval(this.Production.Overall)) return false;
                    if (this.Production.Specific != null && !this.Production.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.TrunkFlexibility)) return false;
                if (!eval(this.BranchFlexibility)) return false;
                if (!eval(this.TrunkAmplitude)) return false;
                if (!eval(this.FrontAmplitude)) return false;
                if (!eval(this.BackAmplitude)) return false;
                if (!eval(this.SideAmplitude)) return false;
                if (!eval(this.FrontFrequency)) return false;
                if (!eval(this.BackFrequency)) return false;
                if (!eval(this.SideFrequency)) return false;
                if (!eval(this.LeafFlexibility)) return false;
                if (!eval(this.LeafAmplitude)) return false;
                if (!eval(this.LeafFrequency)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.Ingredient)) return true;
                if (eval(this.HarvestSound)) return true;
                if (Production != null)
                {
                    if (eval(this.Production.Overall)) return true;
                    if (this.Production.Specific != null && this.Production.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.TrunkFlexibility)) return true;
                if (eval(this.BranchFlexibility)) return true;
                if (eval(this.TrunkAmplitude)) return true;
                if (eval(this.FrontAmplitude)) return true;
                if (eval(this.BackAmplitude)) return true;
                if (eval(this.SideAmplitude)) return true;
                if (eval(this.FrontFrequency)) return true;
                if (eval(this.BackFrequency)) return true;
                if (eval(this.SideFrequency)) return true;
                if (eval(this.LeafFlexibility)) return true;
                if (eval(this.LeafAmplitude)) return true;
                if (eval(this.LeafFrequency)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Tree.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Ingredient = eval(this.Ingredient);
                obj.HarvestSound = eval(this.HarvestSound);
                obj.Production = this.Production == null ? null : new MaskItem<R, SeasonalIngredientProduction.Mask<R>?>(eval(this.Production.Overall), this.Production.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.TrunkFlexibility = eval(this.TrunkFlexibility);
                obj.BranchFlexibility = eval(this.BranchFlexibility);
                obj.TrunkAmplitude = eval(this.TrunkAmplitude);
                obj.FrontAmplitude = eval(this.FrontAmplitude);
                obj.BackAmplitude = eval(this.BackAmplitude);
                obj.SideAmplitude = eval(this.SideAmplitude);
                obj.FrontFrequency = eval(this.FrontFrequency);
                obj.BackFrequency = eval(this.BackFrequency);
                obj.SideFrequency = eval(this.SideFrequency);
                obj.LeafFlexibility = eval(this.LeafFlexibility);
                obj.LeafAmplitude = eval(this.LeafAmplitude);
                obj.LeafFrequency = eval(this.LeafFrequency);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Tree.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Tree.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Tree.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.Ingredient ?? true)
                    {
                        sb.AppendItem(Ingredient, "Ingredient");
                    }
                    if (printMask?.HarvestSound ?? true)
                    {
                        sb.AppendItem(HarvestSound, "HarvestSound");
                    }
                    if (printMask?.Production?.Overall ?? true)
                    {
                        Production?.Print(sb);
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.TrunkFlexibility ?? true)
                    {
                        sb.AppendItem(TrunkFlexibility, "TrunkFlexibility");
                    }
                    if (printMask?.BranchFlexibility ?? true)
                    {
                        sb.AppendItem(BranchFlexibility, "BranchFlexibility");
                    }
                    if (printMask?.TrunkAmplitude ?? true)
                    {
                        sb.AppendItem(TrunkAmplitude, "TrunkAmplitude");
                    }
                    if (printMask?.FrontAmplitude ?? true)
                    {
                        sb.AppendItem(FrontAmplitude, "FrontAmplitude");
                    }
                    if (printMask?.BackAmplitude ?? true)
                    {
                        sb.AppendItem(BackAmplitude, "BackAmplitude");
                    }
                    if (printMask?.SideAmplitude ?? true)
                    {
                        sb.AppendItem(SideAmplitude, "SideAmplitude");
                    }
                    if (printMask?.FrontFrequency ?? true)
                    {
                        sb.AppendItem(FrontFrequency, "FrontFrequency");
                    }
                    if (printMask?.BackFrequency ?? true)
                    {
                        sb.AppendItem(BackFrequency, "BackFrequency");
                    }
                    if (printMask?.SideFrequency ?? true)
                    {
                        sb.AppendItem(SideFrequency, "SideFrequency");
                    }
                    if (printMask?.LeafFlexibility ?? true)
                    {
                        sb.AppendItem(LeafFlexibility, "LeafFlexibility");
                    }
                    if (printMask?.LeafAmplitude ?? true)
                    {
                        sb.AppendItem(LeafAmplitude, "LeafAmplitude");
                    }
                    if (printMask?.LeafFrequency ?? true)
                    {
                        sb.AppendItem(LeafFrequency, "LeafFrequency");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? Ingredient;
            public Exception? HarvestSound;
            public MaskItem<Exception?, SeasonalIngredientProduction.ErrorMask?>? Production;
            public Exception? Name;
            public Exception? TrunkFlexibility;
            public Exception? BranchFlexibility;
            public Exception? TrunkAmplitude;
            public Exception? FrontAmplitude;
            public Exception? BackAmplitude;
            public Exception? SideAmplitude;
            public Exception? FrontFrequency;
            public Exception? BackFrequency;
            public Exception? SideFrequency;
            public Exception? LeafFlexibility;
            public Exception? LeafAmplitude;
            public Exception? LeafFrequency;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Tree_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Tree_FieldIndex.Model:
                        return Model;
                    case Tree_FieldIndex.Ingredient:
                        return Ingredient;
                    case Tree_FieldIndex.HarvestSound:
                        return HarvestSound;
                    case Tree_FieldIndex.Production:
                        return Production;
                    case Tree_FieldIndex.Name:
                        return Name;
                    case Tree_FieldIndex.TrunkFlexibility:
                        return TrunkFlexibility;
                    case Tree_FieldIndex.BranchFlexibility:
                        return BranchFlexibility;
                    case Tree_FieldIndex.TrunkAmplitude:
                        return TrunkAmplitude;
                    case Tree_FieldIndex.FrontAmplitude:
                        return FrontAmplitude;
                    case Tree_FieldIndex.BackAmplitude:
                        return BackAmplitude;
                    case Tree_FieldIndex.SideAmplitude:
                        return SideAmplitude;
                    case Tree_FieldIndex.FrontFrequency:
                        return FrontFrequency;
                    case Tree_FieldIndex.BackFrequency:
                        return BackFrequency;
                    case Tree_FieldIndex.SideFrequency:
                        return SideFrequency;
                    case Tree_FieldIndex.LeafFlexibility:
                        return LeafFlexibility;
                    case Tree_FieldIndex.LeafAmplitude:
                        return LeafAmplitude;
                    case Tree_FieldIndex.LeafFrequency:
                        return LeafFrequency;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.Ingredient:
                        this.Ingredient = ex;
                        break;
                    case Tree_FieldIndex.HarvestSound:
                        this.HarvestSound = ex;
                        break;
                    case Tree_FieldIndex.Production:
                        this.Production = new MaskItem<Exception?, SeasonalIngredientProduction.ErrorMask?>(ex, null);
                        break;
                    case Tree_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Tree_FieldIndex.TrunkFlexibility:
                        this.TrunkFlexibility = ex;
                        break;
                    case Tree_FieldIndex.BranchFlexibility:
                        this.BranchFlexibility = ex;
                        break;
                    case Tree_FieldIndex.TrunkAmplitude:
                        this.TrunkAmplitude = ex;
                        break;
                    case Tree_FieldIndex.FrontAmplitude:
                        this.FrontAmplitude = ex;
                        break;
                    case Tree_FieldIndex.BackAmplitude:
                        this.BackAmplitude = ex;
                        break;
                    case Tree_FieldIndex.SideAmplitude:
                        this.SideAmplitude = ex;
                        break;
                    case Tree_FieldIndex.FrontFrequency:
                        this.FrontFrequency = ex;
                        break;
                    case Tree_FieldIndex.BackFrequency:
                        this.BackFrequency = ex;
                        break;
                    case Tree_FieldIndex.SideFrequency:
                        this.SideFrequency = ex;
                        break;
                    case Tree_FieldIndex.LeafFlexibility:
                        this.LeafFlexibility = ex;
                        break;
                    case Tree_FieldIndex.LeafAmplitude:
                        this.LeafAmplitude = ex;
                        break;
                    case Tree_FieldIndex.LeafFrequency:
                        this.LeafFrequency = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Tree_FieldIndex enu = (Tree_FieldIndex)index;
                switch (enu)
                {
                    case Tree_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.Ingredient:
                        this.Ingredient = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.HarvestSound:
                        this.HarvestSound = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.Production:
                        this.Production = (MaskItem<Exception?, SeasonalIngredientProduction.ErrorMask?>?)obj;
                        break;
                    case Tree_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.TrunkFlexibility:
                        this.TrunkFlexibility = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.BranchFlexibility:
                        this.BranchFlexibility = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.TrunkAmplitude:
                        this.TrunkAmplitude = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.FrontAmplitude:
                        this.FrontAmplitude = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.BackAmplitude:
                        this.BackAmplitude = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.SideAmplitude:
                        this.SideAmplitude = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.FrontFrequency:
                        this.FrontFrequency = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.BackFrequency:
                        this.BackFrequency = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.SideFrequency:
                        this.SideFrequency = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.LeafFlexibility:
                        this.LeafFlexibility = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.LeafAmplitude:
                        this.LeafAmplitude = (Exception?)obj;
                        break;
                    case Tree_FieldIndex.LeafFrequency:
                        this.LeafFrequency = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Model != null) return true;
                if (Ingredient != null) return true;
                if (HarvestSound != null) return true;
                if (Production != null) return true;
                if (Name != null) return true;
                if (TrunkFlexibility != null) return true;
                if (BranchFlexibility != null) return true;
                if (TrunkAmplitude != null) return true;
                if (FrontAmplitude != null) return true;
                if (BackAmplitude != null) return true;
                if (SideAmplitude != null) return true;
                if (FrontFrequency != null) return true;
                if (BackFrequency != null) return true;
                if (SideFrequency != null) return true;
                if (LeafFlexibility != null) return true;
                if (LeafAmplitude != null) return true;
                if (LeafFrequency != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                Model?.Print(sb);
                {
                    sb.AppendItem(Ingredient, "Ingredient");
                }
                {
                    sb.AppendItem(HarvestSound, "HarvestSound");
                }
                Production?.Print(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(TrunkFlexibility, "TrunkFlexibility");
                }
                {
                    sb.AppendItem(BranchFlexibility, "BranchFlexibility");
                }
                {
                    sb.AppendItem(TrunkAmplitude, "TrunkAmplitude");
                }
                {
                    sb.AppendItem(FrontAmplitude, "FrontAmplitude");
                }
                {
                    sb.AppendItem(BackAmplitude, "BackAmplitude");
                }
                {
                    sb.AppendItem(SideAmplitude, "SideAmplitude");
                }
                {
                    sb.AppendItem(FrontFrequency, "FrontFrequency");
                }
                {
                    sb.AppendItem(BackFrequency, "BackFrequency");
                }
                {
                    sb.AppendItem(SideFrequency, "SideFrequency");
                }
                {
                    sb.AppendItem(LeafFlexibility, "LeafFlexibility");
                }
                {
                    sb.AppendItem(LeafAmplitude, "LeafAmplitude");
                }
                {
                    sb.AppendItem(LeafFrequency, "LeafFrequency");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Ingredient = this.Ingredient.Combine(rhs.Ingredient);
                ret.HarvestSound = this.HarvestSound.Combine(rhs.HarvestSound);
                ret.Production = this.Production.Combine(rhs.Production, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.TrunkFlexibility = this.TrunkFlexibility.Combine(rhs.TrunkFlexibility);
                ret.BranchFlexibility = this.BranchFlexibility.Combine(rhs.BranchFlexibility);
                ret.TrunkAmplitude = this.TrunkAmplitude.Combine(rhs.TrunkAmplitude);
                ret.FrontAmplitude = this.FrontAmplitude.Combine(rhs.FrontAmplitude);
                ret.BackAmplitude = this.BackAmplitude.Combine(rhs.BackAmplitude);
                ret.SideAmplitude = this.SideAmplitude.Combine(rhs.SideAmplitude);
                ret.FrontFrequency = this.FrontFrequency.Combine(rhs.FrontFrequency);
                ret.BackFrequency = this.BackFrequency.Combine(rhs.BackFrequency);
                ret.SideFrequency = this.SideFrequency.Combine(rhs.SideFrequency);
                ret.LeafFlexibility = this.LeafFlexibility.Combine(rhs.LeafFlexibility);
                ret.LeafAmplitude = this.LeafAmplitude.Combine(rhs.LeafAmplitude);
                ret.LeafFrequency = this.LeafFrequency.Combine(rhs.LeafFrequency);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public Model.TranslationMask? Model;
            public bool Ingredient;
            public bool HarvestSound;
            public SeasonalIngredientProduction.TranslationMask? Production;
            public bool Name;
            public bool TrunkFlexibility;
            public bool BranchFlexibility;
            public bool TrunkAmplitude;
            public bool FrontAmplitude;
            public bool BackAmplitude;
            public bool SideAmplitude;
            public bool FrontFrequency;
            public bool BackFrequency;
            public bool SideFrequency;
            public bool LeafFlexibility;
            public bool LeafAmplitude;
            public bool LeafFrequency;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Ingredient = defaultOn;
                this.HarvestSound = defaultOn;
                this.Name = defaultOn;
                this.TrunkFlexibility = defaultOn;
                this.BranchFlexibility = defaultOn;
                this.TrunkAmplitude = defaultOn;
                this.FrontAmplitude = defaultOn;
                this.BackAmplitude = defaultOn;
                this.SideAmplitude = defaultOn;
                this.FrontFrequency = defaultOn;
                this.BackFrequency = defaultOn;
                this.SideFrequency = defaultOn;
                this.LeafFlexibility = defaultOn;
                this.LeafAmplitude = defaultOn;
                this.LeafFrequency = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Ingredient, null));
                ret.Add((HarvestSound, null));
                ret.Add((Production != null ? Production.OnOverall : DefaultOn, Production?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((TrunkFlexibility, null));
                ret.Add((BranchFlexibility, null));
                ret.Add((TrunkAmplitude, null));
                ret.Add((FrontAmplitude, null));
                ret.Add((BackAmplitude, null));
                ret.Add((SideAmplitude, null));
                ret.Add((FrontFrequency, null));
                ret.Add((BackFrequency, null));
                ret.Add((SideFrequency, null));
                ret.Add((LeafFlexibility, null));
                ret.Add((LeafAmplitude, null));
                ret.Add((LeafFrequency, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Tree_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TreeCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TreeSetterCommon.Instance.RemapLinks(this, mapping);
        public Tree(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Tree(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Tree(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Tree(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Tree(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Tree>.ToString(this);
        }

        protected override Type LinkType => typeof(ITree);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITreeGetter rhs) return false;
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITreeGetter? obj)
        {
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TreeCommon)((ITreeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TreeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TreeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Tree CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Tree();
            ((TreeSetterCommon)((ITreeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Tree item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TreeSetterCommon)((ITreeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Tree GetNew()
        {
            return new Tree();
        }

    }
    #endregion

    #region Interface
    public partial interface ITree :
        IExplodeSpawn,
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IHarvestable,
        IHaveVirtualMachineAdapter,
        ILoquiObjectSetter<ITreeInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IPlaceableObject,
        IReferenceableObject,
        IRegionTarget,
        IScripted,
        ITranslatedNamed,
        ITranslatedNamedRequired,
        ITreeGetter
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new IFormLinkNullable<IHarvestTargetGetter> Ingredient { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> HarvestSound { get; set; }
        new SeasonalIngredientProduction? Production { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new Single TrunkFlexibility { get; set; }
        new Single BranchFlexibility { get; set; }
        new Single TrunkAmplitude { get; set; }
        new Single FrontAmplitude { get; set; }
        new Single BackAmplitude { get; set; }
        new Single SideAmplitude { get; set; }
        new Single FrontFrequency { get; set; }
        new Single BackFrequency { get; set; }
        new Single SideFrequency { get; set; }
        new Single LeafFlexibility { get; set; }
        new Single LeafAmplitude { get; set; }
        new Single LeafFrequency { get; set; }
        #region Mutagen
        new Tree.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ITreeInternal :
        IFallout4MajorRecordInternal,
        ITree,
        ITreeGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.TREE)]
    public partial interface ITreeGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IExplodeSpawnGetter,
        IFormLinkContainerGetter,
        IHarvestableGetter,
        IHaveVirtualMachineAdapterGetter,
        ILoquiObject<ITreeGetter>,
        IMapsToGetter<ITreeGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IPlaceableObjectGetter,
        IReferenceableObjectGetter,
        IRegionTargetGetter,
        IScriptedGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Tree_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IFormLinkNullableGetter<IHarvestTargetGetter> Ingredient { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> HarvestSound { get; }
        ISeasonalIngredientProductionGetter? Production { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        Single TrunkFlexibility { get; }
        Single BranchFlexibility { get; }
        Single TrunkAmplitude { get; }
        Single FrontAmplitude { get; }
        Single BackAmplitude { get; }
        Single SideAmplitude { get; }
        Single FrontFrequency { get; }
        Single BackFrequency { get; }
        Single SideFrequency { get; }
        Single LeafFlexibility { get; }
        Single LeafAmplitude { get; }
        Single LeafFrequency { get; }

        #region Mutagen
        Tree.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class TreeMixIn
    {
        public static void Clear(this ITreeInternal item)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Tree.Mask<bool> GetEqualsMask(
            this ITreeGetter item,
            ITreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITreeGetter item,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITreeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITreeGetter item,
            ITreeGetter rhs,
            Tree.TranslationMask? equalsMask = null)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITreeInternal lhs,
            ITreeGetter rhs,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TreeSetterTranslationCommon)((ITreeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITreeInternal lhs,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TreeSetterTranslationCommon)((ITreeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            Tree.TranslationMask? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Tree DeepCopy(
            this ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TreeSetterTranslationCommon)((ITreeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Tree Duplicate(
            this ITreeGetter item,
            FormKey formKey,
            Tree.TranslationMask? copyMask = null)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Tree Duplicate(
            this ITreeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((TreeCommon)((ITreeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITreeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TreeSetterCommon)((ITreeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum Tree_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        Model = 9,
        Ingredient = 10,
        HarvestSound = 11,
        Production = 12,
        Name = 13,
        TrunkFlexibility = 14,
        BranchFlexibility = 15,
        TrunkAmplitude = 16,
        FrontAmplitude = 17,
        BackAmplitude = 18,
        SideAmplitude = 19,
        FrontFrequency = 20,
        BackFrequency = 21,
        SideFrequency = 22,
        LeafFlexibility = 23,
        LeafAmplitude = 24,
        LeafFrequency = 25,
    }
    #endregion

    #region Registration
    internal partial class Tree_Registration : ILoquiRegistration
    {
        public static readonly Tree_Registration Instance = new Tree_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 19;

        public const ushort FieldCount = 26;

        public static readonly Type MaskType = typeof(Tree.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Tree.ErrorMask);

        public static readonly Type ClassType = typeof(Tree);

        public static readonly Type GetterType = typeof(ITreeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITree);

        public static readonly Type? InternalSetterType = typeof(ITreeInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Tree";

        public const string Name = "Tree";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TREE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TREE);
            var all = RecordCollection.Factory(
                RecordTypes.TREE,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.MODL,
                RecordTypes.MODC,
                RecordTypes.MODT,
                RecordTypes.MODS,
                RecordTypes.PFIG,
                RecordTypes.SNAM,
                RecordTypes.PFPC,
                RecordTypes.FULL,
                RecordTypes.CNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TreeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TreeSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly TreeSetterCommon Instance = new TreeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITreeInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Model = null;
            item.Ingredient.Clear();
            item.HarvestSound.Clear();
            item.Production = null;
            item.Name = default;
            item.TrunkFlexibility = default(Single);
            item.BranchFlexibility = default(Single);
            item.TrunkAmplitude = default(Single);
            item.FrontAmplitude = default(Single);
            item.BackAmplitude = default(Single);
            item.SideAmplitude = default(Single);
            item.FrontFrequency = default(Single);
            item.BackFrequency = default(Single);
            item.SideFrequency = default(Single);
            item.LeafFlexibility = default(Single);
            item.LeafAmplitude = default(Single);
            item.LeafFrequency = default(Single);
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ITreeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITreeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ITree obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Ingredient.Relink(mapping);
            obj.HarvestSound.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITreeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ITreeInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TreeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TreeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Tree)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Tree)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class TreeCommon : Fallout4MajorRecordCommon
    {
        public new static readonly TreeCommon Instance = new TreeCommon();

        public Tree.Mask<bool> GetEqualsMask(
            ITreeGetter item,
            ITreeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Tree.Mask<bool>(false);
            ((TreeCommon)((ITreeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITreeGetter item,
            ITreeGetter rhs,
            Tree.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Ingredient = item.Ingredient.Equals(rhs.Ingredient);
            ret.HarvestSound = item.HarvestSound.Equals(rhs.HarvestSound);
            ret.Production = EqualsMaskHelper.EqualsHelper(
                item.Production,
                rhs.Production,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.TrunkFlexibility = item.TrunkFlexibility.EqualsWithin(rhs.TrunkFlexibility);
            ret.BranchFlexibility = item.BranchFlexibility.EqualsWithin(rhs.BranchFlexibility);
            ret.TrunkAmplitude = item.TrunkAmplitude.EqualsWithin(rhs.TrunkAmplitude);
            ret.FrontAmplitude = item.FrontAmplitude.EqualsWithin(rhs.FrontAmplitude);
            ret.BackAmplitude = item.BackAmplitude.EqualsWithin(rhs.BackAmplitude);
            ret.SideAmplitude = item.SideAmplitude.EqualsWithin(rhs.SideAmplitude);
            ret.FrontFrequency = item.FrontFrequency.EqualsWithin(rhs.FrontFrequency);
            ret.BackFrequency = item.BackFrequency.EqualsWithin(rhs.BackFrequency);
            ret.SideFrequency = item.SideFrequency.EqualsWithin(rhs.SideFrequency);
            ret.LeafFlexibility = item.LeafFlexibility.EqualsWithin(rhs.LeafFlexibility);
            ret.LeafAmplitude = item.LeafAmplitude.EqualsWithin(rhs.LeafAmplitude);
            ret.LeafFrequency = item.LeafFrequency.EqualsWithin(rhs.LeafFrequency);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ITreeGetter item,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITreeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Tree.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Tree =>");
            }
            else
            {
                sb.AppendLine($"{name} (Tree) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITreeGetter item,
            StructuredStringBuilder sb,
            Tree.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if (printMask?.Ingredient ?? true)
            {
                sb.AppendItem(item.Ingredient.FormKeyNullable, "Ingredient");
            }
            if (printMask?.HarvestSound ?? true)
            {
                sb.AppendItem(item.HarvestSound.FormKeyNullable, "HarvestSound");
            }
            if ((printMask?.Production?.Overall ?? true)
                && item.Production is {} ProductionItem)
            {
                ProductionItem?.Print(sb, "Production");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.TrunkFlexibility ?? true)
            {
                sb.AppendItem(item.TrunkFlexibility, "TrunkFlexibility");
            }
            if (printMask?.BranchFlexibility ?? true)
            {
                sb.AppendItem(item.BranchFlexibility, "BranchFlexibility");
            }
            if (printMask?.TrunkAmplitude ?? true)
            {
                sb.AppendItem(item.TrunkAmplitude, "TrunkAmplitude");
            }
            if (printMask?.FrontAmplitude ?? true)
            {
                sb.AppendItem(item.FrontAmplitude, "FrontAmplitude");
            }
            if (printMask?.BackAmplitude ?? true)
            {
                sb.AppendItem(item.BackAmplitude, "BackAmplitude");
            }
            if (printMask?.SideAmplitude ?? true)
            {
                sb.AppendItem(item.SideAmplitude, "SideAmplitude");
            }
            if (printMask?.FrontFrequency ?? true)
            {
                sb.AppendItem(item.FrontFrequency, "FrontFrequency");
            }
            if (printMask?.BackFrequency ?? true)
            {
                sb.AppendItem(item.BackFrequency, "BackFrequency");
            }
            if (printMask?.SideFrequency ?? true)
            {
                sb.AppendItem(item.SideFrequency, "SideFrequency");
            }
            if (printMask?.LeafFlexibility ?? true)
            {
                sb.AppendItem(item.LeafFlexibility, "LeafFlexibility");
            }
            if (printMask?.LeafAmplitude ?? true)
            {
                sb.AppendItem(item.LeafAmplitude, "LeafAmplitude");
            }
            if (printMask?.LeafFrequency ?? true)
            {
                sb.AppendItem(item.LeafFrequency, "LeafFrequency");
            }
        }
        
        public static Tree_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Tree_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Tree_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Tree_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Tree_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Tree_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Tree_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Tree_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITreeGetter? lhs,
            ITreeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Tree_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Tree_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Tree_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.Ingredient) ?? true))
            {
                if (!lhs.Ingredient.Equals(rhs.Ingredient)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.HarvestSound) ?? true))
            {
                if (!lhs.HarvestSound.Equals(rhs.HarvestSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.Production) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Production, rhs.Production, out var lhsProduction, out var rhsProduction, out var isProductionEqual))
                {
                    if (!((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)lhsProduction).CommonInstance()!).Equals(lhsProduction, rhsProduction, equalsMask?.GetSubCrystal((int)Tree_FieldIndex.Production))) return false;
                }
                else if (!isProductionEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.TrunkFlexibility) ?? true))
            {
                if (!lhs.TrunkFlexibility.EqualsWithin(rhs.TrunkFlexibility)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.BranchFlexibility) ?? true))
            {
                if (!lhs.BranchFlexibility.EqualsWithin(rhs.BranchFlexibility)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.TrunkAmplitude) ?? true))
            {
                if (!lhs.TrunkAmplitude.EqualsWithin(rhs.TrunkAmplitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.FrontAmplitude) ?? true))
            {
                if (!lhs.FrontAmplitude.EqualsWithin(rhs.FrontAmplitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.BackAmplitude) ?? true))
            {
                if (!lhs.BackAmplitude.EqualsWithin(rhs.BackAmplitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.SideAmplitude) ?? true))
            {
                if (!lhs.SideAmplitude.EqualsWithin(rhs.SideAmplitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.FrontFrequency) ?? true))
            {
                if (!lhs.FrontFrequency.EqualsWithin(rhs.FrontFrequency)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.BackFrequency) ?? true))
            {
                if (!lhs.BackFrequency.EqualsWithin(rhs.BackFrequency)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.SideFrequency) ?? true))
            {
                if (!lhs.SideFrequency.EqualsWithin(rhs.SideFrequency)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafFlexibility) ?? true))
            {
                if (!lhs.LeafFlexibility.EqualsWithin(rhs.LeafFlexibility)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafAmplitude) ?? true))
            {
                if (!lhs.LeafAmplitude.EqualsWithin(rhs.LeafAmplitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafFrequency) ?? true))
            {
                if (!lhs.LeafFrequency.EqualsWithin(rhs.LeafFrequency)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITreeGetter?)lhs,
                rhs: rhs as ITreeGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITreeGetter?)lhs,
                rhs: rhs as ITreeGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ITreeGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Ingredient);
            hash.Add(item.HarvestSound);
            if (item.Production is {} Productionitem)
            {
                hash.Add(Productionitem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.TrunkFlexibility);
            hash.Add(item.BranchFlexibility);
            hash.Add(item.TrunkAmplitude);
            hash.Add(item.FrontAmplitude);
            hash.Add(item.BackAmplitude);
            hash.Add(item.SideAmplitude);
            hash.Add(item.FrontFrequency);
            hash.Add(item.BackFrequency);
            hash.Add(item.SideFrequency);
            hash.Add(item.LeafFlexibility);
            hash.Add(item.LeafAmplitude);
            hash.Add(item.LeafFrequency);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ITreeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITreeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Tree.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITreeGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.Ingredient, out var IngredientInfo))
            {
                yield return IngredientInfo;
            }
            if (FormLinkInformation.TryFactory(obj.HarvestSound, out var HarvestSoundInfo))
            {
                yield return HarvestSoundInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public Tree Duplicate(
            ITreeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Tree(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITreeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITreeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class TreeSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly TreeSetterTranslationCommon Instance = new TreeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITreeInternal item,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ITree item,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Tree_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Ingredient) ?? true))
            {
                item.Ingredient.SetTo(rhs.Ingredient.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.HarvestSound) ?? true))
            {
                item.HarvestSound.SetTo(rhs.HarvestSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Production) ?? true))
            {
                errorMask?.PushIndex((int)Tree_FieldIndex.Production);
                try
                {
                    if(rhs.Production is {} rhsProduction)
                    {
                        item.Production = rhsProduction.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Tree_FieldIndex.Production));
                    }
                    else
                    {
                        item.Production = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.TrunkFlexibility) ?? true))
            {
                item.TrunkFlexibility = rhs.TrunkFlexibility;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.BranchFlexibility) ?? true))
            {
                item.BranchFlexibility = rhs.BranchFlexibility;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.TrunkAmplitude) ?? true))
            {
                item.TrunkAmplitude = rhs.TrunkAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.FrontAmplitude) ?? true))
            {
                item.FrontAmplitude = rhs.FrontAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.BackAmplitude) ?? true))
            {
                item.BackAmplitude = rhs.BackAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.SideAmplitude) ?? true))
            {
                item.SideAmplitude = rhs.SideAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.FrontFrequency) ?? true))
            {
                item.FrontFrequency = rhs.FrontFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.BackFrequency) ?? true))
            {
                item.BackFrequency = rhs.BackFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.SideFrequency) ?? true))
            {
                item.SideFrequency = rhs.SideFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafFlexibility) ?? true))
            {
                item.LeafFlexibility = rhs.LeafFlexibility;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafAmplitude) ?? true))
            {
                item.LeafAmplitude = rhs.LeafAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)Tree_FieldIndex.LeafFrequency) ?? true))
            {
                item.LeafFrequency = rhs.LeafFrequency;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITree item,
            ITreeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITreeInternal)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITree)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITreeInternal)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITree)item,
                rhs: (ITreeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Tree DeepCopy(
            ITreeGetter item,
            Tree.TranslationMask? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ((TreeSetterTranslationCommon)((ITreeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Tree DeepCopy(
            ITreeGetter item,
            out Tree.ErrorMask errorMask,
            Tree.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ((TreeSetterTranslationCommon)((ITreeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Tree.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Tree DeepCopy(
            ITreeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Tree ret = (Tree)((TreeCommon)((ITreeGetter)item).CommonInstance()!).GetNew();
            ((TreeSetterTranslationCommon)((ITreeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Tree
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Tree_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TreeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TreeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TreeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class TreeBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly TreeBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ITreeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Ingredient,
                header: translationParams.ConvertToCustom(RecordTypes.PFIG));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HarvestSound,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            if (item.Production is {} ProductionItem)
            {
                ((SeasonalIngredientProductionBinaryWriteTranslation)((IBinaryItem)ProductionItem).BinaryWriteTranslator).Write(
                    item: ProductionItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.CNAM)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TrunkFlexibility);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BranchFlexibility);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TrunkAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FrontAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BackAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SideAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FrontFrequency);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BackFrequency);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SideFrequency);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.LeafFlexibility);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.LeafAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.LeafFrequency);
            }
        }

        public void Write(
            MutagenWriter writer,
            ITreeGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.TREE,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITreeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITreeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITreeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TreeBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly TreeBinaryCreateTranslation Instance = new TreeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.TREE;
        public static ParseResult FillBinaryRecordTypes(
            ITreeInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Fallout4.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Tree_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Fallout4.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Tree_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MODS:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Tree_FieldIndex.Model;
                }
                case RecordTypeInts.PFIG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Ingredient.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Tree_FieldIndex.Ingredient;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HarvestSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Tree_FieldIndex.HarvestSound;
                }
                case RecordTypeInts.PFPC:
                {
                    item.Production = Mutagen.Bethesda.Fallout4.SeasonalIngredientProduction.CreateFromBinary(frame: frame);
                    return (int)Tree_FieldIndex.Production;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Tree_FieldIndex.Name;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.TrunkFlexibility = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BranchFlexibility = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.TrunkAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FrontAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BackAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SideAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FrontFrequency = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BackFrequency = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SideFrequency = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.LeafFlexibility = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.LeafAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.LeafFrequency = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)Tree_FieldIndex.LeafFrequency;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class TreeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class TreeBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ITreeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Tree_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Tree_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TreeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TreeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TreeCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TreeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TreeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ITree);

        public Tree.MajorFlag MajorFlags => (Tree.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Ingredient
        private int? _IngredientLocation;
        public IFormLinkNullableGetter<IHarvestTargetGetter> Ingredient => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IHarvestTargetGetter>(_package, _recordData, _IngredientLocation);
        #endregion
        #region HarvestSound
        private int? _HarvestSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> HarvestSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _HarvestSoundLocation);
        #endregion
        #region Production
        private RangeInt32? _ProductionLocation;
        public ISeasonalIngredientProductionGetter? Production => _ProductionLocation.HasValue ? SeasonalIngredientProductionBinaryOverlay.SeasonalIngredientProductionFactory(_recordData.Slice(_ProductionLocation!.Value.Min), _package) : default;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        private RangeInt32? _CNAMLocation;
        #region TrunkFlexibility
        private int _TrunkFlexibilityLocation => _CNAMLocation!.Value.Min;
        private bool _TrunkFlexibility_IsSet => _CNAMLocation.HasValue;
        public Single TrunkFlexibility => _TrunkFlexibility_IsSet ? _recordData.Slice(_TrunkFlexibilityLocation, 4).Float() : default(Single);
        #endregion
        #region BranchFlexibility
        private int _BranchFlexibilityLocation => _CNAMLocation!.Value.Min + 0x4;
        private bool _BranchFlexibility_IsSet => _CNAMLocation.HasValue;
        public Single BranchFlexibility => _BranchFlexibility_IsSet ? _recordData.Slice(_BranchFlexibilityLocation, 4).Float() : default(Single);
        #endregion
        #region TrunkAmplitude
        private int _TrunkAmplitudeLocation => _CNAMLocation!.Value.Min + 0x8;
        private bool _TrunkAmplitude_IsSet => _CNAMLocation.HasValue;
        public Single TrunkAmplitude => _TrunkAmplitude_IsSet ? _recordData.Slice(_TrunkAmplitudeLocation, 4).Float() : default(Single);
        #endregion
        #region FrontAmplitude
        private int _FrontAmplitudeLocation => _CNAMLocation!.Value.Min + 0xC;
        private bool _FrontAmplitude_IsSet => _CNAMLocation.HasValue;
        public Single FrontAmplitude => _FrontAmplitude_IsSet ? _recordData.Slice(_FrontAmplitudeLocation, 4).Float() : default(Single);
        #endregion
        #region BackAmplitude
        private int _BackAmplitudeLocation => _CNAMLocation!.Value.Min + 0x10;
        private bool _BackAmplitude_IsSet => _CNAMLocation.HasValue;
        public Single BackAmplitude => _BackAmplitude_IsSet ? _recordData.Slice(_BackAmplitudeLocation, 4).Float() : default(Single);
        #endregion
        #region SideAmplitude
        private int _SideAmplitudeLocation => _CNAMLocation!.Value.Min + 0x14;
        private bool _SideAmplitude_IsSet => _CNAMLocation.HasValue;
        public Single SideAmplitude => _SideAmplitude_IsSet ? _recordData.Slice(_SideAmplitudeLocation, 4).Float() : default(Single);
        #endregion
        #region FrontFrequency
        private int _FrontFrequencyLocation => _CNAMLocation!.Value.Min + 0x18;
        private bool _FrontFrequency_IsSet => _CNAMLocation.HasValue;
        public Single FrontFrequency => _FrontFrequency_IsSet ? _recordData.Slice(_FrontFrequencyLocation, 4).Float() : default(Single);
        #endregion
        #region BackFrequency
        private int _BackFrequencyLocation => _CNAMLocation!.Value.Min + 0x1C;
        private bool _BackFrequency_IsSet => _CNAMLocation.HasValue;
        public Single BackFrequency => _BackFrequency_IsSet ? _recordData.Slice(_BackFrequencyLocation, 4).Float() : default(Single);
        #endregion
        #region SideFrequency
        private int _SideFrequencyLocation => _CNAMLocation!.Value.Min + 0x20;
        private bool _SideFrequency_IsSet => _CNAMLocation.HasValue;
        public Single SideFrequency => _SideFrequency_IsSet ? _recordData.Slice(_SideFrequencyLocation, 4).Float() : default(Single);
        #endregion
        #region LeafFlexibility
        private int _LeafFlexibilityLocation => _CNAMLocation!.Value.Min + 0x24;
        private bool _LeafFlexibility_IsSet => _CNAMLocation.HasValue;
        public Single LeafFlexibility => _LeafFlexibility_IsSet ? _recordData.Slice(_LeafFlexibilityLocation, 4).Float() : default(Single);
        #endregion
        #region LeafAmplitude
        private int _LeafAmplitudeLocation => _CNAMLocation!.Value.Min + 0x28;
        private bool _LeafAmplitude_IsSet => _CNAMLocation.HasValue;
        public Single LeafAmplitude => _LeafAmplitude_IsSet ? _recordData.Slice(_LeafAmplitudeLocation, 4).Float() : default(Single);
        #endregion
        #region LeafFrequency
        private int _LeafFrequencyLocation => _CNAMLocation!.Value.Min + 0x2C;
        private bool _LeafFrequency_IsSet => _CNAMLocation.HasValue;
        public Single LeafFrequency => _LeafFrequency_IsSet ? _recordData.Slice(_LeafFrequencyLocation, 4).Float() : default(Single);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TreeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITreeGetter TreeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TreeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ITreeGetter TreeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TreeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Tree_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Tree_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MODS:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Tree_FieldIndex.Model;
                }
                case RecordTypeInts.PFIG:
                {
                    _IngredientLocation = (stream.Position - offset);
                    return (int)Tree_FieldIndex.Ingredient;
                }
                case RecordTypeInts.SNAM:
                {
                    _HarvestSoundLocation = (stream.Position - offset);
                    return (int)Tree_FieldIndex.HarvestSound;
                }
                case RecordTypeInts.PFPC:
                {
                    _ProductionLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Tree_FieldIndex.Production;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Tree_FieldIndex.Name;
                }
                case RecordTypeInts.CNAM:
                {
                    _CNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Tree_FieldIndex.LeafFrequency;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TreeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Tree>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITreeGetter rhs) return false;
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITreeGetter? obj)
        {
            return ((TreeCommon)((ITreeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TreeCommon)((ITreeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

