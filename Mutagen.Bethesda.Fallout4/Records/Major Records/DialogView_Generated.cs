/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class DialogView :
        Fallout4MajorRecord,
        IDialogViewInternal,
        IEquatable<IDialogViewGetter>,
        ILoquiObjectSetter<DialogView>
    {
        #region Ctor
        protected DialogView()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Quest
        private readonly IFormLink<IQuestGetter> _Quest = new FormLink<IQuestGetter>();
        public IFormLink<IQuestGetter> Quest
        {
            get => _Quest;
            set => _Quest.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IQuestGetter> IDialogViewGetter.Quest => this.Quest;
        #endregion
        #region Branches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IDialogBranchGetter>> _Branches = new ExtendedList<IFormLinkGetter<IDialogBranchGetter>>();
        public ExtendedList<IFormLinkGetter<IDialogBranchGetter>> Branches
        {
            get => this._Branches;
            init => this._Branches = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IDialogBranchGetter>> IDialogViewGetter.Branches => _Branches;
        #endregion

        #endregion
        #region TNAMs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SliceList<byte> _TNAMs = new SliceList<byte>();
        public SliceList<byte> TNAMs
        {
            get => this._TNAMs;
            init => this._TNAMs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ReadOnlyMemorySlice<Byte>> IDialogViewGetter.TNAMs => _TNAMs;
        #endregion

        #endregion
        #region ENAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ENAM;
        public MemorySlice<Byte>? ENAM
        {
            get => this._ENAM;
            set => this._ENAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogViewGetter.ENAM => this.ENAM;
        #endregion
        #region DNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DNAM;
        public MemorySlice<Byte>? DNAM
        {
            get => this._DNAM;
            set => this._DNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogViewGetter.DNAM => this.DNAM;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogViewMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Quest = initialValue;
                this.Branches = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.TNAMs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ENAM = initialValue;
                this.DNAM = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem Quest,
                TItem Branches,
                TItem TNAMs,
                TItem ENAM,
                TItem DNAM)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.Quest = Quest;
                this.Branches = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Branches, Enumerable.Empty<(int Index, TItem Value)>());
                this.TNAMs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(TNAMs, Enumerable.Empty<(int Index, TItem Value)>());
                this.ENAM = ENAM;
                this.DNAM = DNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Quest;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Branches;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? TNAMs;
            public TItem ENAM;
            public TItem DNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Quest, rhs.Quest)) return false;
                if (!object.Equals(this.Branches, rhs.Branches)) return false;
                if (!object.Equals(this.TNAMs, rhs.TNAMs)) return false;
                if (!object.Equals(this.ENAM, rhs.ENAM)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Quest);
                hash.Add(this.Branches);
                hash.Add(this.TNAMs);
                hash.Add(this.ENAM);
                hash.Add(this.DNAM);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Quest)) return false;
                if (this.Branches != null)
                {
                    if (!eval(this.Branches.Overall)) return false;
                    if (this.Branches.Specific != null)
                    {
                        foreach (var item in this.Branches.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.TNAMs != null)
                {
                    if (!eval(this.TNAMs.Overall)) return false;
                    if (this.TNAMs.Specific != null)
                    {
                        foreach (var item in this.TNAMs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ENAM)) return false;
                if (!eval(this.DNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Quest)) return true;
                if (this.Branches != null)
                {
                    if (eval(this.Branches.Overall)) return true;
                    if (this.Branches.Specific != null)
                    {
                        foreach (var item in this.Branches.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.TNAMs != null)
                {
                    if (eval(this.TNAMs.Overall)) return true;
                    if (this.TNAMs.Specific != null)
                    {
                        foreach (var item in this.TNAMs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ENAM)) return true;
                if (eval(this.DNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogView.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Quest = eval(this.Quest);
                if (Branches != null)
                {
                    obj.Branches = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Branches.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Branches.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Branches.Specific = l;
                        foreach (var item in Branches.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (TNAMs != null)
                {
                    obj.TNAMs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.TNAMs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (TNAMs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.TNAMs.Specific = l;
                        foreach (var item in TNAMs.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ENAM = eval(this.ENAM);
                obj.DNAM = eval(this.DNAM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DialogView.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DialogView.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DialogView.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Quest ?? true)
                    {
                        sb.AppendItem(Quest, "Quest");
                    }
                    if ((printMask?.Branches?.Overall ?? true)
                        && Branches is {} BranchesItem)
                    {
                        sb.AppendLine("Branches =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(BranchesItem.Overall);
                            if (BranchesItem.Specific != null)
                            {
                                foreach (var subItem in BranchesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.TNAMs?.Overall ?? true)
                        && TNAMs is {} TNAMsItem)
                    {
                        sb.AppendLine("TNAMs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TNAMsItem.Overall);
                            if (TNAMsItem.Specific != null)
                            {
                                foreach (var subItem in TNAMsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ENAM ?? true)
                    {
                        sb.AppendItem(ENAM, "ENAM");
                    }
                    if (printMask?.DNAM ?? true)
                    {
                        sb.AppendItem(DNAM, "DNAM");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Quest;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Branches;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? TNAMs;
            public Exception? ENAM;
            public Exception? DNAM;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
                switch (enu)
                {
                    case DialogView_FieldIndex.Quest:
                        return Quest;
                    case DialogView_FieldIndex.Branches:
                        return Branches;
                    case DialogView_FieldIndex.TNAMs:
                        return TNAMs;
                    case DialogView_FieldIndex.ENAM:
                        return ENAM;
                    case DialogView_FieldIndex.DNAM:
                        return DNAM;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
                switch (enu)
                {
                    case DialogView_FieldIndex.Quest:
                        this.Quest = ex;
                        break;
                    case DialogView_FieldIndex.Branches:
                        this.Branches = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogView_FieldIndex.TNAMs:
                        this.TNAMs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogView_FieldIndex.ENAM:
                        this.ENAM = ex;
                        break;
                    case DialogView_FieldIndex.DNAM:
                        this.DNAM = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogView_FieldIndex enu = (DialogView_FieldIndex)index;
                switch (enu)
                {
                    case DialogView_FieldIndex.Quest:
                        this.Quest = (Exception?)obj;
                        break;
                    case DialogView_FieldIndex.Branches:
                        this.Branches = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogView_FieldIndex.TNAMs:
                        this.TNAMs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogView_FieldIndex.ENAM:
                        this.ENAM = (Exception?)obj;
                        break;
                    case DialogView_FieldIndex.DNAM:
                        this.DNAM = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Quest != null) return true;
                if (Branches != null) return true;
                if (TNAMs != null) return true;
                if (ENAM != null) return true;
                if (DNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Quest, "Quest");
                }
                if (Branches is {} BranchesItem)
                {
                    sb.AppendLine("Branches =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(BranchesItem.Overall);
                        if (BranchesItem.Specific != null)
                        {
                            foreach (var subItem in BranchesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (TNAMs is {} TNAMsItem)
                {
                    sb.AppendLine("TNAMs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TNAMsItem.Overall);
                        if (TNAMsItem.Specific != null)
                        {
                            foreach (var subItem in TNAMsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ENAM, "ENAM");
                }
                {
                    sb.AppendItem(DNAM, "DNAM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Quest = this.Quest.Combine(rhs.Quest);
                ret.Branches = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Branches?.Overall, rhs.Branches?.Overall), Noggog.ExceptionExt.Combine(this.Branches?.Specific, rhs.Branches?.Specific));
                ret.TNAMs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.TNAMs?.Overall, rhs.TNAMs?.Overall), Noggog.ExceptionExt.Combine(this.TNAMs?.Specific, rhs.TNAMs?.Specific));
                ret.ENAM = this.ENAM.Combine(rhs.ENAM);
                ret.DNAM = this.DNAM.Combine(rhs.DNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Quest;
            public bool Branches;
            public bool TNAMs;
            public bool ENAM;
            public bool DNAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Quest = defaultOn;
                this.Branches = defaultOn;
                this.TNAMs = defaultOn;
                this.ENAM = defaultOn;
                this.DNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Quest, null));
                ret.Add((Branches, null));
                ret.Add((TNAMs, null));
                ret.Add((ENAM, null));
                ret.Add((DNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = DialogView_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogViewCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogViewSetterCommon.Instance.RemapLinks(this, mapping);
        public DialogView(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private DialogView(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal DialogView(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public DialogView(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public DialogView(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<DialogView>.ToString(this);
        }

        protected override Type LinkType => typeof(IDialogView);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IDialogViewGetter rhs) return false;
            return ((DialogViewCommon)((IDialogViewGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogViewGetter? obj)
        {
            return ((DialogViewCommon)((IDialogViewGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogViewCommon)((IDialogViewGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogViewBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogViewBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static DialogView CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DialogView();
            ((DialogViewSetterCommon)((IDialogViewGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogView item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DialogViewSetterCommon)((IDialogViewGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogView GetNew()
        {
            return new DialogView();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogView :
        IDialogViewGetter,
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        ILoquiObjectSetter<IDialogViewInternal>
    {
        new IFormLink<IQuestGetter> Quest { get; set; }
        new ExtendedList<IFormLinkGetter<IDialogBranchGetter>> Branches { get; }
        new SliceList<byte> TNAMs { get; }
        new MemorySlice<Byte>? ENAM { get; set; }
        new MemorySlice<Byte>? DNAM { get; set; }
    }

    public partial interface IDialogViewInternal :
        IFallout4MajorRecordInternal,
        IDialogView,
        IDialogViewGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.DLVW)]
    public partial interface IDialogViewGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IDialogViewGetter>,
        IMapsToGetter<IDialogViewGetter>
    {
        static new ILoquiRegistration StaticRegistration => DialogView_Registration.Instance;
        IFormLinkGetter<IQuestGetter> Quest { get; }
        IReadOnlyList<IFormLinkGetter<IDialogBranchGetter>> Branches { get; }
        IReadOnlyList<ReadOnlyMemorySlice<Byte>> TNAMs { get; }
        ReadOnlyMemorySlice<Byte>? ENAM { get; }
        ReadOnlyMemorySlice<Byte>? DNAM { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogViewMixIn
    {
        public static void Clear(this IDialogViewInternal item)
        {
            ((DialogViewSetterCommon)((IDialogViewGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogView.Mask<bool> GetEqualsMask(
            this IDialogViewGetter item,
            IDialogViewGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDialogViewGetter item,
            string? name = null,
            DialogView.Mask<bool>? printMask = null)
        {
            return ((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDialogViewGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogView.Mask<bool>? printMask = null)
        {
            ((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogViewGetter item,
            IDialogViewGetter rhs,
            DialogView.TranslationMask? equalsMask = null)
        {
            return ((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogViewInternal lhs,
            IDialogViewGetter rhs,
            out DialogView.ErrorMask errorMask,
            DialogView.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogViewSetterTranslationCommon)((IDialogViewGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogView.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogViewInternal lhs,
            IDialogViewGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogViewSetterTranslationCommon)((IDialogViewGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogView DeepCopy(
            this IDialogViewGetter item,
            DialogView.TranslationMask? copyMask = null)
        {
            return ((DialogViewSetterTranslationCommon)((IDialogViewGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogView DeepCopy(
            this IDialogViewGetter item,
            out DialogView.ErrorMask errorMask,
            DialogView.TranslationMask? copyMask = null)
        {
            return ((DialogViewSetterTranslationCommon)((IDialogViewGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogView DeepCopy(
            this IDialogViewGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogViewSetterTranslationCommon)((IDialogViewGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static DialogView Duplicate(
            this IDialogViewGetter item,
            FormKey formKey,
            DialogView.TranslationMask? copyMask = null)
        {
            return ((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static DialogView Duplicate(
            this IDialogViewGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogViewInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DialogViewSetterCommon)((IDialogViewGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum DialogView_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        Quest = 7,
        Branches = 8,
        TNAMs = 9,
        ENAM = 10,
        DNAM = 11,
    }
    #endregion

    #region Registration
    internal partial class DialogView_Registration : ILoquiRegistration
    {
        public static readonly DialogView_Registration Instance = new DialogView_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(DialogView.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogView.ErrorMask);

        public static readonly Type ClassType = typeof(DialogView);

        public static readonly Type GetterType = typeof(IDialogViewGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogView);

        public static readonly Type? InternalSetterType = typeof(IDialogViewInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.DialogView";

        public const string Name = "DialogView";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DLVW;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.DLVW);
            var all = RecordCollection.Factory(
                RecordTypes.DLVW,
                RecordTypes.QNAM,
                RecordTypes.BNAM,
                RecordTypes.TNAM,
                RecordTypes.ENAM,
                RecordTypes.DNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DialogViewBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DialogViewSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly DialogViewSetterCommon Instance = new DialogViewSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogViewInternal item)
        {
            ClearPartial();
            item.Quest.Clear();
            item.Branches.Clear();
            item.TNAMs.Clear();
            item.ENAM = default;
            item.DNAM = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IDialogViewInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogViewInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IDialogView obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Quest.Relink(mapping);
            obj.Branches.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogViewInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IDialogViewInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: DialogViewBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogViewBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (DialogView)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (DialogView)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class DialogViewCommon : Fallout4MajorRecordCommon
    {
        public new static readonly DialogViewCommon Instance = new DialogViewCommon();

        public DialogView.Mask<bool> GetEqualsMask(
            IDialogViewGetter item,
            IDialogViewGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogView.Mask<bool>(false);
            ((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogViewGetter item,
            IDialogViewGetter rhs,
            DialogView.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Quest = item.Quest.Equals(rhs.Quest);
            ret.Branches = item.Branches.CollectionEqualsHelper(
                rhs.Branches,
                (l, r) => object.Equals(l, r),
                include);
            ret.TNAMs = item.TNAMs.CollectionEqualsHelper(
                rhs.TNAMs,
                (l, r) => MemoryExtensions.SequenceEqual(l.Span, r.Span),
                include);
            ret.ENAM = MemorySliceExt.SequenceEqual(item.ENAM, rhs.ENAM);
            ret.DNAM = MemorySliceExt.SequenceEqual(item.DNAM, rhs.DNAM);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IDialogViewGetter item,
            string? name = null,
            DialogView.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDialogViewGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogView.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DialogView =>");
            }
            else
            {
                sb.AppendLine($"{name} (DialogView) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDialogViewGetter item,
            StructuredStringBuilder sb,
            DialogView.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Quest ?? true)
            {
                sb.AppendItem(item.Quest.FormKey, "Quest");
            }
            if (printMask?.Branches?.Overall ?? true)
            {
                sb.AppendLine("Branches =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Branches)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.TNAMs?.Overall ?? true)
            {
                sb.AppendLine("TNAMs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.TNAMs)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendLine($"Item => {SpanExt.ToHexString(subItem)}");
                        }
                    }
                }
            }
            if ((printMask?.ENAM ?? true)
                && item.ENAM is {} ENAMItem)
            {
                sb.AppendLine($"ENAM => {SpanExt.ToHexString(ENAMItem)}");
            }
            if ((printMask?.DNAM ?? true)
                && item.DNAM is {} DNAMItem)
            {
                sb.AppendLine($"DNAM => {SpanExt.ToHexString(DNAMItem)}");
            }
        }
        
        public static DialogView_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogView_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (DialogView_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (DialogView_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (DialogView_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (DialogView_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (DialogView_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (DialogView_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new DialogView_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogView_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogView_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (DialogView_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogView_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogViewGetter? lhs,
            IDialogViewGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)DialogView_FieldIndex.Quest) ?? true))
            {
                if (!lhs.Quest.Equals(rhs.Quest)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogView_FieldIndex.Branches) ?? true))
            {
                if (!lhs.Branches.SequenceEqualNullable(rhs.Branches)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogView_FieldIndex.TNAMs) ?? true))
            {
                if (!lhs.TNAMs.SequenceEqualNullable(rhs.TNAMs)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogView_FieldIndex.ENAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ENAM, rhs.ENAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogView_FieldIndex.DNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DNAM, rhs.DNAM)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IDialogViewGetter?)lhs,
                rhs: rhs as IDialogViewGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IDialogViewGetter?)lhs,
                rhs: rhs as IDialogViewGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IDialogViewGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Quest);
            hash.Add(item.Branches);
            hash.Add(item.TNAMs);
            if (item.ENAM is {} ENAMItem)
            {
                hash.Add(ENAMItem);
            }
            if (item.DNAM is {} DNAMItem)
            {
                hash.Add(DNAMItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogViewGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogViewGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogView.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDialogViewGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Quest);
            foreach (var item in obj.Branches)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public DialogView Duplicate(
            IDialogViewGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new DialogView(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogViewGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogViewGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class DialogViewSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly DialogViewSetterTranslationCommon Instance = new DialogViewSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogViewInternal item,
            IDialogViewGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IDialogView item,
            IDialogViewGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)DialogView_FieldIndex.Quest) ?? true))
            {
                item.Quest.SetTo(rhs.Quest.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogView_FieldIndex.Branches) ?? true))
            {
                errorMask?.PushIndex((int)DialogView_FieldIndex.Branches);
                try
                {
                    item.Branches.SetTo(
                        rhs.Branches
                            .Select(b => (IFormLinkGetter<IDialogBranchGetter>)new FormLink<IDialogBranchGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogView_FieldIndex.TNAMs) ?? true))
            {
                errorMask?.PushIndex((int)DialogView_FieldIndex.TNAMs);
                try
                {
                    item.TNAMs.SetTo(
                        rhs.TNAMs
                            .Select(b => new MemorySlice<byte>(b.ToArray())));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogView_FieldIndex.ENAM) ?? true))
            {
                if(rhs.ENAM is {} ENAMrhs)
                {
                    item.ENAM = ENAMrhs.ToArray();
                }
                else
                {
                    item.ENAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogView_FieldIndex.DNAM) ?? true))
            {
                if(rhs.DNAM is {} DNAMrhs)
                {
                    item.DNAM = DNAMrhs.ToArray();
                }
                else
                {
                    item.DNAM = default;
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDialogView item,
            IDialogViewGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogViewInternal)item,
                rhs: (IDialogViewGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogView)item,
                rhs: (IDialogViewGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogViewInternal)item,
                rhs: (IDialogViewGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogView)item,
                rhs: (IDialogViewGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public DialogView DeepCopy(
            IDialogViewGetter item,
            DialogView.TranslationMask? copyMask = null)
        {
            DialogView ret = (DialogView)((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).GetNew();
            ((DialogViewSetterTranslationCommon)((IDialogViewGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogView DeepCopy(
            IDialogViewGetter item,
            out DialogView.ErrorMask errorMask,
            DialogView.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogView ret = (DialogView)((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).GetNew();
            ((DialogViewSetterTranslationCommon)((IDialogViewGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogView.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogView DeepCopy(
            IDialogViewGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogView ret = (DialogView)((DialogViewCommon)((IDialogViewGetter)item).CommonInstance()!).GetNew();
            ((DialogViewSetterTranslationCommon)((IDialogViewGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class DialogView
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogView_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DialogView_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogViewCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogViewSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogViewSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class DialogViewBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly DialogViewBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IDialogViewGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Quest,
                header: translationParams.ConvertToCustom(RecordTypes.QNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IDialogBranchGetter>>.Instance.Write(
                writer: writer,
                items: item.Branches,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IDialogBranchGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.BNAM));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ReadOnlyMemorySlice<Byte>>.Instance.WritePerItem(
                writer: writer,
                items: item.TNAMs,
                recordType: translationParams.ConvertToCustom(RecordTypes.TNAM),
                transl: ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ENAM,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DNAM,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
        }

        public void Write(
            MutagenWriter writer,
            IDialogViewGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.DLVW,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDialogViewGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IDialogViewGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IDialogViewGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DialogViewBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly DialogViewBinaryCreateTranslation Instance = new DialogViewBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.DLVW;
        public static ParseResult FillBinaryRecordTypes(
            IDialogViewInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.QNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Quest.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogView_FieldIndex.Quest;
                }
                case RecordTypeInts.BNAM:
                {
                    item.Branches.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IDialogBranchGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.BNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)DialogView_FieldIndex.Branches;
                }
                case RecordTypeInts.TNAM:
                {
                    item.TNAMs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<MemorySlice<Byte>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.TNAM),
                            transl: ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse));
                    return (int)DialogView_FieldIndex.TNAMs;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ENAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogView_FieldIndex.ENAM;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogView_FieldIndex.DNAM;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class DialogViewBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class DialogViewBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IDialogViewGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogView_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DialogView_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogViewCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogViewSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogViewCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogViewBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogViewBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IDialogView);


        #region Quest
        private int? _QuestLocation;
        public IFormLinkGetter<IQuestGetter> Quest => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IQuestGetter>(_package, _recordData, _QuestLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IDialogBranchGetter>> Branches { get; private set; } = Array.Empty<IFormLinkGetter<IDialogBranchGetter>>();
        public IReadOnlyList<ReadOnlyMemorySlice<Byte>> TNAMs { get; private set; } = Array.Empty<ReadOnlyMemorySlice<Byte>>();
        #region ENAM
        private int? _ENAMLocation;
        public ReadOnlyMemorySlice<Byte>? ENAM => _ENAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ENAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region DNAM
        private int? _DNAMLocation;
        public ReadOnlyMemorySlice<Byte>? DNAM => _DNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogViewBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDialogViewGetter DialogViewFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DialogViewBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IDialogViewGetter DialogViewFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DialogViewFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.QNAM:
                {
                    _QuestLocation = (stream.Position - offset);
                    return (int)DialogView_FieldIndex.Quest;
                }
                case RecordTypeInts.BNAM:
                {
                    this.Branches = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IDialogBranchGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IDialogBranchGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.BNAM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)DialogView_FieldIndex.Branches;
                }
                case RecordTypeInts.TNAM:
                {
                    this.TNAMs = BinaryOverlayList.FactoryByArray<ReadOnlyMemorySlice<Byte>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => p.MetaData.Constants.Subrecord(s).Content,
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.TNAM,
                            skipHeader: false,
                            translationParams: translationParams));
                    return (int)DialogView_FieldIndex.TNAMs;
                }
                case RecordTypeInts.ENAM:
                {
                    _ENAMLocation = (stream.Position - offset);
                    return (int)DialogView_FieldIndex.ENAM;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset);
                    return (int)DialogView_FieldIndex.DNAM;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogViewMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<DialogView>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IDialogViewGetter rhs) return false;
            return ((DialogViewCommon)((IDialogViewGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogViewGetter? obj)
        {
            return ((DialogViewCommon)((IDialogViewGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogViewCommon)((IDialogViewGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

