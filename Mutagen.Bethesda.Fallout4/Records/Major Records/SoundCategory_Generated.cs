/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class SoundCategory :
        Fallout4MajorRecord,
        IEquatable<ISoundCategoryGetter>,
        ILoquiObjectSetter<SoundCategory>,
        ISoundCategoryInternal
    {
        #region Ctor
        protected SoundCategory()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ISoundCategoryGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Flags
        public SoundCategory.Flag Flags { get; set; } = default(SoundCategory.Flag);
        #endregion
        #region Parent
        private readonly IFormLinkNullable<ISoundCategoryGetter> _Parent = new FormLinkNullable<ISoundCategoryGetter>();
        public IFormLinkNullable<ISoundCategoryGetter> Parent
        {
            get => _Parent;
            set => _Parent.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundCategoryGetter> ISoundCategoryGetter.Parent => this.Parent;
        #endregion
        #region MenuSlider
        private readonly IFormLinkNullable<ISoundCategoryGetter> _MenuSlider = new FormLinkNullable<ISoundCategoryGetter>();
        public IFormLinkNullable<ISoundCategoryGetter> MenuSlider
        {
            get => _MenuSlider;
            set => _MenuSlider.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundCategoryGetter> ISoundCategoryGetter.MenuSlider => this.MenuSlider;
        #endregion
        #region StaticVolumeMultiplier
        public Single? StaticVolumeMultiplier { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ISoundCategoryGetter.StaticVolumeMultiplier => this.StaticVolumeMultiplier;
        #endregion
        #region DefaultMenuVolume
        public Single? DefaultMenuVolume { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ISoundCategoryGetter.DefaultMenuVolume => this.DefaultMenuVolume;
        #endregion
        #region MinFrequencyMultiplier
        public Single? MinFrequencyMultiplier { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ISoundCategoryGetter.MinFrequencyMultiplier => this.MinFrequencyMultiplier;
        #endregion
        #region SidechainTargetMultiplier
        public Single? SidechainTargetMultiplier { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ISoundCategoryGetter.SidechainTargetMultiplier => this.SidechainTargetMultiplier;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundCategoryMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Flags = initialValue;
                this.Parent = initialValue;
                this.MenuSlider = initialValue;
                this.StaticVolumeMultiplier = initialValue;
                this.DefaultMenuVolume = initialValue;
                this.MinFrequencyMultiplier = initialValue;
                this.SidechainTargetMultiplier = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem Name,
                TItem Flags,
                TItem Parent,
                TItem MenuSlider,
                TItem StaticVolumeMultiplier,
                TItem DefaultMenuVolume,
                TItem MinFrequencyMultiplier,
                TItem SidechainTargetMultiplier)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.Name = Name;
                this.Flags = Flags;
                this.Parent = Parent;
                this.MenuSlider = MenuSlider;
                this.StaticVolumeMultiplier = StaticVolumeMultiplier;
                this.DefaultMenuVolume = DefaultMenuVolume;
                this.MinFrequencyMultiplier = MinFrequencyMultiplier;
                this.SidechainTargetMultiplier = SidechainTargetMultiplier;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Flags;
            public TItem Parent;
            public TItem MenuSlider;
            public TItem StaticVolumeMultiplier;
            public TItem DefaultMenuVolume;
            public TItem MinFrequencyMultiplier;
            public TItem SidechainTargetMultiplier;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Parent, rhs.Parent)) return false;
                if (!object.Equals(this.MenuSlider, rhs.MenuSlider)) return false;
                if (!object.Equals(this.StaticVolumeMultiplier, rhs.StaticVolumeMultiplier)) return false;
                if (!object.Equals(this.DefaultMenuVolume, rhs.DefaultMenuVolume)) return false;
                if (!object.Equals(this.MinFrequencyMultiplier, rhs.MinFrequencyMultiplier)) return false;
                if (!object.Equals(this.SidechainTargetMultiplier, rhs.SidechainTargetMultiplier)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.Parent);
                hash.Add(this.MenuSlider);
                hash.Add(this.StaticVolumeMultiplier);
                hash.Add(this.DefaultMenuVolume);
                hash.Add(this.MinFrequencyMultiplier);
                hash.Add(this.SidechainTargetMultiplier);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Parent)) return false;
                if (!eval(this.MenuSlider)) return false;
                if (!eval(this.StaticVolumeMultiplier)) return false;
                if (!eval(this.DefaultMenuVolume)) return false;
                if (!eval(this.MinFrequencyMultiplier)) return false;
                if (!eval(this.SidechainTargetMultiplier)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Parent)) return true;
                if (eval(this.MenuSlider)) return true;
                if (eval(this.StaticVolumeMultiplier)) return true;
                if (eval(this.DefaultMenuVolume)) return true;
                if (eval(this.MinFrequencyMultiplier)) return true;
                if (eval(this.SidechainTargetMultiplier)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundCategory.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.Parent = eval(this.Parent);
                obj.MenuSlider = eval(this.MenuSlider);
                obj.StaticVolumeMultiplier = eval(this.StaticVolumeMultiplier);
                obj.DefaultMenuVolume = eval(this.DefaultMenuVolume);
                obj.MinFrequencyMultiplier = eval(this.MinFrequencyMultiplier);
                obj.SidechainTargetMultiplier = eval(this.SidechainTargetMultiplier);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SoundCategory.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SoundCategory.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SoundCategory.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Parent ?? true)
                    {
                        sb.AppendItem(Parent, "Parent");
                    }
                    if (printMask?.MenuSlider ?? true)
                    {
                        sb.AppendItem(MenuSlider, "MenuSlider");
                    }
                    if (printMask?.StaticVolumeMultiplier ?? true)
                    {
                        sb.AppendItem(StaticVolumeMultiplier, "StaticVolumeMultiplier");
                    }
                    if (printMask?.DefaultMenuVolume ?? true)
                    {
                        sb.AppendItem(DefaultMenuVolume, "DefaultMenuVolume");
                    }
                    if (printMask?.MinFrequencyMultiplier ?? true)
                    {
                        sb.AppendItem(MinFrequencyMultiplier, "MinFrequencyMultiplier");
                    }
                    if (printMask?.SidechainTargetMultiplier ?? true)
                    {
                        sb.AppendItem(SidechainTargetMultiplier, "SidechainTargetMultiplier");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Flags;
            public Exception? Parent;
            public Exception? MenuSlider;
            public Exception? StaticVolumeMultiplier;
            public Exception? DefaultMenuVolume;
            public Exception? MinFrequencyMultiplier;
            public Exception? SidechainTargetMultiplier;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SoundCategory_FieldIndex enu = (SoundCategory_FieldIndex)index;
                switch (enu)
                {
                    case SoundCategory_FieldIndex.Name:
                        return Name;
                    case SoundCategory_FieldIndex.Flags:
                        return Flags;
                    case SoundCategory_FieldIndex.Parent:
                        return Parent;
                    case SoundCategory_FieldIndex.MenuSlider:
                        return MenuSlider;
                    case SoundCategory_FieldIndex.StaticVolumeMultiplier:
                        return StaticVolumeMultiplier;
                    case SoundCategory_FieldIndex.DefaultMenuVolume:
                        return DefaultMenuVolume;
                    case SoundCategory_FieldIndex.MinFrequencyMultiplier:
                        return MinFrequencyMultiplier;
                    case SoundCategory_FieldIndex.SidechainTargetMultiplier:
                        return SidechainTargetMultiplier;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SoundCategory_FieldIndex enu = (SoundCategory_FieldIndex)index;
                switch (enu)
                {
                    case SoundCategory_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case SoundCategory_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case SoundCategory_FieldIndex.Parent:
                        this.Parent = ex;
                        break;
                    case SoundCategory_FieldIndex.MenuSlider:
                        this.MenuSlider = ex;
                        break;
                    case SoundCategory_FieldIndex.StaticVolumeMultiplier:
                        this.StaticVolumeMultiplier = ex;
                        break;
                    case SoundCategory_FieldIndex.DefaultMenuVolume:
                        this.DefaultMenuVolume = ex;
                        break;
                    case SoundCategory_FieldIndex.MinFrequencyMultiplier:
                        this.MinFrequencyMultiplier = ex;
                        break;
                    case SoundCategory_FieldIndex.SidechainTargetMultiplier:
                        this.SidechainTargetMultiplier = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SoundCategory_FieldIndex enu = (SoundCategory_FieldIndex)index;
                switch (enu)
                {
                    case SoundCategory_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case SoundCategory_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case SoundCategory_FieldIndex.Parent:
                        this.Parent = (Exception?)obj;
                        break;
                    case SoundCategory_FieldIndex.MenuSlider:
                        this.MenuSlider = (Exception?)obj;
                        break;
                    case SoundCategory_FieldIndex.StaticVolumeMultiplier:
                        this.StaticVolumeMultiplier = (Exception?)obj;
                        break;
                    case SoundCategory_FieldIndex.DefaultMenuVolume:
                        this.DefaultMenuVolume = (Exception?)obj;
                        break;
                    case SoundCategory_FieldIndex.MinFrequencyMultiplier:
                        this.MinFrequencyMultiplier = (Exception?)obj;
                        break;
                    case SoundCategory_FieldIndex.SidechainTargetMultiplier:
                        this.SidechainTargetMultiplier = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (Parent != null) return true;
                if (MenuSlider != null) return true;
                if (StaticVolumeMultiplier != null) return true;
                if (DefaultMenuVolume != null) return true;
                if (MinFrequencyMultiplier != null) return true;
                if (SidechainTargetMultiplier != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Parent, "Parent");
                }
                {
                    sb.AppendItem(MenuSlider, "MenuSlider");
                }
                {
                    sb.AppendItem(StaticVolumeMultiplier, "StaticVolumeMultiplier");
                }
                {
                    sb.AppendItem(DefaultMenuVolume, "DefaultMenuVolume");
                }
                {
                    sb.AppendItem(MinFrequencyMultiplier, "MinFrequencyMultiplier");
                }
                {
                    sb.AppendItem(SidechainTargetMultiplier, "SidechainTargetMultiplier");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Parent = this.Parent.Combine(rhs.Parent);
                ret.MenuSlider = this.MenuSlider.Combine(rhs.MenuSlider);
                ret.StaticVolumeMultiplier = this.StaticVolumeMultiplier.Combine(rhs.StaticVolumeMultiplier);
                ret.DefaultMenuVolume = this.DefaultMenuVolume.Combine(rhs.DefaultMenuVolume);
                ret.MinFrequencyMultiplier = this.MinFrequencyMultiplier.Combine(rhs.MinFrequencyMultiplier);
                ret.SidechainTargetMultiplier = this.SidechainTargetMultiplier.Combine(rhs.SidechainTargetMultiplier);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Flags;
            public bool Parent;
            public bool MenuSlider;
            public bool StaticVolumeMultiplier;
            public bool DefaultMenuVolume;
            public bool MinFrequencyMultiplier;
            public bool SidechainTargetMultiplier;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.Parent = defaultOn;
                this.MenuSlider = defaultOn;
                this.StaticVolumeMultiplier = defaultOn;
                this.DefaultMenuVolume = defaultOn;
                this.MinFrequencyMultiplier = defaultOn;
                this.SidechainTargetMultiplier = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((Parent, null));
                ret.Add((MenuSlider, null));
                ret.Add((StaticVolumeMultiplier, null));
                ret.Add((DefaultMenuVolume, null));
                ret.Add((MinFrequencyMultiplier, null));
                ret.Add((SidechainTargetMultiplier, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SoundCategory_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SoundCategoryCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SoundCategorySetterCommon.Instance.RemapLinks(this, mapping);
        public SoundCategory(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private SoundCategory(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal SoundCategory(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SoundCategory(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public SoundCategory(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<SoundCategory>.ToString(this);
        }

        protected override Type LinkType => typeof(ISoundCategory);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISoundCategoryGetter rhs) return false;
            return ((SoundCategoryCommon)((ISoundCategoryGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundCategoryGetter? obj)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundCategoryCommon)((ISoundCategoryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundCategoryBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundCategoryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SoundCategory CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SoundCategory();
            ((SoundCategorySetterCommon)((ISoundCategoryGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundCategory item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SoundCategorySetterCommon)((ISoundCategoryGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SoundCategory GetNew()
        {
            return new SoundCategory();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundCategory :
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        ILoquiObjectSetter<ISoundCategoryInternal>,
        INamed,
        INamedRequired,
        ISoundCategoryGetter,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new SoundCategory.Flag Flags { get; set; }
        new IFormLinkNullable<ISoundCategoryGetter> Parent { get; set; }
        new IFormLinkNullable<ISoundCategoryGetter> MenuSlider { get; set; }
        new Single? StaticVolumeMultiplier { get; set; }
        new Single? DefaultMenuVolume { get; set; }
        new Single? MinFrequencyMultiplier { get; set; }
        new Single? SidechainTargetMultiplier { get; set; }
    }

    public partial interface ISoundCategoryInternal :
        IFallout4MajorRecordInternal,
        ISoundCategory,
        ISoundCategoryGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.SNCT)]
    public partial interface ISoundCategoryGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISoundCategoryGetter>,
        IMapsToGetter<ISoundCategoryGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => SoundCategory_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        SoundCategory.Flag Flags { get; }
        IFormLinkNullableGetter<ISoundCategoryGetter> Parent { get; }
        IFormLinkNullableGetter<ISoundCategoryGetter> MenuSlider { get; }
        Single? StaticVolumeMultiplier { get; }
        Single? DefaultMenuVolume { get; }
        Single? MinFrequencyMultiplier { get; }
        Single? SidechainTargetMultiplier { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundCategoryMixIn
    {
        public static void Clear(this ISoundCategoryInternal item)
        {
            ((SoundCategorySetterCommon)((ISoundCategoryGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundCategory.Mask<bool> GetEqualsMask(
            this ISoundCategoryGetter item,
            ISoundCategoryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISoundCategoryGetter item,
            string? name = null,
            SoundCategory.Mask<bool>? printMask = null)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISoundCategoryGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundCategory.Mask<bool>? printMask = null)
        {
            ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundCategoryGetter item,
            ISoundCategoryGetter rhs,
            SoundCategory.TranslationMask? equalsMask = null)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISoundCategoryInternal lhs,
            ISoundCategoryGetter rhs,
            out SoundCategory.ErrorMask errorMask,
            SoundCategory.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundCategory.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundCategoryInternal lhs,
            ISoundCategoryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundCategory DeepCopy(
            this ISoundCategoryGetter item,
            SoundCategory.TranslationMask? copyMask = null)
        {
            return ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundCategory DeepCopy(
            this ISoundCategoryGetter item,
            out SoundCategory.ErrorMask errorMask,
            SoundCategory.TranslationMask? copyMask = null)
        {
            return ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundCategory DeepCopy(
            this ISoundCategoryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SoundCategory Duplicate(
            this ISoundCategoryGetter item,
            FormKey formKey,
            SoundCategory.TranslationMask? copyMask = null)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static SoundCategory Duplicate(
            this ISoundCategoryGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundCategoryInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SoundCategorySetterCommon)((ISoundCategoryGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum SoundCategory_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        Name = 7,
        Flags = 8,
        Parent = 9,
        MenuSlider = 10,
        StaticVolumeMultiplier = 11,
        DefaultMenuVolume = 12,
        MinFrequencyMultiplier = 13,
        SidechainTargetMultiplier = 14,
    }
    #endregion

    #region Registration
    internal partial class SoundCategory_Registration : ILoquiRegistration
    {
        public static readonly SoundCategory_Registration Instance = new SoundCategory_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(SoundCategory.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundCategory.ErrorMask);

        public static readonly Type ClassType = typeof(SoundCategory);

        public static readonly Type GetterType = typeof(ISoundCategoryGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundCategory);

        public static readonly Type? InternalSetterType = typeof(ISoundCategoryInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.SoundCategory";

        public const string Name = "SoundCategory";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SNCT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SNCT);
            var all = RecordCollection.Factory(
                RecordTypes.SNCT,
                RecordTypes.FULL,
                RecordTypes.FNAM,
                RecordTypes.PNAM,
                RecordTypes.ONAM,
                RecordTypes.VNAM,
                RecordTypes.UNAM,
                RecordTypes.MNAM,
                RecordTypes.CNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SoundCategoryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SoundCategorySetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly SoundCategorySetterCommon Instance = new SoundCategorySetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundCategoryInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Flags = default(SoundCategory.Flag);
            item.Parent.Clear();
            item.MenuSlider.Clear();
            item.StaticVolumeMultiplier = default;
            item.DefaultMenuVolume = default;
            item.MinFrequencyMultiplier = default;
            item.SidechainTargetMultiplier = default;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (ISoundCategoryInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISoundCategoryInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISoundCategory obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Parent.Relink(mapping);
            obj.MenuSlider.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundCategoryInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISoundCategoryInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SoundCategoryBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SoundCategoryBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SoundCategory)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SoundCategory)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SoundCategoryCommon : Fallout4MajorRecordCommon
    {
        public new static readonly SoundCategoryCommon Instance = new SoundCategoryCommon();

        public SoundCategory.Mask<bool> GetEqualsMask(
            ISoundCategoryGetter item,
            ISoundCategoryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundCategory.Mask<bool>(false);
            ((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundCategoryGetter item,
            ISoundCategoryGetter rhs,
            SoundCategory.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Parent = item.Parent.Equals(rhs.Parent);
            ret.MenuSlider = item.MenuSlider.Equals(rhs.MenuSlider);
            ret.StaticVolumeMultiplier = item.StaticVolumeMultiplier.EqualsWithin(rhs.StaticVolumeMultiplier);
            ret.DefaultMenuVolume = item.DefaultMenuVolume.EqualsWithin(rhs.DefaultMenuVolume);
            ret.MinFrequencyMultiplier = item.MinFrequencyMultiplier.EqualsWithin(rhs.MinFrequencyMultiplier);
            ret.SidechainTargetMultiplier = item.SidechainTargetMultiplier.EqualsWithin(rhs.SidechainTargetMultiplier);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISoundCategoryGetter item,
            string? name = null,
            SoundCategory.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISoundCategoryGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundCategory.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SoundCategory =>");
            }
            else
            {
                sb.AppendLine($"{name} (SoundCategory) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISoundCategoryGetter item,
            StructuredStringBuilder sb,
            SoundCategory.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Parent ?? true)
            {
                sb.AppendItem(item.Parent.FormKeyNullable, "Parent");
            }
            if (printMask?.MenuSlider ?? true)
            {
                sb.AppendItem(item.MenuSlider.FormKeyNullable, "MenuSlider");
            }
            if ((printMask?.StaticVolumeMultiplier ?? true)
                && item.StaticVolumeMultiplier is {} StaticVolumeMultiplierItem)
            {
                sb.AppendItem(StaticVolumeMultiplierItem, "StaticVolumeMultiplier");
            }
            if ((printMask?.DefaultMenuVolume ?? true)
                && item.DefaultMenuVolume is {} DefaultMenuVolumeItem)
            {
                sb.AppendItem(DefaultMenuVolumeItem, "DefaultMenuVolume");
            }
            if ((printMask?.MinFrequencyMultiplier ?? true)
                && item.MinFrequencyMultiplier is {} MinFrequencyMultiplierItem)
            {
                sb.AppendItem(MinFrequencyMultiplierItem, "MinFrequencyMultiplier");
            }
            if ((printMask?.SidechainTargetMultiplier ?? true)
                && item.SidechainTargetMultiplier is {} SidechainTargetMultiplierItem)
            {
                sb.AppendItem(SidechainTargetMultiplierItem, "SidechainTargetMultiplier");
            }
        }
        
        public static SoundCategory_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundCategory_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (SoundCategory_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (SoundCategory_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (SoundCategory_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (SoundCategory_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (SoundCategory_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (SoundCategory_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new SoundCategory_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundCategory_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SoundCategory_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SoundCategory_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SoundCategory_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundCategoryGetter? lhs,
            ISoundCategoryGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.Parent) ?? true))
            {
                if (!lhs.Parent.Equals(rhs.Parent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.MenuSlider) ?? true))
            {
                if (!lhs.MenuSlider.Equals(rhs.MenuSlider)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.StaticVolumeMultiplier) ?? true))
            {
                if (!lhs.StaticVolumeMultiplier.EqualsWithin(rhs.StaticVolumeMultiplier)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.DefaultMenuVolume) ?? true))
            {
                if (!lhs.DefaultMenuVolume.EqualsWithin(rhs.DefaultMenuVolume)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.MinFrequencyMultiplier) ?? true))
            {
                if (!lhs.MinFrequencyMultiplier.EqualsWithin(rhs.MinFrequencyMultiplier)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.SidechainTargetMultiplier) ?? true))
            {
                if (!lhs.SidechainTargetMultiplier.EqualsWithin(rhs.SidechainTargetMultiplier)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISoundCategoryGetter?)lhs,
                rhs: rhs as ISoundCategoryGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISoundCategoryGetter?)lhs,
                rhs: rhs as ISoundCategoryGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISoundCategoryGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Flags);
            hash.Add(item.Parent);
            hash.Add(item.MenuSlider);
            if (item.StaticVolumeMultiplier is {} StaticVolumeMultiplieritem)
            {
                hash.Add(StaticVolumeMultiplieritem);
            }
            if (item.DefaultMenuVolume is {} DefaultMenuVolumeitem)
            {
                hash.Add(DefaultMenuVolumeitem);
            }
            if (item.MinFrequencyMultiplier is {} MinFrequencyMultiplieritem)
            {
                hash.Add(MinFrequencyMultiplieritem);
            }
            if (item.SidechainTargetMultiplier is {} SidechainTargetMultiplieritem)
            {
                hash.Add(SidechainTargetMultiplieritem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundCategoryGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundCategoryGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SoundCategory.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISoundCategoryGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Parent, out var ParentInfo))
            {
                yield return ParentInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MenuSlider, out var MenuSliderInfo))
            {
                yield return MenuSliderInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public SoundCategory Duplicate(
            ISoundCategoryGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SoundCategory(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundCategoryGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundCategoryGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SoundCategorySetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly SoundCategorySetterTranslationCommon Instance = new SoundCategorySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundCategoryInternal item,
            ISoundCategoryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISoundCategory item,
            ISoundCategoryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.Parent) ?? true))
            {
                item.Parent.SetTo(rhs.Parent.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.MenuSlider) ?? true))
            {
                item.MenuSlider.SetTo(rhs.MenuSlider.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.StaticVolumeMultiplier) ?? true))
            {
                item.StaticVolumeMultiplier = rhs.StaticVolumeMultiplier;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.DefaultMenuVolume) ?? true))
            {
                item.DefaultMenuVolume = rhs.DefaultMenuVolume;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.MinFrequencyMultiplier) ?? true))
            {
                item.MinFrequencyMultiplier = rhs.MinFrequencyMultiplier;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundCategory_FieldIndex.SidechainTargetMultiplier) ?? true))
            {
                item.SidechainTargetMultiplier = rhs.SidechainTargetMultiplier;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISoundCategory item,
            ISoundCategoryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundCategoryInternal)item,
                rhs: (ISoundCategoryGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundCategory)item,
                rhs: (ISoundCategoryGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundCategoryInternal)item,
                rhs: (ISoundCategoryGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundCategory)item,
                rhs: (ISoundCategoryGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SoundCategory DeepCopy(
            ISoundCategoryGetter item,
            SoundCategory.TranslationMask? copyMask = null)
        {
            SoundCategory ret = (SoundCategory)((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).GetNew();
            ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundCategory DeepCopy(
            ISoundCategoryGetter item,
            out SoundCategory.ErrorMask errorMask,
            SoundCategory.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundCategory ret = (SoundCategory)((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).GetNew();
            ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundCategory.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundCategory DeepCopy(
            ISoundCategoryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundCategory ret = (SoundCategory)((SoundCategoryCommon)((ISoundCategoryGetter)item).CommonInstance()!).GetNew();
            ((SoundCategorySetterTranslationCommon)((ISoundCategoryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundCategory
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundCategory_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundCategory_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundCategoryCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SoundCategorySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundCategorySetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundCategoryBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SoundCategoryBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISoundCategoryGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            EnumBinaryTranslation<SoundCategory.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Parent,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MenuSlider,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StaticVolumeMultiplier,
                integerType: FloatIntegerType.UShort,
                multiplier: 65535f,
                divisor: null,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DefaultMenuVolume,
                integerType: FloatIntegerType.UShort,
                multiplier: 65535f,
                divisor: null,
                header: translationParams.ConvertToCustom(RecordTypes.UNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MinFrequencyMultiplier,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.SidechainTargetMultiplier,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
        }

        public void Write(
            MutagenWriter writer,
            ISoundCategoryGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SNCT,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISoundCategoryGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISoundCategoryGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISoundCategoryGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SoundCategoryBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly SoundCategoryBinaryCreateTranslation Instance = new SoundCategoryBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SNCT;
        public static ParseResult FillBinaryRecordTypes(
            ISoundCategoryInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SoundCategory_FieldIndex.Name;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<SoundCategory.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)SoundCategory_FieldIndex.Flags;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Parent.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SoundCategory_FieldIndex.Parent;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MenuSlider.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SoundCategory_FieldIndex.MenuSlider;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.StaticVolumeMultiplier = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        integerType: FloatIntegerType.UShort,
                        multiplier: null,
                        divisor: 65535f);
                    return (int)SoundCategory_FieldIndex.StaticVolumeMultiplier;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultMenuVolume = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        integerType: FloatIntegerType.UShort,
                        multiplier: null,
                        divisor: 65535f);
                    return (int)SoundCategory_FieldIndex.DefaultMenuVolume;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MinFrequencyMultiplier = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)SoundCategory_FieldIndex.MinFrequencyMultiplier;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SidechainTargetMultiplier = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)SoundCategory_FieldIndex.SidechainTargetMultiplier;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SoundCategoryBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class SoundCategoryBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        ISoundCategoryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundCategory_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundCategory_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundCategoryCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundCategorySetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SoundCategoryCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundCategoryBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundCategoryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISoundCategory);


        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public SoundCategory.Flag Flags => EnumBinaryTranslation<SoundCategory.Flag, MutagenFrame, MutagenWriter>.Instance.ParseRecord(_FlagsLocation, _recordData, _package, 4);
        #endregion
        #region Parent
        private int? _ParentLocation;
        public IFormLinkNullableGetter<ISoundCategoryGetter> Parent => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundCategoryGetter>(_package, _recordData, _ParentLocation);
        #endregion
        #region MenuSlider
        private int? _MenuSliderLocation;
        public IFormLinkNullableGetter<ISoundCategoryGetter> MenuSlider => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundCategoryGetter>(_package, _recordData, _MenuSliderLocation);
        #endregion
        #region StaticVolumeMultiplier
        private int? _StaticVolumeMultiplierLocation;
        public Single? StaticVolumeMultiplier => _StaticVolumeMultiplierLocation.HasValue ? FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_recordData, _StaticVolumeMultiplierLocation.Value, _package.MetaData.Constants), FloatIntegerType.UShort, multiplier: null, divisor: 65535f) : default(Single?);
        #endregion
        #region DefaultMenuVolume
        private int? _DefaultMenuVolumeLocation;
        public Single? DefaultMenuVolume => _DefaultMenuVolumeLocation.HasValue ? FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DefaultMenuVolumeLocation.Value, _package.MetaData.Constants), FloatIntegerType.UShort, multiplier: null, divisor: 65535f) : default(Single?);
        #endregion
        #region MinFrequencyMultiplier
        private int? _MinFrequencyMultiplierLocation;
        public Single? MinFrequencyMultiplier => _MinFrequencyMultiplierLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _MinFrequencyMultiplierLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region SidechainTargetMultiplier
        private int? _SidechainTargetMultiplierLocation;
        public Single? SidechainTargetMultiplier => _SidechainTargetMultiplierLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _SidechainTargetMultiplierLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundCategoryBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISoundCategoryGetter SoundCategoryFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SoundCategoryBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISoundCategoryGetter SoundCategoryFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SoundCategoryFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.Name;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.Flags;
                }
                case RecordTypeInts.PNAM:
                {
                    _ParentLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.Parent;
                }
                case RecordTypeInts.ONAM:
                {
                    _MenuSliderLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.MenuSlider;
                }
                case RecordTypeInts.VNAM:
                {
                    _StaticVolumeMultiplierLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.StaticVolumeMultiplier;
                }
                case RecordTypeInts.UNAM:
                {
                    _DefaultMenuVolumeLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.DefaultMenuVolume;
                }
                case RecordTypeInts.MNAM:
                {
                    _MinFrequencyMultiplierLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.MinFrequencyMultiplier;
                }
                case RecordTypeInts.CNAM:
                {
                    _SidechainTargetMultiplierLocation = (stream.Position - offset);
                    return (int)SoundCategory_FieldIndex.SidechainTargetMultiplier;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundCategoryMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<SoundCategory>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISoundCategoryGetter rhs) return false;
            return ((SoundCategoryCommon)((ISoundCategoryGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundCategoryGetter? obj)
        {
            return ((SoundCategoryCommon)((ISoundCategoryGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundCategoryCommon)((ISoundCategoryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

