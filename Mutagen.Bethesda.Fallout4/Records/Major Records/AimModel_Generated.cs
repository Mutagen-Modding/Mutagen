/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class AimModel :
        Fallout4MajorRecord,
        IAimModelInternal,
        IEquatable<IAimModelGetter>,
        ILoquiObjectSetter<AimModel>
    {
        #region Ctor
        protected AimModel()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ConeOfFireMinAngle
        public Single ConeOfFireMinAngle { get; set; } = default(Single);
        #endregion
        #region ConeOfFireMaxAngle
        public Single ConeOfFireMaxAngle { get; set; } = default(Single);
        #endregion
        #region ConeOfFireIncreasePerShot
        public Single ConeOfFireIncreasePerShot { get; set; } = default(Single);
        #endregion
        #region ConeOfFireIncreasePerSec
        public Single ConeOfFireIncreasePerSec { get; set; } = default(Single);
        #endregion
        #region ConeOfFireDecreaseDelayMilliseconds
        public UInt32 ConeOfFireDecreaseDelayMilliseconds { get; set; } = default(UInt32);
        #endregion
        #region ConeOfFireSneakMult
        public Single ConeOfFireSneakMult { get; set; } = default(Single);
        #endregion
        #region RecoilDiminishSpringForce
        public Single RecoilDiminishSpringForce { get; set; } = default(Single);
        #endregion
        #region RecoilDiminishSightsMult
        public Single RecoilDiminishSightsMult { get; set; } = default(Single);
        #endregion
        #region RecoilMaxPerShot
        public Single RecoilMaxPerShot { get; set; } = default(Single);
        #endregion
        #region RecoilMinPerShot
        public Single RecoilMinPerShot { get; set; } = default(Single);
        #endregion
        #region RecoilHipMult
        public Single RecoilHipMult { get; set; } = default(Single);
        #endregion
        #region RunawayRecoilShots
        public UInt32 RunawayRecoilShots { get; set; } = default(UInt32);
        #endregion
        #region RecoilArc
        public Single RecoilArc { get; set; } = default(Single);
        #endregion
        #region RecoilArcRotate
        public Single RecoilArcRotate { get; set; } = default(Single);
        #endregion
        #region ConeOfFireIronSightsMult
        public Single ConeOfFireIronSightsMult { get; set; } = default(Single);
        #endregion
        #region BaseStability
        public Single BaseStability { get; set; } = default(Single);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AimModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ConeOfFireMinAngle = initialValue;
                this.ConeOfFireMaxAngle = initialValue;
                this.ConeOfFireIncreasePerShot = initialValue;
                this.ConeOfFireIncreasePerSec = initialValue;
                this.ConeOfFireDecreaseDelayMilliseconds = initialValue;
                this.ConeOfFireSneakMult = initialValue;
                this.RecoilDiminishSpringForce = initialValue;
                this.RecoilDiminishSightsMult = initialValue;
                this.RecoilMaxPerShot = initialValue;
                this.RecoilMinPerShot = initialValue;
                this.RecoilHipMult = initialValue;
                this.RunawayRecoilShots = initialValue;
                this.RecoilArc = initialValue;
                this.RecoilArcRotate = initialValue;
                this.ConeOfFireIronSightsMult = initialValue;
                this.BaseStability = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem ConeOfFireMinAngle,
                TItem ConeOfFireMaxAngle,
                TItem ConeOfFireIncreasePerShot,
                TItem ConeOfFireIncreasePerSec,
                TItem ConeOfFireDecreaseDelayMilliseconds,
                TItem ConeOfFireSneakMult,
                TItem RecoilDiminishSpringForce,
                TItem RecoilDiminishSightsMult,
                TItem RecoilMaxPerShot,
                TItem RecoilMinPerShot,
                TItem RecoilHipMult,
                TItem RunawayRecoilShots,
                TItem RecoilArc,
                TItem RecoilArcRotate,
                TItem ConeOfFireIronSightsMult,
                TItem BaseStability)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.ConeOfFireMinAngle = ConeOfFireMinAngle;
                this.ConeOfFireMaxAngle = ConeOfFireMaxAngle;
                this.ConeOfFireIncreasePerShot = ConeOfFireIncreasePerShot;
                this.ConeOfFireIncreasePerSec = ConeOfFireIncreasePerSec;
                this.ConeOfFireDecreaseDelayMilliseconds = ConeOfFireDecreaseDelayMilliseconds;
                this.ConeOfFireSneakMult = ConeOfFireSneakMult;
                this.RecoilDiminishSpringForce = RecoilDiminishSpringForce;
                this.RecoilDiminishSightsMult = RecoilDiminishSightsMult;
                this.RecoilMaxPerShot = RecoilMaxPerShot;
                this.RecoilMinPerShot = RecoilMinPerShot;
                this.RecoilHipMult = RecoilHipMult;
                this.RunawayRecoilShots = RunawayRecoilShots;
                this.RecoilArc = RecoilArc;
                this.RecoilArcRotate = RecoilArcRotate;
                this.ConeOfFireIronSightsMult = ConeOfFireIronSightsMult;
                this.BaseStability = BaseStability;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ConeOfFireMinAngle;
            public TItem ConeOfFireMaxAngle;
            public TItem ConeOfFireIncreasePerShot;
            public TItem ConeOfFireIncreasePerSec;
            public TItem ConeOfFireDecreaseDelayMilliseconds;
            public TItem ConeOfFireSneakMult;
            public TItem RecoilDiminishSpringForce;
            public TItem RecoilDiminishSightsMult;
            public TItem RecoilMaxPerShot;
            public TItem RecoilMinPerShot;
            public TItem RecoilHipMult;
            public TItem RunawayRecoilShots;
            public TItem RecoilArc;
            public TItem RecoilArcRotate;
            public TItem ConeOfFireIronSightsMult;
            public TItem BaseStability;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ConeOfFireMinAngle, rhs.ConeOfFireMinAngle)) return false;
                if (!object.Equals(this.ConeOfFireMaxAngle, rhs.ConeOfFireMaxAngle)) return false;
                if (!object.Equals(this.ConeOfFireIncreasePerShot, rhs.ConeOfFireIncreasePerShot)) return false;
                if (!object.Equals(this.ConeOfFireIncreasePerSec, rhs.ConeOfFireIncreasePerSec)) return false;
                if (!object.Equals(this.ConeOfFireDecreaseDelayMilliseconds, rhs.ConeOfFireDecreaseDelayMilliseconds)) return false;
                if (!object.Equals(this.ConeOfFireSneakMult, rhs.ConeOfFireSneakMult)) return false;
                if (!object.Equals(this.RecoilDiminishSpringForce, rhs.RecoilDiminishSpringForce)) return false;
                if (!object.Equals(this.RecoilDiminishSightsMult, rhs.RecoilDiminishSightsMult)) return false;
                if (!object.Equals(this.RecoilMaxPerShot, rhs.RecoilMaxPerShot)) return false;
                if (!object.Equals(this.RecoilMinPerShot, rhs.RecoilMinPerShot)) return false;
                if (!object.Equals(this.RecoilHipMult, rhs.RecoilHipMult)) return false;
                if (!object.Equals(this.RunawayRecoilShots, rhs.RunawayRecoilShots)) return false;
                if (!object.Equals(this.RecoilArc, rhs.RecoilArc)) return false;
                if (!object.Equals(this.RecoilArcRotate, rhs.RecoilArcRotate)) return false;
                if (!object.Equals(this.ConeOfFireIronSightsMult, rhs.ConeOfFireIronSightsMult)) return false;
                if (!object.Equals(this.BaseStability, rhs.BaseStability)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ConeOfFireMinAngle);
                hash.Add(this.ConeOfFireMaxAngle);
                hash.Add(this.ConeOfFireIncreasePerShot);
                hash.Add(this.ConeOfFireIncreasePerSec);
                hash.Add(this.ConeOfFireDecreaseDelayMilliseconds);
                hash.Add(this.ConeOfFireSneakMult);
                hash.Add(this.RecoilDiminishSpringForce);
                hash.Add(this.RecoilDiminishSightsMult);
                hash.Add(this.RecoilMaxPerShot);
                hash.Add(this.RecoilMinPerShot);
                hash.Add(this.RecoilHipMult);
                hash.Add(this.RunawayRecoilShots);
                hash.Add(this.RecoilArc);
                hash.Add(this.RecoilArcRotate);
                hash.Add(this.ConeOfFireIronSightsMult);
                hash.Add(this.BaseStability);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.ConeOfFireMinAngle)) return false;
                if (!eval(this.ConeOfFireMaxAngle)) return false;
                if (!eval(this.ConeOfFireIncreasePerShot)) return false;
                if (!eval(this.ConeOfFireIncreasePerSec)) return false;
                if (!eval(this.ConeOfFireDecreaseDelayMilliseconds)) return false;
                if (!eval(this.ConeOfFireSneakMult)) return false;
                if (!eval(this.RecoilDiminishSpringForce)) return false;
                if (!eval(this.RecoilDiminishSightsMult)) return false;
                if (!eval(this.RecoilMaxPerShot)) return false;
                if (!eval(this.RecoilMinPerShot)) return false;
                if (!eval(this.RecoilHipMult)) return false;
                if (!eval(this.RunawayRecoilShots)) return false;
                if (!eval(this.RecoilArc)) return false;
                if (!eval(this.RecoilArcRotate)) return false;
                if (!eval(this.ConeOfFireIronSightsMult)) return false;
                if (!eval(this.BaseStability)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.ConeOfFireMinAngle)) return true;
                if (eval(this.ConeOfFireMaxAngle)) return true;
                if (eval(this.ConeOfFireIncreasePerShot)) return true;
                if (eval(this.ConeOfFireIncreasePerSec)) return true;
                if (eval(this.ConeOfFireDecreaseDelayMilliseconds)) return true;
                if (eval(this.ConeOfFireSneakMult)) return true;
                if (eval(this.RecoilDiminishSpringForce)) return true;
                if (eval(this.RecoilDiminishSightsMult)) return true;
                if (eval(this.RecoilMaxPerShot)) return true;
                if (eval(this.RecoilMinPerShot)) return true;
                if (eval(this.RecoilHipMult)) return true;
                if (eval(this.RunawayRecoilShots)) return true;
                if (eval(this.RecoilArc)) return true;
                if (eval(this.RecoilArcRotate)) return true;
                if (eval(this.ConeOfFireIronSightsMult)) return true;
                if (eval(this.BaseStability)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AimModel.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ConeOfFireMinAngle = eval(this.ConeOfFireMinAngle);
                obj.ConeOfFireMaxAngle = eval(this.ConeOfFireMaxAngle);
                obj.ConeOfFireIncreasePerShot = eval(this.ConeOfFireIncreasePerShot);
                obj.ConeOfFireIncreasePerSec = eval(this.ConeOfFireIncreasePerSec);
                obj.ConeOfFireDecreaseDelayMilliseconds = eval(this.ConeOfFireDecreaseDelayMilliseconds);
                obj.ConeOfFireSneakMult = eval(this.ConeOfFireSneakMult);
                obj.RecoilDiminishSpringForce = eval(this.RecoilDiminishSpringForce);
                obj.RecoilDiminishSightsMult = eval(this.RecoilDiminishSightsMult);
                obj.RecoilMaxPerShot = eval(this.RecoilMaxPerShot);
                obj.RecoilMinPerShot = eval(this.RecoilMinPerShot);
                obj.RecoilHipMult = eval(this.RecoilHipMult);
                obj.RunawayRecoilShots = eval(this.RunawayRecoilShots);
                obj.RecoilArc = eval(this.RecoilArc);
                obj.RecoilArcRotate = eval(this.RecoilArcRotate);
                obj.ConeOfFireIronSightsMult = eval(this.ConeOfFireIronSightsMult);
                obj.BaseStability = eval(this.BaseStability);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AimModel.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AimModel.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AimModel.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ConeOfFireMinAngle ?? true)
                    {
                        sb.AppendItem(ConeOfFireMinAngle, "ConeOfFireMinAngle");
                    }
                    if (printMask?.ConeOfFireMaxAngle ?? true)
                    {
                        sb.AppendItem(ConeOfFireMaxAngle, "ConeOfFireMaxAngle");
                    }
                    if (printMask?.ConeOfFireIncreasePerShot ?? true)
                    {
                        sb.AppendItem(ConeOfFireIncreasePerShot, "ConeOfFireIncreasePerShot");
                    }
                    if (printMask?.ConeOfFireIncreasePerSec ?? true)
                    {
                        sb.AppendItem(ConeOfFireIncreasePerSec, "ConeOfFireIncreasePerSec");
                    }
                    if (printMask?.ConeOfFireDecreaseDelayMilliseconds ?? true)
                    {
                        sb.AppendItem(ConeOfFireDecreaseDelayMilliseconds, "ConeOfFireDecreaseDelayMilliseconds");
                    }
                    if (printMask?.ConeOfFireSneakMult ?? true)
                    {
                        sb.AppendItem(ConeOfFireSneakMult, "ConeOfFireSneakMult");
                    }
                    if (printMask?.RecoilDiminishSpringForce ?? true)
                    {
                        sb.AppendItem(RecoilDiminishSpringForce, "RecoilDiminishSpringForce");
                    }
                    if (printMask?.RecoilDiminishSightsMult ?? true)
                    {
                        sb.AppendItem(RecoilDiminishSightsMult, "RecoilDiminishSightsMult");
                    }
                    if (printMask?.RecoilMaxPerShot ?? true)
                    {
                        sb.AppendItem(RecoilMaxPerShot, "RecoilMaxPerShot");
                    }
                    if (printMask?.RecoilMinPerShot ?? true)
                    {
                        sb.AppendItem(RecoilMinPerShot, "RecoilMinPerShot");
                    }
                    if (printMask?.RecoilHipMult ?? true)
                    {
                        sb.AppendItem(RecoilHipMult, "RecoilHipMult");
                    }
                    if (printMask?.RunawayRecoilShots ?? true)
                    {
                        sb.AppendItem(RunawayRecoilShots, "RunawayRecoilShots");
                    }
                    if (printMask?.RecoilArc ?? true)
                    {
                        sb.AppendItem(RecoilArc, "RecoilArc");
                    }
                    if (printMask?.RecoilArcRotate ?? true)
                    {
                        sb.AppendItem(RecoilArcRotate, "RecoilArcRotate");
                    }
                    if (printMask?.ConeOfFireIronSightsMult ?? true)
                    {
                        sb.AppendItem(ConeOfFireIronSightsMult, "ConeOfFireIronSightsMult");
                    }
                    if (printMask?.BaseStability ?? true)
                    {
                        sb.AppendItem(BaseStability, "BaseStability");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ConeOfFireMinAngle;
            public Exception? ConeOfFireMaxAngle;
            public Exception? ConeOfFireIncreasePerShot;
            public Exception? ConeOfFireIncreasePerSec;
            public Exception? ConeOfFireDecreaseDelayMilliseconds;
            public Exception? ConeOfFireSneakMult;
            public Exception? RecoilDiminishSpringForce;
            public Exception? RecoilDiminishSightsMult;
            public Exception? RecoilMaxPerShot;
            public Exception? RecoilMinPerShot;
            public Exception? RecoilHipMult;
            public Exception? RunawayRecoilShots;
            public Exception? RecoilArc;
            public Exception? RecoilArcRotate;
            public Exception? ConeOfFireIronSightsMult;
            public Exception? BaseStability;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AimModel_FieldIndex enu = (AimModel_FieldIndex)index;
                switch (enu)
                {
                    case AimModel_FieldIndex.ConeOfFireMinAngle:
                        return ConeOfFireMinAngle;
                    case AimModel_FieldIndex.ConeOfFireMaxAngle:
                        return ConeOfFireMaxAngle;
                    case AimModel_FieldIndex.ConeOfFireIncreasePerShot:
                        return ConeOfFireIncreasePerShot;
                    case AimModel_FieldIndex.ConeOfFireIncreasePerSec:
                        return ConeOfFireIncreasePerSec;
                    case AimModel_FieldIndex.ConeOfFireDecreaseDelayMilliseconds:
                        return ConeOfFireDecreaseDelayMilliseconds;
                    case AimModel_FieldIndex.ConeOfFireSneakMult:
                        return ConeOfFireSneakMult;
                    case AimModel_FieldIndex.RecoilDiminishSpringForce:
                        return RecoilDiminishSpringForce;
                    case AimModel_FieldIndex.RecoilDiminishSightsMult:
                        return RecoilDiminishSightsMult;
                    case AimModel_FieldIndex.RecoilMaxPerShot:
                        return RecoilMaxPerShot;
                    case AimModel_FieldIndex.RecoilMinPerShot:
                        return RecoilMinPerShot;
                    case AimModel_FieldIndex.RecoilHipMult:
                        return RecoilHipMult;
                    case AimModel_FieldIndex.RunawayRecoilShots:
                        return RunawayRecoilShots;
                    case AimModel_FieldIndex.RecoilArc:
                        return RecoilArc;
                    case AimModel_FieldIndex.RecoilArcRotate:
                        return RecoilArcRotate;
                    case AimModel_FieldIndex.ConeOfFireIronSightsMult:
                        return ConeOfFireIronSightsMult;
                    case AimModel_FieldIndex.BaseStability:
                        return BaseStability;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AimModel_FieldIndex enu = (AimModel_FieldIndex)index;
                switch (enu)
                {
                    case AimModel_FieldIndex.ConeOfFireMinAngle:
                        this.ConeOfFireMinAngle = ex;
                        break;
                    case AimModel_FieldIndex.ConeOfFireMaxAngle:
                        this.ConeOfFireMaxAngle = ex;
                        break;
                    case AimModel_FieldIndex.ConeOfFireIncreasePerShot:
                        this.ConeOfFireIncreasePerShot = ex;
                        break;
                    case AimModel_FieldIndex.ConeOfFireIncreasePerSec:
                        this.ConeOfFireIncreasePerSec = ex;
                        break;
                    case AimModel_FieldIndex.ConeOfFireDecreaseDelayMilliseconds:
                        this.ConeOfFireDecreaseDelayMilliseconds = ex;
                        break;
                    case AimModel_FieldIndex.ConeOfFireSneakMult:
                        this.ConeOfFireSneakMult = ex;
                        break;
                    case AimModel_FieldIndex.RecoilDiminishSpringForce:
                        this.RecoilDiminishSpringForce = ex;
                        break;
                    case AimModel_FieldIndex.RecoilDiminishSightsMult:
                        this.RecoilDiminishSightsMult = ex;
                        break;
                    case AimModel_FieldIndex.RecoilMaxPerShot:
                        this.RecoilMaxPerShot = ex;
                        break;
                    case AimModel_FieldIndex.RecoilMinPerShot:
                        this.RecoilMinPerShot = ex;
                        break;
                    case AimModel_FieldIndex.RecoilHipMult:
                        this.RecoilHipMult = ex;
                        break;
                    case AimModel_FieldIndex.RunawayRecoilShots:
                        this.RunawayRecoilShots = ex;
                        break;
                    case AimModel_FieldIndex.RecoilArc:
                        this.RecoilArc = ex;
                        break;
                    case AimModel_FieldIndex.RecoilArcRotate:
                        this.RecoilArcRotate = ex;
                        break;
                    case AimModel_FieldIndex.ConeOfFireIronSightsMult:
                        this.ConeOfFireIronSightsMult = ex;
                        break;
                    case AimModel_FieldIndex.BaseStability:
                        this.BaseStability = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AimModel_FieldIndex enu = (AimModel_FieldIndex)index;
                switch (enu)
                {
                    case AimModel_FieldIndex.ConeOfFireMinAngle:
                        this.ConeOfFireMinAngle = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.ConeOfFireMaxAngle:
                        this.ConeOfFireMaxAngle = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.ConeOfFireIncreasePerShot:
                        this.ConeOfFireIncreasePerShot = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.ConeOfFireIncreasePerSec:
                        this.ConeOfFireIncreasePerSec = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.ConeOfFireDecreaseDelayMilliseconds:
                        this.ConeOfFireDecreaseDelayMilliseconds = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.ConeOfFireSneakMult:
                        this.ConeOfFireSneakMult = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.RecoilDiminishSpringForce:
                        this.RecoilDiminishSpringForce = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.RecoilDiminishSightsMult:
                        this.RecoilDiminishSightsMult = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.RecoilMaxPerShot:
                        this.RecoilMaxPerShot = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.RecoilMinPerShot:
                        this.RecoilMinPerShot = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.RecoilHipMult:
                        this.RecoilHipMult = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.RunawayRecoilShots:
                        this.RunawayRecoilShots = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.RecoilArc:
                        this.RecoilArc = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.RecoilArcRotate:
                        this.RecoilArcRotate = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.ConeOfFireIronSightsMult:
                        this.ConeOfFireIronSightsMult = (Exception?)obj;
                        break;
                    case AimModel_FieldIndex.BaseStability:
                        this.BaseStability = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ConeOfFireMinAngle != null) return true;
                if (ConeOfFireMaxAngle != null) return true;
                if (ConeOfFireIncreasePerShot != null) return true;
                if (ConeOfFireIncreasePerSec != null) return true;
                if (ConeOfFireDecreaseDelayMilliseconds != null) return true;
                if (ConeOfFireSneakMult != null) return true;
                if (RecoilDiminishSpringForce != null) return true;
                if (RecoilDiminishSightsMult != null) return true;
                if (RecoilMaxPerShot != null) return true;
                if (RecoilMinPerShot != null) return true;
                if (RecoilHipMult != null) return true;
                if (RunawayRecoilShots != null) return true;
                if (RecoilArc != null) return true;
                if (RecoilArcRotate != null) return true;
                if (ConeOfFireIronSightsMult != null) return true;
                if (BaseStability != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(ConeOfFireMinAngle, "ConeOfFireMinAngle");
                }
                {
                    sb.AppendItem(ConeOfFireMaxAngle, "ConeOfFireMaxAngle");
                }
                {
                    sb.AppendItem(ConeOfFireIncreasePerShot, "ConeOfFireIncreasePerShot");
                }
                {
                    sb.AppendItem(ConeOfFireIncreasePerSec, "ConeOfFireIncreasePerSec");
                }
                {
                    sb.AppendItem(ConeOfFireDecreaseDelayMilliseconds, "ConeOfFireDecreaseDelayMilliseconds");
                }
                {
                    sb.AppendItem(ConeOfFireSneakMult, "ConeOfFireSneakMult");
                }
                {
                    sb.AppendItem(RecoilDiminishSpringForce, "RecoilDiminishSpringForce");
                }
                {
                    sb.AppendItem(RecoilDiminishSightsMult, "RecoilDiminishSightsMult");
                }
                {
                    sb.AppendItem(RecoilMaxPerShot, "RecoilMaxPerShot");
                }
                {
                    sb.AppendItem(RecoilMinPerShot, "RecoilMinPerShot");
                }
                {
                    sb.AppendItem(RecoilHipMult, "RecoilHipMult");
                }
                {
                    sb.AppendItem(RunawayRecoilShots, "RunawayRecoilShots");
                }
                {
                    sb.AppendItem(RecoilArc, "RecoilArc");
                }
                {
                    sb.AppendItem(RecoilArcRotate, "RecoilArcRotate");
                }
                {
                    sb.AppendItem(ConeOfFireIronSightsMult, "ConeOfFireIronSightsMult");
                }
                {
                    sb.AppendItem(BaseStability, "BaseStability");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ConeOfFireMinAngle = this.ConeOfFireMinAngle.Combine(rhs.ConeOfFireMinAngle);
                ret.ConeOfFireMaxAngle = this.ConeOfFireMaxAngle.Combine(rhs.ConeOfFireMaxAngle);
                ret.ConeOfFireIncreasePerShot = this.ConeOfFireIncreasePerShot.Combine(rhs.ConeOfFireIncreasePerShot);
                ret.ConeOfFireIncreasePerSec = this.ConeOfFireIncreasePerSec.Combine(rhs.ConeOfFireIncreasePerSec);
                ret.ConeOfFireDecreaseDelayMilliseconds = this.ConeOfFireDecreaseDelayMilliseconds.Combine(rhs.ConeOfFireDecreaseDelayMilliseconds);
                ret.ConeOfFireSneakMult = this.ConeOfFireSneakMult.Combine(rhs.ConeOfFireSneakMult);
                ret.RecoilDiminishSpringForce = this.RecoilDiminishSpringForce.Combine(rhs.RecoilDiminishSpringForce);
                ret.RecoilDiminishSightsMult = this.RecoilDiminishSightsMult.Combine(rhs.RecoilDiminishSightsMult);
                ret.RecoilMaxPerShot = this.RecoilMaxPerShot.Combine(rhs.RecoilMaxPerShot);
                ret.RecoilMinPerShot = this.RecoilMinPerShot.Combine(rhs.RecoilMinPerShot);
                ret.RecoilHipMult = this.RecoilHipMult.Combine(rhs.RecoilHipMult);
                ret.RunawayRecoilShots = this.RunawayRecoilShots.Combine(rhs.RunawayRecoilShots);
                ret.RecoilArc = this.RecoilArc.Combine(rhs.RecoilArc);
                ret.RecoilArcRotate = this.RecoilArcRotate.Combine(rhs.RecoilArcRotate);
                ret.ConeOfFireIronSightsMult = this.ConeOfFireIronSightsMult.Combine(rhs.ConeOfFireIronSightsMult);
                ret.BaseStability = this.BaseStability.Combine(rhs.BaseStability);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ConeOfFireMinAngle;
            public bool ConeOfFireMaxAngle;
            public bool ConeOfFireIncreasePerShot;
            public bool ConeOfFireIncreasePerSec;
            public bool ConeOfFireDecreaseDelayMilliseconds;
            public bool ConeOfFireSneakMult;
            public bool RecoilDiminishSpringForce;
            public bool RecoilDiminishSightsMult;
            public bool RecoilMaxPerShot;
            public bool RecoilMinPerShot;
            public bool RecoilHipMult;
            public bool RunawayRecoilShots;
            public bool RecoilArc;
            public bool RecoilArcRotate;
            public bool ConeOfFireIronSightsMult;
            public bool BaseStability;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ConeOfFireMinAngle = defaultOn;
                this.ConeOfFireMaxAngle = defaultOn;
                this.ConeOfFireIncreasePerShot = defaultOn;
                this.ConeOfFireIncreasePerSec = defaultOn;
                this.ConeOfFireDecreaseDelayMilliseconds = defaultOn;
                this.ConeOfFireSneakMult = defaultOn;
                this.RecoilDiminishSpringForce = defaultOn;
                this.RecoilDiminishSightsMult = defaultOn;
                this.RecoilMaxPerShot = defaultOn;
                this.RecoilMinPerShot = defaultOn;
                this.RecoilHipMult = defaultOn;
                this.RunawayRecoilShots = defaultOn;
                this.RecoilArc = defaultOn;
                this.RecoilArcRotate = defaultOn;
                this.ConeOfFireIronSightsMult = defaultOn;
                this.BaseStability = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ConeOfFireMinAngle, null));
                ret.Add((ConeOfFireMaxAngle, null));
                ret.Add((ConeOfFireIncreasePerShot, null));
                ret.Add((ConeOfFireIncreasePerSec, null));
                ret.Add((ConeOfFireDecreaseDelayMilliseconds, null));
                ret.Add((ConeOfFireSneakMult, null));
                ret.Add((RecoilDiminishSpringForce, null));
                ret.Add((RecoilDiminishSightsMult, null));
                ret.Add((RecoilMaxPerShot, null));
                ret.Add((RecoilMinPerShot, null));
                ret.Add((RecoilHipMult, null));
                ret.Add((RunawayRecoilShots, null));
                ret.Add((RecoilArc, null));
                ret.Add((RecoilArcRotate, null));
                ret.Add((ConeOfFireIronSightsMult, null));
                ret.Add((BaseStability, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AimModel_Registration.TriggeringRecordType;
        public AimModel(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private AimModel(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal AimModel(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public AimModel(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public AimModel(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<AimModel>.ToString(this);
        }

        protected override Type LinkType => typeof(IAimModel);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAimModelGetter rhs) return false;
            return ((AimModelCommon)((IAimModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAimModelGetter? obj)
        {
            return ((AimModelCommon)((IAimModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AimModelCommon)((IAimModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AimModelBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AimModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static AimModel CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new AimModel();
            ((AimModelSetterCommon)((IAimModelGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AimModel item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AimModelSetterCommon)((IAimModelGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AimModel GetNew()
        {
            return new AimModel();
        }

    }
    #endregion

    #region Interface
    public partial interface IAimModel :
        IAimModelGetter,
        IFallout4MajorRecordInternal,
        ILoquiObjectSetter<IAimModelInternal>
    {
        new Single ConeOfFireMinAngle { get; set; }
        new Single ConeOfFireMaxAngle { get; set; }
        new Single ConeOfFireIncreasePerShot { get; set; }
        new Single ConeOfFireIncreasePerSec { get; set; }
        new UInt32 ConeOfFireDecreaseDelayMilliseconds { get; set; }
        new Single ConeOfFireSneakMult { get; set; }
        new Single RecoilDiminishSpringForce { get; set; }
        new Single RecoilDiminishSightsMult { get; set; }
        new Single RecoilMaxPerShot { get; set; }
        new Single RecoilMinPerShot { get; set; }
        new Single RecoilHipMult { get; set; }
        new UInt32 RunawayRecoilShots { get; set; }
        new Single RecoilArc { get; set; }
        new Single RecoilArcRotate { get; set; }
        new Single ConeOfFireIronSightsMult { get; set; }
        new Single BaseStability { get; set; }
    }

    public partial interface IAimModelInternal :
        IFallout4MajorRecordInternal,
        IAimModel,
        IAimModelGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.AMDL)]
    public partial interface IAimModelGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IAimModelGetter>,
        IMapsToGetter<IAimModelGetter>
    {
        static new ILoquiRegistration StaticRegistration => AimModel_Registration.Instance;
        Single ConeOfFireMinAngle { get; }
        Single ConeOfFireMaxAngle { get; }
        Single ConeOfFireIncreasePerShot { get; }
        Single ConeOfFireIncreasePerSec { get; }
        UInt32 ConeOfFireDecreaseDelayMilliseconds { get; }
        Single ConeOfFireSneakMult { get; }
        Single RecoilDiminishSpringForce { get; }
        Single RecoilDiminishSightsMult { get; }
        Single RecoilMaxPerShot { get; }
        Single RecoilMinPerShot { get; }
        Single RecoilHipMult { get; }
        UInt32 RunawayRecoilShots { get; }
        Single RecoilArc { get; }
        Single RecoilArcRotate { get; }
        Single ConeOfFireIronSightsMult { get; }
        Single BaseStability { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AimModelMixIn
    {
        public static void Clear(this IAimModelInternal item)
        {
            ((AimModelSetterCommon)((IAimModelGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AimModel.Mask<bool> GetEqualsMask(
            this IAimModelGetter item,
            IAimModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AimModelCommon)((IAimModelGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAimModelGetter item,
            string? name = null,
            AimModel.Mask<bool>? printMask = null)
        {
            return ((AimModelCommon)((IAimModelGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAimModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AimModel.Mask<bool>? printMask = null)
        {
            ((AimModelCommon)((IAimModelGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAimModelGetter item,
            IAimModelGetter rhs,
            AimModel.TranslationMask? equalsMask = null)
        {
            return ((AimModelCommon)((IAimModelGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAimModelInternal lhs,
            IAimModelGetter rhs,
            out AimModel.ErrorMask errorMask,
            AimModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AimModelSetterTranslationCommon)((IAimModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AimModel.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAimModelInternal lhs,
            IAimModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AimModelSetterTranslationCommon)((IAimModelGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AimModel DeepCopy(
            this IAimModelGetter item,
            AimModel.TranslationMask? copyMask = null)
        {
            return ((AimModelSetterTranslationCommon)((IAimModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AimModel DeepCopy(
            this IAimModelGetter item,
            out AimModel.ErrorMask errorMask,
            AimModel.TranslationMask? copyMask = null)
        {
            return ((AimModelSetterTranslationCommon)((IAimModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AimModel DeepCopy(
            this IAimModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AimModelSetterTranslationCommon)((IAimModelGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static AimModel Duplicate(
            this IAimModelGetter item,
            FormKey formKey,
            AimModel.TranslationMask? copyMask = null)
        {
            return ((AimModelCommon)((IAimModelGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static AimModel Duplicate(
            this IAimModelGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((AimModelCommon)((IAimModelGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAimModelInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AimModelSetterCommon)((IAimModelGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum AimModel_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        ConeOfFireMinAngle = 7,
        ConeOfFireMaxAngle = 8,
        ConeOfFireIncreasePerShot = 9,
        ConeOfFireIncreasePerSec = 10,
        ConeOfFireDecreaseDelayMilliseconds = 11,
        ConeOfFireSneakMult = 12,
        RecoilDiminishSpringForce = 13,
        RecoilDiminishSightsMult = 14,
        RecoilMaxPerShot = 15,
        RecoilMinPerShot = 16,
        RecoilHipMult = 17,
        RunawayRecoilShots = 18,
        RecoilArc = 19,
        RecoilArcRotate = 20,
        ConeOfFireIronSightsMult = 21,
        BaseStability = 22,
    }
    #endregion

    #region Registration
    internal partial class AimModel_Registration : ILoquiRegistration
    {
        public static readonly AimModel_Registration Instance = new AimModel_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(AimModel.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AimModel.ErrorMask);

        public static readonly Type ClassType = typeof(AimModel);

        public static readonly Type GetterType = typeof(IAimModelGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAimModel);

        public static readonly Type? InternalSetterType = typeof(IAimModelInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.AimModel";

        public const string Name = "AimModel";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.AMDL;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.AMDL);
            var all = RecordCollection.Factory(
                RecordTypes.AMDL,
                RecordTypes.DNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AimModelBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AimModelSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly AimModelSetterCommon Instance = new AimModelSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAimModelInternal item)
        {
            ClearPartial();
            item.ConeOfFireMinAngle = default(Single);
            item.ConeOfFireMaxAngle = default(Single);
            item.ConeOfFireIncreasePerShot = default(Single);
            item.ConeOfFireIncreasePerSec = default(Single);
            item.ConeOfFireDecreaseDelayMilliseconds = default(UInt32);
            item.ConeOfFireSneakMult = default(Single);
            item.RecoilDiminishSpringForce = default(Single);
            item.RecoilDiminishSightsMult = default(Single);
            item.RecoilMaxPerShot = default(Single);
            item.RecoilMinPerShot = default(Single);
            item.RecoilHipMult = default(Single);
            item.RunawayRecoilShots = default(UInt32);
            item.RecoilArc = default(Single);
            item.RecoilArcRotate = default(Single);
            item.ConeOfFireIronSightsMult = default(Single);
            item.BaseStability = default(Single);
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IAimModelInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAimModelInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAimModel obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAimModelInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IAimModelInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AimModelBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AimModelBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AimModel)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AimModel)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class AimModelCommon : Fallout4MajorRecordCommon
    {
        public new static readonly AimModelCommon Instance = new AimModelCommon();

        public AimModel.Mask<bool> GetEqualsMask(
            IAimModelGetter item,
            IAimModelGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AimModel.Mask<bool>(false);
            ((AimModelCommon)((IAimModelGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAimModelGetter item,
            IAimModelGetter rhs,
            AimModel.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ConeOfFireMinAngle = item.ConeOfFireMinAngle.EqualsWithin(rhs.ConeOfFireMinAngle);
            ret.ConeOfFireMaxAngle = item.ConeOfFireMaxAngle.EqualsWithin(rhs.ConeOfFireMaxAngle);
            ret.ConeOfFireIncreasePerShot = item.ConeOfFireIncreasePerShot.EqualsWithin(rhs.ConeOfFireIncreasePerShot);
            ret.ConeOfFireIncreasePerSec = item.ConeOfFireIncreasePerSec.EqualsWithin(rhs.ConeOfFireIncreasePerSec);
            ret.ConeOfFireDecreaseDelayMilliseconds = item.ConeOfFireDecreaseDelayMilliseconds == rhs.ConeOfFireDecreaseDelayMilliseconds;
            ret.ConeOfFireSneakMult = item.ConeOfFireSneakMult.EqualsWithin(rhs.ConeOfFireSneakMult);
            ret.RecoilDiminishSpringForce = item.RecoilDiminishSpringForce.EqualsWithin(rhs.RecoilDiminishSpringForce);
            ret.RecoilDiminishSightsMult = item.RecoilDiminishSightsMult.EqualsWithin(rhs.RecoilDiminishSightsMult);
            ret.RecoilMaxPerShot = item.RecoilMaxPerShot.EqualsWithin(rhs.RecoilMaxPerShot);
            ret.RecoilMinPerShot = item.RecoilMinPerShot.EqualsWithin(rhs.RecoilMinPerShot);
            ret.RecoilHipMult = item.RecoilHipMult.EqualsWithin(rhs.RecoilHipMult);
            ret.RunawayRecoilShots = item.RunawayRecoilShots == rhs.RunawayRecoilShots;
            ret.RecoilArc = item.RecoilArc.EqualsWithin(rhs.RecoilArc);
            ret.RecoilArcRotate = item.RecoilArcRotate.EqualsWithin(rhs.RecoilArcRotate);
            ret.ConeOfFireIronSightsMult = item.ConeOfFireIronSightsMult.EqualsWithin(rhs.ConeOfFireIronSightsMult);
            ret.BaseStability = item.BaseStability.EqualsWithin(rhs.BaseStability);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IAimModelGetter item,
            string? name = null,
            AimModel.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAimModelGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AimModel.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AimModel =>");
            }
            else
            {
                sb.AppendLine($"{name} (AimModel) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAimModelGetter item,
            StructuredStringBuilder sb,
            AimModel.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ConeOfFireMinAngle ?? true)
            {
                sb.AppendItem(item.ConeOfFireMinAngle, "ConeOfFireMinAngle");
            }
            if (printMask?.ConeOfFireMaxAngle ?? true)
            {
                sb.AppendItem(item.ConeOfFireMaxAngle, "ConeOfFireMaxAngle");
            }
            if (printMask?.ConeOfFireIncreasePerShot ?? true)
            {
                sb.AppendItem(item.ConeOfFireIncreasePerShot, "ConeOfFireIncreasePerShot");
            }
            if (printMask?.ConeOfFireIncreasePerSec ?? true)
            {
                sb.AppendItem(item.ConeOfFireIncreasePerSec, "ConeOfFireIncreasePerSec");
            }
            if (printMask?.ConeOfFireDecreaseDelayMilliseconds ?? true)
            {
                sb.AppendItem(item.ConeOfFireDecreaseDelayMilliseconds, "ConeOfFireDecreaseDelayMilliseconds");
            }
            if (printMask?.ConeOfFireSneakMult ?? true)
            {
                sb.AppendItem(item.ConeOfFireSneakMult, "ConeOfFireSneakMult");
            }
            if (printMask?.RecoilDiminishSpringForce ?? true)
            {
                sb.AppendItem(item.RecoilDiminishSpringForce, "RecoilDiminishSpringForce");
            }
            if (printMask?.RecoilDiminishSightsMult ?? true)
            {
                sb.AppendItem(item.RecoilDiminishSightsMult, "RecoilDiminishSightsMult");
            }
            if (printMask?.RecoilMaxPerShot ?? true)
            {
                sb.AppendItem(item.RecoilMaxPerShot, "RecoilMaxPerShot");
            }
            if (printMask?.RecoilMinPerShot ?? true)
            {
                sb.AppendItem(item.RecoilMinPerShot, "RecoilMinPerShot");
            }
            if (printMask?.RecoilHipMult ?? true)
            {
                sb.AppendItem(item.RecoilHipMult, "RecoilHipMult");
            }
            if (printMask?.RunawayRecoilShots ?? true)
            {
                sb.AppendItem(item.RunawayRecoilShots, "RunawayRecoilShots");
            }
            if (printMask?.RecoilArc ?? true)
            {
                sb.AppendItem(item.RecoilArc, "RecoilArc");
            }
            if (printMask?.RecoilArcRotate ?? true)
            {
                sb.AppendItem(item.RecoilArcRotate, "RecoilArcRotate");
            }
            if (printMask?.ConeOfFireIronSightsMult ?? true)
            {
                sb.AppendItem(item.ConeOfFireIronSightsMult, "ConeOfFireIronSightsMult");
            }
            if (printMask?.BaseStability ?? true)
            {
                sb.AppendItem(item.BaseStability, "BaseStability");
            }
        }
        
        public static AimModel_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AimModel_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (AimModel_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (AimModel_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (AimModel_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (AimModel_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (AimModel_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (AimModel_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new AimModel_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AimModel_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AimModel_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AimModel_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AimModel_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAimModelGetter? lhs,
            IAimModelGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireMinAngle) ?? true))
            {
                if (!lhs.ConeOfFireMinAngle.EqualsWithin(rhs.ConeOfFireMinAngle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireMaxAngle) ?? true))
            {
                if (!lhs.ConeOfFireMaxAngle.EqualsWithin(rhs.ConeOfFireMaxAngle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireIncreasePerShot) ?? true))
            {
                if (!lhs.ConeOfFireIncreasePerShot.EqualsWithin(rhs.ConeOfFireIncreasePerShot)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireIncreasePerSec) ?? true))
            {
                if (!lhs.ConeOfFireIncreasePerSec.EqualsWithin(rhs.ConeOfFireIncreasePerSec)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireDecreaseDelayMilliseconds) ?? true))
            {
                if (lhs.ConeOfFireDecreaseDelayMilliseconds != rhs.ConeOfFireDecreaseDelayMilliseconds) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireSneakMult) ?? true))
            {
                if (!lhs.ConeOfFireSneakMult.EqualsWithin(rhs.ConeOfFireSneakMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilDiminishSpringForce) ?? true))
            {
                if (!lhs.RecoilDiminishSpringForce.EqualsWithin(rhs.RecoilDiminishSpringForce)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilDiminishSightsMult) ?? true))
            {
                if (!lhs.RecoilDiminishSightsMult.EqualsWithin(rhs.RecoilDiminishSightsMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilMaxPerShot) ?? true))
            {
                if (!lhs.RecoilMaxPerShot.EqualsWithin(rhs.RecoilMaxPerShot)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilMinPerShot) ?? true))
            {
                if (!lhs.RecoilMinPerShot.EqualsWithin(rhs.RecoilMinPerShot)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilHipMult) ?? true))
            {
                if (!lhs.RecoilHipMult.EqualsWithin(rhs.RecoilHipMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.RunawayRecoilShots) ?? true))
            {
                if (lhs.RunawayRecoilShots != rhs.RunawayRecoilShots) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilArc) ?? true))
            {
                if (!lhs.RecoilArc.EqualsWithin(rhs.RecoilArc)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilArcRotate) ?? true))
            {
                if (!lhs.RecoilArcRotate.EqualsWithin(rhs.RecoilArcRotate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireIronSightsMult) ?? true))
            {
                if (!lhs.ConeOfFireIronSightsMult.EqualsWithin(rhs.ConeOfFireIronSightsMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimModel_FieldIndex.BaseStability) ?? true))
            {
                if (!lhs.BaseStability.EqualsWithin(rhs.BaseStability)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAimModelGetter?)lhs,
                rhs: rhs as IAimModelGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAimModelGetter?)lhs,
                rhs: rhs as IAimModelGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IAimModelGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ConeOfFireMinAngle);
            hash.Add(item.ConeOfFireMaxAngle);
            hash.Add(item.ConeOfFireIncreasePerShot);
            hash.Add(item.ConeOfFireIncreasePerSec);
            hash.Add(item.ConeOfFireDecreaseDelayMilliseconds);
            hash.Add(item.ConeOfFireSneakMult);
            hash.Add(item.RecoilDiminishSpringForce);
            hash.Add(item.RecoilDiminishSightsMult);
            hash.Add(item.RecoilMaxPerShot);
            hash.Add(item.RecoilMinPerShot);
            hash.Add(item.RecoilHipMult);
            hash.Add(item.RunawayRecoilShots);
            hash.Add(item.RecoilArc);
            hash.Add(item.RecoilArcRotate);
            hash.Add(item.ConeOfFireIronSightsMult);
            hash.Add(item.BaseStability);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IAimModelGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAimModelGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AimModel.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAimModelGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public AimModel Duplicate(
            IAimModelGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new AimModel(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAimModelGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAimModelGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class AimModelSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly AimModelSetterTranslationCommon Instance = new AimModelSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAimModelInternal item,
            IAimModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IAimModel item,
            IAimModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireMinAngle) ?? true))
            {
                item.ConeOfFireMinAngle = rhs.ConeOfFireMinAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireMaxAngle) ?? true))
            {
                item.ConeOfFireMaxAngle = rhs.ConeOfFireMaxAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireIncreasePerShot) ?? true))
            {
                item.ConeOfFireIncreasePerShot = rhs.ConeOfFireIncreasePerShot;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireIncreasePerSec) ?? true))
            {
                item.ConeOfFireIncreasePerSec = rhs.ConeOfFireIncreasePerSec;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireDecreaseDelayMilliseconds) ?? true))
            {
                item.ConeOfFireDecreaseDelayMilliseconds = rhs.ConeOfFireDecreaseDelayMilliseconds;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireSneakMult) ?? true))
            {
                item.ConeOfFireSneakMult = rhs.ConeOfFireSneakMult;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilDiminishSpringForce) ?? true))
            {
                item.RecoilDiminishSpringForce = rhs.RecoilDiminishSpringForce;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilDiminishSightsMult) ?? true))
            {
                item.RecoilDiminishSightsMult = rhs.RecoilDiminishSightsMult;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilMaxPerShot) ?? true))
            {
                item.RecoilMaxPerShot = rhs.RecoilMaxPerShot;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilMinPerShot) ?? true))
            {
                item.RecoilMinPerShot = rhs.RecoilMinPerShot;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilHipMult) ?? true))
            {
                item.RecoilHipMult = rhs.RecoilHipMult;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.RunawayRecoilShots) ?? true))
            {
                item.RunawayRecoilShots = rhs.RunawayRecoilShots;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilArc) ?? true))
            {
                item.RecoilArc = rhs.RecoilArc;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.RecoilArcRotate) ?? true))
            {
                item.RecoilArcRotate = rhs.RecoilArcRotate;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.ConeOfFireIronSightsMult) ?? true))
            {
                item.ConeOfFireIronSightsMult = rhs.ConeOfFireIronSightsMult;
            }
            if ((copyMask?.GetShouldTranslate((int)AimModel_FieldIndex.BaseStability) ?? true))
            {
                item.BaseStability = rhs.BaseStability;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IAimModel item,
            IAimModelGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimModelInternal)item,
                rhs: (IAimModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimModel)item,
                rhs: (IAimModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimModelInternal)item,
                rhs: (IAimModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimModel)item,
                rhs: (IAimModelGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AimModel DeepCopy(
            IAimModelGetter item,
            AimModel.TranslationMask? copyMask = null)
        {
            AimModel ret = (AimModel)((AimModelCommon)((IAimModelGetter)item).CommonInstance()!).GetNew();
            ((AimModelSetterTranslationCommon)((IAimModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AimModel DeepCopy(
            IAimModelGetter item,
            out AimModel.ErrorMask errorMask,
            AimModel.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AimModel ret = (AimModel)((AimModelCommon)((IAimModelGetter)item).CommonInstance()!).GetNew();
            ((AimModelSetterTranslationCommon)((IAimModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AimModel.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AimModel DeepCopy(
            IAimModelGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AimModel ret = (AimModel)((AimModelCommon)((IAimModelGetter)item).CommonInstance()!).GetNew();
            ((AimModelSetterTranslationCommon)((IAimModelGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class AimModel
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AimModel_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AimModel_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AimModelCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AimModelSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AimModelSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class AimModelBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly AimModelBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IAimModelGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DNAM)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ConeOfFireMinAngle);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ConeOfFireMaxAngle);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ConeOfFireIncreasePerShot);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ConeOfFireIncreasePerSec);
                writer.Write(item.ConeOfFireDecreaseDelayMilliseconds);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ConeOfFireSneakMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.RecoilDiminishSpringForce);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.RecoilDiminishSightsMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.RecoilMaxPerShot);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.RecoilMinPerShot);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.RecoilHipMult);
                writer.Write(item.RunawayRecoilShots);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.RecoilArc);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.RecoilArcRotate);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ConeOfFireIronSightsMult);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BaseStability);
            }
        }

        public void Write(
            MutagenWriter writer,
            IAimModelGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.AMDL,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAimModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAimModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAimModelGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AimModelBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly AimModelBinaryCreateTranslation Instance = new AimModelBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.AMDL;
        public static ParseResult FillBinaryRecordTypes(
            IAimModelInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.ConeOfFireMinAngle = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ConeOfFireMaxAngle = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ConeOfFireIncreasePerShot = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ConeOfFireIncreasePerSec = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ConeOfFireDecreaseDelayMilliseconds = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.ConeOfFireSneakMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.RecoilDiminishSpringForce = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.RecoilDiminishSightsMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.RecoilMaxPerShot = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.RecoilMinPerShot = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.RecoilHipMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.RunawayRecoilShots = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.RecoilArc = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.RecoilArcRotate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ConeOfFireIronSightsMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BaseStability = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)AimModel_FieldIndex.BaseStability;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class AimModelBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class AimModelBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IAimModelGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AimModel_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AimModel_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AimModelCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AimModelSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AimModelBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AimModelBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IAimModel);


        private RangeInt32? _DNAMLocation;
        #region ConeOfFireMinAngle
        private int _ConeOfFireMinAngleLocation => _DNAMLocation!.Value.Min;
        private bool _ConeOfFireMinAngle_IsSet => _DNAMLocation.HasValue;
        public Single ConeOfFireMinAngle => _ConeOfFireMinAngle_IsSet ? _recordData.Slice(_ConeOfFireMinAngleLocation, 4).Float() : default(Single);
        #endregion
        #region ConeOfFireMaxAngle
        private int _ConeOfFireMaxAngleLocation => _DNAMLocation!.Value.Min + 0x4;
        private bool _ConeOfFireMaxAngle_IsSet => _DNAMLocation.HasValue;
        public Single ConeOfFireMaxAngle => _ConeOfFireMaxAngle_IsSet ? _recordData.Slice(_ConeOfFireMaxAngleLocation, 4).Float() : default(Single);
        #endregion
        #region ConeOfFireIncreasePerShot
        private int _ConeOfFireIncreasePerShotLocation => _DNAMLocation!.Value.Min + 0x8;
        private bool _ConeOfFireIncreasePerShot_IsSet => _DNAMLocation.HasValue;
        public Single ConeOfFireIncreasePerShot => _ConeOfFireIncreasePerShot_IsSet ? _recordData.Slice(_ConeOfFireIncreasePerShotLocation, 4).Float() : default(Single);
        #endregion
        #region ConeOfFireIncreasePerSec
        private int _ConeOfFireIncreasePerSecLocation => _DNAMLocation!.Value.Min + 0xC;
        private bool _ConeOfFireIncreasePerSec_IsSet => _DNAMLocation.HasValue;
        public Single ConeOfFireIncreasePerSec => _ConeOfFireIncreasePerSec_IsSet ? _recordData.Slice(_ConeOfFireIncreasePerSecLocation, 4).Float() : default(Single);
        #endregion
        #region ConeOfFireDecreaseDelayMilliseconds
        private int _ConeOfFireDecreaseDelayMillisecondsLocation => _DNAMLocation!.Value.Min + 0x10;
        private bool _ConeOfFireDecreaseDelayMilliseconds_IsSet => _DNAMLocation.HasValue;
        public UInt32 ConeOfFireDecreaseDelayMilliseconds => _ConeOfFireDecreaseDelayMilliseconds_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_ConeOfFireDecreaseDelayMillisecondsLocation, 4)) : default(UInt32);
        #endregion
        #region ConeOfFireSneakMult
        private int _ConeOfFireSneakMultLocation => _DNAMLocation!.Value.Min + 0x14;
        private bool _ConeOfFireSneakMult_IsSet => _DNAMLocation.HasValue;
        public Single ConeOfFireSneakMult => _ConeOfFireSneakMult_IsSet ? _recordData.Slice(_ConeOfFireSneakMultLocation, 4).Float() : default(Single);
        #endregion
        #region RecoilDiminishSpringForce
        private int _RecoilDiminishSpringForceLocation => _DNAMLocation!.Value.Min + 0x18;
        private bool _RecoilDiminishSpringForce_IsSet => _DNAMLocation.HasValue;
        public Single RecoilDiminishSpringForce => _RecoilDiminishSpringForce_IsSet ? _recordData.Slice(_RecoilDiminishSpringForceLocation, 4).Float() : default(Single);
        #endregion
        #region RecoilDiminishSightsMult
        private int _RecoilDiminishSightsMultLocation => _DNAMLocation!.Value.Min + 0x1C;
        private bool _RecoilDiminishSightsMult_IsSet => _DNAMLocation.HasValue;
        public Single RecoilDiminishSightsMult => _RecoilDiminishSightsMult_IsSet ? _recordData.Slice(_RecoilDiminishSightsMultLocation, 4).Float() : default(Single);
        #endregion
        #region RecoilMaxPerShot
        private int _RecoilMaxPerShotLocation => _DNAMLocation!.Value.Min + 0x20;
        private bool _RecoilMaxPerShot_IsSet => _DNAMLocation.HasValue;
        public Single RecoilMaxPerShot => _RecoilMaxPerShot_IsSet ? _recordData.Slice(_RecoilMaxPerShotLocation, 4).Float() : default(Single);
        #endregion
        #region RecoilMinPerShot
        private int _RecoilMinPerShotLocation => _DNAMLocation!.Value.Min + 0x24;
        private bool _RecoilMinPerShot_IsSet => _DNAMLocation.HasValue;
        public Single RecoilMinPerShot => _RecoilMinPerShot_IsSet ? _recordData.Slice(_RecoilMinPerShotLocation, 4).Float() : default(Single);
        #endregion
        #region RecoilHipMult
        private int _RecoilHipMultLocation => _DNAMLocation!.Value.Min + 0x28;
        private bool _RecoilHipMult_IsSet => _DNAMLocation.HasValue;
        public Single RecoilHipMult => _RecoilHipMult_IsSet ? _recordData.Slice(_RecoilHipMultLocation, 4).Float() : default(Single);
        #endregion
        #region RunawayRecoilShots
        private int _RunawayRecoilShotsLocation => _DNAMLocation!.Value.Min + 0x2C;
        private bool _RunawayRecoilShots_IsSet => _DNAMLocation.HasValue;
        public UInt32 RunawayRecoilShots => _RunawayRecoilShots_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_RunawayRecoilShotsLocation, 4)) : default(UInt32);
        #endregion
        #region RecoilArc
        private int _RecoilArcLocation => _DNAMLocation!.Value.Min + 0x30;
        private bool _RecoilArc_IsSet => _DNAMLocation.HasValue;
        public Single RecoilArc => _RecoilArc_IsSet ? _recordData.Slice(_RecoilArcLocation, 4).Float() : default(Single);
        #endregion
        #region RecoilArcRotate
        private int _RecoilArcRotateLocation => _DNAMLocation!.Value.Min + 0x34;
        private bool _RecoilArcRotate_IsSet => _DNAMLocation.HasValue;
        public Single RecoilArcRotate => _RecoilArcRotate_IsSet ? _recordData.Slice(_RecoilArcRotateLocation, 4).Float() : default(Single);
        #endregion
        #region ConeOfFireIronSightsMult
        private int _ConeOfFireIronSightsMultLocation => _DNAMLocation!.Value.Min + 0x38;
        private bool _ConeOfFireIronSightsMult_IsSet => _DNAMLocation.HasValue;
        public Single ConeOfFireIronSightsMult => _ConeOfFireIronSightsMult_IsSet ? _recordData.Slice(_ConeOfFireIronSightsMultLocation, 4).Float() : default(Single);
        #endregion
        #region BaseStability
        private int _BaseStabilityLocation => _DNAMLocation!.Value.Min + 0x3C;
        private bool _BaseStability_IsSet => _DNAMLocation.HasValue;
        public Single BaseStability => _BaseStability_IsSet ? _recordData.Slice(_BaseStabilityLocation, 4).Float() : default(Single);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AimModelBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IAimModelGetter AimModelFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new AimModelBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IAimModelGetter AimModelFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AimModelFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)AimModel_FieldIndex.BaseStability;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AimModelMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<AimModel>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAimModelGetter rhs) return false;
            return ((AimModelCommon)((IAimModelGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAimModelGetter? obj)
        {
            return ((AimModelCommon)((IAimModelGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AimModelCommon)((IAimModelGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

