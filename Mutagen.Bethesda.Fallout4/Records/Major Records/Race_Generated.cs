/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Race :
        Fallout4MajorRecord,
        IEquatable<IRaceGetter>,
        ILoquiObjectSetter<Race>,
        IRaceInternal
    {
        #region Ctor
        protected Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AnimationSound
        private readonly IFormLinkNullable<IAnimationSoundTagSetGetter> _AnimationSound = new FormLinkNullable<IAnimationSoundTagSetGetter>();
        public IFormLinkNullable<IAnimationSoundTagSetGetter> AnimationSound
        {
            get => _AnimationSound;
            set => _AnimationSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAnimationSoundTagSetGetter> IRaceGetter.AnimationSound => this.AnimationSound;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IRaceGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter IRaceGetter.Description => this.Description;
        #endregion
        #region ActorEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? _ActorEffect;
        public ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect
        {
            get => this._ActorEffect;
            set => this._ActorEffect = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? IRaceGetter.ActorEffect => _ActorEffect;
        #endregion

        #endregion
        #region Skin
        private readonly IFormLinkNullable<IArmorGetter> _Skin = new FormLinkNullable<IArmorGetter>();
        public IFormLinkNullable<IArmorGetter> Skin
        {
            get => _Skin;
            set => _Skin.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArmorGetter> IRaceGetter.Skin => this.Skin;
        #endregion
        #region BipedBodyTemplate
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BipedBodyTemplate? _BipedBodyTemplate;
        public BipedBodyTemplate? BipedBodyTemplate
        {
            get => _BipedBodyTemplate;
            set => _BipedBodyTemplate = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBipedBodyTemplateGetter? IRaceGetter.BipedBodyTemplate => this.BipedBodyTemplate;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IRaceGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectProperty>? _Properties;
        public ExtendedList<ObjectProperty>? Properties
        {
            get => this._Properties;
            set => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectPropertyGetter>? IRaceGetter.Properties => _Properties;
        #endregion

        #endregion
        #region AttachParentSlots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _AttachParentSlots;
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots
        {
            get => this._AttachParentSlots;
            set => this._AttachParentSlots = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IRaceGetter.AttachParentSlots => _AttachParentSlots;
        #endregion

        #endregion
        #region Height
        public IGenderedItem<Single> Height { get; set; } = new GenderedItem<Single>(default(Single), default(Single));
        IGenderedItemGetter<Single> IRaceGetter.Height => this.Height;
        #endregion
        #region DefaultWeight
        public IGenderedItem<RaceWeight> DefaultWeight { get; set; } = new GenderedItem<RaceWeight>(new RaceWeight(), new RaceWeight());
        IGenderedItemGetter<IRaceWeightGetter> IRaceGetter.DefaultWeight => this.DefaultWeight;
        #endregion
        #region Flags
        public Race.Flag Flags { get; set; } = default(Race.Flag);
        #endregion
        #region AccelerationRate
        public Single AccelerationRate { get; set; } = default(Single);
        #endregion
        #region DecelerationRate
        public Single DecelerationRate { get; set; } = default(Single);
        #endregion
        #region Size
        public Size Size { get; set; } = default(Size);
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown = new byte[8];
        public MemorySlice<Byte> Unknown
        {
            get => _Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IRaceGetter.Unknown => this.Unknown;
        #endregion
        #region InjuredHealthPercent
        public Single InjuredHealthPercent { get; set; } = default(Single);
        #endregion
        #region ShieldBipedObject
        public static readonly BipedObject ShieldBipedObjectDefault = BipedObject.None;
        public BipedObject ShieldBipedObject { get; set; } = ShieldBipedObjectDefault;
        #endregion
        #region BeardBipedObject
        public static readonly BipedObject BeardBipedObjectDefault = BipedObject.None;
        public BipedObject BeardBipedObject { get; set; } = BeardBipedObjectDefault;
        #endregion
        #region BodyBipedObject
        public static readonly BipedObject BodyBipedObjectDefault = BipedObject.None;
        public BipedObject BodyBipedObject { get; set; } = BodyBipedObjectDefault;
        #endregion
        #region AimAngleTolerance
        public Single AimAngleTolerance { get; set; } = default(Single);
        #endregion
        #region FlightRadius
        public Single FlightRadius { get; set; } = default(Single);
        #endregion
        #region AngularAccelerationRate
        public Single AngularAccelerationRate { get; set; } = default(Single);
        #endregion
        #region AngularTolerance
        public Single AngularTolerance { get; set; } = default(Single);
        #endregion
        #region Unknown2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown2 = new byte[36];
        public MemorySlice<Byte> Unknown2
        {
            get => _Unknown2;
            set => this._Unknown2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IRaceGetter.Unknown2 => this.Unknown2;
        #endregion
        #region PipboyBipedObject
        public static readonly BipedObject PipboyBipedObjectDefault = BipedObject.None;
        public BipedObject PipboyBipedObject { get; set; } = PipboyBipedObjectDefault;
        #endregion
        #region XPValue
        public Int16 XPValue { get; set; } = default(Int16);
        #endregion
        #region SeverableDebrisScale
        public Single SeverableDebrisScale { get; set; } = default(Single);
        #endregion
        #region SeverableDebrisCount
        public Byte SeverableDebrisCount { get; set; } = default(Byte);
        #endregion
        #region SeverableDecalCount
        public Byte SeverableDecalCount { get; set; } = default(Byte);
        #endregion
        #region ExplodableDebrisScale
        public Single ExplodableDebrisScale { get; set; } = default(Single);
        #endregion
        #region ExplodableDebrisCount
        public Byte ExplodableDebrisCount { get; set; } = default(Byte);
        #endregion
        #region ExplodableDecalCount
        public Byte ExplodableDecalCount { get; set; } = default(Byte);
        #endregion
        #region SeverableExplosion
        private readonly IFormLink<IExplosionGetter> _SeverableExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> SeverableExplosion
        {
            get => _SeverableExplosion;
            set => _SeverableExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IRaceGetter.SeverableExplosion => this.SeverableExplosion;
        #endregion
        #region SeverableDebris
        private readonly IFormLink<IDebrisGetter> _SeverableDebris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> SeverableDebris
        {
            get => _SeverableDebris;
            set => _SeverableDebris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IRaceGetter.SeverableDebris => this.SeverableDebris;
        #endregion
        #region SeverableImpactDataSet
        private readonly IFormLink<IImpactDataSetGetter> _SeverableImpactDataSet = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> SeverableImpactDataSet
        {
            get => _SeverableImpactDataSet;
            set => _SeverableImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IRaceGetter.SeverableImpactDataSet => this.SeverableImpactDataSet;
        #endregion
        #region ExplodableExplosion
        private readonly IFormLink<IExplosionGetter> _ExplodableExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> ExplodableExplosion
        {
            get => _ExplodableExplosion;
            set => _ExplodableExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IRaceGetter.ExplodableExplosion => this.ExplodableExplosion;
        #endregion
        #region ExplodableDebris
        private readonly IFormLink<IDebrisGetter> _ExplodableDebris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> ExplodableDebris
        {
            get => _ExplodableDebris;
            set => _ExplodableDebris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IRaceGetter.ExplodableDebris => this.ExplodableDebris;
        #endregion
        #region ExplodableImpactDataSet
        private readonly IFormLink<IImpactDataSetGetter> _ExplodableImpactDataSet = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> ExplodableImpactDataSet
        {
            get => _ExplodableImpactDataSet;
            set => _ExplodableImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IRaceGetter.ExplodableImpactDataSet => this.ExplodableImpactDataSet;
        #endregion
        #region OnCrippleDebrisScale
        public Single OnCrippleDebrisScale { get; set; } = default(Single);
        #endregion
        #region OnCrippleDebrisCount
        public Byte OnCrippleDebrisCount { get; set; } = default(Byte);
        #endregion
        #region OnCrippleDecalCount
        public Byte OnCrippleDecalCount { get; set; } = default(Byte);
        #endregion
        #region OnCrippleExplosion
        private readonly IFormLink<IExplosionGetter> _OnCrippleExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> OnCrippleExplosion
        {
            get => _OnCrippleExplosion;
            set => _OnCrippleExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IRaceGetter.OnCrippleExplosion => this.OnCrippleExplosion;
        #endregion
        #region OnCrippleDebris
        private readonly IFormLink<IDebrisGetter> _OnCrippleDebris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> OnCrippleDebris
        {
            get => _OnCrippleDebris;
            set => _OnCrippleDebris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IRaceGetter.OnCrippleDebris => this.OnCrippleDebris;
        #endregion
        #region OnCrippleImpactDataSet
        private readonly IFormLink<IImpactDataSetGetter> _OnCrippleImpactDataSet = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> OnCrippleImpactDataSet
        {
            get => _OnCrippleImpactDataSet;
            set => _OnCrippleImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IRaceGetter.OnCrippleImpactDataSet => this.OnCrippleImpactDataSet;
        #endregion
        #region ExplodableSubsegmentExplosion
        private readonly IFormLink<IExplosionGetter> _ExplodableSubsegmentExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> ExplodableSubsegmentExplosion
        {
            get => _ExplodableSubsegmentExplosion;
            set => _ExplodableSubsegmentExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IRaceGetter.ExplodableSubsegmentExplosion => this.ExplodableSubsegmentExplosion;
        #endregion
        #region OrientationLimitsPitch
        public Single OrientationLimitsPitch { get; set; } = default(Single);
        #endregion
        #region OrientationLimitsRoll
        public Single OrientationLimitsRoll { get; set; } = default(Single);
        #endregion
        #region SkeletalModel
        public IGenderedItem<SimpleModel?>? SkeletalModel { get; set; }
        IGenderedItemGetter<ISimpleModelGetter?>? IRaceGetter.SkeletalModel => this.SkeletalModel;
        #endregion
        #region MovementTypeNames
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String> _MovementTypeNames = new ExtendedList<String>();
        public ExtendedList<String> MovementTypeNames
        {
            get => this._MovementTypeNames;
            init => this._MovementTypeNames = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String> IRaceGetter.MovementTypeNames => _MovementTypeNames;
        #endregion

        #endregion
        #region Voices
        public IGenderedItem<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; set; } = new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(FormLink<IVoiceTypeGetter>.Null, FormLink<IVoiceTypeGetter>.Null);
        IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>> IRaceGetter.Voices => this.Voices;
        #endregion
        #region DefaultHairColors
        public IGenderedItem<IFormLinkGetter<IColorRecordGetter>>? DefaultHairColors { get; set; }
        IGenderedItemGetter<IFormLinkGetter<IColorRecordGetter>>? IRaceGetter.DefaultHairColors => this.DefaultHairColors;
        #endregion
        #region NumberOfTintsInList
        public UInt16? NumberOfTintsInList { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IRaceGetter.NumberOfTintsInList => this.NumberOfTintsInList;
        #endregion
        #region FacegenMainClamp
        public Single FacegenMainClamp { get; set; } = default(Single);
        #endregion
        #region FacegenFaceClamp
        public Single FacegenFaceClamp { get; set; } = default(Single);
        #endregion
        #region AttackRace
        private readonly IFormLinkNullable<IRaceGetter> _AttackRace = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> AttackRace
        {
            get => _AttackRace;
            set => _AttackRace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IRaceGetter.AttackRace => this.AttackRace;
        #endregion
        #region Attacks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Attack> _Attacks = new ExtendedList<Attack>();
        public ExtendedList<Attack> Attacks
        {
            get => this._Attacks;
            init => this._Attacks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAttackGetter> IRaceGetter.Attacks => _Attacks;
        #endregion

        #endregion
        #region BodyData
        public IGenderedItem<BodyData?> BodyData { get; set; } = new GenderedItem<BodyData?>(default, default);
        IGenderedItemGetter<IBodyDataGetter?> IRaceGetter.BodyData => this.BodyData;
        #endregion
        #region BodyPartData
        private readonly IFormLinkNullable<IBodyPartDataGetter> _BodyPartData = new FormLinkNullable<IBodyPartDataGetter>();
        public IFormLinkNullable<IBodyPartDataGetter> BodyPartData
        {
            get => _BodyPartData;
            set => _BodyPartData.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IBodyPartDataGetter> IRaceGetter.BodyPartData => this.BodyPartData;
        #endregion
        #region BehaviorGraph
        public IGenderedItem<Model?> BehaviorGraph { get; set; } = new GenderedItem<Model?>(default, default);
        IGenderedItemGetter<IModelGetter?> IRaceGetter.BehaviorGraph => this.BehaviorGraph;
        #endregion
        #region ImpactMaterialType
        private readonly IFormLinkNullable<IMaterialTypeGetter> _ImpactMaterialType = new FormLinkNullable<IMaterialTypeGetter>();
        public IFormLinkNullable<IMaterialTypeGetter> ImpactMaterialType
        {
            get => _ImpactMaterialType;
            set => _ImpactMaterialType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMaterialTypeGetter> IRaceGetter.ImpactMaterialType => this.ImpactMaterialType;
        #endregion
        #region ImpactDataSet
        private readonly IFormLinkNullable<IImpactDataSetGetter> _ImpactDataSet = new FormLinkNullable<IImpactDataSetGetter>();
        public IFormLinkNullable<IImpactDataSetGetter> ImpactDataSet
        {
            get => _ImpactDataSet;
            set => _ImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IImpactDataSetGetter> IRaceGetter.ImpactDataSet => this.ImpactDataSet;
        #endregion
        #region DispemberBloodArt
        private readonly IFormLinkNullable<IArtObjectGetter> _DispemberBloodArt = new FormLinkNullable<IArtObjectGetter>();
        public IFormLinkNullable<IArtObjectGetter> DispemberBloodArt
        {
            get => _DispemberBloodArt;
            set => _DispemberBloodArt.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArtObjectGetter> IRaceGetter.DispemberBloodArt => this.DispemberBloodArt;
        #endregion
        #region MeatCapTextureSet
        private readonly IFormLinkNullable<ITextureSetGetter> _MeatCapTextureSet = new FormLinkNullable<ITextureSetGetter>();
        public IFormLinkNullable<ITextureSetGetter> MeatCapTextureSet
        {
            get => _MeatCapTextureSet;
            set => _MeatCapTextureSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITextureSetGetter> IRaceGetter.MeatCapTextureSet => this.MeatCapTextureSet;
        #endregion
        #region CollarTextureSet
        private readonly IFormLinkNullable<ITextureSetGetter> _CollarTextureSet = new FormLinkNullable<ITextureSetGetter>();
        public IFormLinkNullable<ITextureSetGetter> CollarTextureSet
        {
            get => _CollarTextureSet;
            set => _CollarTextureSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITextureSetGetter> IRaceGetter.CollarTextureSet => this.CollarTextureSet;
        #endregion
        #region SoundOpenCorpse
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _SoundOpenCorpse = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> SoundOpenCorpse
        {
            get => _SoundOpenCorpse;
            set => _SoundOpenCorpse.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IRaceGetter.SoundOpenCorpse => this.SoundOpenCorpse;
        #endregion
        #region SoundCloseCorpse
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _SoundCloseCorpse = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> SoundCloseCorpse
        {
            get => _SoundCloseCorpse;
            set => _SoundCloseCorpse.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IRaceGetter.SoundCloseCorpse => this.SoundCloseCorpse;
        #endregion
        #region BipedObjects
        private readonly Dictionary<BipedObject, BipedObjectData> _BipedObjects = new Dictionary<BipedObject, BipedObjectData>();
        public IDictionary<BipedObject, BipedObjectData> BipedObjects => _BipedObjects;
        #region Interface Members
        IDictionary<BipedObject, BipedObjectData> IRace.BipedObjects => _BipedObjects;
        IReadOnlyDictionary<BipedObject, IBipedObjectDataGetter> IRaceGetter.BipedObjects => _BipedObjects.Covariant<BipedObject, BipedObjectData, IBipedObjectDataGetter>();
        #endregion

        #endregion
        #region MovementDataOverrides
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MovementDataOverride> _MovementDataOverrides = new ExtendedList<MovementDataOverride>();
        public ExtendedList<MovementDataOverride> MovementDataOverrides
        {
            get => this._MovementDataOverrides;
            init => this._MovementDataOverrides = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMovementDataOverrideGetter> IRaceGetter.MovementDataOverrides => _MovementDataOverrides;
        #endregion

        #endregion
        #region EquipmentFlags
        public EquipTypeFlag? EquipmentFlags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        EquipTypeFlag? IRaceGetter.EquipmentFlags => this.EquipmentFlags;
        #endregion
        #region EquipmentSlots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<EquipmentSlot> _EquipmentSlots = new ExtendedList<EquipmentSlot>();
        public ExtendedList<EquipmentSlot> EquipmentSlots
        {
            get => this._EquipmentSlots;
            init => this._EquipmentSlots = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEquipmentSlotGetter> IRaceGetter.EquipmentSlots => _EquipmentSlots;
        #endregion

        #endregion
        #region UnarmedWeapon
        private readonly IFormLinkNullable<IWeaponGetter> _UnarmedWeapon = new FormLinkNullable<IWeaponGetter>();
        public IFormLinkNullable<IWeaponGetter> UnarmedWeapon
        {
            get => _UnarmedWeapon;
            set => _UnarmedWeapon.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWeaponGetter> IRaceGetter.UnarmedWeapon => this.UnarmedWeapon;
        #endregion
        #region FaceFxPhonemes
        public FaceFxPhonemes FaceFxPhonemes { get; set; } = new FaceFxPhonemes();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFaceFxPhonemesGetter IRaceGetter.FaceFxPhonemes => FaceFxPhonemes;
        #endregion
        #region BaseMovementDefault
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementDefault = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementDefault
        {
            get => _BaseMovementDefault;
            set => _BaseMovementDefault.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefault => this.BaseMovementDefault;
        #endregion
        #region BaseMovementDefaultSwim
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementDefaultSwim = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultSwim
        {
            get => _BaseMovementDefaultSwim;
            set => _BaseMovementDefaultSwim.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultSwim => this.BaseMovementDefaultSwim;
        #endregion
        #region BaseMovementDefaultFly
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementDefaultFly = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultFly
        {
            get => _BaseMovementDefaultFly;
            set => _BaseMovementDefaultFly.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultFly => this.BaseMovementDefaultFly;
        #endregion
        #region BaseMovementDefaultSneak
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementDefaultSneak = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultSneak
        {
            get => _BaseMovementDefaultSneak;
            set => _BaseMovementDefaultSneak.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultSneak => this.BaseMovementDefaultSneak;
        #endregion
        #region HeadData
        public IGenderedItem<HeadData?>? HeadData { get; set; }
        IGenderedItemGetter<IHeadDataGetter?>? IRaceGetter.HeadData => this.HeadData;
        #endregion
        #region MorphRace
        private readonly IFormLinkNullable<IRaceGetter> _MorphRace = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> MorphRace
        {
            get => _MorphRace;
            set => _MorphRace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IRaceGetter.MorphRace => this.MorphRace;
        #endregion
        #region ArmorRace
        private readonly IFormLinkNullable<IRaceGetter> _ArmorRace = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> ArmorRace
        {
            get => _ArmorRace;
            set => _ArmorRace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IRaceGetter.ArmorRace => this.ArmorRace;
        #endregion
        #region SubgraphTemplateRace
        private readonly IFormLinkNullable<IRaceGetter> _SubgraphTemplateRace = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> SubgraphTemplateRace
        {
            get => _SubgraphTemplateRace;
            set => _SubgraphTemplateRace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IRaceGetter.SubgraphTemplateRace => this.SubgraphTemplateRace;
        #endregion
        #region SubgraphAdditiveRace
        private readonly IFormLinkNullable<IRaceGetter> _SubgraphAdditiveRace = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> SubgraphAdditiveRace
        {
            get => _SubgraphAdditiveRace;
            set => _SubgraphAdditiveRace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IRaceGetter.SubgraphAdditiveRace => this.SubgraphAdditiveRace;
        #endregion
        #region Subgraphs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Subgraph> _Subgraphs = new ExtendedList<Subgraph>();
        public ExtendedList<Subgraph> Subgraphs
        {
            get => this._Subgraphs;
            init => this._Subgraphs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISubgraphGetter> IRaceGetter.Subgraphs => _Subgraphs;
        #endregion

        #endregion
        #region IdleChatterTimeMin
        public Single? IdleChatterTimeMin { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IRaceGetter.IdleChatterTimeMin => this.IdleChatterTimeMin;
        #endregion
        #region IdleChatterTimeMax
        public Single? IdleChatterTimeMax { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IRaceGetter.IdleChatterTimeMax => this.IdleChatterTimeMax;
        #endregion
        #region MorphValues
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MorphValue> _MorphValues = new ExtendedList<MorphValue>();
        public ExtendedList<MorphValue> MorphValues
        {
            get => this._MorphValues;
            init => this._MorphValues = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMorphValueGetter> IRaceGetter.MorphValues => _MorphValues;
        #endregion

        #endregion
        #region MorphValuesLastIndex
        public Int32? MorphValuesLastIndex { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IRaceGetter.MorphValuesLastIndex => this.MorphValuesLastIndex;
        #endregion
        #region HairColorLookupTexture
        public String? HairColorLookupTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.HairColorLookupTexture => this.HairColorLookupTexture;
        #endregion
        #region HairColorExtendedLookupTexture
        public String? HairColorExtendedLookupTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.HairColorExtendedLookupTexture => this.HairColorExtendedLookupTexture;
        #endregion
        #region DialogueQuest
        private readonly IFormLinkNullable<IQuestGetter> _DialogueQuest = new FormLinkNullable<IQuestGetter>();
        public IFormLinkNullable<IQuestGetter> DialogueQuest
        {
            get => _DialogueQuest;
            set => _DialogueQuest.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IQuestGetter> IRaceGetter.DialogueQuest => this.DialogueQuest;
        #endregion
        #region BoneData
        public IGenderedItem<ExtendedList<Bone>?> BoneData { get; set; } = new GenderedItem<ExtendedList<Bone>?>(default, default);
        IGenderedItemGetter<IReadOnlyList<IBoneGetter>?> IRaceGetter.BoneData => this.BoneData;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            RaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.AnimationSound = initialValue;
                this.Name = initialValue;
                this.Description = initialValue;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Skin = initialValue;
                this.BipedBodyTemplate = new MaskItem<TItem, BipedBodyTemplate.Mask<TItem>?>(initialValue, new BipedBodyTemplate.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.AttachParentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Height = new GenderedItem<TItem>(initialValue, initialValue);
                this.DefaultWeight = new MaskItem<TItem, GenderedItem<RaceWeight.Mask<TItem>?>?>(initialValue, default);
                this.Flags = initialValue;
                this.AccelerationRate = initialValue;
                this.DecelerationRate = initialValue;
                this.Size = initialValue;
                this.Unknown = initialValue;
                this.InjuredHealthPercent = initialValue;
                this.ShieldBipedObject = initialValue;
                this.BeardBipedObject = initialValue;
                this.BodyBipedObject = initialValue;
                this.AimAngleTolerance = initialValue;
                this.FlightRadius = initialValue;
                this.AngularAccelerationRate = initialValue;
                this.AngularTolerance = initialValue;
                this.Unknown2 = initialValue;
                this.PipboyBipedObject = initialValue;
                this.XPValue = initialValue;
                this.SeverableDebrisScale = initialValue;
                this.SeverableDebrisCount = initialValue;
                this.SeverableDecalCount = initialValue;
                this.ExplodableDebrisScale = initialValue;
                this.ExplodableDebrisCount = initialValue;
                this.ExplodableDecalCount = initialValue;
                this.SeverableExplosion = initialValue;
                this.SeverableDebris = initialValue;
                this.SeverableImpactDataSet = initialValue;
                this.ExplodableExplosion = initialValue;
                this.ExplodableDebris = initialValue;
                this.ExplodableImpactDataSet = initialValue;
                this.OnCrippleDebrisScale = initialValue;
                this.OnCrippleDebrisCount = initialValue;
                this.OnCrippleDecalCount = initialValue;
                this.OnCrippleExplosion = initialValue;
                this.OnCrippleDebris = initialValue;
                this.OnCrippleImpactDataSet = initialValue;
                this.ExplodableSubsegmentExplosion = initialValue;
                this.OrientationLimitsPitch = initialValue;
                this.OrientationLimitsRoll = initialValue;
                this.SkeletalModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, SimpleModel.Mask<TItem>?>?>?>(initialValue, default);
                this.MovementTypeNames = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Voices = new GenderedItem<TItem>(initialValue, initialValue);
                this.DefaultHairColors = new MaskItem<TItem, GenderedItem<TItem>?>(initialValue, default);
                this.NumberOfTintsInList = initialValue;
                this.FacegenMainClamp = initialValue;
                this.FacegenFaceClamp = initialValue;
                this.AttackRace = initialValue;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.BodyData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>(initialValue, default);
                this.BodyPartData = initialValue;
                this.BehaviorGraph = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(initialValue, default);
                this.ImpactMaterialType = initialValue;
                this.ImpactDataSet = initialValue;
                this.DispemberBloodArt = initialValue;
                this.MeatCapTextureSet = initialValue;
                this.CollarTextureSet = initialValue;
                this.SoundOpenCorpse = initialValue;
                this.SoundCloseCorpse = initialValue;
                this.BipedObjects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<BipedObject, TItem, BipedObjectData.Mask<TItem>?>>?>(initialValue, null);
                this.MovementDataOverrides = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MovementDataOverride.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MovementDataOverride.Mask<TItem>?>>());
                this.EquipmentFlags = initialValue;
                this.EquipmentSlots = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EquipmentSlot.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, EquipmentSlot.Mask<TItem>?>>());
                this.UnarmedWeapon = initialValue;
                this.FaceFxPhonemes = new MaskItem<TItem, FaceFxPhonemes.Mask<TItem>?>(initialValue, new FaceFxPhonemes.Mask<TItem>(initialValue));
                this.BaseMovementDefault = initialValue;
                this.BaseMovementDefaultSwim = initialValue;
                this.BaseMovementDefaultFly = initialValue;
                this.BaseMovementDefaultSneak = initialValue;
                this.HeadData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, HeadData.Mask<TItem>?>?>?>(initialValue, default);
                this.MorphRace = initialValue;
                this.ArmorRace = initialValue;
                this.SubgraphTemplateRace = initialValue;
                this.SubgraphAdditiveRace = initialValue;
                this.Subgraphs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Subgraph.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Subgraph.Mask<TItem>?>>());
                this.IdleChatterTimeMin = initialValue;
                this.IdleChatterTimeMax = initialValue;
                this.MorphValues = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MorphValue.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MorphValue.Mask<TItem>?>>());
                this.MorphValuesLastIndex = initialValue;
                this.HairColorLookupTexture = initialValue;
                this.HairColorExtendedLookupTexture = initialValue;
                this.DialogueQuest = initialValue;
                this.BoneData = new GenderedItem<TItem>(initialValue, initialValue);
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem AnimationSound,
                TItem Name,
                TItem Description,
                TItem ActorEffect,
                TItem Skin,
                TItem BipedBodyTemplate,
                TItem Keywords,
                TItem Properties,
                TItem AttachParentSlots,
                TItem Height,
                TItem DefaultWeight,
                TItem Flags,
                TItem AccelerationRate,
                TItem DecelerationRate,
                TItem Size,
                TItem Unknown,
                TItem InjuredHealthPercent,
                TItem ShieldBipedObject,
                TItem BeardBipedObject,
                TItem BodyBipedObject,
                TItem AimAngleTolerance,
                TItem FlightRadius,
                TItem AngularAccelerationRate,
                TItem AngularTolerance,
                TItem Unknown2,
                TItem PipboyBipedObject,
                TItem XPValue,
                TItem SeverableDebrisScale,
                TItem SeverableDebrisCount,
                TItem SeverableDecalCount,
                TItem ExplodableDebrisScale,
                TItem ExplodableDebrisCount,
                TItem ExplodableDecalCount,
                TItem SeverableExplosion,
                TItem SeverableDebris,
                TItem SeverableImpactDataSet,
                TItem ExplodableExplosion,
                TItem ExplodableDebris,
                TItem ExplodableImpactDataSet,
                TItem OnCrippleDebrisScale,
                TItem OnCrippleDebrisCount,
                TItem OnCrippleDecalCount,
                TItem OnCrippleExplosion,
                TItem OnCrippleDebris,
                TItem OnCrippleImpactDataSet,
                TItem ExplodableSubsegmentExplosion,
                TItem OrientationLimitsPitch,
                TItem OrientationLimitsRoll,
                TItem SkeletalModel,
                TItem MovementTypeNames,
                TItem Voices,
                TItem DefaultHairColors,
                TItem NumberOfTintsInList,
                TItem FacegenMainClamp,
                TItem FacegenFaceClamp,
                TItem AttackRace,
                TItem Attacks,
                TItem BodyData,
                TItem BodyPartData,
                TItem BehaviorGraph,
                TItem ImpactMaterialType,
                TItem ImpactDataSet,
                TItem DispemberBloodArt,
                TItem MeatCapTextureSet,
                TItem CollarTextureSet,
                TItem SoundOpenCorpse,
                TItem SoundCloseCorpse,
                TItem BipedObjects,
                TItem MovementDataOverrides,
                TItem EquipmentFlags,
                TItem EquipmentSlots,
                TItem UnarmedWeapon,
                TItem FaceFxPhonemes,
                TItem BaseMovementDefault,
                TItem BaseMovementDefaultSwim,
                TItem BaseMovementDefaultFly,
                TItem BaseMovementDefaultSneak,
                TItem HeadData,
                TItem MorphRace,
                TItem ArmorRace,
                TItem SubgraphTemplateRace,
                TItem SubgraphAdditiveRace,
                TItem Subgraphs,
                TItem IdleChatterTimeMin,
                TItem IdleChatterTimeMax,
                TItem MorphValues,
                TItem MorphValuesLastIndex,
                TItem HairColorLookupTexture,
                TItem HairColorExtendedLookupTexture,
                TItem DialogueQuest,
                TItem BoneData)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.AnimationSound = AnimationSound;
                this.Name = Name;
                this.Description = Description;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ActorEffect, Enumerable.Empty<(int Index, TItem Value)>());
                this.Skin = Skin;
                this.BipedBodyTemplate = new MaskItem<TItem, BipedBodyTemplate.Mask<TItem>?>(BipedBodyTemplate, new BipedBodyTemplate.Mask<TItem>(BipedBodyTemplate));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.AttachParentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AttachParentSlots, Enumerable.Empty<(int Index, TItem Value)>());
                this.Height = new GenderedItem<TItem>(Height, Height);
                this.DefaultWeight = new MaskItem<TItem, GenderedItem<RaceWeight.Mask<TItem>?>?>(DefaultWeight, default);
                this.Flags = Flags;
                this.AccelerationRate = AccelerationRate;
                this.DecelerationRate = DecelerationRate;
                this.Size = Size;
                this.Unknown = Unknown;
                this.InjuredHealthPercent = InjuredHealthPercent;
                this.ShieldBipedObject = ShieldBipedObject;
                this.BeardBipedObject = BeardBipedObject;
                this.BodyBipedObject = BodyBipedObject;
                this.AimAngleTolerance = AimAngleTolerance;
                this.FlightRadius = FlightRadius;
                this.AngularAccelerationRate = AngularAccelerationRate;
                this.AngularTolerance = AngularTolerance;
                this.Unknown2 = Unknown2;
                this.PipboyBipedObject = PipboyBipedObject;
                this.XPValue = XPValue;
                this.SeverableDebrisScale = SeverableDebrisScale;
                this.SeverableDebrisCount = SeverableDebrisCount;
                this.SeverableDecalCount = SeverableDecalCount;
                this.ExplodableDebrisScale = ExplodableDebrisScale;
                this.ExplodableDebrisCount = ExplodableDebrisCount;
                this.ExplodableDecalCount = ExplodableDecalCount;
                this.SeverableExplosion = SeverableExplosion;
                this.SeverableDebris = SeverableDebris;
                this.SeverableImpactDataSet = SeverableImpactDataSet;
                this.ExplodableExplosion = ExplodableExplosion;
                this.ExplodableDebris = ExplodableDebris;
                this.ExplodableImpactDataSet = ExplodableImpactDataSet;
                this.OnCrippleDebrisScale = OnCrippleDebrisScale;
                this.OnCrippleDebrisCount = OnCrippleDebrisCount;
                this.OnCrippleDecalCount = OnCrippleDecalCount;
                this.OnCrippleExplosion = OnCrippleExplosion;
                this.OnCrippleDebris = OnCrippleDebris;
                this.OnCrippleImpactDataSet = OnCrippleImpactDataSet;
                this.ExplodableSubsegmentExplosion = ExplodableSubsegmentExplosion;
                this.OrientationLimitsPitch = OrientationLimitsPitch;
                this.OrientationLimitsRoll = OrientationLimitsRoll;
                this.SkeletalModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, SimpleModel.Mask<TItem>?>?>?>(SkeletalModel, default);
                this.MovementTypeNames = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(MovementTypeNames, Enumerable.Empty<(int Index, TItem Value)>());
                this.Voices = new GenderedItem<TItem>(Voices, Voices);
                this.DefaultHairColors = new MaskItem<TItem, GenderedItem<TItem>?>(DefaultHairColors, default);
                this.NumberOfTintsInList = NumberOfTintsInList;
                this.FacegenMainClamp = FacegenMainClamp;
                this.FacegenFaceClamp = FacegenFaceClamp;
                this.AttackRace = AttackRace;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(Attacks, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.BodyData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>(BodyData, default);
                this.BodyPartData = BodyPartData;
                this.BehaviorGraph = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(BehaviorGraph, default);
                this.ImpactMaterialType = ImpactMaterialType;
                this.ImpactDataSet = ImpactDataSet;
                this.DispemberBloodArt = DispemberBloodArt;
                this.MeatCapTextureSet = MeatCapTextureSet;
                this.CollarTextureSet = CollarTextureSet;
                this.SoundOpenCorpse = SoundOpenCorpse;
                this.SoundCloseCorpse = SoundCloseCorpse;
                this.BipedObjects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<BipedObject, TItem, BipedObjectData.Mask<TItem>?>>?>(BipedObjects, null);
                this.MovementDataOverrides = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MovementDataOverride.Mask<TItem>?>>?>(MovementDataOverrides, Enumerable.Empty<MaskItemIndexed<TItem, MovementDataOverride.Mask<TItem>?>>());
                this.EquipmentFlags = EquipmentFlags;
                this.EquipmentSlots = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EquipmentSlot.Mask<TItem>?>>?>(EquipmentSlots, Enumerable.Empty<MaskItemIndexed<TItem, EquipmentSlot.Mask<TItem>?>>());
                this.UnarmedWeapon = UnarmedWeapon;
                this.FaceFxPhonemes = new MaskItem<TItem, FaceFxPhonemes.Mask<TItem>?>(FaceFxPhonemes, new FaceFxPhonemes.Mask<TItem>(FaceFxPhonemes));
                this.BaseMovementDefault = BaseMovementDefault;
                this.BaseMovementDefaultSwim = BaseMovementDefaultSwim;
                this.BaseMovementDefaultFly = BaseMovementDefaultFly;
                this.BaseMovementDefaultSneak = BaseMovementDefaultSneak;
                this.HeadData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, HeadData.Mask<TItem>?>?>?>(HeadData, default);
                this.MorphRace = MorphRace;
                this.ArmorRace = ArmorRace;
                this.SubgraphTemplateRace = SubgraphTemplateRace;
                this.SubgraphAdditiveRace = SubgraphAdditiveRace;
                this.Subgraphs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Subgraph.Mask<TItem>?>>?>(Subgraphs, Enumerable.Empty<MaskItemIndexed<TItem, Subgraph.Mask<TItem>?>>());
                this.IdleChatterTimeMin = IdleChatterTimeMin;
                this.IdleChatterTimeMax = IdleChatterTimeMax;
                this.MorphValues = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MorphValue.Mask<TItem>?>>?>(MorphValues, Enumerable.Empty<MaskItemIndexed<TItem, MorphValue.Mask<TItem>?>>());
                this.MorphValuesLastIndex = MorphValuesLastIndex;
                this.HairColorLookupTexture = HairColorLookupTexture;
                this.HairColorExtendedLookupTexture = HairColorExtendedLookupTexture;
                this.DialogueQuest = DialogueQuest;
                this.BoneData = new GenderedItem<TItem>(BoneData, BoneData);
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem AnimationSound;
            public TItem Name;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ActorEffect;
            public TItem Skin;
            public MaskItem<TItem, BipedBodyTemplate.Mask<TItem>?>? BipedBodyTemplate { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>? Properties;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AttachParentSlots;
            public GenderedItem<TItem> Height;
            public MaskItem<TItem, GenderedItem<RaceWeight.Mask<TItem>?>?>? DefaultWeight;
            public TItem Flags;
            public TItem AccelerationRate;
            public TItem DecelerationRate;
            public TItem Size;
            public TItem Unknown;
            public TItem InjuredHealthPercent;
            public TItem ShieldBipedObject;
            public TItem BeardBipedObject;
            public TItem BodyBipedObject;
            public TItem AimAngleTolerance;
            public TItem FlightRadius;
            public TItem AngularAccelerationRate;
            public TItem AngularTolerance;
            public TItem Unknown2;
            public TItem PipboyBipedObject;
            public TItem XPValue;
            public TItem SeverableDebrisScale;
            public TItem SeverableDebrisCount;
            public TItem SeverableDecalCount;
            public TItem ExplodableDebrisScale;
            public TItem ExplodableDebrisCount;
            public TItem ExplodableDecalCount;
            public TItem SeverableExplosion;
            public TItem SeverableDebris;
            public TItem SeverableImpactDataSet;
            public TItem ExplodableExplosion;
            public TItem ExplodableDebris;
            public TItem ExplodableImpactDataSet;
            public TItem OnCrippleDebrisScale;
            public TItem OnCrippleDebrisCount;
            public TItem OnCrippleDecalCount;
            public TItem OnCrippleExplosion;
            public TItem OnCrippleDebris;
            public TItem OnCrippleImpactDataSet;
            public TItem ExplodableSubsegmentExplosion;
            public TItem OrientationLimitsPitch;
            public TItem OrientationLimitsRoll;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, SimpleModel.Mask<TItem>?>?>?>? SkeletalModel;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? MovementTypeNames;
            public GenderedItem<TItem> Voices;
            public MaskItem<TItem, GenderedItem<TItem>?>? DefaultHairColors;
            public TItem NumberOfTintsInList;
            public TItem FacegenMainClamp;
            public TItem FacegenFaceClamp;
            public TItem AttackRace;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>? Attacks;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>? BodyData;
            public TItem BodyPartData;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>? BehaviorGraph;
            public TItem ImpactMaterialType;
            public TItem ImpactDataSet;
            public TItem DispemberBloodArt;
            public TItem MeatCapTextureSet;
            public TItem CollarTextureSet;
            public TItem SoundOpenCorpse;
            public TItem SoundCloseCorpse;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<BipedObject, TItem, BipedObjectData.Mask<TItem>?>>?>? BipedObjects;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MovementDataOverride.Mask<TItem>?>>?>? MovementDataOverrides;
            public TItem EquipmentFlags;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EquipmentSlot.Mask<TItem>?>>?>? EquipmentSlots;
            public TItem UnarmedWeapon;
            public MaskItem<TItem, FaceFxPhonemes.Mask<TItem>?>? FaceFxPhonemes { get; set; }
            public TItem BaseMovementDefault;
            public TItem BaseMovementDefaultSwim;
            public TItem BaseMovementDefaultFly;
            public TItem BaseMovementDefaultSneak;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, HeadData.Mask<TItem>?>?>?>? HeadData;
            public TItem MorphRace;
            public TItem ArmorRace;
            public TItem SubgraphTemplateRace;
            public TItem SubgraphAdditiveRace;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Subgraph.Mask<TItem>?>>?>? Subgraphs;
            public TItem IdleChatterTimeMin;
            public TItem IdleChatterTimeMax;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MorphValue.Mask<TItem>?>>?>? MorphValues;
            public TItem MorphValuesLastIndex;
            public TItem HairColorLookupTexture;
            public TItem HairColorExtendedLookupTexture;
            public TItem DialogueQuest;
            public GenderedItem<TItem> BoneData;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.AnimationSound, rhs.AnimationSound)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.ActorEffect, rhs.ActorEffect)) return false;
                if (!object.Equals(this.Skin, rhs.Skin)) return false;
                if (!object.Equals(this.BipedBodyTemplate, rhs.BipedBodyTemplate)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.AttachParentSlots, rhs.AttachParentSlots)) return false;
                if (!object.Equals(this.Height, rhs.Height)) return false;
                if (!object.Equals(this.DefaultWeight, rhs.DefaultWeight)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.AccelerationRate, rhs.AccelerationRate)) return false;
                if (!object.Equals(this.DecelerationRate, rhs.DecelerationRate)) return false;
                if (!object.Equals(this.Size, rhs.Size)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.InjuredHealthPercent, rhs.InjuredHealthPercent)) return false;
                if (!object.Equals(this.ShieldBipedObject, rhs.ShieldBipedObject)) return false;
                if (!object.Equals(this.BeardBipedObject, rhs.BeardBipedObject)) return false;
                if (!object.Equals(this.BodyBipedObject, rhs.BodyBipedObject)) return false;
                if (!object.Equals(this.AimAngleTolerance, rhs.AimAngleTolerance)) return false;
                if (!object.Equals(this.FlightRadius, rhs.FlightRadius)) return false;
                if (!object.Equals(this.AngularAccelerationRate, rhs.AngularAccelerationRate)) return false;
                if (!object.Equals(this.AngularTolerance, rhs.AngularTolerance)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.PipboyBipedObject, rhs.PipboyBipedObject)) return false;
                if (!object.Equals(this.XPValue, rhs.XPValue)) return false;
                if (!object.Equals(this.SeverableDebrisScale, rhs.SeverableDebrisScale)) return false;
                if (!object.Equals(this.SeverableDebrisCount, rhs.SeverableDebrisCount)) return false;
                if (!object.Equals(this.SeverableDecalCount, rhs.SeverableDecalCount)) return false;
                if (!object.Equals(this.ExplodableDebrisScale, rhs.ExplodableDebrisScale)) return false;
                if (!object.Equals(this.ExplodableDebrisCount, rhs.ExplodableDebrisCount)) return false;
                if (!object.Equals(this.ExplodableDecalCount, rhs.ExplodableDecalCount)) return false;
                if (!object.Equals(this.SeverableExplosion, rhs.SeverableExplosion)) return false;
                if (!object.Equals(this.SeverableDebris, rhs.SeverableDebris)) return false;
                if (!object.Equals(this.SeverableImpactDataSet, rhs.SeverableImpactDataSet)) return false;
                if (!object.Equals(this.ExplodableExplosion, rhs.ExplodableExplosion)) return false;
                if (!object.Equals(this.ExplodableDebris, rhs.ExplodableDebris)) return false;
                if (!object.Equals(this.ExplodableImpactDataSet, rhs.ExplodableImpactDataSet)) return false;
                if (!object.Equals(this.OnCrippleDebrisScale, rhs.OnCrippleDebrisScale)) return false;
                if (!object.Equals(this.OnCrippleDebrisCount, rhs.OnCrippleDebrisCount)) return false;
                if (!object.Equals(this.OnCrippleDecalCount, rhs.OnCrippleDecalCount)) return false;
                if (!object.Equals(this.OnCrippleExplosion, rhs.OnCrippleExplosion)) return false;
                if (!object.Equals(this.OnCrippleDebris, rhs.OnCrippleDebris)) return false;
                if (!object.Equals(this.OnCrippleImpactDataSet, rhs.OnCrippleImpactDataSet)) return false;
                if (!object.Equals(this.ExplodableSubsegmentExplosion, rhs.ExplodableSubsegmentExplosion)) return false;
                if (!object.Equals(this.OrientationLimitsPitch, rhs.OrientationLimitsPitch)) return false;
                if (!object.Equals(this.OrientationLimitsRoll, rhs.OrientationLimitsRoll)) return false;
                if (!object.Equals(this.SkeletalModel, rhs.SkeletalModel)) return false;
                if (!object.Equals(this.MovementTypeNames, rhs.MovementTypeNames)) return false;
                if (!object.Equals(this.Voices, rhs.Voices)) return false;
                if (!object.Equals(this.DefaultHairColors, rhs.DefaultHairColors)) return false;
                if (!object.Equals(this.NumberOfTintsInList, rhs.NumberOfTintsInList)) return false;
                if (!object.Equals(this.FacegenMainClamp, rhs.FacegenMainClamp)) return false;
                if (!object.Equals(this.FacegenFaceClamp, rhs.FacegenFaceClamp)) return false;
                if (!object.Equals(this.AttackRace, rhs.AttackRace)) return false;
                if (!object.Equals(this.Attacks, rhs.Attacks)) return false;
                if (!object.Equals(this.BodyData, rhs.BodyData)) return false;
                if (!object.Equals(this.BodyPartData, rhs.BodyPartData)) return false;
                if (!object.Equals(this.BehaviorGraph, rhs.BehaviorGraph)) return false;
                if (!object.Equals(this.ImpactMaterialType, rhs.ImpactMaterialType)) return false;
                if (!object.Equals(this.ImpactDataSet, rhs.ImpactDataSet)) return false;
                if (!object.Equals(this.DispemberBloodArt, rhs.DispemberBloodArt)) return false;
                if (!object.Equals(this.MeatCapTextureSet, rhs.MeatCapTextureSet)) return false;
                if (!object.Equals(this.CollarTextureSet, rhs.CollarTextureSet)) return false;
                if (!object.Equals(this.SoundOpenCorpse, rhs.SoundOpenCorpse)) return false;
                if (!object.Equals(this.SoundCloseCorpse, rhs.SoundCloseCorpse)) return false;
                if (!object.Equals(this.BipedObjects, rhs.BipedObjects)) return false;
                if (!object.Equals(this.MovementDataOverrides, rhs.MovementDataOverrides)) return false;
                if (!object.Equals(this.EquipmentFlags, rhs.EquipmentFlags)) return false;
                if (!object.Equals(this.EquipmentSlots, rhs.EquipmentSlots)) return false;
                if (!object.Equals(this.UnarmedWeapon, rhs.UnarmedWeapon)) return false;
                if (!object.Equals(this.FaceFxPhonemes, rhs.FaceFxPhonemes)) return false;
                if (!object.Equals(this.BaseMovementDefault, rhs.BaseMovementDefault)) return false;
                if (!object.Equals(this.BaseMovementDefaultSwim, rhs.BaseMovementDefaultSwim)) return false;
                if (!object.Equals(this.BaseMovementDefaultFly, rhs.BaseMovementDefaultFly)) return false;
                if (!object.Equals(this.BaseMovementDefaultSneak, rhs.BaseMovementDefaultSneak)) return false;
                if (!object.Equals(this.HeadData, rhs.HeadData)) return false;
                if (!object.Equals(this.MorphRace, rhs.MorphRace)) return false;
                if (!object.Equals(this.ArmorRace, rhs.ArmorRace)) return false;
                if (!object.Equals(this.SubgraphTemplateRace, rhs.SubgraphTemplateRace)) return false;
                if (!object.Equals(this.SubgraphAdditiveRace, rhs.SubgraphAdditiveRace)) return false;
                if (!object.Equals(this.Subgraphs, rhs.Subgraphs)) return false;
                if (!object.Equals(this.IdleChatterTimeMin, rhs.IdleChatterTimeMin)) return false;
                if (!object.Equals(this.IdleChatterTimeMax, rhs.IdleChatterTimeMax)) return false;
                if (!object.Equals(this.MorphValues, rhs.MorphValues)) return false;
                if (!object.Equals(this.MorphValuesLastIndex, rhs.MorphValuesLastIndex)) return false;
                if (!object.Equals(this.HairColorLookupTexture, rhs.HairColorLookupTexture)) return false;
                if (!object.Equals(this.HairColorExtendedLookupTexture, rhs.HairColorExtendedLookupTexture)) return false;
                if (!object.Equals(this.DialogueQuest, rhs.DialogueQuest)) return false;
                if (!object.Equals(this.BoneData, rhs.BoneData)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.AnimationSound);
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.ActorEffect);
                hash.Add(this.Skin);
                hash.Add(this.BipedBodyTemplate);
                hash.Add(this.Keywords);
                hash.Add(this.Properties);
                hash.Add(this.AttachParentSlots);
                hash.Add(this.Height);
                hash.Add(this.DefaultWeight);
                hash.Add(this.Flags);
                hash.Add(this.AccelerationRate);
                hash.Add(this.DecelerationRate);
                hash.Add(this.Size);
                hash.Add(this.Unknown);
                hash.Add(this.InjuredHealthPercent);
                hash.Add(this.ShieldBipedObject);
                hash.Add(this.BeardBipedObject);
                hash.Add(this.BodyBipedObject);
                hash.Add(this.AimAngleTolerance);
                hash.Add(this.FlightRadius);
                hash.Add(this.AngularAccelerationRate);
                hash.Add(this.AngularTolerance);
                hash.Add(this.Unknown2);
                hash.Add(this.PipboyBipedObject);
                hash.Add(this.XPValue);
                hash.Add(this.SeverableDebrisScale);
                hash.Add(this.SeverableDebrisCount);
                hash.Add(this.SeverableDecalCount);
                hash.Add(this.ExplodableDebrisScale);
                hash.Add(this.ExplodableDebrisCount);
                hash.Add(this.ExplodableDecalCount);
                hash.Add(this.SeverableExplosion);
                hash.Add(this.SeverableDebris);
                hash.Add(this.SeverableImpactDataSet);
                hash.Add(this.ExplodableExplosion);
                hash.Add(this.ExplodableDebris);
                hash.Add(this.ExplodableImpactDataSet);
                hash.Add(this.OnCrippleDebrisScale);
                hash.Add(this.OnCrippleDebrisCount);
                hash.Add(this.OnCrippleDecalCount);
                hash.Add(this.OnCrippleExplosion);
                hash.Add(this.OnCrippleDebris);
                hash.Add(this.OnCrippleImpactDataSet);
                hash.Add(this.ExplodableSubsegmentExplosion);
                hash.Add(this.OrientationLimitsPitch);
                hash.Add(this.OrientationLimitsRoll);
                hash.Add(this.SkeletalModel);
                hash.Add(this.MovementTypeNames);
                hash.Add(this.Voices);
                hash.Add(this.DefaultHairColors);
                hash.Add(this.NumberOfTintsInList);
                hash.Add(this.FacegenMainClamp);
                hash.Add(this.FacegenFaceClamp);
                hash.Add(this.AttackRace);
                hash.Add(this.Attacks);
                hash.Add(this.BodyData);
                hash.Add(this.BodyPartData);
                hash.Add(this.BehaviorGraph);
                hash.Add(this.ImpactMaterialType);
                hash.Add(this.ImpactDataSet);
                hash.Add(this.DispemberBloodArt);
                hash.Add(this.MeatCapTextureSet);
                hash.Add(this.CollarTextureSet);
                hash.Add(this.SoundOpenCorpse);
                hash.Add(this.SoundCloseCorpse);
                hash.Add(this.BipedObjects);
                hash.Add(this.MovementDataOverrides);
                hash.Add(this.EquipmentFlags);
                hash.Add(this.EquipmentSlots);
                hash.Add(this.UnarmedWeapon);
                hash.Add(this.FaceFxPhonemes);
                hash.Add(this.BaseMovementDefault);
                hash.Add(this.BaseMovementDefaultSwim);
                hash.Add(this.BaseMovementDefaultFly);
                hash.Add(this.BaseMovementDefaultSneak);
                hash.Add(this.HeadData);
                hash.Add(this.MorphRace);
                hash.Add(this.ArmorRace);
                hash.Add(this.SubgraphTemplateRace);
                hash.Add(this.SubgraphAdditiveRace);
                hash.Add(this.Subgraphs);
                hash.Add(this.IdleChatterTimeMin);
                hash.Add(this.IdleChatterTimeMax);
                hash.Add(this.MorphValues);
                hash.Add(this.MorphValuesLastIndex);
                hash.Add(this.HairColorLookupTexture);
                hash.Add(this.HairColorExtendedLookupTexture);
                hash.Add(this.DialogueQuest);
                hash.Add(this.BoneData);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.AnimationSound)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (this.ActorEffect != null)
                {
                    if (!eval(this.ActorEffect.Overall)) return false;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Skin)) return false;
                if (BipedBodyTemplate != null)
                {
                    if (!eval(this.BipedBodyTemplate.Overall)) return false;
                    if (this.BipedBodyTemplate.Specific != null && !this.BipedBodyTemplate.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.AttachParentSlots != null)
                {
                    if (!eval(this.AttachParentSlots.Overall)) return false;
                    if (this.AttachParentSlots.Specific != null)
                    {
                        foreach (var item in this.AttachParentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Height.Male) || !eval(this.Height.Female)) return false;
                if (!GenderedItem.AllMask(
                    this.DefaultWeight,
                    eval: eval)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.AccelerationRate)) return false;
                if (!eval(this.DecelerationRate)) return false;
                if (!eval(this.Size)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.InjuredHealthPercent)) return false;
                if (!eval(this.ShieldBipedObject)) return false;
                if (!eval(this.BeardBipedObject)) return false;
                if (!eval(this.BodyBipedObject)) return false;
                if (!eval(this.AimAngleTolerance)) return false;
                if (!eval(this.FlightRadius)) return false;
                if (!eval(this.AngularAccelerationRate)) return false;
                if (!eval(this.AngularTolerance)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.PipboyBipedObject)) return false;
                if (!eval(this.XPValue)) return false;
                if (!eval(this.SeverableDebrisScale)) return false;
                if (!eval(this.SeverableDebrisCount)) return false;
                if (!eval(this.SeverableDecalCount)) return false;
                if (!eval(this.ExplodableDebrisScale)) return false;
                if (!eval(this.ExplodableDebrisCount)) return false;
                if (!eval(this.ExplodableDecalCount)) return false;
                if (!eval(this.SeverableExplosion)) return false;
                if (!eval(this.SeverableDebris)) return false;
                if (!eval(this.SeverableImpactDataSet)) return false;
                if (!eval(this.ExplodableExplosion)) return false;
                if (!eval(this.ExplodableDebris)) return false;
                if (!eval(this.ExplodableImpactDataSet)) return false;
                if (!eval(this.OnCrippleDebrisScale)) return false;
                if (!eval(this.OnCrippleDebrisCount)) return false;
                if (!eval(this.OnCrippleDecalCount)) return false;
                if (!eval(this.OnCrippleExplosion)) return false;
                if (!eval(this.OnCrippleDebris)) return false;
                if (!eval(this.OnCrippleImpactDataSet)) return false;
                if (!eval(this.ExplodableSubsegmentExplosion)) return false;
                if (!eval(this.OrientationLimitsPitch)) return false;
                if (!eval(this.OrientationLimitsRoll)) return false;
                if (!GenderedItem.AllMask(
                    this.SkeletalModel,
                    eval: eval)) return false;
                if (this.MovementTypeNames != null)
                {
                    if (!eval(this.MovementTypeNames.Overall)) return false;
                    if (this.MovementTypeNames.Specific != null)
                    {
                        foreach (var item in this.MovementTypeNames.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Voices.Male) || !eval(this.Voices.Female)) return false;
                if (!GenderedItem.All(
                    this.DefaultHairColors,
                    eval: eval)) return false;
                if (!eval(this.NumberOfTintsInList)) return false;
                if (!eval(this.FacegenMainClamp)) return false;
                if (!eval(this.FacegenFaceClamp)) return false;
                if (!eval(this.AttackRace)) return false;
                if (this.Attacks != null)
                {
                    if (!eval(this.Attacks.Overall)) return false;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!GenderedItem.AllMask(
                    this.BodyData,
                    eval: eval)) return false;
                if (!eval(this.BodyPartData)) return false;
                if (!GenderedItem.AllMask(
                    this.BehaviorGraph,
                    eval: eval)) return false;
                if (!eval(this.ImpactMaterialType)) return false;
                if (!eval(this.ImpactDataSet)) return false;
                if (!eval(this.DispemberBloodArt)) return false;
                if (!eval(this.MeatCapTextureSet)) return false;
                if (!eval(this.CollarTextureSet)) return false;
                if (!eval(this.SoundOpenCorpse)) return false;
                if (!eval(this.SoundCloseCorpse)) return false;
                if (this.BipedObjects != null)
                {
                    if (!eval(this.BipedObjects.Overall)) return false;
                    if (this.BipedObjects.Specific != null)
                    {
                        foreach (var item in this.BipedObjects.Specific)
                        {
                            if (item.Specific != null)
                            {
                                if (!eval(item.Overall)) return false;
                                if (!item.Specific?.All(eval) ?? false) return false;
                            }
                        }
                    }
                }
                if (this.MovementDataOverrides != null)
                {
                    if (!eval(this.MovementDataOverrides.Overall)) return false;
                    if (this.MovementDataOverrides.Specific != null)
                    {
                        foreach (var item in this.MovementDataOverrides.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.EquipmentFlags)) return false;
                if (this.EquipmentSlots != null)
                {
                    if (!eval(this.EquipmentSlots.Overall)) return false;
                    if (this.EquipmentSlots.Specific != null)
                    {
                        foreach (var item in this.EquipmentSlots.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.UnarmedWeapon)) return false;
                if (FaceFxPhonemes != null)
                {
                    if (!eval(this.FaceFxPhonemes.Overall)) return false;
                    if (this.FaceFxPhonemes.Specific != null && !this.FaceFxPhonemes.Specific.All(eval)) return false;
                }
                if (!eval(this.BaseMovementDefault)) return false;
                if (!eval(this.BaseMovementDefaultSwim)) return false;
                if (!eval(this.BaseMovementDefaultFly)) return false;
                if (!eval(this.BaseMovementDefaultSneak)) return false;
                if (!GenderedItem.AllMask(
                    this.HeadData,
                    eval: eval)) return false;
                if (!eval(this.MorphRace)) return false;
                if (!eval(this.ArmorRace)) return false;
                if (!eval(this.SubgraphTemplateRace)) return false;
                if (!eval(this.SubgraphAdditiveRace)) return false;
                if (this.Subgraphs != null)
                {
                    if (!eval(this.Subgraphs.Overall)) return false;
                    if (this.Subgraphs.Specific != null)
                    {
                        foreach (var item in this.Subgraphs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.IdleChatterTimeMin)) return false;
                if (!eval(this.IdleChatterTimeMax)) return false;
                if (this.MorphValues != null)
                {
                    if (!eval(this.MorphValues.Overall)) return false;
                    if (this.MorphValues.Specific != null)
                    {
                        foreach (var item in this.MorphValues.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.MorphValuesLastIndex)) return false;
                if (!eval(this.HairColorLookupTexture)) return false;
                if (!eval(this.HairColorExtendedLookupTexture)) return false;
                if (!eval(this.DialogueQuest)) return false;
                if (!eval(this.BoneData.Male) || !eval(this.BoneData.Female)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.AnimationSound)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (this.ActorEffect != null)
                {
                    if (eval(this.ActorEffect.Overall)) return true;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Skin)) return true;
                if (BipedBodyTemplate != null)
                {
                    if (eval(this.BipedBodyTemplate.Overall)) return true;
                    if (this.BipedBodyTemplate.Specific != null && this.BipedBodyTemplate.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.AttachParentSlots != null)
                {
                    if (eval(this.AttachParentSlots.Overall)) return true;
                    if (this.AttachParentSlots.Specific != null)
                    {
                        foreach (var item in this.AttachParentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Height.Male) || eval(this.Height.Female)) return true;
                if (GenderedItem.AnyMask(
                    this.DefaultWeight,
                    eval: eval)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.AccelerationRate)) return true;
                if (eval(this.DecelerationRate)) return true;
                if (eval(this.Size)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.InjuredHealthPercent)) return true;
                if (eval(this.ShieldBipedObject)) return true;
                if (eval(this.BeardBipedObject)) return true;
                if (eval(this.BodyBipedObject)) return true;
                if (eval(this.AimAngleTolerance)) return true;
                if (eval(this.FlightRadius)) return true;
                if (eval(this.AngularAccelerationRate)) return true;
                if (eval(this.AngularTolerance)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.PipboyBipedObject)) return true;
                if (eval(this.XPValue)) return true;
                if (eval(this.SeverableDebrisScale)) return true;
                if (eval(this.SeverableDebrisCount)) return true;
                if (eval(this.SeverableDecalCount)) return true;
                if (eval(this.ExplodableDebrisScale)) return true;
                if (eval(this.ExplodableDebrisCount)) return true;
                if (eval(this.ExplodableDecalCount)) return true;
                if (eval(this.SeverableExplosion)) return true;
                if (eval(this.SeverableDebris)) return true;
                if (eval(this.SeverableImpactDataSet)) return true;
                if (eval(this.ExplodableExplosion)) return true;
                if (eval(this.ExplodableDebris)) return true;
                if (eval(this.ExplodableImpactDataSet)) return true;
                if (eval(this.OnCrippleDebrisScale)) return true;
                if (eval(this.OnCrippleDebrisCount)) return true;
                if (eval(this.OnCrippleDecalCount)) return true;
                if (eval(this.OnCrippleExplosion)) return true;
                if (eval(this.OnCrippleDebris)) return true;
                if (eval(this.OnCrippleImpactDataSet)) return true;
                if (eval(this.ExplodableSubsegmentExplosion)) return true;
                if (eval(this.OrientationLimitsPitch)) return true;
                if (eval(this.OrientationLimitsRoll)) return true;
                if (GenderedItem.AnyMask(
                    this.SkeletalModel,
                    eval: eval)) return true;
                if (this.MovementTypeNames != null)
                {
                    if (eval(this.MovementTypeNames.Overall)) return true;
                    if (this.MovementTypeNames.Specific != null)
                    {
                        foreach (var item in this.MovementTypeNames.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Voices.Male) || eval(this.Voices.Female)) return true;
                if (GenderedItem.Any(
                    this.DefaultHairColors,
                    eval: eval)) return true;
                if (eval(this.NumberOfTintsInList)) return true;
                if (eval(this.FacegenMainClamp)) return true;
                if (eval(this.FacegenFaceClamp)) return true;
                if (eval(this.AttackRace)) return true;
                if (this.Attacks != null)
                {
                    if (eval(this.Attacks.Overall)) return true;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (GenderedItem.AnyMask(
                    this.BodyData,
                    eval: eval)) return true;
                if (eval(this.BodyPartData)) return true;
                if (GenderedItem.AnyMask(
                    this.BehaviorGraph,
                    eval: eval)) return true;
                if (eval(this.ImpactMaterialType)) return true;
                if (eval(this.ImpactDataSet)) return true;
                if (eval(this.DispemberBloodArt)) return true;
                if (eval(this.MeatCapTextureSet)) return true;
                if (eval(this.CollarTextureSet)) return true;
                if (eval(this.SoundOpenCorpse)) return true;
                if (eval(this.SoundCloseCorpse)) return true;
                if (this.BipedObjects != null)
                {
                    if (eval(this.BipedObjects.Overall)) return true;
                    if (this.BipedObjects.Specific != null)
                    {
                        foreach (var item in this.BipedObjects.Specific)
                        {
                            if (item.Specific != null)
                            {
                                if (eval(item.Overall)) return true;
                                if (item.Specific?.Any(eval) ?? false) return true;
                            }
                        }
                    }
                }
                if (this.MovementDataOverrides != null)
                {
                    if (eval(this.MovementDataOverrides.Overall)) return true;
                    if (this.MovementDataOverrides.Specific != null)
                    {
                        foreach (var item in this.MovementDataOverrides.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.EquipmentFlags)) return true;
                if (this.EquipmentSlots != null)
                {
                    if (eval(this.EquipmentSlots.Overall)) return true;
                    if (this.EquipmentSlots.Specific != null)
                    {
                        foreach (var item in this.EquipmentSlots.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.UnarmedWeapon)) return true;
                if (FaceFxPhonemes != null)
                {
                    if (eval(this.FaceFxPhonemes.Overall)) return true;
                    if (this.FaceFxPhonemes.Specific != null && this.FaceFxPhonemes.Specific.Any(eval)) return true;
                }
                if (eval(this.BaseMovementDefault)) return true;
                if (eval(this.BaseMovementDefaultSwim)) return true;
                if (eval(this.BaseMovementDefaultFly)) return true;
                if (eval(this.BaseMovementDefaultSneak)) return true;
                if (GenderedItem.AnyMask(
                    this.HeadData,
                    eval: eval)) return true;
                if (eval(this.MorphRace)) return true;
                if (eval(this.ArmorRace)) return true;
                if (eval(this.SubgraphTemplateRace)) return true;
                if (eval(this.SubgraphAdditiveRace)) return true;
                if (this.Subgraphs != null)
                {
                    if (eval(this.Subgraphs.Overall)) return true;
                    if (this.Subgraphs.Specific != null)
                    {
                        foreach (var item in this.Subgraphs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.IdleChatterTimeMin)) return true;
                if (eval(this.IdleChatterTimeMax)) return true;
                if (this.MorphValues != null)
                {
                    if (eval(this.MorphValues.Overall)) return true;
                    if (this.MorphValues.Specific != null)
                    {
                        foreach (var item in this.MorphValues.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.MorphValuesLastIndex)) return true;
                if (eval(this.HairColorLookupTexture)) return true;
                if (eval(this.HairColorExtendedLookupTexture)) return true;
                if (eval(this.DialogueQuest)) return true;
                if (eval(this.BoneData.Male) || eval(this.BoneData.Female)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Race.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.AnimationSound = eval(this.AnimationSound);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                if (ActorEffect != null)
                {
                    obj.ActorEffect = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ActorEffect.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ActorEffect.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ActorEffect.Specific = l;
                        foreach (var item in ActorEffect.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Skin = eval(this.Skin);
                obj.BipedBodyTemplate = this.BipedBodyTemplate == null ? null : new MaskItem<R, BipedBodyTemplate.Mask<R>?>(eval(this.BipedBodyTemplate.Overall), this.BipedBodyTemplate.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, ObjectProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (AttachParentSlots != null)
                {
                    obj.AttachParentSlots = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AttachParentSlots.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AttachParentSlots.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AttachParentSlots.Specific = l;
                        foreach (var item in AttachParentSlots.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Height = new GenderedItem<R>(
                    eval(this.Height.Male),
                    eval(this.Height.Female));
                obj.DefaultWeight = GenderedItem.TranslateHelper(
                    this.DefaultWeight,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.Flags = eval(this.Flags);
                obj.AccelerationRate = eval(this.AccelerationRate);
                obj.DecelerationRate = eval(this.DecelerationRate);
                obj.Size = eval(this.Size);
                obj.Unknown = eval(this.Unknown);
                obj.InjuredHealthPercent = eval(this.InjuredHealthPercent);
                obj.ShieldBipedObject = eval(this.ShieldBipedObject);
                obj.BeardBipedObject = eval(this.BeardBipedObject);
                obj.BodyBipedObject = eval(this.BodyBipedObject);
                obj.AimAngleTolerance = eval(this.AimAngleTolerance);
                obj.FlightRadius = eval(this.FlightRadius);
                obj.AngularAccelerationRate = eval(this.AngularAccelerationRate);
                obj.AngularTolerance = eval(this.AngularTolerance);
                obj.Unknown2 = eval(this.Unknown2);
                obj.PipboyBipedObject = eval(this.PipboyBipedObject);
                obj.XPValue = eval(this.XPValue);
                obj.SeverableDebrisScale = eval(this.SeverableDebrisScale);
                obj.SeverableDebrisCount = eval(this.SeverableDebrisCount);
                obj.SeverableDecalCount = eval(this.SeverableDecalCount);
                obj.ExplodableDebrisScale = eval(this.ExplodableDebrisScale);
                obj.ExplodableDebrisCount = eval(this.ExplodableDebrisCount);
                obj.ExplodableDecalCount = eval(this.ExplodableDecalCount);
                obj.SeverableExplosion = eval(this.SeverableExplosion);
                obj.SeverableDebris = eval(this.SeverableDebris);
                obj.SeverableImpactDataSet = eval(this.SeverableImpactDataSet);
                obj.ExplodableExplosion = eval(this.ExplodableExplosion);
                obj.ExplodableDebris = eval(this.ExplodableDebris);
                obj.ExplodableImpactDataSet = eval(this.ExplodableImpactDataSet);
                obj.OnCrippleDebrisScale = eval(this.OnCrippleDebrisScale);
                obj.OnCrippleDebrisCount = eval(this.OnCrippleDebrisCount);
                obj.OnCrippleDecalCount = eval(this.OnCrippleDecalCount);
                obj.OnCrippleExplosion = eval(this.OnCrippleExplosion);
                obj.OnCrippleDebris = eval(this.OnCrippleDebris);
                obj.OnCrippleImpactDataSet = eval(this.OnCrippleImpactDataSet);
                obj.ExplodableSubsegmentExplosion = eval(this.ExplodableSubsegmentExplosion);
                obj.OrientationLimitsPitch = eval(this.OrientationLimitsPitch);
                obj.OrientationLimitsRoll = eval(this.OrientationLimitsRoll);
                obj.SkeletalModel = GenderedItem.TranslateHelper(
                    this.SkeletalModel,
                    eval,
                    (m, e) => m?.Translate(e));
                if (MovementTypeNames != null)
                {
                    obj.MovementTypeNames = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.MovementTypeNames.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (MovementTypeNames.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.MovementTypeNames.Specific = l;
                        foreach (var item in MovementTypeNames.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Voices = new GenderedItem<R>(
                    eval(this.Voices.Male),
                    eval(this.Voices.Female));
                obj.DefaultHairColors = GenderedItem.TranslateHelper(
                    this.DefaultHairColors,
                    eval);
                obj.NumberOfTintsInList = eval(this.NumberOfTintsInList);
                obj.FacegenMainClamp = eval(this.FacegenMainClamp);
                obj.FacegenFaceClamp = eval(this.FacegenFaceClamp);
                obj.AttackRace = eval(this.AttackRace);
                if (Attacks != null)
                {
                    obj.Attacks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Attack.Mask<R>?>>?>(eval(this.Attacks.Overall), Enumerable.Empty<MaskItemIndexed<R, Attack.Mask<R>?>>());
                    if (Attacks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Attack.Mask<R>?>>();
                        obj.Attacks.Specific = l;
                        foreach (var item in Attacks.Specific)
                        {
                            MaskItemIndexed<R, Attack.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Attack.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BodyData = GenderedItem.TranslateHelper(
                    this.BodyData,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.BodyPartData = eval(this.BodyPartData);
                obj.BehaviorGraph = GenderedItem.TranslateHelper(
                    this.BehaviorGraph,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.ImpactMaterialType = eval(this.ImpactMaterialType);
                obj.ImpactDataSet = eval(this.ImpactDataSet);
                obj.DispemberBloodArt = eval(this.DispemberBloodArt);
                obj.MeatCapTextureSet = eval(this.MeatCapTextureSet);
                obj.CollarTextureSet = eval(this.CollarTextureSet);
                obj.SoundOpenCorpse = eval(this.SoundOpenCorpse);
                obj.SoundCloseCorpse = eval(this.SoundCloseCorpse);
                if (BipedObjects != null)
                {
                    obj.BipedObjects = new MaskItem<R, IEnumerable<MaskItemIndexed<BipedObject, R, BipedObjectData.Mask<R>?>>?>(eval(this.BipedObjects.Overall), default);
                    if (BipedObjects.Specific != null)
                    {
                        List<MaskItemIndexed<BipedObject, R, BipedObjectData.Mask<R>?>> l = new List<MaskItemIndexed<BipedObject, R, BipedObjectData.Mask<R>?>>();
                        obj.BipedObjects.Specific = l;
                        foreach (var item in BipedObjects.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                if (MovementDataOverrides != null)
                {
                    obj.MovementDataOverrides = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MovementDataOverride.Mask<R>?>>?>(eval(this.MovementDataOverrides.Overall), Enumerable.Empty<MaskItemIndexed<R, MovementDataOverride.Mask<R>?>>());
                    if (MovementDataOverrides.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MovementDataOverride.Mask<R>?>>();
                        obj.MovementDataOverrides.Specific = l;
                        foreach (var item in MovementDataOverrides.Specific)
                        {
                            MaskItemIndexed<R, MovementDataOverride.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, MovementDataOverride.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.EquipmentFlags = eval(this.EquipmentFlags);
                if (EquipmentSlots != null)
                {
                    obj.EquipmentSlots = new MaskItem<R, IEnumerable<MaskItemIndexed<R, EquipmentSlot.Mask<R>?>>?>(eval(this.EquipmentSlots.Overall), Enumerable.Empty<MaskItemIndexed<R, EquipmentSlot.Mask<R>?>>());
                    if (EquipmentSlots.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, EquipmentSlot.Mask<R>?>>();
                        obj.EquipmentSlots.Specific = l;
                        foreach (var item in EquipmentSlots.Specific)
                        {
                            MaskItemIndexed<R, EquipmentSlot.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, EquipmentSlot.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.UnarmedWeapon = eval(this.UnarmedWeapon);
                obj.FaceFxPhonemes = this.FaceFxPhonemes == null ? null : new MaskItem<R, FaceFxPhonemes.Mask<R>?>(eval(this.FaceFxPhonemes.Overall), this.FaceFxPhonemes.Specific?.Translate(eval));
                obj.BaseMovementDefault = eval(this.BaseMovementDefault);
                obj.BaseMovementDefaultSwim = eval(this.BaseMovementDefaultSwim);
                obj.BaseMovementDefaultFly = eval(this.BaseMovementDefaultFly);
                obj.BaseMovementDefaultSneak = eval(this.BaseMovementDefaultSneak);
                obj.HeadData = GenderedItem.TranslateHelper(
                    this.HeadData,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.MorphRace = eval(this.MorphRace);
                obj.ArmorRace = eval(this.ArmorRace);
                obj.SubgraphTemplateRace = eval(this.SubgraphTemplateRace);
                obj.SubgraphAdditiveRace = eval(this.SubgraphAdditiveRace);
                if (Subgraphs != null)
                {
                    obj.Subgraphs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Subgraph.Mask<R>?>>?>(eval(this.Subgraphs.Overall), Enumerable.Empty<MaskItemIndexed<R, Subgraph.Mask<R>?>>());
                    if (Subgraphs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Subgraph.Mask<R>?>>();
                        obj.Subgraphs.Specific = l;
                        foreach (var item in Subgraphs.Specific)
                        {
                            MaskItemIndexed<R, Subgraph.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Subgraph.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.IdleChatterTimeMin = eval(this.IdleChatterTimeMin);
                obj.IdleChatterTimeMax = eval(this.IdleChatterTimeMax);
                if (MorphValues != null)
                {
                    obj.MorphValues = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MorphValue.Mask<R>?>>?>(eval(this.MorphValues.Overall), Enumerable.Empty<MaskItemIndexed<R, MorphValue.Mask<R>?>>());
                    if (MorphValues.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MorphValue.Mask<R>?>>();
                        obj.MorphValues.Specific = l;
                        foreach (var item in MorphValues.Specific)
                        {
                            MaskItemIndexed<R, MorphValue.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, MorphValue.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.MorphValuesLastIndex = eval(this.MorphValuesLastIndex);
                obj.HairColorLookupTexture = eval(this.HairColorLookupTexture);
                obj.HairColorExtendedLookupTexture = eval(this.HairColorExtendedLookupTexture);
                obj.DialogueQuest = eval(this.DialogueQuest);
                obj.BoneData = new GenderedItem<R>(
                    eval(this.BoneData.Male),
                    eval(this.BoneData.Female));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Race.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Race.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Race.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.AnimationSound ?? true)
                    {
                        sb.AppendItem(AnimationSound, "AnimationSound");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.ActorEffect?.Overall ?? true)
                        && ActorEffect is {} ActorEffectItem)
                    {
                        sb.AppendLine("ActorEffect =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorEffectItem.Overall);
                            if (ActorEffectItem.Specific != null)
                            {
                                foreach (var subItem in ActorEffectItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Skin ?? true)
                    {
                        sb.AppendItem(Skin, "Skin");
                    }
                    if (printMask?.BipedBodyTemplate?.Overall ?? true)
                    {
                        BipedBodyTemplate?.Print(sb);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        sb.AppendLine("Properties =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.AttachParentSlots?.Overall ?? true)
                        && AttachParentSlots is {} AttachParentSlotsItem)
                    {
                        sb.AppendLine("AttachParentSlots =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AttachParentSlotsItem.Overall);
                            if (AttachParentSlotsItem.Specific != null)
                            {
                                foreach (var subItem in AttachParentSlotsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((true))
                    {
                        sb.AppendLine($"Height => {Height}");
                    }
                    if ((true))
                    {
                        sb.AppendLine($"DefaultWeight => {DefaultWeight}");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.AccelerationRate ?? true)
                    {
                        sb.AppendItem(AccelerationRate, "AccelerationRate");
                    }
                    if (printMask?.DecelerationRate ?? true)
                    {
                        sb.AppendItem(DecelerationRate, "DecelerationRate");
                    }
                    if (printMask?.Size ?? true)
                    {
                        sb.AppendItem(Size, "Size");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.InjuredHealthPercent ?? true)
                    {
                        sb.AppendItem(InjuredHealthPercent, "InjuredHealthPercent");
                    }
                    if (printMask?.ShieldBipedObject ?? true)
                    {
                        sb.AppendItem(ShieldBipedObject, "ShieldBipedObject");
                    }
                    if (printMask?.BeardBipedObject ?? true)
                    {
                        sb.AppendItem(BeardBipedObject, "BeardBipedObject");
                    }
                    if (printMask?.BodyBipedObject ?? true)
                    {
                        sb.AppendItem(BodyBipedObject, "BodyBipedObject");
                    }
                    if (printMask?.AimAngleTolerance ?? true)
                    {
                        sb.AppendItem(AimAngleTolerance, "AimAngleTolerance");
                    }
                    if (printMask?.FlightRadius ?? true)
                    {
                        sb.AppendItem(FlightRadius, "FlightRadius");
                    }
                    if (printMask?.AngularAccelerationRate ?? true)
                    {
                        sb.AppendItem(AngularAccelerationRate, "AngularAccelerationRate");
                    }
                    if (printMask?.AngularTolerance ?? true)
                    {
                        sb.AppendItem(AngularTolerance, "AngularTolerance");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.PipboyBipedObject ?? true)
                    {
                        sb.AppendItem(PipboyBipedObject, "PipboyBipedObject");
                    }
                    if (printMask?.XPValue ?? true)
                    {
                        sb.AppendItem(XPValue, "XPValue");
                    }
                    if (printMask?.SeverableDebrisScale ?? true)
                    {
                        sb.AppendItem(SeverableDebrisScale, "SeverableDebrisScale");
                    }
                    if (printMask?.SeverableDebrisCount ?? true)
                    {
                        sb.AppendItem(SeverableDebrisCount, "SeverableDebrisCount");
                    }
                    if (printMask?.SeverableDecalCount ?? true)
                    {
                        sb.AppendItem(SeverableDecalCount, "SeverableDecalCount");
                    }
                    if (printMask?.ExplodableDebrisScale ?? true)
                    {
                        sb.AppendItem(ExplodableDebrisScale, "ExplodableDebrisScale");
                    }
                    if (printMask?.ExplodableDebrisCount ?? true)
                    {
                        sb.AppendItem(ExplodableDebrisCount, "ExplodableDebrisCount");
                    }
                    if (printMask?.ExplodableDecalCount ?? true)
                    {
                        sb.AppendItem(ExplodableDecalCount, "ExplodableDecalCount");
                    }
                    if (printMask?.SeverableExplosion ?? true)
                    {
                        sb.AppendItem(SeverableExplosion, "SeverableExplosion");
                    }
                    if (printMask?.SeverableDebris ?? true)
                    {
                        sb.AppendItem(SeverableDebris, "SeverableDebris");
                    }
                    if (printMask?.SeverableImpactDataSet ?? true)
                    {
                        sb.AppendItem(SeverableImpactDataSet, "SeverableImpactDataSet");
                    }
                    if (printMask?.ExplodableExplosion ?? true)
                    {
                        sb.AppendItem(ExplodableExplosion, "ExplodableExplosion");
                    }
                    if (printMask?.ExplodableDebris ?? true)
                    {
                        sb.AppendItem(ExplodableDebris, "ExplodableDebris");
                    }
                    if (printMask?.ExplodableImpactDataSet ?? true)
                    {
                        sb.AppendItem(ExplodableImpactDataSet, "ExplodableImpactDataSet");
                    }
                    if (printMask?.OnCrippleDebrisScale ?? true)
                    {
                        sb.AppendItem(OnCrippleDebrisScale, "OnCrippleDebrisScale");
                    }
                    if (printMask?.OnCrippleDebrisCount ?? true)
                    {
                        sb.AppendItem(OnCrippleDebrisCount, "OnCrippleDebrisCount");
                    }
                    if (printMask?.OnCrippleDecalCount ?? true)
                    {
                        sb.AppendItem(OnCrippleDecalCount, "OnCrippleDecalCount");
                    }
                    if (printMask?.OnCrippleExplosion ?? true)
                    {
                        sb.AppendItem(OnCrippleExplosion, "OnCrippleExplosion");
                    }
                    if (printMask?.OnCrippleDebris ?? true)
                    {
                        sb.AppendItem(OnCrippleDebris, "OnCrippleDebris");
                    }
                    if (printMask?.OnCrippleImpactDataSet ?? true)
                    {
                        sb.AppendItem(OnCrippleImpactDataSet, "OnCrippleImpactDataSet");
                    }
                    if (printMask?.ExplodableSubsegmentExplosion ?? true)
                    {
                        sb.AppendItem(ExplodableSubsegmentExplosion, "ExplodableSubsegmentExplosion");
                    }
                    if (printMask?.OrientationLimitsPitch ?? true)
                    {
                        sb.AppendItem(OrientationLimitsPitch, "OrientationLimitsPitch");
                    }
                    if (printMask?.OrientationLimitsRoll ?? true)
                    {
                        sb.AppendItem(OrientationLimitsRoll, "OrientationLimitsRoll");
                    }
                    if (SkeletalModel != null
                        && (printMask?.SkeletalModel?.Overall ?? true))
                    {
                        sb.AppendLine($"SkeletalModel => {SkeletalModel}");
                    }
                    if ((printMask?.MovementTypeNames?.Overall ?? true)
                        && MovementTypeNames is {} MovementTypeNamesItem)
                    {
                        sb.AppendLine("MovementTypeNames =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MovementTypeNamesItem.Overall);
                            if (MovementTypeNamesItem.Specific != null)
                            {
                                foreach (var subItem in MovementTypeNamesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((true))
                    {
                        sb.AppendLine($"Voices => {Voices}");
                    }
                    if (DefaultHairColors != null
                        && (printMask?.DefaultHairColors?.Overall ?? true))
                    {
                        sb.AppendLine($"DefaultHairColors => {DefaultHairColors}");
                    }
                    if (printMask?.NumberOfTintsInList ?? true)
                    {
                        sb.AppendItem(NumberOfTintsInList, "NumberOfTintsInList");
                    }
                    if (printMask?.FacegenMainClamp ?? true)
                    {
                        sb.AppendItem(FacegenMainClamp, "FacegenMainClamp");
                    }
                    if (printMask?.FacegenFaceClamp ?? true)
                    {
                        sb.AppendItem(FacegenFaceClamp, "FacegenFaceClamp");
                    }
                    if (printMask?.AttackRace ?? true)
                    {
                        sb.AppendItem(AttackRace, "AttackRace");
                    }
                    if ((printMask?.Attacks?.Overall ?? true)
                        && Attacks is {} AttacksItem)
                    {
                        sb.AppendLine("Attacks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AttacksItem.Overall);
                            if (AttacksItem.Specific != null)
                            {
                                foreach (var subItem in AttacksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((true))
                    {
                        sb.AppendLine($"BodyData => {BodyData}");
                    }
                    if (printMask?.BodyPartData ?? true)
                    {
                        sb.AppendItem(BodyPartData, "BodyPartData");
                    }
                    if ((true))
                    {
                        sb.AppendLine($"BehaviorGraph => {BehaviorGraph}");
                    }
                    if (printMask?.ImpactMaterialType ?? true)
                    {
                        sb.AppendItem(ImpactMaterialType, "ImpactMaterialType");
                    }
                    if (printMask?.ImpactDataSet ?? true)
                    {
                        sb.AppendItem(ImpactDataSet, "ImpactDataSet");
                    }
                    if (printMask?.DispemberBloodArt ?? true)
                    {
                        sb.AppendItem(DispemberBloodArt, "DispemberBloodArt");
                    }
                    if (printMask?.MeatCapTextureSet ?? true)
                    {
                        sb.AppendItem(MeatCapTextureSet, "MeatCapTextureSet");
                    }
                    if (printMask?.CollarTextureSet ?? true)
                    {
                        sb.AppendItem(CollarTextureSet, "CollarTextureSet");
                    }
                    if (printMask?.SoundOpenCorpse ?? true)
                    {
                        sb.AppendItem(SoundOpenCorpse, "SoundOpenCorpse");
                    }
                    if (printMask?.SoundCloseCorpse ?? true)
                    {
                        sb.AppendItem(SoundCloseCorpse, "SoundCloseCorpse");
                    }
                    if (printMask?.BipedObjects?.Overall ?? true)
                    {
                        sb.AppendLine("BipedObjects =>");
                        using (sb.Brace())
                        {
                            if (BipedObjects != null)
                            {
                                if (BipedObjects.Overall != null)
                                {
                                    sb.AppendLine(BipedObjects.Overall.ToString());
                                }
                                if (BipedObjects.Specific != null)
                                {
                                    foreach (var subItem in BipedObjects.Specific)
                                    {
                                        using (sb.Brace())
                                        {
                                            sb.AppendLine("Key => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Index);
                                                }
                                            }
                                            sb.AppendLine("]");
                                            sb.AppendLine("Value => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                subItem.Specific?.Print(sb);
                                            }
                                            sb.AppendLine("]");
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MovementDataOverrides?.Overall ?? true)
                        && MovementDataOverrides is {} MovementDataOverridesItem)
                    {
                        sb.AppendLine("MovementDataOverrides =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MovementDataOverridesItem.Overall);
                            if (MovementDataOverridesItem.Specific != null)
                            {
                                foreach (var subItem in MovementDataOverridesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.EquipmentFlags ?? true)
                    {
                        sb.AppendItem(EquipmentFlags, "EquipmentFlags");
                    }
                    if ((printMask?.EquipmentSlots?.Overall ?? true)
                        && EquipmentSlots is {} EquipmentSlotsItem)
                    {
                        sb.AppendLine("EquipmentSlots =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EquipmentSlotsItem.Overall);
                            if (EquipmentSlotsItem.Specific != null)
                            {
                                foreach (var subItem in EquipmentSlotsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.UnarmedWeapon ?? true)
                    {
                        sb.AppendItem(UnarmedWeapon, "UnarmedWeapon");
                    }
                    if (printMask?.FaceFxPhonemes?.Overall ?? true)
                    {
                        FaceFxPhonemes?.Print(sb);
                    }
                    if (printMask?.BaseMovementDefault ?? true)
                    {
                        sb.AppendItem(BaseMovementDefault, "BaseMovementDefault");
                    }
                    if (printMask?.BaseMovementDefaultSwim ?? true)
                    {
                        sb.AppendItem(BaseMovementDefaultSwim, "BaseMovementDefaultSwim");
                    }
                    if (printMask?.BaseMovementDefaultFly ?? true)
                    {
                        sb.AppendItem(BaseMovementDefaultFly, "BaseMovementDefaultFly");
                    }
                    if (printMask?.BaseMovementDefaultSneak ?? true)
                    {
                        sb.AppendItem(BaseMovementDefaultSneak, "BaseMovementDefaultSneak");
                    }
                    if (HeadData != null
                        && (printMask?.HeadData?.Overall ?? true))
                    {
                        sb.AppendLine($"HeadData => {HeadData}");
                    }
                    if (printMask?.MorphRace ?? true)
                    {
                        sb.AppendItem(MorphRace, "MorphRace");
                    }
                    if (printMask?.ArmorRace ?? true)
                    {
                        sb.AppendItem(ArmorRace, "ArmorRace");
                    }
                    if (printMask?.SubgraphTemplateRace ?? true)
                    {
                        sb.AppendItem(SubgraphTemplateRace, "SubgraphTemplateRace");
                    }
                    if (printMask?.SubgraphAdditiveRace ?? true)
                    {
                        sb.AppendItem(SubgraphAdditiveRace, "SubgraphAdditiveRace");
                    }
                    if ((printMask?.Subgraphs?.Overall ?? true)
                        && Subgraphs is {} SubgraphsItem)
                    {
                        sb.AppendLine("Subgraphs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SubgraphsItem.Overall);
                            if (SubgraphsItem.Specific != null)
                            {
                                foreach (var subItem in SubgraphsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.IdleChatterTimeMin ?? true)
                    {
                        sb.AppendItem(IdleChatterTimeMin, "IdleChatterTimeMin");
                    }
                    if (printMask?.IdleChatterTimeMax ?? true)
                    {
                        sb.AppendItem(IdleChatterTimeMax, "IdleChatterTimeMax");
                    }
                    if ((printMask?.MorphValues?.Overall ?? true)
                        && MorphValues is {} MorphValuesItem)
                    {
                        sb.AppendLine("MorphValues =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MorphValuesItem.Overall);
                            if (MorphValuesItem.Specific != null)
                            {
                                foreach (var subItem in MorphValuesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.MorphValuesLastIndex ?? true)
                    {
                        sb.AppendItem(MorphValuesLastIndex, "MorphValuesLastIndex");
                    }
                    if (printMask?.HairColorLookupTexture ?? true)
                    {
                        sb.AppendItem(HairColorLookupTexture, "HairColorLookupTexture");
                    }
                    if (printMask?.HairColorExtendedLookupTexture ?? true)
                    {
                        sb.AppendItem(HairColorExtendedLookupTexture, "HairColorExtendedLookupTexture");
                    }
                    if (printMask?.DialogueQuest ?? true)
                    {
                        sb.AppendItem(DialogueQuest, "DialogueQuest");
                    }
                    if ((true))
                    {
                        sb.AppendLine($"BoneData => {BoneData}");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? AnimationSound;
            public Exception? Name;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ActorEffect;
            public Exception? Skin;
            public MaskItem<Exception?, BipedBodyTemplate.ErrorMask?>? BipedBodyTemplate;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>? Properties;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AttachParentSlots;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Height;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? DefaultWeight;
            public Exception? Flags;
            public Exception? AccelerationRate;
            public Exception? DecelerationRate;
            public Exception? Size;
            public Exception? Unknown;
            public Exception? InjuredHealthPercent;
            public Exception? ShieldBipedObject;
            public Exception? BeardBipedObject;
            public Exception? BodyBipedObject;
            public Exception? AimAngleTolerance;
            public Exception? FlightRadius;
            public Exception? AngularAccelerationRate;
            public Exception? AngularTolerance;
            public Exception? Unknown2;
            public Exception? PipboyBipedObject;
            public Exception? XPValue;
            public Exception? SeverableDebrisScale;
            public Exception? SeverableDebrisCount;
            public Exception? SeverableDecalCount;
            public Exception? ExplodableDebrisScale;
            public Exception? ExplodableDebrisCount;
            public Exception? ExplodableDecalCount;
            public Exception? SeverableExplosion;
            public Exception? SeverableDebris;
            public Exception? SeverableImpactDataSet;
            public Exception? ExplodableExplosion;
            public Exception? ExplodableDebris;
            public Exception? ExplodableImpactDataSet;
            public Exception? OnCrippleDebrisScale;
            public Exception? OnCrippleDebrisCount;
            public Exception? OnCrippleDecalCount;
            public Exception? OnCrippleExplosion;
            public Exception? OnCrippleDebris;
            public Exception? OnCrippleImpactDataSet;
            public Exception? ExplodableSubsegmentExplosion;
            public Exception? OrientationLimitsPitch;
            public Exception? OrientationLimitsRoll;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? SkeletalModel;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? MovementTypeNames;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Voices;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? DefaultHairColors;
            public Exception? NumberOfTintsInList;
            public Exception? FacegenMainClamp;
            public Exception? FacegenFaceClamp;
            public Exception? AttackRace;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>? Attacks;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? BodyData;
            public Exception? BodyPartData;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? BehaviorGraph;
            public Exception? ImpactMaterialType;
            public Exception? ImpactDataSet;
            public Exception? DispemberBloodArt;
            public Exception? MeatCapTextureSet;
            public Exception? CollarTextureSet;
            public Exception? SoundOpenCorpse;
            public Exception? SoundCloseCorpse;
            public MaskItem<Exception?, IEnumerable<MaskItemIndexed<BipedObject, Exception?, BipedObjectData.ErrorMask?>>?>? BipedObjects;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MovementDataOverride.ErrorMask?>>?>? MovementDataOverrides;
            public Exception? EquipmentFlags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EquipmentSlot.ErrorMask?>>?>? EquipmentSlots;
            public Exception? UnarmedWeapon;
            public MaskItem<Exception?, FaceFxPhonemes.ErrorMask?>? FaceFxPhonemes;
            public Exception? BaseMovementDefault;
            public Exception? BaseMovementDefaultSwim;
            public Exception? BaseMovementDefaultFly;
            public Exception? BaseMovementDefaultSneak;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? HeadData;
            public Exception? MorphRace;
            public Exception? ArmorRace;
            public Exception? SubgraphTemplateRace;
            public Exception? SubgraphAdditiveRace;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Subgraph.ErrorMask?>>?>? Subgraphs;
            public Exception? IdleChatterTimeMin;
            public Exception? IdleChatterTimeMax;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphValue.ErrorMask?>>?>? MorphValues;
            public Exception? MorphValuesLastIndex;
            public Exception? HairColorLookupTexture;
            public Exception? HairColorExtendedLookupTexture;
            public Exception? DialogueQuest;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? BoneData;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.AnimationSound:
                        return AnimationSound;
                    case Race_FieldIndex.Name:
                        return Name;
                    case Race_FieldIndex.Description:
                        return Description;
                    case Race_FieldIndex.ActorEffect:
                        return ActorEffect;
                    case Race_FieldIndex.Skin:
                        return Skin;
                    case Race_FieldIndex.BipedBodyTemplate:
                        return BipedBodyTemplate;
                    case Race_FieldIndex.Keywords:
                        return Keywords;
                    case Race_FieldIndex.Properties:
                        return Properties;
                    case Race_FieldIndex.AttachParentSlots:
                        return AttachParentSlots;
                    case Race_FieldIndex.Height:
                        return Height;
                    case Race_FieldIndex.DefaultWeight:
                        return DefaultWeight;
                    case Race_FieldIndex.Flags:
                        return Flags;
                    case Race_FieldIndex.AccelerationRate:
                        return AccelerationRate;
                    case Race_FieldIndex.DecelerationRate:
                        return DecelerationRate;
                    case Race_FieldIndex.Size:
                        return Size;
                    case Race_FieldIndex.Unknown:
                        return Unknown;
                    case Race_FieldIndex.InjuredHealthPercent:
                        return InjuredHealthPercent;
                    case Race_FieldIndex.ShieldBipedObject:
                        return ShieldBipedObject;
                    case Race_FieldIndex.BeardBipedObject:
                        return BeardBipedObject;
                    case Race_FieldIndex.BodyBipedObject:
                        return BodyBipedObject;
                    case Race_FieldIndex.AimAngleTolerance:
                        return AimAngleTolerance;
                    case Race_FieldIndex.FlightRadius:
                        return FlightRadius;
                    case Race_FieldIndex.AngularAccelerationRate:
                        return AngularAccelerationRate;
                    case Race_FieldIndex.AngularTolerance:
                        return AngularTolerance;
                    case Race_FieldIndex.Unknown2:
                        return Unknown2;
                    case Race_FieldIndex.PipboyBipedObject:
                        return PipboyBipedObject;
                    case Race_FieldIndex.XPValue:
                        return XPValue;
                    case Race_FieldIndex.SeverableDebrisScale:
                        return SeverableDebrisScale;
                    case Race_FieldIndex.SeverableDebrisCount:
                        return SeverableDebrisCount;
                    case Race_FieldIndex.SeverableDecalCount:
                        return SeverableDecalCount;
                    case Race_FieldIndex.ExplodableDebrisScale:
                        return ExplodableDebrisScale;
                    case Race_FieldIndex.ExplodableDebrisCount:
                        return ExplodableDebrisCount;
                    case Race_FieldIndex.ExplodableDecalCount:
                        return ExplodableDecalCount;
                    case Race_FieldIndex.SeverableExplosion:
                        return SeverableExplosion;
                    case Race_FieldIndex.SeverableDebris:
                        return SeverableDebris;
                    case Race_FieldIndex.SeverableImpactDataSet:
                        return SeverableImpactDataSet;
                    case Race_FieldIndex.ExplodableExplosion:
                        return ExplodableExplosion;
                    case Race_FieldIndex.ExplodableDebris:
                        return ExplodableDebris;
                    case Race_FieldIndex.ExplodableImpactDataSet:
                        return ExplodableImpactDataSet;
                    case Race_FieldIndex.OnCrippleDebrisScale:
                        return OnCrippleDebrisScale;
                    case Race_FieldIndex.OnCrippleDebrisCount:
                        return OnCrippleDebrisCount;
                    case Race_FieldIndex.OnCrippleDecalCount:
                        return OnCrippleDecalCount;
                    case Race_FieldIndex.OnCrippleExplosion:
                        return OnCrippleExplosion;
                    case Race_FieldIndex.OnCrippleDebris:
                        return OnCrippleDebris;
                    case Race_FieldIndex.OnCrippleImpactDataSet:
                        return OnCrippleImpactDataSet;
                    case Race_FieldIndex.ExplodableSubsegmentExplosion:
                        return ExplodableSubsegmentExplosion;
                    case Race_FieldIndex.OrientationLimitsPitch:
                        return OrientationLimitsPitch;
                    case Race_FieldIndex.OrientationLimitsRoll:
                        return OrientationLimitsRoll;
                    case Race_FieldIndex.SkeletalModel:
                        return SkeletalModel;
                    case Race_FieldIndex.MovementTypeNames:
                        return MovementTypeNames;
                    case Race_FieldIndex.Voices:
                        return Voices;
                    case Race_FieldIndex.DefaultHairColors:
                        return DefaultHairColors;
                    case Race_FieldIndex.NumberOfTintsInList:
                        return NumberOfTintsInList;
                    case Race_FieldIndex.FacegenMainClamp:
                        return FacegenMainClamp;
                    case Race_FieldIndex.FacegenFaceClamp:
                        return FacegenFaceClamp;
                    case Race_FieldIndex.AttackRace:
                        return AttackRace;
                    case Race_FieldIndex.Attacks:
                        return Attacks;
                    case Race_FieldIndex.BodyData:
                        return BodyData;
                    case Race_FieldIndex.BodyPartData:
                        return BodyPartData;
                    case Race_FieldIndex.BehaviorGraph:
                        return BehaviorGraph;
                    case Race_FieldIndex.ImpactMaterialType:
                        return ImpactMaterialType;
                    case Race_FieldIndex.ImpactDataSet:
                        return ImpactDataSet;
                    case Race_FieldIndex.DispemberBloodArt:
                        return DispemberBloodArt;
                    case Race_FieldIndex.MeatCapTextureSet:
                        return MeatCapTextureSet;
                    case Race_FieldIndex.CollarTextureSet:
                        return CollarTextureSet;
                    case Race_FieldIndex.SoundOpenCorpse:
                        return SoundOpenCorpse;
                    case Race_FieldIndex.SoundCloseCorpse:
                        return SoundCloseCorpse;
                    case Race_FieldIndex.BipedObjects:
                        return BipedObjects;
                    case Race_FieldIndex.MovementDataOverrides:
                        return MovementDataOverrides;
                    case Race_FieldIndex.EquipmentFlags:
                        return EquipmentFlags;
                    case Race_FieldIndex.EquipmentSlots:
                        return EquipmentSlots;
                    case Race_FieldIndex.UnarmedWeapon:
                        return UnarmedWeapon;
                    case Race_FieldIndex.FaceFxPhonemes:
                        return FaceFxPhonemes;
                    case Race_FieldIndex.BaseMovementDefault:
                        return BaseMovementDefault;
                    case Race_FieldIndex.BaseMovementDefaultSwim:
                        return BaseMovementDefaultSwim;
                    case Race_FieldIndex.BaseMovementDefaultFly:
                        return BaseMovementDefaultFly;
                    case Race_FieldIndex.BaseMovementDefaultSneak:
                        return BaseMovementDefaultSneak;
                    case Race_FieldIndex.HeadData:
                        return HeadData;
                    case Race_FieldIndex.MorphRace:
                        return MorphRace;
                    case Race_FieldIndex.ArmorRace:
                        return ArmorRace;
                    case Race_FieldIndex.SubgraphTemplateRace:
                        return SubgraphTemplateRace;
                    case Race_FieldIndex.SubgraphAdditiveRace:
                        return SubgraphAdditiveRace;
                    case Race_FieldIndex.Subgraphs:
                        return Subgraphs;
                    case Race_FieldIndex.IdleChatterTimeMin:
                        return IdleChatterTimeMin;
                    case Race_FieldIndex.IdleChatterTimeMax:
                        return IdleChatterTimeMax;
                    case Race_FieldIndex.MorphValues:
                        return MorphValues;
                    case Race_FieldIndex.MorphValuesLastIndex:
                        return MorphValuesLastIndex;
                    case Race_FieldIndex.HairColorLookupTexture:
                        return HairColorLookupTexture;
                    case Race_FieldIndex.HairColorExtendedLookupTexture:
                        return HairColorExtendedLookupTexture;
                    case Race_FieldIndex.DialogueQuest:
                        return DialogueQuest;
                    case Race_FieldIndex.BoneData:
                        return BoneData;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.AnimationSound:
                        this.AnimationSound = ex;
                        break;
                    case Race_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Race_FieldIndex.ActorEffect:
                        this.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Skin:
                        this.Skin = ex;
                        break;
                    case Race_FieldIndex.BipedBodyTemplate:
                        this.BipedBodyTemplate = new MaskItem<Exception?, BipedBodyTemplate.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.AttachParentSlots:
                        this.AttachParentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Height:
                        this.Height = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultWeight:
                        this.DefaultWeight = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Race_FieldIndex.AccelerationRate:
                        this.AccelerationRate = ex;
                        break;
                    case Race_FieldIndex.DecelerationRate:
                        this.DecelerationRate = ex;
                        break;
                    case Race_FieldIndex.Size:
                        this.Size = ex;
                        break;
                    case Race_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Race_FieldIndex.InjuredHealthPercent:
                        this.InjuredHealthPercent = ex;
                        break;
                    case Race_FieldIndex.ShieldBipedObject:
                        this.ShieldBipedObject = ex;
                        break;
                    case Race_FieldIndex.BeardBipedObject:
                        this.BeardBipedObject = ex;
                        break;
                    case Race_FieldIndex.BodyBipedObject:
                        this.BodyBipedObject = ex;
                        break;
                    case Race_FieldIndex.AimAngleTolerance:
                        this.AimAngleTolerance = ex;
                        break;
                    case Race_FieldIndex.FlightRadius:
                        this.FlightRadius = ex;
                        break;
                    case Race_FieldIndex.AngularAccelerationRate:
                        this.AngularAccelerationRate = ex;
                        break;
                    case Race_FieldIndex.AngularTolerance:
                        this.AngularTolerance = ex;
                        break;
                    case Race_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case Race_FieldIndex.PipboyBipedObject:
                        this.PipboyBipedObject = ex;
                        break;
                    case Race_FieldIndex.XPValue:
                        this.XPValue = ex;
                        break;
                    case Race_FieldIndex.SeverableDebrisScale:
                        this.SeverableDebrisScale = ex;
                        break;
                    case Race_FieldIndex.SeverableDebrisCount:
                        this.SeverableDebrisCount = ex;
                        break;
                    case Race_FieldIndex.SeverableDecalCount:
                        this.SeverableDecalCount = ex;
                        break;
                    case Race_FieldIndex.ExplodableDebrisScale:
                        this.ExplodableDebrisScale = ex;
                        break;
                    case Race_FieldIndex.ExplodableDebrisCount:
                        this.ExplodableDebrisCount = ex;
                        break;
                    case Race_FieldIndex.ExplodableDecalCount:
                        this.ExplodableDecalCount = ex;
                        break;
                    case Race_FieldIndex.SeverableExplosion:
                        this.SeverableExplosion = ex;
                        break;
                    case Race_FieldIndex.SeverableDebris:
                        this.SeverableDebris = ex;
                        break;
                    case Race_FieldIndex.SeverableImpactDataSet:
                        this.SeverableImpactDataSet = ex;
                        break;
                    case Race_FieldIndex.ExplodableExplosion:
                        this.ExplodableExplosion = ex;
                        break;
                    case Race_FieldIndex.ExplodableDebris:
                        this.ExplodableDebris = ex;
                        break;
                    case Race_FieldIndex.ExplodableImpactDataSet:
                        this.ExplodableImpactDataSet = ex;
                        break;
                    case Race_FieldIndex.OnCrippleDebrisScale:
                        this.OnCrippleDebrisScale = ex;
                        break;
                    case Race_FieldIndex.OnCrippleDebrisCount:
                        this.OnCrippleDebrisCount = ex;
                        break;
                    case Race_FieldIndex.OnCrippleDecalCount:
                        this.OnCrippleDecalCount = ex;
                        break;
                    case Race_FieldIndex.OnCrippleExplosion:
                        this.OnCrippleExplosion = ex;
                        break;
                    case Race_FieldIndex.OnCrippleDebris:
                        this.OnCrippleDebris = ex;
                        break;
                    case Race_FieldIndex.OnCrippleImpactDataSet:
                        this.OnCrippleImpactDataSet = ex;
                        break;
                    case Race_FieldIndex.ExplodableSubsegmentExplosion:
                        this.ExplodableSubsegmentExplosion = ex;
                        break;
                    case Race_FieldIndex.OrientationLimitsPitch:
                        this.OrientationLimitsPitch = ex;
                        break;
                    case Race_FieldIndex.OrientationLimitsRoll:
                        this.OrientationLimitsRoll = ex;
                        break;
                    case Race_FieldIndex.SkeletalModel:
                        this.SkeletalModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.MovementTypeNames:
                        this.MovementTypeNames = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultHairColors:
                        this.DefaultHairColors = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.NumberOfTintsInList:
                        this.NumberOfTintsInList = ex;
                        break;
                    case Race_FieldIndex.FacegenMainClamp:
                        this.FacegenMainClamp = ex;
                        break;
                    case Race_FieldIndex.FacegenFaceClamp:
                        this.FacegenFaceClamp = ex;
                        break;
                    case Race_FieldIndex.AttackRace:
                        this.AttackRace = ex;
                        break;
                    case Race_FieldIndex.Attacks:
                        this.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyPartData:
                        this.BodyPartData = ex;
                        break;
                    case Race_FieldIndex.BehaviorGraph:
                        this.BehaviorGraph = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.ImpactMaterialType:
                        this.ImpactMaterialType = ex;
                        break;
                    case Race_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = ex;
                        break;
                    case Race_FieldIndex.DispemberBloodArt:
                        this.DispemberBloodArt = ex;
                        break;
                    case Race_FieldIndex.MeatCapTextureSet:
                        this.MeatCapTextureSet = ex;
                        break;
                    case Race_FieldIndex.CollarTextureSet:
                        this.CollarTextureSet = ex;
                        break;
                    case Race_FieldIndex.SoundOpenCorpse:
                        this.SoundOpenCorpse = ex;
                        break;
                    case Race_FieldIndex.SoundCloseCorpse:
                        this.SoundCloseCorpse = ex;
                        break;
                    case Race_FieldIndex.BipedObjects:
                        this.BipedObjects = new MaskItem<Exception?, IEnumerable<MaskItemIndexed<BipedObject, Exception?, BipedObjectData.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.MovementDataOverrides:
                        this.MovementDataOverrides = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MovementDataOverride.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.EquipmentFlags:
                        this.EquipmentFlags = ex;
                        break;
                    case Race_FieldIndex.EquipmentSlots:
                        this.EquipmentSlots = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EquipmentSlot.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.UnarmedWeapon:
                        this.UnarmedWeapon = ex;
                        break;
                    case Race_FieldIndex.FaceFxPhonemes:
                        this.FaceFxPhonemes = new MaskItem<Exception?, FaceFxPhonemes.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.BaseMovementDefault:
                        this.BaseMovementDefault = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSwim:
                        this.BaseMovementDefaultSwim = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultFly:
                        this.BaseMovementDefaultFly = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSneak:
                        this.BaseMovementDefaultSneak = ex;
                        break;
                    case Race_FieldIndex.HeadData:
                        this.HeadData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.MorphRace:
                        this.MorphRace = ex;
                        break;
                    case Race_FieldIndex.ArmorRace:
                        this.ArmorRace = ex;
                        break;
                    case Race_FieldIndex.SubgraphTemplateRace:
                        this.SubgraphTemplateRace = ex;
                        break;
                    case Race_FieldIndex.SubgraphAdditiveRace:
                        this.SubgraphAdditiveRace = ex;
                        break;
                    case Race_FieldIndex.Subgraphs:
                        this.Subgraphs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Subgraph.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.IdleChatterTimeMin:
                        this.IdleChatterTimeMin = ex;
                        break;
                    case Race_FieldIndex.IdleChatterTimeMax:
                        this.IdleChatterTimeMax = ex;
                        break;
                    case Race_FieldIndex.MorphValues:
                        this.MorphValues = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphValue.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.MorphValuesLastIndex:
                        this.MorphValuesLastIndex = ex;
                        break;
                    case Race_FieldIndex.HairColorLookupTexture:
                        this.HairColorLookupTexture = ex;
                        break;
                    case Race_FieldIndex.HairColorExtendedLookupTexture:
                        this.HairColorExtendedLookupTexture = ex;
                        break;
                    case Race_FieldIndex.DialogueQuest:
                        this.DialogueQuest = ex;
                        break;
                    case Race_FieldIndex.BoneData:
                        this.BoneData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.AnimationSound:
                        this.AnimationSound = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ActorEffect:
                        this.ActorEffect = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Skin:
                        this.Skin = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BipedBodyTemplate:
                        this.BipedBodyTemplate = (MaskItem<Exception?, BipedBodyTemplate.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.AttachParentSlots:
                        this.AttachParentSlots = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Height:
                        this.Height = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultWeight:
                        this.DefaultWeight = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AccelerationRate:
                        this.AccelerationRate = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DecelerationRate:
                        this.DecelerationRate = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Size:
                        this.Size = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Race_FieldIndex.InjuredHealthPercent:
                        this.InjuredHealthPercent = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ShieldBipedObject:
                        this.ShieldBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BeardBipedObject:
                        this.BeardBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BodyBipedObject:
                        this.BodyBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AimAngleTolerance:
                        this.AimAngleTolerance = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FlightRadius:
                        this.FlightRadius = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AngularAccelerationRate:
                        this.AngularAccelerationRate = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AngularTolerance:
                        this.AngularTolerance = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case Race_FieldIndex.PipboyBipedObject:
                        this.PipboyBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.XPValue:
                        this.XPValue = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SeverableDebrisScale:
                        this.SeverableDebrisScale = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SeverableDebrisCount:
                        this.SeverableDebrisCount = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SeverableDecalCount:
                        this.SeverableDecalCount = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableDebrisScale:
                        this.ExplodableDebrisScale = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableDebrisCount:
                        this.ExplodableDebrisCount = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableDecalCount:
                        this.ExplodableDecalCount = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SeverableExplosion:
                        this.SeverableExplosion = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SeverableDebris:
                        this.SeverableDebris = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SeverableImpactDataSet:
                        this.SeverableImpactDataSet = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableExplosion:
                        this.ExplodableExplosion = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableDebris:
                        this.ExplodableDebris = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableImpactDataSet:
                        this.ExplodableImpactDataSet = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OnCrippleDebrisScale:
                        this.OnCrippleDebrisScale = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OnCrippleDebrisCount:
                        this.OnCrippleDebrisCount = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OnCrippleDecalCount:
                        this.OnCrippleDecalCount = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OnCrippleExplosion:
                        this.OnCrippleExplosion = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OnCrippleDebris:
                        this.OnCrippleDebris = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OnCrippleImpactDataSet:
                        this.OnCrippleImpactDataSet = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ExplodableSubsegmentExplosion:
                        this.ExplodableSubsegmentExplosion = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OrientationLimitsPitch:
                        this.OrientationLimitsPitch = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OrientationLimitsRoll:
                        this.OrientationLimitsRoll = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SkeletalModel:
                        this.SkeletalModel = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.MovementTypeNames:
                        this.MovementTypeNames = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultHairColors:
                        this.DefaultHairColors = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.NumberOfTintsInList:
                        this.NumberOfTintsInList = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FacegenMainClamp:
                        this.FacegenMainClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FacegenFaceClamp:
                        this.FacegenFaceClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AttackRace:
                        this.AttackRace = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Attacks:
                        this.Attacks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.BodyPartData:
                        this.BodyPartData = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BehaviorGraph:
                        this.BehaviorGraph = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.ImpactMaterialType:
                        this.ImpactMaterialType = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DispemberBloodArt:
                        this.DispemberBloodArt = (Exception?)obj;
                        break;
                    case Race_FieldIndex.MeatCapTextureSet:
                        this.MeatCapTextureSet = (Exception?)obj;
                        break;
                    case Race_FieldIndex.CollarTextureSet:
                        this.CollarTextureSet = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SoundOpenCorpse:
                        this.SoundOpenCorpse = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SoundCloseCorpse:
                        this.SoundCloseCorpse = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BipedObjects:
                        this.BipedObjects = (MaskItem<Exception?, IEnumerable<MaskItemIndexed<BipedObject, Exception?, BipedObjectData.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.MovementDataOverrides:
                        this.MovementDataOverrides = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MovementDataOverride.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.EquipmentFlags:
                        this.EquipmentFlags = (Exception?)obj;
                        break;
                    case Race_FieldIndex.EquipmentSlots:
                        this.EquipmentSlots = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EquipmentSlot.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.UnarmedWeapon:
                        this.UnarmedWeapon = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FaceFxPhonemes:
                        this.FaceFxPhonemes = (MaskItem<Exception?, FaceFxPhonemes.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefault:
                        this.BaseMovementDefault = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSwim:
                        this.BaseMovementDefaultSwim = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultFly:
                        this.BaseMovementDefaultFly = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSneak:
                        this.BaseMovementDefaultSneak = (Exception?)obj;
                        break;
                    case Race_FieldIndex.HeadData:
                        this.HeadData = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.MorphRace:
                        this.MorphRace = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ArmorRace:
                        this.ArmorRace = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SubgraphTemplateRace:
                        this.SubgraphTemplateRace = (Exception?)obj;
                        break;
                    case Race_FieldIndex.SubgraphAdditiveRace:
                        this.SubgraphAdditiveRace = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Subgraphs:
                        this.Subgraphs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Subgraph.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.IdleChatterTimeMin:
                        this.IdleChatterTimeMin = (Exception?)obj;
                        break;
                    case Race_FieldIndex.IdleChatterTimeMax:
                        this.IdleChatterTimeMax = (Exception?)obj;
                        break;
                    case Race_FieldIndex.MorphValues:
                        this.MorphValues = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphValue.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.MorphValuesLastIndex:
                        this.MorphValuesLastIndex = (Exception?)obj;
                        break;
                    case Race_FieldIndex.HairColorLookupTexture:
                        this.HairColorLookupTexture = (Exception?)obj;
                        break;
                    case Race_FieldIndex.HairColorExtendedLookupTexture:
                        this.HairColorExtendedLookupTexture = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DialogueQuest:
                        this.DialogueQuest = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BoneData:
                        this.BoneData = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (AnimationSound != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (ActorEffect != null) return true;
                if (Skin != null) return true;
                if (BipedBodyTemplate != null) return true;
                if (Keywords != null) return true;
                if (Properties != null) return true;
                if (AttachParentSlots != null) return true;
                if (Height != null) return true;
                if (DefaultWeight != null) return true;
                if (Flags != null) return true;
                if (AccelerationRate != null) return true;
                if (DecelerationRate != null) return true;
                if (Size != null) return true;
                if (Unknown != null) return true;
                if (InjuredHealthPercent != null) return true;
                if (ShieldBipedObject != null) return true;
                if (BeardBipedObject != null) return true;
                if (BodyBipedObject != null) return true;
                if (AimAngleTolerance != null) return true;
                if (FlightRadius != null) return true;
                if (AngularAccelerationRate != null) return true;
                if (AngularTolerance != null) return true;
                if (Unknown2 != null) return true;
                if (PipboyBipedObject != null) return true;
                if (XPValue != null) return true;
                if (SeverableDebrisScale != null) return true;
                if (SeverableDebrisCount != null) return true;
                if (SeverableDecalCount != null) return true;
                if (ExplodableDebrisScale != null) return true;
                if (ExplodableDebrisCount != null) return true;
                if (ExplodableDecalCount != null) return true;
                if (SeverableExplosion != null) return true;
                if (SeverableDebris != null) return true;
                if (SeverableImpactDataSet != null) return true;
                if (ExplodableExplosion != null) return true;
                if (ExplodableDebris != null) return true;
                if (ExplodableImpactDataSet != null) return true;
                if (OnCrippleDebrisScale != null) return true;
                if (OnCrippleDebrisCount != null) return true;
                if (OnCrippleDecalCount != null) return true;
                if (OnCrippleExplosion != null) return true;
                if (OnCrippleDebris != null) return true;
                if (OnCrippleImpactDataSet != null) return true;
                if (ExplodableSubsegmentExplosion != null) return true;
                if (OrientationLimitsPitch != null) return true;
                if (OrientationLimitsRoll != null) return true;
                if (SkeletalModel != null) return true;
                if (MovementTypeNames != null) return true;
                if (Voices != null) return true;
                if (DefaultHairColors != null) return true;
                if (NumberOfTintsInList != null) return true;
                if (FacegenMainClamp != null) return true;
                if (FacegenFaceClamp != null) return true;
                if (AttackRace != null) return true;
                if (Attacks != null) return true;
                if (BodyData != null) return true;
                if (BodyPartData != null) return true;
                if (BehaviorGraph != null) return true;
                if (ImpactMaterialType != null) return true;
                if (ImpactDataSet != null) return true;
                if (DispemberBloodArt != null) return true;
                if (MeatCapTextureSet != null) return true;
                if (CollarTextureSet != null) return true;
                if (SoundOpenCorpse != null) return true;
                if (SoundCloseCorpse != null) return true;
                if (BipedObjects != null) return true;
                if (MovementDataOverrides != null) return true;
                if (EquipmentFlags != null) return true;
                if (EquipmentSlots != null) return true;
                if (UnarmedWeapon != null) return true;
                if (FaceFxPhonemes != null) return true;
                if (BaseMovementDefault != null) return true;
                if (BaseMovementDefaultSwim != null) return true;
                if (BaseMovementDefaultFly != null) return true;
                if (BaseMovementDefaultSneak != null) return true;
                if (HeadData != null) return true;
                if (MorphRace != null) return true;
                if (ArmorRace != null) return true;
                if (SubgraphTemplateRace != null) return true;
                if (SubgraphAdditiveRace != null) return true;
                if (Subgraphs != null) return true;
                if (IdleChatterTimeMin != null) return true;
                if (IdleChatterTimeMax != null) return true;
                if (MorphValues != null) return true;
                if (MorphValuesLastIndex != null) return true;
                if (HairColorLookupTexture != null) return true;
                if (HairColorExtendedLookupTexture != null) return true;
                if (DialogueQuest != null) return true;
                if (BoneData != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(AnimationSound, "AnimationSound");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                if (ActorEffect is {} ActorEffectItem)
                {
                    sb.AppendLine("ActorEffect =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorEffectItem.Overall);
                        if (ActorEffectItem.Specific != null)
                        {
                            foreach (var subItem in ActorEffectItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Skin, "Skin");
                }
                BipedBodyTemplate?.Print(sb);
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Properties is {} PropertiesItem)
                {
                    sb.AppendLine("Properties =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (AttachParentSlots is {} AttachParentSlotsItem)
                {
                    sb.AppendLine("AttachParentSlots =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AttachParentSlotsItem.Overall);
                        if (AttachParentSlotsItem.Specific != null)
                        {
                            foreach (var subItem in AttachParentSlotsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendLine($"Height => {Height}");
                }
                {
                    sb.AppendLine($"DefaultWeight => {DefaultWeight}");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(AccelerationRate, "AccelerationRate");
                }
                {
                    sb.AppendItem(DecelerationRate, "DecelerationRate");
                }
                {
                    sb.AppendItem(Size, "Size");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(InjuredHealthPercent, "InjuredHealthPercent");
                }
                {
                    sb.AppendItem(ShieldBipedObject, "ShieldBipedObject");
                }
                {
                    sb.AppendItem(BeardBipedObject, "BeardBipedObject");
                }
                {
                    sb.AppendItem(BodyBipedObject, "BodyBipedObject");
                }
                {
                    sb.AppendItem(AimAngleTolerance, "AimAngleTolerance");
                }
                {
                    sb.AppendItem(FlightRadius, "FlightRadius");
                }
                {
                    sb.AppendItem(AngularAccelerationRate, "AngularAccelerationRate");
                }
                {
                    sb.AppendItem(AngularTolerance, "AngularTolerance");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
                {
                    sb.AppendItem(PipboyBipedObject, "PipboyBipedObject");
                }
                {
                    sb.AppendItem(XPValue, "XPValue");
                }
                {
                    sb.AppendItem(SeverableDebrisScale, "SeverableDebrisScale");
                }
                {
                    sb.AppendItem(SeverableDebrisCount, "SeverableDebrisCount");
                }
                {
                    sb.AppendItem(SeverableDecalCount, "SeverableDecalCount");
                }
                {
                    sb.AppendItem(ExplodableDebrisScale, "ExplodableDebrisScale");
                }
                {
                    sb.AppendItem(ExplodableDebrisCount, "ExplodableDebrisCount");
                }
                {
                    sb.AppendItem(ExplodableDecalCount, "ExplodableDecalCount");
                }
                {
                    sb.AppendItem(SeverableExplosion, "SeverableExplosion");
                }
                {
                    sb.AppendItem(SeverableDebris, "SeverableDebris");
                }
                {
                    sb.AppendItem(SeverableImpactDataSet, "SeverableImpactDataSet");
                }
                {
                    sb.AppendItem(ExplodableExplosion, "ExplodableExplosion");
                }
                {
                    sb.AppendItem(ExplodableDebris, "ExplodableDebris");
                }
                {
                    sb.AppendItem(ExplodableImpactDataSet, "ExplodableImpactDataSet");
                }
                {
                    sb.AppendItem(OnCrippleDebrisScale, "OnCrippleDebrisScale");
                }
                {
                    sb.AppendItem(OnCrippleDebrisCount, "OnCrippleDebrisCount");
                }
                {
                    sb.AppendItem(OnCrippleDecalCount, "OnCrippleDecalCount");
                }
                {
                    sb.AppendItem(OnCrippleExplosion, "OnCrippleExplosion");
                }
                {
                    sb.AppendItem(OnCrippleDebris, "OnCrippleDebris");
                }
                {
                    sb.AppendItem(OnCrippleImpactDataSet, "OnCrippleImpactDataSet");
                }
                {
                    sb.AppendItem(ExplodableSubsegmentExplosion, "ExplodableSubsegmentExplosion");
                }
                {
                    sb.AppendItem(OrientationLimitsPitch, "OrientationLimitsPitch");
                }
                {
                    sb.AppendItem(OrientationLimitsRoll, "OrientationLimitsRoll");
                }
                if (SkeletalModel != null)
                {
                    sb.AppendLine($"SkeletalModel => {SkeletalModel}");
                }
                if (MovementTypeNames is {} MovementTypeNamesItem)
                {
                    sb.AppendLine("MovementTypeNames =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MovementTypeNamesItem.Overall);
                        if (MovementTypeNamesItem.Specific != null)
                        {
                            foreach (var subItem in MovementTypeNamesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendLine($"Voices => {Voices}");
                }
                if (DefaultHairColors != null)
                {
                    sb.AppendLine($"DefaultHairColors => {DefaultHairColors}");
                }
                {
                    sb.AppendItem(NumberOfTintsInList, "NumberOfTintsInList");
                }
                {
                    sb.AppendItem(FacegenMainClamp, "FacegenMainClamp");
                }
                {
                    sb.AppendItem(FacegenFaceClamp, "FacegenFaceClamp");
                }
                {
                    sb.AppendItem(AttackRace, "AttackRace");
                }
                if (Attacks is {} AttacksItem)
                {
                    sb.AppendLine("Attacks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AttacksItem.Overall);
                        if (AttacksItem.Specific != null)
                        {
                            foreach (var subItem in AttacksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendLine($"BodyData => {BodyData}");
                }
                {
                    sb.AppendItem(BodyPartData, "BodyPartData");
                }
                {
                    sb.AppendLine($"BehaviorGraph => {BehaviorGraph}");
                }
                {
                    sb.AppendItem(ImpactMaterialType, "ImpactMaterialType");
                }
                {
                    sb.AppendItem(ImpactDataSet, "ImpactDataSet");
                }
                {
                    sb.AppendItem(DispemberBloodArt, "DispemberBloodArt");
                }
                {
                    sb.AppendItem(MeatCapTextureSet, "MeatCapTextureSet");
                }
                {
                    sb.AppendItem(CollarTextureSet, "CollarTextureSet");
                }
                {
                    sb.AppendItem(SoundOpenCorpse, "SoundOpenCorpse");
                }
                {
                    sb.AppendItem(SoundCloseCorpse, "SoundCloseCorpse");
                }
                {
                    sb.AppendLine("BipedObjects =>");
                    using (sb.Brace())
                    {
                        if (BipedObjects != null)
                        {
                            if (BipedObjects.Overall != null)
                            {
                                sb.AppendLine(BipedObjects.Overall.ToString());
                            }
                            if (BipedObjects.Specific != null)
                            {
                                foreach (var subItem in BipedObjects.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        sb.AppendLine("Key => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Index);
                                            }
                                        }
                                        sb.AppendLine("]");
                                        sb.AppendLine("Value => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            subItem.Specific?.Print(sb);
                                        }
                                        sb.AppendLine("]");
                                    }
                                }
                            }
                        }
                    }
                }
                if (MovementDataOverrides is {} MovementDataOverridesItem)
                {
                    sb.AppendLine("MovementDataOverrides =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MovementDataOverridesItem.Overall);
                        if (MovementDataOverridesItem.Specific != null)
                        {
                            foreach (var subItem in MovementDataOverridesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(EquipmentFlags, "EquipmentFlags");
                }
                if (EquipmentSlots is {} EquipmentSlotsItem)
                {
                    sb.AppendLine("EquipmentSlots =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EquipmentSlotsItem.Overall);
                        if (EquipmentSlotsItem.Specific != null)
                        {
                            foreach (var subItem in EquipmentSlotsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(UnarmedWeapon, "UnarmedWeapon");
                }
                FaceFxPhonemes?.Print(sb);
                {
                    sb.AppendItem(BaseMovementDefault, "BaseMovementDefault");
                }
                {
                    sb.AppendItem(BaseMovementDefaultSwim, "BaseMovementDefaultSwim");
                }
                {
                    sb.AppendItem(BaseMovementDefaultFly, "BaseMovementDefaultFly");
                }
                {
                    sb.AppendItem(BaseMovementDefaultSneak, "BaseMovementDefaultSneak");
                }
                if (HeadData != null)
                {
                    sb.AppendLine($"HeadData => {HeadData}");
                }
                {
                    sb.AppendItem(MorphRace, "MorphRace");
                }
                {
                    sb.AppendItem(ArmorRace, "ArmorRace");
                }
                {
                    sb.AppendItem(SubgraphTemplateRace, "SubgraphTemplateRace");
                }
                {
                    sb.AppendItem(SubgraphAdditiveRace, "SubgraphAdditiveRace");
                }
                if (Subgraphs is {} SubgraphsItem)
                {
                    sb.AppendLine("Subgraphs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SubgraphsItem.Overall);
                        if (SubgraphsItem.Specific != null)
                        {
                            foreach (var subItem in SubgraphsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(IdleChatterTimeMin, "IdleChatterTimeMin");
                }
                {
                    sb.AppendItem(IdleChatterTimeMax, "IdleChatterTimeMax");
                }
                if (MorphValues is {} MorphValuesItem)
                {
                    sb.AppendLine("MorphValues =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MorphValuesItem.Overall);
                        if (MorphValuesItem.Specific != null)
                        {
                            foreach (var subItem in MorphValuesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(MorphValuesLastIndex, "MorphValuesLastIndex");
                }
                {
                    sb.AppendItem(HairColorLookupTexture, "HairColorLookupTexture");
                }
                {
                    sb.AppendItem(HairColorExtendedLookupTexture, "HairColorExtendedLookupTexture");
                }
                {
                    sb.AppendItem(DialogueQuest, "DialogueQuest");
                }
                {
                    sb.AppendLine($"BoneData => {BoneData}");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.AnimationSound = this.AnimationSound.Combine(rhs.AnimationSound);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ActorEffect?.Overall, rhs.ActorEffect?.Overall), Noggog.ExceptionExt.Combine(this.ActorEffect?.Specific, rhs.ActorEffect?.Specific));
                ret.Skin = this.Skin.Combine(rhs.Skin);
                ret.BipedBodyTemplate = this.BipedBodyTemplate.Combine(rhs.BipedBodyTemplate, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), Noggog.ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                ret.AttachParentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.AttachParentSlots?.Overall, rhs.AttachParentSlots?.Overall), Noggog.ExceptionExt.Combine(this.AttachParentSlots?.Specific, rhs.AttachParentSlots?.Specific));
                ret.Height = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.Height?.Overall, rhs.Height?.Overall), GenderedItem.Combine(this.Height?.Specific, rhs.Height?.Specific));
                ret.DefaultWeight = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.DefaultWeight?.Overall, rhs.DefaultWeight?.Overall), GenderedItem.Combine(this.DefaultWeight?.Specific, rhs.DefaultWeight?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.AccelerationRate = this.AccelerationRate.Combine(rhs.AccelerationRate);
                ret.DecelerationRate = this.DecelerationRate.Combine(rhs.DecelerationRate);
                ret.Size = this.Size.Combine(rhs.Size);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.InjuredHealthPercent = this.InjuredHealthPercent.Combine(rhs.InjuredHealthPercent);
                ret.ShieldBipedObject = this.ShieldBipedObject.Combine(rhs.ShieldBipedObject);
                ret.BeardBipedObject = this.BeardBipedObject.Combine(rhs.BeardBipedObject);
                ret.BodyBipedObject = this.BodyBipedObject.Combine(rhs.BodyBipedObject);
                ret.AimAngleTolerance = this.AimAngleTolerance.Combine(rhs.AimAngleTolerance);
                ret.FlightRadius = this.FlightRadius.Combine(rhs.FlightRadius);
                ret.AngularAccelerationRate = this.AngularAccelerationRate.Combine(rhs.AngularAccelerationRate);
                ret.AngularTolerance = this.AngularTolerance.Combine(rhs.AngularTolerance);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.PipboyBipedObject = this.PipboyBipedObject.Combine(rhs.PipboyBipedObject);
                ret.XPValue = this.XPValue.Combine(rhs.XPValue);
                ret.SeverableDebrisScale = this.SeverableDebrisScale.Combine(rhs.SeverableDebrisScale);
                ret.SeverableDebrisCount = this.SeverableDebrisCount.Combine(rhs.SeverableDebrisCount);
                ret.SeverableDecalCount = this.SeverableDecalCount.Combine(rhs.SeverableDecalCount);
                ret.ExplodableDebrisScale = this.ExplodableDebrisScale.Combine(rhs.ExplodableDebrisScale);
                ret.ExplodableDebrisCount = this.ExplodableDebrisCount.Combine(rhs.ExplodableDebrisCount);
                ret.ExplodableDecalCount = this.ExplodableDecalCount.Combine(rhs.ExplodableDecalCount);
                ret.SeverableExplosion = this.SeverableExplosion.Combine(rhs.SeverableExplosion);
                ret.SeverableDebris = this.SeverableDebris.Combine(rhs.SeverableDebris);
                ret.SeverableImpactDataSet = this.SeverableImpactDataSet.Combine(rhs.SeverableImpactDataSet);
                ret.ExplodableExplosion = this.ExplodableExplosion.Combine(rhs.ExplodableExplosion);
                ret.ExplodableDebris = this.ExplodableDebris.Combine(rhs.ExplodableDebris);
                ret.ExplodableImpactDataSet = this.ExplodableImpactDataSet.Combine(rhs.ExplodableImpactDataSet);
                ret.OnCrippleDebrisScale = this.OnCrippleDebrisScale.Combine(rhs.OnCrippleDebrisScale);
                ret.OnCrippleDebrisCount = this.OnCrippleDebrisCount.Combine(rhs.OnCrippleDebrisCount);
                ret.OnCrippleDecalCount = this.OnCrippleDecalCount.Combine(rhs.OnCrippleDecalCount);
                ret.OnCrippleExplosion = this.OnCrippleExplosion.Combine(rhs.OnCrippleExplosion);
                ret.OnCrippleDebris = this.OnCrippleDebris.Combine(rhs.OnCrippleDebris);
                ret.OnCrippleImpactDataSet = this.OnCrippleImpactDataSet.Combine(rhs.OnCrippleImpactDataSet);
                ret.ExplodableSubsegmentExplosion = this.ExplodableSubsegmentExplosion.Combine(rhs.ExplodableSubsegmentExplosion);
                ret.OrientationLimitsPitch = this.OrientationLimitsPitch.Combine(rhs.OrientationLimitsPitch);
                ret.OrientationLimitsRoll = this.OrientationLimitsRoll.Combine(rhs.OrientationLimitsRoll);
                ret.SkeletalModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.SkeletalModel?.Overall, rhs.SkeletalModel?.Overall), GenderedItem.Combine(this.SkeletalModel?.Specific, rhs.SkeletalModel?.Specific));
                ret.MovementTypeNames = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.MovementTypeNames?.Overall, rhs.MovementTypeNames?.Overall), Noggog.ExceptionExt.Combine(this.MovementTypeNames?.Specific, rhs.MovementTypeNames?.Specific));
                ret.Voices = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.Voices?.Overall, rhs.Voices?.Overall), GenderedItem.Combine(this.Voices?.Specific, rhs.Voices?.Specific));
                ret.DefaultHairColors = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.DefaultHairColors?.Overall, rhs.DefaultHairColors?.Overall), GenderedItem.Combine(this.DefaultHairColors?.Specific, rhs.DefaultHairColors?.Specific));
                ret.NumberOfTintsInList = this.NumberOfTintsInList.Combine(rhs.NumberOfTintsInList);
                ret.FacegenMainClamp = this.FacegenMainClamp.Combine(rhs.FacegenMainClamp);
                ret.FacegenFaceClamp = this.FacegenFaceClamp.Combine(rhs.FacegenFaceClamp);
                ret.AttackRace = this.AttackRace.Combine(rhs.AttackRace);
                ret.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Attacks?.Overall, rhs.Attacks?.Overall), Noggog.ExceptionExt.Combine(this.Attacks?.Specific, rhs.Attacks?.Specific));
                ret.BodyData = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.BodyData?.Overall, rhs.BodyData?.Overall), GenderedItem.Combine(this.BodyData?.Specific, rhs.BodyData?.Specific));
                ret.BodyPartData = this.BodyPartData.Combine(rhs.BodyPartData);
                ret.BehaviorGraph = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.BehaviorGraph?.Overall, rhs.BehaviorGraph?.Overall), GenderedItem.Combine(this.BehaviorGraph?.Specific, rhs.BehaviorGraph?.Specific));
                ret.ImpactMaterialType = this.ImpactMaterialType.Combine(rhs.ImpactMaterialType);
                ret.ImpactDataSet = this.ImpactDataSet.Combine(rhs.ImpactDataSet);
                ret.DispemberBloodArt = this.DispemberBloodArt.Combine(rhs.DispemberBloodArt);
                ret.MeatCapTextureSet = this.MeatCapTextureSet.Combine(rhs.MeatCapTextureSet);
                ret.CollarTextureSet = this.CollarTextureSet.Combine(rhs.CollarTextureSet);
                ret.SoundOpenCorpse = this.SoundOpenCorpse.Combine(rhs.SoundOpenCorpse);
                ret.SoundCloseCorpse = this.SoundCloseCorpse.Combine(rhs.SoundCloseCorpse);
                ret.BipedObjects = new MaskItem<Exception?, IEnumerable<MaskItemIndexed<BipedObject, Exception?, BipedObjectData.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.BipedObjects?.Overall, rhs.BipedObjects?.Overall), Noggog.ExceptionExt.Combine(this.BipedObjects?.Specific, rhs.BipedObjects?.Specific));
                ret.MovementDataOverrides = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MovementDataOverride.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MovementDataOverrides?.Overall, rhs.MovementDataOverrides?.Overall), Noggog.ExceptionExt.Combine(this.MovementDataOverrides?.Specific, rhs.MovementDataOverrides?.Specific));
                ret.EquipmentFlags = this.EquipmentFlags.Combine(rhs.EquipmentFlags);
                ret.EquipmentSlots = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EquipmentSlot.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.EquipmentSlots?.Overall, rhs.EquipmentSlots?.Overall), Noggog.ExceptionExt.Combine(this.EquipmentSlots?.Specific, rhs.EquipmentSlots?.Specific));
                ret.UnarmedWeapon = this.UnarmedWeapon.Combine(rhs.UnarmedWeapon);
                ret.FaceFxPhonemes = this.FaceFxPhonemes.Combine(rhs.FaceFxPhonemes, (l, r) => l.Combine(r));
                ret.BaseMovementDefault = this.BaseMovementDefault.Combine(rhs.BaseMovementDefault);
                ret.BaseMovementDefaultSwim = this.BaseMovementDefaultSwim.Combine(rhs.BaseMovementDefaultSwim);
                ret.BaseMovementDefaultFly = this.BaseMovementDefaultFly.Combine(rhs.BaseMovementDefaultFly);
                ret.BaseMovementDefaultSneak = this.BaseMovementDefaultSneak.Combine(rhs.BaseMovementDefaultSneak);
                ret.HeadData = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.HeadData?.Overall, rhs.HeadData?.Overall), GenderedItem.Combine(this.HeadData?.Specific, rhs.HeadData?.Specific));
                ret.MorphRace = this.MorphRace.Combine(rhs.MorphRace);
                ret.ArmorRace = this.ArmorRace.Combine(rhs.ArmorRace);
                ret.SubgraphTemplateRace = this.SubgraphTemplateRace.Combine(rhs.SubgraphTemplateRace);
                ret.SubgraphAdditiveRace = this.SubgraphAdditiveRace.Combine(rhs.SubgraphAdditiveRace);
                ret.Subgraphs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Subgraph.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Subgraphs?.Overall, rhs.Subgraphs?.Overall), Noggog.ExceptionExt.Combine(this.Subgraphs?.Specific, rhs.Subgraphs?.Specific));
                ret.IdleChatterTimeMin = this.IdleChatterTimeMin.Combine(rhs.IdleChatterTimeMin);
                ret.IdleChatterTimeMax = this.IdleChatterTimeMax.Combine(rhs.IdleChatterTimeMax);
                ret.MorphValues = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphValue.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MorphValues?.Overall, rhs.MorphValues?.Overall), Noggog.ExceptionExt.Combine(this.MorphValues?.Specific, rhs.MorphValues?.Specific));
                ret.MorphValuesLastIndex = this.MorphValuesLastIndex.Combine(rhs.MorphValuesLastIndex);
                ret.HairColorLookupTexture = this.HairColorLookupTexture.Combine(rhs.HairColorLookupTexture);
                ret.HairColorExtendedLookupTexture = this.HairColorExtendedLookupTexture.Combine(rhs.HairColorExtendedLookupTexture);
                ret.DialogueQuest = this.DialogueQuest.Combine(rhs.DialogueQuest);
                ret.BoneData = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.BoneData?.Overall, rhs.BoneData?.Overall), GenderedItem.Combine(this.BoneData?.Specific, rhs.BoneData?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool AnimationSound;
            public bool Name;
            public bool Description;
            public bool ActorEffect;
            public bool Skin;
            public BipedBodyTemplate.TranslationMask? BipedBodyTemplate;
            public bool Keywords;
            public ObjectProperty.TranslationMask? Properties;
            public bool AttachParentSlots;
            public GenderedItem<bool>? Height;
            public GenderedItem<RaceWeight.TranslationMask>? DefaultWeight;
            public bool Flags;
            public bool AccelerationRate;
            public bool DecelerationRate;
            public bool Size;
            public bool Unknown;
            public bool InjuredHealthPercent;
            public bool ShieldBipedObject;
            public bool BeardBipedObject;
            public bool BodyBipedObject;
            public bool AimAngleTolerance;
            public bool FlightRadius;
            public bool AngularAccelerationRate;
            public bool AngularTolerance;
            public bool Unknown2;
            public bool PipboyBipedObject;
            public bool XPValue;
            public bool SeverableDebrisScale;
            public bool SeverableDebrisCount;
            public bool SeverableDecalCount;
            public bool ExplodableDebrisScale;
            public bool ExplodableDebrisCount;
            public bool ExplodableDecalCount;
            public bool SeverableExplosion;
            public bool SeverableDebris;
            public bool SeverableImpactDataSet;
            public bool ExplodableExplosion;
            public bool ExplodableDebris;
            public bool ExplodableImpactDataSet;
            public bool OnCrippleDebrisScale;
            public bool OnCrippleDebrisCount;
            public bool OnCrippleDecalCount;
            public bool OnCrippleExplosion;
            public bool OnCrippleDebris;
            public bool OnCrippleImpactDataSet;
            public bool ExplodableSubsegmentExplosion;
            public bool OrientationLimitsPitch;
            public bool OrientationLimitsRoll;
            public GenderedItem<SimpleModel.TranslationMask>? SkeletalModel;
            public bool MovementTypeNames;
            public GenderedItem<bool>? Voices;
            public GenderedItem<bool>? DefaultHairColors;
            public bool NumberOfTintsInList;
            public bool FacegenMainClamp;
            public bool FacegenFaceClamp;
            public bool AttackRace;
            public Attack.TranslationMask? Attacks;
            public GenderedItem<BodyData.TranslationMask>? BodyData;
            public bool BodyPartData;
            public GenderedItem<Model.TranslationMask>? BehaviorGraph;
            public bool ImpactMaterialType;
            public bool ImpactDataSet;
            public bool DispemberBloodArt;
            public bool MeatCapTextureSet;
            public bool CollarTextureSet;
            public bool SoundOpenCorpse;
            public bool SoundCloseCorpse;
            public BipedObjectData.TranslationMask? BipedObjects;
            public MovementDataOverride.TranslationMask? MovementDataOverrides;
            public bool EquipmentFlags;
            public EquipmentSlot.TranslationMask? EquipmentSlots;
            public bool UnarmedWeapon;
            public FaceFxPhonemes.TranslationMask? FaceFxPhonemes;
            public bool BaseMovementDefault;
            public bool BaseMovementDefaultSwim;
            public bool BaseMovementDefaultFly;
            public bool BaseMovementDefaultSneak;
            public GenderedItem<HeadData.TranslationMask>? HeadData;
            public bool MorphRace;
            public bool ArmorRace;
            public bool SubgraphTemplateRace;
            public bool SubgraphAdditiveRace;
            public Subgraph.TranslationMask? Subgraphs;
            public bool IdleChatterTimeMin;
            public bool IdleChatterTimeMax;
            public MorphValue.TranslationMask? MorphValues;
            public bool MorphValuesLastIndex;
            public bool HairColorLookupTexture;
            public bool HairColorExtendedLookupTexture;
            public bool DialogueQuest;
            public GenderedItem<bool>? BoneData;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.AnimationSound = defaultOn;
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.ActorEffect = defaultOn;
                this.Skin = defaultOn;
                this.Keywords = defaultOn;
                this.AttachParentSlots = defaultOn;
                this.Flags = defaultOn;
                this.AccelerationRate = defaultOn;
                this.DecelerationRate = defaultOn;
                this.Size = defaultOn;
                this.Unknown = defaultOn;
                this.InjuredHealthPercent = defaultOn;
                this.ShieldBipedObject = defaultOn;
                this.BeardBipedObject = defaultOn;
                this.BodyBipedObject = defaultOn;
                this.AimAngleTolerance = defaultOn;
                this.FlightRadius = defaultOn;
                this.AngularAccelerationRate = defaultOn;
                this.AngularTolerance = defaultOn;
                this.Unknown2 = defaultOn;
                this.PipboyBipedObject = defaultOn;
                this.XPValue = defaultOn;
                this.SeverableDebrisScale = defaultOn;
                this.SeverableDebrisCount = defaultOn;
                this.SeverableDecalCount = defaultOn;
                this.ExplodableDebrisScale = defaultOn;
                this.ExplodableDebrisCount = defaultOn;
                this.ExplodableDecalCount = defaultOn;
                this.SeverableExplosion = defaultOn;
                this.SeverableDebris = defaultOn;
                this.SeverableImpactDataSet = defaultOn;
                this.ExplodableExplosion = defaultOn;
                this.ExplodableDebris = defaultOn;
                this.ExplodableImpactDataSet = defaultOn;
                this.OnCrippleDebrisScale = defaultOn;
                this.OnCrippleDebrisCount = defaultOn;
                this.OnCrippleDecalCount = defaultOn;
                this.OnCrippleExplosion = defaultOn;
                this.OnCrippleDebris = defaultOn;
                this.OnCrippleImpactDataSet = defaultOn;
                this.ExplodableSubsegmentExplosion = defaultOn;
                this.OrientationLimitsPitch = defaultOn;
                this.OrientationLimitsRoll = defaultOn;
                this.MovementTypeNames = defaultOn;
                this.NumberOfTintsInList = defaultOn;
                this.FacegenMainClamp = defaultOn;
                this.FacegenFaceClamp = defaultOn;
                this.AttackRace = defaultOn;
                this.BodyPartData = defaultOn;
                this.ImpactMaterialType = defaultOn;
                this.ImpactDataSet = defaultOn;
                this.DispemberBloodArt = defaultOn;
                this.MeatCapTextureSet = defaultOn;
                this.CollarTextureSet = defaultOn;
                this.SoundOpenCorpse = defaultOn;
                this.SoundCloseCorpse = defaultOn;
                this.EquipmentFlags = defaultOn;
                this.UnarmedWeapon = defaultOn;
                this.BaseMovementDefault = defaultOn;
                this.BaseMovementDefaultSwim = defaultOn;
                this.BaseMovementDefaultFly = defaultOn;
                this.BaseMovementDefaultSneak = defaultOn;
                this.MorphRace = defaultOn;
                this.ArmorRace = defaultOn;
                this.SubgraphTemplateRace = defaultOn;
                this.SubgraphAdditiveRace = defaultOn;
                this.IdleChatterTimeMin = defaultOn;
                this.IdleChatterTimeMax = defaultOn;
                this.MorphValuesLastIndex = defaultOn;
                this.HairColorLookupTexture = defaultOn;
                this.HairColorExtendedLookupTexture = defaultOn;
                this.DialogueQuest = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((AnimationSound, null));
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((ActorEffect, null));
                ret.Add((Skin, null));
                ret.Add((BipedBodyTemplate != null ? BipedBodyTemplate.OnOverall : DefaultOn, BipedBodyTemplate?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
                ret.Add((AttachParentSlots, null));
                ret.Add((Height != null || DefaultOn, null));
                ret.Add((DefaultWeight != null || DefaultOn, null));
                ret.Add((Flags, null));
                ret.Add((AccelerationRate, null));
                ret.Add((DecelerationRate, null));
                ret.Add((Size, null));
                ret.Add((Unknown, null));
                ret.Add((InjuredHealthPercent, null));
                ret.Add((ShieldBipedObject, null));
                ret.Add((BeardBipedObject, null));
                ret.Add((BodyBipedObject, null));
                ret.Add((AimAngleTolerance, null));
                ret.Add((FlightRadius, null));
                ret.Add((AngularAccelerationRate, null));
                ret.Add((AngularTolerance, null));
                ret.Add((Unknown2, null));
                ret.Add((PipboyBipedObject, null));
                ret.Add((XPValue, null));
                ret.Add((SeverableDebrisScale, null));
                ret.Add((SeverableDebrisCount, null));
                ret.Add((SeverableDecalCount, null));
                ret.Add((ExplodableDebrisScale, null));
                ret.Add((ExplodableDebrisCount, null));
                ret.Add((ExplodableDecalCount, null));
                ret.Add((SeverableExplosion, null));
                ret.Add((SeverableDebris, null));
                ret.Add((SeverableImpactDataSet, null));
                ret.Add((ExplodableExplosion, null));
                ret.Add((ExplodableDebris, null));
                ret.Add((ExplodableImpactDataSet, null));
                ret.Add((OnCrippleDebrisScale, null));
                ret.Add((OnCrippleDebrisCount, null));
                ret.Add((OnCrippleDecalCount, null));
                ret.Add((OnCrippleExplosion, null));
                ret.Add((OnCrippleDebris, null));
                ret.Add((OnCrippleImpactDataSet, null));
                ret.Add((ExplodableSubsegmentExplosion, null));
                ret.Add((OrientationLimitsPitch, null));
                ret.Add((OrientationLimitsRoll, null));
                ret.Add((SkeletalModel != null || DefaultOn, null));
                ret.Add((MovementTypeNames, null));
                ret.Add((Voices != null || DefaultOn, null));
                ret.Add((DefaultHairColors != null || DefaultOn, null));
                ret.Add((NumberOfTintsInList, null));
                ret.Add((FacegenMainClamp, null));
                ret.Add((FacegenFaceClamp, null));
                ret.Add((AttackRace, null));
                ret.Add((Attacks == null ? DefaultOn : !Attacks.GetCrystal().CopyNothing, Attacks?.GetCrystal()));
                ret.Add((BodyData != null || DefaultOn, null));
                ret.Add((BodyPartData, null));
                ret.Add((BehaviorGraph != null || DefaultOn, null));
                ret.Add((ImpactMaterialType, null));
                ret.Add((ImpactDataSet, null));
                ret.Add((DispemberBloodArt, null));
                ret.Add((MeatCapTextureSet, null));
                ret.Add((CollarTextureSet, null));
                ret.Add((SoundOpenCorpse, null));
                ret.Add((SoundCloseCorpse, null));
                ret.Add((BipedObjects != null || DefaultOn, BipedObjects?.GetCrystal()));
                ret.Add((MovementDataOverrides == null ? DefaultOn : !MovementDataOverrides.GetCrystal().CopyNothing, MovementDataOverrides?.GetCrystal()));
                ret.Add((EquipmentFlags, null));
                ret.Add((EquipmentSlots == null ? DefaultOn : !EquipmentSlots.GetCrystal().CopyNothing, EquipmentSlots?.GetCrystal()));
                ret.Add((UnarmedWeapon, null));
                ret.Add((FaceFxPhonemes != null ? FaceFxPhonemes.OnOverall : DefaultOn, FaceFxPhonemes?.GetCrystal()));
                ret.Add((BaseMovementDefault, null));
                ret.Add((BaseMovementDefaultSwim, null));
                ret.Add((BaseMovementDefaultFly, null));
                ret.Add((BaseMovementDefaultSneak, null));
                ret.Add((HeadData != null || DefaultOn, null));
                ret.Add((MorphRace, null));
                ret.Add((ArmorRace, null));
                ret.Add((SubgraphTemplateRace, null));
                ret.Add((SubgraphAdditiveRace, null));
                ret.Add((Subgraphs == null ? DefaultOn : !Subgraphs.GetCrystal().CopyNothing, Subgraphs?.GetCrystal()));
                ret.Add((IdleChatterTimeMin, null));
                ret.Add((IdleChatterTimeMax, null));
                ret.Add((MorphValues == null ? DefaultOn : !MorphValues.GetCrystal().CopyNothing, MorphValues?.GetCrystal()));
                ret.Add((MorphValuesLastIndex, null));
                ret.Add((HairColorLookupTexture, null));
                ret.Add((HairColorExtendedLookupTexture, null));
                ret.Add((DialogueQuest, null));
                ret.Add((BoneData != null || DefaultOn, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Race_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => RaceCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceSetterCommon.Instance.RemapLinks(this, mapping);
        public Race(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Race(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Race(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Race(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Race(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Race>.ToString(this);
        }

        protected override Type LinkType => typeof(IRace);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IRaceGetter rhs) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IRaceGetter? obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Race CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Race item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((RaceSetterCommon)((IRaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Race GetNew()
        {
            return new Race();
        }

    }
    #endregion

    #region Interface
    public partial interface IRace :
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IRaceInternal>,
        INamed,
        INamedRequired,
        IRaceGetter,
        IRelatable,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new IFormLinkNullable<IAnimationSoundTagSetGetter> AnimationSound { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new TranslatedString Description { get; set; }
        new ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; set; }
        new IFormLinkNullable<IArmorGetter> Skin { get; set; }
        new BipedBodyTemplate? BipedBodyTemplate { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<ObjectProperty>? Properties { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; set; }
        new IGenderedItem<Single> Height { get; set; }
        new IGenderedItem<RaceWeight> DefaultWeight { get; set; }
        new Race.Flag Flags { get; set; }
        new Single AccelerationRate { get; set; }
        new Single DecelerationRate { get; set; }
        new Size Size { get; set; }
        new MemorySlice<Byte> Unknown { get; set; }
        new Single InjuredHealthPercent { get; set; }
        new BipedObject ShieldBipedObject { get; set; }
        new BipedObject BeardBipedObject { get; set; }
        new BipedObject BodyBipedObject { get; set; }
        new Single AimAngleTolerance { get; set; }
        new Single FlightRadius { get; set; }
        new Single AngularAccelerationRate { get; set; }
        new Single AngularTolerance { get; set; }
        new MemorySlice<Byte> Unknown2 { get; set; }
        new BipedObject PipboyBipedObject { get; set; }
        new Int16 XPValue { get; set; }
        new Single SeverableDebrisScale { get; set; }
        new Byte SeverableDebrisCount { get; set; }
        new Byte SeverableDecalCount { get; set; }
        new Single ExplodableDebrisScale { get; set; }
        new Byte ExplodableDebrisCount { get; set; }
        new Byte ExplodableDecalCount { get; set; }
        new IFormLink<IExplosionGetter> SeverableExplosion { get; set; }
        new IFormLink<IDebrisGetter> SeverableDebris { get; set; }
        new IFormLink<IImpactDataSetGetter> SeverableImpactDataSet { get; set; }
        new IFormLink<IExplosionGetter> ExplodableExplosion { get; set; }
        new IFormLink<IDebrisGetter> ExplodableDebris { get; set; }
        new IFormLink<IImpactDataSetGetter> ExplodableImpactDataSet { get; set; }
        new Single OnCrippleDebrisScale { get; set; }
        new Byte OnCrippleDebrisCount { get; set; }
        new Byte OnCrippleDecalCount { get; set; }
        new IFormLink<IExplosionGetter> OnCrippleExplosion { get; set; }
        new IFormLink<IDebrisGetter> OnCrippleDebris { get; set; }
        new IFormLink<IImpactDataSetGetter> OnCrippleImpactDataSet { get; set; }
        new IFormLink<IExplosionGetter> ExplodableSubsegmentExplosion { get; set; }
        new Single OrientationLimitsPitch { get; set; }
        new Single OrientationLimitsRoll { get; set; }
        new IGenderedItem<SimpleModel?>? SkeletalModel { get; set; }
        new ExtendedList<String> MovementTypeNames { get; }
        new IGenderedItem<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; set; }
        new IGenderedItem<IFormLinkGetter<IColorRecordGetter>>? DefaultHairColors { get; set; }
        new UInt16? NumberOfTintsInList { get; set; }
        new Single FacegenMainClamp { get; set; }
        new Single FacegenFaceClamp { get; set; }
        new IFormLinkNullable<IRaceGetter> AttackRace { get; set; }
        new ExtendedList<Attack> Attacks { get; }
        new IGenderedItem<BodyData?> BodyData { get; set; }
        new IFormLinkNullable<IBodyPartDataGetter> BodyPartData { get; set; }
        new IGenderedItem<Model?> BehaviorGraph { get; set; }
        new IFormLinkNullable<IMaterialTypeGetter> ImpactMaterialType { get; set; }
        new IFormLinkNullable<IImpactDataSetGetter> ImpactDataSet { get; set; }
        new IFormLinkNullable<IArtObjectGetter> DispemberBloodArt { get; set; }
        new IFormLinkNullable<ITextureSetGetter> MeatCapTextureSet { get; set; }
        new IFormLinkNullable<ITextureSetGetter> CollarTextureSet { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> SoundOpenCorpse { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> SoundCloseCorpse { get; set; }
        new IDictionary<BipedObject, BipedObjectData> BipedObjects { get; }
        new ExtendedList<MovementDataOverride> MovementDataOverrides { get; }
        new EquipTypeFlag? EquipmentFlags { get; set; }
        new ExtendedList<EquipmentSlot> EquipmentSlots { get; }
        new IFormLinkNullable<IWeaponGetter> UnarmedWeapon { get; set; }
        new FaceFxPhonemes FaceFxPhonemes { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementDefault { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultSwim { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultFly { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultSneak { get; set; }
        new IGenderedItem<HeadData?>? HeadData { get; set; }
        new IFormLinkNullable<IRaceGetter> MorphRace { get; set; }
        new IFormLinkNullable<IRaceGetter> ArmorRace { get; set; }
        new IFormLinkNullable<IRaceGetter> SubgraphTemplateRace { get; set; }
        new IFormLinkNullable<IRaceGetter> SubgraphAdditiveRace { get; set; }
        new ExtendedList<Subgraph> Subgraphs { get; }
        new Single? IdleChatterTimeMin { get; set; }
        new Single? IdleChatterTimeMax { get; set; }
        new ExtendedList<MorphValue> MorphValues { get; }
        new Int32? MorphValuesLastIndex { get; set; }
        new String? HairColorLookupTexture { get; set; }
        new String? HairColorExtendedLookupTexture { get; set; }
        new IFormLinkNullable<IQuestGetter> DialogueQuest { get; set; }
        new IGenderedItem<ExtendedList<Bone>?> BoneData { get; set; }
    }

    public partial interface IRaceInternal :
        IFallout4MajorRecordInternal,
        IRace,
        IRaceGetter
    {
        new IGenderedItem<Single> Height { get; set; }
        new IGenderedItem<RaceWeight> DefaultWeight { get; set; }
        new IGenderedItem<SimpleModel?>? SkeletalModel { get; set; }
        new IGenderedItem<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; set; }
        new IGenderedItem<IFormLinkGetter<IColorRecordGetter>>? DefaultHairColors { get; set; }
        new IGenderedItem<BodyData?> BodyData { get; set; }
        new IGenderedItem<Model?> BehaviorGraph { get; set; }
        new IDictionary<BipedObject, BipedObjectData> BipedObjects { get; }
        new IGenderedItem<HeadData?>? HeadData { get; set; }
        new IGenderedItem<ExtendedList<Bone>?> BoneData { get; set; }
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.RACE)]
    public partial interface IRaceGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IRaceGetter>,
        IMapsToGetter<IRaceGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IRelatableGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        IFormLinkNullableGetter<IAnimationSoundTagSetGetter> AnimationSound { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        ITranslatedStringGetter Description { get; }
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; }
        IFormLinkNullableGetter<IArmorGetter> Skin { get; }
        IBipedBodyTemplateGetter? BipedBodyTemplate { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IReadOnlyList<IObjectPropertyGetter>? Properties { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; }
        IGenderedItemGetter<Single> Height { get; }
        IGenderedItemGetter<IRaceWeightGetter> DefaultWeight { get; }
        Race.Flag Flags { get; }
        Single AccelerationRate { get; }
        Single DecelerationRate { get; }
        Size Size { get; }
        ReadOnlyMemorySlice<Byte> Unknown { get; }
        Single InjuredHealthPercent { get; }
        BipedObject ShieldBipedObject { get; }
        BipedObject BeardBipedObject { get; }
        BipedObject BodyBipedObject { get; }
        Single AimAngleTolerance { get; }
        Single FlightRadius { get; }
        Single AngularAccelerationRate { get; }
        Single AngularTolerance { get; }
        ReadOnlyMemorySlice<Byte> Unknown2 { get; }
        BipedObject PipboyBipedObject { get; }
        Int16 XPValue { get; }
        Single SeverableDebrisScale { get; }
        Byte SeverableDebrisCount { get; }
        Byte SeverableDecalCount { get; }
        Single ExplodableDebrisScale { get; }
        Byte ExplodableDebrisCount { get; }
        Byte ExplodableDecalCount { get; }
        IFormLinkGetter<IExplosionGetter> SeverableExplosion { get; }
        IFormLinkGetter<IDebrisGetter> SeverableDebris { get; }
        IFormLinkGetter<IImpactDataSetGetter> SeverableImpactDataSet { get; }
        IFormLinkGetter<IExplosionGetter> ExplodableExplosion { get; }
        IFormLinkGetter<IDebrisGetter> ExplodableDebris { get; }
        IFormLinkGetter<IImpactDataSetGetter> ExplodableImpactDataSet { get; }
        Single OnCrippleDebrisScale { get; }
        Byte OnCrippleDebrisCount { get; }
        Byte OnCrippleDecalCount { get; }
        IFormLinkGetter<IExplosionGetter> OnCrippleExplosion { get; }
        IFormLinkGetter<IDebrisGetter> OnCrippleDebris { get; }
        IFormLinkGetter<IImpactDataSetGetter> OnCrippleImpactDataSet { get; }
        IFormLinkGetter<IExplosionGetter> ExplodableSubsegmentExplosion { get; }
        Single OrientationLimitsPitch { get; }
        Single OrientationLimitsRoll { get; }
        IGenderedItemGetter<ISimpleModelGetter?>? SkeletalModel { get; }
        IReadOnlyList<String> MovementTypeNames { get; }
        IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; }
        IGenderedItemGetter<IFormLinkGetter<IColorRecordGetter>>? DefaultHairColors { get; }
        UInt16? NumberOfTintsInList { get; }
        Single FacegenMainClamp { get; }
        Single FacegenFaceClamp { get; }
        IFormLinkNullableGetter<IRaceGetter> AttackRace { get; }
        IReadOnlyList<IAttackGetter> Attacks { get; }
        IGenderedItemGetter<IBodyDataGetter?> BodyData { get; }
        IFormLinkNullableGetter<IBodyPartDataGetter> BodyPartData { get; }
        IGenderedItemGetter<IModelGetter?> BehaviorGraph { get; }
        IFormLinkNullableGetter<IMaterialTypeGetter> ImpactMaterialType { get; }
        IFormLinkNullableGetter<IImpactDataSetGetter> ImpactDataSet { get; }
        IFormLinkNullableGetter<IArtObjectGetter> DispemberBloodArt { get; }
        IFormLinkNullableGetter<ITextureSetGetter> MeatCapTextureSet { get; }
        IFormLinkNullableGetter<ITextureSetGetter> CollarTextureSet { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> SoundOpenCorpse { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> SoundCloseCorpse { get; }
        IReadOnlyDictionary<BipedObject, IBipedObjectDataGetter> BipedObjects { get; }
        IReadOnlyList<IMovementDataOverrideGetter> MovementDataOverrides { get; }
        EquipTypeFlag? EquipmentFlags { get; }
        IReadOnlyList<IEquipmentSlotGetter> EquipmentSlots { get; }
        IFormLinkNullableGetter<IWeaponGetter> UnarmedWeapon { get; }
        IFaceFxPhonemesGetter FaceFxPhonemes { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefault { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSwim { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultFly { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSneak { get; }
        IGenderedItemGetter<IHeadDataGetter?>? HeadData { get; }
        IFormLinkNullableGetter<IRaceGetter> MorphRace { get; }
        IFormLinkNullableGetter<IRaceGetter> ArmorRace { get; }
        IFormLinkNullableGetter<IRaceGetter> SubgraphTemplateRace { get; }
        IFormLinkNullableGetter<IRaceGetter> SubgraphAdditiveRace { get; }
        IReadOnlyList<ISubgraphGetter> Subgraphs { get; }
        Single? IdleChatterTimeMin { get; }
        Single? IdleChatterTimeMax { get; }
        IReadOnlyList<IMorphValueGetter> MorphValues { get; }
        Int32? MorphValuesLastIndex { get; }
        String? HairColorLookupTexture { get; }
        String? HairColorExtendedLookupTexture { get; }
        IFormLinkNullableGetter<IQuestGetter> DialogueQuest { get; }
        IGenderedItemGetter<IReadOnlyList<IBoneGetter>?> BoneData { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RaceMixIn
    {
        public static void Clear(this IRaceInternal item)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Race.Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IRaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRaceGetter item,
            IRaceGetter rhs,
            Race.TranslationMask? equalsMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Race Duplicate(
            this IRaceGetter item,
            FormKey formKey,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Race Duplicate(
            this IRaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum Race_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        AnimationSound = 7,
        Name = 8,
        Description = 9,
        ActorEffect = 10,
        Skin = 11,
        BipedBodyTemplate = 12,
        Keywords = 13,
        Properties = 14,
        AttachParentSlots = 15,
        Height = 16,
        DefaultWeight = 17,
        Flags = 18,
        AccelerationRate = 19,
        DecelerationRate = 20,
        Size = 21,
        Unknown = 22,
        InjuredHealthPercent = 23,
        ShieldBipedObject = 24,
        BeardBipedObject = 25,
        BodyBipedObject = 26,
        AimAngleTolerance = 27,
        FlightRadius = 28,
        AngularAccelerationRate = 29,
        AngularTolerance = 30,
        Unknown2 = 31,
        PipboyBipedObject = 32,
        XPValue = 33,
        SeverableDebrisScale = 34,
        SeverableDebrisCount = 35,
        SeverableDecalCount = 36,
        ExplodableDebrisScale = 37,
        ExplodableDebrisCount = 38,
        ExplodableDecalCount = 39,
        SeverableExplosion = 40,
        SeverableDebris = 41,
        SeverableImpactDataSet = 42,
        ExplodableExplosion = 43,
        ExplodableDebris = 44,
        ExplodableImpactDataSet = 45,
        OnCrippleDebrisScale = 46,
        OnCrippleDebrisCount = 47,
        OnCrippleDecalCount = 48,
        OnCrippleExplosion = 49,
        OnCrippleDebris = 50,
        OnCrippleImpactDataSet = 51,
        ExplodableSubsegmentExplosion = 52,
        OrientationLimitsPitch = 53,
        OrientationLimitsRoll = 54,
        SkeletalModel = 55,
        MovementTypeNames = 56,
        Voices = 57,
        DefaultHairColors = 58,
        NumberOfTintsInList = 59,
        FacegenMainClamp = 60,
        FacegenFaceClamp = 61,
        AttackRace = 62,
        Attacks = 63,
        BodyData = 64,
        BodyPartData = 65,
        BehaviorGraph = 66,
        ImpactMaterialType = 67,
        ImpactDataSet = 68,
        DispemberBloodArt = 69,
        MeatCapTextureSet = 70,
        CollarTextureSet = 71,
        SoundOpenCorpse = 72,
        SoundCloseCorpse = 73,
        BipedObjects = 74,
        MovementDataOverrides = 75,
        EquipmentFlags = 76,
        EquipmentSlots = 77,
        UnarmedWeapon = 78,
        FaceFxPhonemes = 79,
        BaseMovementDefault = 80,
        BaseMovementDefaultSwim = 81,
        BaseMovementDefaultFly = 82,
        BaseMovementDefaultSneak = 83,
        HeadData = 84,
        MorphRace = 85,
        ArmorRace = 86,
        SubgraphTemplateRace = 87,
        SubgraphAdditiveRace = 88,
        Subgraphs = 89,
        IdleChatterTimeMin = 90,
        IdleChatterTimeMax = 91,
        MorphValues = 92,
        MorphValuesLastIndex = 93,
        HairColorLookupTexture = 94,
        HairColorExtendedLookupTexture = 95,
        DialogueQuest = 96,
        BoneData = 97,
    }
    #endregion

    #region Registration
    internal partial class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 91;

        public const ushort FieldCount = 98;

        public static readonly Type MaskType = typeof(Race.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race.ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type? InternalSetterType = typeof(IRaceInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.RACE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.RACE);
            var all = RecordCollection.Factory(
                RecordTypes.RACE,
                RecordTypes.NAM2,
                RecordTypes.STCP,
                RecordTypes.FULL,
                RecordTypes.DESC,
                RecordTypes.SPLO,
                RecordTypes.SPCT,
                RecordTypes.WNAM,
                RecordTypes.BOD2,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.PRPS,
                RecordTypes.APPR,
                RecordTypes.DATA,
                RecordTypes.MNAM,
                RecordTypes.FNAM,
                RecordTypes.ANAM,
                RecordTypes.MTNM,
                RecordTypes.VTCK,
                RecordTypes.HCLF,
                RecordTypes.TINL,
                RecordTypes.PNAM,
                RecordTypes.UNAM,
                RecordTypes.ATKR,
                RecordTypes.ATKD,
                RecordTypes.ATKE,
                RecordTypes.ATKW,
                RecordTypes.ATKS,
                RecordTypes.ATKT,
                RecordTypes.NAM1,
                RecordTypes.GNAM,
                RecordTypes.NAM3,
                RecordTypes.NAM4,
                RecordTypes.NAM5,
                RecordTypes.NAM7,
                RecordTypes.CNAM,
                RecordTypes.ONAM,
                RecordTypes.LNAM,
                RecordTypes.NAME,
                RecordTypes.MTYP,
                RecordTypes.SPED,
                RecordTypes.VNAM,
                RecordTypes.QNAM,
                RecordTypes.ZNAM,
                RecordTypes.UNWP,
                RecordTypes.PHTN,
                RecordTypes.PHWT,
                RecordTypes.WKMV,
                RecordTypes.SWMV,
                RecordTypes.FLMV,
                RecordTypes.SNMV,
                RecordTypes.NAM0,
                RecordTypes.RPRF,
                RecordTypes.FTSF,
                RecordTypes.AHCF,
                RecordTypes.DFTF,
                RecordTypes.NAM8,
                RecordTypes.RNAM,
                RecordTypes.SRAC,
                RecordTypes.SADD,
                RecordTypes.SGNM,
                RecordTypes.SAKD,
                RecordTypes.STKD,
                RecordTypes.SAPT,
                RecordTypes.SRAF,
                RecordTypes.PTOP,
                RecordTypes.NTOP,
                RecordTypes.MSID,
                RecordTypes.MSM0,
                RecordTypes.MSM1,
                RecordTypes.MLSI,
                RecordTypes.HNAM,
                RecordTypes.HLTX,
                RecordTypes.QSTI,
                RecordTypes.BSMP,
                RecordTypes.BSMB,
                RecordTypes.BSMS,
                RecordTypes.BMMP);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static RecordTypeConverter SkeletalModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.ANAM));
        public static readonly Type BinaryWriteTranslation = typeof(RaceBinaryWriteTranslation);
        public static RecordTypeConverter HeadDataFemaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.RPRM,
                RecordTypes.RPRF),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.FTSM,
                RecordTypes.FTSF),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.AHCM,
                RecordTypes.AHCF),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.DFTM,
                RecordTypes.DFTF));
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class RaceSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly RaceSetterCommon Instance = new RaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceInternal item)
        {
            ClearPartial();
            item.AnimationSound.Clear();
            item.Name = default;
            item.Description.Clear();
            item.ActorEffect = null;
            item.Skin.Clear();
            item.BipedBodyTemplate = null;
            item.Keywords = null;
            item.Properties = null;
            item.AttachParentSlots = null;
            item.Height.Male = default(Single);
            item.Height.Female = default(Single);
            item.DefaultWeight.Male.Clear();
            item.DefaultWeight.Female.Clear();
            item.Flags = default(Race.Flag);
            item.AccelerationRate = default(Single);
            item.DecelerationRate = default(Single);
            item.Size = default(Size);
            item.Unknown = new byte[8];
            item.InjuredHealthPercent = default(Single);
            item.ShieldBipedObject = Race.ShieldBipedObjectDefault;
            item.BeardBipedObject = Race.BeardBipedObjectDefault;
            item.BodyBipedObject = Race.BodyBipedObjectDefault;
            item.AimAngleTolerance = default(Single);
            item.FlightRadius = default(Single);
            item.AngularAccelerationRate = default(Single);
            item.AngularTolerance = default(Single);
            item.Unknown2 = new byte[36];
            item.PipboyBipedObject = Race.PipboyBipedObjectDefault;
            item.XPValue = default(Int16);
            item.SeverableDebrisScale = default(Single);
            item.SeverableDebrisCount = default(Byte);
            item.SeverableDecalCount = default(Byte);
            item.ExplodableDebrisScale = default(Single);
            item.ExplodableDebrisCount = default(Byte);
            item.ExplodableDecalCount = default(Byte);
            item.SeverableExplosion.Clear();
            item.SeverableDebris.Clear();
            item.SeverableImpactDataSet.Clear();
            item.ExplodableExplosion.Clear();
            item.ExplodableDebris.Clear();
            item.ExplodableImpactDataSet.Clear();
            item.OnCrippleDebrisScale = default(Single);
            item.OnCrippleDebrisCount = default(Byte);
            item.OnCrippleDecalCount = default(Byte);
            item.OnCrippleExplosion.Clear();
            item.OnCrippleDebris.Clear();
            item.OnCrippleImpactDataSet.Clear();
            item.ExplodableSubsegmentExplosion.Clear();
            item.OrientationLimitsPitch = default(Single);
            item.OrientationLimitsRoll = default(Single);
            item.SkeletalModel = null;
            item.MovementTypeNames.Clear();
            item.Voices.Male = FormLink<IVoiceTypeGetter>.Null;
            item.Voices.Female = FormLink<IVoiceTypeGetter>.Null;
            item.DefaultHairColors = null;
            item.NumberOfTintsInList = default;
            item.FacegenMainClamp = default(Single);
            item.FacegenFaceClamp = default(Single);
            item.AttackRace.Clear();
            item.Attacks.Clear();
            item.BodyData.Male = null;
            item.BodyData.Female = null;
            item.BodyPartData.Clear();
            item.BehaviorGraph.Male = null;
            item.BehaviorGraph.Female = null;
            item.ImpactMaterialType.Clear();
            item.ImpactDataSet.Clear();
            item.DispemberBloodArt.Clear();
            item.MeatCapTextureSet.Clear();
            item.CollarTextureSet.Clear();
            item.SoundOpenCorpse.Clear();
            item.SoundCloseCorpse.Clear();
            item.BipedObjects.Clear();
            item.MovementDataOverrides.Clear();
            item.EquipmentFlags = default;
            item.EquipmentSlots.Clear();
            item.UnarmedWeapon.Clear();
            item.FaceFxPhonemes.Clear();
            item.BaseMovementDefault.Clear();
            item.BaseMovementDefaultSwim.Clear();
            item.BaseMovementDefaultFly.Clear();
            item.BaseMovementDefaultSneak.Clear();
            item.HeadData = null;
            item.MorphRace.Clear();
            item.ArmorRace.Clear();
            item.SubgraphTemplateRace.Clear();
            item.SubgraphAdditiveRace.Clear();
            item.Subgraphs.Clear();
            item.IdleChatterTimeMin = default;
            item.IdleChatterTimeMax = default;
            item.MorphValues.Clear();
            item.MorphValuesLastIndex = default;
            item.HairColorLookupTexture = default;
            item.HairColorExtendedLookupTexture = default;
            item.DialogueQuest.Clear();
            item.BoneData.Male = null;
            item.BoneData.Female = null;
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IRace obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.AnimationSound.Relink(mapping);
            obj.ActorEffect?.RemapLinks(mapping);
            obj.Skin.Relink(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Properties?.RemapLinks(mapping);
            obj.AttachParentSlots?.RemapLinks(mapping);
            obj.SeverableExplosion.Relink(mapping);
            obj.SeverableDebris.Relink(mapping);
            obj.SeverableImpactDataSet.Relink(mapping);
            obj.ExplodableExplosion.Relink(mapping);
            obj.ExplodableDebris.Relink(mapping);
            obj.ExplodableImpactDataSet.Relink(mapping);
            obj.OnCrippleExplosion.Relink(mapping);
            obj.OnCrippleDebris.Relink(mapping);
            obj.OnCrippleImpactDataSet.Relink(mapping);
            obj.ExplodableSubsegmentExplosion.Relink(mapping);
            obj.SkeletalModel?.RemapLinks(mapping);
            obj.Voices.RemapLinks(mapping);
            obj.DefaultHairColors?.RemapLinks(mapping);
            obj.AttackRace.Relink(mapping);
            obj.Attacks.RemapLinks(mapping);
            obj.BodyData.RemapLinks(mapping);
            obj.BodyPartData.Relink(mapping);
            obj.BehaviorGraph.RemapLinks(mapping);
            obj.ImpactMaterialType.Relink(mapping);
            obj.ImpactDataSet.Relink(mapping);
            obj.DispemberBloodArt.Relink(mapping);
            obj.MeatCapTextureSet.Relink(mapping);
            obj.CollarTextureSet.Relink(mapping);
            obj.SoundOpenCorpse.Relink(mapping);
            obj.SoundCloseCorpse.Relink(mapping);
            obj.BipedObjects?.RemapLinks(mapping);
            obj.MovementDataOverrides.RemapLinks(mapping);
            obj.EquipmentSlots.RemapLinks(mapping);
            obj.UnarmedWeapon.Relink(mapping);
            obj.BaseMovementDefault.Relink(mapping);
            obj.BaseMovementDefaultSwim.Relink(mapping);
            obj.BaseMovementDefaultFly.Relink(mapping);
            obj.BaseMovementDefaultSneak.Relink(mapping);
            obj.HeadData?.RemapLinks(mapping);
            obj.MorphRace.Relink(mapping);
            obj.ArmorRace.Relink(mapping);
            obj.SubgraphTemplateRace.Relink(mapping);
            obj.SubgraphAdditiveRace.Relink(mapping);
            obj.Subgraphs.RemapLinks(mapping);
            obj.DialogueQuest.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IRaceInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: RaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RaceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class RaceCommon : Fallout4MajorRecordCommon
    {
        public new static readonly RaceCommon Instance = new RaceCommon();

        public Race.Mask<bool> GetEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.AnimationSound = item.AnimationSound.Equals(rhs.AnimationSound);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.ActorEffect = item.ActorEffect.CollectionEqualsHelper(
                rhs.ActorEffect,
                (l, r) => object.Equals(l, r),
                include);
            ret.Skin = item.Skin.Equals(rhs.Skin);
            ret.BipedBodyTemplate = EqualsMaskHelper.EqualsHelper(
                item.BipedBodyTemplate,
                rhs.BipedBodyTemplate,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AttachParentSlots = item.AttachParentSlots.CollectionEqualsHelper(
                rhs.AttachParentSlots,
                (l, r) => object.Equals(l, r),
                include);
            ret.Height = new GenderedItem<bool>(
                male: item.Height.Male.EqualsWithin(rhs.Height.Male),
                female: item.Height.Female.EqualsWithin(rhs.Height.Female));
            ret.DefaultWeight = GenderedItem.EqualityMaskHelper(
                lhs: item.DefaultWeight,
                rhs: rhs.DefaultWeight,
                maskGetter: (l, r, i) => l.GetEqualsMask(r, i),
                include: include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.AccelerationRate = item.AccelerationRate.EqualsWithin(rhs.AccelerationRate);
            ret.DecelerationRate = item.DecelerationRate.EqualsWithin(rhs.DecelerationRate);
            ret.Size = item.Size == rhs.Size;
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown.Span, rhs.Unknown.Span);
            ret.InjuredHealthPercent = item.InjuredHealthPercent.EqualsWithin(rhs.InjuredHealthPercent);
            ret.ShieldBipedObject = item.ShieldBipedObject == rhs.ShieldBipedObject;
            ret.BeardBipedObject = item.BeardBipedObject == rhs.BeardBipedObject;
            ret.BodyBipedObject = item.BodyBipedObject == rhs.BodyBipedObject;
            ret.AimAngleTolerance = item.AimAngleTolerance.EqualsWithin(rhs.AimAngleTolerance);
            ret.FlightRadius = item.FlightRadius.EqualsWithin(rhs.FlightRadius);
            ret.AngularAccelerationRate = item.AngularAccelerationRate.EqualsWithin(rhs.AngularAccelerationRate);
            ret.AngularTolerance = item.AngularTolerance.EqualsWithin(rhs.AngularTolerance);
            ret.Unknown2 = MemoryExtensions.SequenceEqual(item.Unknown2.Span, rhs.Unknown2.Span);
            ret.PipboyBipedObject = item.PipboyBipedObject == rhs.PipboyBipedObject;
            ret.XPValue = item.XPValue == rhs.XPValue;
            ret.SeverableDebrisScale = item.SeverableDebrisScale.EqualsWithin(rhs.SeverableDebrisScale);
            ret.SeverableDebrisCount = item.SeverableDebrisCount == rhs.SeverableDebrisCount;
            ret.SeverableDecalCount = item.SeverableDecalCount == rhs.SeverableDecalCount;
            ret.ExplodableDebrisScale = item.ExplodableDebrisScale.EqualsWithin(rhs.ExplodableDebrisScale);
            ret.ExplodableDebrisCount = item.ExplodableDebrisCount == rhs.ExplodableDebrisCount;
            ret.ExplodableDecalCount = item.ExplodableDecalCount == rhs.ExplodableDecalCount;
            ret.SeverableExplosion = item.SeverableExplosion.Equals(rhs.SeverableExplosion);
            ret.SeverableDebris = item.SeverableDebris.Equals(rhs.SeverableDebris);
            ret.SeverableImpactDataSet = item.SeverableImpactDataSet.Equals(rhs.SeverableImpactDataSet);
            ret.ExplodableExplosion = item.ExplodableExplosion.Equals(rhs.ExplodableExplosion);
            ret.ExplodableDebris = item.ExplodableDebris.Equals(rhs.ExplodableDebris);
            ret.ExplodableImpactDataSet = item.ExplodableImpactDataSet.Equals(rhs.ExplodableImpactDataSet);
            ret.OnCrippleDebrisScale = item.OnCrippleDebrisScale.EqualsWithin(rhs.OnCrippleDebrisScale);
            ret.OnCrippleDebrisCount = item.OnCrippleDebrisCount == rhs.OnCrippleDebrisCount;
            ret.OnCrippleDecalCount = item.OnCrippleDecalCount == rhs.OnCrippleDecalCount;
            ret.OnCrippleExplosion = item.OnCrippleExplosion.Equals(rhs.OnCrippleExplosion);
            ret.OnCrippleDebris = item.OnCrippleDebris.Equals(rhs.OnCrippleDebris);
            ret.OnCrippleImpactDataSet = item.OnCrippleImpactDataSet.Equals(rhs.OnCrippleImpactDataSet);
            ret.ExplodableSubsegmentExplosion = item.ExplodableSubsegmentExplosion.Equals(rhs.ExplodableSubsegmentExplosion);
            ret.OrientationLimitsPitch = item.OrientationLimitsPitch.EqualsWithin(rhs.OrientationLimitsPitch);
            ret.OrientationLimitsRoll = item.OrientationLimitsRoll.EqualsWithin(rhs.OrientationLimitsRoll);
            ret.SkeletalModel = GenderedItem.EqualityMaskHelper(
                lhs: item.SkeletalModel,
                rhs: rhs.SkeletalModel,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.MovementTypeNames = item.MovementTypeNames.CollectionEqualsHelper(
                rhs.MovementTypeNames,
                (l, r) => string.Equals(l, r),
                include);
            ret.Voices = new GenderedItem<bool>(
                male: object.Equals(item.Voices.Male, rhs.Voices.Male),
                female: object.Equals(item.Voices.Female, rhs.Voices.Female));
            ret.DefaultHairColors = GenderedItem.EqualityMaskHelper(
                lhs: item.DefaultHairColors,
                rhs: rhs.DefaultHairColors,
                maskGetter: (l, r, i) => EqualityComparer<IFormLinkGetter<IColorRecordGetter>>.Default.Equals(l, r),
                include: include);
            ret.NumberOfTintsInList = item.NumberOfTintsInList == rhs.NumberOfTintsInList;
            ret.FacegenMainClamp = item.FacegenMainClamp.EqualsWithin(rhs.FacegenMainClamp);
            ret.FacegenFaceClamp = item.FacegenFaceClamp.EqualsWithin(rhs.FacegenFaceClamp);
            ret.AttackRace = item.AttackRace.Equals(rhs.AttackRace);
            ret.Attacks = item.Attacks.CollectionEqualsHelper(
                rhs.Attacks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BodyData = GenderedItem.EqualityMaskHelper(
                lhs: item.BodyData,
                rhs: rhs.BodyData,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.BodyPartData = item.BodyPartData.Equals(rhs.BodyPartData);
            ret.BehaviorGraph = GenderedItem.EqualityMaskHelper(
                lhs: item.BehaviorGraph,
                rhs: rhs.BehaviorGraph,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.ImpactMaterialType = item.ImpactMaterialType.Equals(rhs.ImpactMaterialType);
            ret.ImpactDataSet = item.ImpactDataSet.Equals(rhs.ImpactDataSet);
            ret.DispemberBloodArt = item.DispemberBloodArt.Equals(rhs.DispemberBloodArt);
            ret.MeatCapTextureSet = item.MeatCapTextureSet.Equals(rhs.MeatCapTextureSet);
            ret.CollarTextureSet = item.CollarTextureSet.Equals(rhs.CollarTextureSet);
            ret.SoundOpenCorpse = item.SoundOpenCorpse.Equals(rhs.SoundOpenCorpse);
            ret.SoundCloseCorpse = item.SoundCloseCorpse.Equals(rhs.SoundCloseCorpse);
            ret.BipedObjects = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.BipedObjects,
                rhs: rhs.BipedObjects,
                maskGetter: (k, l, r) => l.GetEqualsMask(r, include),
                include: include);
            ret.MovementDataOverrides = item.MovementDataOverrides.CollectionEqualsHelper(
                rhs.MovementDataOverrides,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.EquipmentFlags = item.EquipmentFlags == rhs.EquipmentFlags;
            ret.EquipmentSlots = item.EquipmentSlots.CollectionEqualsHelper(
                rhs.EquipmentSlots,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.UnarmedWeapon = item.UnarmedWeapon.Equals(rhs.UnarmedWeapon);
            ret.FaceFxPhonemes = MaskItemExt.Factory(item.FaceFxPhonemes.GetEqualsMask(rhs.FaceFxPhonemes, include), include);
            ret.BaseMovementDefault = item.BaseMovementDefault.Equals(rhs.BaseMovementDefault);
            ret.BaseMovementDefaultSwim = item.BaseMovementDefaultSwim.Equals(rhs.BaseMovementDefaultSwim);
            ret.BaseMovementDefaultFly = item.BaseMovementDefaultFly.Equals(rhs.BaseMovementDefaultFly);
            ret.BaseMovementDefaultSneak = item.BaseMovementDefaultSneak.Equals(rhs.BaseMovementDefaultSneak);
            ret.HeadData = GenderedItem.EqualityMaskHelper(
                lhs: item.HeadData,
                rhs: rhs.HeadData,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.MorphRace = item.MorphRace.Equals(rhs.MorphRace);
            ret.ArmorRace = item.ArmorRace.Equals(rhs.ArmorRace);
            ret.SubgraphTemplateRace = item.SubgraphTemplateRace.Equals(rhs.SubgraphTemplateRace);
            ret.SubgraphAdditiveRace = item.SubgraphAdditiveRace.Equals(rhs.SubgraphAdditiveRace);
            ret.Subgraphs = item.Subgraphs.CollectionEqualsHelper(
                rhs.Subgraphs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.IdleChatterTimeMin = item.IdleChatterTimeMin.EqualsWithin(rhs.IdleChatterTimeMin);
            ret.IdleChatterTimeMax = item.IdleChatterTimeMax.EqualsWithin(rhs.IdleChatterTimeMax);
            ret.MorphValues = item.MorphValues.CollectionEqualsHelper(
                rhs.MorphValues,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MorphValuesLastIndex = item.MorphValuesLastIndex == rhs.MorphValuesLastIndex;
            ret.HairColorLookupTexture = string.Equals(item.HairColorLookupTexture, rhs.HairColorLookupTexture);
            ret.HairColorExtendedLookupTexture = string.Equals(item.HairColorExtendedLookupTexture, rhs.HairColorExtendedLookupTexture);
            ret.DialogueQuest = item.DialogueQuest.Equals(rhs.DialogueQuest);
            ret.BoneData = new GenderedItem<bool>(
                male: item.BoneData.Male.SequenceEqualNullable(rhs.BoneData.Male),
                female: item.BoneData.Female.SequenceEqualNullable(rhs.BoneData.Female));
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IRaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Race =>");
            }
            else
            {
                sb.AppendLine($"{name} (Race) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IRaceGetter item,
            StructuredStringBuilder sb,
            Race.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.AnimationSound ?? true)
            {
                sb.AppendItem(item.AnimationSound.FormKeyNullable, "AnimationSound");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.Description ?? true)
            {
                sb.AppendItem(item.Description, "Description");
            }
            if ((printMask?.ActorEffect?.Overall ?? true)
                && item.ActorEffect is {} ActorEffectItem)
            {
                sb.AppendLine("ActorEffect =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ActorEffectItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Skin ?? true)
            {
                sb.AppendItem(item.Skin.FormKeyNullable, "Skin");
            }
            if ((printMask?.BipedBodyTemplate?.Overall ?? true)
                && item.BipedBodyTemplate is {} BipedBodyTemplateItem)
            {
                BipedBodyTemplateItem?.Print(sb, "BipedBodyTemplate");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Properties?.Overall ?? true)
                && item.Properties is {} PropertiesItem)
            {
                sb.AppendLine("Properties =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PropertiesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.AttachParentSlots?.Overall ?? true)
                && item.AttachParentSlots is {} AttachParentSlotsItem)
            {
                sb.AppendLine("AttachParentSlots =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AttachParentSlotsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (true)
            {
                item.Height.Print(sb, "Height");
            }
            if (true)
            {
                item.DefaultWeight.Print(sb, "DefaultWeight");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.AccelerationRate ?? true)
            {
                sb.AppendItem(item.AccelerationRate, "AccelerationRate");
            }
            if (printMask?.DecelerationRate ?? true)
            {
                sb.AppendItem(item.DecelerationRate, "DecelerationRate");
            }
            if (printMask?.Size ?? true)
            {
                sb.AppendItem(item.Size, "Size");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.InjuredHealthPercent ?? true)
            {
                sb.AppendItem(item.InjuredHealthPercent, "InjuredHealthPercent");
            }
            if (printMask?.ShieldBipedObject ?? true)
            {
                sb.AppendItem(item.ShieldBipedObject, "ShieldBipedObject");
            }
            if (printMask?.BeardBipedObject ?? true)
            {
                sb.AppendItem(item.BeardBipedObject, "BeardBipedObject");
            }
            if (printMask?.BodyBipedObject ?? true)
            {
                sb.AppendItem(item.BodyBipedObject, "BodyBipedObject");
            }
            if (printMask?.AimAngleTolerance ?? true)
            {
                sb.AppendItem(item.AimAngleTolerance, "AimAngleTolerance");
            }
            if (printMask?.FlightRadius ?? true)
            {
                sb.AppendItem(item.FlightRadius, "FlightRadius");
            }
            if (printMask?.AngularAccelerationRate ?? true)
            {
                sb.AppendItem(item.AngularAccelerationRate, "AngularAccelerationRate");
            }
            if (printMask?.AngularTolerance ?? true)
            {
                sb.AppendItem(item.AngularTolerance, "AngularTolerance");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendLine($"Unknown2 => {SpanExt.ToHexString(item.Unknown2)}");
            }
            if (printMask?.PipboyBipedObject ?? true)
            {
                sb.AppendItem(item.PipboyBipedObject, "PipboyBipedObject");
            }
            if (printMask?.XPValue ?? true)
            {
                sb.AppendItem(item.XPValue, "XPValue");
            }
            if (printMask?.SeverableDebrisScale ?? true)
            {
                sb.AppendItem(item.SeverableDebrisScale, "SeverableDebrisScale");
            }
            if (printMask?.SeverableDebrisCount ?? true)
            {
                sb.AppendItem(item.SeverableDebrisCount, "SeverableDebrisCount");
            }
            if (printMask?.SeverableDecalCount ?? true)
            {
                sb.AppendItem(item.SeverableDecalCount, "SeverableDecalCount");
            }
            if (printMask?.ExplodableDebrisScale ?? true)
            {
                sb.AppendItem(item.ExplodableDebrisScale, "ExplodableDebrisScale");
            }
            if (printMask?.ExplodableDebrisCount ?? true)
            {
                sb.AppendItem(item.ExplodableDebrisCount, "ExplodableDebrisCount");
            }
            if (printMask?.ExplodableDecalCount ?? true)
            {
                sb.AppendItem(item.ExplodableDecalCount, "ExplodableDecalCount");
            }
            if (printMask?.SeverableExplosion ?? true)
            {
                sb.AppendItem(item.SeverableExplosion.FormKey, "SeverableExplosion");
            }
            if (printMask?.SeverableDebris ?? true)
            {
                sb.AppendItem(item.SeverableDebris.FormKey, "SeverableDebris");
            }
            if (printMask?.SeverableImpactDataSet ?? true)
            {
                sb.AppendItem(item.SeverableImpactDataSet.FormKey, "SeverableImpactDataSet");
            }
            if (printMask?.ExplodableExplosion ?? true)
            {
                sb.AppendItem(item.ExplodableExplosion.FormKey, "ExplodableExplosion");
            }
            if (printMask?.ExplodableDebris ?? true)
            {
                sb.AppendItem(item.ExplodableDebris.FormKey, "ExplodableDebris");
            }
            if (printMask?.ExplodableImpactDataSet ?? true)
            {
                sb.AppendItem(item.ExplodableImpactDataSet.FormKey, "ExplodableImpactDataSet");
            }
            if (printMask?.OnCrippleDebrisScale ?? true)
            {
                sb.AppendItem(item.OnCrippleDebrisScale, "OnCrippleDebrisScale");
            }
            if (printMask?.OnCrippleDebrisCount ?? true)
            {
                sb.AppendItem(item.OnCrippleDebrisCount, "OnCrippleDebrisCount");
            }
            if (printMask?.OnCrippleDecalCount ?? true)
            {
                sb.AppendItem(item.OnCrippleDecalCount, "OnCrippleDecalCount");
            }
            if (printMask?.OnCrippleExplosion ?? true)
            {
                sb.AppendItem(item.OnCrippleExplosion.FormKey, "OnCrippleExplosion");
            }
            if (printMask?.OnCrippleDebris ?? true)
            {
                sb.AppendItem(item.OnCrippleDebris.FormKey, "OnCrippleDebris");
            }
            if (printMask?.OnCrippleImpactDataSet ?? true)
            {
                sb.AppendItem(item.OnCrippleImpactDataSet.FormKey, "OnCrippleImpactDataSet");
            }
            if (printMask?.ExplodableSubsegmentExplosion ?? true)
            {
                sb.AppendItem(item.ExplodableSubsegmentExplosion.FormKey, "ExplodableSubsegmentExplosion");
            }
            if (printMask?.OrientationLimitsPitch ?? true)
            {
                sb.AppendItem(item.OrientationLimitsPitch, "OrientationLimitsPitch");
            }
            if (printMask?.OrientationLimitsRoll ?? true)
            {
                sb.AppendItem(item.OrientationLimitsRoll, "OrientationLimitsRoll");
            }
            if ((printMask?.SkeletalModel?.Overall ?? true)
                && item.SkeletalModel is {} SkeletalModelItem)
            {
                SkeletalModelItem?.Print(sb, "SkeletalModel");
            }
            if (printMask?.MovementTypeNames?.Overall ?? true)
            {
                sb.AppendLine("MovementTypeNames =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MovementTypeNames)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (true)
            {
                item.Voices.Print(sb, "Voices");
            }
            if ((printMask?.DefaultHairColors?.Overall ?? true)
                && item.DefaultHairColors is {} DefaultHairColorsItem)
            {
                DefaultHairColorsItem?.Print(sb, "DefaultHairColors");
            }
            if ((printMask?.NumberOfTintsInList ?? true)
                && item.NumberOfTintsInList is {} NumberOfTintsInListItem)
            {
                sb.AppendItem(NumberOfTintsInListItem, "NumberOfTintsInList");
            }
            if (printMask?.FacegenMainClamp ?? true)
            {
                sb.AppendItem(item.FacegenMainClamp, "FacegenMainClamp");
            }
            if (printMask?.FacegenFaceClamp ?? true)
            {
                sb.AppendItem(item.FacegenFaceClamp, "FacegenFaceClamp");
            }
            if (printMask?.AttackRace ?? true)
            {
                sb.AppendItem(item.AttackRace.FormKeyNullable, "AttackRace");
            }
            if (printMask?.Attacks?.Overall ?? true)
            {
                sb.AppendLine("Attacks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Attacks)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (true)
            {
                item.BodyData.Print(sb, "BodyData");
            }
            if (printMask?.BodyPartData ?? true)
            {
                sb.AppendItem(item.BodyPartData.FormKeyNullable, "BodyPartData");
            }
            if (true)
            {
                item.BehaviorGraph.Print(sb, "BehaviorGraph");
            }
            if (printMask?.ImpactMaterialType ?? true)
            {
                sb.AppendItem(item.ImpactMaterialType.FormKeyNullable, "ImpactMaterialType");
            }
            if (printMask?.ImpactDataSet ?? true)
            {
                sb.AppendItem(item.ImpactDataSet.FormKeyNullable, "ImpactDataSet");
            }
            if (printMask?.DispemberBloodArt ?? true)
            {
                sb.AppendItem(item.DispemberBloodArt.FormKeyNullable, "DispemberBloodArt");
            }
            if (printMask?.MeatCapTextureSet ?? true)
            {
                sb.AppendItem(item.MeatCapTextureSet.FormKeyNullable, "MeatCapTextureSet");
            }
            if (printMask?.CollarTextureSet ?? true)
            {
                sb.AppendItem(item.CollarTextureSet.FormKeyNullable, "CollarTextureSet");
            }
            if (printMask?.SoundOpenCorpse ?? true)
            {
                sb.AppendItem(item.SoundOpenCorpse.FormKeyNullable, "SoundOpenCorpse");
            }
            if (printMask?.SoundCloseCorpse ?? true)
            {
                sb.AppendItem(item.SoundCloseCorpse.FormKeyNullable, "SoundCloseCorpse");
            }
            if ((printMask?.BipedObjects?.Overall ?? true)
                && item.BipedObjects is {} BipedObjectsItem)
            {
                sb.AppendLine("BipedObjects =>");
                using (sb.Brace())
                {
                    foreach (var subItem in BipedObjectsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            subItem.Value?.Print(sb, "Value");
                        }
                    }
                }
            }
            if (printMask?.MovementDataOverrides?.Overall ?? true)
            {
                sb.AppendLine("MovementDataOverrides =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MovementDataOverrides)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.EquipmentFlags ?? true)
                && item.EquipmentFlags is {} EquipmentFlagsItem)
            {
                sb.AppendItem(EquipmentFlagsItem, "EquipmentFlags");
            }
            if (printMask?.EquipmentSlots?.Overall ?? true)
            {
                sb.AppendLine("EquipmentSlots =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.EquipmentSlots)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.UnarmedWeapon ?? true)
            {
                sb.AppendItem(item.UnarmedWeapon.FormKeyNullable, "UnarmedWeapon");
            }
            if (printMask?.FaceFxPhonemes?.Overall ?? true)
            {
                item.FaceFxPhonemes?.Print(sb, "FaceFxPhonemes");
            }
            if (printMask?.BaseMovementDefault ?? true)
            {
                sb.AppendItem(item.BaseMovementDefault.FormKeyNullable, "BaseMovementDefault");
            }
            if (printMask?.BaseMovementDefaultSwim ?? true)
            {
                sb.AppendItem(item.BaseMovementDefaultSwim.FormKeyNullable, "BaseMovementDefaultSwim");
            }
            if (printMask?.BaseMovementDefaultFly ?? true)
            {
                sb.AppendItem(item.BaseMovementDefaultFly.FormKeyNullable, "BaseMovementDefaultFly");
            }
            if (printMask?.BaseMovementDefaultSneak ?? true)
            {
                sb.AppendItem(item.BaseMovementDefaultSneak.FormKeyNullable, "BaseMovementDefaultSneak");
            }
            if ((printMask?.HeadData?.Overall ?? true)
                && item.HeadData is {} HeadDataItem)
            {
                HeadDataItem?.Print(sb, "HeadData");
            }
            if (printMask?.MorphRace ?? true)
            {
                sb.AppendItem(item.MorphRace.FormKeyNullable, "MorphRace");
            }
            if (printMask?.ArmorRace ?? true)
            {
                sb.AppendItem(item.ArmorRace.FormKeyNullable, "ArmorRace");
            }
            if (printMask?.SubgraphTemplateRace ?? true)
            {
                sb.AppendItem(item.SubgraphTemplateRace.FormKeyNullable, "SubgraphTemplateRace");
            }
            if (printMask?.SubgraphAdditiveRace ?? true)
            {
                sb.AppendItem(item.SubgraphAdditiveRace.FormKeyNullable, "SubgraphAdditiveRace");
            }
            if (printMask?.Subgraphs?.Overall ?? true)
            {
                sb.AppendLine("Subgraphs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Subgraphs)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.IdleChatterTimeMin ?? true)
                && item.IdleChatterTimeMin is {} IdleChatterTimeMinItem)
            {
                sb.AppendItem(IdleChatterTimeMinItem, "IdleChatterTimeMin");
            }
            if ((printMask?.IdleChatterTimeMax ?? true)
                && item.IdleChatterTimeMax is {} IdleChatterTimeMaxItem)
            {
                sb.AppendItem(IdleChatterTimeMaxItem, "IdleChatterTimeMax");
            }
            if (printMask?.MorphValues?.Overall ?? true)
            {
                sb.AppendLine("MorphValues =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MorphValues)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.MorphValuesLastIndex ?? true)
                && item.MorphValuesLastIndex is {} MorphValuesLastIndexItem)
            {
                sb.AppendItem(MorphValuesLastIndexItem, "MorphValuesLastIndex");
            }
            if ((printMask?.HairColorLookupTexture ?? true)
                && item.HairColorLookupTexture is {} HairColorLookupTextureItem)
            {
                sb.AppendItem(HairColorLookupTextureItem, "HairColorLookupTexture");
            }
            if ((printMask?.HairColorExtendedLookupTexture ?? true)
                && item.HairColorExtendedLookupTexture is {} HairColorExtendedLookupTextureItem)
            {
                sb.AppendItem(HairColorExtendedLookupTextureItem, "HairColorExtendedLookupTexture");
            }
            if (printMask?.DialogueQuest ?? true)
            {
                sb.AppendItem(item.DialogueQuest.FormKeyNullable, "DialogueQuest");
            }
            if (true)
            {
                item.BoneData.Print(sb, "BoneData");
            }
        }
        
        public static Race_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (Race_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (Race_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (Race_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Race_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceGetter? lhs,
            IRaceGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AnimationSound) ?? true))
            {
                if (!lhs.AnimationSound.Equals(rhs.AnimationSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ActorEffect) ?? true))
            {
                if (!lhs.ActorEffect.SequenceEqualNullable(rhs.ActorEffect)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Skin) ?? true))
            {
                if (!lhs.Skin.Equals(rhs.Skin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BipedBodyTemplate) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BipedBodyTemplate, rhs.BipedBodyTemplate, out var lhsBipedBodyTemplate, out var rhsBipedBodyTemplate, out var isBipedBodyTemplateEqual))
                {
                    if (!((BipedBodyTemplateCommon)((IBipedBodyTemplateGetter)lhsBipedBodyTemplate).CommonInstance()!).Equals(lhsBipedBodyTemplate, rhsBipedBodyTemplate, equalsMask?.GetSubCrystal((int)Race_FieldIndex.BipedBodyTemplate))) return false;
                }
                else if (!isBipedBodyTemplateEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqualNullable(rhs.Properties, (l, r) => ((ObjectPropertyCommon)((IObjectPropertyGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.Properties)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AttachParentSlots) ?? true))
            {
                if (!lhs.AttachParentSlots.SequenceEqualNullable(rhs.AttachParentSlots)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Height) ?? true))
            {
                if (!Equals(lhs.Height, rhs.Height)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultWeight) ?? true))
            {
                if (!Equals(lhs.DefaultWeight, rhs.DefaultWeight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AccelerationRate) ?? true))
            {
                if (!lhs.AccelerationRate.EqualsWithin(rhs.AccelerationRate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DecelerationRate) ?? true))
            {
                if (!lhs.DecelerationRate.EqualsWithin(rhs.DecelerationRate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Size) ?? true))
            {
                if (lhs.Size != rhs.Size) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Unknown) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown.Span, rhs.Unknown.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.InjuredHealthPercent) ?? true))
            {
                if (!lhs.InjuredHealthPercent.EqualsWithin(rhs.InjuredHealthPercent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ShieldBipedObject) ?? true))
            {
                if (lhs.ShieldBipedObject != rhs.ShieldBipedObject) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BeardBipedObject) ?? true))
            {
                if (lhs.BeardBipedObject != rhs.BeardBipedObject) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BodyBipedObject) ?? true))
            {
                if (lhs.BodyBipedObject != rhs.BodyBipedObject) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AimAngleTolerance) ?? true))
            {
                if (!lhs.AimAngleTolerance.EqualsWithin(rhs.AimAngleTolerance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FlightRadius) ?? true))
            {
                if (!lhs.FlightRadius.EqualsWithin(rhs.FlightRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AngularAccelerationRate) ?? true))
            {
                if (!lhs.AngularAccelerationRate.EqualsWithin(rhs.AngularAccelerationRate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AngularTolerance) ?? true))
            {
                if (!lhs.AngularTolerance.EqualsWithin(rhs.AngularTolerance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Unknown2) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown2.Span, rhs.Unknown2.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.PipboyBipedObject) ?? true))
            {
                if (lhs.PipboyBipedObject != rhs.PipboyBipedObject) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.XPValue) ?? true))
            {
                if (lhs.XPValue != rhs.XPValue) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableDebrisScale) ?? true))
            {
                if (!lhs.SeverableDebrisScale.EqualsWithin(rhs.SeverableDebrisScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableDebrisCount) ?? true))
            {
                if (lhs.SeverableDebrisCount != rhs.SeverableDebrisCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableDecalCount) ?? true))
            {
                if (lhs.SeverableDecalCount != rhs.SeverableDecalCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDebrisScale) ?? true))
            {
                if (!lhs.ExplodableDebrisScale.EqualsWithin(rhs.ExplodableDebrisScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDebrisCount) ?? true))
            {
                if (lhs.ExplodableDebrisCount != rhs.ExplodableDebrisCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDecalCount) ?? true))
            {
                if (lhs.ExplodableDecalCount != rhs.ExplodableDecalCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableExplosion) ?? true))
            {
                if (!lhs.SeverableExplosion.Equals(rhs.SeverableExplosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableDebris) ?? true))
            {
                if (!lhs.SeverableDebris.Equals(rhs.SeverableDebris)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableImpactDataSet) ?? true))
            {
                if (!lhs.SeverableImpactDataSet.Equals(rhs.SeverableImpactDataSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableExplosion) ?? true))
            {
                if (!lhs.ExplodableExplosion.Equals(rhs.ExplodableExplosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDebris) ?? true))
            {
                if (!lhs.ExplodableDebris.Equals(rhs.ExplodableDebris)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableImpactDataSet) ?? true))
            {
                if (!lhs.ExplodableImpactDataSet.Equals(rhs.ExplodableImpactDataSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDebrisScale) ?? true))
            {
                if (!lhs.OnCrippleDebrisScale.EqualsWithin(rhs.OnCrippleDebrisScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDebrisCount) ?? true))
            {
                if (lhs.OnCrippleDebrisCount != rhs.OnCrippleDebrisCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDecalCount) ?? true))
            {
                if (lhs.OnCrippleDecalCount != rhs.OnCrippleDecalCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleExplosion) ?? true))
            {
                if (!lhs.OnCrippleExplosion.Equals(rhs.OnCrippleExplosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDebris) ?? true))
            {
                if (!lhs.OnCrippleDebris.Equals(rhs.OnCrippleDebris)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleImpactDataSet) ?? true))
            {
                if (!lhs.OnCrippleImpactDataSet.Equals(rhs.OnCrippleImpactDataSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableSubsegmentExplosion) ?? true))
            {
                if (!lhs.ExplodableSubsegmentExplosion.Equals(rhs.ExplodableSubsegmentExplosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.OrientationLimitsPitch) ?? true))
            {
                if (!lhs.OrientationLimitsPitch.EqualsWithin(rhs.OrientationLimitsPitch)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.OrientationLimitsRoll) ?? true))
            {
                if (!lhs.OrientationLimitsRoll.EqualsWithin(rhs.OrientationLimitsRoll)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SkeletalModel) ?? true))
            {
                if (!Equals(lhs.SkeletalModel, rhs.SkeletalModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypeNames) ?? true))
            {
                if (!lhs.MovementTypeNames.SequenceEqualNullable(rhs.MovementTypeNames)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Voices) ?? true))
            {
                if (!Equals(lhs.Voices, rhs.Voices)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHairColors) ?? true))
            {
                if (!Equals(lhs.DefaultHairColors, rhs.DefaultHairColors)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.NumberOfTintsInList) ?? true))
            {
                if (lhs.NumberOfTintsInList != rhs.NumberOfTintsInList) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenMainClamp) ?? true))
            {
                if (!lhs.FacegenMainClamp.EqualsWithin(rhs.FacegenMainClamp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenFaceClamp) ?? true))
            {
                if (!lhs.FacegenFaceClamp.EqualsWithin(rhs.FacegenFaceClamp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AttackRace) ?? true))
            {
                if (!lhs.AttackRace.Equals(rhs.AttackRace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Attacks) ?? true))
            {
                if (!lhs.Attacks.SequenceEqual(rhs.Attacks, (l, r) => ((AttackCommon)((IAttackGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.Attacks)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BodyData) ?? true))
            {
                if (!Equals(lhs.BodyData, rhs.BodyData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BodyPartData) ?? true))
            {
                if (!lhs.BodyPartData.Equals(rhs.BodyPartData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BehaviorGraph) ?? true))
            {
                if (!Equals(lhs.BehaviorGraph, rhs.BehaviorGraph)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ImpactMaterialType) ?? true))
            {
                if (!lhs.ImpactMaterialType.Equals(rhs.ImpactMaterialType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ImpactDataSet) ?? true))
            {
                if (!lhs.ImpactDataSet.Equals(rhs.ImpactDataSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DispemberBloodArt) ?? true))
            {
                if (!lhs.DispemberBloodArt.Equals(rhs.DispemberBloodArt)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MeatCapTextureSet) ?? true))
            {
                if (!lhs.MeatCapTextureSet.Equals(rhs.MeatCapTextureSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.CollarTextureSet) ?? true))
            {
                if (!lhs.CollarTextureSet.Equals(rhs.CollarTextureSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SoundOpenCorpse) ?? true))
            {
                if (!lhs.SoundOpenCorpse.Equals(rhs.SoundOpenCorpse)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SoundCloseCorpse) ?? true))
            {
                if (!lhs.SoundCloseCorpse.Equals(rhs.SoundCloseCorpse)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BipedObjects) ?? true))
            {
                if (!lhs.BipedObjects.SequenceEqualNullable(rhs.BipedObjects)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MovementDataOverrides) ?? true))
            {
                if (!lhs.MovementDataOverrides.SequenceEqual(rhs.MovementDataOverrides, (l, r) => ((MovementDataOverrideCommon)((IMovementDataOverrideGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.MovementDataOverrides)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentFlags) ?? true))
            {
                if (lhs.EquipmentFlags != rhs.EquipmentFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentSlots) ?? true))
            {
                if (!lhs.EquipmentSlots.SequenceEqual(rhs.EquipmentSlots, (l, r) => ((EquipmentSlotCommon)((IEquipmentSlotGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.EquipmentSlots)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.UnarmedWeapon) ?? true))
            {
                if (!lhs.UnarmedWeapon.Equals(rhs.UnarmedWeapon)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FaceFxPhonemes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FaceFxPhonemes, rhs.FaceFxPhonemes, out var lhsFaceFxPhonemes, out var rhsFaceFxPhonemes, out var isFaceFxPhonemesEqual))
                {
                    if (!((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)lhsFaceFxPhonemes).CommonInstance()!).Equals(lhsFaceFxPhonemes, rhsFaceFxPhonemes, equalsMask?.GetSubCrystal((int)Race_FieldIndex.FaceFxPhonemes))) return false;
                }
                else if (!isFaceFxPhonemesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefault) ?? true))
            {
                if (!lhs.BaseMovementDefault.Equals(rhs.BaseMovementDefault)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSwim) ?? true))
            {
                if (!lhs.BaseMovementDefaultSwim.Equals(rhs.BaseMovementDefaultSwim)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultFly) ?? true))
            {
                if (!lhs.BaseMovementDefaultFly.Equals(rhs.BaseMovementDefaultFly)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSneak) ?? true))
            {
                if (!lhs.BaseMovementDefaultSneak.Equals(rhs.BaseMovementDefaultSneak)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.HeadData) ?? true))
            {
                if (!Equals(lhs.HeadData, rhs.HeadData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MorphRace) ?? true))
            {
                if (!lhs.MorphRace.Equals(rhs.MorphRace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ArmorRace) ?? true))
            {
                if (!lhs.ArmorRace.Equals(rhs.ArmorRace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SubgraphTemplateRace) ?? true))
            {
                if (!lhs.SubgraphTemplateRace.Equals(rhs.SubgraphTemplateRace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SubgraphAdditiveRace) ?? true))
            {
                if (!lhs.SubgraphAdditiveRace.Equals(rhs.SubgraphAdditiveRace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Subgraphs) ?? true))
            {
                if (!lhs.Subgraphs.SequenceEqual(rhs.Subgraphs, (l, r) => ((SubgraphCommon)((ISubgraphGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.Subgraphs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.IdleChatterTimeMin) ?? true))
            {
                if (!lhs.IdleChatterTimeMin.EqualsWithin(rhs.IdleChatterTimeMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.IdleChatterTimeMax) ?? true))
            {
                if (!lhs.IdleChatterTimeMax.EqualsWithin(rhs.IdleChatterTimeMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MorphValues) ?? true))
            {
                if (!lhs.MorphValues.SequenceEqual(rhs.MorphValues, (l, r) => ((MorphValueCommon)((IMorphValueGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.MorphValues)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MorphValuesLastIndex) ?? true))
            {
                if (lhs.MorphValuesLastIndex != rhs.MorphValuesLastIndex) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.HairColorLookupTexture) ?? true))
            {
                if (!string.Equals(lhs.HairColorLookupTexture, rhs.HairColorLookupTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.HairColorExtendedLookupTexture) ?? true))
            {
                if (!string.Equals(lhs.HairColorExtendedLookupTexture, rhs.HairColorExtendedLookupTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DialogueQuest) ?? true))
            {
                if (!lhs.DialogueQuest.Equals(rhs.DialogueQuest)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BoneData) ?? true))
            {
                if (!Equals(lhs.BoneData, rhs.BoneData)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IRaceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.AnimationSound);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Description);
            hash.Add(item.ActorEffect);
            hash.Add(item.Skin);
            if (item.BipedBodyTemplate is {} BipedBodyTemplateitem)
            {
                hash.Add(BipedBodyTemplateitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.Properties);
            hash.Add(item.AttachParentSlots);
            hash.Add(HashCode.Combine(item.Height.Male, item.Height.Female));
            hash.Add(HashCode.Combine(item.DefaultWeight.Male, item.DefaultWeight.Female));
            hash.Add(item.Flags);
            hash.Add(item.AccelerationRate);
            hash.Add(item.DecelerationRate);
            hash.Add(item.Size);
            hash.Add(item.Unknown);
            hash.Add(item.InjuredHealthPercent);
            hash.Add(item.ShieldBipedObject);
            hash.Add(item.BeardBipedObject);
            hash.Add(item.BodyBipedObject);
            hash.Add(item.AimAngleTolerance);
            hash.Add(item.FlightRadius);
            hash.Add(item.AngularAccelerationRate);
            hash.Add(item.AngularTolerance);
            hash.Add(item.Unknown2);
            hash.Add(item.PipboyBipedObject);
            hash.Add(item.XPValue);
            hash.Add(item.SeverableDebrisScale);
            hash.Add(item.SeverableDebrisCount);
            hash.Add(item.SeverableDecalCount);
            hash.Add(item.ExplodableDebrisScale);
            hash.Add(item.ExplodableDebrisCount);
            hash.Add(item.ExplodableDecalCount);
            hash.Add(item.SeverableExplosion);
            hash.Add(item.SeverableDebris);
            hash.Add(item.SeverableImpactDataSet);
            hash.Add(item.ExplodableExplosion);
            hash.Add(item.ExplodableDebris);
            hash.Add(item.ExplodableImpactDataSet);
            hash.Add(item.OnCrippleDebrisScale);
            hash.Add(item.OnCrippleDebrisCount);
            hash.Add(item.OnCrippleDecalCount);
            hash.Add(item.OnCrippleExplosion);
            hash.Add(item.OnCrippleDebris);
            hash.Add(item.OnCrippleImpactDataSet);
            hash.Add(item.ExplodableSubsegmentExplosion);
            hash.Add(item.OrientationLimitsPitch);
            hash.Add(item.OrientationLimitsRoll);
            if (item.SkeletalModel is {} SkeletalModelitem)
            {
                hash.Add(HashCode.Combine(SkeletalModelitem.Male, SkeletalModelitem.Female));
            }
            hash.Add(item.MovementTypeNames);
            hash.Add(HashCode.Combine(item.Voices.Male, item.Voices.Female));
            if (item.DefaultHairColors is {} DefaultHairColorsitem)
            {
                hash.Add(HashCode.Combine(DefaultHairColorsitem.Male, DefaultHairColorsitem.Female));
            }
            if (item.NumberOfTintsInList is {} NumberOfTintsInListitem)
            {
                hash.Add(NumberOfTintsInListitem);
            }
            hash.Add(item.FacegenMainClamp);
            hash.Add(item.FacegenFaceClamp);
            hash.Add(item.AttackRace);
            hash.Add(item.Attacks);
            hash.Add(HashCode.Combine(item.BodyData.Male, item.BodyData.Female));
            hash.Add(item.BodyPartData);
            hash.Add(HashCode.Combine(item.BehaviorGraph.Male, item.BehaviorGraph.Female));
            hash.Add(item.ImpactMaterialType);
            hash.Add(item.ImpactDataSet);
            hash.Add(item.DispemberBloodArt);
            hash.Add(item.MeatCapTextureSet);
            hash.Add(item.CollarTextureSet);
            hash.Add(item.SoundOpenCorpse);
            hash.Add(item.SoundCloseCorpse);
            hash.Add(item.BipedObjects);
            hash.Add(item.MovementDataOverrides);
            if (item.EquipmentFlags is {} EquipmentFlagsitem)
            {
                hash.Add(EquipmentFlagsitem);
            }
            hash.Add(item.EquipmentSlots);
            hash.Add(item.UnarmedWeapon);
            hash.Add(item.FaceFxPhonemes);
            hash.Add(item.BaseMovementDefault);
            hash.Add(item.BaseMovementDefaultSwim);
            hash.Add(item.BaseMovementDefaultFly);
            hash.Add(item.BaseMovementDefaultSneak);
            if (item.HeadData is {} HeadDataitem)
            {
                hash.Add(HashCode.Combine(HeadDataitem.Male, HeadDataitem.Female));
            }
            hash.Add(item.MorphRace);
            hash.Add(item.ArmorRace);
            hash.Add(item.SubgraphTemplateRace);
            hash.Add(item.SubgraphAdditiveRace);
            hash.Add(item.Subgraphs);
            if (item.IdleChatterTimeMin is {} IdleChatterTimeMinitem)
            {
                hash.Add(IdleChatterTimeMinitem);
            }
            if (item.IdleChatterTimeMax is {} IdleChatterTimeMaxitem)
            {
                hash.Add(IdleChatterTimeMaxitem);
            }
            hash.Add(item.MorphValues);
            if (item.MorphValuesLastIndex is {} MorphValuesLastIndexitem)
            {
                hash.Add(MorphValuesLastIndexitem);
            }
            if (item.HairColorLookupTexture is {} HairColorLookupTextureitem)
            {
                hash.Add(HairColorLookupTextureitem);
            }
            if (item.HairColorExtendedLookupTexture is {} HairColorExtendedLookupTextureitem)
            {
                hash.Add(HairColorExtendedLookupTextureitem);
            }
            hash.Add(item.DialogueQuest);
            hash.Add(HashCode.Combine(item.BoneData.Male, item.BoneData.Female));
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Race.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IRaceGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.AnimationSound, out var AnimationSoundInfo))
            {
                yield return AnimationSoundInfo;
            }
            if (obj.ActorEffect is {} ActorEffectItem)
            {
                foreach (var item in ActorEffectItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.Skin, out var SkinInfo))
            {
                yield return SkinInfo;
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Properties is {} PropertiesItem)
            {
                foreach (var item in PropertiesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.AttachParentSlots is {} AttachParentSlotsItem)
            {
                foreach (var item in AttachParentSlotsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield return FormLinkInformation.Factory(obj.SeverableExplosion);
            yield return FormLinkInformation.Factory(obj.SeverableDebris);
            yield return FormLinkInformation.Factory(obj.SeverableImpactDataSet);
            yield return FormLinkInformation.Factory(obj.ExplodableExplosion);
            yield return FormLinkInformation.Factory(obj.ExplodableDebris);
            yield return FormLinkInformation.Factory(obj.ExplodableImpactDataSet);
            yield return FormLinkInformation.Factory(obj.OnCrippleExplosion);
            yield return FormLinkInformation.Factory(obj.OnCrippleDebris);
            yield return FormLinkInformation.Factory(obj.OnCrippleImpactDataSet);
            yield return FormLinkInformation.Factory(obj.ExplodableSubsegmentExplosion);
            if (obj.SkeletalModel is {} SkeletalModelItem)
            {
                foreach (var item in SkeletalModelItem.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Voices)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.DefaultHairColors is {} DefaultHairColorsItem)
            {
                foreach (var item in DefaultHairColorsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.AttackRace, out var AttackRaceInfo))
            {
                yield return AttackRaceInfo;
            }
            foreach (var item in obj.Attacks.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.BodyData.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.BodyPartData, out var BodyPartDataInfo))
            {
                yield return BodyPartDataInfo;
            }
            foreach (var item in obj.BehaviorGraph.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.ImpactMaterialType, out var ImpactMaterialTypeInfo))
            {
                yield return ImpactMaterialTypeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ImpactDataSet, out var ImpactDataSetInfo))
            {
                yield return ImpactDataSetInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DispemberBloodArt, out var DispemberBloodArtInfo))
            {
                yield return DispemberBloodArtInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MeatCapTextureSet, out var MeatCapTextureSetInfo))
            {
                yield return MeatCapTextureSetInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CollarTextureSet, out var CollarTextureSetInfo))
            {
                yield return CollarTextureSetInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SoundOpenCorpse, out var SoundOpenCorpseInfo))
            {
                yield return SoundOpenCorpseInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SoundCloseCorpse, out var SoundCloseCorpseInfo))
            {
                yield return SoundCloseCorpseInfo;
            }
            foreach (var item in obj.BipedObjects.Values.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return item;
            }
            foreach (var item in obj.MovementDataOverrides.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.EquipmentSlots.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.UnarmedWeapon, out var UnarmedWeaponInfo))
            {
                yield return UnarmedWeaponInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementDefault, out var BaseMovementDefaultInfo))
            {
                yield return BaseMovementDefaultInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementDefaultSwim, out var BaseMovementDefaultSwimInfo))
            {
                yield return BaseMovementDefaultSwimInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementDefaultFly, out var BaseMovementDefaultFlyInfo))
            {
                yield return BaseMovementDefaultFlyInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementDefaultSneak, out var BaseMovementDefaultSneakInfo))
            {
                yield return BaseMovementDefaultSneakInfo;
            }
            if (obj.HeadData is {} HeadDataItem)
            {
                foreach (var item in HeadDataItem.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.MorphRace, out var MorphRaceInfo))
            {
                yield return MorphRaceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ArmorRace, out var ArmorRaceInfo))
            {
                yield return ArmorRaceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SubgraphTemplateRace, out var SubgraphTemplateRaceInfo))
            {
                yield return SubgraphTemplateRaceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SubgraphAdditiveRace, out var SubgraphAdditiveRaceInfo))
            {
                yield return SubgraphAdditiveRaceInfo;
            }
            foreach (var item in obj.Subgraphs.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.DialogueQuest, out var DialogueQuestInfo))
            {
                yield return DialogueQuestInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public Race Duplicate(
            IRaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Race(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class RaceSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly RaceSetterTranslationCommon Instance = new RaceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRaceInternal item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AnimationSound) ?? true))
            {
                item.AnimationSound.SetTo(rhs.AnimationSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ActorEffect) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.ActorEffect);
                try
                {
                    if ((rhs.ActorEffect != null))
                    {
                        item.ActorEffect = 
                            rhs.ActorEffect
                                .Select(b => (IFormLinkGetter<ISpellRecordGetter>)new FormLink<ISpellRecordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
                    }
                    else
                    {
                        item.ActorEffect = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Skin) ?? true))
            {
                item.Skin.SetTo(rhs.Skin.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BipedBodyTemplate) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.BipedBodyTemplate);
                try
                {
                    if(rhs.BipedBodyTemplate is {} rhsBipedBodyTemplate)
                    {
                        item.BipedBodyTemplate = rhsBipedBodyTemplate.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.BipedBodyTemplate));
                    }
                    else
                    {
                        item.BipedBodyTemplate = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Properties);
                try
                {
                    if ((rhs.Properties != null))
                    {
                        item.Properties = 
                            rhs.Properties
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectProperty>();
                    }
                    else
                    {
                        item.Properties = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AttachParentSlots) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.AttachParentSlots);
                try
                {
                    if ((rhs.AttachParentSlots != null))
                    {
                        item.AttachParentSlots = 
                            rhs.AttachParentSlots
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.AttachParentSlots = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.Height = new GenderedItem<Single>(
                male: rhs.Height.Male,
                female: rhs.Height.Female);
            item.DefaultWeight = new GenderedItem<RaceWeight>(
                male: rhs.DefaultWeight.Male.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)),
                female: rhs.DefaultWeight.Female.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)));
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AccelerationRate) ?? true))
            {
                item.AccelerationRate = rhs.AccelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DecelerationRate) ?? true))
            {
                item.DecelerationRate = rhs.DecelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Size) ?? true))
            {
                item.Size = rhs.Size;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.InjuredHealthPercent) ?? true))
            {
                item.InjuredHealthPercent = rhs.InjuredHealthPercent;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ShieldBipedObject) ?? true))
            {
                item.ShieldBipedObject = rhs.ShieldBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BeardBipedObject) ?? true))
            {
                item.BeardBipedObject = rhs.BeardBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyBipedObject) ?? true))
            {
                item.BodyBipedObject = rhs.BodyBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AimAngleTolerance) ?? true))
            {
                item.AimAngleTolerance = rhs.AimAngleTolerance;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FlightRadius) ?? true))
            {
                item.FlightRadius = rhs.FlightRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AngularAccelerationRate) ?? true))
            {
                item.AngularAccelerationRate = rhs.AngularAccelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AngularTolerance) ?? true))
            {
                item.AngularTolerance = rhs.AngularTolerance;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.PipboyBipedObject) ?? true))
            {
                item.PipboyBipedObject = rhs.PipboyBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.XPValue) ?? true))
            {
                item.XPValue = rhs.XPValue;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableDebrisScale) ?? true))
            {
                item.SeverableDebrisScale = rhs.SeverableDebrisScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableDebrisCount) ?? true))
            {
                item.SeverableDebrisCount = rhs.SeverableDebrisCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableDecalCount) ?? true))
            {
                item.SeverableDecalCount = rhs.SeverableDecalCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDebrisScale) ?? true))
            {
                item.ExplodableDebrisScale = rhs.ExplodableDebrisScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDebrisCount) ?? true))
            {
                item.ExplodableDebrisCount = rhs.ExplodableDebrisCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDecalCount) ?? true))
            {
                item.ExplodableDecalCount = rhs.ExplodableDecalCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableExplosion) ?? true))
            {
                item.SeverableExplosion.SetTo(rhs.SeverableExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableDebris) ?? true))
            {
                item.SeverableDebris.SetTo(rhs.SeverableDebris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SeverableImpactDataSet) ?? true))
            {
                item.SeverableImpactDataSet.SetTo(rhs.SeverableImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableExplosion) ?? true))
            {
                item.ExplodableExplosion.SetTo(rhs.ExplodableExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableDebris) ?? true))
            {
                item.ExplodableDebris.SetTo(rhs.ExplodableDebris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableImpactDataSet) ?? true))
            {
                item.ExplodableImpactDataSet.SetTo(rhs.ExplodableImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDebrisScale) ?? true))
            {
                item.OnCrippleDebrisScale = rhs.OnCrippleDebrisScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDebrisCount) ?? true))
            {
                item.OnCrippleDebrisCount = rhs.OnCrippleDebrisCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDecalCount) ?? true))
            {
                item.OnCrippleDecalCount = rhs.OnCrippleDecalCount;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleExplosion) ?? true))
            {
                item.OnCrippleExplosion.SetTo(rhs.OnCrippleExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleDebris) ?? true))
            {
                item.OnCrippleDebris.SetTo(rhs.OnCrippleDebris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OnCrippleImpactDataSet) ?? true))
            {
                item.OnCrippleImpactDataSet.SetTo(rhs.OnCrippleImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ExplodableSubsegmentExplosion) ?? true))
            {
                item.ExplodableSubsegmentExplosion.SetTo(rhs.ExplodableSubsegmentExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OrientationLimitsPitch) ?? true))
            {
                item.OrientationLimitsPitch = rhs.OrientationLimitsPitch;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OrientationLimitsRoll) ?? true))
            {
                item.OrientationLimitsRoll = rhs.OrientationLimitsRoll;
            }
            if (rhs.SkeletalModel is not {} rhsSkeletalModelitem)
            {
                item.SkeletalModel = null;
            }
            else
            {
                item.SkeletalModel = new GenderedItem<SimpleModel?>(
                    male: rhsSkeletalModelitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsSkeletalModelitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypeNames) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MovementTypeNames);
                try
                {
                    item.MovementTypeNames.SetTo(rhs.MovementTypeNames);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.Voices = new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(
                male: new FormLink<IVoiceTypeGetter>(rhs.Voices.Male.FormKey),
                female: new FormLink<IVoiceTypeGetter>(rhs.Voices.Female.FormKey));
            if (rhs.DefaultHairColors is not {} rhsDefaultHairColorsitem)
            {
                item.DefaultHairColors = null;
            }
            else
            {
                item.DefaultHairColors = new GenderedItem<IFormLinkGetter<IColorRecordGetter>>(
                    male: new FormLink<IColorRecordGetter>(rhsDefaultHairColorsitem.Male.FormKey),
                    female: new FormLink<IColorRecordGetter>(rhsDefaultHairColorsitem.Female.FormKey));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.NumberOfTintsInList) ?? true))
            {
                item.NumberOfTintsInList = rhs.NumberOfTintsInList;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenMainClamp) ?? true))
            {
                item.FacegenMainClamp = rhs.FacegenMainClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenFaceClamp) ?? true))
            {
                item.FacegenFaceClamp = rhs.FacegenFaceClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AttackRace) ?? true))
            {
                item.AttackRace.SetTo(rhs.AttackRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Attacks) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Attacks);
                try
                {
                    item.Attacks.SetTo(
                        rhs.Attacks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.BodyData = new GenderedItem<BodyData?>(
                male: rhs.BodyData.Male?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)),
                female: rhs.BodyData.Female?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)));
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyPartData) ?? true))
            {
                item.BodyPartData.SetTo(rhs.BodyPartData.FormKeyNullable);
            }
            item.BehaviorGraph = new GenderedItem<Model?>(
                male: rhs.BehaviorGraph.Male?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)),
                female: rhs.BehaviorGraph.Female?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)));
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ImpactMaterialType) ?? true))
            {
                item.ImpactMaterialType.SetTo(rhs.ImpactMaterialType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ImpactDataSet) ?? true))
            {
                item.ImpactDataSet.SetTo(rhs.ImpactDataSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DispemberBloodArt) ?? true))
            {
                item.DispemberBloodArt.SetTo(rhs.DispemberBloodArt.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MeatCapTextureSet) ?? true))
            {
                item.MeatCapTextureSet.SetTo(rhs.MeatCapTextureSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.CollarTextureSet) ?? true))
            {
                item.CollarTextureSet.SetTo(rhs.CollarTextureSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SoundOpenCorpse) ?? true))
            {
                item.SoundOpenCorpse.SetTo(rhs.SoundOpenCorpse.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SoundCloseCorpse) ?? true))
            {
                item.SoundCloseCorpse.SetTo(rhs.SoundCloseCorpse.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BipedObjects) ?? true))
            {
                item.BipedObjects.SetTo(
                    rhs.BipedObjects
                        .Select((r) =>
                        {
                            var value = r.Value.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                            return new KeyValuePair<BipedObject, BipedObjectData>(r.Key, value);
                        }));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MovementDataOverrides) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MovementDataOverrides);
                try
                {
                    item.MovementDataOverrides.SetTo(
                        rhs.MovementDataOverrides
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentFlags) ?? true))
            {
                item.EquipmentFlags = rhs.EquipmentFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentSlots) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.EquipmentSlots);
                try
                {
                    item.EquipmentSlots.SetTo(
                        rhs.EquipmentSlots
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.UnarmedWeapon) ?? true))
            {
                item.UnarmedWeapon.SetTo(rhs.UnarmedWeapon.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceFxPhonemes) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceFxPhonemes);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceFxPhonemes) ?? true))
                    {
                        item.FaceFxPhonemes = rhs.FaceFxPhonemes.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.FaceFxPhonemes),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefault) ?? true))
            {
                item.BaseMovementDefault.SetTo(rhs.BaseMovementDefault.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSwim) ?? true))
            {
                item.BaseMovementDefaultSwim.SetTo(rhs.BaseMovementDefaultSwim.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultFly) ?? true))
            {
                item.BaseMovementDefaultFly.SetTo(rhs.BaseMovementDefaultFly.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSneak) ?? true))
            {
                item.BaseMovementDefaultSneak.SetTo(rhs.BaseMovementDefaultSneak.FormKeyNullable);
            }
            if (rhs.HeadData is not {} rhsHeadDataitem)
            {
                item.HeadData = null;
            }
            else
            {
                item.HeadData = new GenderedItem<HeadData?>(
                    male: rhsHeadDataitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsHeadDataitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MorphRace) ?? true))
            {
                item.MorphRace.SetTo(rhs.MorphRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ArmorRace) ?? true))
            {
                item.ArmorRace.SetTo(rhs.ArmorRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SubgraphTemplateRace) ?? true))
            {
                item.SubgraphTemplateRace.SetTo(rhs.SubgraphTemplateRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SubgraphAdditiveRace) ?? true))
            {
                item.SubgraphAdditiveRace.SetTo(rhs.SubgraphAdditiveRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Subgraphs) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Subgraphs);
                try
                {
                    item.Subgraphs.SetTo(
                        rhs.Subgraphs
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.IdleChatterTimeMin) ?? true))
            {
                item.IdleChatterTimeMin = rhs.IdleChatterTimeMin;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.IdleChatterTimeMax) ?? true))
            {
                item.IdleChatterTimeMax = rhs.IdleChatterTimeMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MorphValues) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MorphValues);
                try
                {
                    item.MorphValues.SetTo(
                        rhs.MorphValues
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MorphValuesLastIndex) ?? true))
            {
                item.MorphValuesLastIndex = rhs.MorphValuesLastIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.HairColorLookupTexture) ?? true))
            {
                item.HairColorLookupTexture = rhs.HairColorLookupTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.HairColorExtendedLookupTexture) ?? true))
            {
                item.HairColorExtendedLookupTexture = rhs.HairColorExtendedLookupTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DialogueQuest) ?? true))
            {
                item.DialogueQuest.SetTo(rhs.DialogueQuest.FormKeyNullable);
            }
            item.BoneData = new GenderedItem<ExtendedList<Bone>?>(
                male: rhs.BoneData.Male?.Select(x => x.DeepCopy()).ToExtendedList<Bone>(),
                female: rhs.BoneData.Female?.Select(x => x.DeepCopy()).ToExtendedList<Bone>());
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Race DeepCopy(
            IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Race
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class RaceBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly RaceBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IRaceGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            RaceBinaryWriteTranslation.WriteBinaryExtraNAM2(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IRaceGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AnimationSound,
                header: translationParams.ConvertToCustom(RecordTypes.STCP));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.ActorEffect,
                counterType: RecordTypes.SPCT,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.SPLO),
                subRecordPerItem: true,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellRecordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Skin,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            if (item.BipedBodyTemplate is {} BipedBodyTemplateItem)
            {
                ((BipedBodyTemplateBinaryWriteTranslation)((IBinaryItem)BipedBodyTemplateItem).BinaryWriteTranslator).Write(
                    item: BipedBodyTemplateItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectPropertyGetter>.Instance.Write(
                writer: writer,
                items: item.Properties,
                recordType: translationParams.ConvertToCustom(RecordTypes.PRPS),
                transl: (MutagenWriter subWriter, IObjectPropertyGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ObjectPropertyBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.AttachParentSlots,
                recordType: translationParams.ConvertToCustom(RecordTypes.APPR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                GenderedItemBinaryTranslation.Write(
                    writer: writer,
                    item: item.Height,
                    transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
                if (writer.MetaData.FormVersion!.Value >= 109)
                {
                    GenderedItemBinaryTranslation.Write(
                        writer: writer,
                        item: item.DefaultWeight,
                        transl: (MutagenWriter subWriter, IRaceWeightGetter subItem) =>
                        {
                            var Item = subItem;
                            ((RaceWeightBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                                item: Item,
                                writer: subWriter);
                        });
                }
                RaceBinaryWriteTranslation.WriteBinaryFlags(
                    writer: writer,
                    item: item);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AccelerationRate);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DecelerationRate);
                EnumBinaryTranslation<Size, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Size,
                    length: 4);
                ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Unknown);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.InjuredHealthPercent);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.ShieldBipedObject,
                    length: 4);
                if (writer.MetaData.FormVersion!.Value >= 124)
                {
                    EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                        writer,
                        item.BeardBipedObject,
                        length: 4);
                }
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.BodyBipedObject,
                    length: 4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AimAngleTolerance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FlightRadius);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AngularAccelerationRate);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AngularTolerance);
                RaceBinaryWriteTranslation.WriteBinaryFlags2(
                    writer: writer,
                    item: item);
                ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Unknown2);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.PipboyBipedObject,
                    length: 4);
                writer.Write(item.XPValue);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SeverableDebrisScale);
                writer.Write(item.SeverableDebrisCount);
                writer.Write(item.SeverableDecalCount);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ExplodableDebrisScale);
                writer.Write(item.ExplodableDebrisCount);
                writer.Write(item.ExplodableDecalCount);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SeverableExplosion);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SeverableDebris);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SeverableImpactDataSet);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableExplosion);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableDebris);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableImpactDataSet);
                if (writer.MetaData.FormVersion!.Value >= 96)
                {
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.OnCrippleDebrisScale);
                }
                if (writer.MetaData.FormVersion!.Value >= 96)
                {
                    writer.Write(item.OnCrippleDebrisCount);
                }
                if (writer.MetaData.FormVersion!.Value >= 96)
                {
                    writer.Write(item.OnCrippleDecalCount);
                }
                if (writer.MetaData.FormVersion!.Value >= 96)
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.OnCrippleExplosion);
                }
                if (writer.MetaData.FormVersion!.Value >= 96)
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.OnCrippleDebris);
                }
                if (writer.MetaData.FormVersion!.Value >= 96)
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.OnCrippleImpactDataSet);
                }
                if (writer.MetaData.FormVersion!.Value >= 118)
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.ExplodableSubsegmentExplosion);
                }
                if (writer.MetaData.FormVersion!.Value >= 98)
                {
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.OrientationLimitsPitch);
                }
                if (writer.MetaData.FormVersion!.Value >= 98)
                {
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.OrientationLimitsRoll);
                }
            }
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.SkeletalModel,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                transl: (MutagenWriter subWriter, ISimpleModelGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((SimpleModelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv.With(Race_Registration.SkeletalModelConverter));
                    }
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.MovementTypeNames,
                transl: (MutagenWriter subWriter, String subItem) =>
                {
                    StringBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.MTNM),
                        binaryType: StringBinaryType.Plain);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.Voices,
                recordType: RecordTypes.VTCK,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IVoiceTypeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.DefaultHairColors,
                recordType: RecordTypes.HCLF,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IColorRecordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NumberOfTintsInList,
                header: translationParams.ConvertToCustom(RecordTypes.TINL));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FacegenMainClamp,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FacegenFaceClamp,
                header: translationParams.ConvertToCustom(RecordTypes.UNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackRace,
                header: translationParams.ConvertToCustom(RecordTypes.ATKR));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAttackGetter>.Instance.Write(
                writer: writer,
                items: item.Attacks,
                transl: (MutagenWriter subWriter, IAttackGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AttackBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.BodyData,
                markerType: RecordTypes.NAM1,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                transl: (MutagenWriter subWriter, IBodyDataGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((BodyDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BodyPartData,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.BehaviorGraph,
                markerType: RecordTypes.NAM3,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                transl: (MutagenWriter subWriter, IModelGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((ModelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ImpactMaterialType,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ImpactDataSet,
                header: translationParams.ConvertToCustom(RecordTypes.NAM5));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DispemberBloodArt,
                header: translationParams.ConvertToCustom(RecordTypes.NAM7));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MeatCapTextureSet,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CollarTextureSet,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SoundOpenCorpse,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SoundCloseCorpse,
                header: translationParams.ConvertToCustom(RecordTypes.LNAM));
            RaceBinaryWriteTranslation.WriteBinaryBipedObjects(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IMovementDataOverrideGetter>.Instance.Write(
                writer: writer,
                items: item.MovementDataOverrides,
                transl: (MutagenWriter subWriter, IMovementDataOverrideGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((MovementDataOverrideBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            EnumBinaryTranslation<EquipTypeFlag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.EquipmentFlags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IEquipmentSlotGetter>.Instance.Write(
                writer: writer,
                items: item.EquipmentSlots,
                transl: (MutagenWriter subWriter, IEquipmentSlotGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((EquipmentSlotBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UnarmedWeapon,
                header: translationParams.ConvertToCustom(RecordTypes.UNWP));
            RaceBinaryWriteTranslation.WriteBinaryFaceFxPhonemesListingParsing(
                writer: writer,
                item: item);
            RaceBinaryWriteTranslation.WriteBinaryFaceFxPhonemesRawParsing(
                writer: writer,
                item: item);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefault,
                header: translationParams.ConvertToCustom(RecordTypes.WKMV));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultSwim,
                header: translationParams.ConvertToCustom(RecordTypes.SWMV));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultFly,
                header: translationParams.ConvertToCustom(RecordTypes.FLMV));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultSneak,
                header: translationParams.ConvertToCustom(RecordTypes.SNMV));
            GenderedItemBinaryTranslation.WriteMarkerAheadOfItem(
                writer: writer,
                item: item.HeadData,
                markerType: RecordTypes.NAM0,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                femaleRecordConverter: Race_Registration.HeadDataFemaleConverter,
                transl: (MutagenWriter subWriter, IHeadDataGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((HeadDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MorphRace,
                header: translationParams.ConvertToCustom(RecordTypes.NAM8));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ArmorRace,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SubgraphTemplateRace,
                header: translationParams.ConvertToCustom(RecordTypes.SRAC));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SubgraphAdditiveRace,
                header: translationParams.ConvertToCustom(RecordTypes.SADD));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ISubgraphGetter>.Instance.Write(
                writer: writer,
                items: item.Subgraphs,
                transl: (MutagenWriter subWriter, ISubgraphGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((SubgraphBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.IdleChatterTimeMin,
                header: translationParams.ConvertToCustom(RecordTypes.PTOP));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.IdleChatterTimeMax,
                header: translationParams.ConvertToCustom(RecordTypes.NTOP));
            RaceBinaryWriteTranslation.WriteBinaryMorphValues(
                writer: writer,
                item: item);
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MorphValuesLastIndex,
                header: translationParams.ConvertToCustom(RecordTypes.MLSI));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HairColorLookupTexture,
                header: translationParams.ConvertToCustom(RecordTypes.HNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HairColorExtendedLookupTexture,
                header: translationParams.ConvertToCustom(RecordTypes.HLTX),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DialogueQuest,
                header: translationParams.ConvertToCustom(RecordTypes.QSTI));
            RaceBinaryWriteTranslation.WriteBinaryBoneDataParse(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFlagsCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryFlags(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryFlagsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFlags2Custom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryFlags2(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryFlags2Custom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryExtraNAM2Custom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryExtraNAM2(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryExtraNAM2Custom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryBipedObjectsCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryBipedObjects(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryBipedObjectsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFaceFxPhonemesListingParsingCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryFaceFxPhonemesListingParsing(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryFaceFxPhonemesListingParsingCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFaceFxPhonemesRawParsingCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryFaceFxPhonemesRawParsing(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryFaceFxPhonemesRawParsingCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryMorphValuesCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryMorphValues(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryMorphValuesCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryBoneDataParseCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryBoneDataParse(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryBoneDataParseCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IRaceGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.RACE,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class RaceBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly RaceBinaryCreateTranslation Instance = new RaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.RACE;
        public static void FillBinaryStructs(
            IRaceInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            RaceBinaryCreateTranslation.FillBinaryExtraNAM2Custom(
                frame: frame,
                item: item);
        }

        public static ParseResult FillBinaryRecordTypes(
            IRaceInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.STCP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.AnimationSound;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Race_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Race_FieldIndex.Description;
                }
                case RecordTypeInts.SPLO:
                case RecordTypeInts.SPCT:
                {
                    item.ActorEffect = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.SPCT),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.SPLO),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
                    return (int)Race_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Skin.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.Skin;
                }
                case RecordTypeInts.BOD2:
                {
                    item.BipedBodyTemplate = Mutagen.Bethesda.Fallout4.BipedBodyTemplate.CreateFromBinary(frame: frame);
                    return (int)Race_FieldIndex.BipedBodyTemplate;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Race_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Properties = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectProperty>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ObjectProperty.TryCreateFromBinary)
                        .CastExtendedList<ObjectProperty>();
                    return (int)Race_FieldIndex.Properties;
                }
                case RecordTypeInts.APPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttachParentSlots = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Race_FieldIndex.AttachParentSlots;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 8) return null;
                    item.Height = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<Single>(
                        frame: frame,
                        transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
                    if (dataFrame.Remaining < 24) return null;
                    if (frame.MetaData.FormVersion!.Value >= 109)
                    {
                        item.DefaultWeight = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<RaceWeight>(
                            frame: frame,
                            transl: RaceWeight.TryCreateFromBinary);
                    }
                    RaceBinaryCreateTranslation.FillBinaryFlagsCustom(
                        frame: dataFrame,
                        item: item);
                    if (dataFrame.Remaining < 4) return null;
                    item.AccelerationRate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DecelerationRate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Size = EnumBinaryTranslation<Size, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    item.Unknown = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(8));
                    if (dataFrame.Remaining < 4) return null;
                    item.InjuredHealthPercent = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ShieldBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    if (frame.MetaData.FormVersion!.Value >= 124)
                    {
                        item.BeardBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                            reader: dataFrame,
                            length: 4);
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.BodyBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.AimAngleTolerance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FlightRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AngularAccelerationRate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AngularTolerance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    RaceBinaryCreateTranslation.FillBinaryFlags2Custom(
                        frame: dataFrame,
                        item: item);
                    item.Unknown2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(36));
                    if (dataFrame.Remaining < 4) return null;
                    item.PipboyBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 2) return null;
                    item.XPValue = dataFrame.ReadInt16();
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableDebrisScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.SeverableDebrisCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.SeverableDecalCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableDebrisScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.ExplodableDebrisCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.ExplodableDecalCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableDebris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableDebris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    if (frame.MetaData.FormVersion!.Value >= 96)
                    {
                        item.OnCrippleDebrisScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    }
                    if (dataFrame.Remaining < 1) return null;
                    if (frame.MetaData.FormVersion!.Value >= 96)
                    {
                        item.OnCrippleDebrisCount = dataFrame.ReadUInt8();
                    }
                    if (dataFrame.Remaining < 1) return null;
                    if (frame.MetaData.FormVersion!.Value >= 96)
                    {
                        item.OnCrippleDecalCount = dataFrame.ReadUInt8();
                    }
                    if (dataFrame.Remaining < 4) return null;
                    if (frame.MetaData.FormVersion!.Value >= 96)
                    {
                        item.OnCrippleExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    }
                    if (dataFrame.Remaining < 4) return null;
                    if (frame.MetaData.FormVersion!.Value >= 96)
                    {
                        item.OnCrippleDebris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    }
                    if (dataFrame.Remaining < 4) return null;
                    if (frame.MetaData.FormVersion!.Value >= 96)
                    {
                        item.OnCrippleImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    }
                    if (dataFrame.Remaining < 4) return null;
                    if (frame.MetaData.FormVersion!.Value >= 118)
                    {
                        item.ExplodableSubsegmentExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    }
                    if (dataFrame.Remaining < 4) return null;
                    if (frame.MetaData.FormVersion!.Value >= 98)
                    {
                        item.OrientationLimitsPitch = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    }
                    if (dataFrame.Remaining < 4) return null;
                    if (frame.MetaData.FormVersion!.Value >= 98)
                    {
                        item.OrientationLimitsRoll = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    }
                    return (int)Race_FieldIndex.OrientationLimitsRoll;
                }
                case RecordTypeInts.MNAM:
                case RecordTypeInts.FNAM:
                {
                    item.SkeletalModel = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<SimpleModel>(
                        frame: frame,
                        maleMarker: RecordTypes.MNAM,
                        femaleMarker: RecordTypes.FNAM,
                        translationParams: Race_Registration.SkeletalModelConverter,
                        transl: SimpleModel.TryCreateFromBinary);
                    return (int)Race_FieldIndex.SkeletalModel;
                }
                case RecordTypeInts.MTNM:
                {
                    item.MovementTypeNames.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.MTNM),
                            transl: (MutagenFrame r, [MaybeNullWhen(false)] out String listSubItem) =>
                            {
                                return StringBinaryTranslation.Instance.Parse(
                                    r,
                                    item: out listSubItem,
                                    parseWhole: true,
                                    binaryType: StringBinaryType.Plain);
                            }));
                    return (int)Race_FieldIndex.MovementTypeNames;
                }
                case RecordTypeInts.VTCK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Voices = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<IFormLinkGetter<IVoiceTypeGetter>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return (int)Race_FieldIndex.Voices;
                }
                case RecordTypeInts.HCLF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultHairColors = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<IFormLinkGetter<IColorRecordGetter>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return (int)Race_FieldIndex.DefaultHairColors;
                }
                case RecordTypeInts.TINL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NumberOfTintsInList = frame.ReadUInt16();
                    return (int)Race_FieldIndex.NumberOfTintsInList;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FacegenMainClamp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Race_FieldIndex.FacegenMainClamp;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FacegenFaceClamp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Race_FieldIndex.FacegenFaceClamp;
                }
                case RecordTypeInts.ATKR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttackRace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.AttackRace;
                }
                case RecordTypeInts.ATKD:
                case RecordTypeInts.ATKE:
                case RecordTypeInts.ATKW:
                case RecordTypeInts.ATKS:
                case RecordTypeInts.ATKT:
                {
                    item.Attacks.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Attack>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Attack_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Attack.TryCreateFromBinary));
                    return (int)Race_FieldIndex.Attacks;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.BodyData = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<BodyData>(
                        frame: frame,
                        maleMarker: RecordTypes.MNAM,
                        femaleMarker: RecordTypes.FNAM,
                        transl: BodyData.TryCreateFromBinary);
                    return (int)Race_FieldIndex.BodyData;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BodyPartData.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BodyPartData;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.BehaviorGraph = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<Model>(
                        frame: frame,
                        maleMarker: RecordTypes.MNAM,
                        femaleMarker: RecordTypes.FNAM,
                        transl: Model.TryCreateFromBinary);
                    return (int)Race_FieldIndex.BehaviorGraph;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ImpactMaterialType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.ImpactMaterialType;
                }
                case RecordTypeInts.NAM5:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.ImpactDataSet;
                }
                case RecordTypeInts.NAM7:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DispemberBloodArt.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.DispemberBloodArt;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MeatCapTextureSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.MeatCapTextureSet;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CollarTextureSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.CollarTextureSet;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SoundOpenCorpse.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.SoundOpenCorpse;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SoundCloseCorpse.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.SoundCloseCorpse;
                }
                case RecordTypeInts.NAME:
                {
                    RaceBinaryCreateTranslation.FillBinaryBipedObjectsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Race_FieldIndex.BipedObjects;
                }
                case RecordTypeInts.MTYP:
                case RecordTypeInts.SPED:
                {
                    item.MovementDataOverrides.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<MovementDataOverride>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: MovementDataOverride_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: MovementDataOverride.TryCreateFromBinary));
                    return (int)Race_FieldIndex.MovementDataOverrides;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EquipmentFlags = EnumBinaryTranslation<EquipTypeFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Race_FieldIndex.EquipmentFlags;
                }
                case RecordTypeInts.QNAM:
                case RecordTypeInts.ZNAM:
                {
                    item.EquipmentSlots.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<EquipmentSlot>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: EquipmentSlot_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: EquipmentSlot.TryCreateFromBinary));
                    return (int)Race_FieldIndex.EquipmentSlots;
                }
                case RecordTypeInts.UNWP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UnarmedWeapon.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.UnarmedWeapon;
                }
                case RecordTypeInts.PHTN:
                {
                    return RaceBinaryCreateTranslation.FillBinaryFaceFxPhonemesListingParsingCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.PHWT:
                {
                    return RaceBinaryCreateTranslation.FillBinaryFaceFxPhonemesRawParsingCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.WKMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementDefault.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementDefault;
                }
                case RecordTypeInts.SWMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementDefaultSwim.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementDefaultSwim;
                }
                case RecordTypeInts.FLMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementDefaultFly.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementDefaultFly;
                }
                case RecordTypeInts.SNMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementDefaultSneak.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementDefaultSneak;
                }
                case RecordTypeInts.NAM0:
                {
                    item.HeadData = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseMarkerAheadOfItem<HeadData>(
                        frame: frame,
                        maleMarker: RecordTypes.MNAM,
                        femaleMarker: RecordTypes.FNAM,
                        marker: RecordTypes.NAM0,
                        femaleRecordConverter: Race_Registration.HeadDataFemaleConverter,
                        transl: HeadData.TryCreateFromBinary);
                    return (int)Race_FieldIndex.HeadData;
                }
                case RecordTypeInts.NAM8:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MorphRace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.MorphRace;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ArmorRace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.ArmorRace;
                }
                case RecordTypeInts.SRAC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SubgraphTemplateRace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.SubgraphTemplateRace;
                }
                case RecordTypeInts.SADD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SubgraphAdditiveRace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.SubgraphAdditiveRace;
                }
                case RecordTypeInts.SGNM:
                case RecordTypeInts.SAKD:
                case RecordTypeInts.STKD:
                case RecordTypeInts.SAPT:
                case RecordTypeInts.SRAF:
                {
                    item.Subgraphs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Subgraph>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Subgraph_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Subgraph.TryCreateFromBinary));
                    return (int)Race_FieldIndex.Subgraphs;
                }
                case RecordTypeInts.PTOP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.IdleChatterTimeMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Race_FieldIndex.IdleChatterTimeMin;
                }
                case RecordTypeInts.NTOP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.IdleChatterTimeMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Race_FieldIndex.IdleChatterTimeMax;
                }
                case RecordTypeInts.MSID:
                case RecordTypeInts.MSM0:
                case RecordTypeInts.MSM1:
                {
                    RaceBinaryCreateTranslation.FillBinaryMorphValuesCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Race_FieldIndex.MorphValues;
                }
                case RecordTypeInts.MLSI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MorphValuesLastIndex = frame.ReadInt32();
                    return (int)Race_FieldIndex.MorphValuesLastIndex;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HairColorLookupTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Race_FieldIndex.HairColorLookupTexture;
                }
                case RecordTypeInts.HLTX:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HairColorExtendedLookupTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Race_FieldIndex.HairColorExtendedLookupTexture;
                }
                case RecordTypeInts.QSTI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DialogueQuest.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.DialogueQuest;
                }
                case RecordTypeInts.BSMP:
                {
                    return RaceBinaryCreateTranslation.FillBinaryBoneDataParseCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryFlagsCustom(
            MutagenFrame frame,
            IRaceInternal item);

        public static partial void FillBinaryFlags2Custom(
            MutagenFrame frame,
            IRaceInternal item);

        public static partial void FillBinaryExtraNAM2Custom(
            MutagenFrame frame,
            IRaceInternal item);

        public static partial void FillBinaryBipedObjectsCustom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryFaceFxPhonemesListingParsingCustom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryFaceFxPhonemesRawParsingCustom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

        public static partial void FillBinaryMorphValuesCustom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryBoneDataParseCustom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class RaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class RaceBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IRaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => RaceCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IRace);


        #region AnimationSound
        private int? _AnimationSoundLocation;
        public IFormLinkNullableGetter<IAnimationSoundTagSetGetter> AnimationSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IAnimationSoundTagSetGetter>(_package, _recordData, _AnimationSoundLocation);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #endregion
        public IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; private set; }
        #region Skin
        private int? _SkinLocation;
        public IFormLinkNullableGetter<IArmorGetter> Skin => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArmorGetter>(_package, _recordData, _SkinLocation);
        #endregion
        #region BipedBodyTemplate
        private RangeInt32? _BipedBodyTemplateLocation;
        public IBipedBodyTemplateGetter? BipedBodyTemplate => _BipedBodyTemplateLocation.HasValue ? BipedBodyTemplateBinaryOverlay.BipedBodyTemplateFactory(_recordData.Slice(_BipedBodyTemplateLocation!.Value.Min), _package) : default;
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IObjectPropertyGetter>? Properties { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; private set; }
        private RangeInt32? _DATALocation;
        #region Height
        private int _HeightLocation => _DATALocation!.Value.Min;
        private bool _Height_IsSet => _DATALocation.HasValue;
        public IGenderedItemGetter<Single> Height
        {
            get
            {
                if (!_Height_IsSet) return new GenderedItem<Single>(default(Single), default(Single));
                var data = _recordData.Slice(_HeightLocation);
                return new GenderedItem<Single>(
                    data.Float(),
                    data.Slice(4).Float());
            }
        }
        #endregion
        #region DefaultWeight
        private int _DefaultWeightLocation => _DATALocation!.Value.Min + 0x8;
        private bool _DefaultWeight_IsSet => _DATALocation.HasValue && _package.FormVersion!.FormVersion!.Value >= 109;
        public IGenderedItemGetter<IRaceWeightGetter> DefaultWeight
        {
            get
            {
                if (!_DefaultWeight_IsSet) return new GenderedItem<IRaceWeightGetter>(new RaceWeight(), new RaceWeight());
                var data = _recordData.Slice(_DefaultWeightLocation);
                return new GenderedItem<IRaceWeightGetter>(
                    RaceWeightBinaryOverlay.RaceWeightFactory(data, _package),
                    RaceWeightBinaryOverlay.RaceWeightFactory(data.Slice(12), _package));
            }
        }
        int DefaultWeightVersioningOffset => _package.FormVersion!.FormVersion!.Value < 109 ? -24 : 0;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value.Min + DefaultWeightVersioningOffset + 0x20;
        public partial Race.Flag GetFlagsCustom();
        public Race.Flag Flags => GetFlagsCustom();
        #endregion
        #region AccelerationRate
        private int _AccelerationRateLocation => _DATALocation!.Value.Min + DefaultWeightVersioningOffset + 0x24;
        private bool _AccelerationRate_IsSet => _DATALocation.HasValue;
        public Single AccelerationRate => _AccelerationRate_IsSet ? _recordData.Slice(_AccelerationRateLocation, 4).Float() : default(Single);
        #endregion
        #region DecelerationRate
        private int _DecelerationRateLocation => _DATALocation!.Value.Min + DefaultWeightVersioningOffset + 0x28;
        private bool _DecelerationRate_IsSet => _DATALocation.HasValue;
        public Single DecelerationRate => _DecelerationRate_IsSet ? _recordData.Slice(_DecelerationRateLocation, 4).Float() : default(Single);
        #endregion
        #region Size
        private int _SizeLocation => _DATALocation!.Value.Min + DefaultWeightVersioningOffset + 0x2C;
        private bool _Size_IsSet => _DATALocation.HasValue;
        public Size Size => _Size_IsSet ? (Size)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_SizeLocation, 0x4)) : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value.Min + DefaultWeightVersioningOffset + 0x30;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unknown => _Unknown_IsSet ? _recordData.Span.Slice(_UnknownLocation, 8).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        #region InjuredHealthPercent
        private int _InjuredHealthPercentLocation => _DATALocation!.Value.Min + DefaultWeightVersioningOffset + 0x38;
        private bool _InjuredHealthPercent_IsSet => _DATALocation.HasValue;
        public Single InjuredHealthPercent => _InjuredHealthPercent_IsSet ? _recordData.Slice(_InjuredHealthPercentLocation, 4).Float() : default(Single);
        #endregion
        #region ShieldBipedObject
        private int _ShieldBipedObjectLocation => _DATALocation!.Value.Min + DefaultWeightVersioningOffset + 0x3C;
        private bool _ShieldBipedObject_IsSet => _DATALocation.HasValue;
        public BipedObject ShieldBipedObject => _ShieldBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_ShieldBipedObjectLocation, 0x4)) : default;
        #endregion
        #region BeardBipedObject
        private int _BeardBipedObjectLocation => _DATALocation!.Value.Min + DefaultWeightVersioningOffset + 0x40;
        private bool _BeardBipedObject_IsSet => _DATALocation.HasValue && _package.FormVersion!.FormVersion!.Value >= 124;
        public BipedObject BeardBipedObject => _BeardBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_BeardBipedObjectLocation, 0x4)) : default;
        int BeardBipedObjectVersioningOffset => DefaultWeightVersioningOffset + (_package.FormVersion!.FormVersion!.Value < 124 ? -4 : 0);
        #endregion
        #region BodyBipedObject
        private int _BodyBipedObjectLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x44;
        private bool _BodyBipedObject_IsSet => _DATALocation.HasValue;
        public BipedObject BodyBipedObject => _BodyBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_BodyBipedObjectLocation, 0x4)) : default;
        #endregion
        #region AimAngleTolerance
        private int _AimAngleToleranceLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x48;
        private bool _AimAngleTolerance_IsSet => _DATALocation.HasValue;
        public Single AimAngleTolerance => _AimAngleTolerance_IsSet ? _recordData.Slice(_AimAngleToleranceLocation, 4).Float() : default(Single);
        #endregion
        #region FlightRadius
        private int _FlightRadiusLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x4C;
        private bool _FlightRadius_IsSet => _DATALocation.HasValue;
        public Single FlightRadius => _FlightRadius_IsSet ? _recordData.Slice(_FlightRadiusLocation, 4).Float() : default(Single);
        #endregion
        #region AngularAccelerationRate
        private int _AngularAccelerationRateLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x50;
        private bool _AngularAccelerationRate_IsSet => _DATALocation.HasValue;
        public Single AngularAccelerationRate => _AngularAccelerationRate_IsSet ? _recordData.Slice(_AngularAccelerationRateLocation, 4).Float() : default(Single);
        #endregion
        #region AngularTolerance
        private int _AngularToleranceLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x54;
        private bool _AngularTolerance_IsSet => _DATALocation.HasValue;
        public Single AngularTolerance => _AngularTolerance_IsSet ? _recordData.Slice(_AngularToleranceLocation, 4).Float() : default(Single);
        #endregion
        #region Flags2
        private int _Flags2Location => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x58;
        private bool _Flags2_IsSet => _DATALocation.HasValue;
        partial void Flags2CustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region Unknown2
        private int _Unknown2Location => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x5C;
        private bool _Unknown2_IsSet => _DATALocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unknown2 => _Unknown2_IsSet ? _recordData.Span.Slice(_Unknown2Location, 36).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        #region PipboyBipedObject
        private int _PipboyBipedObjectLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x80;
        private bool _PipboyBipedObject_IsSet => _DATALocation.HasValue;
        public BipedObject PipboyBipedObject => _PipboyBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_PipboyBipedObjectLocation, 0x4)) : default;
        #endregion
        #region XPValue
        private int _XPValueLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x84;
        private bool _XPValue_IsSet => _DATALocation.HasValue;
        public Int16 XPValue => _XPValue_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_recordData.Slice(_XPValueLocation, 2)) : default(Int16);
        #endregion
        #region SeverableDebrisScale
        private int _SeverableDebrisScaleLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x86;
        private bool _SeverableDebrisScale_IsSet => _DATALocation.HasValue;
        public Single SeverableDebrisScale => _SeverableDebrisScale_IsSet ? _recordData.Slice(_SeverableDebrisScaleLocation, 4).Float() : default(Single);
        #endregion
        #region SeverableDebrisCount
        private int _SeverableDebrisCountLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x8A;
        private bool _SeverableDebrisCount_IsSet => _DATALocation.HasValue;
        public Byte SeverableDebrisCount => _SeverableDebrisCount_IsSet ? _recordData.Span[_SeverableDebrisCountLocation] : default;
        #endregion
        #region SeverableDecalCount
        private int _SeverableDecalCountLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x8B;
        private bool _SeverableDecalCount_IsSet => _DATALocation.HasValue;
        public Byte SeverableDecalCount => _SeverableDecalCount_IsSet ? _recordData.Span[_SeverableDecalCountLocation] : default;
        #endregion
        #region ExplodableDebrisScale
        private int _ExplodableDebrisScaleLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x8C;
        private bool _ExplodableDebrisScale_IsSet => _DATALocation.HasValue;
        public Single ExplodableDebrisScale => _ExplodableDebrisScale_IsSet ? _recordData.Slice(_ExplodableDebrisScaleLocation, 4).Float() : default(Single);
        #endregion
        #region ExplodableDebrisCount
        private int _ExplodableDebrisCountLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x90;
        private bool _ExplodableDebrisCount_IsSet => _DATALocation.HasValue;
        public Byte ExplodableDebrisCount => _ExplodableDebrisCount_IsSet ? _recordData.Span[_ExplodableDebrisCountLocation] : default;
        #endregion
        #region ExplodableDecalCount
        private int _ExplodableDecalCountLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x91;
        private bool _ExplodableDecalCount_IsSet => _DATALocation.HasValue;
        public Byte ExplodableDecalCount => _ExplodableDecalCount_IsSet ? _recordData.Span[_ExplodableDecalCountLocation] : default;
        #endregion
        #region SeverableExplosion
        private int _SeverableExplosionLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x92;
        private bool _SeverableExplosion_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> SeverableExplosion => _SeverableExplosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_SeverableExplosionLocation, 0x4), isSet: _SeverableExplosion_IsSet) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region SeverableDebris
        private int _SeverableDebrisLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x96;
        private bool _SeverableDebris_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IDebrisGetter> SeverableDebris => _SeverableDebris_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IDebrisGetter>(_package, _recordData.Span.Slice(_SeverableDebrisLocation, 0x4), isSet: _SeverableDebris_IsSet) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region SeverableImpactDataSet
        private int _SeverableImpactDataSetLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x9A;
        private bool _SeverableImpactDataSet_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> SeverableImpactDataSet => _SeverableImpactDataSet_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_SeverableImpactDataSetLocation, 0x4), isSet: _SeverableImpactDataSet_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region ExplodableExplosion
        private int _ExplodableExplosionLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0x9E;
        private bool _ExplodableExplosion_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> ExplodableExplosion => _ExplodableExplosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_ExplodableExplosionLocation, 0x4), isSet: _ExplodableExplosion_IsSet) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region ExplodableDebris
        private int _ExplodableDebrisLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0xA2;
        private bool _ExplodableDebris_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IDebrisGetter> ExplodableDebris => _ExplodableDebris_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IDebrisGetter>(_package, _recordData.Span.Slice(_ExplodableDebrisLocation, 0x4), isSet: _ExplodableDebris_IsSet) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region ExplodableImpactDataSet
        private int _ExplodableImpactDataSetLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0xA6;
        private bool _ExplodableImpactDataSet_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> ExplodableImpactDataSet => _ExplodableImpactDataSet_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_ExplodableImpactDataSetLocation, 0x4), isSet: _ExplodableImpactDataSet_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region OnCrippleDebrisScale
        private int _OnCrippleDebrisScaleLocation => _DATALocation!.Value.Min + BeardBipedObjectVersioningOffset + 0xAA;
        private bool _OnCrippleDebrisScale_IsSet => _DATALocation.HasValue && _package.FormVersion!.FormVersion!.Value >= 96;
        public Single OnCrippleDebrisScale => _OnCrippleDebrisScale_IsSet ? _recordData.Slice(_OnCrippleDebrisScaleLocation, 4).Float() : default(Single);
        int OnCrippleDebrisScaleVersioningOffset => BeardBipedObjectVersioningOffset + (_package.FormVersion!.FormVersion!.Value < 96 ? -4 : 0);
        #endregion
        #region OnCrippleDebrisCount
        private int _OnCrippleDebrisCountLocation => _DATALocation!.Value.Min + OnCrippleDebrisScaleVersioningOffset + 0xAE;
        private bool _OnCrippleDebrisCount_IsSet => _DATALocation.HasValue && _package.FormVersion!.FormVersion!.Value >= 96;
        public Byte OnCrippleDebrisCount => _OnCrippleDebrisCount_IsSet ? _recordData.Span[_OnCrippleDebrisCountLocation] : default;
        int OnCrippleDebrisCountVersioningOffset => OnCrippleDebrisScaleVersioningOffset + (_package.FormVersion!.FormVersion!.Value < 96 ? -1 : 0);
        #endregion
        #region OnCrippleDecalCount
        private int _OnCrippleDecalCountLocation => _DATALocation!.Value.Min + OnCrippleDebrisCountVersioningOffset + 0xAF;
        private bool _OnCrippleDecalCount_IsSet => _DATALocation.HasValue && _package.FormVersion!.FormVersion!.Value >= 96;
        public Byte OnCrippleDecalCount => _OnCrippleDecalCount_IsSet ? _recordData.Span[_OnCrippleDecalCountLocation] : default;
        int OnCrippleDecalCountVersioningOffset => OnCrippleDebrisCountVersioningOffset + (_package.FormVersion!.FormVersion!.Value < 96 ? -1 : 0);
        #endregion
        #region OnCrippleExplosion
        private int _OnCrippleExplosionLocation => _DATALocation!.Value.Min + OnCrippleDecalCountVersioningOffset + 0xB0;
        private bool _OnCrippleExplosion_IsSet => _DATALocation.HasValue && _package.FormVersion!.FormVersion!.Value >= 96;
        public IFormLinkGetter<IExplosionGetter> OnCrippleExplosion => _OnCrippleExplosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_OnCrippleExplosionLocation, 0x4), isSet: _OnCrippleExplosion_IsSet) : FormLink<IExplosionGetter>.Null;
        int OnCrippleExplosionVersioningOffset => OnCrippleDecalCountVersioningOffset + (_package.FormVersion!.FormVersion!.Value < 96 ? -4 : 0);
        #endregion
        #region OnCrippleDebris
        private int _OnCrippleDebrisLocation => _DATALocation!.Value.Min + OnCrippleExplosionVersioningOffset + 0xB4;
        private bool _OnCrippleDebris_IsSet => _DATALocation.HasValue && _package.FormVersion!.FormVersion!.Value >= 96;
        public IFormLinkGetter<IDebrisGetter> OnCrippleDebris => _OnCrippleDebris_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IDebrisGetter>(_package, _recordData.Span.Slice(_OnCrippleDebrisLocation, 0x4), isSet: _OnCrippleDebris_IsSet) : FormLink<IDebrisGetter>.Null;
        int OnCrippleDebrisVersioningOffset => OnCrippleExplosionVersioningOffset + (_package.FormVersion!.FormVersion!.Value < 96 ? -4 : 0);
        #endregion
        #region OnCrippleImpactDataSet
        private int _OnCrippleImpactDataSetLocation => _DATALocation!.Value.Min + OnCrippleDebrisVersioningOffset + 0xB8;
        private bool _OnCrippleImpactDataSet_IsSet => _DATALocation.HasValue && _package.FormVersion!.FormVersion!.Value >= 96;
        public IFormLinkGetter<IImpactDataSetGetter> OnCrippleImpactDataSet => _OnCrippleImpactDataSet_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_OnCrippleImpactDataSetLocation, 0x4), isSet: _OnCrippleImpactDataSet_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        int OnCrippleImpactDataSetVersioningOffset => OnCrippleDebrisVersioningOffset + (_package.FormVersion!.FormVersion!.Value < 96 ? -4 : 0);
        #endregion
        #region ExplodableSubsegmentExplosion
        private int _ExplodableSubsegmentExplosionLocation => _DATALocation!.Value.Min + OnCrippleImpactDataSetVersioningOffset + 0xBC;
        private bool _ExplodableSubsegmentExplosion_IsSet => _DATALocation.HasValue && _package.FormVersion!.FormVersion!.Value >= 118;
        public IFormLinkGetter<IExplosionGetter> ExplodableSubsegmentExplosion => _ExplodableSubsegmentExplosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_ExplodableSubsegmentExplosionLocation, 0x4), isSet: _ExplodableSubsegmentExplosion_IsSet) : FormLink<IExplosionGetter>.Null;
        int ExplodableSubsegmentExplosionVersioningOffset => OnCrippleImpactDataSetVersioningOffset + (_package.FormVersion!.FormVersion!.Value < 118 ? -4 : 0);
        #endregion
        #region OrientationLimitsPitch
        private int _OrientationLimitsPitchLocation => _DATALocation!.Value.Min + ExplodableSubsegmentExplosionVersioningOffset + 0xC0;
        private bool _OrientationLimitsPitch_IsSet => _DATALocation.HasValue && _package.FormVersion!.FormVersion!.Value >= 98;
        public Single OrientationLimitsPitch => _OrientationLimitsPitch_IsSet ? _recordData.Slice(_OrientationLimitsPitchLocation, 4).Float() : default(Single);
        int OrientationLimitsPitchVersioningOffset => ExplodableSubsegmentExplosionVersioningOffset + (_package.FormVersion!.FormVersion!.Value < 98 ? -4 : 0);
        #endregion
        #region OrientationLimitsRoll
        private int _OrientationLimitsRollLocation => _DATALocation!.Value.Min + OrientationLimitsPitchVersioningOffset + 0xC4;
        private bool _OrientationLimitsRoll_IsSet => _DATALocation.HasValue && _package.FormVersion!.FormVersion!.Value >= 98;
        public Single OrientationLimitsRoll => _OrientationLimitsRoll_IsSet ? _recordData.Slice(_OrientationLimitsRollLocation, 4).Float() : default(Single);
        int OrientationLimitsRollVersioningOffset => OrientationLimitsPitchVersioningOffset + (_package.FormVersion!.FormVersion!.Value < 98 ? -4 : 0);
        #endregion
        #region SkeletalModel
        private IGenderedItemGetter<ISimpleModelGetter?>? _SkeletalModelOverlay;
        public IGenderedItemGetter<ISimpleModelGetter?>? SkeletalModel => _SkeletalModelOverlay;
        #endregion
        public IReadOnlyList<String> MovementTypeNames { get; private set; } = [];
        #region Voices
        private int? _VoicesLocation;
        public IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>> Voices
        {
            get
            {
                if (!_VoicesLocation.HasValue) return new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(FormLink<IVoiceTypeGetter>.Null, FormLink<IVoiceTypeGetter>.Null);
                var data = HeaderTranslation.ExtractSubrecordMemory(_recordData, _VoicesLocation.Value, _package.MetaData.Constants);
                return new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IVoiceTypeGetter>(_package, data),
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IVoiceTypeGetter>(_package, data.Slice(4)));
            }
        }
        #endregion
        #region DefaultHairColors
        private int? _DefaultHairColorsLocation;
        public IGenderedItemGetter<IFormLinkGetter<IColorRecordGetter>>? DefaultHairColors
        {
            get
            {
                if (!_DefaultHairColorsLocation.HasValue) return default;
                var data = HeaderTranslation.ExtractSubrecordMemory(_recordData, _DefaultHairColorsLocation.Value, _package.MetaData.Constants);
                return new GenderedItem<IFormLinkGetter<IColorRecordGetter>>(
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IColorRecordGetter>(_package, data),
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IColorRecordGetter>(_package, data.Slice(4)));
            }
        }
        #endregion
        #region NumberOfTintsInList
        private int? _NumberOfTintsInListLocation;
        public UInt16? NumberOfTintsInList => _NumberOfTintsInListLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NumberOfTintsInListLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region FacegenMainClamp
        private int? _FacegenMainClampLocation;
        public Single FacegenMainClamp => _FacegenMainClampLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FacegenMainClampLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region FacegenFaceClamp
        private int? _FacegenFaceClampLocation;
        public Single FacegenFaceClamp => _FacegenFaceClampLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FacegenFaceClampLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region AttackRace
        private int? _AttackRaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> AttackRace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _AttackRaceLocation);
        #endregion
        public IReadOnlyList<IAttackGetter> Attacks { get; private set; } = [];
        #region BodyData
        private IGenderedItemGetter<IBodyDataGetter?>? _BodyDataOverlay;
        public IGenderedItemGetter<IBodyDataGetter?> BodyData => _BodyDataOverlay ?? new GenderedItem<IBodyDataGetter?>(default, default);
        #endregion
        #region BodyPartData
        private int? _BodyPartDataLocation;
        public IFormLinkNullableGetter<IBodyPartDataGetter> BodyPartData => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IBodyPartDataGetter>(_package, _recordData, _BodyPartDataLocation);
        #endregion
        #region ExtraNAM2
        partial void ExtraNAM2CustomParse(
            OverlayStream stream,
            int offset);
        protected int ExtraNAM2EndingPos;
        #endregion
        #region BehaviorGraph
        private IGenderedItemGetter<IModelGetter?>? _BehaviorGraphOverlay;
        public IGenderedItemGetter<IModelGetter?> BehaviorGraph => _BehaviorGraphOverlay ?? new GenderedItem<IModelGetter?>(default, default);
        #endregion
        #region ImpactMaterialType
        private int? _ImpactMaterialTypeLocation;
        public IFormLinkNullableGetter<IMaterialTypeGetter> ImpactMaterialType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMaterialTypeGetter>(_package, _recordData, _ImpactMaterialTypeLocation);
        #endregion
        #region ImpactDataSet
        private int? _ImpactDataSetLocation;
        public IFormLinkNullableGetter<IImpactDataSetGetter> ImpactDataSet => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IImpactDataSetGetter>(_package, _recordData, _ImpactDataSetLocation);
        #endregion
        #region DispemberBloodArt
        private int? _DispemberBloodArtLocation;
        public IFormLinkNullableGetter<IArtObjectGetter> DispemberBloodArt => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArtObjectGetter>(_package, _recordData, _DispemberBloodArtLocation);
        #endregion
        #region MeatCapTextureSet
        private int? _MeatCapTextureSetLocation;
        public IFormLinkNullableGetter<ITextureSetGetter> MeatCapTextureSet => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITextureSetGetter>(_package, _recordData, _MeatCapTextureSetLocation);
        #endregion
        #region CollarTextureSet
        private int? _CollarTextureSetLocation;
        public IFormLinkNullableGetter<ITextureSetGetter> CollarTextureSet => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITextureSetGetter>(_package, _recordData, _CollarTextureSetLocation);
        #endregion
        #region SoundOpenCorpse
        private int? _SoundOpenCorpseLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> SoundOpenCorpse => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _SoundOpenCorpseLocation);
        #endregion
        #region SoundCloseCorpse
        private int? _SoundCloseCorpseLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> SoundCloseCorpse => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _SoundCloseCorpseLocation);
        #endregion
        public IReadOnlyList<IMovementDataOverrideGetter> MovementDataOverrides { get; private set; } = [];
        #region EquipmentFlags
        private int? _EquipmentFlagsLocation;
        public EquipTypeFlag? EquipmentFlags => EnumBinaryTranslation<EquipTypeFlag, MutagenFrame, MutagenWriter>.Instance.ParseRecordNullable(_EquipmentFlagsLocation, _recordData, _package, 4);
        #endregion
        public IReadOnlyList<IEquipmentSlotGetter> EquipmentSlots { get; private set; } = [];
        #region UnarmedWeapon
        private int? _UnarmedWeaponLocation;
        public IFormLinkNullableGetter<IWeaponGetter> UnarmedWeapon => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IWeaponGetter>(_package, _recordData, _UnarmedWeaponLocation);
        #endregion
        #region FaceFxPhonemesListingParsing
        public partial ParseResult FaceFxPhonemesListingParsingCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region FaceFxPhonemesRawParsing
        public partial ParseResult FaceFxPhonemesRawParsingCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region BaseMovementDefault
        private int? _BaseMovementDefaultLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefault => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementDefaultLocation);
        #endregion
        #region BaseMovementDefaultSwim
        private int? _BaseMovementDefaultSwimLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSwim => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementDefaultSwimLocation);
        #endregion
        #region BaseMovementDefaultFly
        private int? _BaseMovementDefaultFlyLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultFly => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementDefaultFlyLocation);
        #endregion
        #region BaseMovementDefaultSneak
        private int? _BaseMovementDefaultSneakLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSneak => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementDefaultSneakLocation);
        #endregion
        #region HeadData
        private IGenderedItemGetter<IHeadDataGetter?>? _HeadDataOverlay;
        public IGenderedItemGetter<IHeadDataGetter?>? HeadData => _HeadDataOverlay;
        #endregion
        #region MorphRace
        private int? _MorphRaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> MorphRace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _MorphRaceLocation);
        #endregion
        #region ArmorRace
        private int? _ArmorRaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> ArmorRace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _ArmorRaceLocation);
        #endregion
        #region SubgraphTemplateRace
        private int? _SubgraphTemplateRaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> SubgraphTemplateRace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _SubgraphTemplateRaceLocation);
        #endregion
        #region SubgraphAdditiveRace
        private int? _SubgraphAdditiveRaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> SubgraphAdditiveRace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _SubgraphAdditiveRaceLocation);
        #endregion
        public IReadOnlyList<ISubgraphGetter> Subgraphs { get; private set; } = [];
        #region IdleChatterTimeMin
        private int? _IdleChatterTimeMinLocation;
        public Single? IdleChatterTimeMin => _IdleChatterTimeMinLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _IdleChatterTimeMinLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region IdleChatterTimeMax
        private int? _IdleChatterTimeMaxLocation;
        public Single? IdleChatterTimeMax => _IdleChatterTimeMaxLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _IdleChatterTimeMaxLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region MorphValues
        partial void MorphValuesCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        #region MorphValuesLastIndex
        private int? _MorphValuesLastIndexLocation;
        public Int32? MorphValuesLastIndex => _MorphValuesLastIndexLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MorphValuesLastIndexLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region HairColorLookupTexture
        private int? _HairColorLookupTextureLocation;
        public String? HairColorLookupTexture => _HairColorLookupTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HairColorLookupTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region HairColorExtendedLookupTexture
        private int? _HairColorExtendedLookupTextureLocation;
        public String? HairColorExtendedLookupTexture => _HairColorExtendedLookupTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HairColorExtendedLookupTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region DialogueQuest
        private int? _DialogueQuestLocation;
        public IFormLinkNullableGetter<IQuestGetter> DialogueQuest => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IQuestGetter>(_package, _recordData, _DialogueQuestLocation);
        #endregion
        #region BoneDataParse
        public partial ParseResult BoneDataParseCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RaceBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IRaceGetter RaceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new RaceBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IRaceGetter RaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return RaceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.STCP:
                {
                    _AnimationSoundLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.AnimationSound;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Description;
                }
                case RecordTypeInts.SPLO:
                case RecordTypeInts.SPCT:
                {
                    this.ActorEffect = BinaryOverlayList.FactoryByCountPerItem<IFormLinkGetter<ISpellRecordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.SPCT,
                        trigger: RecordTypes.SPLO,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellRecordGetter>(p, s));
                    return (int)Race_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.WNAM:
                {
                    _SkinLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Skin;
                }
                case RecordTypeInts.BOD2:
                {
                    _BipedBodyTemplateLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Race_FieldIndex.BipedBodyTemplate;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Race_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    this.Properties = BinaryOverlayList.FactoryByStartIndexWithTrigger<IObjectPropertyGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 8,
                        getter: (s, p) => ObjectPropertyBinaryOverlay.ObjectPropertyFactory(s, p));
                    return (int)Race_FieldIndex.Properties;
                }
                case RecordTypeInts.APPR:
                {
                    this.AttachParentSlots = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Race_FieldIndex.AttachParentSlots;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Race_FieldIndex.OrientationLimitsRoll;
                }
                case RecordTypeInts.MNAM:
                case RecordTypeInts.FNAM:
                {
                    _SkeletalModelOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<ISimpleModelGetter>(
                        package: _package,
                        male: RecordTypes.MNAM,
                        female: RecordTypes.FNAM,
                        stream: stream,
                        creator: static (s, p, r) => SimpleModelBinaryOverlay.SimpleModelFactory(s, p, r),
                        translationParams: Race_Registration.SkeletalModelConverter);
                    return (int)Race_FieldIndex.SkeletalModel;
                }
                case RecordTypeInts.MTNM:
                {
                    this.MovementTypeNames = BinaryOverlayList.FactoryByArray<String>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ToZString(p.MetaData.Constants.Subrecord(s).Content, encoding: p.MetaData.Encodings.NonTranslated),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.MTNM,
                            skipHeader: false,
                            translationParams: translationParams));
                    return (int)Race_FieldIndex.MovementTypeNames;
                }
                case RecordTypeInts.VTCK:
                {
                    _VoicesLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Voices;
                }
                case RecordTypeInts.HCLF:
                {
                    _DefaultHairColorsLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.DefaultHairColors;
                }
                case RecordTypeInts.TINL:
                {
                    _NumberOfTintsInListLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.NumberOfTintsInList;
                }
                case RecordTypeInts.PNAM:
                {
                    _FacegenMainClampLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.FacegenMainClamp;
                }
                case RecordTypeInts.UNAM:
                {
                    _FacegenFaceClampLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.FacegenFaceClamp;
                }
                case RecordTypeInts.ATKR:
                {
                    _AttackRaceLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.AttackRace;
                }
                case RecordTypeInts.ATKD:
                case RecordTypeInts.ATKE:
                case RecordTypeInts.ATKW:
                case RecordTypeInts.ATKS:
                case RecordTypeInts.ATKT:
                {
                    this.Attacks = this.ParseRepeatedTypelessSubrecord<IAttackGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: Attack_Registration.TriggerSpecs,
                        factory: AttackBinaryOverlay.AttackFactory);
                    return (int)Race_FieldIndex.Attacks;
                }
                case RecordTypeInts.NAM1:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    _BodyDataOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IBodyDataGetter>(
                        package: _package,
                        male: RecordTypes.MNAM,
                        female: RecordTypes.FNAM,
                        stream: stream,
                        creator: static (s, p, r) => BodyDataBinaryOverlay.BodyDataFactory(s, p, r),
                        translationParams: translationParams);
                    return (int)Race_FieldIndex.BodyData;
                }
                case RecordTypeInts.GNAM:
                {
                    _BodyPartDataLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BodyPartData;
                }
                case RecordTypeInts.NAM3:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    _BehaviorGraphOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IModelGetter>(
                        package: _package,
                        male: RecordTypes.MNAM,
                        female: RecordTypes.FNAM,
                        stream: stream,
                        creator: static (s, p, r) => ModelBinaryOverlay.ModelFactory(s, p, r),
                        translationParams: translationParams);
                    return (int)Race_FieldIndex.BehaviorGraph;
                }
                case RecordTypeInts.NAM4:
                {
                    _ImpactMaterialTypeLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.ImpactMaterialType;
                }
                case RecordTypeInts.NAM5:
                {
                    _ImpactDataSetLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.ImpactDataSet;
                }
                case RecordTypeInts.NAM7:
                {
                    _DispemberBloodArtLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.DispemberBloodArt;
                }
                case RecordTypeInts.CNAM:
                {
                    _MeatCapTextureSetLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.MeatCapTextureSet;
                }
                case RecordTypeInts.NAM2:
                {
                    _CollarTextureSetLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.CollarTextureSet;
                }
                case RecordTypeInts.ONAM:
                {
                    _SoundOpenCorpseLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.SoundOpenCorpse;
                }
                case RecordTypeInts.LNAM:
                {
                    _SoundCloseCorpseLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.SoundCloseCorpse;
                }
                case RecordTypeInts.NAME:
                {
                    BipedObjectsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)Race_FieldIndex.BipedObjects;
                }
                case RecordTypeInts.MTYP:
                case RecordTypeInts.SPED:
                {
                    this.MovementDataOverrides = this.ParseRepeatedTypelessSubrecord<IMovementDataOverrideGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: MovementDataOverride_Registration.TriggerSpecs,
                        factory: MovementDataOverrideBinaryOverlay.MovementDataOverrideFactory);
                    return (int)Race_FieldIndex.MovementDataOverrides;
                }
                case RecordTypeInts.VNAM:
                {
                    _EquipmentFlagsLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.EquipmentFlags;
                }
                case RecordTypeInts.QNAM:
                case RecordTypeInts.ZNAM:
                {
                    this.EquipmentSlots = this.ParseRepeatedTypelessSubrecord<IEquipmentSlotGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: EquipmentSlot_Registration.TriggerSpecs,
                        factory: EquipmentSlotBinaryOverlay.EquipmentSlotFactory);
                    return (int)Race_FieldIndex.EquipmentSlots;
                }
                case RecordTypeInts.UNWP:
                {
                    _UnarmedWeaponLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.UnarmedWeapon;
                }
                case RecordTypeInts.PHTN:
                {
                    return FaceFxPhonemesListingParsingCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.PHWT:
                {
                    return FaceFxPhonemesRawParsingCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.WKMV:
                {
                    _BaseMovementDefaultLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementDefault;
                }
                case RecordTypeInts.SWMV:
                {
                    _BaseMovementDefaultSwimLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementDefaultSwim;
                }
                case RecordTypeInts.FLMV:
                {
                    _BaseMovementDefaultFlyLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementDefaultFly;
                }
                case RecordTypeInts.SNMV:
                {
                    _BaseMovementDefaultSneakLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementDefaultSneak;
                }
                case RecordTypeInts.NAM0:
                {
                    _HeadDataOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IHeadDataGetter>(
                        package: _package,
                        male: RecordTypes.MNAM,
                        female: RecordTypes.FNAM,
                        marker: RecordTypes.NAM0,
                        stream: stream,
                        creator: static (s, p, r) => HeadDataBinaryOverlay.HeadDataFactory(s, p, r),
                        femaleRecordConverter: Race_Registration.HeadDataFemaleConverter);
                    return (int)Race_FieldIndex.HeadData;
                }
                case RecordTypeInts.NAM8:
                {
                    _MorphRaceLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.MorphRace;
                }
                case RecordTypeInts.RNAM:
                {
                    _ArmorRaceLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.ArmorRace;
                }
                case RecordTypeInts.SRAC:
                {
                    _SubgraphTemplateRaceLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.SubgraphTemplateRace;
                }
                case RecordTypeInts.SADD:
                {
                    _SubgraphAdditiveRaceLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.SubgraphAdditiveRace;
                }
                case RecordTypeInts.SGNM:
                case RecordTypeInts.SAKD:
                case RecordTypeInts.STKD:
                case RecordTypeInts.SAPT:
                case RecordTypeInts.SRAF:
                {
                    this.Subgraphs = this.ParseRepeatedTypelessSubrecord<ISubgraphGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: Subgraph_Registration.TriggerSpecs,
                        factory: SubgraphBinaryOverlay.SubgraphFactory);
                    return (int)Race_FieldIndex.Subgraphs;
                }
                case RecordTypeInts.PTOP:
                {
                    _IdleChatterTimeMinLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.IdleChatterTimeMin;
                }
                case RecordTypeInts.NTOP:
                {
                    _IdleChatterTimeMaxLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.IdleChatterTimeMax;
                }
                case RecordTypeInts.MSID:
                case RecordTypeInts.MSM0:
                case RecordTypeInts.MSM1:
                {
                    MorphValuesCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Race_FieldIndex.MorphValues;
                }
                case RecordTypeInts.MLSI:
                {
                    _MorphValuesLastIndexLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.MorphValuesLastIndex;
                }
                case RecordTypeInts.HNAM:
                {
                    _HairColorLookupTextureLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.HairColorLookupTexture;
                }
                case RecordTypeInts.HLTX:
                {
                    _HairColorExtendedLookupTextureLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.HairColorExtendedLookupTexture;
                }
                case RecordTypeInts.QSTI:
                {
                    _DialogueQuestLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.DialogueQuest;
                }
                case RecordTypeInts.BSMP:
                {
                    return BoneDataParseCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            RaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Race>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IRaceGetter rhs) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IRaceGetter? obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

