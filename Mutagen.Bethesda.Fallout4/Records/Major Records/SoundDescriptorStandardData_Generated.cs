/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class SoundDescriptorStandardData :
        ASoundDescriptor,
        IEquatable<ISoundDescriptorStandardDataGetter>,
        ILoquiObjectSetter<SoundDescriptorStandardData>,
        ISoundDescriptorStandardData
    {
        #region Ctor
        public SoundDescriptorStandardData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region PercentFrequencyShift
        public SByte PercentFrequencyShift { get; set; } = default(SByte);
        #endregion
        #region PercentFrequencyVariance
        public SByte PercentFrequencyVariance { get; set; } = default(SByte);
        #endregion
        #region Priority
        public Byte Priority { get; set; } = default(Byte);
        #endregion
        #region Variance
        public Byte Variance { get; set; } = default(Byte);
        #endregion
        #region StaticAttenuation
        public Single StaticAttenuation { get; set; } = default(Single);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundDescriptorStandardDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISoundDescriptorStandardDataGetter rhs) return false;
            return ((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundDescriptorStandardDataGetter? obj)
        {
            return ((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ASoundDescriptor.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.PercentFrequencyShift = initialValue;
                this.PercentFrequencyVariance = initialValue;
                this.Priority = initialValue;
                this.Variance = initialValue;
                this.StaticAttenuation = initialValue;
            }

            public Mask(
                TItem PercentFrequencyShift,
                TItem PercentFrequencyVariance,
                TItem Priority,
                TItem Variance,
                TItem StaticAttenuation)
            : base()
            {
                this.PercentFrequencyShift = PercentFrequencyShift;
                this.PercentFrequencyVariance = PercentFrequencyVariance;
                this.Priority = Priority;
                this.Variance = Variance;
                this.StaticAttenuation = StaticAttenuation;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem PercentFrequencyShift;
            public TItem PercentFrequencyVariance;
            public TItem Priority;
            public TItem Variance;
            public TItem StaticAttenuation;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.PercentFrequencyShift, rhs.PercentFrequencyShift)) return false;
                if (!object.Equals(this.PercentFrequencyVariance, rhs.PercentFrequencyVariance)) return false;
                if (!object.Equals(this.Priority, rhs.Priority)) return false;
                if (!object.Equals(this.Variance, rhs.Variance)) return false;
                if (!object.Equals(this.StaticAttenuation, rhs.StaticAttenuation)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.PercentFrequencyShift);
                hash.Add(this.PercentFrequencyVariance);
                hash.Add(this.Priority);
                hash.Add(this.Variance);
                hash.Add(this.StaticAttenuation);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.PercentFrequencyShift)) return false;
                if (!eval(this.PercentFrequencyVariance)) return false;
                if (!eval(this.Priority)) return false;
                if (!eval(this.Variance)) return false;
                if (!eval(this.StaticAttenuation)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.PercentFrequencyShift)) return true;
                if (eval(this.PercentFrequencyVariance)) return true;
                if (eval(this.Priority)) return true;
                if (eval(this.Variance)) return true;
                if (eval(this.StaticAttenuation)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundDescriptorStandardData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.PercentFrequencyShift = eval(this.PercentFrequencyShift);
                obj.PercentFrequencyVariance = eval(this.PercentFrequencyVariance);
                obj.Priority = eval(this.Priority);
                obj.Variance = eval(this.Variance);
                obj.StaticAttenuation = eval(this.StaticAttenuation);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SoundDescriptorStandardData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SoundDescriptorStandardData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SoundDescriptorStandardData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.PercentFrequencyShift ?? true)
                    {
                        sb.AppendItem(PercentFrequencyShift, "PercentFrequencyShift");
                    }
                    if (printMask?.PercentFrequencyVariance ?? true)
                    {
                        sb.AppendItem(PercentFrequencyVariance, "PercentFrequencyVariance");
                    }
                    if (printMask?.Priority ?? true)
                    {
                        sb.AppendItem(Priority, "Priority");
                    }
                    if (printMask?.Variance ?? true)
                    {
                        sb.AppendItem(Variance, "Variance");
                    }
                    if (printMask?.StaticAttenuation ?? true)
                    {
                        sb.AppendItem(StaticAttenuation, "StaticAttenuation");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ASoundDescriptor.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? PercentFrequencyShift;
            public Exception? PercentFrequencyVariance;
            public Exception? Priority;
            public Exception? Variance;
            public Exception? StaticAttenuation;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SoundDescriptorStandardData_FieldIndex enu = (SoundDescriptorStandardData_FieldIndex)index;
                switch (enu)
                {
                    case SoundDescriptorStandardData_FieldIndex.PercentFrequencyShift:
                        return PercentFrequencyShift;
                    case SoundDescriptorStandardData_FieldIndex.PercentFrequencyVariance:
                        return PercentFrequencyVariance;
                    case SoundDescriptorStandardData_FieldIndex.Priority:
                        return Priority;
                    case SoundDescriptorStandardData_FieldIndex.Variance:
                        return Variance;
                    case SoundDescriptorStandardData_FieldIndex.StaticAttenuation:
                        return StaticAttenuation;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SoundDescriptorStandardData_FieldIndex enu = (SoundDescriptorStandardData_FieldIndex)index;
                switch (enu)
                {
                    case SoundDescriptorStandardData_FieldIndex.PercentFrequencyShift:
                        this.PercentFrequencyShift = ex;
                        break;
                    case SoundDescriptorStandardData_FieldIndex.PercentFrequencyVariance:
                        this.PercentFrequencyVariance = ex;
                        break;
                    case SoundDescriptorStandardData_FieldIndex.Priority:
                        this.Priority = ex;
                        break;
                    case SoundDescriptorStandardData_FieldIndex.Variance:
                        this.Variance = ex;
                        break;
                    case SoundDescriptorStandardData_FieldIndex.StaticAttenuation:
                        this.StaticAttenuation = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SoundDescriptorStandardData_FieldIndex enu = (SoundDescriptorStandardData_FieldIndex)index;
                switch (enu)
                {
                    case SoundDescriptorStandardData_FieldIndex.PercentFrequencyShift:
                        this.PercentFrequencyShift = (Exception?)obj;
                        break;
                    case SoundDescriptorStandardData_FieldIndex.PercentFrequencyVariance:
                        this.PercentFrequencyVariance = (Exception?)obj;
                        break;
                    case SoundDescriptorStandardData_FieldIndex.Priority:
                        this.Priority = (Exception?)obj;
                        break;
                    case SoundDescriptorStandardData_FieldIndex.Variance:
                        this.Variance = (Exception?)obj;
                        break;
                    case SoundDescriptorStandardData_FieldIndex.StaticAttenuation:
                        this.StaticAttenuation = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (PercentFrequencyShift != null) return true;
                if (PercentFrequencyVariance != null) return true;
                if (Priority != null) return true;
                if (Variance != null) return true;
                if (StaticAttenuation != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(PercentFrequencyShift, "PercentFrequencyShift");
                }
                {
                    sb.AppendItem(PercentFrequencyVariance, "PercentFrequencyVariance");
                }
                {
                    sb.AppendItem(Priority, "Priority");
                }
                {
                    sb.AppendItem(Variance, "Variance");
                }
                {
                    sb.AppendItem(StaticAttenuation, "StaticAttenuation");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.PercentFrequencyShift = this.PercentFrequencyShift.Combine(rhs.PercentFrequencyShift);
                ret.PercentFrequencyVariance = this.PercentFrequencyVariance.Combine(rhs.PercentFrequencyVariance);
                ret.Priority = this.Priority.Combine(rhs.Priority);
                ret.Variance = this.Variance.Combine(rhs.Variance);
                ret.StaticAttenuation = this.StaticAttenuation.Combine(rhs.StaticAttenuation);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ASoundDescriptor.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool PercentFrequencyShift;
            public bool PercentFrequencyVariance;
            public bool Priority;
            public bool Variance;
            public bool StaticAttenuation;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.PercentFrequencyShift = defaultOn;
                this.PercentFrequencyVariance = defaultOn;
                this.Priority = defaultOn;
                this.Variance = defaultOn;
                this.StaticAttenuation = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((PercentFrequencyShift, null));
                ret.Add((PercentFrequencyVariance, null));
                ret.Add((Priority, null));
                ret.Add((Variance, null));
                ret.Add((StaticAttenuation, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundDescriptorStandardDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundDescriptorStandardDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SoundDescriptorStandardData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SoundDescriptorStandardData();
            ((SoundDescriptorStandardDataSetterCommon)((ISoundDescriptorStandardDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundDescriptorStandardData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SoundDescriptorStandardDataSetterCommon)((ISoundDescriptorStandardDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SoundDescriptorStandardData GetNew()
        {
            return new SoundDescriptorStandardData();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundDescriptorStandardData :
        IASoundDescriptor,
        ILoquiObjectSetter<ISoundDescriptorStandardData>,
        ISoundDescriptorStandardDataGetter
    {
        new SByte PercentFrequencyShift { get; set; }
        new SByte PercentFrequencyVariance { get; set; }
        new Byte Priority { get; set; }
        new Byte Variance { get; set; }
        new Single StaticAttenuation { get; set; }
    }

    public partial interface ISoundDescriptorStandardDataGetter :
        IASoundDescriptorGetter,
        IBinaryItem,
        ILoquiObject<ISoundDescriptorStandardDataGetter>
    {
        static new ILoquiRegistration StaticRegistration => SoundDescriptorStandardData_Registration.Instance;
        SByte PercentFrequencyShift { get; }
        SByte PercentFrequencyVariance { get; }
        Byte Priority { get; }
        Byte Variance { get; }
        Single StaticAttenuation { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundDescriptorStandardDataMixIn
    {
        public static void Clear(this ISoundDescriptorStandardData item)
        {
            ((SoundDescriptorStandardDataSetterCommon)((ISoundDescriptorStandardDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundDescriptorStandardData.Mask<bool> GetEqualsMask(
            this ISoundDescriptorStandardDataGetter item,
            ISoundDescriptorStandardDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISoundDescriptorStandardDataGetter item,
            string? name = null,
            SoundDescriptorStandardData.Mask<bool>? printMask = null)
        {
            return ((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISoundDescriptorStandardDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundDescriptorStandardData.Mask<bool>? printMask = null)
        {
            ((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundDescriptorStandardDataGetter item,
            ISoundDescriptorStandardDataGetter rhs,
            SoundDescriptorStandardData.TranslationMask? equalsMask = null)
        {
            return ((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISoundDescriptorStandardData lhs,
            ISoundDescriptorStandardDataGetter rhs,
            out SoundDescriptorStandardData.ErrorMask errorMask,
            SoundDescriptorStandardData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundDescriptorStandardDataSetterTranslationCommon)((ISoundDescriptorStandardDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundDescriptorStandardData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundDescriptorStandardData lhs,
            ISoundDescriptorStandardDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundDescriptorStandardDataSetterTranslationCommon)((ISoundDescriptorStandardDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundDescriptorStandardData DeepCopy(
            this ISoundDescriptorStandardDataGetter item,
            SoundDescriptorStandardData.TranslationMask? copyMask = null)
        {
            return ((SoundDescriptorStandardDataSetterTranslationCommon)((ISoundDescriptorStandardDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundDescriptorStandardData DeepCopy(
            this ISoundDescriptorStandardDataGetter item,
            out SoundDescriptorStandardData.ErrorMask errorMask,
            SoundDescriptorStandardData.TranslationMask? copyMask = null)
        {
            return ((SoundDescriptorStandardDataSetterTranslationCommon)((ISoundDescriptorStandardDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundDescriptorStandardData DeepCopy(
            this ISoundDescriptorStandardDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundDescriptorStandardDataSetterTranslationCommon)((ISoundDescriptorStandardDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundDescriptorStandardData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SoundDescriptorStandardDataSetterCommon)((ISoundDescriptorStandardDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum SoundDescriptorStandardData_FieldIndex
    {
        PercentFrequencyShift = 0,
        PercentFrequencyVariance = 1,
        Priority = 2,
        Variance = 3,
        StaticAttenuation = 4,
    }
    #endregion

    #region Registration
    internal partial class SoundDescriptorStandardData_Registration : ILoquiRegistration
    {
        public static readonly SoundDescriptorStandardData_Registration Instance = new SoundDescriptorStandardData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(SoundDescriptorStandardData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundDescriptorStandardData.ErrorMask);

        public static readonly Type ClassType = typeof(SoundDescriptorStandardData);

        public static readonly Type GetterType = typeof(ISoundDescriptorStandardDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundDescriptorStandardData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.SoundDescriptorStandardData";

        public const string Name = "SoundDescriptorStandardData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(SoundDescriptorStandardDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SoundDescriptorStandardDataSetterCommon : ASoundDescriptorSetterCommon
    {
        public new static readonly SoundDescriptorStandardDataSetterCommon Instance = new SoundDescriptorStandardDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundDescriptorStandardData item)
        {
            ClearPartial();
            item.PercentFrequencyShift = default(SByte);
            item.PercentFrequencyVariance = default(SByte);
            item.Priority = default(Byte);
            item.Variance = default(Byte);
            item.StaticAttenuation = default(Single);
            base.Clear(item);
        }
        
        public override void Clear(IASoundDescriptor item)
        {
            Clear(item: (ISoundDescriptorStandardData)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISoundDescriptorStandardData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundDescriptorStandardData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SoundDescriptorStandardDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IASoundDescriptor item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SoundDescriptorStandardData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SoundDescriptorStandardDataCommon : ASoundDescriptorCommon
    {
        public new static readonly SoundDescriptorStandardDataCommon Instance = new SoundDescriptorStandardDataCommon();

        public SoundDescriptorStandardData.Mask<bool> GetEqualsMask(
            ISoundDescriptorStandardDataGetter item,
            ISoundDescriptorStandardDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundDescriptorStandardData.Mask<bool>(false);
            ((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundDescriptorStandardDataGetter item,
            ISoundDescriptorStandardDataGetter rhs,
            SoundDescriptorStandardData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.PercentFrequencyShift = item.PercentFrequencyShift == rhs.PercentFrequencyShift;
            ret.PercentFrequencyVariance = item.PercentFrequencyVariance == rhs.PercentFrequencyVariance;
            ret.Priority = item.Priority == rhs.Priority;
            ret.Variance = item.Variance == rhs.Variance;
            ret.StaticAttenuation = item.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISoundDescriptorStandardDataGetter item,
            string? name = null,
            SoundDescriptorStandardData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISoundDescriptorStandardDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundDescriptorStandardData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SoundDescriptorStandardData =>");
            }
            else
            {
                sb.AppendLine($"{name} (SoundDescriptorStandardData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISoundDescriptorStandardDataGetter item,
            StructuredStringBuilder sb,
            SoundDescriptorStandardData.Mask<bool>? printMask = null)
        {
            ASoundDescriptorCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.PercentFrequencyShift ?? true)
            {
                sb.AppendItem(item.PercentFrequencyShift, "PercentFrequencyShift");
            }
            if (printMask?.PercentFrequencyVariance ?? true)
            {
                sb.AppendItem(item.PercentFrequencyVariance, "PercentFrequencyVariance");
            }
            if (printMask?.Priority ?? true)
            {
                sb.AppendItem(item.Priority, "Priority");
            }
            if (printMask?.Variance ?? true)
            {
                sb.AppendItem(item.Variance, "Variance");
            }
            if (printMask?.StaticAttenuation ?? true)
            {
                sb.AppendItem(item.StaticAttenuation, "StaticAttenuation");
            }
        }
        
        public static SoundDescriptorStandardData_FieldIndex ConvertFieldIndex(ASoundDescriptor_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundDescriptorStandardDataGetter? lhs,
            ISoundDescriptorStandardDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IASoundDescriptorGetter)lhs, (IASoundDescriptorGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptorStandardData_FieldIndex.PercentFrequencyShift) ?? true))
            {
                if (lhs.PercentFrequencyShift != rhs.PercentFrequencyShift) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptorStandardData_FieldIndex.PercentFrequencyVariance) ?? true))
            {
                if (lhs.PercentFrequencyVariance != rhs.PercentFrequencyVariance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptorStandardData_FieldIndex.Priority) ?? true))
            {
                if (lhs.Priority != rhs.Priority) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptorStandardData_FieldIndex.Variance) ?? true))
            {
                if (lhs.Variance != rhs.Variance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptorStandardData_FieldIndex.StaticAttenuation) ?? true))
            {
                if (!lhs.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IASoundDescriptorGetter? lhs,
            IASoundDescriptorGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISoundDescriptorStandardDataGetter?)lhs,
                rhs: rhs as ISoundDescriptorStandardDataGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISoundDescriptorStandardDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.PercentFrequencyShift);
            hash.Add(item.PercentFrequencyVariance);
            hash.Add(item.Priority);
            hash.Add(item.Variance);
            hash.Add(item.StaticAttenuation);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IASoundDescriptorGetter item)
        {
            return GetHashCode(item: (ISoundDescriptorStandardDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SoundDescriptorStandardData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISoundDescriptorStandardDataGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SoundDescriptorStandardDataSetterTranslationCommon : ASoundDescriptorSetterTranslationCommon
    {
        public new static readonly SoundDescriptorStandardDataSetterTranslationCommon Instance = new SoundDescriptorStandardDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundDescriptorStandardData item,
            ISoundDescriptorStandardDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IASoundDescriptor)item,
                (IASoundDescriptorGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptorStandardData_FieldIndex.PercentFrequencyShift) ?? true))
            {
                item.PercentFrequencyShift = rhs.PercentFrequencyShift;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptorStandardData_FieldIndex.PercentFrequencyVariance) ?? true))
            {
                item.PercentFrequencyVariance = rhs.PercentFrequencyVariance;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptorStandardData_FieldIndex.Priority) ?? true))
            {
                item.Priority = rhs.Priority;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptorStandardData_FieldIndex.Variance) ?? true))
            {
                item.Variance = rhs.Variance;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptorStandardData_FieldIndex.StaticAttenuation) ?? true))
            {
                item.StaticAttenuation = rhs.StaticAttenuation;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISoundDescriptorStandardData item,
            ISoundDescriptorStandardDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IASoundDescriptor item,
            IASoundDescriptorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundDescriptorStandardData)item,
                rhs: (ISoundDescriptorStandardDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SoundDescriptorStandardData DeepCopy(
            ISoundDescriptorStandardDataGetter item,
            SoundDescriptorStandardData.TranslationMask? copyMask = null)
        {
            SoundDescriptorStandardData ret = (SoundDescriptorStandardData)((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)item).CommonInstance()!).GetNew();
            ((SoundDescriptorStandardDataSetterTranslationCommon)((ISoundDescriptorStandardDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundDescriptorStandardData DeepCopy(
            ISoundDescriptorStandardDataGetter item,
            out SoundDescriptorStandardData.ErrorMask errorMask,
            SoundDescriptorStandardData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundDescriptorStandardData ret = (SoundDescriptorStandardData)((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)item).CommonInstance()!).GetNew();
            ((SoundDescriptorStandardDataSetterTranslationCommon)((ISoundDescriptorStandardDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundDescriptorStandardData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundDescriptorStandardData DeepCopy(
            ISoundDescriptorStandardDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundDescriptorStandardData ret = (SoundDescriptorStandardData)((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)item).CommonInstance()!).GetNew();
            ((SoundDescriptorStandardDataSetterTranslationCommon)((ISoundDescriptorStandardDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundDescriptorStandardData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundDescriptorStandardData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundDescriptorStandardData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundDescriptorStandardDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SoundDescriptorStandardDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundDescriptorStandardDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class SoundDescriptorStandardDataBinaryWriteTranslation :
        ASoundDescriptorBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SoundDescriptorStandardDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ISoundDescriptorStandardDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.PercentFrequencyShift);
            writer.Write(item.PercentFrequencyVariance);
            writer.Write(item.Priority);
            writer.Write(item.Variance);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StaticAttenuation,
                integerType: FloatIntegerType.UShort,
                multiplier: 100f,
                divisor: null);
        }

        public void Write(
            MutagenWriter writer,
            ISoundDescriptorStandardDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISoundDescriptorStandardDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IASoundDescriptorGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISoundDescriptorStandardDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SoundDescriptorStandardDataBinaryCreateTranslation : ASoundDescriptorBinaryCreateTranslation
    {
        public new static readonly SoundDescriptorStandardDataBinaryCreateTranslation Instance = new SoundDescriptorStandardDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISoundDescriptorStandardData item,
            MutagenFrame frame)
        {
            item.PercentFrequencyShift = frame.ReadInt8();
            item.PercentFrequencyVariance = frame.ReadInt8();
            item.Priority = frame.ReadUInt8();
            item.Variance = frame.ReadUInt8();
            item.StaticAttenuation = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                integerType: FloatIntegerType.UShort,
                multiplier: null,
                divisor: 100f);
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class SoundDescriptorStandardDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class SoundDescriptorStandardDataBinaryOverlay :
        ASoundDescriptorBinaryOverlay,
        ISoundDescriptorStandardDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundDescriptorStandardData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundDescriptorStandardData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundDescriptorStandardDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundDescriptorStandardDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundDescriptorStandardDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundDescriptorStandardDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public SByte PercentFrequencyShift => (sbyte)_structData.Slice(0x0, 0x1)[0];
        public SByte PercentFrequencyVariance => (sbyte)_structData.Slice(0x1, 0x1)[0];
        public Byte Priority => _structData.Span[0x2];
        public Byte Variance => _structData.Span[0x3];
        public Single StaticAttenuation => FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.GetFloat(_structData.Slice(0x4, 0x2), FloatIntegerType.UShort, multiplier: null, divisor: 100f);
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundDescriptorStandardDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISoundDescriptorStandardDataGetter SoundDescriptorStandardDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x6,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new SoundDescriptorStandardDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x6;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ISoundDescriptorStandardDataGetter SoundDescriptorStandardDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SoundDescriptorStandardDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundDescriptorStandardDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISoundDescriptorStandardDataGetter rhs) return false;
            return ((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundDescriptorStandardDataGetter? obj)
        {
            return ((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundDescriptorStandardDataCommon)((ISoundDescriptorStandardDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

