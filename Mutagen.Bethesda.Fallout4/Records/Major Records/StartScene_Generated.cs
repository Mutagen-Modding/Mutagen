/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class StartScene :
        IEquatable<IStartSceneGetter>,
        ILoquiObjectSetter<StartScene>,
        IStartScene
    {
        #region Ctor
        public StartScene()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Scene
        private readonly IFormLinkNullable<ISceneGetter> _Scene = new FormLinkNullable<ISceneGetter>();
        public IFormLinkNullable<ISceneGetter> Scene
        {
            get => _Scene;
            set => _Scene.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISceneGetter> IStartSceneGetter.Scene => this.Scene;
        #endregion
        #region PhaseIndex
        public UInt16? PhaseIndex { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IStartSceneGetter.PhaseIndex => this.PhaseIndex;
        #endregion
        #region StartPhaseForScene
        public String? StartPhaseForScene { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IStartSceneGetter.StartPhaseForScene => this.StartPhaseForScene;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _Conditions;
        public ExtendedList<Condition>? Conditions
        {
            get => this._Conditions;
            set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? IStartSceneGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StartSceneMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStartSceneGetter rhs) return false;
            return ((StartSceneCommon)((IStartSceneGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStartSceneGetter? obj)
        {
            return ((StartSceneCommon)((IStartSceneGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StartSceneCommon)((IStartSceneGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Scene = initialValue;
                this.PhaseIndex = initialValue;
                this.StartPhaseForScene = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            public Mask(
                TItem Scene,
                TItem PhaseIndex,
                TItem StartPhaseForScene,
                TItem Conditions)
            {
                this.Scene = Scene;
                this.PhaseIndex = PhaseIndex;
                this.StartPhaseForScene = StartPhaseForScene;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Scene;
            public TItem PhaseIndex;
            public TItem StartPhaseForScene;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Scene, rhs.Scene)) return false;
                if (!object.Equals(this.PhaseIndex, rhs.PhaseIndex)) return false;
                if (!object.Equals(this.StartPhaseForScene, rhs.StartPhaseForScene)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Scene);
                hash.Add(this.PhaseIndex);
                hash.Add(this.StartPhaseForScene);
                hash.Add(this.Conditions);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Scene)) return false;
                if (!eval(this.PhaseIndex)) return false;
                if (!eval(this.StartPhaseForScene)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Scene)) return true;
                if (eval(this.PhaseIndex)) return true;
                if (eval(this.StartPhaseForScene)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new StartScene.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Scene = eval(this.Scene);
                obj.PhaseIndex = eval(this.PhaseIndex);
                obj.StartPhaseForScene = eval(this.StartPhaseForScene);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(StartScene.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, StartScene.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(StartScene.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Scene ?? true)
                    {
                        sb.AppendItem(Scene, "Scene");
                    }
                    if (printMask?.PhaseIndex ?? true)
                    {
                        sb.AppendItem(PhaseIndex, "PhaseIndex");
                    }
                    if (printMask?.StartPhaseForScene ?? true)
                    {
                        sb.AppendItem(StartPhaseForScene, "StartPhaseForScene");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Scene;
            public Exception? PhaseIndex;
            public Exception? StartPhaseForScene;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                StartScene_FieldIndex enu = (StartScene_FieldIndex)index;
                switch (enu)
                {
                    case StartScene_FieldIndex.Scene:
                        return Scene;
                    case StartScene_FieldIndex.PhaseIndex:
                        return PhaseIndex;
                    case StartScene_FieldIndex.StartPhaseForScene:
                        return StartPhaseForScene;
                    case StartScene_FieldIndex.Conditions:
                        return Conditions;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                StartScene_FieldIndex enu = (StartScene_FieldIndex)index;
                switch (enu)
                {
                    case StartScene_FieldIndex.Scene:
                        this.Scene = ex;
                        break;
                    case StartScene_FieldIndex.PhaseIndex:
                        this.PhaseIndex = ex;
                        break;
                    case StartScene_FieldIndex.StartPhaseForScene:
                        this.StartPhaseForScene = ex;
                        break;
                    case StartScene_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                StartScene_FieldIndex enu = (StartScene_FieldIndex)index;
                switch (enu)
                {
                    case StartScene_FieldIndex.Scene:
                        this.Scene = (Exception?)obj;
                        break;
                    case StartScene_FieldIndex.PhaseIndex:
                        this.PhaseIndex = (Exception?)obj;
                        break;
                    case StartScene_FieldIndex.StartPhaseForScene:
                        this.StartPhaseForScene = (Exception?)obj;
                        break;
                    case StartScene_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Scene != null) return true;
                if (PhaseIndex != null) return true;
                if (StartPhaseForScene != null) return true;
                if (Conditions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Scene, "Scene");
                }
                {
                    sb.AppendItem(PhaseIndex, "PhaseIndex");
                }
                {
                    sb.AppendItem(StartPhaseForScene, "StartPhaseForScene");
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Scene = this.Scene.Combine(rhs.Scene);
                ret.PhaseIndex = this.PhaseIndex.Combine(rhs.PhaseIndex);
                ret.StartPhaseForScene = this.StartPhaseForScene.Combine(rhs.StartPhaseForScene);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Scene;
            public bool PhaseIndex;
            public bool StartPhaseForScene;
            public Condition.TranslationMask? Conditions;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Scene = defaultOn;
                this.PhaseIndex = defaultOn;
                this.StartPhaseForScene = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Scene, null));
                ret.Add((PhaseIndex, null));
                ret.Add((StartPhaseForScene, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StartSceneCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => StartSceneSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => StartSceneBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StartSceneBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static StartScene CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new StartScene();
            ((StartSceneSetterCommon)((IStartSceneGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out StartScene item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((StartSceneSetterCommon)((IStartSceneGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static StartScene GetNew()
        {
            return new StartScene();
        }

    }
    #endregion

    #region Interface
    public partial interface IStartScene :
        IFormLinkContainer,
        ILoquiObjectSetter<IStartScene>,
        IStartSceneGetter
    {
        new IFormLinkNullable<ISceneGetter> Scene { get; set; }
        new UInt16? PhaseIndex { get; set; }
        new String? StartPhaseForScene { get; set; }
        new ExtendedList<Condition>? Conditions { get; set; }
    }

    public partial interface IStartSceneGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IStartSceneGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => StartScene_Registration.Instance;
        IFormLinkNullableGetter<ISceneGetter> Scene { get; }
        UInt16? PhaseIndex { get; }
        String? StartPhaseForScene { get; }
        IReadOnlyList<IConditionGetter>? Conditions { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class StartSceneMixIn
    {
        public static void Clear(this IStartScene item)
        {
            ((StartSceneSetterCommon)((IStartSceneGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static StartScene.Mask<bool> GetEqualsMask(
            this IStartSceneGetter item,
            IStartSceneGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StartSceneCommon)((IStartSceneGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IStartSceneGetter item,
            string? name = null,
            StartScene.Mask<bool>? printMask = null)
        {
            return ((StartSceneCommon)((IStartSceneGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IStartSceneGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StartScene.Mask<bool>? printMask = null)
        {
            ((StartSceneCommon)((IStartSceneGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStartSceneGetter item,
            IStartSceneGetter rhs,
            StartScene.TranslationMask? equalsMask = null)
        {
            return ((StartSceneCommon)((IStartSceneGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IStartScene lhs,
            IStartSceneGetter rhs)
        {
            ((StartSceneSetterTranslationCommon)((IStartSceneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStartScene lhs,
            IStartSceneGetter rhs,
            StartScene.TranslationMask? copyMask = null)
        {
            ((StartSceneSetterTranslationCommon)((IStartSceneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStartScene lhs,
            IStartSceneGetter rhs,
            out StartScene.ErrorMask errorMask,
            StartScene.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StartSceneSetterTranslationCommon)((IStartSceneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = StartScene.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStartScene lhs,
            IStartSceneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StartSceneSetterTranslationCommon)((IStartSceneGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static StartScene DeepCopy(
            this IStartSceneGetter item,
            StartScene.TranslationMask? copyMask = null)
        {
            return ((StartSceneSetterTranslationCommon)((IStartSceneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static StartScene DeepCopy(
            this IStartSceneGetter item,
            out StartScene.ErrorMask errorMask,
            StartScene.TranslationMask? copyMask = null)
        {
            return ((StartSceneSetterTranslationCommon)((IStartSceneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static StartScene DeepCopy(
            this IStartSceneGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StartSceneSetterTranslationCommon)((IStartSceneGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStartScene item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((StartSceneSetterCommon)((IStartSceneGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum StartScene_FieldIndex
    {
        Scene = 0,
        PhaseIndex = 1,
        StartPhaseForScene = 2,
        Conditions = 3,
    }
    #endregion

    #region Registration
    internal partial class StartScene_Registration : ILoquiRegistration
    {
        public static readonly StartScene_Registration Instance = new StartScene_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(StartScene.Mask<>);

        public static readonly Type ErrorMaskType = typeof(StartScene.ErrorMask);

        public static readonly Type ClassType = typeof(StartScene);

        public static readonly Type GetterType = typeof(IStartSceneGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStartScene);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.StartScene";

        public const string Name = "StartScene";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(
                RecordTypes.LCEP,
                RecordTypes.INTT,
                RecordTypes.SSPN,
                RecordTypes.CTDA,
                RecordTypes.CITC);
            var all = RecordCollection.Factory(
                RecordTypes.LCEP,
                RecordTypes.INTT,
                RecordTypes.SSPN,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(StartSceneBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class StartSceneSetterCommon
    {
        public static readonly StartSceneSetterCommon Instance = new StartSceneSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStartScene item)
        {
            ClearPartial();
            item.Scene.Clear();
            item.PhaseIndex = default;
            item.StartPhaseForScene = default;
            item.Conditions = null;
        }
        
        #region Mutagen
        public void RemapLinks(IStartScene obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Scene.Relink(mapping);
            obj.Conditions?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStartScene item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: StartSceneBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class StartSceneCommon
    {
        public static readonly StartSceneCommon Instance = new StartSceneCommon();

        public StartScene.Mask<bool> GetEqualsMask(
            IStartSceneGetter item,
            IStartSceneGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new StartScene.Mask<bool>(false);
            ((StartSceneCommon)((IStartSceneGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStartSceneGetter item,
            IStartSceneGetter rhs,
            StartScene.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Scene = item.Scene.Equals(rhs.Scene);
            ret.PhaseIndex = item.PhaseIndex == rhs.PhaseIndex;
            ret.StartPhaseForScene = string.Equals(item.StartPhaseForScene, rhs.StartPhaseForScene);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            IStartSceneGetter item,
            string? name = null,
            StartScene.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IStartSceneGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StartScene.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"StartScene =>");
            }
            else
            {
                sb.AppendLine($"{name} (StartScene) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IStartSceneGetter item,
            StructuredStringBuilder sb,
            StartScene.Mask<bool>? printMask = null)
        {
            if (printMask?.Scene ?? true)
            {
                sb.AppendItem(item.Scene.FormKeyNullable, "Scene");
            }
            if ((printMask?.PhaseIndex ?? true)
                && item.PhaseIndex is {} PhaseIndexItem)
            {
                sb.AppendItem(PhaseIndexItem, "PhaseIndex");
            }
            if ((printMask?.StartPhaseForScene ?? true)
                && item.StartPhaseForScene is {} StartPhaseForSceneItem)
            {
                sb.AppendItem(StartPhaseForSceneItem, "StartPhaseForScene");
            }
            if ((printMask?.Conditions?.Overall ?? true)
                && item.Conditions is {} ConditionsItem)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ConditionsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStartSceneGetter? lhs,
            IStartSceneGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)StartScene_FieldIndex.Scene) ?? true))
            {
                if (!lhs.Scene.Equals(rhs.Scene)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StartScene_FieldIndex.PhaseIndex) ?? true))
            {
                if (lhs.PhaseIndex != rhs.PhaseIndex) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StartScene_FieldIndex.StartPhaseForScene) ?? true))
            {
                if (!string.Equals(lhs.StartPhaseForScene, rhs.StartPhaseForScene)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StartScene_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)StartScene_FieldIndex.Conditions)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IStartSceneGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Scene);
            if (item.PhaseIndex is {} PhaseIndexitem)
            {
                hash.Add(PhaseIndexitem);
            }
            if (item.StartPhaseForScene is {} StartPhaseForSceneitem)
            {
                hash.Add(StartPhaseForSceneitem);
            }
            hash.Add(item.Conditions);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return StartScene.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IStartSceneGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.Scene, out var SceneInfo))
            {
                yield return SceneInfo;
            }
            if (obj.Conditions is {} ConditionsItem)
            {
                foreach (var item in ConditionsItem.WhereCastable<IConditionGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class StartSceneSetterTranslationCommon
    {
        public static readonly StartSceneSetterTranslationCommon Instance = new StartSceneSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStartScene item,
            IStartSceneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)StartScene_FieldIndex.Scene) ?? true))
            {
                item.Scene.SetTo(rhs.Scene.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)StartScene_FieldIndex.PhaseIndex) ?? true))
            {
                item.PhaseIndex = rhs.PhaseIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)StartScene_FieldIndex.StartPhaseForScene) ?? true))
            {
                item.StartPhaseForScene = rhs.StartPhaseForScene;
            }
            if ((copyMask?.GetShouldTranslate((int)StartScene_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)StartScene_FieldIndex.Conditions);
                try
                {
                    if ((rhs.Conditions != null))
                    {
                        item.Conditions = 
                            rhs.Conditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.Conditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IStartScene item,
            IStartSceneGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public StartScene DeepCopy(
            IStartSceneGetter item,
            StartScene.TranslationMask? copyMask = null)
        {
            StartScene ret = (StartScene)((StartSceneCommon)((IStartSceneGetter)item).CommonInstance()!).GetNew();
            ((StartSceneSetterTranslationCommon)((IStartSceneGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public StartScene DeepCopy(
            IStartSceneGetter item,
            out StartScene.ErrorMask errorMask,
            StartScene.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            StartScene ret = (StartScene)((StartSceneCommon)((IStartSceneGetter)item).CommonInstance()!).GetNew();
            ((StartSceneSetterTranslationCommon)((IStartSceneGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = StartScene.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public StartScene DeepCopy(
            IStartSceneGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            StartScene ret = (StartScene)((StartSceneCommon)((IStartSceneGetter)item).CommonInstance()!).GetNew();
            ((StartSceneSetterTranslationCommon)((IStartSceneGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class StartScene
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StartScene_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StartScene_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StartSceneCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return StartSceneSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StartSceneSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStartSceneGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IStartSceneGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IStartSceneGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class StartSceneBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly StartSceneBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IStartSceneGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Scene,
                header: translationParams.ConvertToCustom(RecordTypes.LCEP));
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.PhaseIndex,
                header: translationParams.ConvertToCustom(RecordTypes.INTT));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.StartPhaseForScene,
                header: translationParams.ConvertToCustom(RecordTypes.SSPN),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Conditions,
                counterType: RecordTypes.CITC,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IStartSceneGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IStartSceneGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class StartSceneBinaryCreateTranslation
    {
        public static readonly StartSceneBinaryCreateTranslation Instance = new StartSceneBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IStartScene item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.LCEP:
                {
                    if (lastParsed.ShortCircuit((int)StartScene_FieldIndex.Scene, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scene.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)StartScene_FieldIndex.Scene;
                }
                case RecordTypeInts.INTT:
                {
                    if (lastParsed.ShortCircuit((int)StartScene_FieldIndex.PhaseIndex, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PhaseIndex = frame.ReadUInt16();
                    return (int)StartScene_FieldIndex.PhaseIndex;
                }
                case RecordTypeInts.SSPN:
                {
                    if (lastParsed.ShortCircuit((int)StartScene_FieldIndex.StartPhaseForScene, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.StartPhaseForScene = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)StartScene_FieldIndex.StartPhaseForScene;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    if (lastParsed.ShortCircuit((int)StartScene_FieldIndex.Conditions, translationParams)) return ParseResult.Stop;
                    item.Conditions = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.CITC,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary)
                        .CastExtendedList<Condition>();
                    return (int)StartScene_FieldIndex.Conditions;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class StartSceneBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IStartSceneGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StartSceneBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class StartSceneBinaryOverlay :
        PluginBinaryOverlay,
        IStartSceneGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StartScene_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StartScene_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StartSceneCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StartSceneSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStartSceneGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IStartSceneGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IStartSceneGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StartSceneCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => StartSceneBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StartSceneBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Scene
        private int? _SceneLocation;
        public IFormLinkNullableGetter<ISceneGetter> Scene => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISceneGetter>(_package, _recordData, _SceneLocation);
        #endregion
        #region PhaseIndex
        private int? _PhaseIndexLocation;
        public UInt16? PhaseIndex => _PhaseIndexLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _PhaseIndexLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region StartPhaseForScene
        private int? _StartPhaseForSceneLocation;
        public String? StartPhaseForScene => _StartPhaseForSceneLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _StartPhaseForSceneLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<IConditionGetter>? Conditions { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected StartSceneBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IStartSceneGetter StartSceneFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new StartSceneBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IStartSceneGetter StartSceneFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return StartSceneFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.LCEP:
                {
                    if (lastParsed.ShortCircuit((int)StartScene_FieldIndex.Scene, translationParams)) return ParseResult.Stop;
                    _SceneLocation = (stream.Position - offset);
                    return (int)StartScene_FieldIndex.Scene;
                }
                case RecordTypeInts.INTT:
                {
                    if (lastParsed.ShortCircuit((int)StartScene_FieldIndex.PhaseIndex, translationParams)) return ParseResult.Stop;
                    _PhaseIndexLocation = (stream.Position - offset);
                    return (int)StartScene_FieldIndex.PhaseIndex;
                }
                case RecordTypeInts.SSPN:
                {
                    if (lastParsed.ShortCircuit((int)StartScene_FieldIndex.StartPhaseForScene, translationParams)) return ParseResult.Stop;
                    _StartPhaseForSceneLocation = (stream.Position - offset);
                    return (int)StartScene_FieldIndex.StartPhaseForScene;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    if (lastParsed.ShortCircuit((int)StartScene_FieldIndex.Conditions, translationParams)) return ParseResult.Stop;
                    this.Conditions = BinaryOverlayList.FactoryByCountPerItem<IConditionGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: Condition_Registration.TriggerSpecs,
                        countType: RecordTypes.CITC,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)StartScene_FieldIndex.Conditions;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StartSceneMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStartSceneGetter rhs) return false;
            return ((StartSceneCommon)((IStartSceneGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStartSceneGetter? obj)
        {
            return ((StartSceneCommon)((IStartSceneGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StartSceneCommon)((IStartSceneGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

