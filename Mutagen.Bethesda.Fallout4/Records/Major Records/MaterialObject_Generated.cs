/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class MaterialObject :
        Fallout4MajorRecord,
        IEquatable<IMaterialObjectGetter>,
        ILoquiObjectSetter<MaterialObject>,
        IMaterialObjectInternal
    {
        #region Ctor
        protected MaterialObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IMaterialObjectGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region DNAMs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SliceList<byte> _DNAMs = new SliceList<byte>();
        public SliceList<byte> DNAMs
        {
            get => this._DNAMs;
            init => this._DNAMs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ReadOnlyMemorySlice<Byte>> IMaterialObjectGetter.DNAMs => _DNAMs;
        #endregion

        #endregion
        #region FalloffScale
        public Single FalloffScale { get; set; } = default(Single);
        #endregion
        #region FalloffBias
        public Single FalloffBias { get; set; } = default(Single);
        #endregion
        #region NoiseUvScale
        public Single NoiseUvScale { get; set; } = default(Single);
        #endregion
        #region MaterialUvScale
        public Single MaterialUvScale { get; set; } = default(Single);
        #endregion
        #region ProjectionVector
        public P3Float ProjectionVector { get; set; } = default(P3Float);
        #endregion
        #region NormalDampener
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _NormalDampener;
        public Single NormalDampener
        {
            get => this._NormalDampener;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._NormalDampener = value;
            }
        }
        #endregion
        #region SinglePassColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color _SinglePassColor;
        public Color SinglePassColor
        {
            get => this._SinglePassColor;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._SinglePassColor = value;
            }
        }
        #endregion
        #region IsSinglePass
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Boolean _IsSinglePass;
        public Boolean IsSinglePass
        {
            get => this._IsSinglePass;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._IsSinglePass = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public MaterialObject.DATADataType DATADataTypeState { get; set; } = default(MaterialObject.DATADataType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MaterialObjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout4MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.DNAMs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FalloffScale = initialValue;
                this.FalloffBias = initialValue;
                this.NoiseUvScale = initialValue;
                this.MaterialUvScale = initialValue;
                this.ProjectionVector = initialValue;
                this.NormalDampener = initialValue;
                this.SinglePassColor = initialValue;
                this.IsSinglePass = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags,
                TItem Model,
                TItem DNAMs,
                TItem FalloffScale,
                TItem FalloffBias,
                TItem NoiseUvScale,
                TItem MaterialUvScale,
                TItem ProjectionVector,
                TItem NormalDampener,
                TItem SinglePassColor,
                TItem IsSinglePass,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout4MajorRecordFlags: Fallout4MajorRecordFlags)
            {
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.DNAMs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(DNAMs, Enumerable.Empty<(int Index, TItem Value)>());
                this.FalloffScale = FalloffScale;
                this.FalloffBias = FalloffBias;
                this.NoiseUvScale = NoiseUvScale;
                this.MaterialUvScale = MaterialUvScale;
                this.ProjectionVector = ProjectionVector;
                this.NormalDampener = NormalDampener;
                this.SinglePassColor = SinglePassColor;
                this.IsSinglePass = IsSinglePass;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? DNAMs;
            public TItem FalloffScale;
            public TItem FalloffBias;
            public TItem NoiseUvScale;
            public TItem MaterialUvScale;
            public TItem ProjectionVector;
            public TItem NormalDampener;
            public TItem SinglePassColor;
            public TItem IsSinglePass;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.DNAMs, rhs.DNAMs)) return false;
                if (!object.Equals(this.FalloffScale, rhs.FalloffScale)) return false;
                if (!object.Equals(this.FalloffBias, rhs.FalloffBias)) return false;
                if (!object.Equals(this.NoiseUvScale, rhs.NoiseUvScale)) return false;
                if (!object.Equals(this.MaterialUvScale, rhs.MaterialUvScale)) return false;
                if (!object.Equals(this.ProjectionVector, rhs.ProjectionVector)) return false;
                if (!object.Equals(this.NormalDampener, rhs.NormalDampener)) return false;
                if (!object.Equals(this.SinglePassColor, rhs.SinglePassColor)) return false;
                if (!object.Equals(this.IsSinglePass, rhs.IsSinglePass)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Model);
                hash.Add(this.DNAMs);
                hash.Add(this.FalloffScale);
                hash.Add(this.FalloffBias);
                hash.Add(this.NoiseUvScale);
                hash.Add(this.MaterialUvScale);
                hash.Add(this.ProjectionVector);
                hash.Add(this.NormalDampener);
                hash.Add(this.SinglePassColor);
                hash.Add(this.IsSinglePass);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (this.DNAMs != null)
                {
                    if (!eval(this.DNAMs.Overall)) return false;
                    if (this.DNAMs.Specific != null)
                    {
                        foreach (var item in this.DNAMs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.FalloffScale)) return false;
                if (!eval(this.FalloffBias)) return false;
                if (!eval(this.NoiseUvScale)) return false;
                if (!eval(this.MaterialUvScale)) return false;
                if (!eval(this.ProjectionVector)) return false;
                if (!eval(this.NormalDampener)) return false;
                if (!eval(this.SinglePassColor)) return false;
                if (!eval(this.IsSinglePass)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (this.DNAMs != null)
                {
                    if (eval(this.DNAMs.Overall)) return true;
                    if (this.DNAMs.Specific != null)
                    {
                        foreach (var item in this.DNAMs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.FalloffScale)) return true;
                if (eval(this.FalloffBias)) return true;
                if (eval(this.NoiseUvScale)) return true;
                if (eval(this.MaterialUvScale)) return true;
                if (eval(this.ProjectionVector)) return true;
                if (eval(this.NormalDampener)) return true;
                if (eval(this.SinglePassColor)) return true;
                if (eval(this.IsSinglePass)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MaterialObject.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                if (DNAMs != null)
                {
                    obj.DNAMs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.DNAMs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (DNAMs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.DNAMs.Specific = l;
                        foreach (var item in DNAMs.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.FalloffScale = eval(this.FalloffScale);
                obj.FalloffBias = eval(this.FalloffBias);
                obj.NoiseUvScale = eval(this.NoiseUvScale);
                obj.MaterialUvScale = eval(this.MaterialUvScale);
                obj.ProjectionVector = eval(this.ProjectionVector);
                obj.NormalDampener = eval(this.NormalDampener);
                obj.SinglePassColor = eval(this.SinglePassColor);
                obj.IsSinglePass = eval(this.IsSinglePass);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MaterialObject.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MaterialObject.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MaterialObject.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if ((printMask?.DNAMs?.Overall ?? true)
                        && DNAMs is {} DNAMsItem)
                    {
                        sb.AppendLine("DNAMs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(DNAMsItem.Overall);
                            if (DNAMsItem.Specific != null)
                            {
                                foreach (var subItem in DNAMsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.FalloffScale ?? true)
                    {
                        sb.AppendItem(FalloffScale, "FalloffScale");
                    }
                    if (printMask?.FalloffBias ?? true)
                    {
                        sb.AppendItem(FalloffBias, "FalloffBias");
                    }
                    if (printMask?.NoiseUvScale ?? true)
                    {
                        sb.AppendItem(NoiseUvScale, "NoiseUvScale");
                    }
                    if (printMask?.MaterialUvScale ?? true)
                    {
                        sb.AppendItem(MaterialUvScale, "MaterialUvScale");
                    }
                    if (printMask?.ProjectionVector ?? true)
                    {
                        sb.AppendItem(ProjectionVector, "ProjectionVector");
                    }
                    if (printMask?.NormalDampener ?? true)
                    {
                        sb.AppendItem(NormalDampener, "NormalDampener");
                    }
                    if (printMask?.SinglePassColor ?? true)
                    {
                        sb.AppendItem(SinglePassColor, "SinglePassColor");
                    }
                    if (printMask?.IsSinglePass ?? true)
                    {
                        sb.AppendItem(IsSinglePass, "IsSinglePass");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout4MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? DNAMs;
            public Exception? FalloffScale;
            public Exception? FalloffBias;
            public Exception? NoiseUvScale;
            public Exception? MaterialUvScale;
            public Exception? ProjectionVector;
            public Exception? NormalDampener;
            public Exception? SinglePassColor;
            public Exception? IsSinglePass;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                MaterialObject_FieldIndex enu = (MaterialObject_FieldIndex)index;
                switch (enu)
                {
                    case MaterialObject_FieldIndex.Model:
                        return Model;
                    case MaterialObject_FieldIndex.DNAMs:
                        return DNAMs;
                    case MaterialObject_FieldIndex.FalloffScale:
                        return FalloffScale;
                    case MaterialObject_FieldIndex.FalloffBias:
                        return FalloffBias;
                    case MaterialObject_FieldIndex.NoiseUvScale:
                        return NoiseUvScale;
                    case MaterialObject_FieldIndex.MaterialUvScale:
                        return MaterialUvScale;
                    case MaterialObject_FieldIndex.ProjectionVector:
                        return ProjectionVector;
                    case MaterialObject_FieldIndex.NormalDampener:
                        return NormalDampener;
                    case MaterialObject_FieldIndex.SinglePassColor:
                        return SinglePassColor;
                    case MaterialObject_FieldIndex.IsSinglePass:
                        return IsSinglePass;
                    case MaterialObject_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                MaterialObject_FieldIndex enu = (MaterialObject_FieldIndex)index;
                switch (enu)
                {
                    case MaterialObject_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case MaterialObject_FieldIndex.DNAMs:
                        this.DNAMs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case MaterialObject_FieldIndex.FalloffScale:
                        this.FalloffScale = ex;
                        break;
                    case MaterialObject_FieldIndex.FalloffBias:
                        this.FalloffBias = ex;
                        break;
                    case MaterialObject_FieldIndex.NoiseUvScale:
                        this.NoiseUvScale = ex;
                        break;
                    case MaterialObject_FieldIndex.MaterialUvScale:
                        this.MaterialUvScale = ex;
                        break;
                    case MaterialObject_FieldIndex.ProjectionVector:
                        this.ProjectionVector = ex;
                        break;
                    case MaterialObject_FieldIndex.NormalDampener:
                        this.NormalDampener = ex;
                        break;
                    case MaterialObject_FieldIndex.SinglePassColor:
                        this.SinglePassColor = ex;
                        break;
                    case MaterialObject_FieldIndex.IsSinglePass:
                        this.IsSinglePass = ex;
                        break;
                    case MaterialObject_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                MaterialObject_FieldIndex enu = (MaterialObject_FieldIndex)index;
                switch (enu)
                {
                    case MaterialObject_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case MaterialObject_FieldIndex.DNAMs:
                        this.DNAMs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case MaterialObject_FieldIndex.FalloffScale:
                        this.FalloffScale = (Exception?)obj;
                        break;
                    case MaterialObject_FieldIndex.FalloffBias:
                        this.FalloffBias = (Exception?)obj;
                        break;
                    case MaterialObject_FieldIndex.NoiseUvScale:
                        this.NoiseUvScale = (Exception?)obj;
                        break;
                    case MaterialObject_FieldIndex.MaterialUvScale:
                        this.MaterialUvScale = (Exception?)obj;
                        break;
                    case MaterialObject_FieldIndex.ProjectionVector:
                        this.ProjectionVector = (Exception?)obj;
                        break;
                    case MaterialObject_FieldIndex.NormalDampener:
                        this.NormalDampener = (Exception?)obj;
                        break;
                    case MaterialObject_FieldIndex.SinglePassColor:
                        this.SinglePassColor = (Exception?)obj;
                        break;
                    case MaterialObject_FieldIndex.IsSinglePass:
                        this.IsSinglePass = (Exception?)obj;
                        break;
                    case MaterialObject_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Model != null) return true;
                if (DNAMs != null) return true;
                if (FalloffScale != null) return true;
                if (FalloffBias != null) return true;
                if (NoiseUvScale != null) return true;
                if (MaterialUvScale != null) return true;
                if (ProjectionVector != null) return true;
                if (NormalDampener != null) return true;
                if (SinglePassColor != null) return true;
                if (IsSinglePass != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                Model?.Print(sb);
                if (DNAMs is {} DNAMsItem)
                {
                    sb.AppendLine("DNAMs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(DNAMsItem.Overall);
                        if (DNAMsItem.Specific != null)
                        {
                            foreach (var subItem in DNAMsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(FalloffScale, "FalloffScale");
                }
                {
                    sb.AppendItem(FalloffBias, "FalloffBias");
                }
                {
                    sb.AppendItem(NoiseUvScale, "NoiseUvScale");
                }
                {
                    sb.AppendItem(MaterialUvScale, "MaterialUvScale");
                }
                {
                    sb.AppendItem(ProjectionVector, "ProjectionVector");
                }
                {
                    sb.AppendItem(NormalDampener, "NormalDampener");
                }
                {
                    sb.AppendItem(SinglePassColor, "SinglePassColor");
                }
                {
                    sb.AppendItem(IsSinglePass, "IsSinglePass");
                }
                {
                    sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.DNAMs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.DNAMs?.Overall, rhs.DNAMs?.Overall), Noggog.ExceptionExt.Combine(this.DNAMs?.Specific, rhs.DNAMs?.Specific));
                ret.FalloffScale = this.FalloffScale.Combine(rhs.FalloffScale);
                ret.FalloffBias = this.FalloffBias.Combine(rhs.FalloffBias);
                ret.NoiseUvScale = this.NoiseUvScale.Combine(rhs.NoiseUvScale);
                ret.MaterialUvScale = this.MaterialUvScale.Combine(rhs.MaterialUvScale);
                ret.ProjectionVector = this.ProjectionVector.Combine(rhs.ProjectionVector);
                ret.NormalDampener = this.NormalDampener.Combine(rhs.NormalDampener);
                ret.SinglePassColor = this.SinglePassColor.Combine(rhs.SinglePassColor);
                ret.IsSinglePass = this.IsSinglePass.Combine(rhs.IsSinglePass);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout4MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public Model.TranslationMask? Model;
            public bool DNAMs;
            public bool FalloffScale;
            public bool FalloffBias;
            public bool NoiseUvScale;
            public bool MaterialUvScale;
            public bool ProjectionVector;
            public bool NormalDampener;
            public bool SinglePassColor;
            public bool IsSinglePass;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DNAMs = defaultOn;
                this.FalloffScale = defaultOn;
                this.FalloffBias = defaultOn;
                this.NoiseUvScale = defaultOn;
                this.MaterialUvScale = defaultOn;
                this.ProjectionVector = defaultOn;
                this.NormalDampener = defaultOn;
                this.SinglePassColor = defaultOn;
                this.IsSinglePass = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((DNAMs, null));
                ret.Add((FalloffScale, null));
                ret.Add((FalloffBias, null));
                ret.Add((NoiseUvScale, null));
                ret.Add((MaterialUvScale, null));
                ret.Add((ProjectionVector, null));
                ret.Add((NormalDampener, null));
                ret.Add((SinglePassColor, null));
                ret.Add((IsSinglePass, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = MaterialObject_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MaterialObjectCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MaterialObjectSetterCommon.Instance.RemapLinks(this, mapping);
        public MaterialObject(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private MaterialObject(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal MaterialObject(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public MaterialObject(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public MaterialObject(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<MaterialObject>.ToString(this);
        }

        protected override Type LinkType => typeof(IMaterialObject);

        [Flags]
        public enum DATADataType
        {
            Break0 = 1,
            Break1 = 2
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMaterialObjectGetter rhs) return false;
            return ((MaterialObjectCommon)((IMaterialObjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMaterialObjectGetter? obj)
        {
            return ((MaterialObjectCommon)((IMaterialObjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MaterialObjectCommon)((IMaterialObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MaterialObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MaterialObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static MaterialObject CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new MaterialObject();
            ((MaterialObjectSetterCommon)((IMaterialObjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MaterialObject item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MaterialObjectSetterCommon)((IMaterialObjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new MaterialObject GetNew()
        {
            return new MaterialObject();
        }

    }
    #endregion

    #region Interface
    public partial interface IMaterialObject :
        IFallout4MajorRecordInternal,
        IFormLinkContainer,
        ILoquiObjectSetter<IMaterialObjectInternal>,
        IMaterialObjectGetter,
        IModeled
    {
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new SliceList<byte> DNAMs { get; }
        new Single FalloffScale { get; set; }
        new Single FalloffBias { get; set; }
        new Single NoiseUvScale { get; set; }
        new Single MaterialUvScale { get; set; }
        new P3Float ProjectionVector { get; set; }
        new Single NormalDampener { get; set; }
        new Color SinglePassColor { get; set; }
        new Boolean IsSinglePass { get; set; }
        new MaterialObject.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IMaterialObjectInternal :
        IFallout4MajorRecordInternal,
        IMaterialObject,
        IMaterialObjectGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts.MATO)]
    public partial interface IMaterialObjectGetter :
        IFallout4MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IMaterialObjectGetter>,
        IMapsToGetter<IMaterialObjectGetter>,
        IModeledGetter
    {
        static new ILoquiRegistration StaticRegistration => MaterialObject_Registration.Instance;
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IReadOnlyList<ReadOnlyMemorySlice<Byte>> DNAMs { get; }
        Single FalloffScale { get; }
        Single FalloffBias { get; }
        Single NoiseUvScale { get; }
        Single MaterialUvScale { get; }
        P3Float ProjectionVector { get; }
        Single NormalDampener { get; }
        Color SinglePassColor { get; }
        Boolean IsSinglePass { get; }
        MaterialObject.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MaterialObjectMixIn
    {
        public static void Clear(this IMaterialObjectInternal item)
        {
            ((MaterialObjectSetterCommon)((IMaterialObjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MaterialObject.Mask<bool> GetEqualsMask(
            this IMaterialObjectGetter item,
            IMaterialObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MaterialObjectCommon)((IMaterialObjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMaterialObjectGetter item,
            string? name = null,
            MaterialObject.Mask<bool>? printMask = null)
        {
            return ((MaterialObjectCommon)((IMaterialObjectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMaterialObjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MaterialObject.Mask<bool>? printMask = null)
        {
            ((MaterialObjectCommon)((IMaterialObjectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMaterialObjectGetter item,
            IMaterialObjectGetter rhs,
            MaterialObject.TranslationMask? equalsMask = null)
        {
            return ((MaterialObjectCommon)((IMaterialObjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMaterialObjectInternal lhs,
            IMaterialObjectGetter rhs,
            out MaterialObject.ErrorMask errorMask,
            MaterialObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MaterialObjectSetterTranslationCommon)((IMaterialObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MaterialObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMaterialObjectInternal lhs,
            IMaterialObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MaterialObjectSetterTranslationCommon)((IMaterialObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MaterialObject DeepCopy(
            this IMaterialObjectGetter item,
            MaterialObject.TranslationMask? copyMask = null)
        {
            return ((MaterialObjectSetterTranslationCommon)((IMaterialObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MaterialObject DeepCopy(
            this IMaterialObjectGetter item,
            out MaterialObject.ErrorMask errorMask,
            MaterialObject.TranslationMask? copyMask = null)
        {
            return ((MaterialObjectSetterTranslationCommon)((IMaterialObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MaterialObject DeepCopy(
            this IMaterialObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MaterialObjectSetterTranslationCommon)((IMaterialObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static MaterialObject Duplicate(
            this IMaterialObjectGetter item,
            FormKey formKey,
            MaterialObject.TranslationMask? copyMask = null)
        {
            return ((MaterialObjectCommon)((IMaterialObjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static MaterialObject Duplicate(
            this IMaterialObjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((MaterialObjectCommon)((IMaterialObjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMaterialObjectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MaterialObjectSetterCommon)((IMaterialObjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum MaterialObject_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
        Model = 7,
        DNAMs = 8,
        FalloffScale = 9,
        FalloffBias = 10,
        NoiseUvScale = 11,
        MaterialUvScale = 12,
        ProjectionVector = 13,
        NormalDampener = 14,
        SinglePassColor = 15,
        IsSinglePass = 16,
        DATADataTypeState = 17,
    }
    #endregion

    #region Registration
    internal partial class MaterialObject_Registration : ILoquiRegistration
    {
        public static readonly MaterialObject_Registration Instance = new MaterialObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(MaterialObject.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MaterialObject.ErrorMask);

        public static readonly Type ClassType = typeof(MaterialObject);

        public static readonly Type GetterType = typeof(IMaterialObjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMaterialObject);

        public static readonly Type? InternalSetterType = typeof(IMaterialObjectInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.MaterialObject";

        public const string Name = "MaterialObject";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MATO;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.MATO);
            var all = RecordCollection.Factory(
                RecordTypes.MATO,
                RecordTypes.MODL,
                RecordTypes.MODC,
                RecordTypes.MODT,
                RecordTypes.MODS,
                RecordTypes.DNAM,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(MaterialObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MaterialObjectSetterCommon : Fallout4MajorRecordSetterCommon
    {
        public new static readonly MaterialObjectSetterCommon Instance = new MaterialObjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMaterialObjectInternal item)
        {
            ClearPartial();
            item.Model = null;
            item.DNAMs.Clear();
            item.FalloffScale = default(Single);
            item.FalloffBias = default(Single);
            item.NoiseUvScale = default(Single);
            item.MaterialUvScale = default(Single);
            item.ProjectionVector = default(P3Float);
            item.NormalDampener = default(Single);
            item.SinglePassColor = default(Color);
            item.IsSinglePass = default(Boolean);
            item.DATADataTypeState = default(MaterialObject.DATADataType);
            base.Clear(item);
        }
        
        public override void Clear(IFallout4MajorRecordInternal item)
        {
            Clear(item: (IMaterialObjectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMaterialObjectInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IMaterialObject obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Model?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMaterialObjectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IMaterialObjectInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MaterialObjectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MaterialObjectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (MaterialObject)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (MaterialObject)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class MaterialObjectCommon : Fallout4MajorRecordCommon
    {
        public new static readonly MaterialObjectCommon Instance = new MaterialObjectCommon();

        public MaterialObject.Mask<bool> GetEqualsMask(
            IMaterialObjectGetter item,
            IMaterialObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MaterialObject.Mask<bool>(false);
            ((MaterialObjectCommon)((IMaterialObjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMaterialObjectGetter item,
            IMaterialObjectGetter rhs,
            MaterialObject.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DNAMs = item.DNAMs.CollectionEqualsHelper(
                rhs.DNAMs,
                (l, r) => MemoryExtensions.SequenceEqual(l.Span, r.Span),
                include);
            ret.FalloffScale = item.FalloffScale.EqualsWithin(rhs.FalloffScale);
            ret.FalloffBias = item.FalloffBias.EqualsWithin(rhs.FalloffBias);
            ret.NoiseUvScale = item.NoiseUvScale.EqualsWithin(rhs.NoiseUvScale);
            ret.MaterialUvScale = item.MaterialUvScale.EqualsWithin(rhs.MaterialUvScale);
            ret.ProjectionVector = item.ProjectionVector.Equals(rhs.ProjectionVector);
            ret.NormalDampener = item.NormalDampener.EqualsWithin(rhs.NormalDampener);
            ret.SinglePassColor = item.SinglePassColor.ColorOnlyEquals(rhs.SinglePassColor);
            ret.IsSinglePass = item.IsSinglePass == rhs.IsSinglePass;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IMaterialObjectGetter item,
            string? name = null,
            MaterialObject.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMaterialObjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MaterialObject.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MaterialObject =>");
            }
            else
            {
                sb.AppendLine($"{name} (MaterialObject) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMaterialObjectGetter item,
            StructuredStringBuilder sb,
            MaterialObject.Mask<bool>? printMask = null)
        {
            Fallout4MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if (printMask?.DNAMs?.Overall ?? true)
            {
                sb.AppendLine("DNAMs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.DNAMs)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendLine($"Item => {SpanExt.ToHexString(subItem)}");
                        }
                    }
                }
            }
            if (printMask?.FalloffScale ?? true)
            {
                sb.AppendItem(item.FalloffScale, "FalloffScale");
            }
            if (printMask?.FalloffBias ?? true)
            {
                sb.AppendItem(item.FalloffBias, "FalloffBias");
            }
            if (printMask?.NoiseUvScale ?? true)
            {
                sb.AppendItem(item.NoiseUvScale, "NoiseUvScale");
            }
            if (printMask?.MaterialUvScale ?? true)
            {
                sb.AppendItem(item.MaterialUvScale, "MaterialUvScale");
            }
            if (printMask?.ProjectionVector ?? true)
            {
                sb.AppendItem(item.ProjectionVector, "ProjectionVector");
            }
            if (printMask?.NormalDampener ?? true)
            {
                sb.AppendItem(item.NormalDampener, "NormalDampener");
            }
            if (printMask?.SinglePassColor ?? true)
            {
                sb.AppendItem(item.SinglePassColor, "SinglePassColor");
            }
            if (printMask?.IsSinglePass ?? true)
            {
                sb.AppendItem(item.IsSinglePass, "IsSinglePass");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                sb.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static MaterialObject_FieldIndex ConvertFieldIndex(Fallout4MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout4MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MaterialObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormKey:
                    return (MaterialObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.VersionControl:
                    return (MaterialObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.EditorID:
                    return (MaterialObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.FormVersion:
                    return (MaterialObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Version2:
                    return (MaterialObject_FieldIndex)((int)index);
                case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                    return (MaterialObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new MaterialObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MaterialObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (MaterialObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (MaterialObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MaterialObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMaterialObjectGetter? lhs,
            IMaterialObjectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout4MajorRecordGetter)lhs, (IFallout4MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)MaterialObject_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.DNAMs) ?? true))
            {
                if (!lhs.DNAMs.SequenceEqualNullable(rhs.DNAMs)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.FalloffScale) ?? true))
            {
                if (!lhs.FalloffScale.EqualsWithin(rhs.FalloffScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.FalloffBias) ?? true))
            {
                if (!lhs.FalloffBias.EqualsWithin(rhs.FalloffBias)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.NoiseUvScale) ?? true))
            {
                if (!lhs.NoiseUvScale.EqualsWithin(rhs.NoiseUvScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.MaterialUvScale) ?? true))
            {
                if (!lhs.MaterialUvScale.EqualsWithin(rhs.MaterialUvScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.ProjectionVector) ?? true))
            {
                if (!lhs.ProjectionVector.Equals(rhs.ProjectionVector)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.NormalDampener) ?? true))
            {
                if (!lhs.NormalDampener.EqualsWithin(rhs.NormalDampener)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.SinglePassColor) ?? true))
            {
                if (!lhs.SinglePassColor.ColorOnlyEquals(rhs.SinglePassColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.IsSinglePass) ?? true))
            {
                if (lhs.IsSinglePass != rhs.IsSinglePass) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.DATADataTypeState) ?? true))
            {
                if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IMaterialObjectGetter?)lhs,
                rhs: rhs as IMaterialObjectGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IMaterialObjectGetter?)lhs,
                rhs: rhs as IMaterialObjectGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IMaterialObjectGetter item)
        {
            var hash = new HashCode();
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.DNAMs);
            hash.Add(item.FalloffScale);
            hash.Add(item.FalloffBias);
            hash.Add(item.NoiseUvScale);
            hash.Add(item.MaterialUvScale);
            hash.Add(item.ProjectionVector);
            hash.Add(item.NormalDampener);
            hash.Add(item.SinglePassColor);
            hash.Add(item.IsSinglePass);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout4MajorRecordGetter item)
        {
            return GetHashCode(item: (IMaterialObjectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMaterialObjectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MaterialObject.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMaterialObjectGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public MaterialObject Duplicate(
            IMaterialObjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new MaterialObject(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMaterialObjectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMaterialObjectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class MaterialObjectSetterTranslationCommon : Fallout4MajorRecordSetterTranslationCommon
    {
        public new static readonly MaterialObjectSetterTranslationCommon Instance = new MaterialObjectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMaterialObjectInternal item,
            IMaterialObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IMaterialObject item,
            IMaterialObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout4MajorRecord)item,
                (IFallout4MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)MaterialObject_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MaterialObject_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.DNAMs) ?? true))
            {
                errorMask?.PushIndex((int)MaterialObject_FieldIndex.DNAMs);
                try
                {
                    item.DNAMs.SetTo(
                        rhs.DNAMs
                            .Select(b => new MemorySlice<byte>(b.ToArray())));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.FalloffScale) ?? true))
            {
                item.FalloffScale = rhs.FalloffScale;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.FalloffBias) ?? true))
            {
                item.FalloffBias = rhs.FalloffBias;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.NoiseUvScale) ?? true))
            {
                item.NoiseUvScale = rhs.NoiseUvScale;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.MaterialUvScale) ?? true))
            {
                item.MaterialUvScale = rhs.MaterialUvScale;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.ProjectionVector) ?? true))
            {
                item.ProjectionVector = rhs.ProjectionVector;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.NormalDampener) ?? true))
            {
                item.NormalDampener = rhs.NormalDampener;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.SinglePassColor) ?? true))
            {
                item.SinglePassColor = rhs.SinglePassColor;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.IsSinglePass) ?? true))
            {
                item.IsSinglePass = rhs.IsSinglePass;
            }
            if ((copyMask?.GetShouldTranslate((int)MaterialObject_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IMaterialObject item,
            IMaterialObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMaterialObjectInternal)item,
                rhs: (IMaterialObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMaterialObject)item,
                rhs: (IMaterialObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMaterialObjectInternal)item,
                rhs: (IMaterialObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMaterialObject)item,
                rhs: (IMaterialObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public MaterialObject DeepCopy(
            IMaterialObjectGetter item,
            MaterialObject.TranslationMask? copyMask = null)
        {
            MaterialObject ret = (MaterialObject)((MaterialObjectCommon)((IMaterialObjectGetter)item).CommonInstance()!).GetNew();
            ((MaterialObjectSetterTranslationCommon)((IMaterialObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MaterialObject DeepCopy(
            IMaterialObjectGetter item,
            out MaterialObject.ErrorMask errorMask,
            MaterialObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MaterialObject ret = (MaterialObject)((MaterialObjectCommon)((IMaterialObjectGetter)item).CommonInstance()!).GetNew();
            ((MaterialObjectSetterTranslationCommon)((IMaterialObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MaterialObject.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MaterialObject DeepCopy(
            IMaterialObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MaterialObject ret = (MaterialObject)((MaterialObjectCommon)((IMaterialObjectGetter)item).CommonInstance()!).GetNew();
            ((MaterialObjectSetterTranslationCommon)((IMaterialObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class MaterialObject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MaterialObject_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MaterialObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MaterialObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MaterialObjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MaterialObjectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class MaterialObjectBinaryWriteTranslation :
        Fallout4MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly MaterialObjectBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IMaterialObjectGetter item,
            MutagenWriter writer)
        {
            Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IMaterialObjectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ReadOnlyMemorySlice<Byte>>.Instance.WritePerItem(
                writer: writer,
                items: item.DNAMs,
                recordType: translationParams.ConvertToCustom(RecordTypes.DNAM),
                transl: ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FalloffScale);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FalloffBias);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.NoiseUvScale);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MaterialUvScale);
                P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ProjectionVector);
                if (!item.DATADataTypeState.HasFlag(MaterialObject.DATADataType.Break0))
                {
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.NormalDampener);
                    if (!item.DATADataTypeState.HasFlag(MaterialObject.DATADataType.Break1))
                    {
                        ColorBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.SinglePassColor,
                            binaryType: ColorBinaryType.NoAlphaFloat);
                        writer.Write(item.IsSinglePass, length: 4);
                    }
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IMaterialObjectGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.MATO,
                writeEmbedded: Fallout4MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMaterialObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IMaterialObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IMaterialObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MaterialObjectBinaryCreateTranslation : Fallout4MajorRecordBinaryCreateTranslation
    {
        public new static readonly MaterialObjectBinaryCreateTranslation Instance = new MaterialObjectBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.MATO;
        public static void FillBinaryStructs(
            IMaterialObjectInternal item,
            MutagenFrame frame)
        {
            Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IMaterialObjectInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MODS:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)MaterialObject_FieldIndex.Model;
                }
                case RecordTypeInts.DNAM:
                {
                    item.DNAMs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<MemorySlice<Byte>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.DNAM),
                            transl: ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse));
                    return (int)MaterialObject_FieldIndex.DNAMs;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.FalloffScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FalloffBias = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.NoiseUvScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MaterialUvScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 12) return null;
                    item.ProjectionVector = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= MaterialObject.DATADataType.Break0;
                        return (int)MaterialObject_FieldIndex.ProjectionVector;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.NormalDampener = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= MaterialObject.DATADataType.Break1;
                        return (int)MaterialObject_FieldIndex.NormalDampener;
                    }
                    if (dataFrame.Remaining < 12) return null;
                    item.SinglePassColor = dataFrame.ReadColor(ColorBinaryType.NoAlphaFloat);
                    if (dataFrame.Remaining < 4) return null;
                    item.IsSinglePass = BooleanBinaryTranslation<MutagenFrame>.Instance.Parse(
                        reader: dataFrame,
                        byteLength: 4);
                    return (int)MaterialObject_FieldIndex.IsSinglePass;
                }
                default:
                    return Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class MaterialObjectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class MaterialObjectBinaryOverlay :
        Fallout4MajorRecordBinaryOverlay,
        IMaterialObjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MaterialObject_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MaterialObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MaterialObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MaterialObjectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MaterialObjectCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MaterialObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MaterialObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IMaterialObject);


        public IModelGetter? Model { get; private set; }
        public IReadOnlyList<ReadOnlyMemorySlice<Byte>> DNAMs { get; private set; } = Array.Empty<ReadOnlyMemorySlice<Byte>>();
        private RangeInt32? _DATALocation;
        public MaterialObject.DATADataType DATADataTypeState { get; private set; }
        #region FalloffScale
        private int _FalloffScaleLocation => _DATALocation!.Value.Min;
        private bool _FalloffScale_IsSet => _DATALocation.HasValue;
        public Single FalloffScale => _FalloffScale_IsSet ? _recordData.Slice(_FalloffScaleLocation, 4).Float() : default(Single);
        #endregion
        #region FalloffBias
        private int _FalloffBiasLocation => _DATALocation!.Value.Min + 0x4;
        private bool _FalloffBias_IsSet => _DATALocation.HasValue;
        public Single FalloffBias => _FalloffBias_IsSet ? _recordData.Slice(_FalloffBiasLocation, 4).Float() : default(Single);
        #endregion
        #region NoiseUvScale
        private int _NoiseUvScaleLocation => _DATALocation!.Value.Min + 0x8;
        private bool _NoiseUvScale_IsSet => _DATALocation.HasValue;
        public Single NoiseUvScale => _NoiseUvScale_IsSet ? _recordData.Slice(_NoiseUvScaleLocation, 4).Float() : default(Single);
        #endregion
        #region MaterialUvScale
        private int _MaterialUvScaleLocation => _DATALocation!.Value.Min + 0xC;
        private bool _MaterialUvScale_IsSet => _DATALocation.HasValue;
        public Single MaterialUvScale => _MaterialUvScale_IsSet ? _recordData.Slice(_MaterialUvScaleLocation, 4).Float() : default(Single);
        #endregion
        #region ProjectionVector
        private int _ProjectionVectorLocation => _DATALocation!.Value.Min + 0x10;
        private bool _ProjectionVector_IsSet => _DATALocation.HasValue;
        public P3Float ProjectionVector => _ProjectionVector_IsSet ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_recordData.Slice(_ProjectionVectorLocation, 12)) : default(P3Float);
        #endregion
        #region NormalDampener
        private int _NormalDampenerLocation => _DATALocation!.Value.Min + 0x1C;
        private bool _NormalDampener_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(MaterialObject.DATADataType.Break0);
        public Single NormalDampener => _NormalDampener_IsSet ? _recordData.Slice(_NormalDampenerLocation, 4).Float() : default(Single);
        #endregion
        #region SinglePassColor
        private int _SinglePassColorLocation => _DATALocation!.Value.Min + 0x20;
        private bool _SinglePassColor_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(MaterialObject.DATADataType.Break1);
        public Color SinglePassColor => _SinglePassColor_IsSet ? _recordData.Slice(_SinglePassColorLocation, 12).ReadColor(ColorBinaryType.NoAlphaFloat) : default(Color);
        #endregion
        #region IsSinglePass
        private int _IsSinglePassLocation => _DATALocation!.Value.Min + 0x2C;
        private bool _IsSinglePass_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(MaterialObject.DATADataType.Break1);
        public Boolean IsSinglePass => _IsSinglePass_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_IsSinglePassLocation, 4)) >= 1 : default(Boolean);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MaterialObjectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IMaterialObjectGetter MaterialObjectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new MaterialObjectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IMaterialObjectGetter MaterialObjectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return MaterialObjectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MODS:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)MaterialObject_FieldIndex.Model;
                }
                case RecordTypeInts.DNAM:
                {
                    this.DNAMs = BinaryOverlayList.FactoryByArray<ReadOnlyMemorySlice<Byte>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => p.MetaData.Constants.Subrecord(s).Content,
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.DNAM,
                            skipHeader: false,
                            translationParams: translationParams));
                    return (int)MaterialObject_FieldIndex.DNAMs;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x1C)
                    {
                        this.DATADataTypeState |= MaterialObject.DATADataType.Break0;
                    }
                    if (subLen <= 0x20)
                    {
                        this.DATADataTypeState |= MaterialObject.DATADataType.Break1;
                    }
                    return (int)MaterialObject_FieldIndex.IsSinglePass;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MaterialObjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<MaterialObject>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMaterialObjectGetter rhs) return false;
            return ((MaterialObjectCommon)((IMaterialObjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMaterialObjectGetter? obj)
        {
            return ((MaterialObjectCommon)((IMaterialObjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MaterialObjectCommon)((IMaterialObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

