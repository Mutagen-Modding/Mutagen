/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class HeadData :
        IEquatable<IHeadDataGetter>,
        IHeadData,
        ILoquiObjectSetter<HeadData>
    {
        #region Ctor
        public HeadData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NeckFatAdjustmentsScale
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NeckFatAdjustmentsScale? _NeckFatAdjustmentsScale;
        public NeckFatAdjustmentsScale? NeckFatAdjustmentsScale
        {
            get => _NeckFatAdjustmentsScale;
            set => _NeckFatAdjustmentsScale = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INeckFatAdjustmentsScaleGetter? IHeadDataGetter.NeckFatAdjustmentsScale => this.NeckFatAdjustmentsScale;
        #endregion
        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<HeadPartReference> _HeadParts = new ExtendedList<HeadPartReference>();
        public ExtendedList<HeadPartReference> HeadParts
        {
            get => this._HeadParts;
            init => this._HeadParts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IHeadPartReferenceGetter> IHeadDataGetter.HeadParts => _HeadParts;
        #endregion

        #endregion
        #region RacePresets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<INpcGetter>> _RacePresets = new ExtendedList<IFormLinkGetter<INpcGetter>>();
        public ExtendedList<IFormLinkGetter<INpcGetter>> RacePresets
        {
            get => this._RacePresets;
            init => this._RacePresets = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<INpcGetter>> IHeadDataGetter.RacePresets => _RacePresets;
        #endregion

        #endregion
        #region AvailableHairColors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IColorRecordGetter>> _AvailableHairColors = new ExtendedList<IFormLinkGetter<IColorRecordGetter>>();
        public ExtendedList<IFormLinkGetter<IColorRecordGetter>> AvailableHairColors
        {
            get => this._AvailableHairColors;
            init => this._AvailableHairColors = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IColorRecordGetter>> IHeadDataGetter.AvailableHairColors => _AvailableHairColors;
        #endregion

        #endregion
        #region FaceDetails
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ITextureSetGetter>> _FaceDetails = new ExtendedList<IFormLinkGetter<ITextureSetGetter>>();
        public ExtendedList<IFormLinkGetter<ITextureSetGetter>> FaceDetails
        {
            get => this._FaceDetails;
            init => this._FaceDetails = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ITextureSetGetter>> IHeadDataGetter.FaceDetails => _FaceDetails;
        #endregion

        #endregion
        #region DefaultFaceTexture
        private readonly IFormLinkNullable<ITextureSetGetter> _DefaultFaceTexture = new FormLinkNullable<ITextureSetGetter>();
        public IFormLinkNullable<ITextureSetGetter> DefaultFaceTexture
        {
            get => _DefaultFaceTexture;
            set => _DefaultFaceTexture.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITextureSetGetter> IHeadDataGetter.DefaultFaceTexture => this.DefaultFaceTexture;
        #endregion
        #region TintLayers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TintGroup> _TintLayers = new ExtendedList<TintGroup>();
        public ExtendedList<TintGroup> TintLayers
        {
            get => this._TintLayers;
            init => this._TintLayers = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITintGroupGetter> IHeadDataGetter.TintLayers => _TintLayers;
        #endregion

        #endregion
        #region MorphGroups
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MorphGroup> _MorphGroups = new ExtendedList<MorphGroup>();
        public ExtendedList<MorphGroup> MorphGroups
        {
            get => this._MorphGroups;
            init => this._MorphGroups = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMorphGroupGetter> IHeadDataGetter.MorphGroups => _MorphGroups;
        #endregion

        #endregion
        #region FaceMorphs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FaceMorph> _FaceMorphs = new ExtendedList<FaceMorph>();
        public ExtendedList<FaceMorph> FaceMorphs
        {
            get => this._FaceMorphs;
            init => this._FaceMorphs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFaceMorphGetter> IHeadDataGetter.FaceMorphs => _FaceMorphs;
        #endregion

        #endregion
        #region MaleWrinkleMapPath
        public String? MaleWrinkleMapPath { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IHeadDataGetter.MaleWrinkleMapPath => this.MaleWrinkleMapPath;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HeadDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IHeadDataGetter rhs) return false;
            return ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHeadDataGetter? obj)
        {
            return ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NeckFatAdjustmentsScale = new MaskItem<TItem, NeckFatAdjustmentsScale.Mask<TItem>?>(initialValue, new NeckFatAdjustmentsScale.Mask<TItem>(initialValue));
                this.HeadParts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>());
                this.RacePresets = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.AvailableHairColors = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FaceDetails = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.DefaultFaceTexture = initialValue;
                this.TintLayers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintGroup.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TintGroup.Mask<TItem>?>>());
                this.MorphGroups = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MorphGroup.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MorphGroup.Mask<TItem>?>>());
                this.FaceMorphs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FaceMorph.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FaceMorph.Mask<TItem>?>>());
                this.MaleWrinkleMapPath = initialValue;
            }

            public Mask(
                TItem NeckFatAdjustmentsScale,
                TItem HeadParts,
                TItem RacePresets,
                TItem AvailableHairColors,
                TItem FaceDetails,
                TItem DefaultFaceTexture,
                TItem TintLayers,
                TItem MorphGroups,
                TItem FaceMorphs,
                TItem MaleWrinkleMapPath)
            {
                this.NeckFatAdjustmentsScale = new MaskItem<TItem, NeckFatAdjustmentsScale.Mask<TItem>?>(NeckFatAdjustmentsScale, new NeckFatAdjustmentsScale.Mask<TItem>(NeckFatAdjustmentsScale));
                this.HeadParts = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>?>(HeadParts, Enumerable.Empty<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>());
                this.RacePresets = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RacePresets, Enumerable.Empty<(int Index, TItem Value)>());
                this.AvailableHairColors = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AvailableHairColors, Enumerable.Empty<(int Index, TItem Value)>());
                this.FaceDetails = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(FaceDetails, Enumerable.Empty<(int Index, TItem Value)>());
                this.DefaultFaceTexture = DefaultFaceTexture;
                this.TintLayers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintGroup.Mask<TItem>?>>?>(TintLayers, Enumerable.Empty<MaskItemIndexed<TItem, TintGroup.Mask<TItem>?>>());
                this.MorphGroups = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MorphGroup.Mask<TItem>?>>?>(MorphGroups, Enumerable.Empty<MaskItemIndexed<TItem, MorphGroup.Mask<TItem>?>>());
                this.FaceMorphs = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FaceMorph.Mask<TItem>?>>?>(FaceMorphs, Enumerable.Empty<MaskItemIndexed<TItem, FaceMorph.Mask<TItem>?>>());
                this.MaleWrinkleMapPath = MaleWrinkleMapPath;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, NeckFatAdjustmentsScale.Mask<TItem>?>? NeckFatAdjustmentsScale { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, HeadPartReference.Mask<TItem>?>>?>? HeadParts;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RacePresets;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AvailableHairColors;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? FaceDetails;
            public TItem DefaultFaceTexture;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintGroup.Mask<TItem>?>>?>? TintLayers;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MorphGroup.Mask<TItem>?>>?>? MorphGroups;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FaceMorph.Mask<TItem>?>>?>? FaceMorphs;
            public TItem MaleWrinkleMapPath;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NeckFatAdjustmentsScale, rhs.NeckFatAdjustmentsScale)) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.RacePresets, rhs.RacePresets)) return false;
                if (!object.Equals(this.AvailableHairColors, rhs.AvailableHairColors)) return false;
                if (!object.Equals(this.FaceDetails, rhs.FaceDetails)) return false;
                if (!object.Equals(this.DefaultFaceTexture, rhs.DefaultFaceTexture)) return false;
                if (!object.Equals(this.TintLayers, rhs.TintLayers)) return false;
                if (!object.Equals(this.MorphGroups, rhs.MorphGroups)) return false;
                if (!object.Equals(this.FaceMorphs, rhs.FaceMorphs)) return false;
                if (!object.Equals(this.MaleWrinkleMapPath, rhs.MaleWrinkleMapPath)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NeckFatAdjustmentsScale);
                hash.Add(this.HeadParts);
                hash.Add(this.RacePresets);
                hash.Add(this.AvailableHairColors);
                hash.Add(this.FaceDetails);
                hash.Add(this.DefaultFaceTexture);
                hash.Add(this.TintLayers);
                hash.Add(this.MorphGroups);
                hash.Add(this.FaceMorphs);
                hash.Add(this.MaleWrinkleMapPath);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (NeckFatAdjustmentsScale != null)
                {
                    if (!eval(this.NeckFatAdjustmentsScale.Overall)) return false;
                    if (this.NeckFatAdjustmentsScale.Specific != null && !this.NeckFatAdjustmentsScale.Specific.All(eval)) return false;
                }
                if (this.HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null)
                    {
                        foreach (var item in this.HeadParts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RacePresets != null)
                {
                    if (!eval(this.RacePresets.Overall)) return false;
                    if (this.RacePresets.Specific != null)
                    {
                        foreach (var item in this.RacePresets.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AvailableHairColors != null)
                {
                    if (!eval(this.AvailableHairColors.Overall)) return false;
                    if (this.AvailableHairColors.Specific != null)
                    {
                        foreach (var item in this.AvailableHairColors.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.FaceDetails != null)
                {
                    if (!eval(this.FaceDetails.Overall)) return false;
                    if (this.FaceDetails.Specific != null)
                    {
                        foreach (var item in this.FaceDetails.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.DefaultFaceTexture)) return false;
                if (this.TintLayers != null)
                {
                    if (!eval(this.TintLayers.Overall)) return false;
                    if (this.TintLayers.Specific != null)
                    {
                        foreach (var item in this.TintLayers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MorphGroups != null)
                {
                    if (!eval(this.MorphGroups.Overall)) return false;
                    if (this.MorphGroups.Specific != null)
                    {
                        foreach (var item in this.MorphGroups.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.FaceMorphs != null)
                {
                    if (!eval(this.FaceMorphs.Overall)) return false;
                    if (this.FaceMorphs.Specific != null)
                    {
                        foreach (var item in this.FaceMorphs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.MaleWrinkleMapPath)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (NeckFatAdjustmentsScale != null)
                {
                    if (eval(this.NeckFatAdjustmentsScale.Overall)) return true;
                    if (this.NeckFatAdjustmentsScale.Specific != null && this.NeckFatAdjustmentsScale.Specific.Any(eval)) return true;
                }
                if (this.HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null)
                    {
                        foreach (var item in this.HeadParts.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RacePresets != null)
                {
                    if (eval(this.RacePresets.Overall)) return true;
                    if (this.RacePresets.Specific != null)
                    {
                        foreach (var item in this.RacePresets.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.AvailableHairColors != null)
                {
                    if (eval(this.AvailableHairColors.Overall)) return true;
                    if (this.AvailableHairColors.Specific != null)
                    {
                        foreach (var item in this.AvailableHairColors.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.FaceDetails != null)
                {
                    if (eval(this.FaceDetails.Overall)) return true;
                    if (this.FaceDetails.Specific != null)
                    {
                        foreach (var item in this.FaceDetails.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.DefaultFaceTexture)) return true;
                if (this.TintLayers != null)
                {
                    if (eval(this.TintLayers.Overall)) return true;
                    if (this.TintLayers.Specific != null)
                    {
                        foreach (var item in this.TintLayers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.MorphGroups != null)
                {
                    if (eval(this.MorphGroups.Overall)) return true;
                    if (this.MorphGroups.Specific != null)
                    {
                        foreach (var item in this.MorphGroups.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.FaceMorphs != null)
                {
                    if (eval(this.FaceMorphs.Overall)) return true;
                    if (this.FaceMorphs.Specific != null)
                    {
                        foreach (var item in this.FaceMorphs.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.MaleWrinkleMapPath)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new HeadData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.NeckFatAdjustmentsScale = this.NeckFatAdjustmentsScale == null ? null : new MaskItem<R, NeckFatAdjustmentsScale.Mask<R>?>(eval(this.NeckFatAdjustmentsScale.Overall), this.NeckFatAdjustmentsScale.Specific?.Translate(eval));
                if (HeadParts != null)
                {
                    obj.HeadParts = new MaskItem<R, IEnumerable<MaskItemIndexed<R, HeadPartReference.Mask<R>?>>?>(eval(this.HeadParts.Overall), Enumerable.Empty<MaskItemIndexed<R, HeadPartReference.Mask<R>?>>());
                    if (HeadParts.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, HeadPartReference.Mask<R>?>>();
                        obj.HeadParts.Specific = l;
                        foreach (var item in HeadParts.Specific)
                        {
                            MaskItemIndexed<R, HeadPartReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, HeadPartReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (RacePresets != null)
                {
                    obj.RacePresets = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RacePresets.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RacePresets.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RacePresets.Specific = l;
                        foreach (var item in RacePresets.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (AvailableHairColors != null)
                {
                    obj.AvailableHairColors = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AvailableHairColors.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AvailableHairColors.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AvailableHairColors.Specific = l;
                        foreach (var item in AvailableHairColors.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (FaceDetails != null)
                {
                    obj.FaceDetails = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.FaceDetails.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (FaceDetails.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.FaceDetails.Specific = l;
                        foreach (var item in FaceDetails.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.DefaultFaceTexture = eval(this.DefaultFaceTexture);
                if (TintLayers != null)
                {
                    obj.TintLayers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TintGroup.Mask<R>?>>?>(eval(this.TintLayers.Overall), Enumerable.Empty<MaskItemIndexed<R, TintGroup.Mask<R>?>>());
                    if (TintLayers.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TintGroup.Mask<R>?>>();
                        obj.TintLayers.Specific = l;
                        foreach (var item in TintLayers.Specific)
                        {
                            MaskItemIndexed<R, TintGroup.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, TintGroup.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (MorphGroups != null)
                {
                    obj.MorphGroups = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MorphGroup.Mask<R>?>>?>(eval(this.MorphGroups.Overall), Enumerable.Empty<MaskItemIndexed<R, MorphGroup.Mask<R>?>>());
                    if (MorphGroups.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MorphGroup.Mask<R>?>>();
                        obj.MorphGroups.Specific = l;
                        foreach (var item in MorphGroups.Specific)
                        {
                            MaskItemIndexed<R, MorphGroup.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, MorphGroup.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (FaceMorphs != null)
                {
                    obj.FaceMorphs = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FaceMorph.Mask<R>?>>?>(eval(this.FaceMorphs.Overall), Enumerable.Empty<MaskItemIndexed<R, FaceMorph.Mask<R>?>>());
                    if (FaceMorphs.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FaceMorph.Mask<R>?>>();
                        obj.FaceMorphs.Specific = l;
                        foreach (var item in FaceMorphs.Specific)
                        {
                            MaskItemIndexed<R, FaceMorph.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, FaceMorph.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.MaleWrinkleMapPath = eval(this.MaleWrinkleMapPath);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(HeadData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, HeadData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(HeadData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.NeckFatAdjustmentsScale?.Overall ?? true)
                    {
                        NeckFatAdjustmentsScale?.Print(sb);
                    }
                    if ((printMask?.HeadParts?.Overall ?? true)
                        && HeadParts is {} HeadPartsItem)
                    {
                        sb.AppendLine("HeadParts =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(HeadPartsItem.Overall);
                            if (HeadPartsItem.Specific != null)
                            {
                                foreach (var subItem in HeadPartsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.RacePresets?.Overall ?? true)
                        && RacePresets is {} RacePresetsItem)
                    {
                        sb.AppendLine("RacePresets =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RacePresetsItem.Overall);
                            if (RacePresetsItem.Specific != null)
                            {
                                foreach (var subItem in RacePresetsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.AvailableHairColors?.Overall ?? true)
                        && AvailableHairColors is {} AvailableHairColorsItem)
                    {
                        sb.AppendLine("AvailableHairColors =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AvailableHairColorsItem.Overall);
                            if (AvailableHairColorsItem.Specific != null)
                            {
                                foreach (var subItem in AvailableHairColorsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.FaceDetails?.Overall ?? true)
                        && FaceDetails is {} FaceDetailsItem)
                    {
                        sb.AppendLine("FaceDetails =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FaceDetailsItem.Overall);
                            if (FaceDetailsItem.Specific != null)
                            {
                                foreach (var subItem in FaceDetailsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.DefaultFaceTexture ?? true)
                    {
                        sb.AppendItem(DefaultFaceTexture, "DefaultFaceTexture");
                    }
                    if ((printMask?.TintLayers?.Overall ?? true)
                        && TintLayers is {} TintLayersItem)
                    {
                        sb.AppendLine("TintLayers =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TintLayersItem.Overall);
                            if (TintLayersItem.Specific != null)
                            {
                                foreach (var subItem in TintLayersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MorphGroups?.Overall ?? true)
                        && MorphGroups is {} MorphGroupsItem)
                    {
                        sb.AppendLine("MorphGroups =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MorphGroupsItem.Overall);
                            if (MorphGroupsItem.Specific != null)
                            {
                                foreach (var subItem in MorphGroupsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.FaceMorphs?.Overall ?? true)
                        && FaceMorphs is {} FaceMorphsItem)
                    {
                        sb.AppendLine("FaceMorphs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FaceMorphsItem.Overall);
                            if (FaceMorphsItem.Specific != null)
                            {
                                foreach (var subItem in FaceMorphsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.MaleWrinkleMapPath ?? true)
                    {
                        sb.AppendItem(MaleWrinkleMapPath, "MaleWrinkleMapPath");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, NeckFatAdjustmentsScale.ErrorMask?>? NeckFatAdjustmentsScale;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, HeadPartReference.ErrorMask?>>?>? HeadParts;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RacePresets;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AvailableHairColors;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? FaceDetails;
            public Exception? DefaultFaceTexture;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintGroup.ErrorMask?>>?>? TintLayers;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphGroup.ErrorMask?>>?>? MorphGroups;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FaceMorph.ErrorMask?>>?>? FaceMorphs;
            public Exception? MaleWrinkleMapPath;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
                switch (enu)
                {
                    case HeadData_FieldIndex.NeckFatAdjustmentsScale:
                        return NeckFatAdjustmentsScale;
                    case HeadData_FieldIndex.HeadParts:
                        return HeadParts;
                    case HeadData_FieldIndex.RacePresets:
                        return RacePresets;
                    case HeadData_FieldIndex.AvailableHairColors:
                        return AvailableHairColors;
                    case HeadData_FieldIndex.FaceDetails:
                        return FaceDetails;
                    case HeadData_FieldIndex.DefaultFaceTexture:
                        return DefaultFaceTexture;
                    case HeadData_FieldIndex.TintLayers:
                        return TintLayers;
                    case HeadData_FieldIndex.MorphGroups:
                        return MorphGroups;
                    case HeadData_FieldIndex.FaceMorphs:
                        return FaceMorphs;
                    case HeadData_FieldIndex.MaleWrinkleMapPath:
                        return MaleWrinkleMapPath;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
                switch (enu)
                {
                    case HeadData_FieldIndex.NeckFatAdjustmentsScale:
                        this.NeckFatAdjustmentsScale = new MaskItem<Exception?, NeckFatAdjustmentsScale.ErrorMask?>(ex, null);
                        break;
                    case HeadData_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, HeadPartReference.ErrorMask?>>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.RacePresets:
                        this.RacePresets = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.AvailableHairColors:
                        this.AvailableHairColors = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.FaceDetails:
                        this.FaceDetails = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.DefaultFaceTexture:
                        this.DefaultFaceTexture = ex;
                        break;
                    case HeadData_FieldIndex.TintLayers:
                        this.TintLayers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintGroup.ErrorMask?>>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.MorphGroups:
                        this.MorphGroups = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphGroup.ErrorMask?>>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.FaceMorphs:
                        this.FaceMorphs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FaceMorph.ErrorMask?>>?>(ex, null);
                        break;
                    case HeadData_FieldIndex.MaleWrinkleMapPath:
                        this.MaleWrinkleMapPath = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                HeadData_FieldIndex enu = (HeadData_FieldIndex)index;
                switch (enu)
                {
                    case HeadData_FieldIndex.NeckFatAdjustmentsScale:
                        this.NeckFatAdjustmentsScale = (MaskItem<Exception?, NeckFatAdjustmentsScale.ErrorMask?>?)obj;
                        break;
                    case HeadData_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, HeadPartReference.ErrorMask?>>?>)obj;
                        break;
                    case HeadData_FieldIndex.RacePresets:
                        this.RacePresets = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadData_FieldIndex.AvailableHairColors:
                        this.AvailableHairColors = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadData_FieldIndex.FaceDetails:
                        this.FaceDetails = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case HeadData_FieldIndex.DefaultFaceTexture:
                        this.DefaultFaceTexture = (Exception?)obj;
                        break;
                    case HeadData_FieldIndex.TintLayers:
                        this.TintLayers = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintGroup.ErrorMask?>>?>)obj;
                        break;
                    case HeadData_FieldIndex.MorphGroups:
                        this.MorphGroups = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphGroup.ErrorMask?>>?>)obj;
                        break;
                    case HeadData_FieldIndex.FaceMorphs:
                        this.FaceMorphs = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FaceMorph.ErrorMask?>>?>)obj;
                        break;
                    case HeadData_FieldIndex.MaleWrinkleMapPath:
                        this.MaleWrinkleMapPath = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (NeckFatAdjustmentsScale != null) return true;
                if (HeadParts != null) return true;
                if (RacePresets != null) return true;
                if (AvailableHairColors != null) return true;
                if (FaceDetails != null) return true;
                if (DefaultFaceTexture != null) return true;
                if (TintLayers != null) return true;
                if (MorphGroups != null) return true;
                if (FaceMorphs != null) return true;
                if (MaleWrinkleMapPath != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                NeckFatAdjustmentsScale?.Print(sb);
                if (HeadParts is {} HeadPartsItem)
                {
                    sb.AppendLine("HeadParts =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(HeadPartsItem.Overall);
                        if (HeadPartsItem.Specific != null)
                        {
                            foreach (var subItem in HeadPartsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (RacePresets is {} RacePresetsItem)
                {
                    sb.AppendLine("RacePresets =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RacePresetsItem.Overall);
                        if (RacePresetsItem.Specific != null)
                        {
                            foreach (var subItem in RacePresetsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (AvailableHairColors is {} AvailableHairColorsItem)
                {
                    sb.AppendLine("AvailableHairColors =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AvailableHairColorsItem.Overall);
                        if (AvailableHairColorsItem.Specific != null)
                        {
                            foreach (var subItem in AvailableHairColorsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (FaceDetails is {} FaceDetailsItem)
                {
                    sb.AppendLine("FaceDetails =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FaceDetailsItem.Overall);
                        if (FaceDetailsItem.Specific != null)
                        {
                            foreach (var subItem in FaceDetailsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(DefaultFaceTexture, "DefaultFaceTexture");
                }
                if (TintLayers is {} TintLayersItem)
                {
                    sb.AppendLine("TintLayers =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TintLayersItem.Overall);
                        if (TintLayersItem.Specific != null)
                        {
                            foreach (var subItem in TintLayersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (MorphGroups is {} MorphGroupsItem)
                {
                    sb.AppendLine("MorphGroups =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MorphGroupsItem.Overall);
                        if (MorphGroupsItem.Specific != null)
                        {
                            foreach (var subItem in MorphGroupsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (FaceMorphs is {} FaceMorphsItem)
                {
                    sb.AppendLine("FaceMorphs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FaceMorphsItem.Overall);
                        if (FaceMorphsItem.Specific != null)
                        {
                            foreach (var subItem in FaceMorphsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(MaleWrinkleMapPath, "MaleWrinkleMapPath");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NeckFatAdjustmentsScale = this.NeckFatAdjustmentsScale.Combine(rhs.NeckFatAdjustmentsScale, (l, r) => l.Combine(r));
                ret.HeadParts = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, HeadPartReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.HeadParts?.Overall, rhs.HeadParts?.Overall), Noggog.ExceptionExt.Combine(this.HeadParts?.Specific, rhs.HeadParts?.Specific));
                ret.RacePresets = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.RacePresets?.Overall, rhs.RacePresets?.Overall), Noggog.ExceptionExt.Combine(this.RacePresets?.Specific, rhs.RacePresets?.Specific));
                ret.AvailableHairColors = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.AvailableHairColors?.Overall, rhs.AvailableHairColors?.Overall), Noggog.ExceptionExt.Combine(this.AvailableHairColors?.Specific, rhs.AvailableHairColors?.Specific));
                ret.FaceDetails = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.FaceDetails?.Overall, rhs.FaceDetails?.Overall), Noggog.ExceptionExt.Combine(this.FaceDetails?.Specific, rhs.FaceDetails?.Specific));
                ret.DefaultFaceTexture = this.DefaultFaceTexture.Combine(rhs.DefaultFaceTexture);
                ret.TintLayers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintGroup.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.TintLayers?.Overall, rhs.TintLayers?.Overall), Noggog.ExceptionExt.Combine(this.TintLayers?.Specific, rhs.TintLayers?.Specific));
                ret.MorphGroups = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MorphGroup.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MorphGroups?.Overall, rhs.MorphGroups?.Overall), Noggog.ExceptionExt.Combine(this.MorphGroups?.Specific, rhs.MorphGroups?.Specific));
                ret.FaceMorphs = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FaceMorph.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.FaceMorphs?.Overall, rhs.FaceMorphs?.Overall), Noggog.ExceptionExt.Combine(this.FaceMorphs?.Specific, rhs.FaceMorphs?.Specific));
                ret.MaleWrinkleMapPath = this.MaleWrinkleMapPath.Combine(rhs.MaleWrinkleMapPath);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public NeckFatAdjustmentsScale.TranslationMask? NeckFatAdjustmentsScale;
            public HeadPartReference.TranslationMask? HeadParts;
            public bool RacePresets;
            public bool AvailableHairColors;
            public bool FaceDetails;
            public bool DefaultFaceTexture;
            public TintGroup.TranslationMask? TintLayers;
            public MorphGroup.TranslationMask? MorphGroups;
            public FaceMorph.TranslationMask? FaceMorphs;
            public bool MaleWrinkleMapPath;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.RacePresets = defaultOn;
                this.AvailableHairColors = defaultOn;
                this.FaceDetails = defaultOn;
                this.DefaultFaceTexture = defaultOn;
                this.MaleWrinkleMapPath = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NeckFatAdjustmentsScale != null ? NeckFatAdjustmentsScale.OnOverall : DefaultOn, NeckFatAdjustmentsScale?.GetCrystal()));
                ret.Add((HeadParts == null ? DefaultOn : !HeadParts.GetCrystal().CopyNothing, HeadParts?.GetCrystal()));
                ret.Add((RacePresets, null));
                ret.Add((AvailableHairColors, null));
                ret.Add((FaceDetails, null));
                ret.Add((DefaultFaceTexture, null));
                ret.Add((TintLayers == null ? DefaultOn : !TintLayers.GetCrystal().CopyNothing, TintLayers?.GetCrystal()));
                ret.Add((MorphGroups == null ? DefaultOn : !MorphGroups.GetCrystal().CopyNothing, MorphGroups?.GetCrystal()));
                ret.Add((FaceMorphs == null ? DefaultOn : !FaceMorphs.GetCrystal().CopyNothing, FaceMorphs?.GetCrystal()));
                ret.Add((MaleWrinkleMapPath, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => HeadDataCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => HeadDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HeadDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HeadDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static HeadData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new HeadData();
            ((HeadDataSetterCommon)((IHeadDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out HeadData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((HeadDataSetterCommon)((IHeadDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static HeadData GetNew()
        {
            return new HeadData();
        }

    }
    #endregion

    #region Interface
    public partial interface IHeadData :
        IFormLinkContainer,
        IHeadDataGetter,
        ILoquiObjectSetter<IHeadData>
    {
        new NeckFatAdjustmentsScale? NeckFatAdjustmentsScale { get; set; }
        new ExtendedList<HeadPartReference> HeadParts { get; }
        new ExtendedList<IFormLinkGetter<INpcGetter>> RacePresets { get; }
        new ExtendedList<IFormLinkGetter<IColorRecordGetter>> AvailableHairColors { get; }
        new ExtendedList<IFormLinkGetter<ITextureSetGetter>> FaceDetails { get; }
        new IFormLinkNullable<ITextureSetGetter> DefaultFaceTexture { get; set; }
        new ExtendedList<TintGroup> TintLayers { get; }
        new ExtendedList<MorphGroup> MorphGroups { get; }
        new ExtendedList<FaceMorph> FaceMorphs { get; }
        new String? MaleWrinkleMapPath { get; set; }
    }

    public partial interface IHeadDataGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IHeadDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => HeadData_Registration.Instance;
        INeckFatAdjustmentsScaleGetter? NeckFatAdjustmentsScale { get; }
        IReadOnlyList<IHeadPartReferenceGetter> HeadParts { get; }
        IReadOnlyList<IFormLinkGetter<INpcGetter>> RacePresets { get; }
        IReadOnlyList<IFormLinkGetter<IColorRecordGetter>> AvailableHairColors { get; }
        IReadOnlyList<IFormLinkGetter<ITextureSetGetter>> FaceDetails { get; }
        IFormLinkNullableGetter<ITextureSetGetter> DefaultFaceTexture { get; }
        IReadOnlyList<ITintGroupGetter> TintLayers { get; }
        IReadOnlyList<IMorphGroupGetter> MorphGroups { get; }
        IReadOnlyList<IFaceMorphGetter> FaceMorphs { get; }
        String? MaleWrinkleMapPath { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class HeadDataMixIn
    {
        public static void Clear(this IHeadData item)
        {
            ((HeadDataSetterCommon)((IHeadDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static HeadData.Mask<bool> GetEqualsMask(
            this IHeadDataGetter item,
            IHeadDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IHeadDataGetter item,
            string? name = null,
            HeadData.Mask<bool>? printMask = null)
        {
            return ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IHeadDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            HeadData.Mask<bool>? printMask = null)
        {
            ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IHeadDataGetter item,
            IHeadDataGetter rhs,
            HeadData.TranslationMask? equalsMask = null)
        {
            return ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IHeadData lhs,
            IHeadDataGetter rhs)
        {
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IHeadData lhs,
            IHeadDataGetter rhs,
            HeadData.TranslationMask? copyMask = null)
        {
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IHeadData lhs,
            IHeadDataGetter rhs,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = HeadData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHeadData lhs,
            IHeadDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static HeadData DeepCopy(
            this IHeadDataGetter item,
            HeadData.TranslationMask? copyMask = null)
        {
            return ((HeadDataSetterTranslationCommon)((IHeadDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static HeadData DeepCopy(
            this IHeadDataGetter item,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? copyMask = null)
        {
            return ((HeadDataSetterTranslationCommon)((IHeadDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static HeadData DeepCopy(
            this IHeadDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HeadDataSetterTranslationCommon)((IHeadDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IHeadData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((HeadDataSetterCommon)((IHeadDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum HeadData_FieldIndex
    {
        NeckFatAdjustmentsScale = 0,
        HeadParts = 1,
        RacePresets = 2,
        AvailableHairColors = 3,
        FaceDetails = 4,
        DefaultFaceTexture = 5,
        TintLayers = 6,
        MorphGroups = 7,
        FaceMorphs = 8,
        MaleWrinkleMapPath = 9,
    }
    #endregion

    #region Registration
    internal partial class HeadData_Registration : ILoquiRegistration
    {
        public static readonly HeadData_Registration Instance = new HeadData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(HeadData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(HeadData.ErrorMask);

        public static readonly Type ClassType = typeof(HeadData);

        public static readonly Type GetterType = typeof(IHeadDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHeadData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.HeadData";

        public const string Name = "HeadData";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(
                RecordTypes.NNAM,
                RecordTypes.INDX,
                RecordTypes.HEAD,
                RecordTypes.RPRM,
                RecordTypes.AHCM,
                RecordTypes.FTSM,
                RecordTypes.DFTM,
                RecordTypes.TTGP,
                RecordTypes.TETI,
                RecordTypes.TTGE,
                RecordTypes.MPGN,
                RecordTypes.MPPI,
                RecordTypes.MPPN,
                RecordTypes.MPPM,
                RecordTypes.MPPT,
                RecordTypes.MPPF,
                RecordTypes.MPPC,
                RecordTypes.MPPK,
                RecordTypes.MPGS,
                RecordTypes.FMRI,
                RecordTypes.FMRN,
                RecordTypes.WMAP);
            var all = RecordCollection.Factory(
                RecordTypes.NNAM,
                RecordTypes.INDX,
                RecordTypes.HEAD,
                RecordTypes.RPRM,
                RecordTypes.AHCM,
                RecordTypes.FTSM,
                RecordTypes.DFTM,
                RecordTypes.TTGP,
                RecordTypes.TETI,
                RecordTypes.TTGE,
                RecordTypes.MPGN,
                RecordTypes.MPPI,
                RecordTypes.MPPN,
                RecordTypes.MPPM,
                RecordTypes.MPPT,
                RecordTypes.MPPF,
                RecordTypes.MPPC,
                RecordTypes.MPPK,
                RecordTypes.MPGS,
                RecordTypes.FMRI,
                RecordTypes.FMRN,
                RecordTypes.WMAP,
                RecordTypes.TTEF,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.TTET,
                RecordTypes.TTEB,
                RecordTypes.TTEC,
                RecordTypes.TTED);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(HeadDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class HeadDataSetterCommon
    {
        public static readonly HeadDataSetterCommon Instance = new HeadDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHeadData item)
        {
            ClearPartial();
            item.NeckFatAdjustmentsScale = null;
            item.HeadParts.Clear();
            item.RacePresets.Clear();
            item.AvailableHairColors.Clear();
            item.FaceDetails.Clear();
            item.DefaultFaceTexture.Clear();
            item.TintLayers.Clear();
            item.MorphGroups.Clear();
            item.FaceMorphs.Clear();
            item.MaleWrinkleMapPath = default;
        }
        
        #region Mutagen
        public void RemapLinks(IHeadData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.HeadParts.RemapLinks(mapping);
            obj.RacePresets.RemapLinks(mapping);
            obj.AvailableHairColors.RemapLinks(mapping);
            obj.FaceDetails.RemapLinks(mapping);
            obj.DefaultFaceTexture.Relink(mapping);
            obj.TintLayers.RemapLinks(mapping);
            obj.MorphGroups.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IHeadData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: HeadDataBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class HeadDataCommon
    {
        public static readonly HeadDataCommon Instance = new HeadDataCommon();

        public HeadData.Mask<bool> GetEqualsMask(
            IHeadDataGetter item,
            IHeadDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new HeadData.Mask<bool>(false);
            ((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHeadDataGetter item,
            IHeadDataGetter rhs,
            HeadData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.NeckFatAdjustmentsScale = EqualsMaskHelper.EqualsHelper(
                item.NeckFatAdjustmentsScale,
                rhs.NeckFatAdjustmentsScale,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.HeadParts = item.HeadParts.CollectionEqualsHelper(
                rhs.HeadParts,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.RacePresets = item.RacePresets.CollectionEqualsHelper(
                rhs.RacePresets,
                (l, r) => object.Equals(l, r),
                include);
            ret.AvailableHairColors = item.AvailableHairColors.CollectionEqualsHelper(
                rhs.AvailableHairColors,
                (l, r) => object.Equals(l, r),
                include);
            ret.FaceDetails = item.FaceDetails.CollectionEqualsHelper(
                rhs.FaceDetails,
                (l, r) => object.Equals(l, r),
                include);
            ret.DefaultFaceTexture = item.DefaultFaceTexture.Equals(rhs.DefaultFaceTexture);
            ret.TintLayers = item.TintLayers.CollectionEqualsHelper(
                rhs.TintLayers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MorphGroups = item.MorphGroups.CollectionEqualsHelper(
                rhs.MorphGroups,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.FaceMorphs = item.FaceMorphs.CollectionEqualsHelper(
                rhs.FaceMorphs,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.MaleWrinkleMapPath = string.Equals(item.MaleWrinkleMapPath, rhs.MaleWrinkleMapPath);
        }
        
        public string Print(
            IHeadDataGetter item,
            string? name = null,
            HeadData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IHeadDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            HeadData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"HeadData =>");
            }
            else
            {
                sb.AppendLine($"{name} (HeadData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IHeadDataGetter item,
            StructuredStringBuilder sb,
            HeadData.Mask<bool>? printMask = null)
        {
            if ((printMask?.NeckFatAdjustmentsScale?.Overall ?? true)
                && item.NeckFatAdjustmentsScale is {} NeckFatAdjustmentsScaleItem)
            {
                NeckFatAdjustmentsScaleItem?.Print(sb, "NeckFatAdjustmentsScale");
            }
            if (printMask?.HeadParts?.Overall ?? true)
            {
                sb.AppendLine("HeadParts =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.HeadParts)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.RacePresets?.Overall ?? true)
            {
                sb.AppendLine("RacePresets =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.RacePresets)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.AvailableHairColors?.Overall ?? true)
            {
                sb.AppendLine("AvailableHairColors =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.AvailableHairColors)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.FaceDetails?.Overall ?? true)
            {
                sb.AppendLine("FaceDetails =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.FaceDetails)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.DefaultFaceTexture ?? true)
            {
                sb.AppendItem(item.DefaultFaceTexture.FormKeyNullable, "DefaultFaceTexture");
            }
            if (printMask?.TintLayers?.Overall ?? true)
            {
                sb.AppendLine("TintLayers =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.TintLayers)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.MorphGroups?.Overall ?? true)
            {
                sb.AppendLine("MorphGroups =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MorphGroups)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.FaceMorphs?.Overall ?? true)
            {
                sb.AppendLine("FaceMorphs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.FaceMorphs)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.MaleWrinkleMapPath ?? true)
                && item.MaleWrinkleMapPath is {} MaleWrinkleMapPathItem)
            {
                sb.AppendItem(MaleWrinkleMapPathItem, "MaleWrinkleMapPath");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHeadDataGetter? lhs,
            IHeadDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)HeadData_FieldIndex.NeckFatAdjustmentsScale) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.NeckFatAdjustmentsScale, rhs.NeckFatAdjustmentsScale, out var lhsNeckFatAdjustmentsScale, out var rhsNeckFatAdjustmentsScale, out var isNeckFatAdjustmentsScaleEqual))
                {
                    if (!((NeckFatAdjustmentsScaleCommon)((INeckFatAdjustmentsScaleGetter)lhsNeckFatAdjustmentsScale).CommonInstance()!).Equals(lhsNeckFatAdjustmentsScale, rhsNeckFatAdjustmentsScale, equalsMask?.GetSubCrystal((int)HeadData_FieldIndex.NeckFatAdjustmentsScale))) return false;
                }
                else if (!isNeckFatAdjustmentsScaleEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadData_FieldIndex.HeadParts) ?? true))
            {
                if (!lhs.HeadParts.SequenceEqual(rhs.HeadParts, (l, r) => ((HeadPartReferenceCommon)((IHeadPartReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)HeadData_FieldIndex.HeadParts)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadData_FieldIndex.RacePresets) ?? true))
            {
                if (!lhs.RacePresets.SequenceEqualNullable(rhs.RacePresets)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadData_FieldIndex.AvailableHairColors) ?? true))
            {
                if (!lhs.AvailableHairColors.SequenceEqualNullable(rhs.AvailableHairColors)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadData_FieldIndex.FaceDetails) ?? true))
            {
                if (!lhs.FaceDetails.SequenceEqualNullable(rhs.FaceDetails)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadData_FieldIndex.DefaultFaceTexture) ?? true))
            {
                if (!lhs.DefaultFaceTexture.Equals(rhs.DefaultFaceTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadData_FieldIndex.TintLayers) ?? true))
            {
                if (!lhs.TintLayers.SequenceEqual(rhs.TintLayers, (l, r) => ((TintGroupCommon)((ITintGroupGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)HeadData_FieldIndex.TintLayers)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadData_FieldIndex.MorphGroups) ?? true))
            {
                if (!lhs.MorphGroups.SequenceEqual(rhs.MorphGroups, (l, r) => ((MorphGroupCommon)((IMorphGroupGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)HeadData_FieldIndex.MorphGroups)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadData_FieldIndex.FaceMorphs) ?? true))
            {
                if (!lhs.FaceMorphs.SequenceEqual(rhs.FaceMorphs, (l, r) => ((FaceMorphCommon)((IFaceMorphGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)HeadData_FieldIndex.FaceMorphs)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)HeadData_FieldIndex.MaleWrinkleMapPath) ?? true))
            {
                if (!string.Equals(lhs.MaleWrinkleMapPath, rhs.MaleWrinkleMapPath)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IHeadDataGetter item)
        {
            var hash = new HashCode();
            if (item.NeckFatAdjustmentsScale is {} NeckFatAdjustmentsScaleitem)
            {
                hash.Add(NeckFatAdjustmentsScaleitem);
            }
            hash.Add(item.HeadParts);
            hash.Add(item.RacePresets);
            hash.Add(item.AvailableHairColors);
            hash.Add(item.FaceDetails);
            hash.Add(item.DefaultFaceTexture);
            hash.Add(item.TintLayers);
            hash.Add(item.MorphGroups);
            hash.Add(item.FaceMorphs);
            if (item.MaleWrinkleMapPath is {} MaleWrinkleMapPathitem)
            {
                hash.Add(MaleWrinkleMapPathitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return HeadData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IHeadDataGetter obj)
        {
            foreach (var item in obj.HeadParts.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.RacePresets)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.AvailableHairColors)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.FaceDetails)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.DefaultFaceTexture, out var DefaultFaceTextureInfo))
            {
                yield return DefaultFaceTextureInfo;
            }
            foreach (var item in obj.TintLayers.WhereCastable<ITintGroupGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.MorphGroups.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class HeadDataSetterTranslationCommon
    {
        public static readonly HeadDataSetterTranslationCommon Instance = new HeadDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IHeadData item,
            IHeadDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.NeckFatAdjustmentsScale) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.NeckFatAdjustmentsScale);
                try
                {
                    if(rhs.NeckFatAdjustmentsScale is {} rhsNeckFatAdjustmentsScale)
                    {
                        item.NeckFatAdjustmentsScale = rhsNeckFatAdjustmentsScale.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)HeadData_FieldIndex.NeckFatAdjustmentsScale));
                    }
                    else
                    {
                        item.NeckFatAdjustmentsScale = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.HeadParts);
                try
                {
                    item.HeadParts.SetTo(
                        rhs.HeadParts
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.RacePresets) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.RacePresets);
                try
                {
                    item.RacePresets.SetTo(
                        rhs.RacePresets
                            .Select(b => (IFormLinkGetter<INpcGetter>)new FormLink<INpcGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.AvailableHairColors) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.AvailableHairColors);
                try
                {
                    item.AvailableHairColors.SetTo(
                        rhs.AvailableHairColors
                            .Select(b => (IFormLinkGetter<IColorRecordGetter>)new FormLink<IColorRecordGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.FaceDetails) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.FaceDetails);
                try
                {
                    item.FaceDetails.SetTo(
                        rhs.FaceDetails
                            .Select(b => (IFormLinkGetter<ITextureSetGetter>)new FormLink<ITextureSetGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.DefaultFaceTexture) ?? true))
            {
                item.DefaultFaceTexture.SetTo(rhs.DefaultFaceTexture.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.TintLayers) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.TintLayers);
                try
                {
                    item.TintLayers.SetTo(
                        rhs.TintLayers
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.MorphGroups) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.MorphGroups);
                try
                {
                    item.MorphGroups.SetTo(
                        rhs.MorphGroups
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.FaceMorphs) ?? true))
            {
                errorMask?.PushIndex((int)HeadData_FieldIndex.FaceMorphs);
                try
                {
                    item.FaceMorphs.SetTo(
                        rhs.FaceMorphs
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)HeadData_FieldIndex.MaleWrinkleMapPath) ?? true))
            {
                item.MaleWrinkleMapPath = rhs.MaleWrinkleMapPath;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IHeadData item,
            IHeadDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public HeadData DeepCopy(
            IHeadDataGetter item,
            HeadData.TranslationMask? copyMask = null)
        {
            HeadData ret = (HeadData)((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).GetNew();
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public HeadData DeepCopy(
            IHeadDataGetter item,
            out HeadData.ErrorMask errorMask,
            HeadData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            HeadData ret = (HeadData)((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).GetNew();
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = HeadData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public HeadData DeepCopy(
            IHeadDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            HeadData ret = (HeadData)((HeadDataCommon)((IHeadDataGetter)item).CommonInstance()!).GetNew();
            ((HeadDataSetterTranslationCommon)((IHeadDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class HeadData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => HeadData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HeadDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return HeadDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HeadDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class HeadDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly HeadDataBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IHeadDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            if (item.NeckFatAdjustmentsScale is {} NeckFatAdjustmentsScaleItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.NNAM))
                {
                    ((NeckFatAdjustmentsScaleBinaryWriteTranslation)((IBinaryItem)NeckFatAdjustmentsScaleItem).BinaryWriteTranslator).Write(
                        item: NeckFatAdjustmentsScaleItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IHeadPartReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.HeadParts,
                transl: (MutagenWriter subWriter, IHeadPartReferenceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((HeadPartReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INpcGetter>>.Instance.Write(
                writer: writer,
                items: item.RacePresets,
                transl: (MutagenWriter subWriter, IFormLinkGetter<INpcGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.RPRM));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IColorRecordGetter>>.Instance.Write(
                writer: writer,
                items: item.AvailableHairColors,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IColorRecordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.AHCM));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ITextureSetGetter>>.Instance.Write(
                writer: writer,
                items: item.FaceDetails,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ITextureSetGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.FTSM));
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultFaceTexture,
                header: translationParams.ConvertToCustom(RecordTypes.DFTM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ITintGroupGetter>.Instance.Write(
                writer: writer,
                items: item.TintLayers,
                transl: (MutagenWriter subWriter, ITintGroupGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((TintGroupBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IMorphGroupGetter>.Instance.Write(
                writer: writer,
                items: item.MorphGroups,
                transl: (MutagenWriter subWriter, IMorphGroupGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((MorphGroupBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFaceMorphGetter>.Instance.Write(
                writer: writer,
                items: item.FaceMorphs,
                transl: (MutagenWriter subWriter, IFaceMorphGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((FaceMorphBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaleWrinkleMapPath,
                header: translationParams.ConvertToCustom(RecordTypes.WMAP),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IHeadDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IHeadDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class HeadDataBinaryCreateTranslation
    {
        public static readonly HeadDataBinaryCreateTranslation Instance = new HeadDataBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IHeadData item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NNAM:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.NeckFatAdjustmentsScale, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.NeckFatAdjustmentsScale = Mutagen.Bethesda.Fallout4.NeckFatAdjustmentsScale.CreateFromBinary(frame: frame);
                    return (int)HeadData_FieldIndex.NeckFatAdjustmentsScale;
                }
                case RecordTypeInts.INDX:
                case RecordTypeInts.HEAD:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.HeadParts, translationParams)) return ParseResult.Stop;
                    item.HeadParts.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<HeadPartReference>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: HeadPartReference_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: HeadPartReference.TryCreateFromBinary));
                    return (int)HeadData_FieldIndex.HeadParts;
                }
                case RecordTypeInts.RPRM:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.RacePresets, translationParams)) return ParseResult.Stop;
                    item.RacePresets.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INpcGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.RPRM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)HeadData_FieldIndex.RacePresets;
                }
                case RecordTypeInts.AHCM:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.AvailableHairColors, translationParams)) return ParseResult.Stop;
                    item.AvailableHairColors.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IColorRecordGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.AHCM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)HeadData_FieldIndex.AvailableHairColors;
                }
                case RecordTypeInts.FTSM:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.FaceDetails, translationParams)) return ParseResult.Stop;
                    item.FaceDetails.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ITextureSetGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.FTSM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)HeadData_FieldIndex.FaceDetails;
                }
                case RecordTypeInts.DFTM:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.DefaultFaceTexture, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultFaceTexture.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)HeadData_FieldIndex.DefaultFaceTexture;
                }
                case RecordTypeInts.TTGP:
                case RecordTypeInts.TETI:
                case RecordTypeInts.TTGE:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.TintLayers, translationParams)) return ParseResult.Stop;
                    item.TintLayers.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<TintGroup>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: TintGroup_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: TintGroup.TryCreateFromBinary));
                    return (int)HeadData_FieldIndex.TintLayers;
                }
                case RecordTypeInts.MPGN:
                case RecordTypeInts.MPPI:
                case RecordTypeInts.MPPN:
                case RecordTypeInts.MPPM:
                case RecordTypeInts.MPPT:
                case RecordTypeInts.MPPF:
                case RecordTypeInts.MPPC:
                case RecordTypeInts.MPPK:
                case RecordTypeInts.MPGS:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.MorphGroups, translationParams)) return ParseResult.Stop;
                    item.MorphGroups.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<MorphGroup>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: MorphGroup_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: MorphGroup.TryCreateFromBinary));
                    return (int)HeadData_FieldIndex.MorphGroups;
                }
                case RecordTypeInts.FMRI:
                case RecordTypeInts.FMRN:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.FaceMorphs, translationParams)) return ParseResult.Stop;
                    item.FaceMorphs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<FaceMorph>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: FaceMorph_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: FaceMorph.TryCreateFromBinary));
                    return (int)HeadData_FieldIndex.FaceMorphs;
                }
                case RecordTypeInts.WMAP:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.MaleWrinkleMapPath, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaleWrinkleMapPath = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)HeadData_FieldIndex.MaleWrinkleMapPath;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class HeadDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IHeadDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HeadDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class HeadDataBinaryOverlay :
        PluginBinaryOverlay,
        IHeadDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => HeadData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => HeadData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => HeadDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => HeadDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IHeadDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IHeadDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => HeadDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => HeadDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HeadDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public INeckFatAdjustmentsScaleGetter? NeckFatAdjustmentsScale { get; private set; }
        public IReadOnlyList<IHeadPartReferenceGetter> HeadParts { get; private set; } = [];
        public IReadOnlyList<IFormLinkGetter<INpcGetter>> RacePresets { get; private set; } = [];
        public IReadOnlyList<IFormLinkGetter<IColorRecordGetter>> AvailableHairColors { get; private set; } = [];
        public IReadOnlyList<IFormLinkGetter<ITextureSetGetter>> FaceDetails { get; private set; } = [];
        #region DefaultFaceTexture
        private int? _DefaultFaceTextureLocation;
        public IFormLinkNullableGetter<ITextureSetGetter> DefaultFaceTexture => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITextureSetGetter>(_package, _recordData, _DefaultFaceTextureLocation);
        #endregion
        public IReadOnlyList<ITintGroupGetter> TintLayers { get; private set; } = [];
        public IReadOnlyList<IMorphGroupGetter> MorphGroups { get; private set; } = [];
        public IReadOnlyList<IFaceMorphGetter> FaceMorphs { get; private set; } = [];
        #region MaleWrinkleMapPath
        private int? _MaleWrinkleMapPathLocation;
        public String? MaleWrinkleMapPath => _MaleWrinkleMapPathLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaleWrinkleMapPathLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected HeadDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IHeadDataGetter HeadDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new HeadDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IHeadDataGetter HeadDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return HeadDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NNAM:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.NeckFatAdjustmentsScale, translationParams)) return ParseResult.Stop;
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.NeckFatAdjustmentsScale = NeckFatAdjustmentsScaleBinaryOverlay.NeckFatAdjustmentsScaleFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)HeadData_FieldIndex.NeckFatAdjustmentsScale;
                }
                case RecordTypeInts.INDX:
                case RecordTypeInts.HEAD:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.HeadParts, translationParams)) return ParseResult.Stop;
                    this.HeadParts = this.ParseRepeatedTypelessSubrecord<IHeadPartReferenceGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: HeadPartReference_Registration.TriggerSpecs,
                        factory: HeadPartReferenceBinaryOverlay.HeadPartReferenceFactory);
                    return (int)HeadData_FieldIndex.HeadParts;
                }
                case RecordTypeInts.RPRM:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.RacePresets, translationParams)) return ParseResult.Stop;
                    this.RacePresets = BinaryOverlayList.FactoryByArray<IFormLinkGetter<INpcGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.RPRM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)HeadData_FieldIndex.RacePresets;
                }
                case RecordTypeInts.AHCM:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.AvailableHairColors, translationParams)) return ParseResult.Stop;
                    this.AvailableHairColors = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IColorRecordGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IColorRecordGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.AHCM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)HeadData_FieldIndex.AvailableHairColors;
                }
                case RecordTypeInts.FTSM:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.FaceDetails, translationParams)) return ParseResult.Stop;
                    this.FaceDetails = BinaryOverlayList.FactoryByArray<IFormLinkGetter<ITextureSetGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ITextureSetGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.FTSM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)HeadData_FieldIndex.FaceDetails;
                }
                case RecordTypeInts.DFTM:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.DefaultFaceTexture, translationParams)) return ParseResult.Stop;
                    _DefaultFaceTextureLocation = (stream.Position - offset);
                    return (int)HeadData_FieldIndex.DefaultFaceTexture;
                }
                case RecordTypeInts.TTGP:
                case RecordTypeInts.TETI:
                case RecordTypeInts.TTGE:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.TintLayers, translationParams)) return ParseResult.Stop;
                    this.TintLayers = this.ParseRepeatedTypelessSubrecord<ITintGroupGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: TintGroup_Registration.TriggerSpecs,
                        factory: TintGroupBinaryOverlay.TintGroupFactory);
                    return (int)HeadData_FieldIndex.TintLayers;
                }
                case RecordTypeInts.MPGN:
                case RecordTypeInts.MPPI:
                case RecordTypeInts.MPPN:
                case RecordTypeInts.MPPM:
                case RecordTypeInts.MPPT:
                case RecordTypeInts.MPPF:
                case RecordTypeInts.MPPC:
                case RecordTypeInts.MPPK:
                case RecordTypeInts.MPGS:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.MorphGroups, translationParams)) return ParseResult.Stop;
                    this.MorphGroups = this.ParseRepeatedTypelessSubrecord<IMorphGroupGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: MorphGroup_Registration.TriggerSpecs,
                        factory: MorphGroupBinaryOverlay.MorphGroupFactory);
                    return (int)HeadData_FieldIndex.MorphGroups;
                }
                case RecordTypeInts.FMRI:
                case RecordTypeInts.FMRN:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.FaceMorphs, translationParams)) return ParseResult.Stop;
                    this.FaceMorphs = this.ParseRepeatedTypelessSubrecord<IFaceMorphGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: FaceMorph_Registration.TriggerSpecs,
                        factory: FaceMorphBinaryOverlay.FaceMorphFactory);
                    return (int)HeadData_FieldIndex.FaceMorphs;
                }
                case RecordTypeInts.WMAP:
                {
                    if (lastParsed.ShortCircuit((int)HeadData_FieldIndex.MaleWrinkleMapPath, translationParams)) return ParseResult.Stop;
                    _MaleWrinkleMapPathLocation = (stream.Position - offset);
                    return (int)HeadData_FieldIndex.MaleWrinkleMapPath;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HeadDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IHeadDataGetter rhs) return false;
            return ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHeadDataGetter? obj)
        {
            return ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HeadDataCommon)((IHeadDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

