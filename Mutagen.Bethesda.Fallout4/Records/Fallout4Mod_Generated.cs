/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Parameters;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Cache.Internals;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Masters;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Loqui;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Strings.DI;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.IO.Abstractions;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Threading.Tasks;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Fallout4Mod :
        IEquatable<IFallout4ModGetter>,
        IFallout4Mod,
        ILoquiObjectSetter<Fallout4Mod>
    {
        #region Ctor
        protected Fallout4Mod()
        {
            _GameSettings_Object = new Fallout4Group<GameSetting>(this);
            _Keywords_Object = new Fallout4Group<Keyword>(this);
            _LocationReferenceTypes_Object = new Fallout4Group<LocationReferenceType>(this);
            _Actions_Object = new Fallout4Group<ActionRecord>(this);
            _Transforms_Object = new Fallout4Group<Transform>(this);
            _Components_Object = new Fallout4Group<Component>(this);
            _TextureSets_Object = new Fallout4Group<TextureSet>(this);
            _Globals_Object = new Fallout4Group<Global>(this);
            _DamageTypes_Object = new Fallout4Group<ADamageType>(this);
            _Classes_Object = new Fallout4Group<Class>(this);
            _Factions_Object = new Fallout4Group<Faction>(this);
            _HeadParts_Object = new Fallout4Group<HeadPart>(this);
            _Races_Object = new Fallout4Group<Race>(this);
            _SoundMarkers_Object = new Fallout4Group<SoundMarker>(this);
            _AcousticSpaces_Object = new Fallout4Group<AcousticSpace>(this);
            _MagicEffects_Object = new Fallout4Group<MagicEffect>(this);
            _LandscapeTextures_Object = new Fallout4Group<LandscapeTexture>(this);
            _ObjectEffects_Object = new Fallout4Group<ObjectEffect>(this);
            _Spells_Object = new Fallout4Group<Spell>(this);
            _Activators_Object = new Fallout4Group<Activator>(this);
            _TalkingActivators_Object = new Fallout4Group<TalkingActivator>(this);
            _Armors_Object = new Fallout4Group<Armor>(this);
            _Books_Object = new Fallout4Group<Book>(this);
            _Containers_Object = new Fallout4Group<Container>(this);
            _Doors_Object = new Fallout4Group<Door>(this);
            _Ingredients_Object = new Fallout4Group<Ingredient>(this);
            _Lights_Object = new Fallout4Group<Light>(this);
            _MiscItems_Object = new Fallout4Group<MiscItem>(this);
            _Statics_Object = new Fallout4Group<Static>(this);
            _StaticCollections_Object = new Fallout4Group<StaticCollection>(this);
            _MovableStatics_Object = new Fallout4Group<MovableStatic>(this);
            _Grasses_Object = new Fallout4Group<Grass>(this);
            _Trees_Object = new Fallout4Group<Tree>(this);
            _Florae_Object = new Fallout4Group<Flora>(this);
            _Furniture_Object = new Fallout4Group<Furniture>(this);
            _Weapons_Object = new Fallout4Group<Weapon>(this);
            _Ammunitions_Object = new Fallout4Group<Ammunition>(this);
            _Npcs_Object = new Fallout4Group<Npc>(this);
            _LeveledNpcs_Object = new Fallout4Group<LeveledNpc>(this);
            _Keys_Object = new Fallout4Group<Key>(this);
            _Ingestibles_Object = new Fallout4Group<Ingestible>(this);
            _IdleMarkers_Object = new Fallout4Group<IdleMarker>(this);
            _Holotapes_Object = new Fallout4Group<Holotape>(this);
            _Projectiles_Object = new Fallout4Group<Projectile>(this);
            _Hazards_Object = new Fallout4Group<Hazard>(this);
            _BendableSplines_Object = new Fallout4Group<BendableSpline>(this);
            _Terminals_Object = new Fallout4Group<Terminal>(this);
            _LeveledItems_Object = new Fallout4Group<LeveledItem>(this);
            _Weather_Object = new Fallout4Group<Weather>(this);
            _Climates_Object = new Fallout4Group<Climate>(this);
            _ShaderParticleGeometries_Object = new Fallout4Group<ShaderParticleGeometry>(this);
            _VisualEffects_Object = new Fallout4Group<VisualEffect>(this);
            _Regions_Object = new Fallout4Group<Region>(this);
            _NavigationMeshInfoMaps_Object = new Fallout4Group<NavigationMeshInfoMap>(this);
            _Worldspaces_Object = new Fallout4Group<Worldspace>(this);
            _Quests_Object = new Fallout4Group<Quest>(this);
            _IdleAnimations_Object = new Fallout4Group<IdleAnimation>(this);
            _Packages_Object = new Fallout4Group<Package>(this);
            _CombatStyles_Object = new Fallout4Group<CombatStyle>(this);
            _LoadScreens_Object = new Fallout4Group<LoadScreen>(this);
            _AnimatedObjects_Object = new Fallout4Group<AnimatedObject>(this);
            _Waters_Object = new Fallout4Group<Water>(this);
            _EffectShaders_Object = new Fallout4Group<EffectShader>(this);
            _Explosions_Object = new Fallout4Group<Explosion>(this);
            _Debris_Object = new Fallout4Group<Debris>(this);
            _ImageSpaces_Object = new Fallout4Group<ImageSpace>(this);
            _ImageSpaceAdapters_Object = new Fallout4Group<ImageSpaceAdapter>(this);
            _FormLists_Object = new Fallout4Group<FormList>(this);
            _Perks_Object = new Fallout4Group<Perk>(this);
            _BodyParts_Object = new Fallout4Group<BodyPartData>(this);
            _AddonNodes_Object = new Fallout4Group<AddonNode>(this);
            _ActorValueInformation_Object = new Fallout4Group<ActorValueInformation>(this);
            _CameraShots_Object = new Fallout4Group<CameraShot>(this);
            _CameraPaths_Object = new Fallout4Group<CameraPath>(this);
            _VoiceTypes_Object = new Fallout4Group<VoiceType>(this);
            _MaterialTypes_Object = new Fallout4Group<MaterialType>(this);
            _Impacts_Object = new Fallout4Group<Impact>(this);
            _ImpactDataSets_Object = new Fallout4Group<ImpactDataSet>(this);
            _ArmorAddons_Object = new Fallout4Group<ArmorAddon>(this);
            _EncounterZones_Object = new Fallout4Group<EncounterZone>(this);
            _Locations_Object = new Fallout4Group<Location>(this);
            _Messages_Object = new Fallout4Group<Message>(this);
            _DefaultObjectManagers_Object = new Fallout4Group<DefaultObjectManager>(this);
            _DefaultObjects_Object = new Fallout4Group<DefaultObject>(this);
            _LightingTemplates_Object = new Fallout4Group<LightingTemplate>(this);
            _MusicTypes_Object = new Fallout4Group<MusicType>(this);
            _Footsteps_Object = new Fallout4Group<Footstep>(this);
            _FootstepSets_Object = new Fallout4Group<FootstepSet>(this);
            _StoryManagerBranchNodes_Object = new Fallout4Group<StoryManagerBranchNode>(this);
            _StoryManagerQuestNodes_Object = new Fallout4Group<StoryManagerQuestNode>(this);
            _StoryManagerEventNodes_Object = new Fallout4Group<StoryManagerEventNode>(this);
            _MusicTracks_Object = new Fallout4Group<MusicTrack>(this);
            _DialogViews_Object = new Fallout4Group<DialogView>(this);
            _EquipTypes_Object = new Fallout4Group<EquipType>(this);
            _Relationships_Object = new Fallout4Group<Relationship>(this);
            _AssociationTypes_Object = new Fallout4Group<AssociationType>(this);
            _Outfits_Object = new Fallout4Group<Outfit>(this);
            _ArtObjects_Object = new Fallout4Group<ArtObject>(this);
            _MaterialObjects_Object = new Fallout4Group<MaterialObject>(this);
            _MovementTypes_Object = new Fallout4Group<MovementType>(this);
            _SoundDescriptors_Object = new Fallout4Group<SoundDescriptor>(this);
            _SoundCategories_Object = new Fallout4Group<SoundCategory>(this);
            _SoundOutputModels_Object = new Fallout4Group<SoundOutputModel>(this);
            _CollisionLayers_Object = new Fallout4Group<CollisionLayer>(this);
            _Colors_Object = new Fallout4Group<ColorRecord>(this);
            _ReverbParameters_Object = new Fallout4Group<ReverbParameters>(this);
            _PackIns_Object = new Fallout4Group<PackIn>(this);
            _ReferenceGroups_Object = new Fallout4Group<ReferenceGroup>(this);
            _AimModels_Object = new Fallout4Group<AimModel>(this);
            _Layers_Object = new Fallout4Group<Layer>(this);
            _ConstructibleObjects_Object = new Fallout4Group<ConstructibleObject>(this);
            _ObjectModifications_Object = new Fallout4Group<AObjectModification>(this);
            _MaterialSwaps_Object = new Fallout4Group<MaterialSwap>(this);
            _Zooms_Object = new Fallout4Group<Zoom>(this);
            _InstanceNamingRules_Object = new Fallout4Group<InstanceNamingRules>(this);
            _SoundKeywordMappings_Object = new Fallout4Group<SoundKeywordMapping>(this);
            _AudioEffectChains_Object = new Fallout4Group<AudioEffectChain>(this);
            _SceneCollections_Object = new Fallout4Group<SceneCollection>(this);
            _AttractionRules_Object = new Fallout4Group<AttractionRule>(this);
            _AudioCategorySnapshots_Object = new Fallout4Group<AudioCategorySnapshot>(this);
            _AnimationSoundTagSets_Object = new Fallout4Group<AnimationSoundTagSet>(this);
            _NavigationMeshObstacleManagers_Object = new Fallout4Group<NavigationMeshObstacleManager>(this);
            _LensFlares_Object = new Fallout4Group<LensFlare>(this);
            _GodRays_Object = new Fallout4Group<GodRays>(this);
            _ObjectVisibilityManagers_Object = new Fallout4Group<ObjectVisibilityManager>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Fallout4ModHeader _ModHeader_Object = new Fallout4ModHeader();
        public Fallout4ModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4ModHeaderGetter IFallout4ModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<GameSetting> _GameSettings_Object;
        public Fallout4Group<GameSetting> GameSettings => _GameSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IGameSettingGetter> IFallout4ModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Keyword> _Keywords_Object;
        public Fallout4Group<Keyword> Keywords => _Keywords_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IKeywordGetter> IFallout4ModGetter.Keywords => _Keywords_Object;
        #endregion
        #region LocationReferenceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<LocationReferenceType> _LocationReferenceTypes_Object;
        public Fallout4Group<LocationReferenceType> LocationReferenceTypes => _LocationReferenceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ILocationReferenceTypeGetter> IFallout4ModGetter.LocationReferenceTypes => _LocationReferenceTypes_Object;
        #endregion
        #region Actions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ActionRecord> _Actions_Object;
        public Fallout4Group<ActionRecord> Actions => _Actions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IActionRecordGetter> IFallout4ModGetter.Actions => _Actions_Object;
        #endregion
        #region Transforms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Transform> _Transforms_Object;
        public Fallout4Group<Transform> Transforms => _Transforms_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ITransformGetter> IFallout4ModGetter.Transforms => _Transforms_Object;
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Component> _Components_Object;
        public Fallout4Group<Component> Components => _Components_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IComponentGetter> IFallout4ModGetter.Components => _Components_Object;
        #endregion
        #region TextureSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<TextureSet> _TextureSets_Object;
        public Fallout4Group<TextureSet> TextureSets => _TextureSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ITextureSetGetter> IFallout4ModGetter.TextureSets => _TextureSets_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Global> _Globals_Object;
        public Fallout4Group<Global> Globals => _Globals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IGlobalGetter> IFallout4ModGetter.Globals => _Globals_Object;
        #endregion
        #region DamageTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ADamageType> _DamageTypes_Object;
        public Fallout4Group<ADamageType> DamageTypes => _DamageTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IADamageTypeGetter> IFallout4ModGetter.DamageTypes => _DamageTypes_Object;
        #endregion
        #region Classes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Class> _Classes_Object;
        public Fallout4Group<Class> Classes => _Classes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IClassGetter> IFallout4ModGetter.Classes => _Classes_Object;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Faction> _Factions_Object;
        public Fallout4Group<Faction> Factions => _Factions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IFactionGetter> IFallout4ModGetter.Factions => _Factions_Object;
        #endregion
        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<HeadPart> _HeadParts_Object;
        public Fallout4Group<HeadPart> HeadParts => _HeadParts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IHeadPartGetter> IFallout4ModGetter.HeadParts => _HeadParts_Object;
        #endregion
        #region Races
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Race> _Races_Object;
        public Fallout4Group<Race> Races => _Races_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IRaceGetter> IFallout4ModGetter.Races => _Races_Object;
        #endregion
        #region SoundMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<SoundMarker> _SoundMarkers_Object;
        public Fallout4Group<SoundMarker> SoundMarkers => _SoundMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ISoundMarkerGetter> IFallout4ModGetter.SoundMarkers => _SoundMarkers_Object;
        #endregion
        #region AcousticSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<AcousticSpace> _AcousticSpaces_Object;
        public Fallout4Group<AcousticSpace> AcousticSpaces => _AcousticSpaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IAcousticSpaceGetter> IFallout4ModGetter.AcousticSpaces => _AcousticSpaces_Object;
        #endregion
        #region MagicEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<MagicEffect> _MagicEffects_Object;
        public Fallout4Group<MagicEffect> MagicEffects => _MagicEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IMagicEffectGetter> IFallout4ModGetter.MagicEffects => _MagicEffects_Object;
        #endregion
        #region LandscapeTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<LandscapeTexture> _LandscapeTextures_Object;
        public Fallout4Group<LandscapeTexture> LandscapeTextures => _LandscapeTextures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ILandscapeTextureGetter> IFallout4ModGetter.LandscapeTextures => _LandscapeTextures_Object;
        #endregion
        #region ObjectEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ObjectEffect> _ObjectEffects_Object;
        public Fallout4Group<ObjectEffect> ObjectEffects => _ObjectEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IObjectEffectGetter> IFallout4ModGetter.ObjectEffects => _ObjectEffects_Object;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Spell> _Spells_Object;
        public Fallout4Group<Spell> Spells => _Spells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ISpellGetter> IFallout4ModGetter.Spells => _Spells_Object;
        #endregion
        #region Activators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Activator> _Activators_Object;
        public Fallout4Group<Activator> Activators => _Activators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IActivatorGetter> IFallout4ModGetter.Activators => _Activators_Object;
        #endregion
        #region TalkingActivators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<TalkingActivator> _TalkingActivators_Object;
        public Fallout4Group<TalkingActivator> TalkingActivators => _TalkingActivators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ITalkingActivatorGetter> IFallout4ModGetter.TalkingActivators => _TalkingActivators_Object;
        #endregion
        #region Armors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Armor> _Armors_Object;
        public Fallout4Group<Armor> Armors => _Armors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IArmorGetter> IFallout4ModGetter.Armors => _Armors_Object;
        #endregion
        #region Books
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Book> _Books_Object;
        public Fallout4Group<Book> Books => _Books_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IBookGetter> IFallout4ModGetter.Books => _Books_Object;
        #endregion
        #region Containers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Container> _Containers_Object;
        public Fallout4Group<Container> Containers => _Containers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IContainerGetter> IFallout4ModGetter.Containers => _Containers_Object;
        #endregion
        #region Doors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Door> _Doors_Object;
        public Fallout4Group<Door> Doors => _Doors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IDoorGetter> IFallout4ModGetter.Doors => _Doors_Object;
        #endregion
        #region Ingredients
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Ingredient> _Ingredients_Object;
        public Fallout4Group<Ingredient> Ingredients => _Ingredients_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IIngredientGetter> IFallout4ModGetter.Ingredients => _Ingredients_Object;
        #endregion
        #region Lights
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Light> _Lights_Object;
        public Fallout4Group<Light> Lights => _Lights_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ILightGetter> IFallout4ModGetter.Lights => _Lights_Object;
        #endregion
        #region MiscItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<MiscItem> _MiscItems_Object;
        public Fallout4Group<MiscItem> MiscItems => _MiscItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IMiscItemGetter> IFallout4ModGetter.MiscItems => _MiscItems_Object;
        #endregion
        #region Statics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Static> _Statics_Object;
        public Fallout4Group<Static> Statics => _Statics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IStaticGetter> IFallout4ModGetter.Statics => _Statics_Object;
        #endregion
        #region StaticCollections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<StaticCollection> _StaticCollections_Object;
        public Fallout4Group<StaticCollection> StaticCollections => _StaticCollections_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IStaticCollectionGetter> IFallout4ModGetter.StaticCollections => _StaticCollections_Object;
        #endregion
        #region MovableStatics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<MovableStatic> _MovableStatics_Object;
        public Fallout4Group<MovableStatic> MovableStatics => _MovableStatics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IMovableStaticGetter> IFallout4ModGetter.MovableStatics => _MovableStatics_Object;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Grass> _Grasses_Object;
        public Fallout4Group<Grass> Grasses => _Grasses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IGrassGetter> IFallout4ModGetter.Grasses => _Grasses_Object;
        #endregion
        #region Trees
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Tree> _Trees_Object;
        public Fallout4Group<Tree> Trees => _Trees_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ITreeGetter> IFallout4ModGetter.Trees => _Trees_Object;
        #endregion
        #region Florae
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Flora> _Florae_Object;
        public Fallout4Group<Flora> Florae => _Florae_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IFloraGetter> IFallout4ModGetter.Florae => _Florae_Object;
        #endregion
        #region Furniture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Furniture> _Furniture_Object;
        public Fallout4Group<Furniture> Furniture => _Furniture_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IFurnitureGetter> IFallout4ModGetter.Furniture => _Furniture_Object;
        #endregion
        #region Weapons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Weapon> _Weapons_Object;
        public Fallout4Group<Weapon> Weapons => _Weapons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IWeaponGetter> IFallout4ModGetter.Weapons => _Weapons_Object;
        #endregion
        #region Ammunitions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Ammunition> _Ammunitions_Object;
        public Fallout4Group<Ammunition> Ammunitions => _Ammunitions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IAmmunitionGetter> IFallout4ModGetter.Ammunitions => _Ammunitions_Object;
        #endregion
        #region Npcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Npc> _Npcs_Object;
        public Fallout4Group<Npc> Npcs => _Npcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<INpcGetter> IFallout4ModGetter.Npcs => _Npcs_Object;
        #endregion
        #region LeveledNpcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<LeveledNpc> _LeveledNpcs_Object;
        public Fallout4Group<LeveledNpc> LeveledNpcs => _LeveledNpcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ILeveledNpcGetter> IFallout4ModGetter.LeveledNpcs => _LeveledNpcs_Object;
        #endregion
        #region Keys
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Key> _Keys_Object;
        public Fallout4Group<Key> Keys => _Keys_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IKeyGetter> IFallout4ModGetter.Keys => _Keys_Object;
        #endregion
        #region Ingestibles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Ingestible> _Ingestibles_Object;
        public Fallout4Group<Ingestible> Ingestibles => _Ingestibles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IIngestibleGetter> IFallout4ModGetter.Ingestibles => _Ingestibles_Object;
        #endregion
        #region IdleMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<IdleMarker> _IdleMarkers_Object;
        public Fallout4Group<IdleMarker> IdleMarkers => _IdleMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IIdleMarkerGetter> IFallout4ModGetter.IdleMarkers => _IdleMarkers_Object;
        #endregion
        #region Holotapes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Holotape> _Holotapes_Object;
        public Fallout4Group<Holotape> Holotapes => _Holotapes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IHolotapeGetter> IFallout4ModGetter.Holotapes => _Holotapes_Object;
        #endregion
        #region Projectiles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Projectile> _Projectiles_Object;
        public Fallout4Group<Projectile> Projectiles => _Projectiles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IProjectileGetter> IFallout4ModGetter.Projectiles => _Projectiles_Object;
        #endregion
        #region Hazards
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Hazard> _Hazards_Object;
        public Fallout4Group<Hazard> Hazards => _Hazards_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IHazardGetter> IFallout4ModGetter.Hazards => _Hazards_Object;
        #endregion
        #region BendableSplines
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<BendableSpline> _BendableSplines_Object;
        public Fallout4Group<BendableSpline> BendableSplines => _BendableSplines_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IBendableSplineGetter> IFallout4ModGetter.BendableSplines => _BendableSplines_Object;
        #endregion
        #region Terminals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Terminal> _Terminals_Object;
        public Fallout4Group<Terminal> Terminals => _Terminals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ITerminalGetter> IFallout4ModGetter.Terminals => _Terminals_Object;
        #endregion
        #region LeveledItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<LeveledItem> _LeveledItems_Object;
        public Fallout4Group<LeveledItem> LeveledItems => _LeveledItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ILeveledItemGetter> IFallout4ModGetter.LeveledItems => _LeveledItems_Object;
        #endregion
        #region Weather
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Weather> _Weather_Object;
        public Fallout4Group<Weather> Weather => _Weather_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IWeatherGetter> IFallout4ModGetter.Weather => _Weather_Object;
        #endregion
        #region Climates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Climate> _Climates_Object;
        public Fallout4Group<Climate> Climates => _Climates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IClimateGetter> IFallout4ModGetter.Climates => _Climates_Object;
        #endregion
        #region ShaderParticleGeometries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ShaderParticleGeometry> _ShaderParticleGeometries_Object;
        public Fallout4Group<ShaderParticleGeometry> ShaderParticleGeometries => _ShaderParticleGeometries_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IShaderParticleGeometryGetter> IFallout4ModGetter.ShaderParticleGeometries => _ShaderParticleGeometries_Object;
        #endregion
        #region VisualEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<VisualEffect> _VisualEffects_Object;
        public Fallout4Group<VisualEffect> VisualEffects => _VisualEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IVisualEffectGetter> IFallout4ModGetter.VisualEffects => _VisualEffects_Object;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Region> _Regions_Object;
        public Fallout4Group<Region> Regions => _Regions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IRegionGetter> IFallout4ModGetter.Regions => _Regions_Object;
        #endregion
        #region NavigationMeshInfoMaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<NavigationMeshInfoMap> _NavigationMeshInfoMaps_Object;
        public Fallout4Group<NavigationMeshInfoMap> NavigationMeshInfoMaps => _NavigationMeshInfoMaps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<INavigationMeshInfoMapGetter> IFallout4ModGetter.NavigationMeshInfoMaps => _NavigationMeshInfoMaps_Object;
        #endregion
        #region Cells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Fallout4ListGroup<CellBlock> _Cells_Object = new Fallout4ListGroup<CellBlock>();
        public Fallout4ListGroup<CellBlock> Cells => _Cells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4ListGroupGetter<ICellBlockGetter> IFallout4ModGetter.Cells => _Cells_Object;
        #endregion
        #region Worldspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Worldspace> _Worldspaces_Object;
        public Fallout4Group<Worldspace> Worldspaces => _Worldspaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IWorldspaceGetter> IFallout4ModGetter.Worldspaces => _Worldspaces_Object;
        #endregion
        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Quest> _Quests_Object;
        public Fallout4Group<Quest> Quests => _Quests_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IQuestGetter> IFallout4ModGetter.Quests => _Quests_Object;
        #endregion
        #region IdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<IdleAnimation> _IdleAnimations_Object;
        public Fallout4Group<IdleAnimation> IdleAnimations => _IdleAnimations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IIdleAnimationGetter> IFallout4ModGetter.IdleAnimations => _IdleAnimations_Object;
        #endregion
        #region Packages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Package> _Packages_Object;
        public Fallout4Group<Package> Packages => _Packages_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IPackageGetter> IFallout4ModGetter.Packages => _Packages_Object;
        #endregion
        #region CombatStyles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<CombatStyle> _CombatStyles_Object;
        public Fallout4Group<CombatStyle> CombatStyles => _CombatStyles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ICombatStyleGetter> IFallout4ModGetter.CombatStyles => _CombatStyles_Object;
        #endregion
        #region LoadScreens
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<LoadScreen> _LoadScreens_Object;
        public Fallout4Group<LoadScreen> LoadScreens => _LoadScreens_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ILoadScreenGetter> IFallout4ModGetter.LoadScreens => _LoadScreens_Object;
        #endregion
        #region AnimatedObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<AnimatedObject> _AnimatedObjects_Object;
        public Fallout4Group<AnimatedObject> AnimatedObjects => _AnimatedObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IAnimatedObjectGetter> IFallout4ModGetter.AnimatedObjects => _AnimatedObjects_Object;
        #endregion
        #region Waters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Water> _Waters_Object;
        public Fallout4Group<Water> Waters => _Waters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IWaterGetter> IFallout4ModGetter.Waters => _Waters_Object;
        #endregion
        #region EffectShaders
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<EffectShader> _EffectShaders_Object;
        public Fallout4Group<EffectShader> EffectShaders => _EffectShaders_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IEffectShaderGetter> IFallout4ModGetter.EffectShaders => _EffectShaders_Object;
        #endregion
        #region Explosions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Explosion> _Explosions_Object;
        public Fallout4Group<Explosion> Explosions => _Explosions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IExplosionGetter> IFallout4ModGetter.Explosions => _Explosions_Object;
        #endregion
        #region Debris
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Debris> _Debris_Object;
        public Fallout4Group<Debris> Debris => _Debris_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IDebrisGetter> IFallout4ModGetter.Debris => _Debris_Object;
        #endregion
        #region ImageSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ImageSpace> _ImageSpaces_Object;
        public Fallout4Group<ImageSpace> ImageSpaces => _ImageSpaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IImageSpaceGetter> IFallout4ModGetter.ImageSpaces => _ImageSpaces_Object;
        #endregion
        #region ImageSpaceAdapters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ImageSpaceAdapter> _ImageSpaceAdapters_Object;
        public Fallout4Group<ImageSpaceAdapter> ImageSpaceAdapters => _ImageSpaceAdapters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IImageSpaceAdapterGetter> IFallout4ModGetter.ImageSpaceAdapters => _ImageSpaceAdapters_Object;
        #endregion
        #region FormLists
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<FormList> _FormLists_Object;
        public Fallout4Group<FormList> FormLists => _FormLists_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IFormListGetter> IFallout4ModGetter.FormLists => _FormLists_Object;
        #endregion
        #region Perks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Perk> _Perks_Object;
        public Fallout4Group<Perk> Perks => _Perks_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IPerkGetter> IFallout4ModGetter.Perks => _Perks_Object;
        #endregion
        #region BodyParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<BodyPartData> _BodyParts_Object;
        public Fallout4Group<BodyPartData> BodyParts => _BodyParts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IBodyPartDataGetter> IFallout4ModGetter.BodyParts => _BodyParts_Object;
        #endregion
        #region AddonNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<AddonNode> _AddonNodes_Object;
        public Fallout4Group<AddonNode> AddonNodes => _AddonNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IAddonNodeGetter> IFallout4ModGetter.AddonNodes => _AddonNodes_Object;
        #endregion
        #region ActorValueInformation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ActorValueInformation> _ActorValueInformation_Object;
        public Fallout4Group<ActorValueInformation> ActorValueInformation => _ActorValueInformation_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IActorValueInformationGetter> IFallout4ModGetter.ActorValueInformation => _ActorValueInformation_Object;
        #endregion
        #region CameraShots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<CameraShot> _CameraShots_Object;
        public Fallout4Group<CameraShot> CameraShots => _CameraShots_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ICameraShotGetter> IFallout4ModGetter.CameraShots => _CameraShots_Object;
        #endregion
        #region CameraPaths
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<CameraPath> _CameraPaths_Object;
        public Fallout4Group<CameraPath> CameraPaths => _CameraPaths_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ICameraPathGetter> IFallout4ModGetter.CameraPaths => _CameraPaths_Object;
        #endregion
        #region VoiceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<VoiceType> _VoiceTypes_Object;
        public Fallout4Group<VoiceType> VoiceTypes => _VoiceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IVoiceTypeGetter> IFallout4ModGetter.VoiceTypes => _VoiceTypes_Object;
        #endregion
        #region MaterialTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<MaterialType> _MaterialTypes_Object;
        public Fallout4Group<MaterialType> MaterialTypes => _MaterialTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IMaterialTypeGetter> IFallout4ModGetter.MaterialTypes => _MaterialTypes_Object;
        #endregion
        #region Impacts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Impact> _Impacts_Object;
        public Fallout4Group<Impact> Impacts => _Impacts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IImpactGetter> IFallout4ModGetter.Impacts => _Impacts_Object;
        #endregion
        #region ImpactDataSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ImpactDataSet> _ImpactDataSets_Object;
        public Fallout4Group<ImpactDataSet> ImpactDataSets => _ImpactDataSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IImpactDataSetGetter> IFallout4ModGetter.ImpactDataSets => _ImpactDataSets_Object;
        #endregion
        #region ArmorAddons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ArmorAddon> _ArmorAddons_Object;
        public Fallout4Group<ArmorAddon> ArmorAddons => _ArmorAddons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IArmorAddonGetter> IFallout4ModGetter.ArmorAddons => _ArmorAddons_Object;
        #endregion
        #region EncounterZones
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<EncounterZone> _EncounterZones_Object;
        public Fallout4Group<EncounterZone> EncounterZones => _EncounterZones_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IEncounterZoneGetter> IFallout4ModGetter.EncounterZones => _EncounterZones_Object;
        #endregion
        #region Locations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Location> _Locations_Object;
        public Fallout4Group<Location> Locations => _Locations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ILocationGetter> IFallout4ModGetter.Locations => _Locations_Object;
        #endregion
        #region Messages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Message> _Messages_Object;
        public Fallout4Group<Message> Messages => _Messages_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IMessageGetter> IFallout4ModGetter.Messages => _Messages_Object;
        #endregion
        #region DefaultObjectManagers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<DefaultObjectManager> _DefaultObjectManagers_Object;
        public Fallout4Group<DefaultObjectManager> DefaultObjectManagers => _DefaultObjectManagers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IDefaultObjectManagerGetter> IFallout4ModGetter.DefaultObjectManagers => _DefaultObjectManagers_Object;
        #endregion
        #region DefaultObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<DefaultObject> _DefaultObjects_Object;
        public Fallout4Group<DefaultObject> DefaultObjects => _DefaultObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IDefaultObjectGetter> IFallout4ModGetter.DefaultObjects => _DefaultObjects_Object;
        #endregion
        #region LightingTemplates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<LightingTemplate> _LightingTemplates_Object;
        public Fallout4Group<LightingTemplate> LightingTemplates => _LightingTemplates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ILightingTemplateGetter> IFallout4ModGetter.LightingTemplates => _LightingTemplates_Object;
        #endregion
        #region MusicTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<MusicType> _MusicTypes_Object;
        public Fallout4Group<MusicType> MusicTypes => _MusicTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IMusicTypeGetter> IFallout4ModGetter.MusicTypes => _MusicTypes_Object;
        #endregion
        #region Footsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Footstep> _Footsteps_Object;
        public Fallout4Group<Footstep> Footsteps => _Footsteps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IFootstepGetter> IFallout4ModGetter.Footsteps => _Footsteps_Object;
        #endregion
        #region FootstepSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<FootstepSet> _FootstepSets_Object;
        public Fallout4Group<FootstepSet> FootstepSets => _FootstepSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IFootstepSetGetter> IFallout4ModGetter.FootstepSets => _FootstepSets_Object;
        #endregion
        #region StoryManagerBranchNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<StoryManagerBranchNode> _StoryManagerBranchNodes_Object;
        public Fallout4Group<StoryManagerBranchNode> StoryManagerBranchNodes => _StoryManagerBranchNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IStoryManagerBranchNodeGetter> IFallout4ModGetter.StoryManagerBranchNodes => _StoryManagerBranchNodes_Object;
        #endregion
        #region StoryManagerQuestNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<StoryManagerQuestNode> _StoryManagerQuestNodes_Object;
        public Fallout4Group<StoryManagerQuestNode> StoryManagerQuestNodes => _StoryManagerQuestNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IStoryManagerQuestNodeGetter> IFallout4ModGetter.StoryManagerQuestNodes => _StoryManagerQuestNodes_Object;
        #endregion
        #region StoryManagerEventNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<StoryManagerEventNode> _StoryManagerEventNodes_Object;
        public Fallout4Group<StoryManagerEventNode> StoryManagerEventNodes => _StoryManagerEventNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IStoryManagerEventNodeGetter> IFallout4ModGetter.StoryManagerEventNodes => _StoryManagerEventNodes_Object;
        #endregion
        #region MusicTracks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<MusicTrack> _MusicTracks_Object;
        public Fallout4Group<MusicTrack> MusicTracks => _MusicTracks_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IMusicTrackGetter> IFallout4ModGetter.MusicTracks => _MusicTracks_Object;
        #endregion
        #region DialogViews
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<DialogView> _DialogViews_Object;
        public Fallout4Group<DialogView> DialogViews => _DialogViews_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IDialogViewGetter> IFallout4ModGetter.DialogViews => _DialogViews_Object;
        #endregion
        #region EquipTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<EquipType> _EquipTypes_Object;
        public Fallout4Group<EquipType> EquipTypes => _EquipTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IEquipTypeGetter> IFallout4ModGetter.EquipTypes => _EquipTypes_Object;
        #endregion
        #region Relationships
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Relationship> _Relationships_Object;
        public Fallout4Group<Relationship> Relationships => _Relationships_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IRelationshipGetter> IFallout4ModGetter.Relationships => _Relationships_Object;
        #endregion
        #region AssociationTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<AssociationType> _AssociationTypes_Object;
        public Fallout4Group<AssociationType> AssociationTypes => _AssociationTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IAssociationTypeGetter> IFallout4ModGetter.AssociationTypes => _AssociationTypes_Object;
        #endregion
        #region Outfits
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Outfit> _Outfits_Object;
        public Fallout4Group<Outfit> Outfits => _Outfits_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IOutfitGetter> IFallout4ModGetter.Outfits => _Outfits_Object;
        #endregion
        #region ArtObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ArtObject> _ArtObjects_Object;
        public Fallout4Group<ArtObject> ArtObjects => _ArtObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IArtObjectGetter> IFallout4ModGetter.ArtObjects => _ArtObjects_Object;
        #endregion
        #region MaterialObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<MaterialObject> _MaterialObjects_Object;
        public Fallout4Group<MaterialObject> MaterialObjects => _MaterialObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IMaterialObjectGetter> IFallout4ModGetter.MaterialObjects => _MaterialObjects_Object;
        #endregion
        #region MovementTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<MovementType> _MovementTypes_Object;
        public Fallout4Group<MovementType> MovementTypes => _MovementTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IMovementTypeGetter> IFallout4ModGetter.MovementTypes => _MovementTypes_Object;
        #endregion
        #region SoundDescriptors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<SoundDescriptor> _SoundDescriptors_Object;
        public Fallout4Group<SoundDescriptor> SoundDescriptors => _SoundDescriptors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ISoundDescriptorGetter> IFallout4ModGetter.SoundDescriptors => _SoundDescriptors_Object;
        #endregion
        #region SoundCategories
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<SoundCategory> _SoundCategories_Object;
        public Fallout4Group<SoundCategory> SoundCategories => _SoundCategories_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ISoundCategoryGetter> IFallout4ModGetter.SoundCategories => _SoundCategories_Object;
        #endregion
        #region SoundOutputModels
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<SoundOutputModel> _SoundOutputModels_Object;
        public Fallout4Group<SoundOutputModel> SoundOutputModels => _SoundOutputModels_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ISoundOutputModelGetter> IFallout4ModGetter.SoundOutputModels => _SoundOutputModels_Object;
        #endregion
        #region CollisionLayers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<CollisionLayer> _CollisionLayers_Object;
        public Fallout4Group<CollisionLayer> CollisionLayers => _CollisionLayers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ICollisionLayerGetter> IFallout4ModGetter.CollisionLayers => _CollisionLayers_Object;
        #endregion
        #region Colors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ColorRecord> _Colors_Object;
        public Fallout4Group<ColorRecord> Colors => _Colors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IColorRecordGetter> IFallout4ModGetter.Colors => _Colors_Object;
        #endregion
        #region ReverbParameters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ReverbParameters> _ReverbParameters_Object;
        public Fallout4Group<ReverbParameters> ReverbParameters => _ReverbParameters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IReverbParametersGetter> IFallout4ModGetter.ReverbParameters => _ReverbParameters_Object;
        #endregion
        #region PackIns
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<PackIn> _PackIns_Object;
        public Fallout4Group<PackIn> PackIns => _PackIns_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IPackInGetter> IFallout4ModGetter.PackIns => _PackIns_Object;
        #endregion
        #region ReferenceGroups
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ReferenceGroup> _ReferenceGroups_Object;
        public Fallout4Group<ReferenceGroup> ReferenceGroups => _ReferenceGroups_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IReferenceGroupGetter> IFallout4ModGetter.ReferenceGroups => _ReferenceGroups_Object;
        #endregion
        #region AimModels
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<AimModel> _AimModels_Object;
        public Fallout4Group<AimModel> AimModels => _AimModels_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IAimModelGetter> IFallout4ModGetter.AimModels => _AimModels_Object;
        #endregion
        #region Layers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Layer> _Layers_Object;
        public Fallout4Group<Layer> Layers => _Layers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ILayerGetter> IFallout4ModGetter.Layers => _Layers_Object;
        #endregion
        #region ConstructibleObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ConstructibleObject> _ConstructibleObjects_Object;
        public Fallout4Group<ConstructibleObject> ConstructibleObjects => _ConstructibleObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IConstructibleObjectGetter> IFallout4ModGetter.ConstructibleObjects => _ConstructibleObjects_Object;
        #endregion
        #region ObjectModifications
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<AObjectModification> _ObjectModifications_Object;
        public Fallout4Group<AObjectModification> ObjectModifications => _ObjectModifications_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IAObjectModificationGetter> IFallout4ModGetter.ObjectModifications => _ObjectModifications_Object;
        #endregion
        #region MaterialSwaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<MaterialSwap> _MaterialSwaps_Object;
        public Fallout4Group<MaterialSwap> MaterialSwaps => _MaterialSwaps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IMaterialSwapGetter> IFallout4ModGetter.MaterialSwaps => _MaterialSwaps_Object;
        #endregion
        #region Zooms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<Zoom> _Zooms_Object;
        public Fallout4Group<Zoom> Zooms => _Zooms_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IZoomGetter> IFallout4ModGetter.Zooms => _Zooms_Object;
        #endregion
        #region InstanceNamingRules
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<InstanceNamingRules> _InstanceNamingRules_Object;
        public Fallout4Group<InstanceNamingRules> InstanceNamingRules => _InstanceNamingRules_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IInstanceNamingRulesGetter> IFallout4ModGetter.InstanceNamingRules => _InstanceNamingRules_Object;
        #endregion
        #region SoundKeywordMappings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<SoundKeywordMapping> _SoundKeywordMappings_Object;
        public Fallout4Group<SoundKeywordMapping> SoundKeywordMappings => _SoundKeywordMappings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ISoundKeywordMappingGetter> IFallout4ModGetter.SoundKeywordMappings => _SoundKeywordMappings_Object;
        #endregion
        #region AudioEffectChains
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<AudioEffectChain> _AudioEffectChains_Object;
        public Fallout4Group<AudioEffectChain> AudioEffectChains => _AudioEffectChains_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IAudioEffectChainGetter> IFallout4ModGetter.AudioEffectChains => _AudioEffectChains_Object;
        #endregion
        #region SceneCollections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<SceneCollection> _SceneCollections_Object;
        public Fallout4Group<SceneCollection> SceneCollections => _SceneCollections_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ISceneCollectionGetter> IFallout4ModGetter.SceneCollections => _SceneCollections_Object;
        #endregion
        #region AttractionRules
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<AttractionRule> _AttractionRules_Object;
        public Fallout4Group<AttractionRule> AttractionRules => _AttractionRules_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IAttractionRuleGetter> IFallout4ModGetter.AttractionRules => _AttractionRules_Object;
        #endregion
        #region AudioCategorySnapshots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<AudioCategorySnapshot> _AudioCategorySnapshots_Object;
        public Fallout4Group<AudioCategorySnapshot> AudioCategorySnapshots => _AudioCategorySnapshots_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IAudioCategorySnapshotGetter> IFallout4ModGetter.AudioCategorySnapshots => _AudioCategorySnapshots_Object;
        #endregion
        #region AnimationSoundTagSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<AnimationSoundTagSet> _AnimationSoundTagSets_Object;
        public Fallout4Group<AnimationSoundTagSet> AnimationSoundTagSets => _AnimationSoundTagSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IAnimationSoundTagSetGetter> IFallout4ModGetter.AnimationSoundTagSets => _AnimationSoundTagSets_Object;
        #endregion
        #region NavigationMeshObstacleManagers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<NavigationMeshObstacleManager> _NavigationMeshObstacleManagers_Object;
        public Fallout4Group<NavigationMeshObstacleManager> NavigationMeshObstacleManagers => _NavigationMeshObstacleManagers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<INavigationMeshObstacleManagerGetter> IFallout4ModGetter.NavigationMeshObstacleManagers => _NavigationMeshObstacleManagers_Object;
        #endregion
        #region LensFlares
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<LensFlare> _LensFlares_Object;
        public Fallout4Group<LensFlare> LensFlares => _LensFlares_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<ILensFlareGetter> IFallout4ModGetter.LensFlares => _LensFlares_Object;
        #endregion
        #region GodRays
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<GodRays> _GodRays_Object;
        public Fallout4Group<GodRays> GodRays => _GodRays_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IGodRaysGetter> IFallout4ModGetter.GodRays => _GodRays_Object;
        #endregion
        #region ObjectVisibilityManagers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout4Group<ObjectVisibilityManager> _ObjectVisibilityManagers_Object;
        public Fallout4Group<ObjectVisibilityManager> ObjectVisibilityManagers => _ObjectVisibilityManagers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout4GroupGetter<IObjectVisibilityManagerGetter> IFallout4ModGetter.ObjectVisibilityManagers => _ObjectVisibilityManagers_Object;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            Fallout4ModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFallout4ModGetter rhs) return false;
            return ((Fallout4ModCommon)((IFallout4ModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFallout4ModGetter? obj)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((Fallout4ModCommon)((IFallout4ModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ModHeader = new MaskItem<TItem, Fallout4ModHeader.Mask<TItem>?>(initialValue, new Fallout4ModHeader.Mask<TItem>(initialValue));
                this.GameSettings = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.LocationReferenceTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Actions = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Transforms = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Components = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.TextureSets = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Globals = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.DamageTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Classes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.HeadParts = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Races = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.SoundMarkers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.AcousticSpaces = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.MagicEffects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.LandscapeTextures = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ObjectEffects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Spells = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Activators = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.TalkingActivators = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Armors = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Books = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Containers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Doors = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Ingredients = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Lights = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.MiscItems = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Statics = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.StaticCollections = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.MovableStatics = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Grasses = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Trees = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Florae = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Furniture = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Weapons = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Ammunitions = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Npcs = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.LeveledNpcs = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Keys = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Ingestibles = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.IdleMarkers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Holotapes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Projectiles = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Hazards = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.BendableSplines = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Terminals = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.LeveledItems = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Weather = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Climates = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ShaderParticleGeometries = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.VisualEffects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Regions = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.NavigationMeshInfoMaps = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Cells = new MaskItem<TItem, Fallout4ListGroup.Mask<TItem>?>(initialValue, new Fallout4ListGroup.Mask<TItem>(initialValue));
                this.Worldspaces = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Quests = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.IdleAnimations = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Packages = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.CombatStyles = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.LoadScreens = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.AnimatedObjects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Waters = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.EffectShaders = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Explosions = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Debris = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ImageSpaces = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ImageSpaceAdapters = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.FormLists = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Perks = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.BodyParts = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.AddonNodes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ActorValueInformation = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.CameraShots = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.CameraPaths = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.VoiceTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.MaterialTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Impacts = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ImpactDataSets = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ArmorAddons = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.EncounterZones = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Locations = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Messages = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.DefaultObjectManagers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.DefaultObjects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.LightingTemplates = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.MusicTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Footsteps = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.FootstepSets = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.StoryManagerBranchNodes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.StoryManagerQuestNodes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.StoryManagerEventNodes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.MusicTracks = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.DialogViews = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.EquipTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Relationships = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.AssociationTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Outfits = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ArtObjects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.MaterialObjects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.MovementTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.SoundDescriptors = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.SoundCategories = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.SoundOutputModels = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.CollisionLayers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Colors = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ReverbParameters = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.PackIns = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ReferenceGroups = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.AimModels = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Layers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ConstructibleObjects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ObjectModifications = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.MaterialSwaps = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.Zooms = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.InstanceNamingRules = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.SoundKeywordMappings = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.AudioEffectChains = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.SceneCollections = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.AttractionRules = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.AudioCategorySnapshots = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.AnimationSoundTagSets = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.NavigationMeshObstacleManagers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.LensFlares = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.GodRays = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
                this.ObjectVisibilityManagers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(initialValue, new Fallout4Group.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ModHeader,
                TItem GameSettings,
                TItem Keywords,
                TItem LocationReferenceTypes,
                TItem Actions,
                TItem Transforms,
                TItem Components,
                TItem TextureSets,
                TItem Globals,
                TItem DamageTypes,
                TItem Classes,
                TItem Factions,
                TItem HeadParts,
                TItem Races,
                TItem SoundMarkers,
                TItem AcousticSpaces,
                TItem MagicEffects,
                TItem LandscapeTextures,
                TItem ObjectEffects,
                TItem Spells,
                TItem Activators,
                TItem TalkingActivators,
                TItem Armors,
                TItem Books,
                TItem Containers,
                TItem Doors,
                TItem Ingredients,
                TItem Lights,
                TItem MiscItems,
                TItem Statics,
                TItem StaticCollections,
                TItem MovableStatics,
                TItem Grasses,
                TItem Trees,
                TItem Florae,
                TItem Furniture,
                TItem Weapons,
                TItem Ammunitions,
                TItem Npcs,
                TItem LeveledNpcs,
                TItem Keys,
                TItem Ingestibles,
                TItem IdleMarkers,
                TItem Holotapes,
                TItem Projectiles,
                TItem Hazards,
                TItem BendableSplines,
                TItem Terminals,
                TItem LeveledItems,
                TItem Weather,
                TItem Climates,
                TItem ShaderParticleGeometries,
                TItem VisualEffects,
                TItem Regions,
                TItem NavigationMeshInfoMaps,
                TItem Cells,
                TItem Worldspaces,
                TItem Quests,
                TItem IdleAnimations,
                TItem Packages,
                TItem CombatStyles,
                TItem LoadScreens,
                TItem AnimatedObjects,
                TItem Waters,
                TItem EffectShaders,
                TItem Explosions,
                TItem Debris,
                TItem ImageSpaces,
                TItem ImageSpaceAdapters,
                TItem FormLists,
                TItem Perks,
                TItem BodyParts,
                TItem AddonNodes,
                TItem ActorValueInformation,
                TItem CameraShots,
                TItem CameraPaths,
                TItem VoiceTypes,
                TItem MaterialTypes,
                TItem Impacts,
                TItem ImpactDataSets,
                TItem ArmorAddons,
                TItem EncounterZones,
                TItem Locations,
                TItem Messages,
                TItem DefaultObjectManagers,
                TItem DefaultObjects,
                TItem LightingTemplates,
                TItem MusicTypes,
                TItem Footsteps,
                TItem FootstepSets,
                TItem StoryManagerBranchNodes,
                TItem StoryManagerQuestNodes,
                TItem StoryManagerEventNodes,
                TItem MusicTracks,
                TItem DialogViews,
                TItem EquipTypes,
                TItem Relationships,
                TItem AssociationTypes,
                TItem Outfits,
                TItem ArtObjects,
                TItem MaterialObjects,
                TItem MovementTypes,
                TItem SoundDescriptors,
                TItem SoundCategories,
                TItem SoundOutputModels,
                TItem CollisionLayers,
                TItem Colors,
                TItem ReverbParameters,
                TItem PackIns,
                TItem ReferenceGroups,
                TItem AimModels,
                TItem Layers,
                TItem ConstructibleObjects,
                TItem ObjectModifications,
                TItem MaterialSwaps,
                TItem Zooms,
                TItem InstanceNamingRules,
                TItem SoundKeywordMappings,
                TItem AudioEffectChains,
                TItem SceneCollections,
                TItem AttractionRules,
                TItem AudioCategorySnapshots,
                TItem AnimationSoundTagSets,
                TItem NavigationMeshObstacleManagers,
                TItem LensFlares,
                TItem GodRays,
                TItem ObjectVisibilityManagers)
            {
                this.ModHeader = new MaskItem<TItem, Fallout4ModHeader.Mask<TItem>?>(ModHeader, new Fallout4ModHeader.Mask<TItem>(ModHeader));
                this.GameSettings = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(GameSettings, new Fallout4Group.Mask<TItem>(GameSettings));
                this.Keywords = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Keywords, new Fallout4Group.Mask<TItem>(Keywords));
                this.LocationReferenceTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(LocationReferenceTypes, new Fallout4Group.Mask<TItem>(LocationReferenceTypes));
                this.Actions = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Actions, new Fallout4Group.Mask<TItem>(Actions));
                this.Transforms = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Transforms, new Fallout4Group.Mask<TItem>(Transforms));
                this.Components = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Components, new Fallout4Group.Mask<TItem>(Components));
                this.TextureSets = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(TextureSets, new Fallout4Group.Mask<TItem>(TextureSets));
                this.Globals = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Globals, new Fallout4Group.Mask<TItem>(Globals));
                this.DamageTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(DamageTypes, new Fallout4Group.Mask<TItem>(DamageTypes));
                this.Classes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Classes, new Fallout4Group.Mask<TItem>(Classes));
                this.Factions = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Factions, new Fallout4Group.Mask<TItem>(Factions));
                this.HeadParts = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(HeadParts, new Fallout4Group.Mask<TItem>(HeadParts));
                this.Races = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Races, new Fallout4Group.Mask<TItem>(Races));
                this.SoundMarkers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(SoundMarkers, new Fallout4Group.Mask<TItem>(SoundMarkers));
                this.AcousticSpaces = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(AcousticSpaces, new Fallout4Group.Mask<TItem>(AcousticSpaces));
                this.MagicEffects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(MagicEffects, new Fallout4Group.Mask<TItem>(MagicEffects));
                this.LandscapeTextures = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(LandscapeTextures, new Fallout4Group.Mask<TItem>(LandscapeTextures));
                this.ObjectEffects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ObjectEffects, new Fallout4Group.Mask<TItem>(ObjectEffects));
                this.Spells = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Spells, new Fallout4Group.Mask<TItem>(Spells));
                this.Activators = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Activators, new Fallout4Group.Mask<TItem>(Activators));
                this.TalkingActivators = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(TalkingActivators, new Fallout4Group.Mask<TItem>(TalkingActivators));
                this.Armors = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Armors, new Fallout4Group.Mask<TItem>(Armors));
                this.Books = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Books, new Fallout4Group.Mask<TItem>(Books));
                this.Containers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Containers, new Fallout4Group.Mask<TItem>(Containers));
                this.Doors = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Doors, new Fallout4Group.Mask<TItem>(Doors));
                this.Ingredients = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Ingredients, new Fallout4Group.Mask<TItem>(Ingredients));
                this.Lights = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Lights, new Fallout4Group.Mask<TItem>(Lights));
                this.MiscItems = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(MiscItems, new Fallout4Group.Mask<TItem>(MiscItems));
                this.Statics = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Statics, new Fallout4Group.Mask<TItem>(Statics));
                this.StaticCollections = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(StaticCollections, new Fallout4Group.Mask<TItem>(StaticCollections));
                this.MovableStatics = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(MovableStatics, new Fallout4Group.Mask<TItem>(MovableStatics));
                this.Grasses = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Grasses, new Fallout4Group.Mask<TItem>(Grasses));
                this.Trees = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Trees, new Fallout4Group.Mask<TItem>(Trees));
                this.Florae = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Florae, new Fallout4Group.Mask<TItem>(Florae));
                this.Furniture = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Furniture, new Fallout4Group.Mask<TItem>(Furniture));
                this.Weapons = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Weapons, new Fallout4Group.Mask<TItem>(Weapons));
                this.Ammunitions = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Ammunitions, new Fallout4Group.Mask<TItem>(Ammunitions));
                this.Npcs = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Npcs, new Fallout4Group.Mask<TItem>(Npcs));
                this.LeveledNpcs = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(LeveledNpcs, new Fallout4Group.Mask<TItem>(LeveledNpcs));
                this.Keys = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Keys, new Fallout4Group.Mask<TItem>(Keys));
                this.Ingestibles = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Ingestibles, new Fallout4Group.Mask<TItem>(Ingestibles));
                this.IdleMarkers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(IdleMarkers, new Fallout4Group.Mask<TItem>(IdleMarkers));
                this.Holotapes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Holotapes, new Fallout4Group.Mask<TItem>(Holotapes));
                this.Projectiles = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Projectiles, new Fallout4Group.Mask<TItem>(Projectiles));
                this.Hazards = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Hazards, new Fallout4Group.Mask<TItem>(Hazards));
                this.BendableSplines = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(BendableSplines, new Fallout4Group.Mask<TItem>(BendableSplines));
                this.Terminals = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Terminals, new Fallout4Group.Mask<TItem>(Terminals));
                this.LeveledItems = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(LeveledItems, new Fallout4Group.Mask<TItem>(LeveledItems));
                this.Weather = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Weather, new Fallout4Group.Mask<TItem>(Weather));
                this.Climates = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Climates, new Fallout4Group.Mask<TItem>(Climates));
                this.ShaderParticleGeometries = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ShaderParticleGeometries, new Fallout4Group.Mask<TItem>(ShaderParticleGeometries));
                this.VisualEffects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(VisualEffects, new Fallout4Group.Mask<TItem>(VisualEffects));
                this.Regions = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Regions, new Fallout4Group.Mask<TItem>(Regions));
                this.NavigationMeshInfoMaps = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(NavigationMeshInfoMaps, new Fallout4Group.Mask<TItem>(NavigationMeshInfoMaps));
                this.Cells = new MaskItem<TItem, Fallout4ListGroup.Mask<TItem>?>(Cells, new Fallout4ListGroup.Mask<TItem>(Cells));
                this.Worldspaces = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Worldspaces, new Fallout4Group.Mask<TItem>(Worldspaces));
                this.Quests = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Quests, new Fallout4Group.Mask<TItem>(Quests));
                this.IdleAnimations = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(IdleAnimations, new Fallout4Group.Mask<TItem>(IdleAnimations));
                this.Packages = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Packages, new Fallout4Group.Mask<TItem>(Packages));
                this.CombatStyles = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(CombatStyles, new Fallout4Group.Mask<TItem>(CombatStyles));
                this.LoadScreens = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(LoadScreens, new Fallout4Group.Mask<TItem>(LoadScreens));
                this.AnimatedObjects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(AnimatedObjects, new Fallout4Group.Mask<TItem>(AnimatedObjects));
                this.Waters = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Waters, new Fallout4Group.Mask<TItem>(Waters));
                this.EffectShaders = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(EffectShaders, new Fallout4Group.Mask<TItem>(EffectShaders));
                this.Explosions = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Explosions, new Fallout4Group.Mask<TItem>(Explosions));
                this.Debris = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Debris, new Fallout4Group.Mask<TItem>(Debris));
                this.ImageSpaces = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ImageSpaces, new Fallout4Group.Mask<TItem>(ImageSpaces));
                this.ImageSpaceAdapters = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ImageSpaceAdapters, new Fallout4Group.Mask<TItem>(ImageSpaceAdapters));
                this.FormLists = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(FormLists, new Fallout4Group.Mask<TItem>(FormLists));
                this.Perks = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Perks, new Fallout4Group.Mask<TItem>(Perks));
                this.BodyParts = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(BodyParts, new Fallout4Group.Mask<TItem>(BodyParts));
                this.AddonNodes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(AddonNodes, new Fallout4Group.Mask<TItem>(AddonNodes));
                this.ActorValueInformation = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ActorValueInformation, new Fallout4Group.Mask<TItem>(ActorValueInformation));
                this.CameraShots = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(CameraShots, new Fallout4Group.Mask<TItem>(CameraShots));
                this.CameraPaths = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(CameraPaths, new Fallout4Group.Mask<TItem>(CameraPaths));
                this.VoiceTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(VoiceTypes, new Fallout4Group.Mask<TItem>(VoiceTypes));
                this.MaterialTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(MaterialTypes, new Fallout4Group.Mask<TItem>(MaterialTypes));
                this.Impacts = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Impacts, new Fallout4Group.Mask<TItem>(Impacts));
                this.ImpactDataSets = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ImpactDataSets, new Fallout4Group.Mask<TItem>(ImpactDataSets));
                this.ArmorAddons = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ArmorAddons, new Fallout4Group.Mask<TItem>(ArmorAddons));
                this.EncounterZones = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(EncounterZones, new Fallout4Group.Mask<TItem>(EncounterZones));
                this.Locations = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Locations, new Fallout4Group.Mask<TItem>(Locations));
                this.Messages = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Messages, new Fallout4Group.Mask<TItem>(Messages));
                this.DefaultObjectManagers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(DefaultObjectManagers, new Fallout4Group.Mask<TItem>(DefaultObjectManagers));
                this.DefaultObjects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(DefaultObjects, new Fallout4Group.Mask<TItem>(DefaultObjects));
                this.LightingTemplates = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(LightingTemplates, new Fallout4Group.Mask<TItem>(LightingTemplates));
                this.MusicTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(MusicTypes, new Fallout4Group.Mask<TItem>(MusicTypes));
                this.Footsteps = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Footsteps, new Fallout4Group.Mask<TItem>(Footsteps));
                this.FootstepSets = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(FootstepSets, new Fallout4Group.Mask<TItem>(FootstepSets));
                this.StoryManagerBranchNodes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(StoryManagerBranchNodes, new Fallout4Group.Mask<TItem>(StoryManagerBranchNodes));
                this.StoryManagerQuestNodes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(StoryManagerQuestNodes, new Fallout4Group.Mask<TItem>(StoryManagerQuestNodes));
                this.StoryManagerEventNodes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(StoryManagerEventNodes, new Fallout4Group.Mask<TItem>(StoryManagerEventNodes));
                this.MusicTracks = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(MusicTracks, new Fallout4Group.Mask<TItem>(MusicTracks));
                this.DialogViews = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(DialogViews, new Fallout4Group.Mask<TItem>(DialogViews));
                this.EquipTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(EquipTypes, new Fallout4Group.Mask<TItem>(EquipTypes));
                this.Relationships = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Relationships, new Fallout4Group.Mask<TItem>(Relationships));
                this.AssociationTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(AssociationTypes, new Fallout4Group.Mask<TItem>(AssociationTypes));
                this.Outfits = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Outfits, new Fallout4Group.Mask<TItem>(Outfits));
                this.ArtObjects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ArtObjects, new Fallout4Group.Mask<TItem>(ArtObjects));
                this.MaterialObjects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(MaterialObjects, new Fallout4Group.Mask<TItem>(MaterialObjects));
                this.MovementTypes = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(MovementTypes, new Fallout4Group.Mask<TItem>(MovementTypes));
                this.SoundDescriptors = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(SoundDescriptors, new Fallout4Group.Mask<TItem>(SoundDescriptors));
                this.SoundCategories = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(SoundCategories, new Fallout4Group.Mask<TItem>(SoundCategories));
                this.SoundOutputModels = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(SoundOutputModels, new Fallout4Group.Mask<TItem>(SoundOutputModels));
                this.CollisionLayers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(CollisionLayers, new Fallout4Group.Mask<TItem>(CollisionLayers));
                this.Colors = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Colors, new Fallout4Group.Mask<TItem>(Colors));
                this.ReverbParameters = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ReverbParameters, new Fallout4Group.Mask<TItem>(ReverbParameters));
                this.PackIns = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(PackIns, new Fallout4Group.Mask<TItem>(PackIns));
                this.ReferenceGroups = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ReferenceGroups, new Fallout4Group.Mask<TItem>(ReferenceGroups));
                this.AimModels = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(AimModels, new Fallout4Group.Mask<TItem>(AimModels));
                this.Layers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Layers, new Fallout4Group.Mask<TItem>(Layers));
                this.ConstructibleObjects = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ConstructibleObjects, new Fallout4Group.Mask<TItem>(ConstructibleObjects));
                this.ObjectModifications = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ObjectModifications, new Fallout4Group.Mask<TItem>(ObjectModifications));
                this.MaterialSwaps = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(MaterialSwaps, new Fallout4Group.Mask<TItem>(MaterialSwaps));
                this.Zooms = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(Zooms, new Fallout4Group.Mask<TItem>(Zooms));
                this.InstanceNamingRules = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(InstanceNamingRules, new Fallout4Group.Mask<TItem>(InstanceNamingRules));
                this.SoundKeywordMappings = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(SoundKeywordMappings, new Fallout4Group.Mask<TItem>(SoundKeywordMappings));
                this.AudioEffectChains = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(AudioEffectChains, new Fallout4Group.Mask<TItem>(AudioEffectChains));
                this.SceneCollections = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(SceneCollections, new Fallout4Group.Mask<TItem>(SceneCollections));
                this.AttractionRules = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(AttractionRules, new Fallout4Group.Mask<TItem>(AttractionRules));
                this.AudioCategorySnapshots = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(AudioCategorySnapshots, new Fallout4Group.Mask<TItem>(AudioCategorySnapshots));
                this.AnimationSoundTagSets = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(AnimationSoundTagSets, new Fallout4Group.Mask<TItem>(AnimationSoundTagSets));
                this.NavigationMeshObstacleManagers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(NavigationMeshObstacleManagers, new Fallout4Group.Mask<TItem>(NavigationMeshObstacleManagers));
                this.LensFlares = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(LensFlares, new Fallout4Group.Mask<TItem>(LensFlares));
                this.GodRays = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(GodRays, new Fallout4Group.Mask<TItem>(GodRays));
                this.ObjectVisibilityManagers = new MaskItem<TItem, Fallout4Group.Mask<TItem>?>(ObjectVisibilityManagers, new Fallout4Group.Mask<TItem>(ObjectVisibilityManagers));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Fallout4ModHeader.Mask<TItem>?>? ModHeader { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? GameSettings { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Keywords { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? LocationReferenceTypes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Actions { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Transforms { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Components { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? TextureSets { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Globals { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? DamageTypes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Classes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Factions { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? HeadParts { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Races { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? SoundMarkers { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? AcousticSpaces { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? MagicEffects { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? LandscapeTextures { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ObjectEffects { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Spells { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Activators { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? TalkingActivators { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Armors { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Books { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Containers { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Doors { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Ingredients { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Lights { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? MiscItems { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Statics { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? StaticCollections { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? MovableStatics { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Grasses { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Trees { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Florae { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Furniture { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Weapons { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Ammunitions { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Npcs { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? LeveledNpcs { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Keys { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Ingestibles { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? IdleMarkers { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Holotapes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Projectiles { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Hazards { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? BendableSplines { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Terminals { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? LeveledItems { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Weather { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Climates { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ShaderParticleGeometries { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? VisualEffects { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Regions { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? NavigationMeshInfoMaps { get; set; }
            public MaskItem<TItem, Fallout4ListGroup.Mask<TItem>?>? Cells { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Worldspaces { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Quests { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? IdleAnimations { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Packages { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? CombatStyles { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? LoadScreens { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? AnimatedObjects { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Waters { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? EffectShaders { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Explosions { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Debris { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ImageSpaces { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ImageSpaceAdapters { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? FormLists { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Perks { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? BodyParts { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? AddonNodes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ActorValueInformation { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? CameraShots { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? CameraPaths { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? VoiceTypes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? MaterialTypes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Impacts { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ImpactDataSets { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ArmorAddons { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? EncounterZones { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Locations { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Messages { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? DefaultObjectManagers { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? DefaultObjects { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? LightingTemplates { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? MusicTypes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Footsteps { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? FootstepSets { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? StoryManagerBranchNodes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? StoryManagerQuestNodes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? StoryManagerEventNodes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? MusicTracks { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? DialogViews { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? EquipTypes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Relationships { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? AssociationTypes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Outfits { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ArtObjects { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? MaterialObjects { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? MovementTypes { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? SoundDescriptors { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? SoundCategories { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? SoundOutputModels { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? CollisionLayers { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Colors { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ReverbParameters { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? PackIns { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ReferenceGroups { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? AimModels { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Layers { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ConstructibleObjects { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ObjectModifications { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? MaterialSwaps { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? Zooms { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? InstanceNamingRules { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? SoundKeywordMappings { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? AudioEffectChains { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? SceneCollections { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? AttractionRules { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? AudioCategorySnapshots { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? AnimationSoundTagSets { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? NavigationMeshObstacleManagers { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? LensFlares { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? GodRays { get; set; }
            public MaskItem<TItem, Fallout4Group.Mask<TItem>?>? ObjectVisibilityManagers { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
                if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
                if (!object.Equals(this.Actions, rhs.Actions)) return false;
                if (!object.Equals(this.Transforms, rhs.Transforms)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.TextureSets, rhs.TextureSets)) return false;
                if (!object.Equals(this.Globals, rhs.Globals)) return false;
                if (!object.Equals(this.DamageTypes, rhs.DamageTypes)) return false;
                if (!object.Equals(this.Classes, rhs.Classes)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.Races, rhs.Races)) return false;
                if (!object.Equals(this.SoundMarkers, rhs.SoundMarkers)) return false;
                if (!object.Equals(this.AcousticSpaces, rhs.AcousticSpaces)) return false;
                if (!object.Equals(this.MagicEffects, rhs.MagicEffects)) return false;
                if (!object.Equals(this.LandscapeTextures, rhs.LandscapeTextures)) return false;
                if (!object.Equals(this.ObjectEffects, rhs.ObjectEffects)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Activators, rhs.Activators)) return false;
                if (!object.Equals(this.TalkingActivators, rhs.TalkingActivators)) return false;
                if (!object.Equals(this.Armors, rhs.Armors)) return false;
                if (!object.Equals(this.Books, rhs.Books)) return false;
                if (!object.Equals(this.Containers, rhs.Containers)) return false;
                if (!object.Equals(this.Doors, rhs.Doors)) return false;
                if (!object.Equals(this.Ingredients, rhs.Ingredients)) return false;
                if (!object.Equals(this.Lights, rhs.Lights)) return false;
                if (!object.Equals(this.MiscItems, rhs.MiscItems)) return false;
                if (!object.Equals(this.Statics, rhs.Statics)) return false;
                if (!object.Equals(this.StaticCollections, rhs.StaticCollections)) return false;
                if (!object.Equals(this.MovableStatics, rhs.MovableStatics)) return false;
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
                if (!object.Equals(this.Trees, rhs.Trees)) return false;
                if (!object.Equals(this.Florae, rhs.Florae)) return false;
                if (!object.Equals(this.Furniture, rhs.Furniture)) return false;
                if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
                if (!object.Equals(this.Ammunitions, rhs.Ammunitions)) return false;
                if (!object.Equals(this.Npcs, rhs.Npcs)) return false;
                if (!object.Equals(this.LeveledNpcs, rhs.LeveledNpcs)) return false;
                if (!object.Equals(this.Keys, rhs.Keys)) return false;
                if (!object.Equals(this.Ingestibles, rhs.Ingestibles)) return false;
                if (!object.Equals(this.IdleMarkers, rhs.IdleMarkers)) return false;
                if (!object.Equals(this.Holotapes, rhs.Holotapes)) return false;
                if (!object.Equals(this.Projectiles, rhs.Projectiles)) return false;
                if (!object.Equals(this.Hazards, rhs.Hazards)) return false;
                if (!object.Equals(this.BendableSplines, rhs.BendableSplines)) return false;
                if (!object.Equals(this.Terminals, rhs.Terminals)) return false;
                if (!object.Equals(this.LeveledItems, rhs.LeveledItems)) return false;
                if (!object.Equals(this.Weather, rhs.Weather)) return false;
                if (!object.Equals(this.Climates, rhs.Climates)) return false;
                if (!object.Equals(this.ShaderParticleGeometries, rhs.ShaderParticleGeometries)) return false;
                if (!object.Equals(this.VisualEffects, rhs.VisualEffects)) return false;
                if (!object.Equals(this.Regions, rhs.Regions)) return false;
                if (!object.Equals(this.NavigationMeshInfoMaps, rhs.NavigationMeshInfoMaps)) return false;
                if (!object.Equals(this.Cells, rhs.Cells)) return false;
                if (!object.Equals(this.Worldspaces, rhs.Worldspaces)) return false;
                if (!object.Equals(this.Quests, rhs.Quests)) return false;
                if (!object.Equals(this.IdleAnimations, rhs.IdleAnimations)) return false;
                if (!object.Equals(this.Packages, rhs.Packages)) return false;
                if (!object.Equals(this.CombatStyles, rhs.CombatStyles)) return false;
                if (!object.Equals(this.LoadScreens, rhs.LoadScreens)) return false;
                if (!object.Equals(this.AnimatedObjects, rhs.AnimatedObjects)) return false;
                if (!object.Equals(this.Waters, rhs.Waters)) return false;
                if (!object.Equals(this.EffectShaders, rhs.EffectShaders)) return false;
                if (!object.Equals(this.Explosions, rhs.Explosions)) return false;
                if (!object.Equals(this.Debris, rhs.Debris)) return false;
                if (!object.Equals(this.ImageSpaces, rhs.ImageSpaces)) return false;
                if (!object.Equals(this.ImageSpaceAdapters, rhs.ImageSpaceAdapters)) return false;
                if (!object.Equals(this.FormLists, rhs.FormLists)) return false;
                if (!object.Equals(this.Perks, rhs.Perks)) return false;
                if (!object.Equals(this.BodyParts, rhs.BodyParts)) return false;
                if (!object.Equals(this.AddonNodes, rhs.AddonNodes)) return false;
                if (!object.Equals(this.ActorValueInformation, rhs.ActorValueInformation)) return false;
                if (!object.Equals(this.CameraShots, rhs.CameraShots)) return false;
                if (!object.Equals(this.CameraPaths, rhs.CameraPaths)) return false;
                if (!object.Equals(this.VoiceTypes, rhs.VoiceTypes)) return false;
                if (!object.Equals(this.MaterialTypes, rhs.MaterialTypes)) return false;
                if (!object.Equals(this.Impacts, rhs.Impacts)) return false;
                if (!object.Equals(this.ImpactDataSets, rhs.ImpactDataSets)) return false;
                if (!object.Equals(this.ArmorAddons, rhs.ArmorAddons)) return false;
                if (!object.Equals(this.EncounterZones, rhs.EncounterZones)) return false;
                if (!object.Equals(this.Locations, rhs.Locations)) return false;
                if (!object.Equals(this.Messages, rhs.Messages)) return false;
                if (!object.Equals(this.DefaultObjectManagers, rhs.DefaultObjectManagers)) return false;
                if (!object.Equals(this.DefaultObjects, rhs.DefaultObjects)) return false;
                if (!object.Equals(this.LightingTemplates, rhs.LightingTemplates)) return false;
                if (!object.Equals(this.MusicTypes, rhs.MusicTypes)) return false;
                if (!object.Equals(this.Footsteps, rhs.Footsteps)) return false;
                if (!object.Equals(this.FootstepSets, rhs.FootstepSets)) return false;
                if (!object.Equals(this.StoryManagerBranchNodes, rhs.StoryManagerBranchNodes)) return false;
                if (!object.Equals(this.StoryManagerQuestNodes, rhs.StoryManagerQuestNodes)) return false;
                if (!object.Equals(this.StoryManagerEventNodes, rhs.StoryManagerEventNodes)) return false;
                if (!object.Equals(this.MusicTracks, rhs.MusicTracks)) return false;
                if (!object.Equals(this.DialogViews, rhs.DialogViews)) return false;
                if (!object.Equals(this.EquipTypes, rhs.EquipTypes)) return false;
                if (!object.Equals(this.Relationships, rhs.Relationships)) return false;
                if (!object.Equals(this.AssociationTypes, rhs.AssociationTypes)) return false;
                if (!object.Equals(this.Outfits, rhs.Outfits)) return false;
                if (!object.Equals(this.ArtObjects, rhs.ArtObjects)) return false;
                if (!object.Equals(this.MaterialObjects, rhs.MaterialObjects)) return false;
                if (!object.Equals(this.MovementTypes, rhs.MovementTypes)) return false;
                if (!object.Equals(this.SoundDescriptors, rhs.SoundDescriptors)) return false;
                if (!object.Equals(this.SoundCategories, rhs.SoundCategories)) return false;
                if (!object.Equals(this.SoundOutputModels, rhs.SoundOutputModels)) return false;
                if (!object.Equals(this.CollisionLayers, rhs.CollisionLayers)) return false;
                if (!object.Equals(this.Colors, rhs.Colors)) return false;
                if (!object.Equals(this.ReverbParameters, rhs.ReverbParameters)) return false;
                if (!object.Equals(this.PackIns, rhs.PackIns)) return false;
                if (!object.Equals(this.ReferenceGroups, rhs.ReferenceGroups)) return false;
                if (!object.Equals(this.AimModels, rhs.AimModels)) return false;
                if (!object.Equals(this.Layers, rhs.Layers)) return false;
                if (!object.Equals(this.ConstructibleObjects, rhs.ConstructibleObjects)) return false;
                if (!object.Equals(this.ObjectModifications, rhs.ObjectModifications)) return false;
                if (!object.Equals(this.MaterialSwaps, rhs.MaterialSwaps)) return false;
                if (!object.Equals(this.Zooms, rhs.Zooms)) return false;
                if (!object.Equals(this.InstanceNamingRules, rhs.InstanceNamingRules)) return false;
                if (!object.Equals(this.SoundKeywordMappings, rhs.SoundKeywordMappings)) return false;
                if (!object.Equals(this.AudioEffectChains, rhs.AudioEffectChains)) return false;
                if (!object.Equals(this.SceneCollections, rhs.SceneCollections)) return false;
                if (!object.Equals(this.AttractionRules, rhs.AttractionRules)) return false;
                if (!object.Equals(this.AudioCategorySnapshots, rhs.AudioCategorySnapshots)) return false;
                if (!object.Equals(this.AnimationSoundTagSets, rhs.AnimationSoundTagSets)) return false;
                if (!object.Equals(this.NavigationMeshObstacleManagers, rhs.NavigationMeshObstacleManagers)) return false;
                if (!object.Equals(this.LensFlares, rhs.LensFlares)) return false;
                if (!object.Equals(this.GodRays, rhs.GodRays)) return false;
                if (!object.Equals(this.ObjectVisibilityManagers, rhs.ObjectVisibilityManagers)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ModHeader);
                hash.Add(this.GameSettings);
                hash.Add(this.Keywords);
                hash.Add(this.LocationReferenceTypes);
                hash.Add(this.Actions);
                hash.Add(this.Transforms);
                hash.Add(this.Components);
                hash.Add(this.TextureSets);
                hash.Add(this.Globals);
                hash.Add(this.DamageTypes);
                hash.Add(this.Classes);
                hash.Add(this.Factions);
                hash.Add(this.HeadParts);
                hash.Add(this.Races);
                hash.Add(this.SoundMarkers);
                hash.Add(this.AcousticSpaces);
                hash.Add(this.MagicEffects);
                hash.Add(this.LandscapeTextures);
                hash.Add(this.ObjectEffects);
                hash.Add(this.Spells);
                hash.Add(this.Activators);
                hash.Add(this.TalkingActivators);
                hash.Add(this.Armors);
                hash.Add(this.Books);
                hash.Add(this.Containers);
                hash.Add(this.Doors);
                hash.Add(this.Ingredients);
                hash.Add(this.Lights);
                hash.Add(this.MiscItems);
                hash.Add(this.Statics);
                hash.Add(this.StaticCollections);
                hash.Add(this.MovableStatics);
                hash.Add(this.Grasses);
                hash.Add(this.Trees);
                hash.Add(this.Florae);
                hash.Add(this.Furniture);
                hash.Add(this.Weapons);
                hash.Add(this.Ammunitions);
                hash.Add(this.Npcs);
                hash.Add(this.LeveledNpcs);
                hash.Add(this.Keys);
                hash.Add(this.Ingestibles);
                hash.Add(this.IdleMarkers);
                hash.Add(this.Holotapes);
                hash.Add(this.Projectiles);
                hash.Add(this.Hazards);
                hash.Add(this.BendableSplines);
                hash.Add(this.Terminals);
                hash.Add(this.LeveledItems);
                hash.Add(this.Weather);
                hash.Add(this.Climates);
                hash.Add(this.ShaderParticleGeometries);
                hash.Add(this.VisualEffects);
                hash.Add(this.Regions);
                hash.Add(this.NavigationMeshInfoMaps);
                hash.Add(this.Cells);
                hash.Add(this.Worldspaces);
                hash.Add(this.Quests);
                hash.Add(this.IdleAnimations);
                hash.Add(this.Packages);
                hash.Add(this.CombatStyles);
                hash.Add(this.LoadScreens);
                hash.Add(this.AnimatedObjects);
                hash.Add(this.Waters);
                hash.Add(this.EffectShaders);
                hash.Add(this.Explosions);
                hash.Add(this.Debris);
                hash.Add(this.ImageSpaces);
                hash.Add(this.ImageSpaceAdapters);
                hash.Add(this.FormLists);
                hash.Add(this.Perks);
                hash.Add(this.BodyParts);
                hash.Add(this.AddonNodes);
                hash.Add(this.ActorValueInformation);
                hash.Add(this.CameraShots);
                hash.Add(this.CameraPaths);
                hash.Add(this.VoiceTypes);
                hash.Add(this.MaterialTypes);
                hash.Add(this.Impacts);
                hash.Add(this.ImpactDataSets);
                hash.Add(this.ArmorAddons);
                hash.Add(this.EncounterZones);
                hash.Add(this.Locations);
                hash.Add(this.Messages);
                hash.Add(this.DefaultObjectManagers);
                hash.Add(this.DefaultObjects);
                hash.Add(this.LightingTemplates);
                hash.Add(this.MusicTypes);
                hash.Add(this.Footsteps);
                hash.Add(this.FootstepSets);
                hash.Add(this.StoryManagerBranchNodes);
                hash.Add(this.StoryManagerQuestNodes);
                hash.Add(this.StoryManagerEventNodes);
                hash.Add(this.MusicTracks);
                hash.Add(this.DialogViews);
                hash.Add(this.EquipTypes);
                hash.Add(this.Relationships);
                hash.Add(this.AssociationTypes);
                hash.Add(this.Outfits);
                hash.Add(this.ArtObjects);
                hash.Add(this.MaterialObjects);
                hash.Add(this.MovementTypes);
                hash.Add(this.SoundDescriptors);
                hash.Add(this.SoundCategories);
                hash.Add(this.SoundOutputModels);
                hash.Add(this.CollisionLayers);
                hash.Add(this.Colors);
                hash.Add(this.ReverbParameters);
                hash.Add(this.PackIns);
                hash.Add(this.ReferenceGroups);
                hash.Add(this.AimModels);
                hash.Add(this.Layers);
                hash.Add(this.ConstructibleObjects);
                hash.Add(this.ObjectModifications);
                hash.Add(this.MaterialSwaps);
                hash.Add(this.Zooms);
                hash.Add(this.InstanceNamingRules);
                hash.Add(this.SoundKeywordMappings);
                hash.Add(this.AudioEffectChains);
                hash.Add(this.SceneCollections);
                hash.Add(this.AttractionRules);
                hash.Add(this.AudioCategorySnapshots);
                hash.Add(this.AnimationSoundTagSets);
                hash.Add(this.NavigationMeshObstacleManagers);
                hash.Add(this.LensFlares);
                hash.Add(this.GodRays);
                hash.Add(this.ObjectVisibilityManagers);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (!eval(this.ModHeader.Overall)) return false;
                    if (this.ModHeader.Specific != null && !this.ModHeader.Specific.All(eval)) return false;
                }
                if (GameSettings != null)
                {
                    if (!eval(this.GameSettings.Overall)) return false;
                    if (this.GameSettings.Specific != null && !this.GameSettings.Specific.All(eval)) return false;
                }
                if (Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null && !this.Keywords.Specific.All(eval)) return false;
                }
                if (LocationReferenceTypes != null)
                {
                    if (!eval(this.LocationReferenceTypes.Overall)) return false;
                    if (this.LocationReferenceTypes.Specific != null && !this.LocationReferenceTypes.Specific.All(eval)) return false;
                }
                if (Actions != null)
                {
                    if (!eval(this.Actions.Overall)) return false;
                    if (this.Actions.Specific != null && !this.Actions.Specific.All(eval)) return false;
                }
                if (Transforms != null)
                {
                    if (!eval(this.Transforms.Overall)) return false;
                    if (this.Transforms.Specific != null && !this.Transforms.Specific.All(eval)) return false;
                }
                if (Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null && !this.Components.Specific.All(eval)) return false;
                }
                if (TextureSets != null)
                {
                    if (!eval(this.TextureSets.Overall)) return false;
                    if (this.TextureSets.Specific != null && !this.TextureSets.Specific.All(eval)) return false;
                }
                if (Globals != null)
                {
                    if (!eval(this.Globals.Overall)) return false;
                    if (this.Globals.Specific != null && !this.Globals.Specific.All(eval)) return false;
                }
                if (DamageTypes != null)
                {
                    if (!eval(this.DamageTypes.Overall)) return false;
                    if (this.DamageTypes.Specific != null && !this.DamageTypes.Specific.All(eval)) return false;
                }
                if (Classes != null)
                {
                    if (!eval(this.Classes.Overall)) return false;
                    if (this.Classes.Specific != null && !this.Classes.Specific.All(eval)) return false;
                }
                if (Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null && !this.Factions.Specific.All(eval)) return false;
                }
                if (HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null && !this.HeadParts.Specific.All(eval)) return false;
                }
                if (Races != null)
                {
                    if (!eval(this.Races.Overall)) return false;
                    if (this.Races.Specific != null && !this.Races.Specific.All(eval)) return false;
                }
                if (SoundMarkers != null)
                {
                    if (!eval(this.SoundMarkers.Overall)) return false;
                    if (this.SoundMarkers.Specific != null && !this.SoundMarkers.Specific.All(eval)) return false;
                }
                if (AcousticSpaces != null)
                {
                    if (!eval(this.AcousticSpaces.Overall)) return false;
                    if (this.AcousticSpaces.Specific != null && !this.AcousticSpaces.Specific.All(eval)) return false;
                }
                if (MagicEffects != null)
                {
                    if (!eval(this.MagicEffects.Overall)) return false;
                    if (this.MagicEffects.Specific != null && !this.MagicEffects.Specific.All(eval)) return false;
                }
                if (LandscapeTextures != null)
                {
                    if (!eval(this.LandscapeTextures.Overall)) return false;
                    if (this.LandscapeTextures.Specific != null && !this.LandscapeTextures.Specific.All(eval)) return false;
                }
                if (ObjectEffects != null)
                {
                    if (!eval(this.ObjectEffects.Overall)) return false;
                    if (this.ObjectEffects.Specific != null && !this.ObjectEffects.Specific.All(eval)) return false;
                }
                if (Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null && !this.Spells.Specific.All(eval)) return false;
                }
                if (Activators != null)
                {
                    if (!eval(this.Activators.Overall)) return false;
                    if (this.Activators.Specific != null && !this.Activators.Specific.All(eval)) return false;
                }
                if (TalkingActivators != null)
                {
                    if (!eval(this.TalkingActivators.Overall)) return false;
                    if (this.TalkingActivators.Specific != null && !this.TalkingActivators.Specific.All(eval)) return false;
                }
                if (Armors != null)
                {
                    if (!eval(this.Armors.Overall)) return false;
                    if (this.Armors.Specific != null && !this.Armors.Specific.All(eval)) return false;
                }
                if (Books != null)
                {
                    if (!eval(this.Books.Overall)) return false;
                    if (this.Books.Specific != null && !this.Books.Specific.All(eval)) return false;
                }
                if (Containers != null)
                {
                    if (!eval(this.Containers.Overall)) return false;
                    if (this.Containers.Specific != null && !this.Containers.Specific.All(eval)) return false;
                }
                if (Doors != null)
                {
                    if (!eval(this.Doors.Overall)) return false;
                    if (this.Doors.Specific != null && !this.Doors.Specific.All(eval)) return false;
                }
                if (Ingredients != null)
                {
                    if (!eval(this.Ingredients.Overall)) return false;
                    if (this.Ingredients.Specific != null && !this.Ingredients.Specific.All(eval)) return false;
                }
                if (Lights != null)
                {
                    if (!eval(this.Lights.Overall)) return false;
                    if (this.Lights.Specific != null && !this.Lights.Specific.All(eval)) return false;
                }
                if (MiscItems != null)
                {
                    if (!eval(this.MiscItems.Overall)) return false;
                    if (this.MiscItems.Specific != null && !this.MiscItems.Specific.All(eval)) return false;
                }
                if (Statics != null)
                {
                    if (!eval(this.Statics.Overall)) return false;
                    if (this.Statics.Specific != null && !this.Statics.Specific.All(eval)) return false;
                }
                if (StaticCollections != null)
                {
                    if (!eval(this.StaticCollections.Overall)) return false;
                    if (this.StaticCollections.Specific != null && !this.StaticCollections.Specific.All(eval)) return false;
                }
                if (MovableStatics != null)
                {
                    if (!eval(this.MovableStatics.Overall)) return false;
                    if (this.MovableStatics.Specific != null && !this.MovableStatics.Specific.All(eval)) return false;
                }
                if (Grasses != null)
                {
                    if (!eval(this.Grasses.Overall)) return false;
                    if (this.Grasses.Specific != null && !this.Grasses.Specific.All(eval)) return false;
                }
                if (Trees != null)
                {
                    if (!eval(this.Trees.Overall)) return false;
                    if (this.Trees.Specific != null && !this.Trees.Specific.All(eval)) return false;
                }
                if (Florae != null)
                {
                    if (!eval(this.Florae.Overall)) return false;
                    if (this.Florae.Specific != null && !this.Florae.Specific.All(eval)) return false;
                }
                if (Furniture != null)
                {
                    if (!eval(this.Furniture.Overall)) return false;
                    if (this.Furniture.Specific != null && !this.Furniture.Specific.All(eval)) return false;
                }
                if (Weapons != null)
                {
                    if (!eval(this.Weapons.Overall)) return false;
                    if (this.Weapons.Specific != null && !this.Weapons.Specific.All(eval)) return false;
                }
                if (Ammunitions != null)
                {
                    if (!eval(this.Ammunitions.Overall)) return false;
                    if (this.Ammunitions.Specific != null && !this.Ammunitions.Specific.All(eval)) return false;
                }
                if (Npcs != null)
                {
                    if (!eval(this.Npcs.Overall)) return false;
                    if (this.Npcs.Specific != null && !this.Npcs.Specific.All(eval)) return false;
                }
                if (LeveledNpcs != null)
                {
                    if (!eval(this.LeveledNpcs.Overall)) return false;
                    if (this.LeveledNpcs.Specific != null && !this.LeveledNpcs.Specific.All(eval)) return false;
                }
                if (Keys != null)
                {
                    if (!eval(this.Keys.Overall)) return false;
                    if (this.Keys.Specific != null && !this.Keys.Specific.All(eval)) return false;
                }
                if (Ingestibles != null)
                {
                    if (!eval(this.Ingestibles.Overall)) return false;
                    if (this.Ingestibles.Specific != null && !this.Ingestibles.Specific.All(eval)) return false;
                }
                if (IdleMarkers != null)
                {
                    if (!eval(this.IdleMarkers.Overall)) return false;
                    if (this.IdleMarkers.Specific != null && !this.IdleMarkers.Specific.All(eval)) return false;
                }
                if (Holotapes != null)
                {
                    if (!eval(this.Holotapes.Overall)) return false;
                    if (this.Holotapes.Specific != null && !this.Holotapes.Specific.All(eval)) return false;
                }
                if (Projectiles != null)
                {
                    if (!eval(this.Projectiles.Overall)) return false;
                    if (this.Projectiles.Specific != null && !this.Projectiles.Specific.All(eval)) return false;
                }
                if (Hazards != null)
                {
                    if (!eval(this.Hazards.Overall)) return false;
                    if (this.Hazards.Specific != null && !this.Hazards.Specific.All(eval)) return false;
                }
                if (BendableSplines != null)
                {
                    if (!eval(this.BendableSplines.Overall)) return false;
                    if (this.BendableSplines.Specific != null && !this.BendableSplines.Specific.All(eval)) return false;
                }
                if (Terminals != null)
                {
                    if (!eval(this.Terminals.Overall)) return false;
                    if (this.Terminals.Specific != null && !this.Terminals.Specific.All(eval)) return false;
                }
                if (LeveledItems != null)
                {
                    if (!eval(this.LeveledItems.Overall)) return false;
                    if (this.LeveledItems.Specific != null && !this.LeveledItems.Specific.All(eval)) return false;
                }
                if (Weather != null)
                {
                    if (!eval(this.Weather.Overall)) return false;
                    if (this.Weather.Specific != null && !this.Weather.Specific.All(eval)) return false;
                }
                if (Climates != null)
                {
                    if (!eval(this.Climates.Overall)) return false;
                    if (this.Climates.Specific != null && !this.Climates.Specific.All(eval)) return false;
                }
                if (ShaderParticleGeometries != null)
                {
                    if (!eval(this.ShaderParticleGeometries.Overall)) return false;
                    if (this.ShaderParticleGeometries.Specific != null && !this.ShaderParticleGeometries.Specific.All(eval)) return false;
                }
                if (VisualEffects != null)
                {
                    if (!eval(this.VisualEffects.Overall)) return false;
                    if (this.VisualEffects.Specific != null && !this.VisualEffects.Specific.All(eval)) return false;
                }
                if (Regions != null)
                {
                    if (!eval(this.Regions.Overall)) return false;
                    if (this.Regions.Specific != null && !this.Regions.Specific.All(eval)) return false;
                }
                if (NavigationMeshInfoMaps != null)
                {
                    if (!eval(this.NavigationMeshInfoMaps.Overall)) return false;
                    if (this.NavigationMeshInfoMaps.Specific != null && !this.NavigationMeshInfoMaps.Specific.All(eval)) return false;
                }
                if (Cells != null)
                {
                    if (!eval(this.Cells.Overall)) return false;
                    if (this.Cells.Specific != null && !this.Cells.Specific.All(eval)) return false;
                }
                if (Worldspaces != null)
                {
                    if (!eval(this.Worldspaces.Overall)) return false;
                    if (this.Worldspaces.Specific != null && !this.Worldspaces.Specific.All(eval)) return false;
                }
                if (Quests != null)
                {
                    if (!eval(this.Quests.Overall)) return false;
                    if (this.Quests.Specific != null && !this.Quests.Specific.All(eval)) return false;
                }
                if (IdleAnimations != null)
                {
                    if (!eval(this.IdleAnimations.Overall)) return false;
                    if (this.IdleAnimations.Specific != null && !this.IdleAnimations.Specific.All(eval)) return false;
                }
                if (Packages != null)
                {
                    if (!eval(this.Packages.Overall)) return false;
                    if (this.Packages.Specific != null && !this.Packages.Specific.All(eval)) return false;
                }
                if (CombatStyles != null)
                {
                    if (!eval(this.CombatStyles.Overall)) return false;
                    if (this.CombatStyles.Specific != null && !this.CombatStyles.Specific.All(eval)) return false;
                }
                if (LoadScreens != null)
                {
                    if (!eval(this.LoadScreens.Overall)) return false;
                    if (this.LoadScreens.Specific != null && !this.LoadScreens.Specific.All(eval)) return false;
                }
                if (AnimatedObjects != null)
                {
                    if (!eval(this.AnimatedObjects.Overall)) return false;
                    if (this.AnimatedObjects.Specific != null && !this.AnimatedObjects.Specific.All(eval)) return false;
                }
                if (Waters != null)
                {
                    if (!eval(this.Waters.Overall)) return false;
                    if (this.Waters.Specific != null && !this.Waters.Specific.All(eval)) return false;
                }
                if (EffectShaders != null)
                {
                    if (!eval(this.EffectShaders.Overall)) return false;
                    if (this.EffectShaders.Specific != null && !this.EffectShaders.Specific.All(eval)) return false;
                }
                if (Explosions != null)
                {
                    if (!eval(this.Explosions.Overall)) return false;
                    if (this.Explosions.Specific != null && !this.Explosions.Specific.All(eval)) return false;
                }
                if (Debris != null)
                {
                    if (!eval(this.Debris.Overall)) return false;
                    if (this.Debris.Specific != null && !this.Debris.Specific.All(eval)) return false;
                }
                if (ImageSpaces != null)
                {
                    if (!eval(this.ImageSpaces.Overall)) return false;
                    if (this.ImageSpaces.Specific != null && !this.ImageSpaces.Specific.All(eval)) return false;
                }
                if (ImageSpaceAdapters != null)
                {
                    if (!eval(this.ImageSpaceAdapters.Overall)) return false;
                    if (this.ImageSpaceAdapters.Specific != null && !this.ImageSpaceAdapters.Specific.All(eval)) return false;
                }
                if (FormLists != null)
                {
                    if (!eval(this.FormLists.Overall)) return false;
                    if (this.FormLists.Specific != null && !this.FormLists.Specific.All(eval)) return false;
                }
                if (Perks != null)
                {
                    if (!eval(this.Perks.Overall)) return false;
                    if (this.Perks.Specific != null && !this.Perks.Specific.All(eval)) return false;
                }
                if (BodyParts != null)
                {
                    if (!eval(this.BodyParts.Overall)) return false;
                    if (this.BodyParts.Specific != null && !this.BodyParts.Specific.All(eval)) return false;
                }
                if (AddonNodes != null)
                {
                    if (!eval(this.AddonNodes.Overall)) return false;
                    if (this.AddonNodes.Specific != null && !this.AddonNodes.Specific.All(eval)) return false;
                }
                if (ActorValueInformation != null)
                {
                    if (!eval(this.ActorValueInformation.Overall)) return false;
                    if (this.ActorValueInformation.Specific != null && !this.ActorValueInformation.Specific.All(eval)) return false;
                }
                if (CameraShots != null)
                {
                    if (!eval(this.CameraShots.Overall)) return false;
                    if (this.CameraShots.Specific != null && !this.CameraShots.Specific.All(eval)) return false;
                }
                if (CameraPaths != null)
                {
                    if (!eval(this.CameraPaths.Overall)) return false;
                    if (this.CameraPaths.Specific != null && !this.CameraPaths.Specific.All(eval)) return false;
                }
                if (VoiceTypes != null)
                {
                    if (!eval(this.VoiceTypes.Overall)) return false;
                    if (this.VoiceTypes.Specific != null && !this.VoiceTypes.Specific.All(eval)) return false;
                }
                if (MaterialTypes != null)
                {
                    if (!eval(this.MaterialTypes.Overall)) return false;
                    if (this.MaterialTypes.Specific != null && !this.MaterialTypes.Specific.All(eval)) return false;
                }
                if (Impacts != null)
                {
                    if (!eval(this.Impacts.Overall)) return false;
                    if (this.Impacts.Specific != null && !this.Impacts.Specific.All(eval)) return false;
                }
                if (ImpactDataSets != null)
                {
                    if (!eval(this.ImpactDataSets.Overall)) return false;
                    if (this.ImpactDataSets.Specific != null && !this.ImpactDataSets.Specific.All(eval)) return false;
                }
                if (ArmorAddons != null)
                {
                    if (!eval(this.ArmorAddons.Overall)) return false;
                    if (this.ArmorAddons.Specific != null && !this.ArmorAddons.Specific.All(eval)) return false;
                }
                if (EncounterZones != null)
                {
                    if (!eval(this.EncounterZones.Overall)) return false;
                    if (this.EncounterZones.Specific != null && !this.EncounterZones.Specific.All(eval)) return false;
                }
                if (Locations != null)
                {
                    if (!eval(this.Locations.Overall)) return false;
                    if (this.Locations.Specific != null && !this.Locations.Specific.All(eval)) return false;
                }
                if (Messages != null)
                {
                    if (!eval(this.Messages.Overall)) return false;
                    if (this.Messages.Specific != null && !this.Messages.Specific.All(eval)) return false;
                }
                if (DefaultObjectManagers != null)
                {
                    if (!eval(this.DefaultObjectManagers.Overall)) return false;
                    if (this.DefaultObjectManagers.Specific != null && !this.DefaultObjectManagers.Specific.All(eval)) return false;
                }
                if (DefaultObjects != null)
                {
                    if (!eval(this.DefaultObjects.Overall)) return false;
                    if (this.DefaultObjects.Specific != null && !this.DefaultObjects.Specific.All(eval)) return false;
                }
                if (LightingTemplates != null)
                {
                    if (!eval(this.LightingTemplates.Overall)) return false;
                    if (this.LightingTemplates.Specific != null && !this.LightingTemplates.Specific.All(eval)) return false;
                }
                if (MusicTypes != null)
                {
                    if (!eval(this.MusicTypes.Overall)) return false;
                    if (this.MusicTypes.Specific != null && !this.MusicTypes.Specific.All(eval)) return false;
                }
                if (Footsteps != null)
                {
                    if (!eval(this.Footsteps.Overall)) return false;
                    if (this.Footsteps.Specific != null && !this.Footsteps.Specific.All(eval)) return false;
                }
                if (FootstepSets != null)
                {
                    if (!eval(this.FootstepSets.Overall)) return false;
                    if (this.FootstepSets.Specific != null && !this.FootstepSets.Specific.All(eval)) return false;
                }
                if (StoryManagerBranchNodes != null)
                {
                    if (!eval(this.StoryManagerBranchNodes.Overall)) return false;
                    if (this.StoryManagerBranchNodes.Specific != null && !this.StoryManagerBranchNodes.Specific.All(eval)) return false;
                }
                if (StoryManagerQuestNodes != null)
                {
                    if (!eval(this.StoryManagerQuestNodes.Overall)) return false;
                    if (this.StoryManagerQuestNodes.Specific != null && !this.StoryManagerQuestNodes.Specific.All(eval)) return false;
                }
                if (StoryManagerEventNodes != null)
                {
                    if (!eval(this.StoryManagerEventNodes.Overall)) return false;
                    if (this.StoryManagerEventNodes.Specific != null && !this.StoryManagerEventNodes.Specific.All(eval)) return false;
                }
                if (MusicTracks != null)
                {
                    if (!eval(this.MusicTracks.Overall)) return false;
                    if (this.MusicTracks.Specific != null && !this.MusicTracks.Specific.All(eval)) return false;
                }
                if (DialogViews != null)
                {
                    if (!eval(this.DialogViews.Overall)) return false;
                    if (this.DialogViews.Specific != null && !this.DialogViews.Specific.All(eval)) return false;
                }
                if (EquipTypes != null)
                {
                    if (!eval(this.EquipTypes.Overall)) return false;
                    if (this.EquipTypes.Specific != null && !this.EquipTypes.Specific.All(eval)) return false;
                }
                if (Relationships != null)
                {
                    if (!eval(this.Relationships.Overall)) return false;
                    if (this.Relationships.Specific != null && !this.Relationships.Specific.All(eval)) return false;
                }
                if (AssociationTypes != null)
                {
                    if (!eval(this.AssociationTypes.Overall)) return false;
                    if (this.AssociationTypes.Specific != null && !this.AssociationTypes.Specific.All(eval)) return false;
                }
                if (Outfits != null)
                {
                    if (!eval(this.Outfits.Overall)) return false;
                    if (this.Outfits.Specific != null && !this.Outfits.Specific.All(eval)) return false;
                }
                if (ArtObjects != null)
                {
                    if (!eval(this.ArtObjects.Overall)) return false;
                    if (this.ArtObjects.Specific != null && !this.ArtObjects.Specific.All(eval)) return false;
                }
                if (MaterialObjects != null)
                {
                    if (!eval(this.MaterialObjects.Overall)) return false;
                    if (this.MaterialObjects.Specific != null && !this.MaterialObjects.Specific.All(eval)) return false;
                }
                if (MovementTypes != null)
                {
                    if (!eval(this.MovementTypes.Overall)) return false;
                    if (this.MovementTypes.Specific != null && !this.MovementTypes.Specific.All(eval)) return false;
                }
                if (SoundDescriptors != null)
                {
                    if (!eval(this.SoundDescriptors.Overall)) return false;
                    if (this.SoundDescriptors.Specific != null && !this.SoundDescriptors.Specific.All(eval)) return false;
                }
                if (SoundCategories != null)
                {
                    if (!eval(this.SoundCategories.Overall)) return false;
                    if (this.SoundCategories.Specific != null && !this.SoundCategories.Specific.All(eval)) return false;
                }
                if (SoundOutputModels != null)
                {
                    if (!eval(this.SoundOutputModels.Overall)) return false;
                    if (this.SoundOutputModels.Specific != null && !this.SoundOutputModels.Specific.All(eval)) return false;
                }
                if (CollisionLayers != null)
                {
                    if (!eval(this.CollisionLayers.Overall)) return false;
                    if (this.CollisionLayers.Specific != null && !this.CollisionLayers.Specific.All(eval)) return false;
                }
                if (Colors != null)
                {
                    if (!eval(this.Colors.Overall)) return false;
                    if (this.Colors.Specific != null && !this.Colors.Specific.All(eval)) return false;
                }
                if (ReverbParameters != null)
                {
                    if (!eval(this.ReverbParameters.Overall)) return false;
                    if (this.ReverbParameters.Specific != null && !this.ReverbParameters.Specific.All(eval)) return false;
                }
                if (PackIns != null)
                {
                    if (!eval(this.PackIns.Overall)) return false;
                    if (this.PackIns.Specific != null && !this.PackIns.Specific.All(eval)) return false;
                }
                if (ReferenceGroups != null)
                {
                    if (!eval(this.ReferenceGroups.Overall)) return false;
                    if (this.ReferenceGroups.Specific != null && !this.ReferenceGroups.Specific.All(eval)) return false;
                }
                if (AimModels != null)
                {
                    if (!eval(this.AimModels.Overall)) return false;
                    if (this.AimModels.Specific != null && !this.AimModels.Specific.All(eval)) return false;
                }
                if (Layers != null)
                {
                    if (!eval(this.Layers.Overall)) return false;
                    if (this.Layers.Specific != null && !this.Layers.Specific.All(eval)) return false;
                }
                if (ConstructibleObjects != null)
                {
                    if (!eval(this.ConstructibleObjects.Overall)) return false;
                    if (this.ConstructibleObjects.Specific != null && !this.ConstructibleObjects.Specific.All(eval)) return false;
                }
                if (ObjectModifications != null)
                {
                    if (!eval(this.ObjectModifications.Overall)) return false;
                    if (this.ObjectModifications.Specific != null && !this.ObjectModifications.Specific.All(eval)) return false;
                }
                if (MaterialSwaps != null)
                {
                    if (!eval(this.MaterialSwaps.Overall)) return false;
                    if (this.MaterialSwaps.Specific != null && !this.MaterialSwaps.Specific.All(eval)) return false;
                }
                if (Zooms != null)
                {
                    if (!eval(this.Zooms.Overall)) return false;
                    if (this.Zooms.Specific != null && !this.Zooms.Specific.All(eval)) return false;
                }
                if (InstanceNamingRules != null)
                {
                    if (!eval(this.InstanceNamingRules.Overall)) return false;
                    if (this.InstanceNamingRules.Specific != null && !this.InstanceNamingRules.Specific.All(eval)) return false;
                }
                if (SoundKeywordMappings != null)
                {
                    if (!eval(this.SoundKeywordMappings.Overall)) return false;
                    if (this.SoundKeywordMappings.Specific != null && !this.SoundKeywordMappings.Specific.All(eval)) return false;
                }
                if (AudioEffectChains != null)
                {
                    if (!eval(this.AudioEffectChains.Overall)) return false;
                    if (this.AudioEffectChains.Specific != null && !this.AudioEffectChains.Specific.All(eval)) return false;
                }
                if (SceneCollections != null)
                {
                    if (!eval(this.SceneCollections.Overall)) return false;
                    if (this.SceneCollections.Specific != null && !this.SceneCollections.Specific.All(eval)) return false;
                }
                if (AttractionRules != null)
                {
                    if (!eval(this.AttractionRules.Overall)) return false;
                    if (this.AttractionRules.Specific != null && !this.AttractionRules.Specific.All(eval)) return false;
                }
                if (AudioCategorySnapshots != null)
                {
                    if (!eval(this.AudioCategorySnapshots.Overall)) return false;
                    if (this.AudioCategorySnapshots.Specific != null && !this.AudioCategorySnapshots.Specific.All(eval)) return false;
                }
                if (AnimationSoundTagSets != null)
                {
                    if (!eval(this.AnimationSoundTagSets.Overall)) return false;
                    if (this.AnimationSoundTagSets.Specific != null && !this.AnimationSoundTagSets.Specific.All(eval)) return false;
                }
                if (NavigationMeshObstacleManagers != null)
                {
                    if (!eval(this.NavigationMeshObstacleManagers.Overall)) return false;
                    if (this.NavigationMeshObstacleManagers.Specific != null && !this.NavigationMeshObstacleManagers.Specific.All(eval)) return false;
                }
                if (LensFlares != null)
                {
                    if (!eval(this.LensFlares.Overall)) return false;
                    if (this.LensFlares.Specific != null && !this.LensFlares.Specific.All(eval)) return false;
                }
                if (GodRays != null)
                {
                    if (!eval(this.GodRays.Overall)) return false;
                    if (this.GodRays.Specific != null && !this.GodRays.Specific.All(eval)) return false;
                }
                if (ObjectVisibilityManagers != null)
                {
                    if (!eval(this.ObjectVisibilityManagers.Overall)) return false;
                    if (this.ObjectVisibilityManagers.Specific != null && !this.ObjectVisibilityManagers.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (eval(this.ModHeader.Overall)) return true;
                    if (this.ModHeader.Specific != null && this.ModHeader.Specific.Any(eval)) return true;
                }
                if (GameSettings != null)
                {
                    if (eval(this.GameSettings.Overall)) return true;
                    if (this.GameSettings.Specific != null && this.GameSettings.Specific.Any(eval)) return true;
                }
                if (Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null && this.Keywords.Specific.Any(eval)) return true;
                }
                if (LocationReferenceTypes != null)
                {
                    if (eval(this.LocationReferenceTypes.Overall)) return true;
                    if (this.LocationReferenceTypes.Specific != null && this.LocationReferenceTypes.Specific.Any(eval)) return true;
                }
                if (Actions != null)
                {
                    if (eval(this.Actions.Overall)) return true;
                    if (this.Actions.Specific != null && this.Actions.Specific.Any(eval)) return true;
                }
                if (Transforms != null)
                {
                    if (eval(this.Transforms.Overall)) return true;
                    if (this.Transforms.Specific != null && this.Transforms.Specific.Any(eval)) return true;
                }
                if (Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null && this.Components.Specific.Any(eval)) return true;
                }
                if (TextureSets != null)
                {
                    if (eval(this.TextureSets.Overall)) return true;
                    if (this.TextureSets.Specific != null && this.TextureSets.Specific.Any(eval)) return true;
                }
                if (Globals != null)
                {
                    if (eval(this.Globals.Overall)) return true;
                    if (this.Globals.Specific != null && this.Globals.Specific.Any(eval)) return true;
                }
                if (DamageTypes != null)
                {
                    if (eval(this.DamageTypes.Overall)) return true;
                    if (this.DamageTypes.Specific != null && this.DamageTypes.Specific.Any(eval)) return true;
                }
                if (Classes != null)
                {
                    if (eval(this.Classes.Overall)) return true;
                    if (this.Classes.Specific != null && this.Classes.Specific.Any(eval)) return true;
                }
                if (Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null && this.Factions.Specific.Any(eval)) return true;
                }
                if (HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null && this.HeadParts.Specific.Any(eval)) return true;
                }
                if (Races != null)
                {
                    if (eval(this.Races.Overall)) return true;
                    if (this.Races.Specific != null && this.Races.Specific.Any(eval)) return true;
                }
                if (SoundMarkers != null)
                {
                    if (eval(this.SoundMarkers.Overall)) return true;
                    if (this.SoundMarkers.Specific != null && this.SoundMarkers.Specific.Any(eval)) return true;
                }
                if (AcousticSpaces != null)
                {
                    if (eval(this.AcousticSpaces.Overall)) return true;
                    if (this.AcousticSpaces.Specific != null && this.AcousticSpaces.Specific.Any(eval)) return true;
                }
                if (MagicEffects != null)
                {
                    if (eval(this.MagicEffects.Overall)) return true;
                    if (this.MagicEffects.Specific != null && this.MagicEffects.Specific.Any(eval)) return true;
                }
                if (LandscapeTextures != null)
                {
                    if (eval(this.LandscapeTextures.Overall)) return true;
                    if (this.LandscapeTextures.Specific != null && this.LandscapeTextures.Specific.Any(eval)) return true;
                }
                if (ObjectEffects != null)
                {
                    if (eval(this.ObjectEffects.Overall)) return true;
                    if (this.ObjectEffects.Specific != null && this.ObjectEffects.Specific.Any(eval)) return true;
                }
                if (Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null && this.Spells.Specific.Any(eval)) return true;
                }
                if (Activators != null)
                {
                    if (eval(this.Activators.Overall)) return true;
                    if (this.Activators.Specific != null && this.Activators.Specific.Any(eval)) return true;
                }
                if (TalkingActivators != null)
                {
                    if (eval(this.TalkingActivators.Overall)) return true;
                    if (this.TalkingActivators.Specific != null && this.TalkingActivators.Specific.Any(eval)) return true;
                }
                if (Armors != null)
                {
                    if (eval(this.Armors.Overall)) return true;
                    if (this.Armors.Specific != null && this.Armors.Specific.Any(eval)) return true;
                }
                if (Books != null)
                {
                    if (eval(this.Books.Overall)) return true;
                    if (this.Books.Specific != null && this.Books.Specific.Any(eval)) return true;
                }
                if (Containers != null)
                {
                    if (eval(this.Containers.Overall)) return true;
                    if (this.Containers.Specific != null && this.Containers.Specific.Any(eval)) return true;
                }
                if (Doors != null)
                {
                    if (eval(this.Doors.Overall)) return true;
                    if (this.Doors.Specific != null && this.Doors.Specific.Any(eval)) return true;
                }
                if (Ingredients != null)
                {
                    if (eval(this.Ingredients.Overall)) return true;
                    if (this.Ingredients.Specific != null && this.Ingredients.Specific.Any(eval)) return true;
                }
                if (Lights != null)
                {
                    if (eval(this.Lights.Overall)) return true;
                    if (this.Lights.Specific != null && this.Lights.Specific.Any(eval)) return true;
                }
                if (MiscItems != null)
                {
                    if (eval(this.MiscItems.Overall)) return true;
                    if (this.MiscItems.Specific != null && this.MiscItems.Specific.Any(eval)) return true;
                }
                if (Statics != null)
                {
                    if (eval(this.Statics.Overall)) return true;
                    if (this.Statics.Specific != null && this.Statics.Specific.Any(eval)) return true;
                }
                if (StaticCollections != null)
                {
                    if (eval(this.StaticCollections.Overall)) return true;
                    if (this.StaticCollections.Specific != null && this.StaticCollections.Specific.Any(eval)) return true;
                }
                if (MovableStatics != null)
                {
                    if (eval(this.MovableStatics.Overall)) return true;
                    if (this.MovableStatics.Specific != null && this.MovableStatics.Specific.Any(eval)) return true;
                }
                if (Grasses != null)
                {
                    if (eval(this.Grasses.Overall)) return true;
                    if (this.Grasses.Specific != null && this.Grasses.Specific.Any(eval)) return true;
                }
                if (Trees != null)
                {
                    if (eval(this.Trees.Overall)) return true;
                    if (this.Trees.Specific != null && this.Trees.Specific.Any(eval)) return true;
                }
                if (Florae != null)
                {
                    if (eval(this.Florae.Overall)) return true;
                    if (this.Florae.Specific != null && this.Florae.Specific.Any(eval)) return true;
                }
                if (Furniture != null)
                {
                    if (eval(this.Furniture.Overall)) return true;
                    if (this.Furniture.Specific != null && this.Furniture.Specific.Any(eval)) return true;
                }
                if (Weapons != null)
                {
                    if (eval(this.Weapons.Overall)) return true;
                    if (this.Weapons.Specific != null && this.Weapons.Specific.Any(eval)) return true;
                }
                if (Ammunitions != null)
                {
                    if (eval(this.Ammunitions.Overall)) return true;
                    if (this.Ammunitions.Specific != null && this.Ammunitions.Specific.Any(eval)) return true;
                }
                if (Npcs != null)
                {
                    if (eval(this.Npcs.Overall)) return true;
                    if (this.Npcs.Specific != null && this.Npcs.Specific.Any(eval)) return true;
                }
                if (LeveledNpcs != null)
                {
                    if (eval(this.LeveledNpcs.Overall)) return true;
                    if (this.LeveledNpcs.Specific != null && this.LeveledNpcs.Specific.Any(eval)) return true;
                }
                if (Keys != null)
                {
                    if (eval(this.Keys.Overall)) return true;
                    if (this.Keys.Specific != null && this.Keys.Specific.Any(eval)) return true;
                }
                if (Ingestibles != null)
                {
                    if (eval(this.Ingestibles.Overall)) return true;
                    if (this.Ingestibles.Specific != null && this.Ingestibles.Specific.Any(eval)) return true;
                }
                if (IdleMarkers != null)
                {
                    if (eval(this.IdleMarkers.Overall)) return true;
                    if (this.IdleMarkers.Specific != null && this.IdleMarkers.Specific.Any(eval)) return true;
                }
                if (Holotapes != null)
                {
                    if (eval(this.Holotapes.Overall)) return true;
                    if (this.Holotapes.Specific != null && this.Holotapes.Specific.Any(eval)) return true;
                }
                if (Projectiles != null)
                {
                    if (eval(this.Projectiles.Overall)) return true;
                    if (this.Projectiles.Specific != null && this.Projectiles.Specific.Any(eval)) return true;
                }
                if (Hazards != null)
                {
                    if (eval(this.Hazards.Overall)) return true;
                    if (this.Hazards.Specific != null && this.Hazards.Specific.Any(eval)) return true;
                }
                if (BendableSplines != null)
                {
                    if (eval(this.BendableSplines.Overall)) return true;
                    if (this.BendableSplines.Specific != null && this.BendableSplines.Specific.Any(eval)) return true;
                }
                if (Terminals != null)
                {
                    if (eval(this.Terminals.Overall)) return true;
                    if (this.Terminals.Specific != null && this.Terminals.Specific.Any(eval)) return true;
                }
                if (LeveledItems != null)
                {
                    if (eval(this.LeveledItems.Overall)) return true;
                    if (this.LeveledItems.Specific != null && this.LeveledItems.Specific.Any(eval)) return true;
                }
                if (Weather != null)
                {
                    if (eval(this.Weather.Overall)) return true;
                    if (this.Weather.Specific != null && this.Weather.Specific.Any(eval)) return true;
                }
                if (Climates != null)
                {
                    if (eval(this.Climates.Overall)) return true;
                    if (this.Climates.Specific != null && this.Climates.Specific.Any(eval)) return true;
                }
                if (ShaderParticleGeometries != null)
                {
                    if (eval(this.ShaderParticleGeometries.Overall)) return true;
                    if (this.ShaderParticleGeometries.Specific != null && this.ShaderParticleGeometries.Specific.Any(eval)) return true;
                }
                if (VisualEffects != null)
                {
                    if (eval(this.VisualEffects.Overall)) return true;
                    if (this.VisualEffects.Specific != null && this.VisualEffects.Specific.Any(eval)) return true;
                }
                if (Regions != null)
                {
                    if (eval(this.Regions.Overall)) return true;
                    if (this.Regions.Specific != null && this.Regions.Specific.Any(eval)) return true;
                }
                if (NavigationMeshInfoMaps != null)
                {
                    if (eval(this.NavigationMeshInfoMaps.Overall)) return true;
                    if (this.NavigationMeshInfoMaps.Specific != null && this.NavigationMeshInfoMaps.Specific.Any(eval)) return true;
                }
                if (Cells != null)
                {
                    if (eval(this.Cells.Overall)) return true;
                    if (this.Cells.Specific != null && this.Cells.Specific.Any(eval)) return true;
                }
                if (Worldspaces != null)
                {
                    if (eval(this.Worldspaces.Overall)) return true;
                    if (this.Worldspaces.Specific != null && this.Worldspaces.Specific.Any(eval)) return true;
                }
                if (Quests != null)
                {
                    if (eval(this.Quests.Overall)) return true;
                    if (this.Quests.Specific != null && this.Quests.Specific.Any(eval)) return true;
                }
                if (IdleAnimations != null)
                {
                    if (eval(this.IdleAnimations.Overall)) return true;
                    if (this.IdleAnimations.Specific != null && this.IdleAnimations.Specific.Any(eval)) return true;
                }
                if (Packages != null)
                {
                    if (eval(this.Packages.Overall)) return true;
                    if (this.Packages.Specific != null && this.Packages.Specific.Any(eval)) return true;
                }
                if (CombatStyles != null)
                {
                    if (eval(this.CombatStyles.Overall)) return true;
                    if (this.CombatStyles.Specific != null && this.CombatStyles.Specific.Any(eval)) return true;
                }
                if (LoadScreens != null)
                {
                    if (eval(this.LoadScreens.Overall)) return true;
                    if (this.LoadScreens.Specific != null && this.LoadScreens.Specific.Any(eval)) return true;
                }
                if (AnimatedObjects != null)
                {
                    if (eval(this.AnimatedObjects.Overall)) return true;
                    if (this.AnimatedObjects.Specific != null && this.AnimatedObjects.Specific.Any(eval)) return true;
                }
                if (Waters != null)
                {
                    if (eval(this.Waters.Overall)) return true;
                    if (this.Waters.Specific != null && this.Waters.Specific.Any(eval)) return true;
                }
                if (EffectShaders != null)
                {
                    if (eval(this.EffectShaders.Overall)) return true;
                    if (this.EffectShaders.Specific != null && this.EffectShaders.Specific.Any(eval)) return true;
                }
                if (Explosions != null)
                {
                    if (eval(this.Explosions.Overall)) return true;
                    if (this.Explosions.Specific != null && this.Explosions.Specific.Any(eval)) return true;
                }
                if (Debris != null)
                {
                    if (eval(this.Debris.Overall)) return true;
                    if (this.Debris.Specific != null && this.Debris.Specific.Any(eval)) return true;
                }
                if (ImageSpaces != null)
                {
                    if (eval(this.ImageSpaces.Overall)) return true;
                    if (this.ImageSpaces.Specific != null && this.ImageSpaces.Specific.Any(eval)) return true;
                }
                if (ImageSpaceAdapters != null)
                {
                    if (eval(this.ImageSpaceAdapters.Overall)) return true;
                    if (this.ImageSpaceAdapters.Specific != null && this.ImageSpaceAdapters.Specific.Any(eval)) return true;
                }
                if (FormLists != null)
                {
                    if (eval(this.FormLists.Overall)) return true;
                    if (this.FormLists.Specific != null && this.FormLists.Specific.Any(eval)) return true;
                }
                if (Perks != null)
                {
                    if (eval(this.Perks.Overall)) return true;
                    if (this.Perks.Specific != null && this.Perks.Specific.Any(eval)) return true;
                }
                if (BodyParts != null)
                {
                    if (eval(this.BodyParts.Overall)) return true;
                    if (this.BodyParts.Specific != null && this.BodyParts.Specific.Any(eval)) return true;
                }
                if (AddonNodes != null)
                {
                    if (eval(this.AddonNodes.Overall)) return true;
                    if (this.AddonNodes.Specific != null && this.AddonNodes.Specific.Any(eval)) return true;
                }
                if (ActorValueInformation != null)
                {
                    if (eval(this.ActorValueInformation.Overall)) return true;
                    if (this.ActorValueInformation.Specific != null && this.ActorValueInformation.Specific.Any(eval)) return true;
                }
                if (CameraShots != null)
                {
                    if (eval(this.CameraShots.Overall)) return true;
                    if (this.CameraShots.Specific != null && this.CameraShots.Specific.Any(eval)) return true;
                }
                if (CameraPaths != null)
                {
                    if (eval(this.CameraPaths.Overall)) return true;
                    if (this.CameraPaths.Specific != null && this.CameraPaths.Specific.Any(eval)) return true;
                }
                if (VoiceTypes != null)
                {
                    if (eval(this.VoiceTypes.Overall)) return true;
                    if (this.VoiceTypes.Specific != null && this.VoiceTypes.Specific.Any(eval)) return true;
                }
                if (MaterialTypes != null)
                {
                    if (eval(this.MaterialTypes.Overall)) return true;
                    if (this.MaterialTypes.Specific != null && this.MaterialTypes.Specific.Any(eval)) return true;
                }
                if (Impacts != null)
                {
                    if (eval(this.Impacts.Overall)) return true;
                    if (this.Impacts.Specific != null && this.Impacts.Specific.Any(eval)) return true;
                }
                if (ImpactDataSets != null)
                {
                    if (eval(this.ImpactDataSets.Overall)) return true;
                    if (this.ImpactDataSets.Specific != null && this.ImpactDataSets.Specific.Any(eval)) return true;
                }
                if (ArmorAddons != null)
                {
                    if (eval(this.ArmorAddons.Overall)) return true;
                    if (this.ArmorAddons.Specific != null && this.ArmorAddons.Specific.Any(eval)) return true;
                }
                if (EncounterZones != null)
                {
                    if (eval(this.EncounterZones.Overall)) return true;
                    if (this.EncounterZones.Specific != null && this.EncounterZones.Specific.Any(eval)) return true;
                }
                if (Locations != null)
                {
                    if (eval(this.Locations.Overall)) return true;
                    if (this.Locations.Specific != null && this.Locations.Specific.Any(eval)) return true;
                }
                if (Messages != null)
                {
                    if (eval(this.Messages.Overall)) return true;
                    if (this.Messages.Specific != null && this.Messages.Specific.Any(eval)) return true;
                }
                if (DefaultObjectManagers != null)
                {
                    if (eval(this.DefaultObjectManagers.Overall)) return true;
                    if (this.DefaultObjectManagers.Specific != null && this.DefaultObjectManagers.Specific.Any(eval)) return true;
                }
                if (DefaultObjects != null)
                {
                    if (eval(this.DefaultObjects.Overall)) return true;
                    if (this.DefaultObjects.Specific != null && this.DefaultObjects.Specific.Any(eval)) return true;
                }
                if (LightingTemplates != null)
                {
                    if (eval(this.LightingTemplates.Overall)) return true;
                    if (this.LightingTemplates.Specific != null && this.LightingTemplates.Specific.Any(eval)) return true;
                }
                if (MusicTypes != null)
                {
                    if (eval(this.MusicTypes.Overall)) return true;
                    if (this.MusicTypes.Specific != null && this.MusicTypes.Specific.Any(eval)) return true;
                }
                if (Footsteps != null)
                {
                    if (eval(this.Footsteps.Overall)) return true;
                    if (this.Footsteps.Specific != null && this.Footsteps.Specific.Any(eval)) return true;
                }
                if (FootstepSets != null)
                {
                    if (eval(this.FootstepSets.Overall)) return true;
                    if (this.FootstepSets.Specific != null && this.FootstepSets.Specific.Any(eval)) return true;
                }
                if (StoryManagerBranchNodes != null)
                {
                    if (eval(this.StoryManagerBranchNodes.Overall)) return true;
                    if (this.StoryManagerBranchNodes.Specific != null && this.StoryManagerBranchNodes.Specific.Any(eval)) return true;
                }
                if (StoryManagerQuestNodes != null)
                {
                    if (eval(this.StoryManagerQuestNodes.Overall)) return true;
                    if (this.StoryManagerQuestNodes.Specific != null && this.StoryManagerQuestNodes.Specific.Any(eval)) return true;
                }
                if (StoryManagerEventNodes != null)
                {
                    if (eval(this.StoryManagerEventNodes.Overall)) return true;
                    if (this.StoryManagerEventNodes.Specific != null && this.StoryManagerEventNodes.Specific.Any(eval)) return true;
                }
                if (MusicTracks != null)
                {
                    if (eval(this.MusicTracks.Overall)) return true;
                    if (this.MusicTracks.Specific != null && this.MusicTracks.Specific.Any(eval)) return true;
                }
                if (DialogViews != null)
                {
                    if (eval(this.DialogViews.Overall)) return true;
                    if (this.DialogViews.Specific != null && this.DialogViews.Specific.Any(eval)) return true;
                }
                if (EquipTypes != null)
                {
                    if (eval(this.EquipTypes.Overall)) return true;
                    if (this.EquipTypes.Specific != null && this.EquipTypes.Specific.Any(eval)) return true;
                }
                if (Relationships != null)
                {
                    if (eval(this.Relationships.Overall)) return true;
                    if (this.Relationships.Specific != null && this.Relationships.Specific.Any(eval)) return true;
                }
                if (AssociationTypes != null)
                {
                    if (eval(this.AssociationTypes.Overall)) return true;
                    if (this.AssociationTypes.Specific != null && this.AssociationTypes.Specific.Any(eval)) return true;
                }
                if (Outfits != null)
                {
                    if (eval(this.Outfits.Overall)) return true;
                    if (this.Outfits.Specific != null && this.Outfits.Specific.Any(eval)) return true;
                }
                if (ArtObjects != null)
                {
                    if (eval(this.ArtObjects.Overall)) return true;
                    if (this.ArtObjects.Specific != null && this.ArtObjects.Specific.Any(eval)) return true;
                }
                if (MaterialObjects != null)
                {
                    if (eval(this.MaterialObjects.Overall)) return true;
                    if (this.MaterialObjects.Specific != null && this.MaterialObjects.Specific.Any(eval)) return true;
                }
                if (MovementTypes != null)
                {
                    if (eval(this.MovementTypes.Overall)) return true;
                    if (this.MovementTypes.Specific != null && this.MovementTypes.Specific.Any(eval)) return true;
                }
                if (SoundDescriptors != null)
                {
                    if (eval(this.SoundDescriptors.Overall)) return true;
                    if (this.SoundDescriptors.Specific != null && this.SoundDescriptors.Specific.Any(eval)) return true;
                }
                if (SoundCategories != null)
                {
                    if (eval(this.SoundCategories.Overall)) return true;
                    if (this.SoundCategories.Specific != null && this.SoundCategories.Specific.Any(eval)) return true;
                }
                if (SoundOutputModels != null)
                {
                    if (eval(this.SoundOutputModels.Overall)) return true;
                    if (this.SoundOutputModels.Specific != null && this.SoundOutputModels.Specific.Any(eval)) return true;
                }
                if (CollisionLayers != null)
                {
                    if (eval(this.CollisionLayers.Overall)) return true;
                    if (this.CollisionLayers.Specific != null && this.CollisionLayers.Specific.Any(eval)) return true;
                }
                if (Colors != null)
                {
                    if (eval(this.Colors.Overall)) return true;
                    if (this.Colors.Specific != null && this.Colors.Specific.Any(eval)) return true;
                }
                if (ReverbParameters != null)
                {
                    if (eval(this.ReverbParameters.Overall)) return true;
                    if (this.ReverbParameters.Specific != null && this.ReverbParameters.Specific.Any(eval)) return true;
                }
                if (PackIns != null)
                {
                    if (eval(this.PackIns.Overall)) return true;
                    if (this.PackIns.Specific != null && this.PackIns.Specific.Any(eval)) return true;
                }
                if (ReferenceGroups != null)
                {
                    if (eval(this.ReferenceGroups.Overall)) return true;
                    if (this.ReferenceGroups.Specific != null && this.ReferenceGroups.Specific.Any(eval)) return true;
                }
                if (AimModels != null)
                {
                    if (eval(this.AimModels.Overall)) return true;
                    if (this.AimModels.Specific != null && this.AimModels.Specific.Any(eval)) return true;
                }
                if (Layers != null)
                {
                    if (eval(this.Layers.Overall)) return true;
                    if (this.Layers.Specific != null && this.Layers.Specific.Any(eval)) return true;
                }
                if (ConstructibleObjects != null)
                {
                    if (eval(this.ConstructibleObjects.Overall)) return true;
                    if (this.ConstructibleObjects.Specific != null && this.ConstructibleObjects.Specific.Any(eval)) return true;
                }
                if (ObjectModifications != null)
                {
                    if (eval(this.ObjectModifications.Overall)) return true;
                    if (this.ObjectModifications.Specific != null && this.ObjectModifications.Specific.Any(eval)) return true;
                }
                if (MaterialSwaps != null)
                {
                    if (eval(this.MaterialSwaps.Overall)) return true;
                    if (this.MaterialSwaps.Specific != null && this.MaterialSwaps.Specific.Any(eval)) return true;
                }
                if (Zooms != null)
                {
                    if (eval(this.Zooms.Overall)) return true;
                    if (this.Zooms.Specific != null && this.Zooms.Specific.Any(eval)) return true;
                }
                if (InstanceNamingRules != null)
                {
                    if (eval(this.InstanceNamingRules.Overall)) return true;
                    if (this.InstanceNamingRules.Specific != null && this.InstanceNamingRules.Specific.Any(eval)) return true;
                }
                if (SoundKeywordMappings != null)
                {
                    if (eval(this.SoundKeywordMappings.Overall)) return true;
                    if (this.SoundKeywordMappings.Specific != null && this.SoundKeywordMappings.Specific.Any(eval)) return true;
                }
                if (AudioEffectChains != null)
                {
                    if (eval(this.AudioEffectChains.Overall)) return true;
                    if (this.AudioEffectChains.Specific != null && this.AudioEffectChains.Specific.Any(eval)) return true;
                }
                if (SceneCollections != null)
                {
                    if (eval(this.SceneCollections.Overall)) return true;
                    if (this.SceneCollections.Specific != null && this.SceneCollections.Specific.Any(eval)) return true;
                }
                if (AttractionRules != null)
                {
                    if (eval(this.AttractionRules.Overall)) return true;
                    if (this.AttractionRules.Specific != null && this.AttractionRules.Specific.Any(eval)) return true;
                }
                if (AudioCategorySnapshots != null)
                {
                    if (eval(this.AudioCategorySnapshots.Overall)) return true;
                    if (this.AudioCategorySnapshots.Specific != null && this.AudioCategorySnapshots.Specific.Any(eval)) return true;
                }
                if (AnimationSoundTagSets != null)
                {
                    if (eval(this.AnimationSoundTagSets.Overall)) return true;
                    if (this.AnimationSoundTagSets.Specific != null && this.AnimationSoundTagSets.Specific.Any(eval)) return true;
                }
                if (NavigationMeshObstacleManagers != null)
                {
                    if (eval(this.NavigationMeshObstacleManagers.Overall)) return true;
                    if (this.NavigationMeshObstacleManagers.Specific != null && this.NavigationMeshObstacleManagers.Specific.Any(eval)) return true;
                }
                if (LensFlares != null)
                {
                    if (eval(this.LensFlares.Overall)) return true;
                    if (this.LensFlares.Specific != null && this.LensFlares.Specific.Any(eval)) return true;
                }
                if (GodRays != null)
                {
                    if (eval(this.GodRays.Overall)) return true;
                    if (this.GodRays.Specific != null && this.GodRays.Specific.Any(eval)) return true;
                }
                if (ObjectVisibilityManagers != null)
                {
                    if (eval(this.ObjectVisibilityManagers.Overall)) return true;
                    if (this.ObjectVisibilityManagers.Specific != null && this.ObjectVisibilityManagers.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Fallout4Mod.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ModHeader = this.ModHeader == null ? null : new MaskItem<R, Fallout4ModHeader.Mask<R>?>(eval(this.ModHeader.Overall), this.ModHeader.Specific?.Translate(eval));
                obj.GameSettings = this.GameSettings == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.GameSettings.Overall), this.GameSettings.Specific?.Translate(eval));
                obj.Keywords = this.Keywords == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Keywords.Overall), this.Keywords.Specific?.Translate(eval));
                obj.LocationReferenceTypes = this.LocationReferenceTypes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.LocationReferenceTypes.Overall), this.LocationReferenceTypes.Specific?.Translate(eval));
                obj.Actions = this.Actions == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Actions.Overall), this.Actions.Specific?.Translate(eval));
                obj.Transforms = this.Transforms == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Transforms.Overall), this.Transforms.Specific?.Translate(eval));
                obj.Components = this.Components == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Components.Overall), this.Components.Specific?.Translate(eval));
                obj.TextureSets = this.TextureSets == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.TextureSets.Overall), this.TextureSets.Specific?.Translate(eval));
                obj.Globals = this.Globals == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Globals.Overall), this.Globals.Specific?.Translate(eval));
                obj.DamageTypes = this.DamageTypes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.DamageTypes.Overall), this.DamageTypes.Specific?.Translate(eval));
                obj.Classes = this.Classes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Classes.Overall), this.Classes.Specific?.Translate(eval));
                obj.Factions = this.Factions == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Factions.Overall), this.Factions.Specific?.Translate(eval));
                obj.HeadParts = this.HeadParts == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.HeadParts.Overall), this.HeadParts.Specific?.Translate(eval));
                obj.Races = this.Races == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Races.Overall), this.Races.Specific?.Translate(eval));
                obj.SoundMarkers = this.SoundMarkers == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.SoundMarkers.Overall), this.SoundMarkers.Specific?.Translate(eval));
                obj.AcousticSpaces = this.AcousticSpaces == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.AcousticSpaces.Overall), this.AcousticSpaces.Specific?.Translate(eval));
                obj.MagicEffects = this.MagicEffects == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.MagicEffects.Overall), this.MagicEffects.Specific?.Translate(eval));
                obj.LandscapeTextures = this.LandscapeTextures == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.LandscapeTextures.Overall), this.LandscapeTextures.Specific?.Translate(eval));
                obj.ObjectEffects = this.ObjectEffects == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ObjectEffects.Overall), this.ObjectEffects.Specific?.Translate(eval));
                obj.Spells = this.Spells == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Spells.Overall), this.Spells.Specific?.Translate(eval));
                obj.Activators = this.Activators == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Activators.Overall), this.Activators.Specific?.Translate(eval));
                obj.TalkingActivators = this.TalkingActivators == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.TalkingActivators.Overall), this.TalkingActivators.Specific?.Translate(eval));
                obj.Armors = this.Armors == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Armors.Overall), this.Armors.Specific?.Translate(eval));
                obj.Books = this.Books == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Books.Overall), this.Books.Specific?.Translate(eval));
                obj.Containers = this.Containers == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Containers.Overall), this.Containers.Specific?.Translate(eval));
                obj.Doors = this.Doors == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Doors.Overall), this.Doors.Specific?.Translate(eval));
                obj.Ingredients = this.Ingredients == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Ingredients.Overall), this.Ingredients.Specific?.Translate(eval));
                obj.Lights = this.Lights == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Lights.Overall), this.Lights.Specific?.Translate(eval));
                obj.MiscItems = this.MiscItems == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.MiscItems.Overall), this.MiscItems.Specific?.Translate(eval));
                obj.Statics = this.Statics == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Statics.Overall), this.Statics.Specific?.Translate(eval));
                obj.StaticCollections = this.StaticCollections == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.StaticCollections.Overall), this.StaticCollections.Specific?.Translate(eval));
                obj.MovableStatics = this.MovableStatics == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.MovableStatics.Overall), this.MovableStatics.Specific?.Translate(eval));
                obj.Grasses = this.Grasses == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Grasses.Overall), this.Grasses.Specific?.Translate(eval));
                obj.Trees = this.Trees == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Trees.Overall), this.Trees.Specific?.Translate(eval));
                obj.Florae = this.Florae == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Florae.Overall), this.Florae.Specific?.Translate(eval));
                obj.Furniture = this.Furniture == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Furniture.Overall), this.Furniture.Specific?.Translate(eval));
                obj.Weapons = this.Weapons == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Weapons.Overall), this.Weapons.Specific?.Translate(eval));
                obj.Ammunitions = this.Ammunitions == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Ammunitions.Overall), this.Ammunitions.Specific?.Translate(eval));
                obj.Npcs = this.Npcs == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Npcs.Overall), this.Npcs.Specific?.Translate(eval));
                obj.LeveledNpcs = this.LeveledNpcs == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.LeveledNpcs.Overall), this.LeveledNpcs.Specific?.Translate(eval));
                obj.Keys = this.Keys == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Keys.Overall), this.Keys.Specific?.Translate(eval));
                obj.Ingestibles = this.Ingestibles == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Ingestibles.Overall), this.Ingestibles.Specific?.Translate(eval));
                obj.IdleMarkers = this.IdleMarkers == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.IdleMarkers.Overall), this.IdleMarkers.Specific?.Translate(eval));
                obj.Holotapes = this.Holotapes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Holotapes.Overall), this.Holotapes.Specific?.Translate(eval));
                obj.Projectiles = this.Projectiles == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Projectiles.Overall), this.Projectiles.Specific?.Translate(eval));
                obj.Hazards = this.Hazards == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Hazards.Overall), this.Hazards.Specific?.Translate(eval));
                obj.BendableSplines = this.BendableSplines == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.BendableSplines.Overall), this.BendableSplines.Specific?.Translate(eval));
                obj.Terminals = this.Terminals == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Terminals.Overall), this.Terminals.Specific?.Translate(eval));
                obj.LeveledItems = this.LeveledItems == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.LeveledItems.Overall), this.LeveledItems.Specific?.Translate(eval));
                obj.Weather = this.Weather == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Weather.Overall), this.Weather.Specific?.Translate(eval));
                obj.Climates = this.Climates == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Climates.Overall), this.Climates.Specific?.Translate(eval));
                obj.ShaderParticleGeometries = this.ShaderParticleGeometries == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ShaderParticleGeometries.Overall), this.ShaderParticleGeometries.Specific?.Translate(eval));
                obj.VisualEffects = this.VisualEffects == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.VisualEffects.Overall), this.VisualEffects.Specific?.Translate(eval));
                obj.Regions = this.Regions == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Regions.Overall), this.Regions.Specific?.Translate(eval));
                obj.NavigationMeshInfoMaps = this.NavigationMeshInfoMaps == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.NavigationMeshInfoMaps.Overall), this.NavigationMeshInfoMaps.Specific?.Translate(eval));
                obj.Cells = this.Cells == null ? null : new MaskItem<R, Fallout4ListGroup.Mask<R>?>(eval(this.Cells.Overall), this.Cells.Specific?.Translate(eval));
                obj.Worldspaces = this.Worldspaces == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Worldspaces.Overall), this.Worldspaces.Specific?.Translate(eval));
                obj.Quests = this.Quests == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Quests.Overall), this.Quests.Specific?.Translate(eval));
                obj.IdleAnimations = this.IdleAnimations == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.IdleAnimations.Overall), this.IdleAnimations.Specific?.Translate(eval));
                obj.Packages = this.Packages == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Packages.Overall), this.Packages.Specific?.Translate(eval));
                obj.CombatStyles = this.CombatStyles == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.CombatStyles.Overall), this.CombatStyles.Specific?.Translate(eval));
                obj.LoadScreens = this.LoadScreens == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.LoadScreens.Overall), this.LoadScreens.Specific?.Translate(eval));
                obj.AnimatedObjects = this.AnimatedObjects == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.AnimatedObjects.Overall), this.AnimatedObjects.Specific?.Translate(eval));
                obj.Waters = this.Waters == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Waters.Overall), this.Waters.Specific?.Translate(eval));
                obj.EffectShaders = this.EffectShaders == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.EffectShaders.Overall), this.EffectShaders.Specific?.Translate(eval));
                obj.Explosions = this.Explosions == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Explosions.Overall), this.Explosions.Specific?.Translate(eval));
                obj.Debris = this.Debris == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Debris.Overall), this.Debris.Specific?.Translate(eval));
                obj.ImageSpaces = this.ImageSpaces == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ImageSpaces.Overall), this.ImageSpaces.Specific?.Translate(eval));
                obj.ImageSpaceAdapters = this.ImageSpaceAdapters == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ImageSpaceAdapters.Overall), this.ImageSpaceAdapters.Specific?.Translate(eval));
                obj.FormLists = this.FormLists == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.FormLists.Overall), this.FormLists.Specific?.Translate(eval));
                obj.Perks = this.Perks == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Perks.Overall), this.Perks.Specific?.Translate(eval));
                obj.BodyParts = this.BodyParts == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.BodyParts.Overall), this.BodyParts.Specific?.Translate(eval));
                obj.AddonNodes = this.AddonNodes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.AddonNodes.Overall), this.AddonNodes.Specific?.Translate(eval));
                obj.ActorValueInformation = this.ActorValueInformation == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ActorValueInformation.Overall), this.ActorValueInformation.Specific?.Translate(eval));
                obj.CameraShots = this.CameraShots == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.CameraShots.Overall), this.CameraShots.Specific?.Translate(eval));
                obj.CameraPaths = this.CameraPaths == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.CameraPaths.Overall), this.CameraPaths.Specific?.Translate(eval));
                obj.VoiceTypes = this.VoiceTypes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.VoiceTypes.Overall), this.VoiceTypes.Specific?.Translate(eval));
                obj.MaterialTypes = this.MaterialTypes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.MaterialTypes.Overall), this.MaterialTypes.Specific?.Translate(eval));
                obj.Impacts = this.Impacts == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Impacts.Overall), this.Impacts.Specific?.Translate(eval));
                obj.ImpactDataSets = this.ImpactDataSets == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ImpactDataSets.Overall), this.ImpactDataSets.Specific?.Translate(eval));
                obj.ArmorAddons = this.ArmorAddons == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ArmorAddons.Overall), this.ArmorAddons.Specific?.Translate(eval));
                obj.EncounterZones = this.EncounterZones == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.EncounterZones.Overall), this.EncounterZones.Specific?.Translate(eval));
                obj.Locations = this.Locations == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Locations.Overall), this.Locations.Specific?.Translate(eval));
                obj.Messages = this.Messages == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Messages.Overall), this.Messages.Specific?.Translate(eval));
                obj.DefaultObjectManagers = this.DefaultObjectManagers == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.DefaultObjectManagers.Overall), this.DefaultObjectManagers.Specific?.Translate(eval));
                obj.DefaultObjects = this.DefaultObjects == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.DefaultObjects.Overall), this.DefaultObjects.Specific?.Translate(eval));
                obj.LightingTemplates = this.LightingTemplates == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.LightingTemplates.Overall), this.LightingTemplates.Specific?.Translate(eval));
                obj.MusicTypes = this.MusicTypes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.MusicTypes.Overall), this.MusicTypes.Specific?.Translate(eval));
                obj.Footsteps = this.Footsteps == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Footsteps.Overall), this.Footsteps.Specific?.Translate(eval));
                obj.FootstepSets = this.FootstepSets == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.FootstepSets.Overall), this.FootstepSets.Specific?.Translate(eval));
                obj.StoryManagerBranchNodes = this.StoryManagerBranchNodes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.StoryManagerBranchNodes.Overall), this.StoryManagerBranchNodes.Specific?.Translate(eval));
                obj.StoryManagerQuestNodes = this.StoryManagerQuestNodes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.StoryManagerQuestNodes.Overall), this.StoryManagerQuestNodes.Specific?.Translate(eval));
                obj.StoryManagerEventNodes = this.StoryManagerEventNodes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.StoryManagerEventNodes.Overall), this.StoryManagerEventNodes.Specific?.Translate(eval));
                obj.MusicTracks = this.MusicTracks == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.MusicTracks.Overall), this.MusicTracks.Specific?.Translate(eval));
                obj.DialogViews = this.DialogViews == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.DialogViews.Overall), this.DialogViews.Specific?.Translate(eval));
                obj.EquipTypes = this.EquipTypes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.EquipTypes.Overall), this.EquipTypes.Specific?.Translate(eval));
                obj.Relationships = this.Relationships == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Relationships.Overall), this.Relationships.Specific?.Translate(eval));
                obj.AssociationTypes = this.AssociationTypes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.AssociationTypes.Overall), this.AssociationTypes.Specific?.Translate(eval));
                obj.Outfits = this.Outfits == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Outfits.Overall), this.Outfits.Specific?.Translate(eval));
                obj.ArtObjects = this.ArtObjects == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ArtObjects.Overall), this.ArtObjects.Specific?.Translate(eval));
                obj.MaterialObjects = this.MaterialObjects == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.MaterialObjects.Overall), this.MaterialObjects.Specific?.Translate(eval));
                obj.MovementTypes = this.MovementTypes == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.MovementTypes.Overall), this.MovementTypes.Specific?.Translate(eval));
                obj.SoundDescriptors = this.SoundDescriptors == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.SoundDescriptors.Overall), this.SoundDescriptors.Specific?.Translate(eval));
                obj.SoundCategories = this.SoundCategories == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.SoundCategories.Overall), this.SoundCategories.Specific?.Translate(eval));
                obj.SoundOutputModels = this.SoundOutputModels == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.SoundOutputModels.Overall), this.SoundOutputModels.Specific?.Translate(eval));
                obj.CollisionLayers = this.CollisionLayers == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.CollisionLayers.Overall), this.CollisionLayers.Specific?.Translate(eval));
                obj.Colors = this.Colors == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Colors.Overall), this.Colors.Specific?.Translate(eval));
                obj.ReverbParameters = this.ReverbParameters == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ReverbParameters.Overall), this.ReverbParameters.Specific?.Translate(eval));
                obj.PackIns = this.PackIns == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.PackIns.Overall), this.PackIns.Specific?.Translate(eval));
                obj.ReferenceGroups = this.ReferenceGroups == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ReferenceGroups.Overall), this.ReferenceGroups.Specific?.Translate(eval));
                obj.AimModels = this.AimModels == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.AimModels.Overall), this.AimModels.Specific?.Translate(eval));
                obj.Layers = this.Layers == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Layers.Overall), this.Layers.Specific?.Translate(eval));
                obj.ConstructibleObjects = this.ConstructibleObjects == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ConstructibleObjects.Overall), this.ConstructibleObjects.Specific?.Translate(eval));
                obj.ObjectModifications = this.ObjectModifications == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ObjectModifications.Overall), this.ObjectModifications.Specific?.Translate(eval));
                obj.MaterialSwaps = this.MaterialSwaps == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.MaterialSwaps.Overall), this.MaterialSwaps.Specific?.Translate(eval));
                obj.Zooms = this.Zooms == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.Zooms.Overall), this.Zooms.Specific?.Translate(eval));
                obj.InstanceNamingRules = this.InstanceNamingRules == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.InstanceNamingRules.Overall), this.InstanceNamingRules.Specific?.Translate(eval));
                obj.SoundKeywordMappings = this.SoundKeywordMappings == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.SoundKeywordMappings.Overall), this.SoundKeywordMappings.Specific?.Translate(eval));
                obj.AudioEffectChains = this.AudioEffectChains == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.AudioEffectChains.Overall), this.AudioEffectChains.Specific?.Translate(eval));
                obj.SceneCollections = this.SceneCollections == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.SceneCollections.Overall), this.SceneCollections.Specific?.Translate(eval));
                obj.AttractionRules = this.AttractionRules == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.AttractionRules.Overall), this.AttractionRules.Specific?.Translate(eval));
                obj.AudioCategorySnapshots = this.AudioCategorySnapshots == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.AudioCategorySnapshots.Overall), this.AudioCategorySnapshots.Specific?.Translate(eval));
                obj.AnimationSoundTagSets = this.AnimationSoundTagSets == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.AnimationSoundTagSets.Overall), this.AnimationSoundTagSets.Specific?.Translate(eval));
                obj.NavigationMeshObstacleManagers = this.NavigationMeshObstacleManagers == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.NavigationMeshObstacleManagers.Overall), this.NavigationMeshObstacleManagers.Specific?.Translate(eval));
                obj.LensFlares = this.LensFlares == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.LensFlares.Overall), this.LensFlares.Specific?.Translate(eval));
                obj.GodRays = this.GodRays == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.GodRays.Overall), this.GodRays.Specific?.Translate(eval));
                obj.ObjectVisibilityManagers = this.ObjectVisibilityManagers == null ? null : new MaskItem<R, Fallout4Group.Mask<R>?>(eval(this.ObjectVisibilityManagers.Overall), this.ObjectVisibilityManagers.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Fallout4Mod.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Fallout4Mod.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Fallout4Mod.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ModHeader?.Overall ?? true)
                    {
                        ModHeader?.Print(sb);
                    }
                    if (printMask?.GameSettings?.Overall ?? true)
                    {
                        GameSettings?.Print(sb);
                    }
                    if (printMask?.Keywords?.Overall ?? true)
                    {
                        Keywords?.Print(sb);
                    }
                    if (printMask?.LocationReferenceTypes?.Overall ?? true)
                    {
                        LocationReferenceTypes?.Print(sb);
                    }
                    if (printMask?.Actions?.Overall ?? true)
                    {
                        Actions?.Print(sb);
                    }
                    if (printMask?.Transforms?.Overall ?? true)
                    {
                        Transforms?.Print(sb);
                    }
                    if (printMask?.Components?.Overall ?? true)
                    {
                        Components?.Print(sb);
                    }
                    if (printMask?.TextureSets?.Overall ?? true)
                    {
                        TextureSets?.Print(sb);
                    }
                    if (printMask?.Globals?.Overall ?? true)
                    {
                        Globals?.Print(sb);
                    }
                    if (printMask?.DamageTypes?.Overall ?? true)
                    {
                        DamageTypes?.Print(sb);
                    }
                    if (printMask?.Classes?.Overall ?? true)
                    {
                        Classes?.Print(sb);
                    }
                    if (printMask?.Factions?.Overall ?? true)
                    {
                        Factions?.Print(sb);
                    }
                    if (printMask?.HeadParts?.Overall ?? true)
                    {
                        HeadParts?.Print(sb);
                    }
                    if (printMask?.Races?.Overall ?? true)
                    {
                        Races?.Print(sb);
                    }
                    if (printMask?.SoundMarkers?.Overall ?? true)
                    {
                        SoundMarkers?.Print(sb);
                    }
                    if (printMask?.AcousticSpaces?.Overall ?? true)
                    {
                        AcousticSpaces?.Print(sb);
                    }
                    if (printMask?.MagicEffects?.Overall ?? true)
                    {
                        MagicEffects?.Print(sb);
                    }
                    if (printMask?.LandscapeTextures?.Overall ?? true)
                    {
                        LandscapeTextures?.Print(sb);
                    }
                    if (printMask?.ObjectEffects?.Overall ?? true)
                    {
                        ObjectEffects?.Print(sb);
                    }
                    if (printMask?.Spells?.Overall ?? true)
                    {
                        Spells?.Print(sb);
                    }
                    if (printMask?.Activators?.Overall ?? true)
                    {
                        Activators?.Print(sb);
                    }
                    if (printMask?.TalkingActivators?.Overall ?? true)
                    {
                        TalkingActivators?.Print(sb);
                    }
                    if (printMask?.Armors?.Overall ?? true)
                    {
                        Armors?.Print(sb);
                    }
                    if (printMask?.Books?.Overall ?? true)
                    {
                        Books?.Print(sb);
                    }
                    if (printMask?.Containers?.Overall ?? true)
                    {
                        Containers?.Print(sb);
                    }
                    if (printMask?.Doors?.Overall ?? true)
                    {
                        Doors?.Print(sb);
                    }
                    if (printMask?.Ingredients?.Overall ?? true)
                    {
                        Ingredients?.Print(sb);
                    }
                    if (printMask?.Lights?.Overall ?? true)
                    {
                        Lights?.Print(sb);
                    }
                    if (printMask?.MiscItems?.Overall ?? true)
                    {
                        MiscItems?.Print(sb);
                    }
                    if (printMask?.Statics?.Overall ?? true)
                    {
                        Statics?.Print(sb);
                    }
                    if (printMask?.StaticCollections?.Overall ?? true)
                    {
                        StaticCollections?.Print(sb);
                    }
                    if (printMask?.MovableStatics?.Overall ?? true)
                    {
                        MovableStatics?.Print(sb);
                    }
                    if (printMask?.Grasses?.Overall ?? true)
                    {
                        Grasses?.Print(sb);
                    }
                    if (printMask?.Trees?.Overall ?? true)
                    {
                        Trees?.Print(sb);
                    }
                    if (printMask?.Florae?.Overall ?? true)
                    {
                        Florae?.Print(sb);
                    }
                    if (printMask?.Furniture?.Overall ?? true)
                    {
                        Furniture?.Print(sb);
                    }
                    if (printMask?.Weapons?.Overall ?? true)
                    {
                        Weapons?.Print(sb);
                    }
                    if (printMask?.Ammunitions?.Overall ?? true)
                    {
                        Ammunitions?.Print(sb);
                    }
                    if (printMask?.Npcs?.Overall ?? true)
                    {
                        Npcs?.Print(sb);
                    }
                    if (printMask?.LeveledNpcs?.Overall ?? true)
                    {
                        LeveledNpcs?.Print(sb);
                    }
                    if (printMask?.Keys?.Overall ?? true)
                    {
                        Keys?.Print(sb);
                    }
                    if (printMask?.Ingestibles?.Overall ?? true)
                    {
                        Ingestibles?.Print(sb);
                    }
                    if (printMask?.IdleMarkers?.Overall ?? true)
                    {
                        IdleMarkers?.Print(sb);
                    }
                    if (printMask?.Holotapes?.Overall ?? true)
                    {
                        Holotapes?.Print(sb);
                    }
                    if (printMask?.Projectiles?.Overall ?? true)
                    {
                        Projectiles?.Print(sb);
                    }
                    if (printMask?.Hazards?.Overall ?? true)
                    {
                        Hazards?.Print(sb);
                    }
                    if (printMask?.BendableSplines?.Overall ?? true)
                    {
                        BendableSplines?.Print(sb);
                    }
                    if (printMask?.Terminals?.Overall ?? true)
                    {
                        Terminals?.Print(sb);
                    }
                    if (printMask?.LeveledItems?.Overall ?? true)
                    {
                        LeveledItems?.Print(sb);
                    }
                    if (printMask?.Weather?.Overall ?? true)
                    {
                        Weather?.Print(sb);
                    }
                    if (printMask?.Climates?.Overall ?? true)
                    {
                        Climates?.Print(sb);
                    }
                    if (printMask?.ShaderParticleGeometries?.Overall ?? true)
                    {
                        ShaderParticleGeometries?.Print(sb);
                    }
                    if (printMask?.VisualEffects?.Overall ?? true)
                    {
                        VisualEffects?.Print(sb);
                    }
                    if (printMask?.Regions?.Overall ?? true)
                    {
                        Regions?.Print(sb);
                    }
                    if (printMask?.NavigationMeshInfoMaps?.Overall ?? true)
                    {
                        NavigationMeshInfoMaps?.Print(sb);
                    }
                    if (printMask?.Cells?.Overall ?? true)
                    {
                        Cells?.Print(sb);
                    }
                    if (printMask?.Worldspaces?.Overall ?? true)
                    {
                        Worldspaces?.Print(sb);
                    }
                    if (printMask?.Quests?.Overall ?? true)
                    {
                        Quests?.Print(sb);
                    }
                    if (printMask?.IdleAnimations?.Overall ?? true)
                    {
                        IdleAnimations?.Print(sb);
                    }
                    if (printMask?.Packages?.Overall ?? true)
                    {
                        Packages?.Print(sb);
                    }
                    if (printMask?.CombatStyles?.Overall ?? true)
                    {
                        CombatStyles?.Print(sb);
                    }
                    if (printMask?.LoadScreens?.Overall ?? true)
                    {
                        LoadScreens?.Print(sb);
                    }
                    if (printMask?.AnimatedObjects?.Overall ?? true)
                    {
                        AnimatedObjects?.Print(sb);
                    }
                    if (printMask?.Waters?.Overall ?? true)
                    {
                        Waters?.Print(sb);
                    }
                    if (printMask?.EffectShaders?.Overall ?? true)
                    {
                        EffectShaders?.Print(sb);
                    }
                    if (printMask?.Explosions?.Overall ?? true)
                    {
                        Explosions?.Print(sb);
                    }
                    if (printMask?.Debris?.Overall ?? true)
                    {
                        Debris?.Print(sb);
                    }
                    if (printMask?.ImageSpaces?.Overall ?? true)
                    {
                        ImageSpaces?.Print(sb);
                    }
                    if (printMask?.ImageSpaceAdapters?.Overall ?? true)
                    {
                        ImageSpaceAdapters?.Print(sb);
                    }
                    if (printMask?.FormLists?.Overall ?? true)
                    {
                        FormLists?.Print(sb);
                    }
                    if (printMask?.Perks?.Overall ?? true)
                    {
                        Perks?.Print(sb);
                    }
                    if (printMask?.BodyParts?.Overall ?? true)
                    {
                        BodyParts?.Print(sb);
                    }
                    if (printMask?.AddonNodes?.Overall ?? true)
                    {
                        AddonNodes?.Print(sb);
                    }
                    if (printMask?.ActorValueInformation?.Overall ?? true)
                    {
                        ActorValueInformation?.Print(sb);
                    }
                    if (printMask?.CameraShots?.Overall ?? true)
                    {
                        CameraShots?.Print(sb);
                    }
                    if (printMask?.CameraPaths?.Overall ?? true)
                    {
                        CameraPaths?.Print(sb);
                    }
                    if (printMask?.VoiceTypes?.Overall ?? true)
                    {
                        VoiceTypes?.Print(sb);
                    }
                    if (printMask?.MaterialTypes?.Overall ?? true)
                    {
                        MaterialTypes?.Print(sb);
                    }
                    if (printMask?.Impacts?.Overall ?? true)
                    {
                        Impacts?.Print(sb);
                    }
                    if (printMask?.ImpactDataSets?.Overall ?? true)
                    {
                        ImpactDataSets?.Print(sb);
                    }
                    if (printMask?.ArmorAddons?.Overall ?? true)
                    {
                        ArmorAddons?.Print(sb);
                    }
                    if (printMask?.EncounterZones?.Overall ?? true)
                    {
                        EncounterZones?.Print(sb);
                    }
                    if (printMask?.Locations?.Overall ?? true)
                    {
                        Locations?.Print(sb);
                    }
                    if (printMask?.Messages?.Overall ?? true)
                    {
                        Messages?.Print(sb);
                    }
                    if (printMask?.DefaultObjectManagers?.Overall ?? true)
                    {
                        DefaultObjectManagers?.Print(sb);
                    }
                    if (printMask?.DefaultObjects?.Overall ?? true)
                    {
                        DefaultObjects?.Print(sb);
                    }
                    if (printMask?.LightingTemplates?.Overall ?? true)
                    {
                        LightingTemplates?.Print(sb);
                    }
                    if (printMask?.MusicTypes?.Overall ?? true)
                    {
                        MusicTypes?.Print(sb);
                    }
                    if (printMask?.Footsteps?.Overall ?? true)
                    {
                        Footsteps?.Print(sb);
                    }
                    if (printMask?.FootstepSets?.Overall ?? true)
                    {
                        FootstepSets?.Print(sb);
                    }
                    if (printMask?.StoryManagerBranchNodes?.Overall ?? true)
                    {
                        StoryManagerBranchNodes?.Print(sb);
                    }
                    if (printMask?.StoryManagerQuestNodes?.Overall ?? true)
                    {
                        StoryManagerQuestNodes?.Print(sb);
                    }
                    if (printMask?.StoryManagerEventNodes?.Overall ?? true)
                    {
                        StoryManagerEventNodes?.Print(sb);
                    }
                    if (printMask?.MusicTracks?.Overall ?? true)
                    {
                        MusicTracks?.Print(sb);
                    }
                    if (printMask?.DialogViews?.Overall ?? true)
                    {
                        DialogViews?.Print(sb);
                    }
                    if (printMask?.EquipTypes?.Overall ?? true)
                    {
                        EquipTypes?.Print(sb);
                    }
                    if (printMask?.Relationships?.Overall ?? true)
                    {
                        Relationships?.Print(sb);
                    }
                    if (printMask?.AssociationTypes?.Overall ?? true)
                    {
                        AssociationTypes?.Print(sb);
                    }
                    if (printMask?.Outfits?.Overall ?? true)
                    {
                        Outfits?.Print(sb);
                    }
                    if (printMask?.ArtObjects?.Overall ?? true)
                    {
                        ArtObjects?.Print(sb);
                    }
                    if (printMask?.MaterialObjects?.Overall ?? true)
                    {
                        MaterialObjects?.Print(sb);
                    }
                    if (printMask?.MovementTypes?.Overall ?? true)
                    {
                        MovementTypes?.Print(sb);
                    }
                    if (printMask?.SoundDescriptors?.Overall ?? true)
                    {
                        SoundDescriptors?.Print(sb);
                    }
                    if (printMask?.SoundCategories?.Overall ?? true)
                    {
                        SoundCategories?.Print(sb);
                    }
                    if (printMask?.SoundOutputModels?.Overall ?? true)
                    {
                        SoundOutputModels?.Print(sb);
                    }
                    if (printMask?.CollisionLayers?.Overall ?? true)
                    {
                        CollisionLayers?.Print(sb);
                    }
                    if (printMask?.Colors?.Overall ?? true)
                    {
                        Colors?.Print(sb);
                    }
                    if (printMask?.ReverbParameters?.Overall ?? true)
                    {
                        ReverbParameters?.Print(sb);
                    }
                    if (printMask?.PackIns?.Overall ?? true)
                    {
                        PackIns?.Print(sb);
                    }
                    if (printMask?.ReferenceGroups?.Overall ?? true)
                    {
                        ReferenceGroups?.Print(sb);
                    }
                    if (printMask?.AimModels?.Overall ?? true)
                    {
                        AimModels?.Print(sb);
                    }
                    if (printMask?.Layers?.Overall ?? true)
                    {
                        Layers?.Print(sb);
                    }
                    if (printMask?.ConstructibleObjects?.Overall ?? true)
                    {
                        ConstructibleObjects?.Print(sb);
                    }
                    if (printMask?.ObjectModifications?.Overall ?? true)
                    {
                        ObjectModifications?.Print(sb);
                    }
                    if (printMask?.MaterialSwaps?.Overall ?? true)
                    {
                        MaterialSwaps?.Print(sb);
                    }
                    if (printMask?.Zooms?.Overall ?? true)
                    {
                        Zooms?.Print(sb);
                    }
                    if (printMask?.InstanceNamingRules?.Overall ?? true)
                    {
                        InstanceNamingRules?.Print(sb);
                    }
                    if (printMask?.SoundKeywordMappings?.Overall ?? true)
                    {
                        SoundKeywordMappings?.Print(sb);
                    }
                    if (printMask?.AudioEffectChains?.Overall ?? true)
                    {
                        AudioEffectChains?.Print(sb);
                    }
                    if (printMask?.SceneCollections?.Overall ?? true)
                    {
                        SceneCollections?.Print(sb);
                    }
                    if (printMask?.AttractionRules?.Overall ?? true)
                    {
                        AttractionRules?.Print(sb);
                    }
                    if (printMask?.AudioCategorySnapshots?.Overall ?? true)
                    {
                        AudioCategorySnapshots?.Print(sb);
                    }
                    if (printMask?.AnimationSoundTagSets?.Overall ?? true)
                    {
                        AnimationSoundTagSets?.Print(sb);
                    }
                    if (printMask?.NavigationMeshObstacleManagers?.Overall ?? true)
                    {
                        NavigationMeshObstacleManagers?.Print(sb);
                    }
                    if (printMask?.LensFlares?.Overall ?? true)
                    {
                        LensFlares?.Print(sb);
                    }
                    if (printMask?.GodRays?.Overall ?? true)
                    {
                        GodRays?.Print(sb);
                    }
                    if (printMask?.ObjectVisibilityManagers?.Overall ?? true)
                    {
                        ObjectVisibilityManagers?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, Fallout4ModHeader.ErrorMask?>? ModHeader;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<GameSetting.ErrorMask>?>? GameSettings;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Keyword.ErrorMask>?>? Keywords;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<LocationReferenceType.ErrorMask>?>? LocationReferenceTypes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ActionRecord.ErrorMask>?>? Actions;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Transform.ErrorMask>?>? Transforms;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Component.ErrorMask>?>? Components;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<TextureSet.ErrorMask>?>? TextureSets;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Global.ErrorMask>?>? Globals;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ADamageType.ErrorMask>?>? DamageTypes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Class.ErrorMask>?>? Classes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Faction.ErrorMask>?>? Factions;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<HeadPart.ErrorMask>?>? HeadParts;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Race.ErrorMask>?>? Races;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<SoundMarker.ErrorMask>?>? SoundMarkers;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<AcousticSpace.ErrorMask>?>? AcousticSpaces;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<MagicEffect.ErrorMask>?>? MagicEffects;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<LandscapeTexture.ErrorMask>?>? LandscapeTextures;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ObjectEffect.ErrorMask>?>? ObjectEffects;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Spell.ErrorMask>?>? Spells;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Activator.ErrorMask>?>? Activators;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<TalkingActivator.ErrorMask>?>? TalkingActivators;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Armor.ErrorMask>?>? Armors;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Book.ErrorMask>?>? Books;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Container.ErrorMask>?>? Containers;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Door.ErrorMask>?>? Doors;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Ingredient.ErrorMask>?>? Ingredients;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Light.ErrorMask>?>? Lights;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<MiscItem.ErrorMask>?>? MiscItems;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Static.ErrorMask>?>? Statics;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<StaticCollection.ErrorMask>?>? StaticCollections;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<MovableStatic.ErrorMask>?>? MovableStatics;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Grass.ErrorMask>?>? Grasses;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Tree.ErrorMask>?>? Trees;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Flora.ErrorMask>?>? Florae;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Furniture.ErrorMask>?>? Furniture;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Weapon.ErrorMask>?>? Weapons;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Ammunition.ErrorMask>?>? Ammunitions;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Npc.ErrorMask>?>? Npcs;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<LeveledNpc.ErrorMask>?>? LeveledNpcs;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Key.ErrorMask>?>? Keys;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Ingestible.ErrorMask>?>? Ingestibles;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<IdleMarker.ErrorMask>?>? IdleMarkers;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Holotape.ErrorMask>?>? Holotapes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Projectile.ErrorMask>?>? Projectiles;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Hazard.ErrorMask>?>? Hazards;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<BendableSpline.ErrorMask>?>? BendableSplines;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Terminal.ErrorMask>?>? Terminals;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<LeveledItem.ErrorMask>?>? LeveledItems;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Weather.ErrorMask>?>? Weather;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Climate.ErrorMask>?>? Climates;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ShaderParticleGeometry.ErrorMask>?>? ShaderParticleGeometries;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<VisualEffect.ErrorMask>?>? VisualEffects;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Region.ErrorMask>?>? Regions;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>? NavigationMeshInfoMaps;
            public MaskItem<Exception?, Fallout4ListGroup.ErrorMask<CellBlock.ErrorMask>?>? Cells;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Worldspace.ErrorMask>?>? Worldspaces;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Quest.ErrorMask>?>? Quests;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<IdleAnimation.ErrorMask>?>? IdleAnimations;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Package.ErrorMask>?>? Packages;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<CombatStyle.ErrorMask>?>? CombatStyles;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<LoadScreen.ErrorMask>?>? LoadScreens;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<AnimatedObject.ErrorMask>?>? AnimatedObjects;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Water.ErrorMask>?>? Waters;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<EffectShader.ErrorMask>?>? EffectShaders;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Explosion.ErrorMask>?>? Explosions;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Debris.ErrorMask>?>? Debris;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ImageSpace.ErrorMask>?>? ImageSpaces;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ImageSpaceAdapter.ErrorMask>?>? ImageSpaceAdapters;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<FormList.ErrorMask>?>? FormLists;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Perk.ErrorMask>?>? Perks;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<BodyPartData.ErrorMask>?>? BodyParts;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<AddonNode.ErrorMask>?>? AddonNodes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ActorValueInformation.ErrorMask>?>? ActorValueInformation;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<CameraShot.ErrorMask>?>? CameraShots;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<CameraPath.ErrorMask>?>? CameraPaths;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<VoiceType.ErrorMask>?>? VoiceTypes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<MaterialType.ErrorMask>?>? MaterialTypes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Impact.ErrorMask>?>? Impacts;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ImpactDataSet.ErrorMask>?>? ImpactDataSets;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ArmorAddon.ErrorMask>?>? ArmorAddons;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<EncounterZone.ErrorMask>?>? EncounterZones;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Location.ErrorMask>?>? Locations;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Message.ErrorMask>?>? Messages;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<DefaultObjectManager.ErrorMask>?>? DefaultObjectManagers;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<DefaultObject.ErrorMask>?>? DefaultObjects;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<LightingTemplate.ErrorMask>?>? LightingTemplates;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<MusicType.ErrorMask>?>? MusicTypes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Footstep.ErrorMask>?>? Footsteps;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<FootstepSet.ErrorMask>?>? FootstepSets;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<StoryManagerBranchNode.ErrorMask>?>? StoryManagerBranchNodes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<StoryManagerQuestNode.ErrorMask>?>? StoryManagerQuestNodes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<StoryManagerEventNode.ErrorMask>?>? StoryManagerEventNodes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<MusicTrack.ErrorMask>?>? MusicTracks;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<DialogView.ErrorMask>?>? DialogViews;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<EquipType.ErrorMask>?>? EquipTypes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Relationship.ErrorMask>?>? Relationships;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<AssociationType.ErrorMask>?>? AssociationTypes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Outfit.ErrorMask>?>? Outfits;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ArtObject.ErrorMask>?>? ArtObjects;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<MaterialObject.ErrorMask>?>? MaterialObjects;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<MovementType.ErrorMask>?>? MovementTypes;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<SoundDescriptor.ErrorMask>?>? SoundDescriptors;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<SoundCategory.ErrorMask>?>? SoundCategories;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<SoundOutputModel.ErrorMask>?>? SoundOutputModels;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<CollisionLayer.ErrorMask>?>? CollisionLayers;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ColorRecord.ErrorMask>?>? Colors;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ReverbParameters.ErrorMask>?>? ReverbParameters;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<PackIn.ErrorMask>?>? PackIns;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ReferenceGroup.ErrorMask>?>? ReferenceGroups;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<AimModel.ErrorMask>?>? AimModels;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Layer.ErrorMask>?>? Layers;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ConstructibleObject.ErrorMask>?>? ConstructibleObjects;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<AObjectModification.ErrorMask>?>? ObjectModifications;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<MaterialSwap.ErrorMask>?>? MaterialSwaps;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<Zoom.ErrorMask>?>? Zooms;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<InstanceNamingRules.ErrorMask>?>? InstanceNamingRules;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<SoundKeywordMapping.ErrorMask>?>? SoundKeywordMappings;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<AudioEffectChain.ErrorMask>?>? AudioEffectChains;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<SceneCollection.ErrorMask>?>? SceneCollections;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<AttractionRule.ErrorMask>?>? AttractionRules;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<AudioCategorySnapshot.ErrorMask>?>? AudioCategorySnapshots;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<AnimationSoundTagSet.ErrorMask>?>? AnimationSoundTagSets;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<NavigationMeshObstacleManager.ErrorMask>?>? NavigationMeshObstacleManagers;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<LensFlare.ErrorMask>?>? LensFlares;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<GodRays.ErrorMask>?>? GodRays;
            public MaskItem<Exception?, Fallout4Group.ErrorMask<ObjectVisibilityManager.ErrorMask>?>? ObjectVisibilityManagers;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Fallout4Mod_FieldIndex enu = (Fallout4Mod_FieldIndex)index;
                switch (enu)
                {
                    case Fallout4Mod_FieldIndex.ModHeader:
                        return ModHeader;
                    case Fallout4Mod_FieldIndex.GameSettings:
                        return GameSettings;
                    case Fallout4Mod_FieldIndex.Keywords:
                        return Keywords;
                    case Fallout4Mod_FieldIndex.LocationReferenceTypes:
                        return LocationReferenceTypes;
                    case Fallout4Mod_FieldIndex.Actions:
                        return Actions;
                    case Fallout4Mod_FieldIndex.Transforms:
                        return Transforms;
                    case Fallout4Mod_FieldIndex.Components:
                        return Components;
                    case Fallout4Mod_FieldIndex.TextureSets:
                        return TextureSets;
                    case Fallout4Mod_FieldIndex.Globals:
                        return Globals;
                    case Fallout4Mod_FieldIndex.DamageTypes:
                        return DamageTypes;
                    case Fallout4Mod_FieldIndex.Classes:
                        return Classes;
                    case Fallout4Mod_FieldIndex.Factions:
                        return Factions;
                    case Fallout4Mod_FieldIndex.HeadParts:
                        return HeadParts;
                    case Fallout4Mod_FieldIndex.Races:
                        return Races;
                    case Fallout4Mod_FieldIndex.SoundMarkers:
                        return SoundMarkers;
                    case Fallout4Mod_FieldIndex.AcousticSpaces:
                        return AcousticSpaces;
                    case Fallout4Mod_FieldIndex.MagicEffects:
                        return MagicEffects;
                    case Fallout4Mod_FieldIndex.LandscapeTextures:
                        return LandscapeTextures;
                    case Fallout4Mod_FieldIndex.ObjectEffects:
                        return ObjectEffects;
                    case Fallout4Mod_FieldIndex.Spells:
                        return Spells;
                    case Fallout4Mod_FieldIndex.Activators:
                        return Activators;
                    case Fallout4Mod_FieldIndex.TalkingActivators:
                        return TalkingActivators;
                    case Fallout4Mod_FieldIndex.Armors:
                        return Armors;
                    case Fallout4Mod_FieldIndex.Books:
                        return Books;
                    case Fallout4Mod_FieldIndex.Containers:
                        return Containers;
                    case Fallout4Mod_FieldIndex.Doors:
                        return Doors;
                    case Fallout4Mod_FieldIndex.Ingredients:
                        return Ingredients;
                    case Fallout4Mod_FieldIndex.Lights:
                        return Lights;
                    case Fallout4Mod_FieldIndex.MiscItems:
                        return MiscItems;
                    case Fallout4Mod_FieldIndex.Statics:
                        return Statics;
                    case Fallout4Mod_FieldIndex.StaticCollections:
                        return StaticCollections;
                    case Fallout4Mod_FieldIndex.MovableStatics:
                        return MovableStatics;
                    case Fallout4Mod_FieldIndex.Grasses:
                        return Grasses;
                    case Fallout4Mod_FieldIndex.Trees:
                        return Trees;
                    case Fallout4Mod_FieldIndex.Florae:
                        return Florae;
                    case Fallout4Mod_FieldIndex.Furniture:
                        return Furniture;
                    case Fallout4Mod_FieldIndex.Weapons:
                        return Weapons;
                    case Fallout4Mod_FieldIndex.Ammunitions:
                        return Ammunitions;
                    case Fallout4Mod_FieldIndex.Npcs:
                        return Npcs;
                    case Fallout4Mod_FieldIndex.LeveledNpcs:
                        return LeveledNpcs;
                    case Fallout4Mod_FieldIndex.Keys:
                        return Keys;
                    case Fallout4Mod_FieldIndex.Ingestibles:
                        return Ingestibles;
                    case Fallout4Mod_FieldIndex.IdleMarkers:
                        return IdleMarkers;
                    case Fallout4Mod_FieldIndex.Holotapes:
                        return Holotapes;
                    case Fallout4Mod_FieldIndex.Projectiles:
                        return Projectiles;
                    case Fallout4Mod_FieldIndex.Hazards:
                        return Hazards;
                    case Fallout4Mod_FieldIndex.BendableSplines:
                        return BendableSplines;
                    case Fallout4Mod_FieldIndex.Terminals:
                        return Terminals;
                    case Fallout4Mod_FieldIndex.LeveledItems:
                        return LeveledItems;
                    case Fallout4Mod_FieldIndex.Weather:
                        return Weather;
                    case Fallout4Mod_FieldIndex.Climates:
                        return Climates;
                    case Fallout4Mod_FieldIndex.ShaderParticleGeometries:
                        return ShaderParticleGeometries;
                    case Fallout4Mod_FieldIndex.VisualEffects:
                        return VisualEffects;
                    case Fallout4Mod_FieldIndex.Regions:
                        return Regions;
                    case Fallout4Mod_FieldIndex.NavigationMeshInfoMaps:
                        return NavigationMeshInfoMaps;
                    case Fallout4Mod_FieldIndex.Cells:
                        return Cells;
                    case Fallout4Mod_FieldIndex.Worldspaces:
                        return Worldspaces;
                    case Fallout4Mod_FieldIndex.Quests:
                        return Quests;
                    case Fallout4Mod_FieldIndex.IdleAnimations:
                        return IdleAnimations;
                    case Fallout4Mod_FieldIndex.Packages:
                        return Packages;
                    case Fallout4Mod_FieldIndex.CombatStyles:
                        return CombatStyles;
                    case Fallout4Mod_FieldIndex.LoadScreens:
                        return LoadScreens;
                    case Fallout4Mod_FieldIndex.AnimatedObjects:
                        return AnimatedObjects;
                    case Fallout4Mod_FieldIndex.Waters:
                        return Waters;
                    case Fallout4Mod_FieldIndex.EffectShaders:
                        return EffectShaders;
                    case Fallout4Mod_FieldIndex.Explosions:
                        return Explosions;
                    case Fallout4Mod_FieldIndex.Debris:
                        return Debris;
                    case Fallout4Mod_FieldIndex.ImageSpaces:
                        return ImageSpaces;
                    case Fallout4Mod_FieldIndex.ImageSpaceAdapters:
                        return ImageSpaceAdapters;
                    case Fallout4Mod_FieldIndex.FormLists:
                        return FormLists;
                    case Fallout4Mod_FieldIndex.Perks:
                        return Perks;
                    case Fallout4Mod_FieldIndex.BodyParts:
                        return BodyParts;
                    case Fallout4Mod_FieldIndex.AddonNodes:
                        return AddonNodes;
                    case Fallout4Mod_FieldIndex.ActorValueInformation:
                        return ActorValueInformation;
                    case Fallout4Mod_FieldIndex.CameraShots:
                        return CameraShots;
                    case Fallout4Mod_FieldIndex.CameraPaths:
                        return CameraPaths;
                    case Fallout4Mod_FieldIndex.VoiceTypes:
                        return VoiceTypes;
                    case Fallout4Mod_FieldIndex.MaterialTypes:
                        return MaterialTypes;
                    case Fallout4Mod_FieldIndex.Impacts:
                        return Impacts;
                    case Fallout4Mod_FieldIndex.ImpactDataSets:
                        return ImpactDataSets;
                    case Fallout4Mod_FieldIndex.ArmorAddons:
                        return ArmorAddons;
                    case Fallout4Mod_FieldIndex.EncounterZones:
                        return EncounterZones;
                    case Fallout4Mod_FieldIndex.Locations:
                        return Locations;
                    case Fallout4Mod_FieldIndex.Messages:
                        return Messages;
                    case Fallout4Mod_FieldIndex.DefaultObjectManagers:
                        return DefaultObjectManagers;
                    case Fallout4Mod_FieldIndex.DefaultObjects:
                        return DefaultObjects;
                    case Fallout4Mod_FieldIndex.LightingTemplates:
                        return LightingTemplates;
                    case Fallout4Mod_FieldIndex.MusicTypes:
                        return MusicTypes;
                    case Fallout4Mod_FieldIndex.Footsteps:
                        return Footsteps;
                    case Fallout4Mod_FieldIndex.FootstepSets:
                        return FootstepSets;
                    case Fallout4Mod_FieldIndex.StoryManagerBranchNodes:
                        return StoryManagerBranchNodes;
                    case Fallout4Mod_FieldIndex.StoryManagerQuestNodes:
                        return StoryManagerQuestNodes;
                    case Fallout4Mod_FieldIndex.StoryManagerEventNodes:
                        return StoryManagerEventNodes;
                    case Fallout4Mod_FieldIndex.MusicTracks:
                        return MusicTracks;
                    case Fallout4Mod_FieldIndex.DialogViews:
                        return DialogViews;
                    case Fallout4Mod_FieldIndex.EquipTypes:
                        return EquipTypes;
                    case Fallout4Mod_FieldIndex.Relationships:
                        return Relationships;
                    case Fallout4Mod_FieldIndex.AssociationTypes:
                        return AssociationTypes;
                    case Fallout4Mod_FieldIndex.Outfits:
                        return Outfits;
                    case Fallout4Mod_FieldIndex.ArtObjects:
                        return ArtObjects;
                    case Fallout4Mod_FieldIndex.MaterialObjects:
                        return MaterialObjects;
                    case Fallout4Mod_FieldIndex.MovementTypes:
                        return MovementTypes;
                    case Fallout4Mod_FieldIndex.SoundDescriptors:
                        return SoundDescriptors;
                    case Fallout4Mod_FieldIndex.SoundCategories:
                        return SoundCategories;
                    case Fallout4Mod_FieldIndex.SoundOutputModels:
                        return SoundOutputModels;
                    case Fallout4Mod_FieldIndex.CollisionLayers:
                        return CollisionLayers;
                    case Fallout4Mod_FieldIndex.Colors:
                        return Colors;
                    case Fallout4Mod_FieldIndex.ReverbParameters:
                        return ReverbParameters;
                    case Fallout4Mod_FieldIndex.PackIns:
                        return PackIns;
                    case Fallout4Mod_FieldIndex.ReferenceGroups:
                        return ReferenceGroups;
                    case Fallout4Mod_FieldIndex.AimModels:
                        return AimModels;
                    case Fallout4Mod_FieldIndex.Layers:
                        return Layers;
                    case Fallout4Mod_FieldIndex.ConstructibleObjects:
                        return ConstructibleObjects;
                    case Fallout4Mod_FieldIndex.ObjectModifications:
                        return ObjectModifications;
                    case Fallout4Mod_FieldIndex.MaterialSwaps:
                        return MaterialSwaps;
                    case Fallout4Mod_FieldIndex.Zooms:
                        return Zooms;
                    case Fallout4Mod_FieldIndex.InstanceNamingRules:
                        return InstanceNamingRules;
                    case Fallout4Mod_FieldIndex.SoundKeywordMappings:
                        return SoundKeywordMappings;
                    case Fallout4Mod_FieldIndex.AudioEffectChains:
                        return AudioEffectChains;
                    case Fallout4Mod_FieldIndex.SceneCollections:
                        return SceneCollections;
                    case Fallout4Mod_FieldIndex.AttractionRules:
                        return AttractionRules;
                    case Fallout4Mod_FieldIndex.AudioCategorySnapshots:
                        return AudioCategorySnapshots;
                    case Fallout4Mod_FieldIndex.AnimationSoundTagSets:
                        return AnimationSoundTagSets;
                    case Fallout4Mod_FieldIndex.NavigationMeshObstacleManagers:
                        return NavigationMeshObstacleManagers;
                    case Fallout4Mod_FieldIndex.LensFlares:
                        return LensFlares;
                    case Fallout4Mod_FieldIndex.GodRays:
                        return GodRays;
                    case Fallout4Mod_FieldIndex.ObjectVisibilityManagers:
                        return ObjectVisibilityManagers;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Fallout4Mod_FieldIndex enu = (Fallout4Mod_FieldIndex)index;
                switch (enu)
                {
                    case Fallout4Mod_FieldIndex.ModHeader:
                        this.ModHeader = new MaskItem<Exception?, Fallout4ModHeader.ErrorMask?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.GameSettings:
                        this.GameSettings = new MaskItem<Exception?, Fallout4Group.ErrorMask<GameSetting.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, Fallout4Group.ErrorMask<Keyword.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = new MaskItem<Exception?, Fallout4Group.ErrorMask<LocationReferenceType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Actions:
                        this.Actions = new MaskItem<Exception?, Fallout4Group.ErrorMask<ActionRecord.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Transforms:
                        this.Transforms = new MaskItem<Exception?, Fallout4Group.ErrorMask<Transform.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, Fallout4Group.ErrorMask<Component.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.TextureSets:
                        this.TextureSets = new MaskItem<Exception?, Fallout4Group.ErrorMask<TextureSet.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Globals:
                        this.Globals = new MaskItem<Exception?, Fallout4Group.ErrorMask<Global.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.DamageTypes:
                        this.DamageTypes = new MaskItem<Exception?, Fallout4Group.ErrorMask<ADamageType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Classes:
                        this.Classes = new MaskItem<Exception?, Fallout4Group.ErrorMask<Class.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, Fallout4Group.ErrorMask<Faction.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, Fallout4Group.ErrorMask<HeadPart.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Races:
                        this.Races = new MaskItem<Exception?, Fallout4Group.ErrorMask<Race.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.SoundMarkers:
                        this.SoundMarkers = new MaskItem<Exception?, Fallout4Group.ErrorMask<SoundMarker.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AcousticSpaces:
                        this.AcousticSpaces = new MaskItem<Exception?, Fallout4Group.ErrorMask<AcousticSpace.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MagicEffects:
                        this.MagicEffects = new MaskItem<Exception?, Fallout4Group.ErrorMask<MagicEffect.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LandscapeTextures:
                        this.LandscapeTextures = new MaskItem<Exception?, Fallout4Group.ErrorMask<LandscapeTexture.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ObjectEffects:
                        this.ObjectEffects = new MaskItem<Exception?, Fallout4Group.ErrorMask<ObjectEffect.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, Fallout4Group.ErrorMask<Spell.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Activators:
                        this.Activators = new MaskItem<Exception?, Fallout4Group.ErrorMask<Activator.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.TalkingActivators:
                        this.TalkingActivators = new MaskItem<Exception?, Fallout4Group.ErrorMask<TalkingActivator.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Armors:
                        this.Armors = new MaskItem<Exception?, Fallout4Group.ErrorMask<Armor.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Books:
                        this.Books = new MaskItem<Exception?, Fallout4Group.ErrorMask<Book.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Containers:
                        this.Containers = new MaskItem<Exception?, Fallout4Group.ErrorMask<Container.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Doors:
                        this.Doors = new MaskItem<Exception?, Fallout4Group.ErrorMask<Door.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Ingredients:
                        this.Ingredients = new MaskItem<Exception?, Fallout4Group.ErrorMask<Ingredient.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Lights:
                        this.Lights = new MaskItem<Exception?, Fallout4Group.ErrorMask<Light.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MiscItems:
                        this.MiscItems = new MaskItem<Exception?, Fallout4Group.ErrorMask<MiscItem.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Statics:
                        this.Statics = new MaskItem<Exception?, Fallout4Group.ErrorMask<Static.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.StaticCollections:
                        this.StaticCollections = new MaskItem<Exception?, Fallout4Group.ErrorMask<StaticCollection.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MovableStatics:
                        this.MovableStatics = new MaskItem<Exception?, Fallout4Group.ErrorMask<MovableStatic.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Grasses:
                        this.Grasses = new MaskItem<Exception?, Fallout4Group.ErrorMask<Grass.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Trees:
                        this.Trees = new MaskItem<Exception?, Fallout4Group.ErrorMask<Tree.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Florae:
                        this.Florae = new MaskItem<Exception?, Fallout4Group.ErrorMask<Flora.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Furniture:
                        this.Furniture = new MaskItem<Exception?, Fallout4Group.ErrorMask<Furniture.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Weapons:
                        this.Weapons = new MaskItem<Exception?, Fallout4Group.ErrorMask<Weapon.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Ammunitions:
                        this.Ammunitions = new MaskItem<Exception?, Fallout4Group.ErrorMask<Ammunition.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Npcs:
                        this.Npcs = new MaskItem<Exception?, Fallout4Group.ErrorMask<Npc.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LeveledNpcs:
                        this.LeveledNpcs = new MaskItem<Exception?, Fallout4Group.ErrorMask<LeveledNpc.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Keys:
                        this.Keys = new MaskItem<Exception?, Fallout4Group.ErrorMask<Key.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Ingestibles:
                        this.Ingestibles = new MaskItem<Exception?, Fallout4Group.ErrorMask<Ingestible.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.IdleMarkers:
                        this.IdleMarkers = new MaskItem<Exception?, Fallout4Group.ErrorMask<IdleMarker.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Holotapes:
                        this.Holotapes = new MaskItem<Exception?, Fallout4Group.ErrorMask<Holotape.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Projectiles:
                        this.Projectiles = new MaskItem<Exception?, Fallout4Group.ErrorMask<Projectile.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Hazards:
                        this.Hazards = new MaskItem<Exception?, Fallout4Group.ErrorMask<Hazard.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.BendableSplines:
                        this.BendableSplines = new MaskItem<Exception?, Fallout4Group.ErrorMask<BendableSpline.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Terminals:
                        this.Terminals = new MaskItem<Exception?, Fallout4Group.ErrorMask<Terminal.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LeveledItems:
                        this.LeveledItems = new MaskItem<Exception?, Fallout4Group.ErrorMask<LeveledItem.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Weather:
                        this.Weather = new MaskItem<Exception?, Fallout4Group.ErrorMask<Weather.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Climates:
                        this.Climates = new MaskItem<Exception?, Fallout4Group.ErrorMask<Climate.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ShaderParticleGeometries:
                        this.ShaderParticleGeometries = new MaskItem<Exception?, Fallout4Group.ErrorMask<ShaderParticleGeometry.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.VisualEffects:
                        this.VisualEffects = new MaskItem<Exception?, Fallout4Group.ErrorMask<VisualEffect.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Regions:
                        this.Regions = new MaskItem<Exception?, Fallout4Group.ErrorMask<Region.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.NavigationMeshInfoMaps:
                        this.NavigationMeshInfoMaps = new MaskItem<Exception?, Fallout4Group.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Cells:
                        this.Cells = new MaskItem<Exception?, Fallout4ListGroup.ErrorMask<CellBlock.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Worldspaces:
                        this.Worldspaces = new MaskItem<Exception?, Fallout4Group.ErrorMask<Worldspace.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Quests:
                        this.Quests = new MaskItem<Exception?, Fallout4Group.ErrorMask<Quest.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = new MaskItem<Exception?, Fallout4Group.ErrorMask<IdleAnimation.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Packages:
                        this.Packages = new MaskItem<Exception?, Fallout4Group.ErrorMask<Package.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.CombatStyles:
                        this.CombatStyles = new MaskItem<Exception?, Fallout4Group.ErrorMask<CombatStyle.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LoadScreens:
                        this.LoadScreens = new MaskItem<Exception?, Fallout4Group.ErrorMask<LoadScreen.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = new MaskItem<Exception?, Fallout4Group.ErrorMask<AnimatedObject.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Waters:
                        this.Waters = new MaskItem<Exception?, Fallout4Group.ErrorMask<Water.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.EffectShaders:
                        this.EffectShaders = new MaskItem<Exception?, Fallout4Group.ErrorMask<EffectShader.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Explosions:
                        this.Explosions = new MaskItem<Exception?, Fallout4Group.ErrorMask<Explosion.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Debris:
                        this.Debris = new MaskItem<Exception?, Fallout4Group.ErrorMask<Debris.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ImageSpaces:
                        this.ImageSpaces = new MaskItem<Exception?, Fallout4Group.ErrorMask<ImageSpace.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ImageSpaceAdapters:
                        this.ImageSpaceAdapters = new MaskItem<Exception?, Fallout4Group.ErrorMask<ImageSpaceAdapter.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.FormLists:
                        this.FormLists = new MaskItem<Exception?, Fallout4Group.ErrorMask<FormList.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Perks:
                        this.Perks = new MaskItem<Exception?, Fallout4Group.ErrorMask<Perk.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.BodyParts:
                        this.BodyParts = new MaskItem<Exception?, Fallout4Group.ErrorMask<BodyPartData.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AddonNodes:
                        this.AddonNodes = new MaskItem<Exception?, Fallout4Group.ErrorMask<AddonNode.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ActorValueInformation:
                        this.ActorValueInformation = new MaskItem<Exception?, Fallout4Group.ErrorMask<ActorValueInformation.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.CameraShots:
                        this.CameraShots = new MaskItem<Exception?, Fallout4Group.ErrorMask<CameraShot.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.CameraPaths:
                        this.CameraPaths = new MaskItem<Exception?, Fallout4Group.ErrorMask<CameraPath.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.VoiceTypes:
                        this.VoiceTypes = new MaskItem<Exception?, Fallout4Group.ErrorMask<VoiceType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MaterialTypes:
                        this.MaterialTypes = new MaskItem<Exception?, Fallout4Group.ErrorMask<MaterialType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Impacts:
                        this.Impacts = new MaskItem<Exception?, Fallout4Group.ErrorMask<Impact.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ImpactDataSets:
                        this.ImpactDataSets = new MaskItem<Exception?, Fallout4Group.ErrorMask<ImpactDataSet.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ArmorAddons:
                        this.ArmorAddons = new MaskItem<Exception?, Fallout4Group.ErrorMask<ArmorAddon.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.EncounterZones:
                        this.EncounterZones = new MaskItem<Exception?, Fallout4Group.ErrorMask<EncounterZone.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Locations:
                        this.Locations = new MaskItem<Exception?, Fallout4Group.ErrorMask<Location.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Messages:
                        this.Messages = new MaskItem<Exception?, Fallout4Group.ErrorMask<Message.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.DefaultObjectManagers:
                        this.DefaultObjectManagers = new MaskItem<Exception?, Fallout4Group.ErrorMask<DefaultObjectManager.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.DefaultObjects:
                        this.DefaultObjects = new MaskItem<Exception?, Fallout4Group.ErrorMask<DefaultObject.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LightingTemplates:
                        this.LightingTemplates = new MaskItem<Exception?, Fallout4Group.ErrorMask<LightingTemplate.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MusicTypes:
                        this.MusicTypes = new MaskItem<Exception?, Fallout4Group.ErrorMask<MusicType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Footsteps:
                        this.Footsteps = new MaskItem<Exception?, Fallout4Group.ErrorMask<Footstep.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.FootstepSets:
                        this.FootstepSets = new MaskItem<Exception?, Fallout4Group.ErrorMask<FootstepSet.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.StoryManagerBranchNodes:
                        this.StoryManagerBranchNodes = new MaskItem<Exception?, Fallout4Group.ErrorMask<StoryManagerBranchNode.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.StoryManagerQuestNodes:
                        this.StoryManagerQuestNodes = new MaskItem<Exception?, Fallout4Group.ErrorMask<StoryManagerQuestNode.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.StoryManagerEventNodes:
                        this.StoryManagerEventNodes = new MaskItem<Exception?, Fallout4Group.ErrorMask<StoryManagerEventNode.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MusicTracks:
                        this.MusicTracks = new MaskItem<Exception?, Fallout4Group.ErrorMask<MusicTrack.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.DialogViews:
                        this.DialogViews = new MaskItem<Exception?, Fallout4Group.ErrorMask<DialogView.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.EquipTypes:
                        this.EquipTypes = new MaskItem<Exception?, Fallout4Group.ErrorMask<EquipType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Relationships:
                        this.Relationships = new MaskItem<Exception?, Fallout4Group.ErrorMask<Relationship.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AssociationTypes:
                        this.AssociationTypes = new MaskItem<Exception?, Fallout4Group.ErrorMask<AssociationType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Outfits:
                        this.Outfits = new MaskItem<Exception?, Fallout4Group.ErrorMask<Outfit.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ArtObjects:
                        this.ArtObjects = new MaskItem<Exception?, Fallout4Group.ErrorMask<ArtObject.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MaterialObjects:
                        this.MaterialObjects = new MaskItem<Exception?, Fallout4Group.ErrorMask<MaterialObject.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MovementTypes:
                        this.MovementTypes = new MaskItem<Exception?, Fallout4Group.ErrorMask<MovementType.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.SoundDescriptors:
                        this.SoundDescriptors = new MaskItem<Exception?, Fallout4Group.ErrorMask<SoundDescriptor.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.SoundCategories:
                        this.SoundCategories = new MaskItem<Exception?, Fallout4Group.ErrorMask<SoundCategory.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.SoundOutputModels:
                        this.SoundOutputModels = new MaskItem<Exception?, Fallout4Group.ErrorMask<SoundOutputModel.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.CollisionLayers:
                        this.CollisionLayers = new MaskItem<Exception?, Fallout4Group.ErrorMask<CollisionLayer.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Colors:
                        this.Colors = new MaskItem<Exception?, Fallout4Group.ErrorMask<ColorRecord.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ReverbParameters:
                        this.ReverbParameters = new MaskItem<Exception?, Fallout4Group.ErrorMask<ReverbParameters.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.PackIns:
                        this.PackIns = new MaskItem<Exception?, Fallout4Group.ErrorMask<PackIn.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ReferenceGroups:
                        this.ReferenceGroups = new MaskItem<Exception?, Fallout4Group.ErrorMask<ReferenceGroup.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AimModels:
                        this.AimModels = new MaskItem<Exception?, Fallout4Group.ErrorMask<AimModel.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Layers:
                        this.Layers = new MaskItem<Exception?, Fallout4Group.ErrorMask<Layer.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ConstructibleObjects:
                        this.ConstructibleObjects = new MaskItem<Exception?, Fallout4Group.ErrorMask<ConstructibleObject.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ObjectModifications:
                        this.ObjectModifications = new MaskItem<Exception?, Fallout4Group.ErrorMask<AObjectModification.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.MaterialSwaps:
                        this.MaterialSwaps = new MaskItem<Exception?, Fallout4Group.ErrorMask<MaterialSwap.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.Zooms:
                        this.Zooms = new MaskItem<Exception?, Fallout4Group.ErrorMask<Zoom.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.InstanceNamingRules:
                        this.InstanceNamingRules = new MaskItem<Exception?, Fallout4Group.ErrorMask<InstanceNamingRules.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.SoundKeywordMappings:
                        this.SoundKeywordMappings = new MaskItem<Exception?, Fallout4Group.ErrorMask<SoundKeywordMapping.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AudioEffectChains:
                        this.AudioEffectChains = new MaskItem<Exception?, Fallout4Group.ErrorMask<AudioEffectChain.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.SceneCollections:
                        this.SceneCollections = new MaskItem<Exception?, Fallout4Group.ErrorMask<SceneCollection.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AttractionRules:
                        this.AttractionRules = new MaskItem<Exception?, Fallout4Group.ErrorMask<AttractionRule.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AudioCategorySnapshots:
                        this.AudioCategorySnapshots = new MaskItem<Exception?, Fallout4Group.ErrorMask<AudioCategorySnapshot.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.AnimationSoundTagSets:
                        this.AnimationSoundTagSets = new MaskItem<Exception?, Fallout4Group.ErrorMask<AnimationSoundTagSet.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.NavigationMeshObstacleManagers:
                        this.NavigationMeshObstacleManagers = new MaskItem<Exception?, Fallout4Group.ErrorMask<NavigationMeshObstacleManager.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.LensFlares:
                        this.LensFlares = new MaskItem<Exception?, Fallout4Group.ErrorMask<LensFlare.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.GodRays:
                        this.GodRays = new MaskItem<Exception?, Fallout4Group.ErrorMask<GodRays.ErrorMask>?>(ex, null);
                        break;
                    case Fallout4Mod_FieldIndex.ObjectVisibilityManagers:
                        this.ObjectVisibilityManagers = new MaskItem<Exception?, Fallout4Group.ErrorMask<ObjectVisibilityManager.ErrorMask>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Fallout4Mod_FieldIndex enu = (Fallout4Mod_FieldIndex)index;
                switch (enu)
                {
                    case Fallout4Mod_FieldIndex.ModHeader:
                        this.ModHeader = (MaskItem<Exception?, Fallout4ModHeader.ErrorMask?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.GameSettings:
                        this.GameSettings = (MaskItem<Exception?, Fallout4Group.ErrorMask<GameSetting.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, Fallout4Group.ErrorMask<Keyword.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = (MaskItem<Exception?, Fallout4Group.ErrorMask<LocationReferenceType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Actions:
                        this.Actions = (MaskItem<Exception?, Fallout4Group.ErrorMask<ActionRecord.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Transforms:
                        this.Transforms = (MaskItem<Exception?, Fallout4Group.ErrorMask<Transform.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, Fallout4Group.ErrorMask<Component.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.TextureSets:
                        this.TextureSets = (MaskItem<Exception?, Fallout4Group.ErrorMask<TextureSet.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Globals:
                        this.Globals = (MaskItem<Exception?, Fallout4Group.ErrorMask<Global.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.DamageTypes:
                        this.DamageTypes = (MaskItem<Exception?, Fallout4Group.ErrorMask<ADamageType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Classes:
                        this.Classes = (MaskItem<Exception?, Fallout4Group.ErrorMask<Class.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, Fallout4Group.ErrorMask<Faction.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, Fallout4Group.ErrorMask<HeadPart.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Races:
                        this.Races = (MaskItem<Exception?, Fallout4Group.ErrorMask<Race.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.SoundMarkers:
                        this.SoundMarkers = (MaskItem<Exception?, Fallout4Group.ErrorMask<SoundMarker.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AcousticSpaces:
                        this.AcousticSpaces = (MaskItem<Exception?, Fallout4Group.ErrorMask<AcousticSpace.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MagicEffects:
                        this.MagicEffects = (MaskItem<Exception?, Fallout4Group.ErrorMask<MagicEffect.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LandscapeTextures:
                        this.LandscapeTextures = (MaskItem<Exception?, Fallout4Group.ErrorMask<LandscapeTexture.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ObjectEffects:
                        this.ObjectEffects = (MaskItem<Exception?, Fallout4Group.ErrorMask<ObjectEffect.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, Fallout4Group.ErrorMask<Spell.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Activators:
                        this.Activators = (MaskItem<Exception?, Fallout4Group.ErrorMask<Activator.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.TalkingActivators:
                        this.TalkingActivators = (MaskItem<Exception?, Fallout4Group.ErrorMask<TalkingActivator.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Armors:
                        this.Armors = (MaskItem<Exception?, Fallout4Group.ErrorMask<Armor.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Books:
                        this.Books = (MaskItem<Exception?, Fallout4Group.ErrorMask<Book.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Containers:
                        this.Containers = (MaskItem<Exception?, Fallout4Group.ErrorMask<Container.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Doors:
                        this.Doors = (MaskItem<Exception?, Fallout4Group.ErrorMask<Door.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Ingredients:
                        this.Ingredients = (MaskItem<Exception?, Fallout4Group.ErrorMask<Ingredient.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Lights:
                        this.Lights = (MaskItem<Exception?, Fallout4Group.ErrorMask<Light.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MiscItems:
                        this.MiscItems = (MaskItem<Exception?, Fallout4Group.ErrorMask<MiscItem.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Statics:
                        this.Statics = (MaskItem<Exception?, Fallout4Group.ErrorMask<Static.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.StaticCollections:
                        this.StaticCollections = (MaskItem<Exception?, Fallout4Group.ErrorMask<StaticCollection.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MovableStatics:
                        this.MovableStatics = (MaskItem<Exception?, Fallout4Group.ErrorMask<MovableStatic.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Grasses:
                        this.Grasses = (MaskItem<Exception?, Fallout4Group.ErrorMask<Grass.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Trees:
                        this.Trees = (MaskItem<Exception?, Fallout4Group.ErrorMask<Tree.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Florae:
                        this.Florae = (MaskItem<Exception?, Fallout4Group.ErrorMask<Flora.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Furniture:
                        this.Furniture = (MaskItem<Exception?, Fallout4Group.ErrorMask<Furniture.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Weapons:
                        this.Weapons = (MaskItem<Exception?, Fallout4Group.ErrorMask<Weapon.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Ammunitions:
                        this.Ammunitions = (MaskItem<Exception?, Fallout4Group.ErrorMask<Ammunition.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Npcs:
                        this.Npcs = (MaskItem<Exception?, Fallout4Group.ErrorMask<Npc.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LeveledNpcs:
                        this.LeveledNpcs = (MaskItem<Exception?, Fallout4Group.ErrorMask<LeveledNpc.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Keys:
                        this.Keys = (MaskItem<Exception?, Fallout4Group.ErrorMask<Key.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Ingestibles:
                        this.Ingestibles = (MaskItem<Exception?, Fallout4Group.ErrorMask<Ingestible.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.IdleMarkers:
                        this.IdleMarkers = (MaskItem<Exception?, Fallout4Group.ErrorMask<IdleMarker.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Holotapes:
                        this.Holotapes = (MaskItem<Exception?, Fallout4Group.ErrorMask<Holotape.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Projectiles:
                        this.Projectiles = (MaskItem<Exception?, Fallout4Group.ErrorMask<Projectile.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Hazards:
                        this.Hazards = (MaskItem<Exception?, Fallout4Group.ErrorMask<Hazard.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.BendableSplines:
                        this.BendableSplines = (MaskItem<Exception?, Fallout4Group.ErrorMask<BendableSpline.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Terminals:
                        this.Terminals = (MaskItem<Exception?, Fallout4Group.ErrorMask<Terminal.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LeveledItems:
                        this.LeveledItems = (MaskItem<Exception?, Fallout4Group.ErrorMask<LeveledItem.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Weather:
                        this.Weather = (MaskItem<Exception?, Fallout4Group.ErrorMask<Weather.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Climates:
                        this.Climates = (MaskItem<Exception?, Fallout4Group.ErrorMask<Climate.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ShaderParticleGeometries:
                        this.ShaderParticleGeometries = (MaskItem<Exception?, Fallout4Group.ErrorMask<ShaderParticleGeometry.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.VisualEffects:
                        this.VisualEffects = (MaskItem<Exception?, Fallout4Group.ErrorMask<VisualEffect.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Regions:
                        this.Regions = (MaskItem<Exception?, Fallout4Group.ErrorMask<Region.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.NavigationMeshInfoMaps:
                        this.NavigationMeshInfoMaps = (MaskItem<Exception?, Fallout4Group.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Cells:
                        this.Cells = (MaskItem<Exception?, Fallout4ListGroup.ErrorMask<CellBlock.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Worldspaces:
                        this.Worldspaces = (MaskItem<Exception?, Fallout4Group.ErrorMask<Worldspace.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Quests:
                        this.Quests = (MaskItem<Exception?, Fallout4Group.ErrorMask<Quest.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = (MaskItem<Exception?, Fallout4Group.ErrorMask<IdleAnimation.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Packages:
                        this.Packages = (MaskItem<Exception?, Fallout4Group.ErrorMask<Package.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.CombatStyles:
                        this.CombatStyles = (MaskItem<Exception?, Fallout4Group.ErrorMask<CombatStyle.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LoadScreens:
                        this.LoadScreens = (MaskItem<Exception?, Fallout4Group.ErrorMask<LoadScreen.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = (MaskItem<Exception?, Fallout4Group.ErrorMask<AnimatedObject.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Waters:
                        this.Waters = (MaskItem<Exception?, Fallout4Group.ErrorMask<Water.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.EffectShaders:
                        this.EffectShaders = (MaskItem<Exception?, Fallout4Group.ErrorMask<EffectShader.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Explosions:
                        this.Explosions = (MaskItem<Exception?, Fallout4Group.ErrorMask<Explosion.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Debris:
                        this.Debris = (MaskItem<Exception?, Fallout4Group.ErrorMask<Debris.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ImageSpaces:
                        this.ImageSpaces = (MaskItem<Exception?, Fallout4Group.ErrorMask<ImageSpace.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ImageSpaceAdapters:
                        this.ImageSpaceAdapters = (MaskItem<Exception?, Fallout4Group.ErrorMask<ImageSpaceAdapter.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.FormLists:
                        this.FormLists = (MaskItem<Exception?, Fallout4Group.ErrorMask<FormList.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Perks:
                        this.Perks = (MaskItem<Exception?, Fallout4Group.ErrorMask<Perk.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.BodyParts:
                        this.BodyParts = (MaskItem<Exception?, Fallout4Group.ErrorMask<BodyPartData.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AddonNodes:
                        this.AddonNodes = (MaskItem<Exception?, Fallout4Group.ErrorMask<AddonNode.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ActorValueInformation:
                        this.ActorValueInformation = (MaskItem<Exception?, Fallout4Group.ErrorMask<ActorValueInformation.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.CameraShots:
                        this.CameraShots = (MaskItem<Exception?, Fallout4Group.ErrorMask<CameraShot.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.CameraPaths:
                        this.CameraPaths = (MaskItem<Exception?, Fallout4Group.ErrorMask<CameraPath.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.VoiceTypes:
                        this.VoiceTypes = (MaskItem<Exception?, Fallout4Group.ErrorMask<VoiceType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MaterialTypes:
                        this.MaterialTypes = (MaskItem<Exception?, Fallout4Group.ErrorMask<MaterialType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Impacts:
                        this.Impacts = (MaskItem<Exception?, Fallout4Group.ErrorMask<Impact.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ImpactDataSets:
                        this.ImpactDataSets = (MaskItem<Exception?, Fallout4Group.ErrorMask<ImpactDataSet.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ArmorAddons:
                        this.ArmorAddons = (MaskItem<Exception?, Fallout4Group.ErrorMask<ArmorAddon.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.EncounterZones:
                        this.EncounterZones = (MaskItem<Exception?, Fallout4Group.ErrorMask<EncounterZone.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Locations:
                        this.Locations = (MaskItem<Exception?, Fallout4Group.ErrorMask<Location.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Messages:
                        this.Messages = (MaskItem<Exception?, Fallout4Group.ErrorMask<Message.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.DefaultObjectManagers:
                        this.DefaultObjectManagers = (MaskItem<Exception?, Fallout4Group.ErrorMask<DefaultObjectManager.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.DefaultObjects:
                        this.DefaultObjects = (MaskItem<Exception?, Fallout4Group.ErrorMask<DefaultObject.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LightingTemplates:
                        this.LightingTemplates = (MaskItem<Exception?, Fallout4Group.ErrorMask<LightingTemplate.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MusicTypes:
                        this.MusicTypes = (MaskItem<Exception?, Fallout4Group.ErrorMask<MusicType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Footsteps:
                        this.Footsteps = (MaskItem<Exception?, Fallout4Group.ErrorMask<Footstep.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.FootstepSets:
                        this.FootstepSets = (MaskItem<Exception?, Fallout4Group.ErrorMask<FootstepSet.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.StoryManagerBranchNodes:
                        this.StoryManagerBranchNodes = (MaskItem<Exception?, Fallout4Group.ErrorMask<StoryManagerBranchNode.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.StoryManagerQuestNodes:
                        this.StoryManagerQuestNodes = (MaskItem<Exception?, Fallout4Group.ErrorMask<StoryManagerQuestNode.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.StoryManagerEventNodes:
                        this.StoryManagerEventNodes = (MaskItem<Exception?, Fallout4Group.ErrorMask<StoryManagerEventNode.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MusicTracks:
                        this.MusicTracks = (MaskItem<Exception?, Fallout4Group.ErrorMask<MusicTrack.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.DialogViews:
                        this.DialogViews = (MaskItem<Exception?, Fallout4Group.ErrorMask<DialogView.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.EquipTypes:
                        this.EquipTypes = (MaskItem<Exception?, Fallout4Group.ErrorMask<EquipType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Relationships:
                        this.Relationships = (MaskItem<Exception?, Fallout4Group.ErrorMask<Relationship.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AssociationTypes:
                        this.AssociationTypes = (MaskItem<Exception?, Fallout4Group.ErrorMask<AssociationType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Outfits:
                        this.Outfits = (MaskItem<Exception?, Fallout4Group.ErrorMask<Outfit.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ArtObjects:
                        this.ArtObjects = (MaskItem<Exception?, Fallout4Group.ErrorMask<ArtObject.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MaterialObjects:
                        this.MaterialObjects = (MaskItem<Exception?, Fallout4Group.ErrorMask<MaterialObject.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MovementTypes:
                        this.MovementTypes = (MaskItem<Exception?, Fallout4Group.ErrorMask<MovementType.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.SoundDescriptors:
                        this.SoundDescriptors = (MaskItem<Exception?, Fallout4Group.ErrorMask<SoundDescriptor.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.SoundCategories:
                        this.SoundCategories = (MaskItem<Exception?, Fallout4Group.ErrorMask<SoundCategory.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.SoundOutputModels:
                        this.SoundOutputModels = (MaskItem<Exception?, Fallout4Group.ErrorMask<SoundOutputModel.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.CollisionLayers:
                        this.CollisionLayers = (MaskItem<Exception?, Fallout4Group.ErrorMask<CollisionLayer.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Colors:
                        this.Colors = (MaskItem<Exception?, Fallout4Group.ErrorMask<ColorRecord.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ReverbParameters:
                        this.ReverbParameters = (MaskItem<Exception?, Fallout4Group.ErrorMask<ReverbParameters.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.PackIns:
                        this.PackIns = (MaskItem<Exception?, Fallout4Group.ErrorMask<PackIn.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ReferenceGroups:
                        this.ReferenceGroups = (MaskItem<Exception?, Fallout4Group.ErrorMask<ReferenceGroup.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AimModels:
                        this.AimModels = (MaskItem<Exception?, Fallout4Group.ErrorMask<AimModel.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Layers:
                        this.Layers = (MaskItem<Exception?, Fallout4Group.ErrorMask<Layer.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ConstructibleObjects:
                        this.ConstructibleObjects = (MaskItem<Exception?, Fallout4Group.ErrorMask<ConstructibleObject.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ObjectModifications:
                        this.ObjectModifications = (MaskItem<Exception?, Fallout4Group.ErrorMask<AObjectModification.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.MaterialSwaps:
                        this.MaterialSwaps = (MaskItem<Exception?, Fallout4Group.ErrorMask<MaterialSwap.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.Zooms:
                        this.Zooms = (MaskItem<Exception?, Fallout4Group.ErrorMask<Zoom.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.InstanceNamingRules:
                        this.InstanceNamingRules = (MaskItem<Exception?, Fallout4Group.ErrorMask<InstanceNamingRules.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.SoundKeywordMappings:
                        this.SoundKeywordMappings = (MaskItem<Exception?, Fallout4Group.ErrorMask<SoundKeywordMapping.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AudioEffectChains:
                        this.AudioEffectChains = (MaskItem<Exception?, Fallout4Group.ErrorMask<AudioEffectChain.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.SceneCollections:
                        this.SceneCollections = (MaskItem<Exception?, Fallout4Group.ErrorMask<SceneCollection.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AttractionRules:
                        this.AttractionRules = (MaskItem<Exception?, Fallout4Group.ErrorMask<AttractionRule.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AudioCategorySnapshots:
                        this.AudioCategorySnapshots = (MaskItem<Exception?, Fallout4Group.ErrorMask<AudioCategorySnapshot.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.AnimationSoundTagSets:
                        this.AnimationSoundTagSets = (MaskItem<Exception?, Fallout4Group.ErrorMask<AnimationSoundTagSet.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.NavigationMeshObstacleManagers:
                        this.NavigationMeshObstacleManagers = (MaskItem<Exception?, Fallout4Group.ErrorMask<NavigationMeshObstacleManager.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.LensFlares:
                        this.LensFlares = (MaskItem<Exception?, Fallout4Group.ErrorMask<LensFlare.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.GodRays:
                        this.GodRays = (MaskItem<Exception?, Fallout4Group.ErrorMask<GodRays.ErrorMask>?>?)obj;
                        break;
                    case Fallout4Mod_FieldIndex.ObjectVisibilityManagers:
                        this.ObjectVisibilityManagers = (MaskItem<Exception?, Fallout4Group.ErrorMask<ObjectVisibilityManager.ErrorMask>?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ModHeader != null) return true;
                if (GameSettings != null) return true;
                if (Keywords != null) return true;
                if (LocationReferenceTypes != null) return true;
                if (Actions != null) return true;
                if (Transforms != null) return true;
                if (Components != null) return true;
                if (TextureSets != null) return true;
                if (Globals != null) return true;
                if (DamageTypes != null) return true;
                if (Classes != null) return true;
                if (Factions != null) return true;
                if (HeadParts != null) return true;
                if (Races != null) return true;
                if (SoundMarkers != null) return true;
                if (AcousticSpaces != null) return true;
                if (MagicEffects != null) return true;
                if (LandscapeTextures != null) return true;
                if (ObjectEffects != null) return true;
                if (Spells != null) return true;
                if (Activators != null) return true;
                if (TalkingActivators != null) return true;
                if (Armors != null) return true;
                if (Books != null) return true;
                if (Containers != null) return true;
                if (Doors != null) return true;
                if (Ingredients != null) return true;
                if (Lights != null) return true;
                if (MiscItems != null) return true;
                if (Statics != null) return true;
                if (StaticCollections != null) return true;
                if (MovableStatics != null) return true;
                if (Grasses != null) return true;
                if (Trees != null) return true;
                if (Florae != null) return true;
                if (Furniture != null) return true;
                if (Weapons != null) return true;
                if (Ammunitions != null) return true;
                if (Npcs != null) return true;
                if (LeveledNpcs != null) return true;
                if (Keys != null) return true;
                if (Ingestibles != null) return true;
                if (IdleMarkers != null) return true;
                if (Holotapes != null) return true;
                if (Projectiles != null) return true;
                if (Hazards != null) return true;
                if (BendableSplines != null) return true;
                if (Terminals != null) return true;
                if (LeveledItems != null) return true;
                if (Weather != null) return true;
                if (Climates != null) return true;
                if (ShaderParticleGeometries != null) return true;
                if (VisualEffects != null) return true;
                if (Regions != null) return true;
                if (NavigationMeshInfoMaps != null) return true;
                if (Cells != null) return true;
                if (Worldspaces != null) return true;
                if (Quests != null) return true;
                if (IdleAnimations != null) return true;
                if (Packages != null) return true;
                if (CombatStyles != null) return true;
                if (LoadScreens != null) return true;
                if (AnimatedObjects != null) return true;
                if (Waters != null) return true;
                if (EffectShaders != null) return true;
                if (Explosions != null) return true;
                if (Debris != null) return true;
                if (ImageSpaces != null) return true;
                if (ImageSpaceAdapters != null) return true;
                if (FormLists != null) return true;
                if (Perks != null) return true;
                if (BodyParts != null) return true;
                if (AddonNodes != null) return true;
                if (ActorValueInformation != null) return true;
                if (CameraShots != null) return true;
                if (CameraPaths != null) return true;
                if (VoiceTypes != null) return true;
                if (MaterialTypes != null) return true;
                if (Impacts != null) return true;
                if (ImpactDataSets != null) return true;
                if (ArmorAddons != null) return true;
                if (EncounterZones != null) return true;
                if (Locations != null) return true;
                if (Messages != null) return true;
                if (DefaultObjectManagers != null) return true;
                if (DefaultObjects != null) return true;
                if (LightingTemplates != null) return true;
                if (MusicTypes != null) return true;
                if (Footsteps != null) return true;
                if (FootstepSets != null) return true;
                if (StoryManagerBranchNodes != null) return true;
                if (StoryManagerQuestNodes != null) return true;
                if (StoryManagerEventNodes != null) return true;
                if (MusicTracks != null) return true;
                if (DialogViews != null) return true;
                if (EquipTypes != null) return true;
                if (Relationships != null) return true;
                if (AssociationTypes != null) return true;
                if (Outfits != null) return true;
                if (ArtObjects != null) return true;
                if (MaterialObjects != null) return true;
                if (MovementTypes != null) return true;
                if (SoundDescriptors != null) return true;
                if (SoundCategories != null) return true;
                if (SoundOutputModels != null) return true;
                if (CollisionLayers != null) return true;
                if (Colors != null) return true;
                if (ReverbParameters != null) return true;
                if (PackIns != null) return true;
                if (ReferenceGroups != null) return true;
                if (AimModels != null) return true;
                if (Layers != null) return true;
                if (ConstructibleObjects != null) return true;
                if (ObjectModifications != null) return true;
                if (MaterialSwaps != null) return true;
                if (Zooms != null) return true;
                if (InstanceNamingRules != null) return true;
                if (SoundKeywordMappings != null) return true;
                if (AudioEffectChains != null) return true;
                if (SceneCollections != null) return true;
                if (AttractionRules != null) return true;
                if (AudioCategorySnapshots != null) return true;
                if (AnimationSoundTagSets != null) return true;
                if (NavigationMeshObstacleManagers != null) return true;
                if (LensFlares != null) return true;
                if (GodRays != null) return true;
                if (ObjectVisibilityManagers != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                ModHeader?.Print(sb);
                GameSettings?.Print(sb);
                Keywords?.Print(sb);
                LocationReferenceTypes?.Print(sb);
                Actions?.Print(sb);
                Transforms?.Print(sb);
                Components?.Print(sb);
                TextureSets?.Print(sb);
                Globals?.Print(sb);
                DamageTypes?.Print(sb);
                Classes?.Print(sb);
                Factions?.Print(sb);
                HeadParts?.Print(sb);
                Races?.Print(sb);
                SoundMarkers?.Print(sb);
                AcousticSpaces?.Print(sb);
                MagicEffects?.Print(sb);
                LandscapeTextures?.Print(sb);
                ObjectEffects?.Print(sb);
                Spells?.Print(sb);
                Activators?.Print(sb);
                TalkingActivators?.Print(sb);
                Armors?.Print(sb);
                Books?.Print(sb);
                Containers?.Print(sb);
                Doors?.Print(sb);
                Ingredients?.Print(sb);
                Lights?.Print(sb);
                MiscItems?.Print(sb);
                Statics?.Print(sb);
                StaticCollections?.Print(sb);
                MovableStatics?.Print(sb);
                Grasses?.Print(sb);
                Trees?.Print(sb);
                Florae?.Print(sb);
                Furniture?.Print(sb);
                Weapons?.Print(sb);
                Ammunitions?.Print(sb);
                Npcs?.Print(sb);
                LeveledNpcs?.Print(sb);
                Keys?.Print(sb);
                Ingestibles?.Print(sb);
                IdleMarkers?.Print(sb);
                Holotapes?.Print(sb);
                Projectiles?.Print(sb);
                Hazards?.Print(sb);
                BendableSplines?.Print(sb);
                Terminals?.Print(sb);
                LeveledItems?.Print(sb);
                Weather?.Print(sb);
                Climates?.Print(sb);
                ShaderParticleGeometries?.Print(sb);
                VisualEffects?.Print(sb);
                Regions?.Print(sb);
                NavigationMeshInfoMaps?.Print(sb);
                Cells?.Print(sb);
                Worldspaces?.Print(sb);
                Quests?.Print(sb);
                IdleAnimations?.Print(sb);
                Packages?.Print(sb);
                CombatStyles?.Print(sb);
                LoadScreens?.Print(sb);
                AnimatedObjects?.Print(sb);
                Waters?.Print(sb);
                EffectShaders?.Print(sb);
                Explosions?.Print(sb);
                Debris?.Print(sb);
                ImageSpaces?.Print(sb);
                ImageSpaceAdapters?.Print(sb);
                FormLists?.Print(sb);
                Perks?.Print(sb);
                BodyParts?.Print(sb);
                AddonNodes?.Print(sb);
                ActorValueInformation?.Print(sb);
                CameraShots?.Print(sb);
                CameraPaths?.Print(sb);
                VoiceTypes?.Print(sb);
                MaterialTypes?.Print(sb);
                Impacts?.Print(sb);
                ImpactDataSets?.Print(sb);
                ArmorAddons?.Print(sb);
                EncounterZones?.Print(sb);
                Locations?.Print(sb);
                Messages?.Print(sb);
                DefaultObjectManagers?.Print(sb);
                DefaultObjects?.Print(sb);
                LightingTemplates?.Print(sb);
                MusicTypes?.Print(sb);
                Footsteps?.Print(sb);
                FootstepSets?.Print(sb);
                StoryManagerBranchNodes?.Print(sb);
                StoryManagerQuestNodes?.Print(sb);
                StoryManagerEventNodes?.Print(sb);
                MusicTracks?.Print(sb);
                DialogViews?.Print(sb);
                EquipTypes?.Print(sb);
                Relationships?.Print(sb);
                AssociationTypes?.Print(sb);
                Outfits?.Print(sb);
                ArtObjects?.Print(sb);
                MaterialObjects?.Print(sb);
                MovementTypes?.Print(sb);
                SoundDescriptors?.Print(sb);
                SoundCategories?.Print(sb);
                SoundOutputModels?.Print(sb);
                CollisionLayers?.Print(sb);
                Colors?.Print(sb);
                ReverbParameters?.Print(sb);
                PackIns?.Print(sb);
                ReferenceGroups?.Print(sb);
                AimModels?.Print(sb);
                Layers?.Print(sb);
                ConstructibleObjects?.Print(sb);
                ObjectModifications?.Print(sb);
                MaterialSwaps?.Print(sb);
                Zooms?.Print(sb);
                InstanceNamingRules?.Print(sb);
                SoundKeywordMappings?.Print(sb);
                AudioEffectChains?.Print(sb);
                SceneCollections?.Print(sb);
                AttractionRules?.Print(sb);
                AudioCategorySnapshots?.Print(sb);
                AnimationSoundTagSets?.Print(sb);
                NavigationMeshObstacleManagers?.Print(sb);
                LensFlares?.Print(sb);
                GodRays?.Print(sb);
                ObjectVisibilityManagers?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ModHeader = this.ModHeader.Combine(rhs.ModHeader, (l, r) => l.Combine(r));
                ret.GameSettings = this.GameSettings.Combine(rhs.GameSettings, (l, r) => l.Combine(r));
                ret.Keywords = this.Keywords.Combine(rhs.Keywords, (l, r) => l.Combine(r));
                ret.LocationReferenceTypes = this.LocationReferenceTypes.Combine(rhs.LocationReferenceTypes, (l, r) => l.Combine(r));
                ret.Actions = this.Actions.Combine(rhs.Actions, (l, r) => l.Combine(r));
                ret.Transforms = this.Transforms.Combine(rhs.Transforms, (l, r) => l.Combine(r));
                ret.Components = this.Components.Combine(rhs.Components, (l, r) => l.Combine(r));
                ret.TextureSets = this.TextureSets.Combine(rhs.TextureSets, (l, r) => l.Combine(r));
                ret.Globals = this.Globals.Combine(rhs.Globals, (l, r) => l.Combine(r));
                ret.DamageTypes = this.DamageTypes.Combine(rhs.DamageTypes, (l, r) => l.Combine(r));
                ret.Classes = this.Classes.Combine(rhs.Classes, (l, r) => l.Combine(r));
                ret.Factions = this.Factions.Combine(rhs.Factions, (l, r) => l.Combine(r));
                ret.HeadParts = this.HeadParts.Combine(rhs.HeadParts, (l, r) => l.Combine(r));
                ret.Races = this.Races.Combine(rhs.Races, (l, r) => l.Combine(r));
                ret.SoundMarkers = this.SoundMarkers.Combine(rhs.SoundMarkers, (l, r) => l.Combine(r));
                ret.AcousticSpaces = this.AcousticSpaces.Combine(rhs.AcousticSpaces, (l, r) => l.Combine(r));
                ret.MagicEffects = this.MagicEffects.Combine(rhs.MagicEffects, (l, r) => l.Combine(r));
                ret.LandscapeTextures = this.LandscapeTextures.Combine(rhs.LandscapeTextures, (l, r) => l.Combine(r));
                ret.ObjectEffects = this.ObjectEffects.Combine(rhs.ObjectEffects, (l, r) => l.Combine(r));
                ret.Spells = this.Spells.Combine(rhs.Spells, (l, r) => l.Combine(r));
                ret.Activators = this.Activators.Combine(rhs.Activators, (l, r) => l.Combine(r));
                ret.TalkingActivators = this.TalkingActivators.Combine(rhs.TalkingActivators, (l, r) => l.Combine(r));
                ret.Armors = this.Armors.Combine(rhs.Armors, (l, r) => l.Combine(r));
                ret.Books = this.Books.Combine(rhs.Books, (l, r) => l.Combine(r));
                ret.Containers = this.Containers.Combine(rhs.Containers, (l, r) => l.Combine(r));
                ret.Doors = this.Doors.Combine(rhs.Doors, (l, r) => l.Combine(r));
                ret.Ingredients = this.Ingredients.Combine(rhs.Ingredients, (l, r) => l.Combine(r));
                ret.Lights = this.Lights.Combine(rhs.Lights, (l, r) => l.Combine(r));
                ret.MiscItems = this.MiscItems.Combine(rhs.MiscItems, (l, r) => l.Combine(r));
                ret.Statics = this.Statics.Combine(rhs.Statics, (l, r) => l.Combine(r));
                ret.StaticCollections = this.StaticCollections.Combine(rhs.StaticCollections, (l, r) => l.Combine(r));
                ret.MovableStatics = this.MovableStatics.Combine(rhs.MovableStatics, (l, r) => l.Combine(r));
                ret.Grasses = this.Grasses.Combine(rhs.Grasses, (l, r) => l.Combine(r));
                ret.Trees = this.Trees.Combine(rhs.Trees, (l, r) => l.Combine(r));
                ret.Florae = this.Florae.Combine(rhs.Florae, (l, r) => l.Combine(r));
                ret.Furniture = this.Furniture.Combine(rhs.Furniture, (l, r) => l.Combine(r));
                ret.Weapons = this.Weapons.Combine(rhs.Weapons, (l, r) => l.Combine(r));
                ret.Ammunitions = this.Ammunitions.Combine(rhs.Ammunitions, (l, r) => l.Combine(r));
                ret.Npcs = this.Npcs.Combine(rhs.Npcs, (l, r) => l.Combine(r));
                ret.LeveledNpcs = this.LeveledNpcs.Combine(rhs.LeveledNpcs, (l, r) => l.Combine(r));
                ret.Keys = this.Keys.Combine(rhs.Keys, (l, r) => l.Combine(r));
                ret.Ingestibles = this.Ingestibles.Combine(rhs.Ingestibles, (l, r) => l.Combine(r));
                ret.IdleMarkers = this.IdleMarkers.Combine(rhs.IdleMarkers, (l, r) => l.Combine(r));
                ret.Holotapes = this.Holotapes.Combine(rhs.Holotapes, (l, r) => l.Combine(r));
                ret.Projectiles = this.Projectiles.Combine(rhs.Projectiles, (l, r) => l.Combine(r));
                ret.Hazards = this.Hazards.Combine(rhs.Hazards, (l, r) => l.Combine(r));
                ret.BendableSplines = this.BendableSplines.Combine(rhs.BendableSplines, (l, r) => l.Combine(r));
                ret.Terminals = this.Terminals.Combine(rhs.Terminals, (l, r) => l.Combine(r));
                ret.LeveledItems = this.LeveledItems.Combine(rhs.LeveledItems, (l, r) => l.Combine(r));
                ret.Weather = this.Weather.Combine(rhs.Weather, (l, r) => l.Combine(r));
                ret.Climates = this.Climates.Combine(rhs.Climates, (l, r) => l.Combine(r));
                ret.ShaderParticleGeometries = this.ShaderParticleGeometries.Combine(rhs.ShaderParticleGeometries, (l, r) => l.Combine(r));
                ret.VisualEffects = this.VisualEffects.Combine(rhs.VisualEffects, (l, r) => l.Combine(r));
                ret.Regions = this.Regions.Combine(rhs.Regions, (l, r) => l.Combine(r));
                ret.NavigationMeshInfoMaps = this.NavigationMeshInfoMaps.Combine(rhs.NavigationMeshInfoMaps, (l, r) => l.Combine(r));
                ret.Cells = this.Cells.Combine(rhs.Cells, (l, r) => l.Combine(r));
                ret.Worldspaces = this.Worldspaces.Combine(rhs.Worldspaces, (l, r) => l.Combine(r));
                ret.Quests = this.Quests.Combine(rhs.Quests, (l, r) => l.Combine(r));
                ret.IdleAnimations = this.IdleAnimations.Combine(rhs.IdleAnimations, (l, r) => l.Combine(r));
                ret.Packages = this.Packages.Combine(rhs.Packages, (l, r) => l.Combine(r));
                ret.CombatStyles = this.CombatStyles.Combine(rhs.CombatStyles, (l, r) => l.Combine(r));
                ret.LoadScreens = this.LoadScreens.Combine(rhs.LoadScreens, (l, r) => l.Combine(r));
                ret.AnimatedObjects = this.AnimatedObjects.Combine(rhs.AnimatedObjects, (l, r) => l.Combine(r));
                ret.Waters = this.Waters.Combine(rhs.Waters, (l, r) => l.Combine(r));
                ret.EffectShaders = this.EffectShaders.Combine(rhs.EffectShaders, (l, r) => l.Combine(r));
                ret.Explosions = this.Explosions.Combine(rhs.Explosions, (l, r) => l.Combine(r));
                ret.Debris = this.Debris.Combine(rhs.Debris, (l, r) => l.Combine(r));
                ret.ImageSpaces = this.ImageSpaces.Combine(rhs.ImageSpaces, (l, r) => l.Combine(r));
                ret.ImageSpaceAdapters = this.ImageSpaceAdapters.Combine(rhs.ImageSpaceAdapters, (l, r) => l.Combine(r));
                ret.FormLists = this.FormLists.Combine(rhs.FormLists, (l, r) => l.Combine(r));
                ret.Perks = this.Perks.Combine(rhs.Perks, (l, r) => l.Combine(r));
                ret.BodyParts = this.BodyParts.Combine(rhs.BodyParts, (l, r) => l.Combine(r));
                ret.AddonNodes = this.AddonNodes.Combine(rhs.AddonNodes, (l, r) => l.Combine(r));
                ret.ActorValueInformation = this.ActorValueInformation.Combine(rhs.ActorValueInformation, (l, r) => l.Combine(r));
                ret.CameraShots = this.CameraShots.Combine(rhs.CameraShots, (l, r) => l.Combine(r));
                ret.CameraPaths = this.CameraPaths.Combine(rhs.CameraPaths, (l, r) => l.Combine(r));
                ret.VoiceTypes = this.VoiceTypes.Combine(rhs.VoiceTypes, (l, r) => l.Combine(r));
                ret.MaterialTypes = this.MaterialTypes.Combine(rhs.MaterialTypes, (l, r) => l.Combine(r));
                ret.Impacts = this.Impacts.Combine(rhs.Impacts, (l, r) => l.Combine(r));
                ret.ImpactDataSets = this.ImpactDataSets.Combine(rhs.ImpactDataSets, (l, r) => l.Combine(r));
                ret.ArmorAddons = this.ArmorAddons.Combine(rhs.ArmorAddons, (l, r) => l.Combine(r));
                ret.EncounterZones = this.EncounterZones.Combine(rhs.EncounterZones, (l, r) => l.Combine(r));
                ret.Locations = this.Locations.Combine(rhs.Locations, (l, r) => l.Combine(r));
                ret.Messages = this.Messages.Combine(rhs.Messages, (l, r) => l.Combine(r));
                ret.DefaultObjectManagers = this.DefaultObjectManagers.Combine(rhs.DefaultObjectManagers, (l, r) => l.Combine(r));
                ret.DefaultObjects = this.DefaultObjects.Combine(rhs.DefaultObjects, (l, r) => l.Combine(r));
                ret.LightingTemplates = this.LightingTemplates.Combine(rhs.LightingTemplates, (l, r) => l.Combine(r));
                ret.MusicTypes = this.MusicTypes.Combine(rhs.MusicTypes, (l, r) => l.Combine(r));
                ret.Footsteps = this.Footsteps.Combine(rhs.Footsteps, (l, r) => l.Combine(r));
                ret.FootstepSets = this.FootstepSets.Combine(rhs.FootstepSets, (l, r) => l.Combine(r));
                ret.StoryManagerBranchNodes = this.StoryManagerBranchNodes.Combine(rhs.StoryManagerBranchNodes, (l, r) => l.Combine(r));
                ret.StoryManagerQuestNodes = this.StoryManagerQuestNodes.Combine(rhs.StoryManagerQuestNodes, (l, r) => l.Combine(r));
                ret.StoryManagerEventNodes = this.StoryManagerEventNodes.Combine(rhs.StoryManagerEventNodes, (l, r) => l.Combine(r));
                ret.MusicTracks = this.MusicTracks.Combine(rhs.MusicTracks, (l, r) => l.Combine(r));
                ret.DialogViews = this.DialogViews.Combine(rhs.DialogViews, (l, r) => l.Combine(r));
                ret.EquipTypes = this.EquipTypes.Combine(rhs.EquipTypes, (l, r) => l.Combine(r));
                ret.Relationships = this.Relationships.Combine(rhs.Relationships, (l, r) => l.Combine(r));
                ret.AssociationTypes = this.AssociationTypes.Combine(rhs.AssociationTypes, (l, r) => l.Combine(r));
                ret.Outfits = this.Outfits.Combine(rhs.Outfits, (l, r) => l.Combine(r));
                ret.ArtObjects = this.ArtObjects.Combine(rhs.ArtObjects, (l, r) => l.Combine(r));
                ret.MaterialObjects = this.MaterialObjects.Combine(rhs.MaterialObjects, (l, r) => l.Combine(r));
                ret.MovementTypes = this.MovementTypes.Combine(rhs.MovementTypes, (l, r) => l.Combine(r));
                ret.SoundDescriptors = this.SoundDescriptors.Combine(rhs.SoundDescriptors, (l, r) => l.Combine(r));
                ret.SoundCategories = this.SoundCategories.Combine(rhs.SoundCategories, (l, r) => l.Combine(r));
                ret.SoundOutputModels = this.SoundOutputModels.Combine(rhs.SoundOutputModels, (l, r) => l.Combine(r));
                ret.CollisionLayers = this.CollisionLayers.Combine(rhs.CollisionLayers, (l, r) => l.Combine(r));
                ret.Colors = this.Colors.Combine(rhs.Colors, (l, r) => l.Combine(r));
                ret.ReverbParameters = this.ReverbParameters.Combine(rhs.ReverbParameters, (l, r) => l.Combine(r));
                ret.PackIns = this.PackIns.Combine(rhs.PackIns, (l, r) => l.Combine(r));
                ret.ReferenceGroups = this.ReferenceGroups.Combine(rhs.ReferenceGroups, (l, r) => l.Combine(r));
                ret.AimModels = this.AimModels.Combine(rhs.AimModels, (l, r) => l.Combine(r));
                ret.Layers = this.Layers.Combine(rhs.Layers, (l, r) => l.Combine(r));
                ret.ConstructibleObjects = this.ConstructibleObjects.Combine(rhs.ConstructibleObjects, (l, r) => l.Combine(r));
                ret.ObjectModifications = this.ObjectModifications.Combine(rhs.ObjectModifications, (l, r) => l.Combine(r));
                ret.MaterialSwaps = this.MaterialSwaps.Combine(rhs.MaterialSwaps, (l, r) => l.Combine(r));
                ret.Zooms = this.Zooms.Combine(rhs.Zooms, (l, r) => l.Combine(r));
                ret.InstanceNamingRules = this.InstanceNamingRules.Combine(rhs.InstanceNamingRules, (l, r) => l.Combine(r));
                ret.SoundKeywordMappings = this.SoundKeywordMappings.Combine(rhs.SoundKeywordMappings, (l, r) => l.Combine(r));
                ret.AudioEffectChains = this.AudioEffectChains.Combine(rhs.AudioEffectChains, (l, r) => l.Combine(r));
                ret.SceneCollections = this.SceneCollections.Combine(rhs.SceneCollections, (l, r) => l.Combine(r));
                ret.AttractionRules = this.AttractionRules.Combine(rhs.AttractionRules, (l, r) => l.Combine(r));
                ret.AudioCategorySnapshots = this.AudioCategorySnapshots.Combine(rhs.AudioCategorySnapshots, (l, r) => l.Combine(r));
                ret.AnimationSoundTagSets = this.AnimationSoundTagSets.Combine(rhs.AnimationSoundTagSets, (l, r) => l.Combine(r));
                ret.NavigationMeshObstacleManagers = this.NavigationMeshObstacleManagers.Combine(rhs.NavigationMeshObstacleManagers, (l, r) => l.Combine(r));
                ret.LensFlares = this.LensFlares.Combine(rhs.LensFlares, (l, r) => l.Combine(r));
                ret.GodRays = this.GodRays.Combine(rhs.GodRays, (l, r) => l.Combine(r));
                ret.ObjectVisibilityManagers = this.ObjectVisibilityManagers.Combine(rhs.ObjectVisibilityManagers, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public Fallout4ModHeader.TranslationMask? ModHeader;
            public Fallout4Group.TranslationMask<GameSetting.TranslationMask>? GameSettings;
            public Fallout4Group.TranslationMask<Keyword.TranslationMask>? Keywords;
            public Fallout4Group.TranslationMask<LocationReferenceType.TranslationMask>? LocationReferenceTypes;
            public Fallout4Group.TranslationMask<ActionRecord.TranslationMask>? Actions;
            public Fallout4Group.TranslationMask<Transform.TranslationMask>? Transforms;
            public Fallout4Group.TranslationMask<Component.TranslationMask>? Components;
            public Fallout4Group.TranslationMask<TextureSet.TranslationMask>? TextureSets;
            public Fallout4Group.TranslationMask<Global.TranslationMask>? Globals;
            public Fallout4Group.TranslationMask<ADamageType.TranslationMask>? DamageTypes;
            public Fallout4Group.TranslationMask<Class.TranslationMask>? Classes;
            public Fallout4Group.TranslationMask<Faction.TranslationMask>? Factions;
            public Fallout4Group.TranslationMask<HeadPart.TranslationMask>? HeadParts;
            public Fallout4Group.TranslationMask<Race.TranslationMask>? Races;
            public Fallout4Group.TranslationMask<SoundMarker.TranslationMask>? SoundMarkers;
            public Fallout4Group.TranslationMask<AcousticSpace.TranslationMask>? AcousticSpaces;
            public Fallout4Group.TranslationMask<MagicEffect.TranslationMask>? MagicEffects;
            public Fallout4Group.TranslationMask<LandscapeTexture.TranslationMask>? LandscapeTextures;
            public Fallout4Group.TranslationMask<ObjectEffect.TranslationMask>? ObjectEffects;
            public Fallout4Group.TranslationMask<Spell.TranslationMask>? Spells;
            public Fallout4Group.TranslationMask<Activator.TranslationMask>? Activators;
            public Fallout4Group.TranslationMask<TalkingActivator.TranslationMask>? TalkingActivators;
            public Fallout4Group.TranslationMask<Armor.TranslationMask>? Armors;
            public Fallout4Group.TranslationMask<Book.TranslationMask>? Books;
            public Fallout4Group.TranslationMask<Container.TranslationMask>? Containers;
            public Fallout4Group.TranslationMask<Door.TranslationMask>? Doors;
            public Fallout4Group.TranslationMask<Ingredient.TranslationMask>? Ingredients;
            public Fallout4Group.TranslationMask<Light.TranslationMask>? Lights;
            public Fallout4Group.TranslationMask<MiscItem.TranslationMask>? MiscItems;
            public Fallout4Group.TranslationMask<Static.TranslationMask>? Statics;
            public Fallout4Group.TranslationMask<StaticCollection.TranslationMask>? StaticCollections;
            public Fallout4Group.TranslationMask<MovableStatic.TranslationMask>? MovableStatics;
            public Fallout4Group.TranslationMask<Grass.TranslationMask>? Grasses;
            public Fallout4Group.TranslationMask<Tree.TranslationMask>? Trees;
            public Fallout4Group.TranslationMask<Flora.TranslationMask>? Florae;
            public Fallout4Group.TranslationMask<Furniture.TranslationMask>? Furniture;
            public Fallout4Group.TranslationMask<Weapon.TranslationMask>? Weapons;
            public Fallout4Group.TranslationMask<Ammunition.TranslationMask>? Ammunitions;
            public Fallout4Group.TranslationMask<Npc.TranslationMask>? Npcs;
            public Fallout4Group.TranslationMask<LeveledNpc.TranslationMask>? LeveledNpcs;
            public Fallout4Group.TranslationMask<Key.TranslationMask>? Keys;
            public Fallout4Group.TranslationMask<Ingestible.TranslationMask>? Ingestibles;
            public Fallout4Group.TranslationMask<IdleMarker.TranslationMask>? IdleMarkers;
            public Fallout4Group.TranslationMask<Holotape.TranslationMask>? Holotapes;
            public Fallout4Group.TranslationMask<Projectile.TranslationMask>? Projectiles;
            public Fallout4Group.TranslationMask<Hazard.TranslationMask>? Hazards;
            public Fallout4Group.TranslationMask<BendableSpline.TranslationMask>? BendableSplines;
            public Fallout4Group.TranslationMask<Terminal.TranslationMask>? Terminals;
            public Fallout4Group.TranslationMask<LeveledItem.TranslationMask>? LeveledItems;
            public Fallout4Group.TranslationMask<Weather.TranslationMask>? Weather;
            public Fallout4Group.TranslationMask<Climate.TranslationMask>? Climates;
            public Fallout4Group.TranslationMask<ShaderParticleGeometry.TranslationMask>? ShaderParticleGeometries;
            public Fallout4Group.TranslationMask<VisualEffect.TranslationMask>? VisualEffects;
            public Fallout4Group.TranslationMask<Region.TranslationMask>? Regions;
            public Fallout4Group.TranslationMask<NavigationMeshInfoMap.TranslationMask>? NavigationMeshInfoMaps;
            public Fallout4ListGroup.TranslationMask<CellBlock.TranslationMask>? Cells;
            public Fallout4Group.TranslationMask<Worldspace.TranslationMask>? Worldspaces;
            public Fallout4Group.TranslationMask<Quest.TranslationMask>? Quests;
            public Fallout4Group.TranslationMask<IdleAnimation.TranslationMask>? IdleAnimations;
            public Fallout4Group.TranslationMask<Package.TranslationMask>? Packages;
            public Fallout4Group.TranslationMask<CombatStyle.TranslationMask>? CombatStyles;
            public Fallout4Group.TranslationMask<LoadScreen.TranslationMask>? LoadScreens;
            public Fallout4Group.TranslationMask<AnimatedObject.TranslationMask>? AnimatedObjects;
            public Fallout4Group.TranslationMask<Water.TranslationMask>? Waters;
            public Fallout4Group.TranslationMask<EffectShader.TranslationMask>? EffectShaders;
            public Fallout4Group.TranslationMask<Explosion.TranslationMask>? Explosions;
            public Fallout4Group.TranslationMask<Debris.TranslationMask>? Debris;
            public Fallout4Group.TranslationMask<ImageSpace.TranslationMask>? ImageSpaces;
            public Fallout4Group.TranslationMask<ImageSpaceAdapter.TranslationMask>? ImageSpaceAdapters;
            public Fallout4Group.TranslationMask<FormList.TranslationMask>? FormLists;
            public Fallout4Group.TranslationMask<Perk.TranslationMask>? Perks;
            public Fallout4Group.TranslationMask<BodyPartData.TranslationMask>? BodyParts;
            public Fallout4Group.TranslationMask<AddonNode.TranslationMask>? AddonNodes;
            public Fallout4Group.TranslationMask<ActorValueInformation.TranslationMask>? ActorValueInformation;
            public Fallout4Group.TranslationMask<CameraShot.TranslationMask>? CameraShots;
            public Fallout4Group.TranslationMask<CameraPath.TranslationMask>? CameraPaths;
            public Fallout4Group.TranslationMask<VoiceType.TranslationMask>? VoiceTypes;
            public Fallout4Group.TranslationMask<MaterialType.TranslationMask>? MaterialTypes;
            public Fallout4Group.TranslationMask<Impact.TranslationMask>? Impacts;
            public Fallout4Group.TranslationMask<ImpactDataSet.TranslationMask>? ImpactDataSets;
            public Fallout4Group.TranslationMask<ArmorAddon.TranslationMask>? ArmorAddons;
            public Fallout4Group.TranslationMask<EncounterZone.TranslationMask>? EncounterZones;
            public Fallout4Group.TranslationMask<Location.TranslationMask>? Locations;
            public Fallout4Group.TranslationMask<Message.TranslationMask>? Messages;
            public Fallout4Group.TranslationMask<DefaultObjectManager.TranslationMask>? DefaultObjectManagers;
            public Fallout4Group.TranslationMask<DefaultObject.TranslationMask>? DefaultObjects;
            public Fallout4Group.TranslationMask<LightingTemplate.TranslationMask>? LightingTemplates;
            public Fallout4Group.TranslationMask<MusicType.TranslationMask>? MusicTypes;
            public Fallout4Group.TranslationMask<Footstep.TranslationMask>? Footsteps;
            public Fallout4Group.TranslationMask<FootstepSet.TranslationMask>? FootstepSets;
            public Fallout4Group.TranslationMask<StoryManagerBranchNode.TranslationMask>? StoryManagerBranchNodes;
            public Fallout4Group.TranslationMask<StoryManagerQuestNode.TranslationMask>? StoryManagerQuestNodes;
            public Fallout4Group.TranslationMask<StoryManagerEventNode.TranslationMask>? StoryManagerEventNodes;
            public Fallout4Group.TranslationMask<MusicTrack.TranslationMask>? MusicTracks;
            public Fallout4Group.TranslationMask<DialogView.TranslationMask>? DialogViews;
            public Fallout4Group.TranslationMask<EquipType.TranslationMask>? EquipTypes;
            public Fallout4Group.TranslationMask<Relationship.TranslationMask>? Relationships;
            public Fallout4Group.TranslationMask<AssociationType.TranslationMask>? AssociationTypes;
            public Fallout4Group.TranslationMask<Outfit.TranslationMask>? Outfits;
            public Fallout4Group.TranslationMask<ArtObject.TranslationMask>? ArtObjects;
            public Fallout4Group.TranslationMask<MaterialObject.TranslationMask>? MaterialObjects;
            public Fallout4Group.TranslationMask<MovementType.TranslationMask>? MovementTypes;
            public Fallout4Group.TranslationMask<SoundDescriptor.TranslationMask>? SoundDescriptors;
            public Fallout4Group.TranslationMask<SoundCategory.TranslationMask>? SoundCategories;
            public Fallout4Group.TranslationMask<SoundOutputModel.TranslationMask>? SoundOutputModels;
            public Fallout4Group.TranslationMask<CollisionLayer.TranslationMask>? CollisionLayers;
            public Fallout4Group.TranslationMask<ColorRecord.TranslationMask>? Colors;
            public Fallout4Group.TranslationMask<ReverbParameters.TranslationMask>? ReverbParameters;
            public Fallout4Group.TranslationMask<PackIn.TranslationMask>? PackIns;
            public Fallout4Group.TranslationMask<ReferenceGroup.TranslationMask>? ReferenceGroups;
            public Fallout4Group.TranslationMask<AimModel.TranslationMask>? AimModels;
            public Fallout4Group.TranslationMask<Layer.TranslationMask>? Layers;
            public Fallout4Group.TranslationMask<ConstructibleObject.TranslationMask>? ConstructibleObjects;
            public Fallout4Group.TranslationMask<AObjectModification.TranslationMask>? ObjectModifications;
            public Fallout4Group.TranslationMask<MaterialSwap.TranslationMask>? MaterialSwaps;
            public Fallout4Group.TranslationMask<Zoom.TranslationMask>? Zooms;
            public Fallout4Group.TranslationMask<InstanceNamingRules.TranslationMask>? InstanceNamingRules;
            public Fallout4Group.TranslationMask<SoundKeywordMapping.TranslationMask>? SoundKeywordMappings;
            public Fallout4Group.TranslationMask<AudioEffectChain.TranslationMask>? AudioEffectChains;
            public Fallout4Group.TranslationMask<SceneCollection.TranslationMask>? SceneCollections;
            public Fallout4Group.TranslationMask<AttractionRule.TranslationMask>? AttractionRules;
            public Fallout4Group.TranslationMask<AudioCategorySnapshot.TranslationMask>? AudioCategorySnapshots;
            public Fallout4Group.TranslationMask<AnimationSoundTagSet.TranslationMask>? AnimationSoundTagSets;
            public Fallout4Group.TranslationMask<NavigationMeshObstacleManager.TranslationMask>? NavigationMeshObstacleManagers;
            public Fallout4Group.TranslationMask<LensFlare.TranslationMask>? LensFlares;
            public Fallout4Group.TranslationMask<GodRays.TranslationMask>? GodRays;
            public Fallout4Group.TranslationMask<ObjectVisibilityManager.TranslationMask>? ObjectVisibilityManagers;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ModHeader != null ? ModHeader.OnOverall : DefaultOn, ModHeader?.GetCrystal()));
                ret.Add((GameSettings != null ? GameSettings.OnOverall : DefaultOn, GameSettings?.GetCrystal()));
                ret.Add((Keywords != null ? Keywords.OnOverall : DefaultOn, Keywords?.GetCrystal()));
                ret.Add((LocationReferenceTypes != null ? LocationReferenceTypes.OnOverall : DefaultOn, LocationReferenceTypes?.GetCrystal()));
                ret.Add((Actions != null ? Actions.OnOverall : DefaultOn, Actions?.GetCrystal()));
                ret.Add((Transforms != null ? Transforms.OnOverall : DefaultOn, Transforms?.GetCrystal()));
                ret.Add((Components != null ? Components.OnOverall : DefaultOn, Components?.GetCrystal()));
                ret.Add((TextureSets != null ? TextureSets.OnOverall : DefaultOn, TextureSets?.GetCrystal()));
                ret.Add((Globals != null ? Globals.OnOverall : DefaultOn, Globals?.GetCrystal()));
                ret.Add((DamageTypes != null ? DamageTypes.OnOverall : DefaultOn, DamageTypes?.GetCrystal()));
                ret.Add((Classes != null ? Classes.OnOverall : DefaultOn, Classes?.GetCrystal()));
                ret.Add((Factions != null ? Factions.OnOverall : DefaultOn, Factions?.GetCrystal()));
                ret.Add((HeadParts != null ? HeadParts.OnOverall : DefaultOn, HeadParts?.GetCrystal()));
                ret.Add((Races != null ? Races.OnOverall : DefaultOn, Races?.GetCrystal()));
                ret.Add((SoundMarkers != null ? SoundMarkers.OnOverall : DefaultOn, SoundMarkers?.GetCrystal()));
                ret.Add((AcousticSpaces != null ? AcousticSpaces.OnOverall : DefaultOn, AcousticSpaces?.GetCrystal()));
                ret.Add((MagicEffects != null ? MagicEffects.OnOverall : DefaultOn, MagicEffects?.GetCrystal()));
                ret.Add((LandscapeTextures != null ? LandscapeTextures.OnOverall : DefaultOn, LandscapeTextures?.GetCrystal()));
                ret.Add((ObjectEffects != null ? ObjectEffects.OnOverall : DefaultOn, ObjectEffects?.GetCrystal()));
                ret.Add((Spells != null ? Spells.OnOverall : DefaultOn, Spells?.GetCrystal()));
                ret.Add((Activators != null ? Activators.OnOverall : DefaultOn, Activators?.GetCrystal()));
                ret.Add((TalkingActivators != null ? TalkingActivators.OnOverall : DefaultOn, TalkingActivators?.GetCrystal()));
                ret.Add((Armors != null ? Armors.OnOverall : DefaultOn, Armors?.GetCrystal()));
                ret.Add((Books != null ? Books.OnOverall : DefaultOn, Books?.GetCrystal()));
                ret.Add((Containers != null ? Containers.OnOverall : DefaultOn, Containers?.GetCrystal()));
                ret.Add((Doors != null ? Doors.OnOverall : DefaultOn, Doors?.GetCrystal()));
                ret.Add((Ingredients != null ? Ingredients.OnOverall : DefaultOn, Ingredients?.GetCrystal()));
                ret.Add((Lights != null ? Lights.OnOverall : DefaultOn, Lights?.GetCrystal()));
                ret.Add((MiscItems != null ? MiscItems.OnOverall : DefaultOn, MiscItems?.GetCrystal()));
                ret.Add((Statics != null ? Statics.OnOverall : DefaultOn, Statics?.GetCrystal()));
                ret.Add((StaticCollections != null ? StaticCollections.OnOverall : DefaultOn, StaticCollections?.GetCrystal()));
                ret.Add((MovableStatics != null ? MovableStatics.OnOverall : DefaultOn, MovableStatics?.GetCrystal()));
                ret.Add((Grasses != null ? Grasses.OnOverall : DefaultOn, Grasses?.GetCrystal()));
                ret.Add((Trees != null ? Trees.OnOverall : DefaultOn, Trees?.GetCrystal()));
                ret.Add((Florae != null ? Florae.OnOverall : DefaultOn, Florae?.GetCrystal()));
                ret.Add((Furniture != null ? Furniture.OnOverall : DefaultOn, Furniture?.GetCrystal()));
                ret.Add((Weapons != null ? Weapons.OnOverall : DefaultOn, Weapons?.GetCrystal()));
                ret.Add((Ammunitions != null ? Ammunitions.OnOverall : DefaultOn, Ammunitions?.GetCrystal()));
                ret.Add((Npcs != null ? Npcs.OnOverall : DefaultOn, Npcs?.GetCrystal()));
                ret.Add((LeveledNpcs != null ? LeveledNpcs.OnOverall : DefaultOn, LeveledNpcs?.GetCrystal()));
                ret.Add((Keys != null ? Keys.OnOverall : DefaultOn, Keys?.GetCrystal()));
                ret.Add((Ingestibles != null ? Ingestibles.OnOverall : DefaultOn, Ingestibles?.GetCrystal()));
                ret.Add((IdleMarkers != null ? IdleMarkers.OnOverall : DefaultOn, IdleMarkers?.GetCrystal()));
                ret.Add((Holotapes != null ? Holotapes.OnOverall : DefaultOn, Holotapes?.GetCrystal()));
                ret.Add((Projectiles != null ? Projectiles.OnOverall : DefaultOn, Projectiles?.GetCrystal()));
                ret.Add((Hazards != null ? Hazards.OnOverall : DefaultOn, Hazards?.GetCrystal()));
                ret.Add((BendableSplines != null ? BendableSplines.OnOverall : DefaultOn, BendableSplines?.GetCrystal()));
                ret.Add((Terminals != null ? Terminals.OnOverall : DefaultOn, Terminals?.GetCrystal()));
                ret.Add((LeveledItems != null ? LeveledItems.OnOverall : DefaultOn, LeveledItems?.GetCrystal()));
                ret.Add((Weather != null ? Weather.OnOverall : DefaultOn, Weather?.GetCrystal()));
                ret.Add((Climates != null ? Climates.OnOverall : DefaultOn, Climates?.GetCrystal()));
                ret.Add((ShaderParticleGeometries != null ? ShaderParticleGeometries.OnOverall : DefaultOn, ShaderParticleGeometries?.GetCrystal()));
                ret.Add((VisualEffects != null ? VisualEffects.OnOverall : DefaultOn, VisualEffects?.GetCrystal()));
                ret.Add((Regions != null ? Regions.OnOverall : DefaultOn, Regions?.GetCrystal()));
                ret.Add((NavigationMeshInfoMaps != null ? NavigationMeshInfoMaps.OnOverall : DefaultOn, NavigationMeshInfoMaps?.GetCrystal()));
                ret.Add((Cells != null ? Cells.OnOverall : DefaultOn, Cells?.GetCrystal()));
                ret.Add((Worldspaces != null ? Worldspaces.OnOverall : DefaultOn, Worldspaces?.GetCrystal()));
                ret.Add((Quests != null ? Quests.OnOverall : DefaultOn, Quests?.GetCrystal()));
                ret.Add((IdleAnimations != null ? IdleAnimations.OnOverall : DefaultOn, IdleAnimations?.GetCrystal()));
                ret.Add((Packages != null ? Packages.OnOverall : DefaultOn, Packages?.GetCrystal()));
                ret.Add((CombatStyles != null ? CombatStyles.OnOverall : DefaultOn, CombatStyles?.GetCrystal()));
                ret.Add((LoadScreens != null ? LoadScreens.OnOverall : DefaultOn, LoadScreens?.GetCrystal()));
                ret.Add((AnimatedObjects != null ? AnimatedObjects.OnOverall : DefaultOn, AnimatedObjects?.GetCrystal()));
                ret.Add((Waters != null ? Waters.OnOverall : DefaultOn, Waters?.GetCrystal()));
                ret.Add((EffectShaders != null ? EffectShaders.OnOverall : DefaultOn, EffectShaders?.GetCrystal()));
                ret.Add((Explosions != null ? Explosions.OnOverall : DefaultOn, Explosions?.GetCrystal()));
                ret.Add((Debris != null ? Debris.OnOverall : DefaultOn, Debris?.GetCrystal()));
                ret.Add((ImageSpaces != null ? ImageSpaces.OnOverall : DefaultOn, ImageSpaces?.GetCrystal()));
                ret.Add((ImageSpaceAdapters != null ? ImageSpaceAdapters.OnOverall : DefaultOn, ImageSpaceAdapters?.GetCrystal()));
                ret.Add((FormLists != null ? FormLists.OnOverall : DefaultOn, FormLists?.GetCrystal()));
                ret.Add((Perks != null ? Perks.OnOverall : DefaultOn, Perks?.GetCrystal()));
                ret.Add((BodyParts != null ? BodyParts.OnOverall : DefaultOn, BodyParts?.GetCrystal()));
                ret.Add((AddonNodes != null ? AddonNodes.OnOverall : DefaultOn, AddonNodes?.GetCrystal()));
                ret.Add((ActorValueInformation != null ? ActorValueInformation.OnOverall : DefaultOn, ActorValueInformation?.GetCrystal()));
                ret.Add((CameraShots != null ? CameraShots.OnOverall : DefaultOn, CameraShots?.GetCrystal()));
                ret.Add((CameraPaths != null ? CameraPaths.OnOverall : DefaultOn, CameraPaths?.GetCrystal()));
                ret.Add((VoiceTypes != null ? VoiceTypes.OnOverall : DefaultOn, VoiceTypes?.GetCrystal()));
                ret.Add((MaterialTypes != null ? MaterialTypes.OnOverall : DefaultOn, MaterialTypes?.GetCrystal()));
                ret.Add((Impacts != null ? Impacts.OnOverall : DefaultOn, Impacts?.GetCrystal()));
                ret.Add((ImpactDataSets != null ? ImpactDataSets.OnOverall : DefaultOn, ImpactDataSets?.GetCrystal()));
                ret.Add((ArmorAddons != null ? ArmorAddons.OnOverall : DefaultOn, ArmorAddons?.GetCrystal()));
                ret.Add((EncounterZones != null ? EncounterZones.OnOverall : DefaultOn, EncounterZones?.GetCrystal()));
                ret.Add((Locations != null ? Locations.OnOverall : DefaultOn, Locations?.GetCrystal()));
                ret.Add((Messages != null ? Messages.OnOverall : DefaultOn, Messages?.GetCrystal()));
                ret.Add((DefaultObjectManagers != null ? DefaultObjectManagers.OnOverall : DefaultOn, DefaultObjectManagers?.GetCrystal()));
                ret.Add((DefaultObjects != null ? DefaultObjects.OnOverall : DefaultOn, DefaultObjects?.GetCrystal()));
                ret.Add((LightingTemplates != null ? LightingTemplates.OnOverall : DefaultOn, LightingTemplates?.GetCrystal()));
                ret.Add((MusicTypes != null ? MusicTypes.OnOverall : DefaultOn, MusicTypes?.GetCrystal()));
                ret.Add((Footsteps != null ? Footsteps.OnOverall : DefaultOn, Footsteps?.GetCrystal()));
                ret.Add((FootstepSets != null ? FootstepSets.OnOverall : DefaultOn, FootstepSets?.GetCrystal()));
                ret.Add((StoryManagerBranchNodes != null ? StoryManagerBranchNodes.OnOverall : DefaultOn, StoryManagerBranchNodes?.GetCrystal()));
                ret.Add((StoryManagerQuestNodes != null ? StoryManagerQuestNodes.OnOverall : DefaultOn, StoryManagerQuestNodes?.GetCrystal()));
                ret.Add((StoryManagerEventNodes != null ? StoryManagerEventNodes.OnOverall : DefaultOn, StoryManagerEventNodes?.GetCrystal()));
                ret.Add((MusicTracks != null ? MusicTracks.OnOverall : DefaultOn, MusicTracks?.GetCrystal()));
                ret.Add((DialogViews != null ? DialogViews.OnOverall : DefaultOn, DialogViews?.GetCrystal()));
                ret.Add((EquipTypes != null ? EquipTypes.OnOverall : DefaultOn, EquipTypes?.GetCrystal()));
                ret.Add((Relationships != null ? Relationships.OnOverall : DefaultOn, Relationships?.GetCrystal()));
                ret.Add((AssociationTypes != null ? AssociationTypes.OnOverall : DefaultOn, AssociationTypes?.GetCrystal()));
                ret.Add((Outfits != null ? Outfits.OnOverall : DefaultOn, Outfits?.GetCrystal()));
                ret.Add((ArtObjects != null ? ArtObjects.OnOverall : DefaultOn, ArtObjects?.GetCrystal()));
                ret.Add((MaterialObjects != null ? MaterialObjects.OnOverall : DefaultOn, MaterialObjects?.GetCrystal()));
                ret.Add((MovementTypes != null ? MovementTypes.OnOverall : DefaultOn, MovementTypes?.GetCrystal()));
                ret.Add((SoundDescriptors != null ? SoundDescriptors.OnOverall : DefaultOn, SoundDescriptors?.GetCrystal()));
                ret.Add((SoundCategories != null ? SoundCategories.OnOverall : DefaultOn, SoundCategories?.GetCrystal()));
                ret.Add((SoundOutputModels != null ? SoundOutputModels.OnOverall : DefaultOn, SoundOutputModels?.GetCrystal()));
                ret.Add((CollisionLayers != null ? CollisionLayers.OnOverall : DefaultOn, CollisionLayers?.GetCrystal()));
                ret.Add((Colors != null ? Colors.OnOverall : DefaultOn, Colors?.GetCrystal()));
                ret.Add((ReverbParameters != null ? ReverbParameters.OnOverall : DefaultOn, ReverbParameters?.GetCrystal()));
                ret.Add((PackIns != null ? PackIns.OnOverall : DefaultOn, PackIns?.GetCrystal()));
                ret.Add((ReferenceGroups != null ? ReferenceGroups.OnOverall : DefaultOn, ReferenceGroups?.GetCrystal()));
                ret.Add((AimModels != null ? AimModels.OnOverall : DefaultOn, AimModels?.GetCrystal()));
                ret.Add((Layers != null ? Layers.OnOverall : DefaultOn, Layers?.GetCrystal()));
                ret.Add((ConstructibleObjects != null ? ConstructibleObjects.OnOverall : DefaultOn, ConstructibleObjects?.GetCrystal()));
                ret.Add((ObjectModifications != null ? ObjectModifications.OnOverall : DefaultOn, ObjectModifications?.GetCrystal()));
                ret.Add((MaterialSwaps != null ? MaterialSwaps.OnOverall : DefaultOn, MaterialSwaps?.GetCrystal()));
                ret.Add((Zooms != null ? Zooms.OnOverall : DefaultOn, Zooms?.GetCrystal()));
                ret.Add((InstanceNamingRules != null ? InstanceNamingRules.OnOverall : DefaultOn, InstanceNamingRules?.GetCrystal()));
                ret.Add((SoundKeywordMappings != null ? SoundKeywordMappings.OnOverall : DefaultOn, SoundKeywordMappings?.GetCrystal()));
                ret.Add((AudioEffectChains != null ? AudioEffectChains.OnOverall : DefaultOn, AudioEffectChains?.GetCrystal()));
                ret.Add((SceneCollections != null ? SceneCollections.OnOverall : DefaultOn, SceneCollections?.GetCrystal()));
                ret.Add((AttractionRules != null ? AttractionRules.OnOverall : DefaultOn, AttractionRules?.GetCrystal()));
                ret.Add((AudioCategorySnapshots != null ? AudioCategorySnapshots.OnOverall : DefaultOn, AudioCategorySnapshots?.GetCrystal()));
                ret.Add((AnimationSoundTagSets != null ? AnimationSoundTagSets.OnOverall : DefaultOn, AnimationSoundTagSets?.GetCrystal()));
                ret.Add((NavigationMeshObstacleManagers != null ? NavigationMeshObstacleManagers.OnOverall : DefaultOn, NavigationMeshObstacleManagers?.GetCrystal()));
                ret.Add((LensFlares != null ? LensFlares.OnOverall : DefaultOn, LensFlares?.GetCrystal()));
                ret.Add((GodRays != null ? GodRays.OnOverall : DefaultOn, GodRays?.GetCrystal()));
                ret.Add((ObjectVisibilityManagers != null ? ObjectVisibilityManagers.OnOverall : DefaultOn, ObjectVisibilityManagers?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public Fallout4Release Fallout4Release { get; }
        public override GameRelease GameRelease => Fallout4Release.ToGameRelease();
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        IGroup<T>? IMod.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroup? IMod.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        uint IModGetter.GetRecordCount() => this.GetRecordCount();
        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => Fallout4ModMixIn.GetEqualsMask(this, (IFallout4ModGetter)rhs, include);
        public override bool CanUseLocalization => true;
        public override bool UsingLocalization
        {
            get => this.ModHeader.Flags.HasFlag(Fallout4ModHeader.HeaderFlag.Localized);
            set => this.ModHeader.Flags = this.ModHeader.Flags.SetFlag(Fallout4ModHeader.HeaderFlag.Localized, value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<MasterReference> IMod.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IMod.NextFormID
        {
            get => this.ModHeader.Stats.NextFormID;
            set => this.ModHeader.Stats.NextFormID = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IModGetter.NextFormID => this.ModHeader.Stats.NextFormID;
        /// <param name="modKey">ModKey to assign to the mod</param>
        /// <param name="release">Release to assign to the mod</param>
        /// <param name="headerVersion">Header version to assign to the mod.  Default value is latest header version the game supports</param>
        /// <param name="forceUseLowerFormIDRanges">Default value of false, which will not use lower FormID ranges from 1-X.  A null value will refer to header version + game release to determine if it should be allowed.  True will force it to always use FormIDs 1-X</param>
        public Fallout4Mod(
            ModKey modKey,
            Fallout4Release release,
            float? headerVersion = null,
            bool? forceUseLowerFormIDRanges = false)
            : base(modKey)
        {
            if (headerVersion != null)
            {
                this.ModHeader.Stats.Version = headerVersion.Value;
            }
            this.Fallout4Release = release;
            this.ModHeader.Stats.NextFormID = GetDefaultInitialNextFormID(forceUseLowerFormIDRanges: forceUseLowerFormIDRanges);
            _GameSettings_Object = new Fallout4Group<GameSetting>(this);
            _Keywords_Object = new Fallout4Group<Keyword>(this);
            _LocationReferenceTypes_Object = new Fallout4Group<LocationReferenceType>(this);
            _Actions_Object = new Fallout4Group<ActionRecord>(this);
            _Transforms_Object = new Fallout4Group<Transform>(this);
            _Components_Object = new Fallout4Group<Component>(this);
            _TextureSets_Object = new Fallout4Group<TextureSet>(this);
            _Globals_Object = new Fallout4Group<Global>(this);
            _DamageTypes_Object = new Fallout4Group<ADamageType>(this);
            _Classes_Object = new Fallout4Group<Class>(this);
            _Factions_Object = new Fallout4Group<Faction>(this);
            _HeadParts_Object = new Fallout4Group<HeadPart>(this);
            _Races_Object = new Fallout4Group<Race>(this);
            _SoundMarkers_Object = new Fallout4Group<SoundMarker>(this);
            _AcousticSpaces_Object = new Fallout4Group<AcousticSpace>(this);
            _MagicEffects_Object = new Fallout4Group<MagicEffect>(this);
            _LandscapeTextures_Object = new Fallout4Group<LandscapeTexture>(this);
            _ObjectEffects_Object = new Fallout4Group<ObjectEffect>(this);
            _Spells_Object = new Fallout4Group<Spell>(this);
            _Activators_Object = new Fallout4Group<Activator>(this);
            _TalkingActivators_Object = new Fallout4Group<TalkingActivator>(this);
            _Armors_Object = new Fallout4Group<Armor>(this);
            _Books_Object = new Fallout4Group<Book>(this);
            _Containers_Object = new Fallout4Group<Container>(this);
            _Doors_Object = new Fallout4Group<Door>(this);
            _Ingredients_Object = new Fallout4Group<Ingredient>(this);
            _Lights_Object = new Fallout4Group<Light>(this);
            _MiscItems_Object = new Fallout4Group<MiscItem>(this);
            _Statics_Object = new Fallout4Group<Static>(this);
            _StaticCollections_Object = new Fallout4Group<StaticCollection>(this);
            _MovableStatics_Object = new Fallout4Group<MovableStatic>(this);
            _Grasses_Object = new Fallout4Group<Grass>(this);
            _Trees_Object = new Fallout4Group<Tree>(this);
            _Florae_Object = new Fallout4Group<Flora>(this);
            _Furniture_Object = new Fallout4Group<Furniture>(this);
            _Weapons_Object = new Fallout4Group<Weapon>(this);
            _Ammunitions_Object = new Fallout4Group<Ammunition>(this);
            _Npcs_Object = new Fallout4Group<Npc>(this);
            _LeveledNpcs_Object = new Fallout4Group<LeveledNpc>(this);
            _Keys_Object = new Fallout4Group<Key>(this);
            _Ingestibles_Object = new Fallout4Group<Ingestible>(this);
            _IdleMarkers_Object = new Fallout4Group<IdleMarker>(this);
            _Holotapes_Object = new Fallout4Group<Holotape>(this);
            _Projectiles_Object = new Fallout4Group<Projectile>(this);
            _Hazards_Object = new Fallout4Group<Hazard>(this);
            _BendableSplines_Object = new Fallout4Group<BendableSpline>(this);
            _Terminals_Object = new Fallout4Group<Terminal>(this);
            _LeveledItems_Object = new Fallout4Group<LeveledItem>(this);
            _Weather_Object = new Fallout4Group<Weather>(this);
            _Climates_Object = new Fallout4Group<Climate>(this);
            _ShaderParticleGeometries_Object = new Fallout4Group<ShaderParticleGeometry>(this);
            _VisualEffects_Object = new Fallout4Group<VisualEffect>(this);
            _Regions_Object = new Fallout4Group<Region>(this);
            _NavigationMeshInfoMaps_Object = new Fallout4Group<NavigationMeshInfoMap>(this);
            _Worldspaces_Object = new Fallout4Group<Worldspace>(this);
            _Quests_Object = new Fallout4Group<Quest>(this);
            _IdleAnimations_Object = new Fallout4Group<IdleAnimation>(this);
            _Packages_Object = new Fallout4Group<Package>(this);
            _CombatStyles_Object = new Fallout4Group<CombatStyle>(this);
            _LoadScreens_Object = new Fallout4Group<LoadScreen>(this);
            _AnimatedObjects_Object = new Fallout4Group<AnimatedObject>(this);
            _Waters_Object = new Fallout4Group<Water>(this);
            _EffectShaders_Object = new Fallout4Group<EffectShader>(this);
            _Explosions_Object = new Fallout4Group<Explosion>(this);
            _Debris_Object = new Fallout4Group<Debris>(this);
            _ImageSpaces_Object = new Fallout4Group<ImageSpace>(this);
            _ImageSpaceAdapters_Object = new Fallout4Group<ImageSpaceAdapter>(this);
            _FormLists_Object = new Fallout4Group<FormList>(this);
            _Perks_Object = new Fallout4Group<Perk>(this);
            _BodyParts_Object = new Fallout4Group<BodyPartData>(this);
            _AddonNodes_Object = new Fallout4Group<AddonNode>(this);
            _ActorValueInformation_Object = new Fallout4Group<ActorValueInformation>(this);
            _CameraShots_Object = new Fallout4Group<CameraShot>(this);
            _CameraPaths_Object = new Fallout4Group<CameraPath>(this);
            _VoiceTypes_Object = new Fallout4Group<VoiceType>(this);
            _MaterialTypes_Object = new Fallout4Group<MaterialType>(this);
            _Impacts_Object = new Fallout4Group<Impact>(this);
            _ImpactDataSets_Object = new Fallout4Group<ImpactDataSet>(this);
            _ArmorAddons_Object = new Fallout4Group<ArmorAddon>(this);
            _EncounterZones_Object = new Fallout4Group<EncounterZone>(this);
            _Locations_Object = new Fallout4Group<Location>(this);
            _Messages_Object = new Fallout4Group<Message>(this);
            _DefaultObjectManagers_Object = new Fallout4Group<DefaultObjectManager>(this);
            _DefaultObjects_Object = new Fallout4Group<DefaultObject>(this);
            _LightingTemplates_Object = new Fallout4Group<LightingTemplate>(this);
            _MusicTypes_Object = new Fallout4Group<MusicType>(this);
            _Footsteps_Object = new Fallout4Group<Footstep>(this);
            _FootstepSets_Object = new Fallout4Group<FootstepSet>(this);
            _StoryManagerBranchNodes_Object = new Fallout4Group<StoryManagerBranchNode>(this);
            _StoryManagerQuestNodes_Object = new Fallout4Group<StoryManagerQuestNode>(this);
            _StoryManagerEventNodes_Object = new Fallout4Group<StoryManagerEventNode>(this);
            _MusicTracks_Object = new Fallout4Group<MusicTrack>(this);
            _DialogViews_Object = new Fallout4Group<DialogView>(this);
            _EquipTypes_Object = new Fallout4Group<EquipType>(this);
            _Relationships_Object = new Fallout4Group<Relationship>(this);
            _AssociationTypes_Object = new Fallout4Group<AssociationType>(this);
            _Outfits_Object = new Fallout4Group<Outfit>(this);
            _ArtObjects_Object = new Fallout4Group<ArtObject>(this);
            _MaterialObjects_Object = new Fallout4Group<MaterialObject>(this);
            _MovementTypes_Object = new Fallout4Group<MovementType>(this);
            _SoundDescriptors_Object = new Fallout4Group<SoundDescriptor>(this);
            _SoundCategories_Object = new Fallout4Group<SoundCategory>(this);
            _SoundOutputModels_Object = new Fallout4Group<SoundOutputModel>(this);
            _CollisionLayers_Object = new Fallout4Group<CollisionLayer>(this);
            _Colors_Object = new Fallout4Group<ColorRecord>(this);
            _ReverbParameters_Object = new Fallout4Group<ReverbParameters>(this);
            _PackIns_Object = new Fallout4Group<PackIn>(this);
            _ReferenceGroups_Object = new Fallout4Group<ReferenceGroup>(this);
            _AimModels_Object = new Fallout4Group<AimModel>(this);
            _Layers_Object = new Fallout4Group<Layer>(this);
            _ConstructibleObjects_Object = new Fallout4Group<ConstructibleObject>(this);
            _ObjectModifications_Object = new Fallout4Group<AObjectModification>(this);
            _MaterialSwaps_Object = new Fallout4Group<MaterialSwap>(this);
            _Zooms_Object = new Fallout4Group<Zoom>(this);
            _InstanceNamingRules_Object = new Fallout4Group<InstanceNamingRules>(this);
            _SoundKeywordMappings_Object = new Fallout4Group<SoundKeywordMapping>(this);
            _AudioEffectChains_Object = new Fallout4Group<AudioEffectChain>(this);
            _SceneCollections_Object = new Fallout4Group<SceneCollection>(this);
            _AttractionRules_Object = new Fallout4Group<AttractionRule>(this);
            _AudioCategorySnapshots_Object = new Fallout4Group<AudioCategorySnapshot>(this);
            _AnimationSoundTagSets_Object = new Fallout4Group<AnimationSoundTagSet>(this);
            _NavigationMeshObstacleManagers_Object = new Fallout4Group<NavigationMeshObstacleManager>(this);
            _LensFlares_Object = new Fallout4Group<LensFlare>(this);
            _GodRays_Object = new Fallout4Group<GodRays>(this);
            _ObjectVisibilityManagers_Object = new Fallout4Group<ObjectVisibilityManager>(this);
            CustomCtor();
        }
        public void AddRecords(
            Fallout4Mod rhsMod,
            GroupMask? mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(rhsMod.GameSettings.RecordCache.Items);
            }
            if (mask?.Keywords ?? true)
            {
                this.Keywords.RecordCache.Set(rhsMod.Keywords.RecordCache.Items);
            }
            if (mask?.LocationReferenceTypes ?? true)
            {
                this.LocationReferenceTypes.RecordCache.Set(rhsMod.LocationReferenceTypes.RecordCache.Items);
            }
            if (mask?.Actions ?? true)
            {
                this.Actions.RecordCache.Set(rhsMod.Actions.RecordCache.Items);
            }
            if (mask?.Transforms ?? true)
            {
                this.Transforms.RecordCache.Set(rhsMod.Transforms.RecordCache.Items);
            }
            if (mask?.Components ?? true)
            {
                this.Components.RecordCache.Set(rhsMod.Components.RecordCache.Items);
            }
            if (mask?.TextureSets ?? true)
            {
                this.TextureSets.RecordCache.Set(rhsMod.TextureSets.RecordCache.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(rhsMod.Globals.RecordCache.Items);
            }
            if (mask?.DamageTypes ?? true)
            {
                this.DamageTypes.RecordCache.Set(rhsMod.DamageTypes.RecordCache.Items);
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(rhsMod.Classes.RecordCache.Items);
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(rhsMod.Factions.RecordCache.Items);
            }
            if (mask?.HeadParts ?? true)
            {
                this.HeadParts.RecordCache.Set(rhsMod.HeadParts.RecordCache.Items);
            }
            if (mask?.Races ?? true)
            {
                this.Races.RecordCache.Set(rhsMod.Races.RecordCache.Items);
            }
            if (mask?.SoundMarkers ?? true)
            {
                this.SoundMarkers.RecordCache.Set(rhsMod.SoundMarkers.RecordCache.Items);
            }
            if (mask?.AcousticSpaces ?? true)
            {
                this.AcousticSpaces.RecordCache.Set(rhsMod.AcousticSpaces.RecordCache.Items);
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.RecordCache.Set(rhsMod.MagicEffects.RecordCache.Items);
            }
            if (mask?.LandscapeTextures ?? true)
            {
                this.LandscapeTextures.RecordCache.Set(rhsMod.LandscapeTextures.RecordCache.Items);
            }
            if (mask?.ObjectEffects ?? true)
            {
                this.ObjectEffects.RecordCache.Set(rhsMod.ObjectEffects.RecordCache.Items);
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.RecordCache.Set(rhsMod.Spells.RecordCache.Items);
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.RecordCache.Set(rhsMod.Activators.RecordCache.Items);
            }
            if (mask?.TalkingActivators ?? true)
            {
                this.TalkingActivators.RecordCache.Set(rhsMod.TalkingActivators.RecordCache.Items);
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.RecordCache.Set(rhsMod.Armors.RecordCache.Items);
            }
            if (mask?.Books ?? true)
            {
                this.Books.RecordCache.Set(rhsMod.Books.RecordCache.Items);
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.RecordCache.Set(rhsMod.Containers.RecordCache.Items);
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.RecordCache.Set(rhsMod.Doors.RecordCache.Items);
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.RecordCache.Set(rhsMod.Ingredients.RecordCache.Items);
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.RecordCache.Set(rhsMod.Lights.RecordCache.Items);
            }
            if (mask?.MiscItems ?? true)
            {
                this.MiscItems.RecordCache.Set(rhsMod.MiscItems.RecordCache.Items);
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.RecordCache.Set(rhsMod.Statics.RecordCache.Items);
            }
            if (mask?.StaticCollections ?? true)
            {
                this.StaticCollections.RecordCache.Set(rhsMod.StaticCollections.RecordCache.Items);
            }
            if (mask?.MovableStatics ?? true)
            {
                this.MovableStatics.RecordCache.Set(rhsMod.MovableStatics.RecordCache.Items);
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.RecordCache.Set(rhsMod.Grasses.RecordCache.Items);
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.RecordCache.Set(rhsMod.Trees.RecordCache.Items);
            }
            if (mask?.Florae ?? true)
            {
                this.Florae.RecordCache.Set(rhsMod.Florae.RecordCache.Items);
            }
            if (mask?.Furniture ?? true)
            {
                this.Furniture.RecordCache.Set(rhsMod.Furniture.RecordCache.Items);
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.RecordCache.Set(rhsMod.Weapons.RecordCache.Items);
            }
            if (mask?.Ammunitions ?? true)
            {
                this.Ammunitions.RecordCache.Set(rhsMod.Ammunitions.RecordCache.Items);
            }
            if (mask?.Npcs ?? true)
            {
                this.Npcs.RecordCache.Set(rhsMod.Npcs.RecordCache.Items);
            }
            if (mask?.LeveledNpcs ?? true)
            {
                this.LeveledNpcs.RecordCache.Set(rhsMod.LeveledNpcs.RecordCache.Items);
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.RecordCache.Set(rhsMod.Keys.RecordCache.Items);
            }
            if (mask?.Ingestibles ?? true)
            {
                this.Ingestibles.RecordCache.Set(rhsMod.Ingestibles.RecordCache.Items);
            }
            if (mask?.IdleMarkers ?? true)
            {
                this.IdleMarkers.RecordCache.Set(rhsMod.IdleMarkers.RecordCache.Items);
            }
            if (mask?.Holotapes ?? true)
            {
                this.Holotapes.RecordCache.Set(rhsMod.Holotapes.RecordCache.Items);
            }
            if (mask?.Projectiles ?? true)
            {
                this.Projectiles.RecordCache.Set(rhsMod.Projectiles.RecordCache.Items);
            }
            if (mask?.Hazards ?? true)
            {
                this.Hazards.RecordCache.Set(rhsMod.Hazards.RecordCache.Items);
            }
            if (mask?.BendableSplines ?? true)
            {
                this.BendableSplines.RecordCache.Set(rhsMod.BendableSplines.RecordCache.Items);
            }
            if (mask?.Terminals ?? true)
            {
                this.Terminals.RecordCache.Set(rhsMod.Terminals.RecordCache.Items);
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.RecordCache.Set(rhsMod.LeveledItems.RecordCache.Items);
            }
            if (mask?.Weather ?? true)
            {
                this.Weather.RecordCache.Set(rhsMod.Weather.RecordCache.Items);
            }
            if (mask?.Climates ?? true)
            {
                this.Climates.RecordCache.Set(rhsMod.Climates.RecordCache.Items);
            }
            if (mask?.ShaderParticleGeometries ?? true)
            {
                this.ShaderParticleGeometries.RecordCache.Set(rhsMod.ShaderParticleGeometries.RecordCache.Items);
            }
            if (mask?.VisualEffects ?? true)
            {
                this.VisualEffects.RecordCache.Set(rhsMod.VisualEffects.RecordCache.Items);
            }
            if (mask?.Regions ?? true)
            {
                this.Regions.RecordCache.Set(rhsMod.Regions.RecordCache.Items);
            }
            if (mask?.NavigationMeshInfoMaps ?? true)
            {
                this.NavigationMeshInfoMaps.RecordCache.Set(rhsMod.NavigationMeshInfoMaps.RecordCache.Items);
            }
            if (mask?.Cells ?? true)
            {
                if (rhsMod.Cells.Records.Count > 0)
                {
                    throw new NotImplementedException("Cell additions need implementing");
                }
            }
            if (mask?.Worldspaces ?? true)
            {
                this.Worldspaces.RecordCache.Set(rhsMod.Worldspaces.RecordCache.Items);
            }
            if (mask?.Quests ?? true)
            {
                this.Quests.RecordCache.Set(rhsMod.Quests.RecordCache.Items);
            }
            if (mask?.IdleAnimations ?? true)
            {
                this.IdleAnimations.RecordCache.Set(rhsMod.IdleAnimations.RecordCache.Items);
            }
            if (mask?.Packages ?? true)
            {
                this.Packages.RecordCache.Set(rhsMod.Packages.RecordCache.Items);
            }
            if (mask?.CombatStyles ?? true)
            {
                this.CombatStyles.RecordCache.Set(rhsMod.CombatStyles.RecordCache.Items);
            }
            if (mask?.LoadScreens ?? true)
            {
                this.LoadScreens.RecordCache.Set(rhsMod.LoadScreens.RecordCache.Items);
            }
            if (mask?.AnimatedObjects ?? true)
            {
                this.AnimatedObjects.RecordCache.Set(rhsMod.AnimatedObjects.RecordCache.Items);
            }
            if (mask?.Waters ?? true)
            {
                this.Waters.RecordCache.Set(rhsMod.Waters.RecordCache.Items);
            }
            if (mask?.EffectShaders ?? true)
            {
                this.EffectShaders.RecordCache.Set(rhsMod.EffectShaders.RecordCache.Items);
            }
            if (mask?.Explosions ?? true)
            {
                this.Explosions.RecordCache.Set(rhsMod.Explosions.RecordCache.Items);
            }
            if (mask?.Debris ?? true)
            {
                this.Debris.RecordCache.Set(rhsMod.Debris.RecordCache.Items);
            }
            if (mask?.ImageSpaces ?? true)
            {
                this.ImageSpaces.RecordCache.Set(rhsMod.ImageSpaces.RecordCache.Items);
            }
            if (mask?.ImageSpaceAdapters ?? true)
            {
                this.ImageSpaceAdapters.RecordCache.Set(rhsMod.ImageSpaceAdapters.RecordCache.Items);
            }
            if (mask?.FormLists ?? true)
            {
                this.FormLists.RecordCache.Set(rhsMod.FormLists.RecordCache.Items);
            }
            if (mask?.Perks ?? true)
            {
                this.Perks.RecordCache.Set(rhsMod.Perks.RecordCache.Items);
            }
            if (mask?.BodyParts ?? true)
            {
                this.BodyParts.RecordCache.Set(rhsMod.BodyParts.RecordCache.Items);
            }
            if (mask?.AddonNodes ?? true)
            {
                this.AddonNodes.RecordCache.Set(rhsMod.AddonNodes.RecordCache.Items);
            }
            if (mask?.ActorValueInformation ?? true)
            {
                this.ActorValueInformation.RecordCache.Set(rhsMod.ActorValueInformation.RecordCache.Items);
            }
            if (mask?.CameraShots ?? true)
            {
                this.CameraShots.RecordCache.Set(rhsMod.CameraShots.RecordCache.Items);
            }
            if (mask?.CameraPaths ?? true)
            {
                this.CameraPaths.RecordCache.Set(rhsMod.CameraPaths.RecordCache.Items);
            }
            if (mask?.VoiceTypes ?? true)
            {
                this.VoiceTypes.RecordCache.Set(rhsMod.VoiceTypes.RecordCache.Items);
            }
            if (mask?.MaterialTypes ?? true)
            {
                this.MaterialTypes.RecordCache.Set(rhsMod.MaterialTypes.RecordCache.Items);
            }
            if (mask?.Impacts ?? true)
            {
                this.Impacts.RecordCache.Set(rhsMod.Impacts.RecordCache.Items);
            }
            if (mask?.ImpactDataSets ?? true)
            {
                this.ImpactDataSets.RecordCache.Set(rhsMod.ImpactDataSets.RecordCache.Items);
            }
            if (mask?.ArmorAddons ?? true)
            {
                this.ArmorAddons.RecordCache.Set(rhsMod.ArmorAddons.RecordCache.Items);
            }
            if (mask?.EncounterZones ?? true)
            {
                this.EncounterZones.RecordCache.Set(rhsMod.EncounterZones.RecordCache.Items);
            }
            if (mask?.Locations ?? true)
            {
                this.Locations.RecordCache.Set(rhsMod.Locations.RecordCache.Items);
            }
            if (mask?.Messages ?? true)
            {
                this.Messages.RecordCache.Set(rhsMod.Messages.RecordCache.Items);
            }
            if (mask?.DefaultObjectManagers ?? true)
            {
                this.DefaultObjectManagers.RecordCache.Set(rhsMod.DefaultObjectManagers.RecordCache.Items);
            }
            if (mask?.DefaultObjects ?? true)
            {
                this.DefaultObjects.RecordCache.Set(rhsMod.DefaultObjects.RecordCache.Items);
            }
            if (mask?.LightingTemplates ?? true)
            {
                this.LightingTemplates.RecordCache.Set(rhsMod.LightingTemplates.RecordCache.Items);
            }
            if (mask?.MusicTypes ?? true)
            {
                this.MusicTypes.RecordCache.Set(rhsMod.MusicTypes.RecordCache.Items);
            }
            if (mask?.Footsteps ?? true)
            {
                this.Footsteps.RecordCache.Set(rhsMod.Footsteps.RecordCache.Items);
            }
            if (mask?.FootstepSets ?? true)
            {
                this.FootstepSets.RecordCache.Set(rhsMod.FootstepSets.RecordCache.Items);
            }
            if (mask?.StoryManagerBranchNodes ?? true)
            {
                this.StoryManagerBranchNodes.RecordCache.Set(rhsMod.StoryManagerBranchNodes.RecordCache.Items);
            }
            if (mask?.StoryManagerQuestNodes ?? true)
            {
                this.StoryManagerQuestNodes.RecordCache.Set(rhsMod.StoryManagerQuestNodes.RecordCache.Items);
            }
            if (mask?.StoryManagerEventNodes ?? true)
            {
                this.StoryManagerEventNodes.RecordCache.Set(rhsMod.StoryManagerEventNodes.RecordCache.Items);
            }
            if (mask?.MusicTracks ?? true)
            {
                this.MusicTracks.RecordCache.Set(rhsMod.MusicTracks.RecordCache.Items);
            }
            if (mask?.DialogViews ?? true)
            {
                this.DialogViews.RecordCache.Set(rhsMod.DialogViews.RecordCache.Items);
            }
            if (mask?.EquipTypes ?? true)
            {
                this.EquipTypes.RecordCache.Set(rhsMod.EquipTypes.RecordCache.Items);
            }
            if (mask?.Relationships ?? true)
            {
                this.Relationships.RecordCache.Set(rhsMod.Relationships.RecordCache.Items);
            }
            if (mask?.AssociationTypes ?? true)
            {
                this.AssociationTypes.RecordCache.Set(rhsMod.AssociationTypes.RecordCache.Items);
            }
            if (mask?.Outfits ?? true)
            {
                this.Outfits.RecordCache.Set(rhsMod.Outfits.RecordCache.Items);
            }
            if (mask?.ArtObjects ?? true)
            {
                this.ArtObjects.RecordCache.Set(rhsMod.ArtObjects.RecordCache.Items);
            }
            if (mask?.MaterialObjects ?? true)
            {
                this.MaterialObjects.RecordCache.Set(rhsMod.MaterialObjects.RecordCache.Items);
            }
            if (mask?.MovementTypes ?? true)
            {
                this.MovementTypes.RecordCache.Set(rhsMod.MovementTypes.RecordCache.Items);
            }
            if (mask?.SoundDescriptors ?? true)
            {
                this.SoundDescriptors.RecordCache.Set(rhsMod.SoundDescriptors.RecordCache.Items);
            }
            if (mask?.SoundCategories ?? true)
            {
                this.SoundCategories.RecordCache.Set(rhsMod.SoundCategories.RecordCache.Items);
            }
            if (mask?.SoundOutputModels ?? true)
            {
                this.SoundOutputModels.RecordCache.Set(rhsMod.SoundOutputModels.RecordCache.Items);
            }
            if (mask?.CollisionLayers ?? true)
            {
                this.CollisionLayers.RecordCache.Set(rhsMod.CollisionLayers.RecordCache.Items);
            }
            if (mask?.Colors ?? true)
            {
                this.Colors.RecordCache.Set(rhsMod.Colors.RecordCache.Items);
            }
            if (mask?.ReverbParameters ?? true)
            {
                this.ReverbParameters.RecordCache.Set(rhsMod.ReverbParameters.RecordCache.Items);
            }
            if (mask?.PackIns ?? true)
            {
                this.PackIns.RecordCache.Set(rhsMod.PackIns.RecordCache.Items);
            }
            if (mask?.ReferenceGroups ?? true)
            {
                this.ReferenceGroups.RecordCache.Set(rhsMod.ReferenceGroups.RecordCache.Items);
            }
            if (mask?.AimModels ?? true)
            {
                this.AimModels.RecordCache.Set(rhsMod.AimModels.RecordCache.Items);
            }
            if (mask?.Layers ?? true)
            {
                this.Layers.RecordCache.Set(rhsMod.Layers.RecordCache.Items);
            }
            if (mask?.ConstructibleObjects ?? true)
            {
                this.ConstructibleObjects.RecordCache.Set(rhsMod.ConstructibleObjects.RecordCache.Items);
            }
            if (mask?.ObjectModifications ?? true)
            {
                this.ObjectModifications.RecordCache.Set(rhsMod.ObjectModifications.RecordCache.Items);
            }
            if (mask?.MaterialSwaps ?? true)
            {
                this.MaterialSwaps.RecordCache.Set(rhsMod.MaterialSwaps.RecordCache.Items);
            }
            if (mask?.Zooms ?? true)
            {
                this.Zooms.RecordCache.Set(rhsMod.Zooms.RecordCache.Items);
            }
            if (mask?.InstanceNamingRules ?? true)
            {
                this.InstanceNamingRules.RecordCache.Set(rhsMod.InstanceNamingRules.RecordCache.Items);
            }
            if (mask?.SoundKeywordMappings ?? true)
            {
                this.SoundKeywordMappings.RecordCache.Set(rhsMod.SoundKeywordMappings.RecordCache.Items);
            }
            if (mask?.AudioEffectChains ?? true)
            {
                this.AudioEffectChains.RecordCache.Set(rhsMod.AudioEffectChains.RecordCache.Items);
            }
            if (mask?.SceneCollections ?? true)
            {
                this.SceneCollections.RecordCache.Set(rhsMod.SceneCollections.RecordCache.Items);
            }
            if (mask?.AttractionRules ?? true)
            {
                this.AttractionRules.RecordCache.Set(rhsMod.AttractionRules.RecordCache.Items);
            }
            if (mask?.AudioCategorySnapshots ?? true)
            {
                this.AudioCategorySnapshots.RecordCache.Set(rhsMod.AudioCategorySnapshots.RecordCache.Items);
            }
            if (mask?.AnimationSoundTagSets ?? true)
            {
                this.AnimationSoundTagSets.RecordCache.Set(rhsMod.AnimationSoundTagSets.RecordCache.Items);
            }
            if (mask?.NavigationMeshObstacleManagers ?? true)
            {
                this.NavigationMeshObstacleManagers.RecordCache.Set(rhsMod.NavigationMeshObstacleManagers.RecordCache.Items);
            }
            if (mask?.LensFlares ?? true)
            {
                this.LensFlares.RecordCache.Set(rhsMod.LensFlares.RecordCache.Items);
            }
            if (mask?.GodRays ?? true)
            {
                this.GodRays.RecordCache.Set(rhsMod.GodRays.RecordCache.Items);
            }
            if (mask?.ObjectVisibilityManagers ?? true)
            {
                this.ObjectVisibilityManagers.RecordCache.Set(rhsMod.ObjectVisibilityManagers.RecordCache.Items);
            }
        }

        public override void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = this.GetRecordCount();
        }

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => Fallout4ModCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => Fallout4ModSetterCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<IFormLinkIdentifier> formLinks) => this.Remove(formLinks);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IFallout4Mod, IFallout4ModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<IFallout4Mod, IFallout4ModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IFallout4Mod, IFallout4ModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<IFallout4Mod, IFallout4ModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => Fallout4ModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks() => Fallout4ModSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => Fallout4ModSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => Fallout4ModSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        #region Binary Create
        public static Fallout4Mod CreateFromBinary(
            ModPath path,
            Fallout4Release release,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)Fallout4ModHeader.HeaderFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(gameRelease, path.ModKey, Path.GetDirectoryName(path.Path)!, param.StringsParam);
                    }
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, path.ModKey);
            }
        }

        public static Fallout4Mod CreateFromBinary(
            ModPath path,
            Fallout4Release release,
            ErrorMaskBuilder? errorMask,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)Fallout4ModHeader.HeaderFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(gameRelease, path.ModKey, Path.GetDirectoryName(path.Path)!, param.StringsParam);
                    }
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, path.ModKey);
            }
        }

        public static Fallout4Mod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            Fallout4Release release,
            RecordTypeInfoCacheReader infoCache,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, modKey);
            }
        }

        public static Fallout4Mod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            Fallout4Release release,
            RecordTypeInfoCacheReader infoCache,
            ErrorMaskBuilder? errorMask,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, modKey);
            }
        }

        #endregion

        public static IFallout4ModDisposableGetter CreateFromBinaryOverlay(
            ModPath path,
            Fallout4Release release,
            BinaryReadParameters? param = null)
        {
            return Fallout4ModBinaryOverlay.Fallout4ModFactory(
                path: path,
                release: release,
                param: param);
        }

        public static IFallout4ModDisposableGetter CreateFromBinaryOverlay(
            Stream stream,
            Fallout4Release release,
            ModKey modKey,
            BinaryReadParameters? param = null)
        {
            param ??= BinaryReadParameters.Default;
            var meta = ParsingMeta.Factory(param, release.ToGameRelease(), modKey, stream);
            return Fallout4ModBinaryOverlay.Fallout4ModFactory(
                stream: new MutagenBinaryReadStream(stream, meta),
                modKey: modKey,
                release: release,
                shouldDispose: false);
        }

        public static Fallout4Mod CreateFromBinary(
            MutagenFrame frame,
            Fallout4Release release,
            GroupMask? importMask = null)
        {
            try
            {
                var ret = new Fallout4Mod(
                    modKey: frame.MetaData.ModKey,
                    release: release);
                ((Fallout4ModSetterCommon)((IFallout4ModGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                    item: ret,
                    frame: frame,
                    release: release,
                    importMask: importMask);
                return ret;
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, frame.MetaData.ModKey);
            }
        }

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Fallout4Mod GetNew()
        {
            return new Fallout4Mod();
        }

    }
    #endregion

    #region Interface
    public partial interface IFallout4Mod :
        IAssetLinkContainer,
        IContextMod<IFallout4Mod, IFallout4ModGetter>,
        IFallout4ModGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IFallout4Mod>,
        IMajorRecordEnumerable,
        IMod
    {
        new Fallout4ModHeader ModHeader { get; }
        new Fallout4Group<GameSetting> GameSettings { get; }
        new Fallout4Group<Keyword> Keywords { get; }
        new Fallout4Group<LocationReferenceType> LocationReferenceTypes { get; }
        new Fallout4Group<ActionRecord> Actions { get; }
        new Fallout4Group<Transform> Transforms { get; }
        new Fallout4Group<Component> Components { get; }
        new Fallout4Group<TextureSet> TextureSets { get; }
        new Fallout4Group<Global> Globals { get; }
        new Fallout4Group<ADamageType> DamageTypes { get; }
        new Fallout4Group<Class> Classes { get; }
        new Fallout4Group<Faction> Factions { get; }
        new Fallout4Group<HeadPart> HeadParts { get; }
        new Fallout4Group<Race> Races { get; }
        new Fallout4Group<SoundMarker> SoundMarkers { get; }
        new Fallout4Group<AcousticSpace> AcousticSpaces { get; }
        new Fallout4Group<MagicEffect> MagicEffects { get; }
        new Fallout4Group<LandscapeTexture> LandscapeTextures { get; }
        new Fallout4Group<ObjectEffect> ObjectEffects { get; }
        new Fallout4Group<Spell> Spells { get; }
        new Fallout4Group<Activator> Activators { get; }
        new Fallout4Group<TalkingActivator> TalkingActivators { get; }
        new Fallout4Group<Armor> Armors { get; }
        new Fallout4Group<Book> Books { get; }
        new Fallout4Group<Container> Containers { get; }
        new Fallout4Group<Door> Doors { get; }
        new Fallout4Group<Ingredient> Ingredients { get; }
        new Fallout4Group<Light> Lights { get; }
        new Fallout4Group<MiscItem> MiscItems { get; }
        new Fallout4Group<Static> Statics { get; }
        new Fallout4Group<StaticCollection> StaticCollections { get; }
        new Fallout4Group<MovableStatic> MovableStatics { get; }
        new Fallout4Group<Grass> Grasses { get; }
        new Fallout4Group<Tree> Trees { get; }
        new Fallout4Group<Flora> Florae { get; }
        new Fallout4Group<Furniture> Furniture { get; }
        new Fallout4Group<Weapon> Weapons { get; }
        new Fallout4Group<Ammunition> Ammunitions { get; }
        new Fallout4Group<Npc> Npcs { get; }
        new Fallout4Group<LeveledNpc> LeveledNpcs { get; }
        new Fallout4Group<Key> Keys { get; }
        new Fallout4Group<Ingestible> Ingestibles { get; }
        new Fallout4Group<IdleMarker> IdleMarkers { get; }
        new Fallout4Group<Holotape> Holotapes { get; }
        new Fallout4Group<Projectile> Projectiles { get; }
        new Fallout4Group<Hazard> Hazards { get; }
        new Fallout4Group<BendableSpline> BendableSplines { get; }
        new Fallout4Group<Terminal> Terminals { get; }
        new Fallout4Group<LeveledItem> LeveledItems { get; }
        new Fallout4Group<Weather> Weather { get; }
        new Fallout4Group<Climate> Climates { get; }
        new Fallout4Group<ShaderParticleGeometry> ShaderParticleGeometries { get; }
        new Fallout4Group<VisualEffect> VisualEffects { get; }
        new Fallout4Group<Region> Regions { get; }
        new Fallout4Group<NavigationMeshInfoMap> NavigationMeshInfoMaps { get; }
        new Fallout4ListGroup<CellBlock> Cells { get; }
        new Fallout4Group<Worldspace> Worldspaces { get; }
        new Fallout4Group<Quest> Quests { get; }
        new Fallout4Group<IdleAnimation> IdleAnimations { get; }
        new Fallout4Group<Package> Packages { get; }
        new Fallout4Group<CombatStyle> CombatStyles { get; }
        new Fallout4Group<LoadScreen> LoadScreens { get; }
        new Fallout4Group<AnimatedObject> AnimatedObjects { get; }
        new Fallout4Group<Water> Waters { get; }
        new Fallout4Group<EffectShader> EffectShaders { get; }
        new Fallout4Group<Explosion> Explosions { get; }
        new Fallout4Group<Debris> Debris { get; }
        new Fallout4Group<ImageSpace> ImageSpaces { get; }
        new Fallout4Group<ImageSpaceAdapter> ImageSpaceAdapters { get; }
        new Fallout4Group<FormList> FormLists { get; }
        new Fallout4Group<Perk> Perks { get; }
        new Fallout4Group<BodyPartData> BodyParts { get; }
        new Fallout4Group<AddonNode> AddonNodes { get; }
        new Fallout4Group<ActorValueInformation> ActorValueInformation { get; }
        new Fallout4Group<CameraShot> CameraShots { get; }
        new Fallout4Group<CameraPath> CameraPaths { get; }
        new Fallout4Group<VoiceType> VoiceTypes { get; }
        new Fallout4Group<MaterialType> MaterialTypes { get; }
        new Fallout4Group<Impact> Impacts { get; }
        new Fallout4Group<ImpactDataSet> ImpactDataSets { get; }
        new Fallout4Group<ArmorAddon> ArmorAddons { get; }
        new Fallout4Group<EncounterZone> EncounterZones { get; }
        new Fallout4Group<Location> Locations { get; }
        new Fallout4Group<Message> Messages { get; }
        new Fallout4Group<DefaultObjectManager> DefaultObjectManagers { get; }
        new Fallout4Group<DefaultObject> DefaultObjects { get; }
        new Fallout4Group<LightingTemplate> LightingTemplates { get; }
        new Fallout4Group<MusicType> MusicTypes { get; }
        new Fallout4Group<Footstep> Footsteps { get; }
        new Fallout4Group<FootstepSet> FootstepSets { get; }
        new Fallout4Group<StoryManagerBranchNode> StoryManagerBranchNodes { get; }
        new Fallout4Group<StoryManagerQuestNode> StoryManagerQuestNodes { get; }
        new Fallout4Group<StoryManagerEventNode> StoryManagerEventNodes { get; }
        new Fallout4Group<MusicTrack> MusicTracks { get; }
        new Fallout4Group<DialogView> DialogViews { get; }
        new Fallout4Group<EquipType> EquipTypes { get; }
        new Fallout4Group<Relationship> Relationships { get; }
        new Fallout4Group<AssociationType> AssociationTypes { get; }
        new Fallout4Group<Outfit> Outfits { get; }
        new Fallout4Group<ArtObject> ArtObjects { get; }
        new Fallout4Group<MaterialObject> MaterialObjects { get; }
        new Fallout4Group<MovementType> MovementTypes { get; }
        new Fallout4Group<SoundDescriptor> SoundDescriptors { get; }
        new Fallout4Group<SoundCategory> SoundCategories { get; }
        new Fallout4Group<SoundOutputModel> SoundOutputModels { get; }
        new Fallout4Group<CollisionLayer> CollisionLayers { get; }
        new Fallout4Group<ColorRecord> Colors { get; }
        new Fallout4Group<ReverbParameters> ReverbParameters { get; }
        new Fallout4Group<PackIn> PackIns { get; }
        new Fallout4Group<ReferenceGroup> ReferenceGroups { get; }
        new Fallout4Group<AimModel> AimModels { get; }
        new Fallout4Group<Layer> Layers { get; }
        new Fallout4Group<ConstructibleObject> ConstructibleObjects { get; }
        new Fallout4Group<AObjectModification> ObjectModifications { get; }
        new Fallout4Group<MaterialSwap> MaterialSwaps { get; }
        new Fallout4Group<Zoom> Zooms { get; }
        new Fallout4Group<InstanceNamingRules> InstanceNamingRules { get; }
        new Fallout4Group<SoundKeywordMapping> SoundKeywordMappings { get; }
        new Fallout4Group<AudioEffectChain> AudioEffectChains { get; }
        new Fallout4Group<SceneCollection> SceneCollections { get; }
        new Fallout4Group<AttractionRule> AttractionRules { get; }
        new Fallout4Group<AudioCategorySnapshot> AudioCategorySnapshots { get; }
        new Fallout4Group<AnimationSoundTagSet> AnimationSoundTagSets { get; }
        new Fallout4Group<NavigationMeshObstacleManager> NavigationMeshObstacleManagers { get; }
        new Fallout4Group<LensFlare> LensFlares { get; }
        new Fallout4Group<GodRays> GodRays { get; }
        new Fallout4Group<ObjectVisibilityManager> ObjectVisibilityManagers { get; }
    }

    public partial interface IFallout4ModGetter :
        ILoquiObject,
        IAssetLinkContainerGetter,
        IContextGetterMod<IFallout4Mod, IFallout4ModGetter>,
        IFormLinkContainerGetter,
        ILoquiObject<IFallout4ModGetter>,
        IMajorRecordContextEnumerable<IFallout4Mod, IFallout4ModGetter>,
        IMajorRecordGetterEnumerable,
        IModGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Fallout4Mod_Registration.Instance;
        IFallout4ModHeaderGetter ModHeader { get; }
        IFallout4GroupGetter<IGameSettingGetter> GameSettings { get; }
        IFallout4GroupGetter<IKeywordGetter> Keywords { get; }
        IFallout4GroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes { get; }
        IFallout4GroupGetter<IActionRecordGetter> Actions { get; }
        IFallout4GroupGetter<ITransformGetter> Transforms { get; }
        IFallout4GroupGetter<IComponentGetter> Components { get; }
        IFallout4GroupGetter<ITextureSetGetter> TextureSets { get; }
        IFallout4GroupGetter<IGlobalGetter> Globals { get; }
        IFallout4GroupGetter<IADamageTypeGetter> DamageTypes { get; }
        IFallout4GroupGetter<IClassGetter> Classes { get; }
        IFallout4GroupGetter<IFactionGetter> Factions { get; }
        IFallout4GroupGetter<IHeadPartGetter> HeadParts { get; }
        IFallout4GroupGetter<IRaceGetter> Races { get; }
        IFallout4GroupGetter<ISoundMarkerGetter> SoundMarkers { get; }
        IFallout4GroupGetter<IAcousticSpaceGetter> AcousticSpaces { get; }
        IFallout4GroupGetter<IMagicEffectGetter> MagicEffects { get; }
        IFallout4GroupGetter<ILandscapeTextureGetter> LandscapeTextures { get; }
        IFallout4GroupGetter<IObjectEffectGetter> ObjectEffects { get; }
        IFallout4GroupGetter<ISpellGetter> Spells { get; }
        IFallout4GroupGetter<IActivatorGetter> Activators { get; }
        IFallout4GroupGetter<ITalkingActivatorGetter> TalkingActivators { get; }
        IFallout4GroupGetter<IArmorGetter> Armors { get; }
        IFallout4GroupGetter<IBookGetter> Books { get; }
        IFallout4GroupGetter<IContainerGetter> Containers { get; }
        IFallout4GroupGetter<IDoorGetter> Doors { get; }
        IFallout4GroupGetter<IIngredientGetter> Ingredients { get; }
        IFallout4GroupGetter<ILightGetter> Lights { get; }
        IFallout4GroupGetter<IMiscItemGetter> MiscItems { get; }
        IFallout4GroupGetter<IStaticGetter> Statics { get; }
        IFallout4GroupGetter<IStaticCollectionGetter> StaticCollections { get; }
        IFallout4GroupGetter<IMovableStaticGetter> MovableStatics { get; }
        IFallout4GroupGetter<IGrassGetter> Grasses { get; }
        IFallout4GroupGetter<ITreeGetter> Trees { get; }
        IFallout4GroupGetter<IFloraGetter> Florae { get; }
        IFallout4GroupGetter<IFurnitureGetter> Furniture { get; }
        IFallout4GroupGetter<IWeaponGetter> Weapons { get; }
        IFallout4GroupGetter<IAmmunitionGetter> Ammunitions { get; }
        IFallout4GroupGetter<INpcGetter> Npcs { get; }
        IFallout4GroupGetter<ILeveledNpcGetter> LeveledNpcs { get; }
        IFallout4GroupGetter<IKeyGetter> Keys { get; }
        IFallout4GroupGetter<IIngestibleGetter> Ingestibles { get; }
        IFallout4GroupGetter<IIdleMarkerGetter> IdleMarkers { get; }
        IFallout4GroupGetter<IHolotapeGetter> Holotapes { get; }
        IFallout4GroupGetter<IProjectileGetter> Projectiles { get; }
        IFallout4GroupGetter<IHazardGetter> Hazards { get; }
        IFallout4GroupGetter<IBendableSplineGetter> BendableSplines { get; }
        IFallout4GroupGetter<ITerminalGetter> Terminals { get; }
        IFallout4GroupGetter<ILeveledItemGetter> LeveledItems { get; }
        IFallout4GroupGetter<IWeatherGetter> Weather { get; }
        IFallout4GroupGetter<IClimateGetter> Climates { get; }
        IFallout4GroupGetter<IShaderParticleGeometryGetter> ShaderParticleGeometries { get; }
        IFallout4GroupGetter<IVisualEffectGetter> VisualEffects { get; }
        IFallout4GroupGetter<IRegionGetter> Regions { get; }
        IFallout4GroupGetter<INavigationMeshInfoMapGetter> NavigationMeshInfoMaps { get; }
        IFallout4ListGroupGetter<ICellBlockGetter> Cells { get; }
        IFallout4GroupGetter<IWorldspaceGetter> Worldspaces { get; }
        IFallout4GroupGetter<IQuestGetter> Quests { get; }
        IFallout4GroupGetter<IIdleAnimationGetter> IdleAnimations { get; }
        IFallout4GroupGetter<IPackageGetter> Packages { get; }
        IFallout4GroupGetter<ICombatStyleGetter> CombatStyles { get; }
        IFallout4GroupGetter<ILoadScreenGetter> LoadScreens { get; }
        IFallout4GroupGetter<IAnimatedObjectGetter> AnimatedObjects { get; }
        IFallout4GroupGetter<IWaterGetter> Waters { get; }
        IFallout4GroupGetter<IEffectShaderGetter> EffectShaders { get; }
        IFallout4GroupGetter<IExplosionGetter> Explosions { get; }
        IFallout4GroupGetter<IDebrisGetter> Debris { get; }
        IFallout4GroupGetter<IImageSpaceGetter> ImageSpaces { get; }
        IFallout4GroupGetter<IImageSpaceAdapterGetter> ImageSpaceAdapters { get; }
        IFallout4GroupGetter<IFormListGetter> FormLists { get; }
        IFallout4GroupGetter<IPerkGetter> Perks { get; }
        IFallout4GroupGetter<IBodyPartDataGetter> BodyParts { get; }
        IFallout4GroupGetter<IAddonNodeGetter> AddonNodes { get; }
        IFallout4GroupGetter<IActorValueInformationGetter> ActorValueInformation { get; }
        IFallout4GroupGetter<ICameraShotGetter> CameraShots { get; }
        IFallout4GroupGetter<ICameraPathGetter> CameraPaths { get; }
        IFallout4GroupGetter<IVoiceTypeGetter> VoiceTypes { get; }
        IFallout4GroupGetter<IMaterialTypeGetter> MaterialTypes { get; }
        IFallout4GroupGetter<IImpactGetter> Impacts { get; }
        IFallout4GroupGetter<IImpactDataSetGetter> ImpactDataSets { get; }
        IFallout4GroupGetter<IArmorAddonGetter> ArmorAddons { get; }
        IFallout4GroupGetter<IEncounterZoneGetter> EncounterZones { get; }
        IFallout4GroupGetter<ILocationGetter> Locations { get; }
        IFallout4GroupGetter<IMessageGetter> Messages { get; }
        IFallout4GroupGetter<IDefaultObjectManagerGetter> DefaultObjectManagers { get; }
        IFallout4GroupGetter<IDefaultObjectGetter> DefaultObjects { get; }
        IFallout4GroupGetter<ILightingTemplateGetter> LightingTemplates { get; }
        IFallout4GroupGetter<IMusicTypeGetter> MusicTypes { get; }
        IFallout4GroupGetter<IFootstepGetter> Footsteps { get; }
        IFallout4GroupGetter<IFootstepSetGetter> FootstepSets { get; }
        IFallout4GroupGetter<IStoryManagerBranchNodeGetter> StoryManagerBranchNodes { get; }
        IFallout4GroupGetter<IStoryManagerQuestNodeGetter> StoryManagerQuestNodes { get; }
        IFallout4GroupGetter<IStoryManagerEventNodeGetter> StoryManagerEventNodes { get; }
        IFallout4GroupGetter<IMusicTrackGetter> MusicTracks { get; }
        IFallout4GroupGetter<IDialogViewGetter> DialogViews { get; }
        IFallout4GroupGetter<IEquipTypeGetter> EquipTypes { get; }
        IFallout4GroupGetter<IRelationshipGetter> Relationships { get; }
        IFallout4GroupGetter<IAssociationTypeGetter> AssociationTypes { get; }
        IFallout4GroupGetter<IOutfitGetter> Outfits { get; }
        IFallout4GroupGetter<IArtObjectGetter> ArtObjects { get; }
        IFallout4GroupGetter<IMaterialObjectGetter> MaterialObjects { get; }
        IFallout4GroupGetter<IMovementTypeGetter> MovementTypes { get; }
        IFallout4GroupGetter<ISoundDescriptorGetter> SoundDescriptors { get; }
        IFallout4GroupGetter<ISoundCategoryGetter> SoundCategories { get; }
        IFallout4GroupGetter<ISoundOutputModelGetter> SoundOutputModels { get; }
        IFallout4GroupGetter<ICollisionLayerGetter> CollisionLayers { get; }
        IFallout4GroupGetter<IColorRecordGetter> Colors { get; }
        IFallout4GroupGetter<IReverbParametersGetter> ReverbParameters { get; }
        IFallout4GroupGetter<IPackInGetter> PackIns { get; }
        IFallout4GroupGetter<IReferenceGroupGetter> ReferenceGroups { get; }
        IFallout4GroupGetter<IAimModelGetter> AimModels { get; }
        IFallout4GroupGetter<ILayerGetter> Layers { get; }
        IFallout4GroupGetter<IConstructibleObjectGetter> ConstructibleObjects { get; }
        IFallout4GroupGetter<IAObjectModificationGetter> ObjectModifications { get; }
        IFallout4GroupGetter<IMaterialSwapGetter> MaterialSwaps { get; }
        IFallout4GroupGetter<IZoomGetter> Zooms { get; }
        IFallout4GroupGetter<IInstanceNamingRulesGetter> InstanceNamingRules { get; }
        IFallout4GroupGetter<ISoundKeywordMappingGetter> SoundKeywordMappings { get; }
        IFallout4GroupGetter<IAudioEffectChainGetter> AudioEffectChains { get; }
        IFallout4GroupGetter<ISceneCollectionGetter> SceneCollections { get; }
        IFallout4GroupGetter<IAttractionRuleGetter> AttractionRules { get; }
        IFallout4GroupGetter<IAudioCategorySnapshotGetter> AudioCategorySnapshots { get; }
        IFallout4GroupGetter<IAnimationSoundTagSetGetter> AnimationSoundTagSets { get; }
        IFallout4GroupGetter<INavigationMeshObstacleManagerGetter> NavigationMeshObstacleManagers { get; }
        IFallout4GroupGetter<ILensFlareGetter> LensFlares { get; }
        IFallout4GroupGetter<IGodRaysGetter> GodRays { get; }
        IFallout4GroupGetter<IObjectVisibilityManagerGetter> ObjectVisibilityManagers { get; }

        #region Mutagen
        Fallout4Release Fallout4Release { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class Fallout4ModMixIn
    {
        public static void Clear(this IFallout4Mod item)
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Fallout4Mod.Mask<bool> GetEqualsMask(
            this IFallout4ModGetter item,
            IFallout4ModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFallout4ModGetter item,
            string? name = null,
            Fallout4Mod.Mask<bool>? printMask = null)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFallout4ModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Fallout4Mod.Mask<bool>? printMask = null)
        {
            ((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFallout4ModGetter item,
            IFallout4ModGetter rhs,
            Fallout4Mod.TranslationMask? equalsMask = null)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFallout4Mod lhs,
            IFallout4ModGetter rhs)
        {
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFallout4Mod lhs,
            IFallout4ModGetter rhs,
            Fallout4Mod.TranslationMask? copyMask = null)
        {
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFallout4Mod lhs,
            IFallout4ModGetter rhs,
            out Fallout4Mod.ErrorMask errorMask,
            Fallout4Mod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Fallout4Mod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFallout4Mod lhs,
            IFallout4ModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Fallout4Mod DeepCopy(
            this IFallout4ModGetter item,
            Fallout4Mod.TranslationMask? copyMask = null)
        {
            return ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Fallout4Mod DeepCopy(
            this IFallout4ModGetter item,
            out Fallout4Mod.ErrorMask errorMask,
            Fallout4Mod.TranslationMask? copyMask = null)
        {
            return ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Fallout4Mod DeepCopy(
            this IFallout4ModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static IGroupGetter<T>? TryGetTopLevelGroup<T>(this IFallout4ModGetter obj)
            where T : IMajorRecordGetter
        {
            return (IGroupGetter<T>?)((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroupGetter? TryGetTopLevelGroup(
            this IFallout4ModGetter obj,
            Type type)
        {
            return (IGroupGetter?)((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static IGroup<T>? TryGetTopLevelGroup<T>(this IFallout4Mod obj)
            where T : IMajorRecord
        {
            return (IGroup<T>?)((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroup? TryGetTopLevelGroup(
            this IFallout4Mod obj,
            Type type)
        {
            return (IGroup?)((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static uint GetRecordCount(this IFallout4ModGetter item)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).GetRecordCount(item: item);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this IFallout4ModGetter obj)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IFallout4ModGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this IFallout4ModGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this IFallout4Mod obj)
        {
            return ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IFallout4Mod obj)
            where TMajor : class, IMajorRecordQueryable
        {
            return ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this IFallout4Mod obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            IEnumerable<FormKey> keys)
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            IEnumerable<IFormLinkIdentifier> keys)
        {
            foreach (var g in keys.GroupBy(x => x.Type))
            {
                Remove(
                    obj: obj,
                    keys: g.Select(x => x.FormKey),
                    type: g.Key);
            }
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            HashSet<FormKey> keys)
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4Mod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4Mod obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4Mod obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4Mod obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4Mod obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4Mod obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IFallout4Mod, IFallout4ModGetter, TSetter, TGetter>> EnumerateMajorRecordContexts<TSetter, TGetter>(
            this IFallout4ModGetter obj,
            ILinkCache linkCache,
            bool throwIfUnknown = true)
            where TSetter : class, IMajorRecordQueryable, TGetter
            where TGetter : class, IMajorRecordQueryableGetter
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: typeof(TGetter),
                throwIfUnknown: throwIfUnknown)
                .Select(m => m.AsType<IFallout4Mod, IFallout4ModGetter, IMajorRecordQueryable, IMajorRecordQueryableGetter, TSetter, TGetter>())
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IMajorRecordGetter>> EnumerateMajorRecordContexts(this IFallout4ModGetter obj)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: null!)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IFallout4Mod, IFallout4ModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            this IFallout4ModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Catch(e => throw RecordException.Enrich(e, obj.ModKey));
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFallout4Mod item,
            MutagenFrame frame,
            Fallout4Release release,
            GroupMask? importMask = null)
        {
            ((Fallout4ModSetterCommon)((IFallout4ModGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                release: release,
                importMask: importMask);
        }

        public static void CopyInFromBinary(
            this IFallout4Mod item,
            ModPath path,
            Fallout4Release release,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)Fallout4ModHeader.HeaderFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(gameRelease, path.ModKey, Path.GetDirectoryName(path.Path)!, param.StringsParam);
                    }
                    CopyInFromBinary(
                        item: item,
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, path.ModKey);
            }
        }

        public static void CopyInFromBinary(
            this IFallout4Mod item,
            Stream stream,
            ModKey modKey,
            Fallout4Release release,
            RecordTypeInfoCacheReader infoCache,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    CopyInFromBinary(
                        item: item,
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                throw RecordException.Enrich(ex, modKey);
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum Fallout4Mod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Keywords = 2,
        LocationReferenceTypes = 3,
        Actions = 4,
        Transforms = 5,
        Components = 6,
        TextureSets = 7,
        Globals = 8,
        DamageTypes = 9,
        Classes = 10,
        Factions = 11,
        HeadParts = 12,
        Races = 13,
        SoundMarkers = 14,
        AcousticSpaces = 15,
        MagicEffects = 16,
        LandscapeTextures = 17,
        ObjectEffects = 18,
        Spells = 19,
        Activators = 20,
        TalkingActivators = 21,
        Armors = 22,
        Books = 23,
        Containers = 24,
        Doors = 25,
        Ingredients = 26,
        Lights = 27,
        MiscItems = 28,
        Statics = 29,
        StaticCollections = 30,
        MovableStatics = 31,
        Grasses = 32,
        Trees = 33,
        Florae = 34,
        Furniture = 35,
        Weapons = 36,
        Ammunitions = 37,
        Npcs = 38,
        LeveledNpcs = 39,
        Keys = 40,
        Ingestibles = 41,
        IdleMarkers = 42,
        Holotapes = 43,
        Projectiles = 44,
        Hazards = 45,
        BendableSplines = 46,
        Terminals = 47,
        LeveledItems = 48,
        Weather = 49,
        Climates = 50,
        ShaderParticleGeometries = 51,
        VisualEffects = 52,
        Regions = 53,
        NavigationMeshInfoMaps = 54,
        Cells = 55,
        Worldspaces = 56,
        Quests = 57,
        IdleAnimations = 58,
        Packages = 59,
        CombatStyles = 60,
        LoadScreens = 61,
        AnimatedObjects = 62,
        Waters = 63,
        EffectShaders = 64,
        Explosions = 65,
        Debris = 66,
        ImageSpaces = 67,
        ImageSpaceAdapters = 68,
        FormLists = 69,
        Perks = 70,
        BodyParts = 71,
        AddonNodes = 72,
        ActorValueInformation = 73,
        CameraShots = 74,
        CameraPaths = 75,
        VoiceTypes = 76,
        MaterialTypes = 77,
        Impacts = 78,
        ImpactDataSets = 79,
        ArmorAddons = 80,
        EncounterZones = 81,
        Locations = 82,
        Messages = 83,
        DefaultObjectManagers = 84,
        DefaultObjects = 85,
        LightingTemplates = 86,
        MusicTypes = 87,
        Footsteps = 88,
        FootstepSets = 89,
        StoryManagerBranchNodes = 90,
        StoryManagerQuestNodes = 91,
        StoryManagerEventNodes = 92,
        MusicTracks = 93,
        DialogViews = 94,
        EquipTypes = 95,
        Relationships = 96,
        AssociationTypes = 97,
        Outfits = 98,
        ArtObjects = 99,
        MaterialObjects = 100,
        MovementTypes = 101,
        SoundDescriptors = 102,
        SoundCategories = 103,
        SoundOutputModels = 104,
        CollisionLayers = 105,
        Colors = 106,
        ReverbParameters = 107,
        PackIns = 108,
        ReferenceGroups = 109,
        AimModels = 110,
        Layers = 111,
        ConstructibleObjects = 112,
        ObjectModifications = 113,
        MaterialSwaps = 114,
        Zooms = 115,
        InstanceNamingRules = 116,
        SoundKeywordMappings = 117,
        AudioEffectChains = 118,
        SceneCollections = 119,
        AttractionRules = 120,
        AudioCategorySnapshots = 121,
        AnimationSoundTagSets = 122,
        NavigationMeshObstacleManagers = 123,
        LensFlares = 124,
        GodRays = 125,
        ObjectVisibilityManagers = 126,
    }
    #endregion

    #region Registration
    internal partial class Fallout4Mod_Registration : ILoquiRegistration
    {
        public static readonly Fallout4Mod_Registration Instance = new Fallout4Mod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 127;

        public const ushort FieldCount = 127;

        public static readonly Type MaskType = typeof(Fallout4Mod.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Fallout4Mod.ErrorMask);

        public static readonly Type ClassType = typeof(Fallout4Mod);

        public static readonly Type GetterType = typeof(IFallout4ModGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFallout4Mod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.Fallout4Mod";

        public const string Name = "Fallout4Mod";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TES4;
        public static readonly Type BinaryWriteTranslation = typeof(Fallout4ModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class Fallout4ModSetterCommon
    {
        public static readonly Fallout4ModSetterCommon Instance = new Fallout4ModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFallout4Mod item)
        {
            ClearPartial();
            item.GameSettings.Clear();
            item.Keywords.Clear();
            item.LocationReferenceTypes.Clear();
            item.Actions.Clear();
            item.Transforms.Clear();
            item.Components.Clear();
            item.TextureSets.Clear();
            item.Globals.Clear();
            item.DamageTypes.Clear();
            item.Classes.Clear();
            item.Factions.Clear();
            item.HeadParts.Clear();
            item.Races.Clear();
            item.SoundMarkers.Clear();
            item.AcousticSpaces.Clear();
            item.MagicEffects.Clear();
            item.LandscapeTextures.Clear();
            item.ObjectEffects.Clear();
            item.Spells.Clear();
            item.Activators.Clear();
            item.TalkingActivators.Clear();
            item.Armors.Clear();
            item.Books.Clear();
            item.Containers.Clear();
            item.Doors.Clear();
            item.Ingredients.Clear();
            item.Lights.Clear();
            item.MiscItems.Clear();
            item.Statics.Clear();
            item.StaticCollections.Clear();
            item.MovableStatics.Clear();
            item.Grasses.Clear();
            item.Trees.Clear();
            item.Florae.Clear();
            item.Furniture.Clear();
            item.Weapons.Clear();
            item.Ammunitions.Clear();
            item.Npcs.Clear();
            item.LeveledNpcs.Clear();
            item.Keys.Clear();
            item.Ingestibles.Clear();
            item.IdleMarkers.Clear();
            item.Holotapes.Clear();
            item.Projectiles.Clear();
            item.Hazards.Clear();
            item.BendableSplines.Clear();
            item.Terminals.Clear();
            item.LeveledItems.Clear();
            item.Weather.Clear();
            item.Climates.Clear();
            item.ShaderParticleGeometries.Clear();
            item.VisualEffects.Clear();
            item.Regions.Clear();
            item.NavigationMeshInfoMaps.Clear();
            item.Worldspaces.Clear();
            item.Quests.Clear();
            item.IdleAnimations.Clear();
            item.Packages.Clear();
            item.CombatStyles.Clear();
            item.LoadScreens.Clear();
            item.AnimatedObjects.Clear();
            item.Waters.Clear();
            item.EffectShaders.Clear();
            item.Explosions.Clear();
            item.Debris.Clear();
            item.ImageSpaces.Clear();
            item.ImageSpaceAdapters.Clear();
            item.FormLists.Clear();
            item.Perks.Clear();
            item.BodyParts.Clear();
            item.AddonNodes.Clear();
            item.ActorValueInformation.Clear();
            item.CameraShots.Clear();
            item.CameraPaths.Clear();
            item.VoiceTypes.Clear();
            item.MaterialTypes.Clear();
            item.Impacts.Clear();
            item.ImpactDataSets.Clear();
            item.ArmorAddons.Clear();
            item.EncounterZones.Clear();
            item.Locations.Clear();
            item.Messages.Clear();
            item.DefaultObjectManagers.Clear();
            item.DefaultObjects.Clear();
            item.LightingTemplates.Clear();
            item.MusicTypes.Clear();
            item.Footsteps.Clear();
            item.FootstepSets.Clear();
            item.StoryManagerBranchNodes.Clear();
            item.StoryManagerQuestNodes.Clear();
            item.StoryManagerEventNodes.Clear();
            item.MusicTracks.Clear();
            item.DialogViews.Clear();
            item.EquipTypes.Clear();
            item.Relationships.Clear();
            item.AssociationTypes.Clear();
            item.Outfits.Clear();
            item.ArtObjects.Clear();
            item.MaterialObjects.Clear();
            item.MovementTypes.Clear();
            item.SoundDescriptors.Clear();
            item.SoundCategories.Clear();
            item.SoundOutputModels.Clear();
            item.CollisionLayers.Clear();
            item.Colors.Clear();
            item.ReverbParameters.Clear();
            item.PackIns.Clear();
            item.ReferenceGroups.Clear();
            item.AimModels.Clear();
            item.Layers.Clear();
            item.ConstructibleObjects.Clear();
            item.ObjectModifications.Clear();
            item.MaterialSwaps.Clear();
            item.Zooms.Clear();
            item.InstanceNamingRules.Clear();
            item.SoundKeywordMappings.Clear();
            item.AudioEffectChains.Clear();
            item.SceneCollections.Clear();
            item.AttractionRules.Clear();
            item.AudioCategorySnapshots.Clear();
            item.AnimationSoundTagSets.Clear();
            item.NavigationMeshObstacleManagers.Clear();
            item.LensFlares.Clear();
            item.GodRays.Clear();
            item.ObjectVisibilityManagers.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IFallout4Mod obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ModHeader.RemapLinks(mapping);
            obj.Keywords.RemapLinks(mapping);
            obj.Actions.RemapLinks(mapping);
            obj.Components.RemapLinks(mapping);
            obj.DamageTypes.RemapLinks(mapping);
            obj.Classes.RemapLinks(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.HeadParts.RemapLinks(mapping);
            obj.Races.RemapLinks(mapping);
            obj.SoundMarkers.RemapLinks(mapping);
            obj.AcousticSpaces.RemapLinks(mapping);
            obj.MagicEffects.RemapLinks(mapping);
            obj.LandscapeTextures.RemapLinks(mapping);
            obj.ObjectEffects.RemapLinks(mapping);
            obj.Spells.RemapLinks(mapping);
            obj.Activators.RemapLinks(mapping);
            obj.TalkingActivators.RemapLinks(mapping);
            obj.Armors.RemapLinks(mapping);
            obj.Books.RemapLinks(mapping);
            obj.Containers.RemapLinks(mapping);
            obj.Doors.RemapLinks(mapping);
            obj.Ingredients.RemapLinks(mapping);
            obj.Lights.RemapLinks(mapping);
            obj.MiscItems.RemapLinks(mapping);
            obj.Statics.RemapLinks(mapping);
            obj.StaticCollections.RemapLinks(mapping);
            obj.MovableStatics.RemapLinks(mapping);
            obj.Grasses.RemapLinks(mapping);
            obj.Trees.RemapLinks(mapping);
            obj.Florae.RemapLinks(mapping);
            obj.Furniture.RemapLinks(mapping);
            obj.Weapons.RemapLinks(mapping);
            obj.Ammunitions.RemapLinks(mapping);
            obj.Npcs.RemapLinks(mapping);
            obj.LeveledNpcs.RemapLinks(mapping);
            obj.Keys.RemapLinks(mapping);
            obj.Ingestibles.RemapLinks(mapping);
            obj.IdleMarkers.RemapLinks(mapping);
            obj.Holotapes.RemapLinks(mapping);
            obj.Projectiles.RemapLinks(mapping);
            obj.Hazards.RemapLinks(mapping);
            obj.BendableSplines.RemapLinks(mapping);
            obj.Terminals.RemapLinks(mapping);
            obj.LeveledItems.RemapLinks(mapping);
            obj.Weather.RemapLinks(mapping);
            obj.Climates.RemapLinks(mapping);
            obj.VisualEffects.RemapLinks(mapping);
            obj.Regions.RemapLinks(mapping);
            obj.NavigationMeshInfoMaps.RemapLinks(mapping);
            obj.Cells.RemapLinks(mapping);
            obj.Worldspaces.RemapLinks(mapping);
            obj.Quests.RemapLinks(mapping);
            obj.IdleAnimations.RemapLinks(mapping);
            obj.Packages.RemapLinks(mapping);
            obj.LoadScreens.RemapLinks(mapping);
            obj.AnimatedObjects.RemapLinks(mapping);
            obj.Waters.RemapLinks(mapping);
            obj.EffectShaders.RemapLinks(mapping);
            obj.Explosions.RemapLinks(mapping);
            obj.FormLists.RemapLinks(mapping);
            obj.Perks.RemapLinks(mapping);
            obj.BodyParts.RemapLinks(mapping);
            obj.AddonNodes.RemapLinks(mapping);
            obj.CameraShots.RemapLinks(mapping);
            obj.CameraPaths.RemapLinks(mapping);
            obj.MaterialTypes.RemapLinks(mapping);
            obj.Impacts.RemapLinks(mapping);
            obj.ImpactDataSets.RemapLinks(mapping);
            obj.ArmorAddons.RemapLinks(mapping);
            obj.EncounterZones.RemapLinks(mapping);
            obj.Locations.RemapLinks(mapping);
            obj.Messages.RemapLinks(mapping);
            obj.DefaultObjectManagers.RemapLinks(mapping);
            obj.DefaultObjects.RemapLinks(mapping);
            obj.LightingTemplates.RemapLinks(mapping);
            obj.MusicTypes.RemapLinks(mapping);
            obj.Footsteps.RemapLinks(mapping);
            obj.FootstepSets.RemapLinks(mapping);
            obj.StoryManagerBranchNodes.RemapLinks(mapping);
            obj.StoryManagerQuestNodes.RemapLinks(mapping);
            obj.StoryManagerEventNodes.RemapLinks(mapping);
            obj.MusicTracks.RemapLinks(mapping);
            obj.DialogViews.RemapLinks(mapping);
            obj.EquipTypes.RemapLinks(mapping);
            obj.Relationships.RemapLinks(mapping);
            obj.Outfits.RemapLinks(mapping);
            obj.ArtObjects.RemapLinks(mapping);
            obj.MaterialObjects.RemapLinks(mapping);
            obj.SoundDescriptors.RemapLinks(mapping);
            obj.SoundCategories.RemapLinks(mapping);
            obj.SoundOutputModels.RemapLinks(mapping);
            obj.CollisionLayers.RemapLinks(mapping);
            obj.Colors.RemapLinks(mapping);
            obj.PackIns.RemapLinks(mapping);
            obj.ReferenceGroups.RemapLinks(mapping);
            obj.Layers.RemapLinks(mapping);
            obj.ConstructibleObjects.RemapLinks(mapping);
            obj.ObjectModifications.RemapLinks(mapping);
            obj.Zooms.RemapLinks(mapping);
            obj.InstanceNamingRules.RemapLinks(mapping);
            obj.SoundKeywordMappings.RemapLinks(mapping);
            obj.SceneCollections.RemapLinks(mapping);
            obj.AudioCategorySnapshots.RemapLinks(mapping);
            obj.AnimationSoundTagSets.RemapLinks(mapping);
            obj.ObjectVisibilityManagers.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(IFallout4Mod obj)
        {
            foreach (var item in Fallout4ModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IFallout4Mod obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IFallout4Mod obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in Fallout4ModCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IFallout4Mod obj,
            HashSet<FormKey> keys)
        {
            obj.GameSettings.Remove(keys);
            obj.Keywords.Remove(keys);
            obj.LocationReferenceTypes.Remove(keys);
            obj.Actions.Remove(keys);
            obj.Transforms.Remove(keys);
            obj.Components.Remove(keys);
            obj.TextureSets.Remove(keys);
            obj.Globals.Remove(keys);
            obj.DamageTypes.Remove(keys);
            obj.Classes.Remove(keys);
            obj.Factions.Remove(keys);
            obj.HeadParts.Remove(keys);
            obj.Races.Remove(keys);
            obj.SoundMarkers.Remove(keys);
            obj.AcousticSpaces.Remove(keys);
            obj.MagicEffects.Remove(keys);
            obj.LandscapeTextures.Remove(keys);
            obj.ObjectEffects.Remove(keys);
            obj.Spells.Remove(keys);
            obj.Activators.Remove(keys);
            obj.TalkingActivators.Remove(keys);
            obj.Armors.Remove(keys);
            obj.Books.Remove(keys);
            obj.Containers.Remove(keys);
            obj.Doors.Remove(keys);
            obj.Ingredients.Remove(keys);
            obj.Lights.Remove(keys);
            obj.MiscItems.Remove(keys);
            obj.Statics.Remove(keys);
            obj.StaticCollections.Remove(keys);
            obj.MovableStatics.Remove(keys);
            obj.Grasses.Remove(keys);
            obj.Trees.Remove(keys);
            obj.Florae.Remove(keys);
            obj.Furniture.Remove(keys);
            obj.Weapons.Remove(keys);
            obj.Ammunitions.Remove(keys);
            obj.Npcs.Remove(keys);
            obj.LeveledNpcs.Remove(keys);
            obj.Keys.Remove(keys);
            obj.Ingestibles.Remove(keys);
            obj.IdleMarkers.Remove(keys);
            obj.Holotapes.Remove(keys);
            obj.Projectiles.Remove(keys);
            obj.Hazards.Remove(keys);
            obj.BendableSplines.Remove(keys);
            obj.Terminals.Remove(keys);
            obj.LeveledItems.Remove(keys);
            obj.Weather.Remove(keys);
            obj.Climates.Remove(keys);
            obj.ShaderParticleGeometries.Remove(keys);
            obj.VisualEffects.Remove(keys);
            obj.Regions.Remove(keys);
            obj.NavigationMeshInfoMaps.Remove(keys);
            obj.Cells.Remove(keys);
            obj.Worldspaces.Remove(keys);
            obj.Quests.Remove(keys);
            obj.IdleAnimations.Remove(keys);
            obj.Packages.Remove(keys);
            obj.CombatStyles.Remove(keys);
            obj.LoadScreens.Remove(keys);
            obj.AnimatedObjects.Remove(keys);
            obj.Waters.Remove(keys);
            obj.EffectShaders.Remove(keys);
            obj.Explosions.Remove(keys);
            obj.Debris.Remove(keys);
            obj.ImageSpaces.Remove(keys);
            obj.ImageSpaceAdapters.Remove(keys);
            obj.FormLists.Remove(keys);
            obj.Perks.Remove(keys);
            obj.BodyParts.Remove(keys);
            obj.AddonNodes.Remove(keys);
            obj.ActorValueInformation.Remove(keys);
            obj.CameraShots.Remove(keys);
            obj.CameraPaths.Remove(keys);
            obj.VoiceTypes.Remove(keys);
            obj.MaterialTypes.Remove(keys);
            obj.Impacts.Remove(keys);
            obj.ImpactDataSets.Remove(keys);
            obj.ArmorAddons.Remove(keys);
            obj.EncounterZones.Remove(keys);
            obj.Locations.Remove(keys);
            obj.Messages.Remove(keys);
            obj.DefaultObjectManagers.Remove(keys);
            obj.DefaultObjects.Remove(keys);
            obj.LightingTemplates.Remove(keys);
            obj.MusicTypes.Remove(keys);
            obj.Footsteps.Remove(keys);
            obj.FootstepSets.Remove(keys);
            obj.StoryManagerBranchNodes.Remove(keys);
            obj.StoryManagerQuestNodes.Remove(keys);
            obj.StoryManagerEventNodes.Remove(keys);
            obj.MusicTracks.Remove(keys);
            obj.DialogViews.Remove(keys);
            obj.EquipTypes.Remove(keys);
            obj.Relationships.Remove(keys);
            obj.AssociationTypes.Remove(keys);
            obj.Outfits.Remove(keys);
            obj.ArtObjects.Remove(keys);
            obj.MaterialObjects.Remove(keys);
            obj.MovementTypes.Remove(keys);
            obj.SoundDescriptors.Remove(keys);
            obj.SoundCategories.Remove(keys);
            obj.SoundOutputModels.Remove(keys);
            obj.CollisionLayers.Remove(keys);
            obj.Colors.Remove(keys);
            obj.ReverbParameters.Remove(keys);
            obj.PackIns.Remove(keys);
            obj.ReferenceGroups.Remove(keys);
            obj.AimModels.Remove(keys);
            obj.Layers.Remove(keys);
            obj.ConstructibleObjects.Remove(keys);
            obj.ObjectModifications.Remove(keys);
            obj.MaterialSwaps.Remove(keys);
            obj.Zooms.Remove(keys);
            obj.InstanceNamingRules.Remove(keys);
            obj.SoundKeywordMappings.Remove(keys);
            obj.AudioEffectChains.Remove(keys);
            obj.SceneCollections.Remove(keys);
            obj.AttractionRules.Remove(keys);
            obj.AudioCategorySnapshots.Remove(keys);
            obj.AnimationSoundTagSets.Remove(keys);
            obj.NavigationMeshObstacleManagers.Remove(keys);
            obj.LensFlares.Remove(keys);
            obj.GodRays.Remove(keys);
            obj.ObjectVisibilityManagers.Remove(keys);
        }
        
        public void Remove(
            IFallout4Mod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                case "IMajorRecordGetter":
                case "IFallout4MajorRecordGetter":
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                case "GameSettingInt":
                case "IGameSettingIntGetter":
                case "IGameSettingInt":
                case "IGameSettingIntInternal":
                case "GameSettingFloat":
                case "IGameSettingFloatGetter":
                case "IGameSettingFloat":
                case "IGameSettingFloatInternal":
                case "GameSettingString":
                case "IGameSettingStringGetter":
                case "IGameSettingString":
                case "IGameSettingStringInternal":
                case "GameSettingBool":
                case "IGameSettingBoolGetter":
                case "IGameSettingBool":
                case "IGameSettingBoolInternal":
                case "GameSettingUInt":
                case "IGameSettingUIntGetter":
                case "IGameSettingUInt":
                case "IGameSettingUIntInternal":
                    obj.GameSettings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    obj.Keywords.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    obj.LocationReferenceTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    obj.Actions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Transform":
                case "ITransformGetter":
                case "ITransform":
                case "ITransformInternal":
                    obj.Transforms.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Component":
                case "IComponentGetter":
                case "IComponent":
                case "IComponentInternal":
                    obj.Components.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    obj.TextureSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                case "GlobalInt":
                case "IGlobalIntGetter":
                case "IGlobalInt":
                case "IGlobalIntInternal":
                case "GlobalShort":
                case "IGlobalShortGetter":
                case "IGlobalShort":
                case "IGlobalShortInternal":
                case "GlobalFloat":
                case "IGlobalFloatGetter":
                case "IGlobalFloat":
                case "IGlobalFloatInternal":
                case "GlobalBool":
                case "IGlobalBoolGetter":
                case "IGlobalBool":
                case "IGlobalBoolInternal":
                    obj.Globals.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ADamageType":
                case "IADamageTypeGetter":
                case "IADamageType":
                case "IADamageTypeInternal":
                case "DamageType":
                case "IDamageTypeGetter":
                case "IDamageType":
                case "IDamageTypeInternal":
                case "DamageTypeIndexed":
                case "IDamageTypeIndexedGetter":
                case "IDamageTypeIndexed":
                case "IDamageTypeIndexedInternal":
                    obj.DamageTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    obj.Classes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    obj.Factions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    obj.HeadParts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    obj.Races.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    obj.SoundMarkers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    obj.AcousticSpaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    obj.MagicEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    obj.LandscapeTextures.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    obj.ObjectEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    obj.Spells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    obj.Activators.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    obj.TalkingActivators.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    obj.Armors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    obj.Books.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    obj.Containers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    obj.Doors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    obj.Ingredients.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    obj.Lights.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    obj.MiscItems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    obj.Statics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StaticCollection":
                case "IStaticCollectionGetter":
                case "IStaticCollection":
                case "IStaticCollectionInternal":
                    obj.StaticCollections.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MovableStatic":
                case "IMovableStaticGetter":
                case "IMovableStatic":
                case "IMovableStaticInternal":
                    obj.MovableStatics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    obj.Grasses.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    obj.Trees.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    obj.Florae.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    obj.Furniture.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    obj.Weapons.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    obj.Ammunitions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    obj.Npcs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    obj.LeveledNpcs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    obj.Keys.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    obj.Ingestibles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    obj.IdleMarkers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Holotape":
                case "IHolotapeGetter":
                case "IHolotape":
                case "IHolotapeInternal":
                    obj.Holotapes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    obj.Projectiles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    obj.Hazards.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "BendableSpline":
                case "IBendableSplineGetter":
                case "IBendableSpline":
                case "IBendableSplineInternal":
                    obj.BendableSplines.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Terminal":
                case "ITerminalGetter":
                case "ITerminal":
                case "ITerminalInternal":
                    obj.Terminals.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    obj.LeveledItems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    obj.Weather.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    obj.Climates.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    obj.ShaderParticleGeometries.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    obj.VisualEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    obj.Regions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    obj.NavigationMeshInfoMaps.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    obj.IdleAnimations.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    obj.Packages.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    obj.CombatStyles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    obj.LoadScreens.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    obj.AnimatedObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    obj.Waters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    obj.EffectShaders.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    obj.Explosions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    obj.Debris.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    obj.ImageSpaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    obj.ImageSpaceAdapters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    obj.FormLists.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    obj.Perks.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    obj.BodyParts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    obj.AddonNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    obj.ActorValueInformation.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    obj.CameraShots.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    obj.CameraPaths.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    obj.VoiceTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    obj.MaterialTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    obj.Impacts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    obj.ImpactDataSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    obj.ArmorAddons.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    obj.EncounterZones.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    obj.Locations.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    obj.Messages.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    obj.DefaultObjectManagers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DefaultObject":
                case "IDefaultObjectGetter":
                case "IDefaultObject":
                case "IDefaultObjectInternal":
                    obj.DefaultObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    obj.LightingTemplates.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    obj.MusicTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    obj.Footsteps.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    obj.FootstepSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    obj.StoryManagerBranchNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    obj.StoryManagerQuestNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    obj.StoryManagerEventNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    obj.MusicTracks.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    obj.DialogViews.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    obj.EquipTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    obj.Relationships.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    obj.AssociationTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    obj.Outfits.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    obj.ArtObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    obj.MaterialObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    obj.MovementTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    obj.SoundDescriptors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    obj.SoundCategories.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    obj.SoundOutputModels.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    obj.CollisionLayers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    obj.Colors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    obj.ReverbParameters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PackIn":
                case "IPackInGetter":
                case "IPackIn":
                case "IPackInInternal":
                    obj.PackIns.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ReferenceGroup":
                case "IReferenceGroupGetter":
                case "IReferenceGroup":
                case "IReferenceGroupInternal":
                    obj.ReferenceGroups.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AimModel":
                case "IAimModelGetter":
                case "IAimModel":
                case "IAimModelInternal":
                    obj.AimModels.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Layer":
                case "ILayerGetter":
                case "ILayer":
                case "ILayerInternal":
                    obj.Layers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    obj.ConstructibleObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AObjectModification":
                case "IAObjectModificationGetter":
                case "IAObjectModification":
                case "IAObjectModificationInternal":
                case "ArmorModification":
                case "IArmorModificationGetter":
                case "IArmorModification":
                case "IArmorModificationInternal":
                case "NpcModification":
                case "INpcModificationGetter":
                case "INpcModification":
                case "INpcModificationInternal":
                case "WeaponModification":
                case "IWeaponModificationGetter":
                case "IWeaponModification":
                case "IWeaponModificationInternal":
                case "ObjectModification":
                case "IObjectModificationGetter":
                case "IObjectModification":
                case "IObjectModificationInternal":
                case "UnknownObjectModification":
                case "IUnknownObjectModificationGetter":
                case "IUnknownObjectModification":
                case "IUnknownObjectModificationInternal":
                    obj.ObjectModifications.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MaterialSwap":
                case "IMaterialSwapGetter":
                case "IMaterialSwap":
                case "IMaterialSwapInternal":
                    obj.MaterialSwaps.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Zoom":
                case "IZoomGetter":
                case "IZoom":
                case "IZoomInternal":
                    obj.Zooms.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "InstanceNamingRules":
                case "IInstanceNamingRulesGetter":
                case "IInstanceNamingRules":
                case "IInstanceNamingRulesInternal":
                    obj.InstanceNamingRules.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundKeywordMapping":
                case "ISoundKeywordMappingGetter":
                case "ISoundKeywordMapping":
                case "ISoundKeywordMappingInternal":
                    obj.SoundKeywordMappings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AudioEffectChain":
                case "IAudioEffectChainGetter":
                case "IAudioEffectChain":
                case "IAudioEffectChainInternal":
                    obj.AudioEffectChains.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SceneCollection":
                case "ISceneCollectionGetter":
                case "ISceneCollection":
                case "ISceneCollectionInternal":
                    obj.SceneCollections.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AttractionRule":
                case "IAttractionRuleGetter":
                case "IAttractionRule":
                case "IAttractionRuleInternal":
                    obj.AttractionRules.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AudioCategorySnapshot":
                case "IAudioCategorySnapshotGetter":
                case "IAudioCategorySnapshot":
                case "IAudioCategorySnapshotInternal":
                    obj.AudioCategorySnapshots.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AnimationSoundTagSet":
                case "IAnimationSoundTagSetGetter":
                case "IAnimationSoundTagSet":
                case "IAnimationSoundTagSetInternal":
                    obj.AnimationSoundTagSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "NavigationMeshObstacleManager":
                case "INavigationMeshObstacleManagerGetter":
                case "INavigationMeshObstacleManager":
                case "INavigationMeshObstacleManagerInternal":
                    obj.NavigationMeshObstacleManagers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LensFlare":
                case "ILensFlareGetter":
                case "ILensFlare":
                case "ILensFlareInternal":
                    obj.LensFlares.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "GodRays":
                case "IGodRaysGetter":
                case "IGodRays":
                case "IGodRaysInternal":
                    obj.GodRays.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ObjectVisibilityManager":
                case "IObjectVisibilityManagerGetter":
                case "IObjectVisibilityManager":
                case "IObjectVisibilityManagerInternal":
                    obj.ObjectVisibilityManagers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "NavigationMesh":
                case "INavigationMeshGetter":
                case "INavigationMesh":
                case "INavigationMeshInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                case "PlacedArrow":
                case "IPlacedArrowGetter":
                case "IPlacedArrow":
                case "IPlacedArrowInternal":
                case "PlacedBeam":
                case "IPlacedBeamGetter":
                case "IPlacedBeam":
                case "IPlacedBeamInternal":
                case "PlacedFlame":
                case "IPlacedFlameGetter":
                case "IPlacedFlame":
                case "IPlacedFlameInternal":
                case "PlacedCone":
                case "IPlacedConeGetter":
                case "IPlacedCone":
                case "IPlacedConeInternal":
                case "PlacedBarrier":
                case "IPlacedBarrierGetter":
                case "IPlacedBarrier":
                case "IPlacedBarrierInternal":
                case "PlacedTrap":
                case "IPlacedTrapGetter":
                case "IPlacedTrap":
                case "IPlacedTrapInternal":
                case "PlacedHazard":
                case "IPlacedHazardGetter":
                case "IPlacedHazard":
                case "IPlacedHazardInternal":
                case "PlacedMissile":
                case "IPlacedMissileGetter":
                case "IPlacedMissile":
                case "IPlacedMissileInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlaceableObject":
                case "IPlaceableObjectGetter":
                    Remove(obj, keys, typeof(IAcousticSpaceGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAddonNodeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArtObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBendableSplineGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IComponentGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IConstructibleObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDebrisGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IExplosionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHolotapeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledNpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMovableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAObjectModificationGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticCollectionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITalkingActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITerminalGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITreeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWaterGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IReferenceableObject":
                case "IReferenceableObjectGetter":
                    Remove(obj, keys, typeof(IAcousticSpaceGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAddonNodeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArtObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBendableSplineGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IComponentGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IConstructibleObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDebrisGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IExplosionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHazardGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHolotapeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledNpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMovableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAObjectModificationGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticCollectionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITalkingActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITerminalGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITreeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWaterGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IExplodeSpawn":
                case "IExplodeSpawnGetter":
                    Remove(obj, keys, typeof(IAcousticSpaceGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAddonNodeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorAddonGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArtObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBendableSplineGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IComponentGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IExplosionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IGrassGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHazardGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHolotapeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledNpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMovableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IObjectEffectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITalkingActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITerminalGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITreeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IIdleRelation":
                case "IIdleRelationGetter":
                    Remove(obj, keys, typeof(IActionRecordGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleAnimationGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IObjectId":
                case "IObjectIdGetter":
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHolotapeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMovableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAObjectModificationGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IStaticTarget":
                case "IStaticTargetGetter":
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMovableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITerminalGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IConstructibleObjectTarget":
                case "IConstructibleObjectTargetGetter":
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHolotapeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMovableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAObjectModificationGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticCollectionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITerminalGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IItem":
                case "IItemGetter":
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IComponentGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IConstructibleObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHolotapeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IHarvestTarget":
                case "IHarvestTargetGetter":
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IConstructibleObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHolotapeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IOutfitTarget":
                case "IOutfitTargetGetter":
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IConstructible":
                case "IConstructibleGetter":
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IBindableEquipment":
                case "IBindableEquipmentGetter":
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IFurnitureAssociation":
                case "IFurnitureAssociationGetter":
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHazardGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IPerkGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IComplexLocation":
                case "IComplexLocationGetter":
                    Remove(obj, keys, typeof(IWorldspaceGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IOwner":
                case "IOwnerGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IRelatable":
                case "IRelatableGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IRaceGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IAliasVoiceType":
                case "IAliasVoiceTypeGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IVoiceTypeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IRegionTarget":
                case "IRegionTargetGetter":
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILandscapeTextureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMovableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITreeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILockList":
                case "ILockListGetter":
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IPlacedTrapTarget":
                case "IPlacedTrapTargetGetter":
                    Remove(obj, keys, typeof(IHazardGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IKeywordLinkedReference":
                case "IKeywordLinkedReferenceGetter":
                    Remove(obj, keys, typeof(IKeywordGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPreCutMapEntryReference":
                case "IPreCutMapEntryReferenceGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "INpcSpawn":
                case "INpcSpawnGetter":
                    Remove(obj, keys, typeof(ILeveledNpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IEmittance":
                case "IEmittanceGetter":
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IRegionGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILocationRecord":
                case "ILocationRecordGetter":
                    Remove(obj, keys, typeof(ILocationGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILocationReferenceTypeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IEffectRecord":
                case "IEffectRecordGetter":
                    Remove(obj, keys, typeof(IObjectEffectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IPlaced":
                case "IPlacedGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlacedSimple":
                case "IPlacedSimpleGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ILinkedReference":
                case "ILinkedReferenceGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlacedThing":
                case "IPlacedThingGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ISound":
                case "ISoundGetter":
                    Remove(obj, keys, typeof(ISoundDescriptorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ISpellRecord":
                case "ISpellRecordGetter":
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IStaticObject":
                case "IStaticObjectGetter":
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticCollectionGetter), throwIfUnknown: throwIfUnknown);
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IFallout4Mod obj)
        {
            if (obj.Cells is IAssetLinkContainer CellslinkCont)
            {
                foreach (var item in CellslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Worldspaces is IAssetLinkContainer WorldspaceslinkCont)
            {
                foreach (var item in WorldspaceslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IFallout4Mod obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            obj.Cells.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Worldspaces.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFallout4Mod item,
            MutagenFrame frame,
            Fallout4Release release,
            GroupMask? importMask = null)
        {
            PluginUtilityTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                fillTyped: Fallout4ModBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class Fallout4ModCommon
    {
        public static readonly Fallout4ModCommon Instance = new Fallout4ModCommon();

        public Fallout4Mod.Mask<bool> GetEqualsMask(
            IFallout4ModGetter item,
            IFallout4ModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Fallout4Mod.Mask<bool>(false);
            ((Fallout4ModCommon)((IFallout4ModGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFallout4ModGetter item,
            IFallout4ModGetter rhs,
            Fallout4Mod.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Keywords = MaskItemExt.Factory(item.Keywords.GetEqualsMask(rhs.Keywords, include), include);
            ret.LocationReferenceTypes = MaskItemExt.Factory(item.LocationReferenceTypes.GetEqualsMask(rhs.LocationReferenceTypes, include), include);
            ret.Actions = MaskItemExt.Factory(item.Actions.GetEqualsMask(rhs.Actions, include), include);
            ret.Transforms = MaskItemExt.Factory(item.Transforms.GetEqualsMask(rhs.Transforms, include), include);
            ret.Components = MaskItemExt.Factory(item.Components.GetEqualsMask(rhs.Components, include), include);
            ret.TextureSets = MaskItemExt.Factory(item.TextureSets.GetEqualsMask(rhs.TextureSets, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
            ret.DamageTypes = MaskItemExt.Factory(item.DamageTypes.GetEqualsMask(rhs.DamageTypes, include), include);
            ret.Classes = MaskItemExt.Factory(item.Classes.GetEqualsMask(rhs.Classes, include), include);
            ret.Factions = MaskItemExt.Factory(item.Factions.GetEqualsMask(rhs.Factions, include), include);
            ret.HeadParts = MaskItemExt.Factory(item.HeadParts.GetEqualsMask(rhs.HeadParts, include), include);
            ret.Races = MaskItemExt.Factory(item.Races.GetEqualsMask(rhs.Races, include), include);
            ret.SoundMarkers = MaskItemExt.Factory(item.SoundMarkers.GetEqualsMask(rhs.SoundMarkers, include), include);
            ret.AcousticSpaces = MaskItemExt.Factory(item.AcousticSpaces.GetEqualsMask(rhs.AcousticSpaces, include), include);
            ret.MagicEffects = MaskItemExt.Factory(item.MagicEffects.GetEqualsMask(rhs.MagicEffects, include), include);
            ret.LandscapeTextures = MaskItemExt.Factory(item.LandscapeTextures.GetEqualsMask(rhs.LandscapeTextures, include), include);
            ret.ObjectEffects = MaskItemExt.Factory(item.ObjectEffects.GetEqualsMask(rhs.ObjectEffects, include), include);
            ret.Spells = MaskItemExt.Factory(item.Spells.GetEqualsMask(rhs.Spells, include), include);
            ret.Activators = MaskItemExt.Factory(item.Activators.GetEqualsMask(rhs.Activators, include), include);
            ret.TalkingActivators = MaskItemExt.Factory(item.TalkingActivators.GetEqualsMask(rhs.TalkingActivators, include), include);
            ret.Armors = MaskItemExt.Factory(item.Armors.GetEqualsMask(rhs.Armors, include), include);
            ret.Books = MaskItemExt.Factory(item.Books.GetEqualsMask(rhs.Books, include), include);
            ret.Containers = MaskItemExt.Factory(item.Containers.GetEqualsMask(rhs.Containers, include), include);
            ret.Doors = MaskItemExt.Factory(item.Doors.GetEqualsMask(rhs.Doors, include), include);
            ret.Ingredients = MaskItemExt.Factory(item.Ingredients.GetEqualsMask(rhs.Ingredients, include), include);
            ret.Lights = MaskItemExt.Factory(item.Lights.GetEqualsMask(rhs.Lights, include), include);
            ret.MiscItems = MaskItemExt.Factory(item.MiscItems.GetEqualsMask(rhs.MiscItems, include), include);
            ret.Statics = MaskItemExt.Factory(item.Statics.GetEqualsMask(rhs.Statics, include), include);
            ret.StaticCollections = MaskItemExt.Factory(item.StaticCollections.GetEqualsMask(rhs.StaticCollections, include), include);
            ret.MovableStatics = MaskItemExt.Factory(item.MovableStatics.GetEqualsMask(rhs.MovableStatics, include), include);
            ret.Grasses = MaskItemExt.Factory(item.Grasses.GetEqualsMask(rhs.Grasses, include), include);
            ret.Trees = MaskItemExt.Factory(item.Trees.GetEqualsMask(rhs.Trees, include), include);
            ret.Florae = MaskItemExt.Factory(item.Florae.GetEqualsMask(rhs.Florae, include), include);
            ret.Furniture = MaskItemExt.Factory(item.Furniture.GetEqualsMask(rhs.Furniture, include), include);
            ret.Weapons = MaskItemExt.Factory(item.Weapons.GetEqualsMask(rhs.Weapons, include), include);
            ret.Ammunitions = MaskItemExt.Factory(item.Ammunitions.GetEqualsMask(rhs.Ammunitions, include), include);
            ret.Npcs = MaskItemExt.Factory(item.Npcs.GetEqualsMask(rhs.Npcs, include), include);
            ret.LeveledNpcs = MaskItemExt.Factory(item.LeveledNpcs.GetEqualsMask(rhs.LeveledNpcs, include), include);
            ret.Keys = MaskItemExt.Factory(item.Keys.GetEqualsMask(rhs.Keys, include), include);
            ret.Ingestibles = MaskItemExt.Factory(item.Ingestibles.GetEqualsMask(rhs.Ingestibles, include), include);
            ret.IdleMarkers = MaskItemExt.Factory(item.IdleMarkers.GetEqualsMask(rhs.IdleMarkers, include), include);
            ret.Holotapes = MaskItemExt.Factory(item.Holotapes.GetEqualsMask(rhs.Holotapes, include), include);
            ret.Projectiles = MaskItemExt.Factory(item.Projectiles.GetEqualsMask(rhs.Projectiles, include), include);
            ret.Hazards = MaskItemExt.Factory(item.Hazards.GetEqualsMask(rhs.Hazards, include), include);
            ret.BendableSplines = MaskItemExt.Factory(item.BendableSplines.GetEqualsMask(rhs.BendableSplines, include), include);
            ret.Terminals = MaskItemExt.Factory(item.Terminals.GetEqualsMask(rhs.Terminals, include), include);
            ret.LeveledItems = MaskItemExt.Factory(item.LeveledItems.GetEqualsMask(rhs.LeveledItems, include), include);
            ret.Weather = MaskItemExt.Factory(item.Weather.GetEqualsMask(rhs.Weather, include), include);
            ret.Climates = MaskItemExt.Factory(item.Climates.GetEqualsMask(rhs.Climates, include), include);
            ret.ShaderParticleGeometries = MaskItemExt.Factory(item.ShaderParticleGeometries.GetEqualsMask(rhs.ShaderParticleGeometries, include), include);
            ret.VisualEffects = MaskItemExt.Factory(item.VisualEffects.GetEqualsMask(rhs.VisualEffects, include), include);
            ret.Regions = MaskItemExt.Factory(item.Regions.GetEqualsMask(rhs.Regions, include), include);
            ret.NavigationMeshInfoMaps = MaskItemExt.Factory(item.NavigationMeshInfoMaps.GetEqualsMask(rhs.NavigationMeshInfoMaps, include), include);
            ret.Cells = MaskItemExt.Factory(item.Cells.GetEqualsMask(rhs.Cells, include), include);
            ret.Worldspaces = MaskItemExt.Factory(item.Worldspaces.GetEqualsMask(rhs.Worldspaces, include), include);
            ret.Quests = MaskItemExt.Factory(item.Quests.GetEqualsMask(rhs.Quests, include), include);
            ret.IdleAnimations = MaskItemExt.Factory(item.IdleAnimations.GetEqualsMask(rhs.IdleAnimations, include), include);
            ret.Packages = MaskItemExt.Factory(item.Packages.GetEqualsMask(rhs.Packages, include), include);
            ret.CombatStyles = MaskItemExt.Factory(item.CombatStyles.GetEqualsMask(rhs.CombatStyles, include), include);
            ret.LoadScreens = MaskItemExt.Factory(item.LoadScreens.GetEqualsMask(rhs.LoadScreens, include), include);
            ret.AnimatedObjects = MaskItemExt.Factory(item.AnimatedObjects.GetEqualsMask(rhs.AnimatedObjects, include), include);
            ret.Waters = MaskItemExt.Factory(item.Waters.GetEqualsMask(rhs.Waters, include), include);
            ret.EffectShaders = MaskItemExt.Factory(item.EffectShaders.GetEqualsMask(rhs.EffectShaders, include), include);
            ret.Explosions = MaskItemExt.Factory(item.Explosions.GetEqualsMask(rhs.Explosions, include), include);
            ret.Debris = MaskItemExt.Factory(item.Debris.GetEqualsMask(rhs.Debris, include), include);
            ret.ImageSpaces = MaskItemExt.Factory(item.ImageSpaces.GetEqualsMask(rhs.ImageSpaces, include), include);
            ret.ImageSpaceAdapters = MaskItemExt.Factory(item.ImageSpaceAdapters.GetEqualsMask(rhs.ImageSpaceAdapters, include), include);
            ret.FormLists = MaskItemExt.Factory(item.FormLists.GetEqualsMask(rhs.FormLists, include), include);
            ret.Perks = MaskItemExt.Factory(item.Perks.GetEqualsMask(rhs.Perks, include), include);
            ret.BodyParts = MaskItemExt.Factory(item.BodyParts.GetEqualsMask(rhs.BodyParts, include), include);
            ret.AddonNodes = MaskItemExt.Factory(item.AddonNodes.GetEqualsMask(rhs.AddonNodes, include), include);
            ret.ActorValueInformation = MaskItemExt.Factory(item.ActorValueInformation.GetEqualsMask(rhs.ActorValueInformation, include), include);
            ret.CameraShots = MaskItemExt.Factory(item.CameraShots.GetEqualsMask(rhs.CameraShots, include), include);
            ret.CameraPaths = MaskItemExt.Factory(item.CameraPaths.GetEqualsMask(rhs.CameraPaths, include), include);
            ret.VoiceTypes = MaskItemExt.Factory(item.VoiceTypes.GetEqualsMask(rhs.VoiceTypes, include), include);
            ret.MaterialTypes = MaskItemExt.Factory(item.MaterialTypes.GetEqualsMask(rhs.MaterialTypes, include), include);
            ret.Impacts = MaskItemExt.Factory(item.Impacts.GetEqualsMask(rhs.Impacts, include), include);
            ret.ImpactDataSets = MaskItemExt.Factory(item.ImpactDataSets.GetEqualsMask(rhs.ImpactDataSets, include), include);
            ret.ArmorAddons = MaskItemExt.Factory(item.ArmorAddons.GetEqualsMask(rhs.ArmorAddons, include), include);
            ret.EncounterZones = MaskItemExt.Factory(item.EncounterZones.GetEqualsMask(rhs.EncounterZones, include), include);
            ret.Locations = MaskItemExt.Factory(item.Locations.GetEqualsMask(rhs.Locations, include), include);
            ret.Messages = MaskItemExt.Factory(item.Messages.GetEqualsMask(rhs.Messages, include), include);
            ret.DefaultObjectManagers = MaskItemExt.Factory(item.DefaultObjectManagers.GetEqualsMask(rhs.DefaultObjectManagers, include), include);
            ret.DefaultObjects = MaskItemExt.Factory(item.DefaultObjects.GetEqualsMask(rhs.DefaultObjects, include), include);
            ret.LightingTemplates = MaskItemExt.Factory(item.LightingTemplates.GetEqualsMask(rhs.LightingTemplates, include), include);
            ret.MusicTypes = MaskItemExt.Factory(item.MusicTypes.GetEqualsMask(rhs.MusicTypes, include), include);
            ret.Footsteps = MaskItemExt.Factory(item.Footsteps.GetEqualsMask(rhs.Footsteps, include), include);
            ret.FootstepSets = MaskItemExt.Factory(item.FootstepSets.GetEqualsMask(rhs.FootstepSets, include), include);
            ret.StoryManagerBranchNodes = MaskItemExt.Factory(item.StoryManagerBranchNodes.GetEqualsMask(rhs.StoryManagerBranchNodes, include), include);
            ret.StoryManagerQuestNodes = MaskItemExt.Factory(item.StoryManagerQuestNodes.GetEqualsMask(rhs.StoryManagerQuestNodes, include), include);
            ret.StoryManagerEventNodes = MaskItemExt.Factory(item.StoryManagerEventNodes.GetEqualsMask(rhs.StoryManagerEventNodes, include), include);
            ret.MusicTracks = MaskItemExt.Factory(item.MusicTracks.GetEqualsMask(rhs.MusicTracks, include), include);
            ret.DialogViews = MaskItemExt.Factory(item.DialogViews.GetEqualsMask(rhs.DialogViews, include), include);
            ret.EquipTypes = MaskItemExt.Factory(item.EquipTypes.GetEqualsMask(rhs.EquipTypes, include), include);
            ret.Relationships = MaskItemExt.Factory(item.Relationships.GetEqualsMask(rhs.Relationships, include), include);
            ret.AssociationTypes = MaskItemExt.Factory(item.AssociationTypes.GetEqualsMask(rhs.AssociationTypes, include), include);
            ret.Outfits = MaskItemExt.Factory(item.Outfits.GetEqualsMask(rhs.Outfits, include), include);
            ret.ArtObjects = MaskItemExt.Factory(item.ArtObjects.GetEqualsMask(rhs.ArtObjects, include), include);
            ret.MaterialObjects = MaskItemExt.Factory(item.MaterialObjects.GetEqualsMask(rhs.MaterialObjects, include), include);
            ret.MovementTypes = MaskItemExt.Factory(item.MovementTypes.GetEqualsMask(rhs.MovementTypes, include), include);
            ret.SoundDescriptors = MaskItemExt.Factory(item.SoundDescriptors.GetEqualsMask(rhs.SoundDescriptors, include), include);
            ret.SoundCategories = MaskItemExt.Factory(item.SoundCategories.GetEqualsMask(rhs.SoundCategories, include), include);
            ret.SoundOutputModels = MaskItemExt.Factory(item.SoundOutputModels.GetEqualsMask(rhs.SoundOutputModels, include), include);
            ret.CollisionLayers = MaskItemExt.Factory(item.CollisionLayers.GetEqualsMask(rhs.CollisionLayers, include), include);
            ret.Colors = MaskItemExt.Factory(item.Colors.GetEqualsMask(rhs.Colors, include), include);
            ret.ReverbParameters = MaskItemExt.Factory(item.ReverbParameters.GetEqualsMask(rhs.ReverbParameters, include), include);
            ret.PackIns = MaskItemExt.Factory(item.PackIns.GetEqualsMask(rhs.PackIns, include), include);
            ret.ReferenceGroups = MaskItemExt.Factory(item.ReferenceGroups.GetEqualsMask(rhs.ReferenceGroups, include), include);
            ret.AimModels = MaskItemExt.Factory(item.AimModels.GetEqualsMask(rhs.AimModels, include), include);
            ret.Layers = MaskItemExt.Factory(item.Layers.GetEqualsMask(rhs.Layers, include), include);
            ret.ConstructibleObjects = MaskItemExt.Factory(item.ConstructibleObjects.GetEqualsMask(rhs.ConstructibleObjects, include), include);
            ret.ObjectModifications = MaskItemExt.Factory(item.ObjectModifications.GetEqualsMask(rhs.ObjectModifications, include), include);
            ret.MaterialSwaps = MaskItemExt.Factory(item.MaterialSwaps.GetEqualsMask(rhs.MaterialSwaps, include), include);
            ret.Zooms = MaskItemExt.Factory(item.Zooms.GetEqualsMask(rhs.Zooms, include), include);
            ret.InstanceNamingRules = MaskItemExt.Factory(item.InstanceNamingRules.GetEqualsMask(rhs.InstanceNamingRules, include), include);
            ret.SoundKeywordMappings = MaskItemExt.Factory(item.SoundKeywordMappings.GetEqualsMask(rhs.SoundKeywordMappings, include), include);
            ret.AudioEffectChains = MaskItemExt.Factory(item.AudioEffectChains.GetEqualsMask(rhs.AudioEffectChains, include), include);
            ret.SceneCollections = MaskItemExt.Factory(item.SceneCollections.GetEqualsMask(rhs.SceneCollections, include), include);
            ret.AttractionRules = MaskItemExt.Factory(item.AttractionRules.GetEqualsMask(rhs.AttractionRules, include), include);
            ret.AudioCategorySnapshots = MaskItemExt.Factory(item.AudioCategorySnapshots.GetEqualsMask(rhs.AudioCategorySnapshots, include), include);
            ret.AnimationSoundTagSets = MaskItemExt.Factory(item.AnimationSoundTagSets.GetEqualsMask(rhs.AnimationSoundTagSets, include), include);
            ret.NavigationMeshObstacleManagers = MaskItemExt.Factory(item.NavigationMeshObstacleManagers.GetEqualsMask(rhs.NavigationMeshObstacleManagers, include), include);
            ret.LensFlares = MaskItemExt.Factory(item.LensFlares.GetEqualsMask(rhs.LensFlares, include), include);
            ret.GodRays = MaskItemExt.Factory(item.GodRays.GetEqualsMask(rhs.GodRays, include), include);
            ret.ObjectVisibilityManagers = MaskItemExt.Factory(item.ObjectVisibilityManagers.GetEqualsMask(rhs.ObjectVisibilityManagers, include), include);
        }
        
        public string Print(
            IFallout4ModGetter item,
            string? name = null,
            Fallout4Mod.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFallout4ModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Fallout4Mod.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Fallout4Mod =>");
            }
            else
            {
                sb.AppendLine($"{name} (Fallout4Mod) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFallout4ModGetter item,
            StructuredStringBuilder sb,
            Fallout4Mod.Mask<bool>? printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.Print(sb, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.Print(sb, "GameSettings");
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                item.Keywords?.Print(sb, "Keywords");
            }
            if (printMask?.LocationReferenceTypes?.Overall ?? true)
            {
                item.LocationReferenceTypes?.Print(sb, "LocationReferenceTypes");
            }
            if (printMask?.Actions?.Overall ?? true)
            {
                item.Actions?.Print(sb, "Actions");
            }
            if (printMask?.Transforms?.Overall ?? true)
            {
                item.Transforms?.Print(sb, "Transforms");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                item.Components?.Print(sb, "Components");
            }
            if (printMask?.TextureSets?.Overall ?? true)
            {
                item.TextureSets?.Print(sb, "TextureSets");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.Print(sb, "Globals");
            }
            if (printMask?.DamageTypes?.Overall ?? true)
            {
                item.DamageTypes?.Print(sb, "DamageTypes");
            }
            if (printMask?.Classes?.Overall ?? true)
            {
                item.Classes?.Print(sb, "Classes");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                item.Factions?.Print(sb, "Factions");
            }
            if (printMask?.HeadParts?.Overall ?? true)
            {
                item.HeadParts?.Print(sb, "HeadParts");
            }
            if (printMask?.Races?.Overall ?? true)
            {
                item.Races?.Print(sb, "Races");
            }
            if (printMask?.SoundMarkers?.Overall ?? true)
            {
                item.SoundMarkers?.Print(sb, "SoundMarkers");
            }
            if (printMask?.AcousticSpaces?.Overall ?? true)
            {
                item.AcousticSpaces?.Print(sb, "AcousticSpaces");
            }
            if (printMask?.MagicEffects?.Overall ?? true)
            {
                item.MagicEffects?.Print(sb, "MagicEffects");
            }
            if (printMask?.LandscapeTextures?.Overall ?? true)
            {
                item.LandscapeTextures?.Print(sb, "LandscapeTextures");
            }
            if (printMask?.ObjectEffects?.Overall ?? true)
            {
                item.ObjectEffects?.Print(sb, "ObjectEffects");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                item.Spells?.Print(sb, "Spells");
            }
            if (printMask?.Activators?.Overall ?? true)
            {
                item.Activators?.Print(sb, "Activators");
            }
            if (printMask?.TalkingActivators?.Overall ?? true)
            {
                item.TalkingActivators?.Print(sb, "TalkingActivators");
            }
            if (printMask?.Armors?.Overall ?? true)
            {
                item.Armors?.Print(sb, "Armors");
            }
            if (printMask?.Books?.Overall ?? true)
            {
                item.Books?.Print(sb, "Books");
            }
            if (printMask?.Containers?.Overall ?? true)
            {
                item.Containers?.Print(sb, "Containers");
            }
            if (printMask?.Doors?.Overall ?? true)
            {
                item.Doors?.Print(sb, "Doors");
            }
            if (printMask?.Ingredients?.Overall ?? true)
            {
                item.Ingredients?.Print(sb, "Ingredients");
            }
            if (printMask?.Lights?.Overall ?? true)
            {
                item.Lights?.Print(sb, "Lights");
            }
            if (printMask?.MiscItems?.Overall ?? true)
            {
                item.MiscItems?.Print(sb, "MiscItems");
            }
            if (printMask?.Statics?.Overall ?? true)
            {
                item.Statics?.Print(sb, "Statics");
            }
            if (printMask?.StaticCollections?.Overall ?? true)
            {
                item.StaticCollections?.Print(sb, "StaticCollections");
            }
            if (printMask?.MovableStatics?.Overall ?? true)
            {
                item.MovableStatics?.Print(sb, "MovableStatics");
            }
            if (printMask?.Grasses?.Overall ?? true)
            {
                item.Grasses?.Print(sb, "Grasses");
            }
            if (printMask?.Trees?.Overall ?? true)
            {
                item.Trees?.Print(sb, "Trees");
            }
            if (printMask?.Florae?.Overall ?? true)
            {
                item.Florae?.Print(sb, "Florae");
            }
            if (printMask?.Furniture?.Overall ?? true)
            {
                item.Furniture?.Print(sb, "Furniture");
            }
            if (printMask?.Weapons?.Overall ?? true)
            {
                item.Weapons?.Print(sb, "Weapons");
            }
            if (printMask?.Ammunitions?.Overall ?? true)
            {
                item.Ammunitions?.Print(sb, "Ammunitions");
            }
            if (printMask?.Npcs?.Overall ?? true)
            {
                item.Npcs?.Print(sb, "Npcs");
            }
            if (printMask?.LeveledNpcs?.Overall ?? true)
            {
                item.LeveledNpcs?.Print(sb, "LeveledNpcs");
            }
            if (printMask?.Keys?.Overall ?? true)
            {
                item.Keys?.Print(sb, "Keys");
            }
            if (printMask?.Ingestibles?.Overall ?? true)
            {
                item.Ingestibles?.Print(sb, "Ingestibles");
            }
            if (printMask?.IdleMarkers?.Overall ?? true)
            {
                item.IdleMarkers?.Print(sb, "IdleMarkers");
            }
            if (printMask?.Holotapes?.Overall ?? true)
            {
                item.Holotapes?.Print(sb, "Holotapes");
            }
            if (printMask?.Projectiles?.Overall ?? true)
            {
                item.Projectiles?.Print(sb, "Projectiles");
            }
            if (printMask?.Hazards?.Overall ?? true)
            {
                item.Hazards?.Print(sb, "Hazards");
            }
            if (printMask?.BendableSplines?.Overall ?? true)
            {
                item.BendableSplines?.Print(sb, "BendableSplines");
            }
            if (printMask?.Terminals?.Overall ?? true)
            {
                item.Terminals?.Print(sb, "Terminals");
            }
            if (printMask?.LeveledItems?.Overall ?? true)
            {
                item.LeveledItems?.Print(sb, "LeveledItems");
            }
            if (printMask?.Weather?.Overall ?? true)
            {
                item.Weather?.Print(sb, "Weather");
            }
            if (printMask?.Climates?.Overall ?? true)
            {
                item.Climates?.Print(sb, "Climates");
            }
            if (printMask?.ShaderParticleGeometries?.Overall ?? true)
            {
                item.ShaderParticleGeometries?.Print(sb, "ShaderParticleGeometries");
            }
            if (printMask?.VisualEffects?.Overall ?? true)
            {
                item.VisualEffects?.Print(sb, "VisualEffects");
            }
            if (printMask?.Regions?.Overall ?? true)
            {
                item.Regions?.Print(sb, "Regions");
            }
            if (printMask?.NavigationMeshInfoMaps?.Overall ?? true)
            {
                item.NavigationMeshInfoMaps?.Print(sb, "NavigationMeshInfoMaps");
            }
            if (printMask?.Cells?.Overall ?? true)
            {
                item.Cells?.Print(sb, "Cells");
            }
            if (printMask?.Worldspaces?.Overall ?? true)
            {
                item.Worldspaces?.Print(sb, "Worldspaces");
            }
            if (printMask?.Quests?.Overall ?? true)
            {
                item.Quests?.Print(sb, "Quests");
            }
            if (printMask?.IdleAnimations?.Overall ?? true)
            {
                item.IdleAnimations?.Print(sb, "IdleAnimations");
            }
            if (printMask?.Packages?.Overall ?? true)
            {
                item.Packages?.Print(sb, "Packages");
            }
            if (printMask?.CombatStyles?.Overall ?? true)
            {
                item.CombatStyles?.Print(sb, "CombatStyles");
            }
            if (printMask?.LoadScreens?.Overall ?? true)
            {
                item.LoadScreens?.Print(sb, "LoadScreens");
            }
            if (printMask?.AnimatedObjects?.Overall ?? true)
            {
                item.AnimatedObjects?.Print(sb, "AnimatedObjects");
            }
            if (printMask?.Waters?.Overall ?? true)
            {
                item.Waters?.Print(sb, "Waters");
            }
            if (printMask?.EffectShaders?.Overall ?? true)
            {
                item.EffectShaders?.Print(sb, "EffectShaders");
            }
            if (printMask?.Explosions?.Overall ?? true)
            {
                item.Explosions?.Print(sb, "Explosions");
            }
            if (printMask?.Debris?.Overall ?? true)
            {
                item.Debris?.Print(sb, "Debris");
            }
            if (printMask?.ImageSpaces?.Overall ?? true)
            {
                item.ImageSpaces?.Print(sb, "ImageSpaces");
            }
            if (printMask?.ImageSpaceAdapters?.Overall ?? true)
            {
                item.ImageSpaceAdapters?.Print(sb, "ImageSpaceAdapters");
            }
            if (printMask?.FormLists?.Overall ?? true)
            {
                item.FormLists?.Print(sb, "FormLists");
            }
            if (printMask?.Perks?.Overall ?? true)
            {
                item.Perks?.Print(sb, "Perks");
            }
            if (printMask?.BodyParts?.Overall ?? true)
            {
                item.BodyParts?.Print(sb, "BodyParts");
            }
            if (printMask?.AddonNodes?.Overall ?? true)
            {
                item.AddonNodes?.Print(sb, "AddonNodes");
            }
            if (printMask?.ActorValueInformation?.Overall ?? true)
            {
                item.ActorValueInformation?.Print(sb, "ActorValueInformation");
            }
            if (printMask?.CameraShots?.Overall ?? true)
            {
                item.CameraShots?.Print(sb, "CameraShots");
            }
            if (printMask?.CameraPaths?.Overall ?? true)
            {
                item.CameraPaths?.Print(sb, "CameraPaths");
            }
            if (printMask?.VoiceTypes?.Overall ?? true)
            {
                item.VoiceTypes?.Print(sb, "VoiceTypes");
            }
            if (printMask?.MaterialTypes?.Overall ?? true)
            {
                item.MaterialTypes?.Print(sb, "MaterialTypes");
            }
            if (printMask?.Impacts?.Overall ?? true)
            {
                item.Impacts?.Print(sb, "Impacts");
            }
            if (printMask?.ImpactDataSets?.Overall ?? true)
            {
                item.ImpactDataSets?.Print(sb, "ImpactDataSets");
            }
            if (printMask?.ArmorAddons?.Overall ?? true)
            {
                item.ArmorAddons?.Print(sb, "ArmorAddons");
            }
            if (printMask?.EncounterZones?.Overall ?? true)
            {
                item.EncounterZones?.Print(sb, "EncounterZones");
            }
            if (printMask?.Locations?.Overall ?? true)
            {
                item.Locations?.Print(sb, "Locations");
            }
            if (printMask?.Messages?.Overall ?? true)
            {
                item.Messages?.Print(sb, "Messages");
            }
            if (printMask?.DefaultObjectManagers?.Overall ?? true)
            {
                item.DefaultObjectManagers?.Print(sb, "DefaultObjectManagers");
            }
            if (printMask?.DefaultObjects?.Overall ?? true)
            {
                item.DefaultObjects?.Print(sb, "DefaultObjects");
            }
            if (printMask?.LightingTemplates?.Overall ?? true)
            {
                item.LightingTemplates?.Print(sb, "LightingTemplates");
            }
            if (printMask?.MusicTypes?.Overall ?? true)
            {
                item.MusicTypes?.Print(sb, "MusicTypes");
            }
            if (printMask?.Footsteps?.Overall ?? true)
            {
                item.Footsteps?.Print(sb, "Footsteps");
            }
            if (printMask?.FootstepSets?.Overall ?? true)
            {
                item.FootstepSets?.Print(sb, "FootstepSets");
            }
            if (printMask?.StoryManagerBranchNodes?.Overall ?? true)
            {
                item.StoryManagerBranchNodes?.Print(sb, "StoryManagerBranchNodes");
            }
            if (printMask?.StoryManagerQuestNodes?.Overall ?? true)
            {
                item.StoryManagerQuestNodes?.Print(sb, "StoryManagerQuestNodes");
            }
            if (printMask?.StoryManagerEventNodes?.Overall ?? true)
            {
                item.StoryManagerEventNodes?.Print(sb, "StoryManagerEventNodes");
            }
            if (printMask?.MusicTracks?.Overall ?? true)
            {
                item.MusicTracks?.Print(sb, "MusicTracks");
            }
            if (printMask?.DialogViews?.Overall ?? true)
            {
                item.DialogViews?.Print(sb, "DialogViews");
            }
            if (printMask?.EquipTypes?.Overall ?? true)
            {
                item.EquipTypes?.Print(sb, "EquipTypes");
            }
            if (printMask?.Relationships?.Overall ?? true)
            {
                item.Relationships?.Print(sb, "Relationships");
            }
            if (printMask?.AssociationTypes?.Overall ?? true)
            {
                item.AssociationTypes?.Print(sb, "AssociationTypes");
            }
            if (printMask?.Outfits?.Overall ?? true)
            {
                item.Outfits?.Print(sb, "Outfits");
            }
            if (printMask?.ArtObjects?.Overall ?? true)
            {
                item.ArtObjects?.Print(sb, "ArtObjects");
            }
            if (printMask?.MaterialObjects?.Overall ?? true)
            {
                item.MaterialObjects?.Print(sb, "MaterialObjects");
            }
            if (printMask?.MovementTypes?.Overall ?? true)
            {
                item.MovementTypes?.Print(sb, "MovementTypes");
            }
            if (printMask?.SoundDescriptors?.Overall ?? true)
            {
                item.SoundDescriptors?.Print(sb, "SoundDescriptors");
            }
            if (printMask?.SoundCategories?.Overall ?? true)
            {
                item.SoundCategories?.Print(sb, "SoundCategories");
            }
            if (printMask?.SoundOutputModels?.Overall ?? true)
            {
                item.SoundOutputModels?.Print(sb, "SoundOutputModels");
            }
            if (printMask?.CollisionLayers?.Overall ?? true)
            {
                item.CollisionLayers?.Print(sb, "CollisionLayers");
            }
            if (printMask?.Colors?.Overall ?? true)
            {
                item.Colors?.Print(sb, "Colors");
            }
            if (printMask?.ReverbParameters?.Overall ?? true)
            {
                item.ReverbParameters?.Print(sb, "ReverbParameters");
            }
            if (printMask?.PackIns?.Overall ?? true)
            {
                item.PackIns?.Print(sb, "PackIns");
            }
            if (printMask?.ReferenceGroups?.Overall ?? true)
            {
                item.ReferenceGroups?.Print(sb, "ReferenceGroups");
            }
            if (printMask?.AimModels?.Overall ?? true)
            {
                item.AimModels?.Print(sb, "AimModels");
            }
            if (printMask?.Layers?.Overall ?? true)
            {
                item.Layers?.Print(sb, "Layers");
            }
            if (printMask?.ConstructibleObjects?.Overall ?? true)
            {
                item.ConstructibleObjects?.Print(sb, "ConstructibleObjects");
            }
            if (printMask?.ObjectModifications?.Overall ?? true)
            {
                item.ObjectModifications?.Print(sb, "ObjectModifications");
            }
            if (printMask?.MaterialSwaps?.Overall ?? true)
            {
                item.MaterialSwaps?.Print(sb, "MaterialSwaps");
            }
            if (printMask?.Zooms?.Overall ?? true)
            {
                item.Zooms?.Print(sb, "Zooms");
            }
            if (printMask?.InstanceNamingRules?.Overall ?? true)
            {
                item.InstanceNamingRules?.Print(sb, "InstanceNamingRules");
            }
            if (printMask?.SoundKeywordMappings?.Overall ?? true)
            {
                item.SoundKeywordMappings?.Print(sb, "SoundKeywordMappings");
            }
            if (printMask?.AudioEffectChains?.Overall ?? true)
            {
                item.AudioEffectChains?.Print(sb, "AudioEffectChains");
            }
            if (printMask?.SceneCollections?.Overall ?? true)
            {
                item.SceneCollections?.Print(sb, "SceneCollections");
            }
            if (printMask?.AttractionRules?.Overall ?? true)
            {
                item.AttractionRules?.Print(sb, "AttractionRules");
            }
            if (printMask?.AudioCategorySnapshots?.Overall ?? true)
            {
                item.AudioCategorySnapshots?.Print(sb, "AudioCategorySnapshots");
            }
            if (printMask?.AnimationSoundTagSets?.Overall ?? true)
            {
                item.AnimationSoundTagSets?.Print(sb, "AnimationSoundTagSets");
            }
            if (printMask?.NavigationMeshObstacleManagers?.Overall ?? true)
            {
                item.NavigationMeshObstacleManagers?.Print(sb, "NavigationMeshObstacleManagers");
            }
            if (printMask?.LensFlares?.Overall ?? true)
            {
                item.LensFlares?.Print(sb, "LensFlares");
            }
            if (printMask?.GodRays?.Overall ?? true)
            {
                item.GodRays?.Print(sb, "GodRays");
            }
            if (printMask?.ObjectVisibilityManagers?.Overall ?? true)
            {
                item.ObjectVisibilityManagers?.Print(sb, "ObjectVisibilityManagers");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFallout4ModGetter? lhs,
            IFallout4ModGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ModHeader) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ModHeader, rhs.ModHeader, out var lhsModHeader, out var rhsModHeader, out var isModHeaderEqual))
                {
                    if (!((Fallout4ModHeaderCommon)((IFallout4ModHeaderGetter)lhsModHeader).CommonInstance()!).Equals(lhsModHeader, rhsModHeader, equalsMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ModHeader))) return false;
                }
                else if (!isModHeaderEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.GameSettings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GameSettings, rhs.GameSettings, out var lhsGameSettings, out var rhsGameSettings, out var isGameSettingsEqual))
                {
                    if (!object.Equals(lhsGameSettings, rhsGameSettings)) return false;
                }
                else if (!isGameSettingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Keywords) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Keywords, rhs.Keywords, out var lhsKeywords, out var rhsKeywords, out var isKeywordsEqual))
                {
                    if (!object.Equals(lhsKeywords, rhsKeywords)) return false;
                }
                else if (!isKeywordsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LocationReferenceTypes, rhs.LocationReferenceTypes, out var lhsLocationReferenceTypes, out var rhsLocationReferenceTypes, out var isLocationReferenceTypesEqual))
                {
                    if (!object.Equals(lhsLocationReferenceTypes, rhsLocationReferenceTypes)) return false;
                }
                else if (!isLocationReferenceTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Actions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Actions, rhs.Actions, out var lhsActions, out var rhsActions, out var isActionsEqual))
                {
                    if (!object.Equals(lhsActions, rhsActions)) return false;
                }
                else if (!isActionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Transforms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Transforms, rhs.Transforms, out var lhsTransforms, out var rhsTransforms, out var isTransformsEqual))
                {
                    if (!object.Equals(lhsTransforms, rhsTransforms)) return false;
                }
                else if (!isTransformsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Components) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Components, rhs.Components, out var lhsComponents, out var rhsComponents, out var isComponentsEqual))
                {
                    if (!object.Equals(lhsComponents, rhsComponents)) return false;
                }
                else if (!isComponentsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.TextureSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TextureSets, rhs.TextureSets, out var lhsTextureSets, out var rhsTextureSets, out var isTextureSetsEqual))
                {
                    if (!object.Equals(lhsTextureSets, rhsTextureSets)) return false;
                }
                else if (!isTextureSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Globals) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Globals, rhs.Globals, out var lhsGlobals, out var rhsGlobals, out var isGlobalsEqual))
                {
                    if (!object.Equals(lhsGlobals, rhsGlobals)) return false;
                }
                else if (!isGlobalsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DamageTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DamageTypes, rhs.DamageTypes, out var lhsDamageTypes, out var rhsDamageTypes, out var isDamageTypesEqual))
                {
                    if (!object.Equals(lhsDamageTypes, rhsDamageTypes)) return false;
                }
                else if (!isDamageTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Classes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Classes, rhs.Classes, out var lhsClasses, out var rhsClasses, out var isClassesEqual))
                {
                    if (!object.Equals(lhsClasses, rhsClasses)) return false;
                }
                else if (!isClassesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Factions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Factions, rhs.Factions, out var lhsFactions, out var rhsFactions, out var isFactionsEqual))
                {
                    if (!object.Equals(lhsFactions, rhsFactions)) return false;
                }
                else if (!isFactionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.HeadParts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HeadParts, rhs.HeadParts, out var lhsHeadParts, out var rhsHeadParts, out var isHeadPartsEqual))
                {
                    if (!object.Equals(lhsHeadParts, rhsHeadParts)) return false;
                }
                else if (!isHeadPartsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Races) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Races, rhs.Races, out var lhsRaces, out var rhsRaces, out var isRacesEqual))
                {
                    if (!object.Equals(lhsRaces, rhsRaces)) return false;
                }
                else if (!isRacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundMarkers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoundMarkers, rhs.SoundMarkers, out var lhsSoundMarkers, out var rhsSoundMarkers, out var isSoundMarkersEqual))
                {
                    if (!object.Equals(lhsSoundMarkers, rhsSoundMarkers)) return false;
                }
                else if (!isSoundMarkersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AcousticSpaces) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AcousticSpaces, rhs.AcousticSpaces, out var lhsAcousticSpaces, out var rhsAcousticSpaces, out var isAcousticSpacesEqual))
                {
                    if (!object.Equals(lhsAcousticSpaces, rhsAcousticSpaces)) return false;
                }
                else if (!isAcousticSpacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MagicEffects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MagicEffects, rhs.MagicEffects, out var lhsMagicEffects, out var rhsMagicEffects, out var isMagicEffectsEqual))
                {
                    if (!object.Equals(lhsMagicEffects, rhsMagicEffects)) return false;
                }
                else if (!isMagicEffectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LandscapeTextures) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LandscapeTextures, rhs.LandscapeTextures, out var lhsLandscapeTextures, out var rhsLandscapeTextures, out var isLandscapeTexturesEqual))
                {
                    if (!object.Equals(lhsLandscapeTextures, rhsLandscapeTextures)) return false;
                }
                else if (!isLandscapeTexturesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ObjectEffects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectEffects, rhs.ObjectEffects, out var lhsObjectEffects, out var rhsObjectEffects, out var isObjectEffectsEqual))
                {
                    if (!object.Equals(lhsObjectEffects, rhsObjectEffects)) return false;
                }
                else if (!isObjectEffectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Spells) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Spells, rhs.Spells, out var lhsSpells, out var rhsSpells, out var isSpellsEqual))
                {
                    if (!object.Equals(lhsSpells, rhsSpells)) return false;
                }
                else if (!isSpellsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Activators) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Activators, rhs.Activators, out var lhsActivators, out var rhsActivators, out var isActivatorsEqual))
                {
                    if (!object.Equals(lhsActivators, rhsActivators)) return false;
                }
                else if (!isActivatorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.TalkingActivators) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TalkingActivators, rhs.TalkingActivators, out var lhsTalkingActivators, out var rhsTalkingActivators, out var isTalkingActivatorsEqual))
                {
                    if (!object.Equals(lhsTalkingActivators, rhsTalkingActivators)) return false;
                }
                else if (!isTalkingActivatorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Armors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Armors, rhs.Armors, out var lhsArmors, out var rhsArmors, out var isArmorsEqual))
                {
                    if (!object.Equals(lhsArmors, rhsArmors)) return false;
                }
                else if (!isArmorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Books) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Books, rhs.Books, out var lhsBooks, out var rhsBooks, out var isBooksEqual))
                {
                    if (!object.Equals(lhsBooks, rhsBooks)) return false;
                }
                else if (!isBooksEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Containers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Containers, rhs.Containers, out var lhsContainers, out var rhsContainers, out var isContainersEqual))
                {
                    if (!object.Equals(lhsContainers, rhsContainers)) return false;
                }
                else if (!isContainersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Doors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Doors, rhs.Doors, out var lhsDoors, out var rhsDoors, out var isDoorsEqual))
                {
                    if (!object.Equals(lhsDoors, rhsDoors)) return false;
                }
                else if (!isDoorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Ingredients) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Ingredients, rhs.Ingredients, out var lhsIngredients, out var rhsIngredients, out var isIngredientsEqual))
                {
                    if (!object.Equals(lhsIngredients, rhsIngredients)) return false;
                }
                else if (!isIngredientsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Lights) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Lights, rhs.Lights, out var lhsLights, out var rhsLights, out var isLightsEqual))
                {
                    if (!object.Equals(lhsLights, rhsLights)) return false;
                }
                else if (!isLightsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MiscItems) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MiscItems, rhs.MiscItems, out var lhsMiscItems, out var rhsMiscItems, out var isMiscItemsEqual))
                {
                    if (!object.Equals(lhsMiscItems, rhsMiscItems)) return false;
                }
                else if (!isMiscItemsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Statics) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Statics, rhs.Statics, out var lhsStatics, out var rhsStatics, out var isStaticsEqual))
                {
                    if (!object.Equals(lhsStatics, rhsStatics)) return false;
                }
                else if (!isStaticsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.StaticCollections) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.StaticCollections, rhs.StaticCollections, out var lhsStaticCollections, out var rhsStaticCollections, out var isStaticCollectionsEqual))
                {
                    if (!object.Equals(lhsStaticCollections, rhsStaticCollections)) return false;
                }
                else if (!isStaticCollectionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MovableStatics) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MovableStatics, rhs.MovableStatics, out var lhsMovableStatics, out var rhsMovableStatics, out var isMovableStaticsEqual))
                {
                    if (!object.Equals(lhsMovableStatics, rhsMovableStatics)) return false;
                }
                else if (!isMovableStaticsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Grasses) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Grasses, rhs.Grasses, out var lhsGrasses, out var rhsGrasses, out var isGrassesEqual))
                {
                    if (!object.Equals(lhsGrasses, rhsGrasses)) return false;
                }
                else if (!isGrassesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Trees) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Trees, rhs.Trees, out var lhsTrees, out var rhsTrees, out var isTreesEqual))
                {
                    if (!object.Equals(lhsTrees, rhsTrees)) return false;
                }
                else if (!isTreesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Florae) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Florae, rhs.Florae, out var lhsFlorae, out var rhsFlorae, out var isFloraeEqual))
                {
                    if (!object.Equals(lhsFlorae, rhsFlorae)) return false;
                }
                else if (!isFloraeEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Furniture) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Furniture, rhs.Furniture, out var lhsFurniture, out var rhsFurniture, out var isFurnitureEqual))
                {
                    if (!object.Equals(lhsFurniture, rhsFurniture)) return false;
                }
                else if (!isFurnitureEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Weapons) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Weapons, rhs.Weapons, out var lhsWeapons, out var rhsWeapons, out var isWeaponsEqual))
                {
                    if (!object.Equals(lhsWeapons, rhsWeapons)) return false;
                }
                else if (!isWeaponsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Ammunitions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Ammunitions, rhs.Ammunitions, out var lhsAmmunitions, out var rhsAmmunitions, out var isAmmunitionsEqual))
                {
                    if (!object.Equals(lhsAmmunitions, rhsAmmunitions)) return false;
                }
                else if (!isAmmunitionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Npcs) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Npcs, rhs.Npcs, out var lhsNpcs, out var rhsNpcs, out var isNpcsEqual))
                {
                    if (!object.Equals(lhsNpcs, rhsNpcs)) return false;
                }
                else if (!isNpcsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LeveledNpcs) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledNpcs, rhs.LeveledNpcs, out var lhsLeveledNpcs, out var rhsLeveledNpcs, out var isLeveledNpcsEqual))
                {
                    if (!object.Equals(lhsLeveledNpcs, rhsLeveledNpcs)) return false;
                }
                else if (!isLeveledNpcsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Keys) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Keys, rhs.Keys, out var lhsKeys, out var rhsKeys, out var isKeysEqual))
                {
                    if (!object.Equals(lhsKeys, rhsKeys)) return false;
                }
                else if (!isKeysEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Ingestibles) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Ingestibles, rhs.Ingestibles, out var lhsIngestibles, out var rhsIngestibles, out var isIngestiblesEqual))
                {
                    if (!object.Equals(lhsIngestibles, rhsIngestibles)) return false;
                }
                else if (!isIngestiblesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.IdleMarkers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.IdleMarkers, rhs.IdleMarkers, out var lhsIdleMarkers, out var rhsIdleMarkers, out var isIdleMarkersEqual))
                {
                    if (!object.Equals(lhsIdleMarkers, rhsIdleMarkers)) return false;
                }
                else if (!isIdleMarkersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Holotapes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Holotapes, rhs.Holotapes, out var lhsHolotapes, out var rhsHolotapes, out var isHolotapesEqual))
                {
                    if (!object.Equals(lhsHolotapes, rhsHolotapes)) return false;
                }
                else if (!isHolotapesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Projectiles) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Projectiles, rhs.Projectiles, out var lhsProjectiles, out var rhsProjectiles, out var isProjectilesEqual))
                {
                    if (!object.Equals(lhsProjectiles, rhsProjectiles)) return false;
                }
                else if (!isProjectilesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Hazards) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Hazards, rhs.Hazards, out var lhsHazards, out var rhsHazards, out var isHazardsEqual))
                {
                    if (!object.Equals(lhsHazards, rhsHazards)) return false;
                }
                else if (!isHazardsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.BendableSplines) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BendableSplines, rhs.BendableSplines, out var lhsBendableSplines, out var rhsBendableSplines, out var isBendableSplinesEqual))
                {
                    if (!object.Equals(lhsBendableSplines, rhsBendableSplines)) return false;
                }
                else if (!isBendableSplinesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Terminals) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Terminals, rhs.Terminals, out var lhsTerminals, out var rhsTerminals, out var isTerminalsEqual))
                {
                    if (!object.Equals(lhsTerminals, rhsTerminals)) return false;
                }
                else if (!isTerminalsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LeveledItems) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledItems, rhs.LeveledItems, out var lhsLeveledItems, out var rhsLeveledItems, out var isLeveledItemsEqual))
                {
                    if (!object.Equals(lhsLeveledItems, rhsLeveledItems)) return false;
                }
                else if (!isLeveledItemsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Weather) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Weather, rhs.Weather, out var lhsWeather, out var rhsWeather, out var isWeatherEqual))
                {
                    if (!object.Equals(lhsWeather, rhsWeather)) return false;
                }
                else if (!isWeatherEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Climates) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Climates, rhs.Climates, out var lhsClimates, out var rhsClimates, out var isClimatesEqual))
                {
                    if (!object.Equals(lhsClimates, rhsClimates)) return false;
                }
                else if (!isClimatesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ShaderParticleGeometries) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ShaderParticleGeometries, rhs.ShaderParticleGeometries, out var lhsShaderParticleGeometries, out var rhsShaderParticleGeometries, out var isShaderParticleGeometriesEqual))
                {
                    if (!object.Equals(lhsShaderParticleGeometries, rhsShaderParticleGeometries)) return false;
                }
                else if (!isShaderParticleGeometriesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.VisualEffects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VisualEffects, rhs.VisualEffects, out var lhsVisualEffects, out var rhsVisualEffects, out var isVisualEffectsEqual))
                {
                    if (!object.Equals(lhsVisualEffects, rhsVisualEffects)) return false;
                }
                else if (!isVisualEffectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Regions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Regions, rhs.Regions, out var lhsRegions, out var rhsRegions, out var isRegionsEqual))
                {
                    if (!object.Equals(lhsRegions, rhsRegions)) return false;
                }
                else if (!isRegionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.NavigationMeshInfoMaps) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.NavigationMeshInfoMaps, rhs.NavigationMeshInfoMaps, out var lhsNavigationMeshInfoMaps, out var rhsNavigationMeshInfoMaps, out var isNavigationMeshInfoMapsEqual))
                {
                    if (!object.Equals(lhsNavigationMeshInfoMaps, rhsNavigationMeshInfoMaps)) return false;
                }
                else if (!isNavigationMeshInfoMapsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Cells) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Cells, rhs.Cells, out var lhsCells, out var rhsCells, out var isCellsEqual))
                {
                    if (!object.Equals(lhsCells, rhsCells)) return false;
                }
                else if (!isCellsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Worldspaces) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Worldspaces, rhs.Worldspaces, out var lhsWorldspaces, out var rhsWorldspaces, out var isWorldspacesEqual))
                {
                    if (!object.Equals(lhsWorldspaces, rhsWorldspaces)) return false;
                }
                else if (!isWorldspacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Quests) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Quests, rhs.Quests, out var lhsQuests, out var rhsQuests, out var isQuestsEqual))
                {
                    if (!object.Equals(lhsQuests, rhsQuests)) return false;
                }
                else if (!isQuestsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.IdleAnimations) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.IdleAnimations, rhs.IdleAnimations, out var lhsIdleAnimations, out var rhsIdleAnimations, out var isIdleAnimationsEqual))
                {
                    if (!object.Equals(lhsIdleAnimations, rhsIdleAnimations)) return false;
                }
                else if (!isIdleAnimationsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Packages) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Packages, rhs.Packages, out var lhsPackages, out var rhsPackages, out var isPackagesEqual))
                {
                    if (!object.Equals(lhsPackages, rhsPackages)) return false;
                }
                else if (!isPackagesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.CombatStyles) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CombatStyles, rhs.CombatStyles, out var lhsCombatStyles, out var rhsCombatStyles, out var isCombatStylesEqual))
                {
                    if (!object.Equals(lhsCombatStyles, rhsCombatStyles)) return false;
                }
                else if (!isCombatStylesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LoadScreens) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LoadScreens, rhs.LoadScreens, out var lhsLoadScreens, out var rhsLoadScreens, out var isLoadScreensEqual))
                {
                    if (!object.Equals(lhsLoadScreens, rhsLoadScreens)) return false;
                }
                else if (!isLoadScreensEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AnimatedObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AnimatedObjects, rhs.AnimatedObjects, out var lhsAnimatedObjects, out var rhsAnimatedObjects, out var isAnimatedObjectsEqual))
                {
                    if (!object.Equals(lhsAnimatedObjects, rhsAnimatedObjects)) return false;
                }
                else if (!isAnimatedObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Waters) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Waters, rhs.Waters, out var lhsWaters, out var rhsWaters, out var isWatersEqual))
                {
                    if (!object.Equals(lhsWaters, rhsWaters)) return false;
                }
                else if (!isWatersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.EffectShaders) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EffectShaders, rhs.EffectShaders, out var lhsEffectShaders, out var rhsEffectShaders, out var isEffectShadersEqual))
                {
                    if (!object.Equals(lhsEffectShaders, rhsEffectShaders)) return false;
                }
                else if (!isEffectShadersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Explosions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Explosions, rhs.Explosions, out var lhsExplosions, out var rhsExplosions, out var isExplosionsEqual))
                {
                    if (!object.Equals(lhsExplosions, rhsExplosions)) return false;
                }
                else if (!isExplosionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Debris) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Debris, rhs.Debris, out var lhsDebris, out var rhsDebris, out var isDebrisEqual))
                {
                    if (!object.Equals(lhsDebris, rhsDebris)) return false;
                }
                else if (!isDebrisEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ImageSpaces) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ImageSpaces, rhs.ImageSpaces, out var lhsImageSpaces, out var rhsImageSpaces, out var isImageSpacesEqual))
                {
                    if (!object.Equals(lhsImageSpaces, rhsImageSpaces)) return false;
                }
                else if (!isImageSpacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ImageSpaceAdapters) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ImageSpaceAdapters, rhs.ImageSpaceAdapters, out var lhsImageSpaceAdapters, out var rhsImageSpaceAdapters, out var isImageSpaceAdaptersEqual))
                {
                    if (!object.Equals(lhsImageSpaceAdapters, rhsImageSpaceAdapters)) return false;
                }
                else if (!isImageSpaceAdaptersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.FormLists) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FormLists, rhs.FormLists, out var lhsFormLists, out var rhsFormLists, out var isFormListsEqual))
                {
                    if (!object.Equals(lhsFormLists, rhsFormLists)) return false;
                }
                else if (!isFormListsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Perks) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Perks, rhs.Perks, out var lhsPerks, out var rhsPerks, out var isPerksEqual))
                {
                    if (!object.Equals(lhsPerks, rhsPerks)) return false;
                }
                else if (!isPerksEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.BodyParts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BodyParts, rhs.BodyParts, out var lhsBodyParts, out var rhsBodyParts, out var isBodyPartsEqual))
                {
                    if (!object.Equals(lhsBodyParts, rhsBodyParts)) return false;
                }
                else if (!isBodyPartsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AddonNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AddonNodes, rhs.AddonNodes, out var lhsAddonNodes, out var rhsAddonNodes, out var isAddonNodesEqual))
                {
                    if (!object.Equals(lhsAddonNodes, rhsAddonNodes)) return false;
                }
                else if (!isAddonNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ActorValueInformation) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ActorValueInformation, rhs.ActorValueInformation, out var lhsActorValueInformation, out var rhsActorValueInformation, out var isActorValueInformationEqual))
                {
                    if (!object.Equals(lhsActorValueInformation, rhsActorValueInformation)) return false;
                }
                else if (!isActorValueInformationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.CameraShots) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CameraShots, rhs.CameraShots, out var lhsCameraShots, out var rhsCameraShots, out var isCameraShotsEqual))
                {
                    if (!object.Equals(lhsCameraShots, rhsCameraShots)) return false;
                }
                else if (!isCameraShotsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.CameraPaths) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CameraPaths, rhs.CameraPaths, out var lhsCameraPaths, out var rhsCameraPaths, out var isCameraPathsEqual))
                {
                    if (!object.Equals(lhsCameraPaths, rhsCameraPaths)) return false;
                }
                else if (!isCameraPathsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.VoiceTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VoiceTypes, rhs.VoiceTypes, out var lhsVoiceTypes, out var rhsVoiceTypes, out var isVoiceTypesEqual))
                {
                    if (!object.Equals(lhsVoiceTypes, rhsVoiceTypes)) return false;
                }
                else if (!isVoiceTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MaterialTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MaterialTypes, rhs.MaterialTypes, out var lhsMaterialTypes, out var rhsMaterialTypes, out var isMaterialTypesEqual))
                {
                    if (!object.Equals(lhsMaterialTypes, rhsMaterialTypes)) return false;
                }
                else if (!isMaterialTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Impacts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Impacts, rhs.Impacts, out var lhsImpacts, out var rhsImpacts, out var isImpactsEqual))
                {
                    if (!object.Equals(lhsImpacts, rhsImpacts)) return false;
                }
                else if (!isImpactsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ImpactDataSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ImpactDataSets, rhs.ImpactDataSets, out var lhsImpactDataSets, out var rhsImpactDataSets, out var isImpactDataSetsEqual))
                {
                    if (!object.Equals(lhsImpactDataSets, rhsImpactDataSets)) return false;
                }
                else if (!isImpactDataSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ArmorAddons) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ArmorAddons, rhs.ArmorAddons, out var lhsArmorAddons, out var rhsArmorAddons, out var isArmorAddonsEqual))
                {
                    if (!object.Equals(lhsArmorAddons, rhsArmorAddons)) return false;
                }
                else if (!isArmorAddonsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.EncounterZones) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EncounterZones, rhs.EncounterZones, out var lhsEncounterZones, out var rhsEncounterZones, out var isEncounterZonesEqual))
                {
                    if (!object.Equals(lhsEncounterZones, rhsEncounterZones)) return false;
                }
                else if (!isEncounterZonesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Locations) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Locations, rhs.Locations, out var lhsLocations, out var rhsLocations, out var isLocationsEqual))
                {
                    if (!object.Equals(lhsLocations, rhsLocations)) return false;
                }
                else if (!isLocationsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Messages) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Messages, rhs.Messages, out var lhsMessages, out var rhsMessages, out var isMessagesEqual))
                {
                    if (!object.Equals(lhsMessages, rhsMessages)) return false;
                }
                else if (!isMessagesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DefaultObjectManagers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DefaultObjectManagers, rhs.DefaultObjectManagers, out var lhsDefaultObjectManagers, out var rhsDefaultObjectManagers, out var isDefaultObjectManagersEqual))
                {
                    if (!object.Equals(lhsDefaultObjectManagers, rhsDefaultObjectManagers)) return false;
                }
                else if (!isDefaultObjectManagersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DefaultObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DefaultObjects, rhs.DefaultObjects, out var lhsDefaultObjects, out var rhsDefaultObjects, out var isDefaultObjectsEqual))
                {
                    if (!object.Equals(lhsDefaultObjects, rhsDefaultObjects)) return false;
                }
                else if (!isDefaultObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LightingTemplates) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LightingTemplates, rhs.LightingTemplates, out var lhsLightingTemplates, out var rhsLightingTemplates, out var isLightingTemplatesEqual))
                {
                    if (!object.Equals(lhsLightingTemplates, rhsLightingTemplates)) return false;
                }
                else if (!isLightingTemplatesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MusicTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MusicTypes, rhs.MusicTypes, out var lhsMusicTypes, out var rhsMusicTypes, out var isMusicTypesEqual))
                {
                    if (!object.Equals(lhsMusicTypes, rhsMusicTypes)) return false;
                }
                else if (!isMusicTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Footsteps) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Footsteps, rhs.Footsteps, out var lhsFootsteps, out var rhsFootsteps, out var isFootstepsEqual))
                {
                    if (!object.Equals(lhsFootsteps, rhsFootsteps)) return false;
                }
                else if (!isFootstepsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.FootstepSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FootstepSets, rhs.FootstepSets, out var lhsFootstepSets, out var rhsFootstepSets, out var isFootstepSetsEqual))
                {
                    if (!object.Equals(lhsFootstepSets, rhsFootstepSets)) return false;
                }
                else if (!isFootstepSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.StoryManagerBranchNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.StoryManagerBranchNodes, rhs.StoryManagerBranchNodes, out var lhsStoryManagerBranchNodes, out var rhsStoryManagerBranchNodes, out var isStoryManagerBranchNodesEqual))
                {
                    if (!object.Equals(lhsStoryManagerBranchNodes, rhsStoryManagerBranchNodes)) return false;
                }
                else if (!isStoryManagerBranchNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.StoryManagerQuestNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.StoryManagerQuestNodes, rhs.StoryManagerQuestNodes, out var lhsStoryManagerQuestNodes, out var rhsStoryManagerQuestNodes, out var isStoryManagerQuestNodesEqual))
                {
                    if (!object.Equals(lhsStoryManagerQuestNodes, rhsStoryManagerQuestNodes)) return false;
                }
                else if (!isStoryManagerQuestNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.StoryManagerEventNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.StoryManagerEventNodes, rhs.StoryManagerEventNodes, out var lhsStoryManagerEventNodes, out var rhsStoryManagerEventNodes, out var isStoryManagerEventNodesEqual))
                {
                    if (!object.Equals(lhsStoryManagerEventNodes, rhsStoryManagerEventNodes)) return false;
                }
                else if (!isStoryManagerEventNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MusicTracks) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MusicTracks, rhs.MusicTracks, out var lhsMusicTracks, out var rhsMusicTracks, out var isMusicTracksEqual))
                {
                    if (!object.Equals(lhsMusicTracks, rhsMusicTracks)) return false;
                }
                else if (!isMusicTracksEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DialogViews) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DialogViews, rhs.DialogViews, out var lhsDialogViews, out var rhsDialogViews, out var isDialogViewsEqual))
                {
                    if (!object.Equals(lhsDialogViews, rhsDialogViews)) return false;
                }
                else if (!isDialogViewsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.EquipTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EquipTypes, rhs.EquipTypes, out var lhsEquipTypes, out var rhsEquipTypes, out var isEquipTypesEqual))
                {
                    if (!object.Equals(lhsEquipTypes, rhsEquipTypes)) return false;
                }
                else if (!isEquipTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Relationships) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Relationships, rhs.Relationships, out var lhsRelationships, out var rhsRelationships, out var isRelationshipsEqual))
                {
                    if (!object.Equals(lhsRelationships, rhsRelationships)) return false;
                }
                else if (!isRelationshipsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AssociationTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AssociationTypes, rhs.AssociationTypes, out var lhsAssociationTypes, out var rhsAssociationTypes, out var isAssociationTypesEqual))
                {
                    if (!object.Equals(lhsAssociationTypes, rhsAssociationTypes)) return false;
                }
                else if (!isAssociationTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Outfits) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Outfits, rhs.Outfits, out var lhsOutfits, out var rhsOutfits, out var isOutfitsEqual))
                {
                    if (!object.Equals(lhsOutfits, rhsOutfits)) return false;
                }
                else if (!isOutfitsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ArtObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ArtObjects, rhs.ArtObjects, out var lhsArtObjects, out var rhsArtObjects, out var isArtObjectsEqual))
                {
                    if (!object.Equals(lhsArtObjects, rhsArtObjects)) return false;
                }
                else if (!isArtObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MaterialObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MaterialObjects, rhs.MaterialObjects, out var lhsMaterialObjects, out var rhsMaterialObjects, out var isMaterialObjectsEqual))
                {
                    if (!object.Equals(lhsMaterialObjects, rhsMaterialObjects)) return false;
                }
                else if (!isMaterialObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MovementTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MovementTypes, rhs.MovementTypes, out var lhsMovementTypes, out var rhsMovementTypes, out var isMovementTypesEqual))
                {
                    if (!object.Equals(lhsMovementTypes, rhsMovementTypes)) return false;
                }
                else if (!isMovementTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundDescriptors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoundDescriptors, rhs.SoundDescriptors, out var lhsSoundDescriptors, out var rhsSoundDescriptors, out var isSoundDescriptorsEqual))
                {
                    if (!object.Equals(lhsSoundDescriptors, rhsSoundDescriptors)) return false;
                }
                else if (!isSoundDescriptorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundCategories) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoundCategories, rhs.SoundCategories, out var lhsSoundCategories, out var rhsSoundCategories, out var isSoundCategoriesEqual))
                {
                    if (!object.Equals(lhsSoundCategories, rhsSoundCategories)) return false;
                }
                else if (!isSoundCategoriesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundOutputModels) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoundOutputModels, rhs.SoundOutputModels, out var lhsSoundOutputModels, out var rhsSoundOutputModels, out var isSoundOutputModelsEqual))
                {
                    if (!object.Equals(lhsSoundOutputModels, rhsSoundOutputModels)) return false;
                }
                else if (!isSoundOutputModelsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.CollisionLayers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CollisionLayers, rhs.CollisionLayers, out var lhsCollisionLayers, out var rhsCollisionLayers, out var isCollisionLayersEqual))
                {
                    if (!object.Equals(lhsCollisionLayers, rhsCollisionLayers)) return false;
                }
                else if (!isCollisionLayersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Colors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Colors, rhs.Colors, out var lhsColors, out var rhsColors, out var isColorsEqual))
                {
                    if (!object.Equals(lhsColors, rhsColors)) return false;
                }
                else if (!isColorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ReverbParameters) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ReverbParameters, rhs.ReverbParameters, out var lhsReverbParameters, out var rhsReverbParameters, out var isReverbParametersEqual))
                {
                    if (!object.Equals(lhsReverbParameters, rhsReverbParameters)) return false;
                }
                else if (!isReverbParametersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.PackIns) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PackIns, rhs.PackIns, out var lhsPackIns, out var rhsPackIns, out var isPackInsEqual))
                {
                    if (!object.Equals(lhsPackIns, rhsPackIns)) return false;
                }
                else if (!isPackInsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ReferenceGroups) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ReferenceGroups, rhs.ReferenceGroups, out var lhsReferenceGroups, out var rhsReferenceGroups, out var isReferenceGroupsEqual))
                {
                    if (!object.Equals(lhsReferenceGroups, rhsReferenceGroups)) return false;
                }
                else if (!isReferenceGroupsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AimModels) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AimModels, rhs.AimModels, out var lhsAimModels, out var rhsAimModels, out var isAimModelsEqual))
                {
                    if (!object.Equals(lhsAimModels, rhsAimModels)) return false;
                }
                else if (!isAimModelsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Layers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Layers, rhs.Layers, out var lhsLayers, out var rhsLayers, out var isLayersEqual))
                {
                    if (!object.Equals(lhsLayers, rhsLayers)) return false;
                }
                else if (!isLayersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ConstructibleObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ConstructibleObjects, rhs.ConstructibleObjects, out var lhsConstructibleObjects, out var rhsConstructibleObjects, out var isConstructibleObjectsEqual))
                {
                    if (!object.Equals(lhsConstructibleObjects, rhsConstructibleObjects)) return false;
                }
                else if (!isConstructibleObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ObjectModifications) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectModifications, rhs.ObjectModifications, out var lhsObjectModifications, out var rhsObjectModifications, out var isObjectModificationsEqual))
                {
                    if (!object.Equals(lhsObjectModifications, rhsObjectModifications)) return false;
                }
                else if (!isObjectModificationsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MaterialSwaps) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MaterialSwaps, rhs.MaterialSwaps, out var lhsMaterialSwaps, out var rhsMaterialSwaps, out var isMaterialSwapsEqual))
                {
                    if (!object.Equals(lhsMaterialSwaps, rhsMaterialSwaps)) return false;
                }
                else if (!isMaterialSwapsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Zooms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Zooms, rhs.Zooms, out var lhsZooms, out var rhsZooms, out var isZoomsEqual))
                {
                    if (!object.Equals(lhsZooms, rhsZooms)) return false;
                }
                else if (!isZoomsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.InstanceNamingRules) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.InstanceNamingRules, rhs.InstanceNamingRules, out var lhsInstanceNamingRules, out var rhsInstanceNamingRules, out var isInstanceNamingRulesEqual))
                {
                    if (!object.Equals(lhsInstanceNamingRules, rhsInstanceNamingRules)) return false;
                }
                else if (!isInstanceNamingRulesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundKeywordMappings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoundKeywordMappings, rhs.SoundKeywordMappings, out var lhsSoundKeywordMappings, out var rhsSoundKeywordMappings, out var isSoundKeywordMappingsEqual))
                {
                    if (!object.Equals(lhsSoundKeywordMappings, rhsSoundKeywordMappings)) return false;
                }
                else if (!isSoundKeywordMappingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AudioEffectChains) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AudioEffectChains, rhs.AudioEffectChains, out var lhsAudioEffectChains, out var rhsAudioEffectChains, out var isAudioEffectChainsEqual))
                {
                    if (!object.Equals(lhsAudioEffectChains, rhsAudioEffectChains)) return false;
                }
                else if (!isAudioEffectChainsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SceneCollections) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SceneCollections, rhs.SceneCollections, out var lhsSceneCollections, out var rhsSceneCollections, out var isSceneCollectionsEqual))
                {
                    if (!object.Equals(lhsSceneCollections, rhsSceneCollections)) return false;
                }
                else if (!isSceneCollectionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AttractionRules) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AttractionRules, rhs.AttractionRules, out var lhsAttractionRules, out var rhsAttractionRules, out var isAttractionRulesEqual))
                {
                    if (!object.Equals(lhsAttractionRules, rhsAttractionRules)) return false;
                }
                else if (!isAttractionRulesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AudioCategorySnapshots) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AudioCategorySnapshots, rhs.AudioCategorySnapshots, out var lhsAudioCategorySnapshots, out var rhsAudioCategorySnapshots, out var isAudioCategorySnapshotsEqual))
                {
                    if (!object.Equals(lhsAudioCategorySnapshots, rhsAudioCategorySnapshots)) return false;
                }
                else if (!isAudioCategorySnapshotsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AnimationSoundTagSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AnimationSoundTagSets, rhs.AnimationSoundTagSets, out var lhsAnimationSoundTagSets, out var rhsAnimationSoundTagSets, out var isAnimationSoundTagSetsEqual))
                {
                    if (!object.Equals(lhsAnimationSoundTagSets, rhsAnimationSoundTagSets)) return false;
                }
                else if (!isAnimationSoundTagSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.NavigationMeshObstacleManagers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.NavigationMeshObstacleManagers, rhs.NavigationMeshObstacleManagers, out var lhsNavigationMeshObstacleManagers, out var rhsNavigationMeshObstacleManagers, out var isNavigationMeshObstacleManagersEqual))
                {
                    if (!object.Equals(lhsNavigationMeshObstacleManagers, rhsNavigationMeshObstacleManagers)) return false;
                }
                else if (!isNavigationMeshObstacleManagersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LensFlares) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LensFlares, rhs.LensFlares, out var lhsLensFlares, out var rhsLensFlares, out var isLensFlaresEqual))
                {
                    if (!object.Equals(lhsLensFlares, rhsLensFlares)) return false;
                }
                else if (!isLensFlaresEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.GodRays) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GodRays, rhs.GodRays, out var lhsGodRays, out var rhsGodRays, out var isGodRaysEqual))
                {
                    if (!object.Equals(lhsGodRays, rhsGodRays)) return false;
                }
                else if (!isGodRaysEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ObjectVisibilityManagers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectVisibilityManagers, rhs.ObjectVisibilityManagers, out var lhsObjectVisibilityManagers, out var rhsObjectVisibilityManagers, out var isObjectVisibilityManagersEqual))
                {
                    if (!object.Equals(lhsObjectVisibilityManagers, rhsObjectVisibilityManagers)) return false;
                }
                else if (!isObjectVisibilityManagersEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IFallout4ModGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ModHeader);
            hash.Add(item.GameSettings);
            hash.Add(item.Keywords);
            hash.Add(item.LocationReferenceTypes);
            hash.Add(item.Actions);
            hash.Add(item.Transforms);
            hash.Add(item.Components);
            hash.Add(item.TextureSets);
            hash.Add(item.Globals);
            hash.Add(item.DamageTypes);
            hash.Add(item.Classes);
            hash.Add(item.Factions);
            hash.Add(item.HeadParts);
            hash.Add(item.Races);
            hash.Add(item.SoundMarkers);
            hash.Add(item.AcousticSpaces);
            hash.Add(item.MagicEffects);
            hash.Add(item.LandscapeTextures);
            hash.Add(item.ObjectEffects);
            hash.Add(item.Spells);
            hash.Add(item.Activators);
            hash.Add(item.TalkingActivators);
            hash.Add(item.Armors);
            hash.Add(item.Books);
            hash.Add(item.Containers);
            hash.Add(item.Doors);
            hash.Add(item.Ingredients);
            hash.Add(item.Lights);
            hash.Add(item.MiscItems);
            hash.Add(item.Statics);
            hash.Add(item.StaticCollections);
            hash.Add(item.MovableStatics);
            hash.Add(item.Grasses);
            hash.Add(item.Trees);
            hash.Add(item.Florae);
            hash.Add(item.Furniture);
            hash.Add(item.Weapons);
            hash.Add(item.Ammunitions);
            hash.Add(item.Npcs);
            hash.Add(item.LeveledNpcs);
            hash.Add(item.Keys);
            hash.Add(item.Ingestibles);
            hash.Add(item.IdleMarkers);
            hash.Add(item.Holotapes);
            hash.Add(item.Projectiles);
            hash.Add(item.Hazards);
            hash.Add(item.BendableSplines);
            hash.Add(item.Terminals);
            hash.Add(item.LeveledItems);
            hash.Add(item.Weather);
            hash.Add(item.Climates);
            hash.Add(item.ShaderParticleGeometries);
            hash.Add(item.VisualEffects);
            hash.Add(item.Regions);
            hash.Add(item.NavigationMeshInfoMaps);
            hash.Add(item.Cells);
            hash.Add(item.Worldspaces);
            hash.Add(item.Quests);
            hash.Add(item.IdleAnimations);
            hash.Add(item.Packages);
            hash.Add(item.CombatStyles);
            hash.Add(item.LoadScreens);
            hash.Add(item.AnimatedObjects);
            hash.Add(item.Waters);
            hash.Add(item.EffectShaders);
            hash.Add(item.Explosions);
            hash.Add(item.Debris);
            hash.Add(item.ImageSpaces);
            hash.Add(item.ImageSpaceAdapters);
            hash.Add(item.FormLists);
            hash.Add(item.Perks);
            hash.Add(item.BodyParts);
            hash.Add(item.AddonNodes);
            hash.Add(item.ActorValueInformation);
            hash.Add(item.CameraShots);
            hash.Add(item.CameraPaths);
            hash.Add(item.VoiceTypes);
            hash.Add(item.MaterialTypes);
            hash.Add(item.Impacts);
            hash.Add(item.ImpactDataSets);
            hash.Add(item.ArmorAddons);
            hash.Add(item.EncounterZones);
            hash.Add(item.Locations);
            hash.Add(item.Messages);
            hash.Add(item.DefaultObjectManagers);
            hash.Add(item.DefaultObjects);
            hash.Add(item.LightingTemplates);
            hash.Add(item.MusicTypes);
            hash.Add(item.Footsteps);
            hash.Add(item.FootstepSets);
            hash.Add(item.StoryManagerBranchNodes);
            hash.Add(item.StoryManagerQuestNodes);
            hash.Add(item.StoryManagerEventNodes);
            hash.Add(item.MusicTracks);
            hash.Add(item.DialogViews);
            hash.Add(item.EquipTypes);
            hash.Add(item.Relationships);
            hash.Add(item.AssociationTypes);
            hash.Add(item.Outfits);
            hash.Add(item.ArtObjects);
            hash.Add(item.MaterialObjects);
            hash.Add(item.MovementTypes);
            hash.Add(item.SoundDescriptors);
            hash.Add(item.SoundCategories);
            hash.Add(item.SoundOutputModels);
            hash.Add(item.CollisionLayers);
            hash.Add(item.Colors);
            hash.Add(item.ReverbParameters);
            hash.Add(item.PackIns);
            hash.Add(item.ReferenceGroups);
            hash.Add(item.AimModels);
            hash.Add(item.Layers);
            hash.Add(item.ConstructibleObjects);
            hash.Add(item.ObjectModifications);
            hash.Add(item.MaterialSwaps);
            hash.Add(item.Zooms);
            hash.Add(item.InstanceNamingRules);
            hash.Add(item.SoundKeywordMappings);
            hash.Add(item.AudioEffectChains);
            hash.Add(item.SceneCollections);
            hash.Add(item.AttractionRules);
            hash.Add(item.AudioCategorySnapshots);
            hash.Add(item.AnimationSoundTagSets);
            hash.Add(item.NavigationMeshObstacleManagers);
            hash.Add(item.LensFlares);
            hash.Add(item.GodRays);
            hash.Add(item.ObjectVisibilityManagers);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Fallout4Mod.GetNew();
        }
        
        #region Mutagen
        public object? GetGroup(
            IFallout4ModGetter obj,
            Type type)
        {
            switch (type.Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    return obj.Keywords;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    return obj.LocationReferenceTypes;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    return obj.Actions;
                case "Transform":
                case "ITransformGetter":
                case "ITransform":
                case "ITransformInternal":
                    return obj.Transforms;
                case "Component":
                case "IComponentGetter":
                case "IComponent":
                case "IComponentInternal":
                    return obj.Components;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    return obj.TextureSets;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    return obj.Globals;
                case "ADamageType":
                case "IADamageTypeGetter":
                case "IADamageType":
                case "IADamageTypeInternal":
                    return obj.DamageTypes;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    return obj.Classes;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    return obj.Factions;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    return obj.HeadParts;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    return obj.Races;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    return obj.SoundMarkers;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    return obj.AcousticSpaces;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    return obj.MagicEffects;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    return obj.LandscapeTextures;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    return obj.ObjectEffects;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    return obj.Spells;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    return obj.Activators;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    return obj.TalkingActivators;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    return obj.Armors;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    return obj.Books;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    return obj.Containers;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    return obj.Doors;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    return obj.Ingredients;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    return obj.Lights;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    return obj.MiscItems;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    return obj.Statics;
                case "StaticCollection":
                case "IStaticCollectionGetter":
                case "IStaticCollection":
                case "IStaticCollectionInternal":
                    return obj.StaticCollections;
                case "MovableStatic":
                case "IMovableStaticGetter":
                case "IMovableStatic":
                case "IMovableStaticInternal":
                    return obj.MovableStatics;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    return obj.Grasses;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    return obj.Trees;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    return obj.Florae;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    return obj.Furniture;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    return obj.Weapons;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    return obj.Ammunitions;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    return obj.Npcs;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    return obj.LeveledNpcs;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    return obj.Keys;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    return obj.Ingestibles;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    return obj.IdleMarkers;
                case "Holotape":
                case "IHolotapeGetter":
                case "IHolotape":
                case "IHolotapeInternal":
                    return obj.Holotapes;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    return obj.Projectiles;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    return obj.Hazards;
                case "BendableSpline":
                case "IBendableSplineGetter":
                case "IBendableSpline":
                case "IBendableSplineInternal":
                    return obj.BendableSplines;
                case "Terminal":
                case "ITerminalGetter":
                case "ITerminal":
                case "ITerminalInternal":
                    return obj.Terminals;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    return obj.LeveledItems;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    return obj.Weather;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    return obj.Climates;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    return obj.ShaderParticleGeometries;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    return obj.VisualEffects;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    return obj.Regions;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    return obj.NavigationMeshInfoMaps;
                case "CellBlock":
                case "ICellBlockGetter":
                case "ICellBlock":
                    return obj.Cells.Records;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    return obj.Worldspaces;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    return obj.Quests;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    return obj.IdleAnimations;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    return obj.Packages;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    return obj.CombatStyles;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    return obj.LoadScreens;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    return obj.AnimatedObjects;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    return obj.Waters;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    return obj.EffectShaders;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    return obj.Explosions;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    return obj.Debris;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    return obj.ImageSpaces;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    return obj.ImageSpaceAdapters;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    return obj.FormLists;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    return obj.Perks;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    return obj.BodyParts;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    return obj.AddonNodes;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    return obj.ActorValueInformation;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    return obj.CameraShots;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    return obj.CameraPaths;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    return obj.VoiceTypes;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    return obj.MaterialTypes;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    return obj.Impacts;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    return obj.ImpactDataSets;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    return obj.ArmorAddons;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    return obj.EncounterZones;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    return obj.Locations;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    return obj.Messages;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    return obj.DefaultObjectManagers;
                case "DefaultObject":
                case "IDefaultObjectGetter":
                case "IDefaultObject":
                case "IDefaultObjectInternal":
                    return obj.DefaultObjects;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    return obj.LightingTemplates;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    return obj.MusicTypes;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    return obj.Footsteps;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    return obj.FootstepSets;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    return obj.StoryManagerBranchNodes;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    return obj.StoryManagerQuestNodes;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    return obj.StoryManagerEventNodes;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    return obj.MusicTracks;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    return obj.DialogViews;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    return obj.EquipTypes;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    return obj.Relationships;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    return obj.AssociationTypes;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    return obj.Outfits;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    return obj.ArtObjects;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    return obj.MaterialObjects;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    return obj.MovementTypes;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    return obj.SoundDescriptors;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    return obj.SoundCategories;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    return obj.SoundOutputModels;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    return obj.CollisionLayers;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    return obj.Colors;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    return obj.ReverbParameters;
                case "PackIn":
                case "IPackInGetter":
                case "IPackIn":
                case "IPackInInternal":
                    return obj.PackIns;
                case "ReferenceGroup":
                case "IReferenceGroupGetter":
                case "IReferenceGroup":
                case "IReferenceGroupInternal":
                    return obj.ReferenceGroups;
                case "AimModel":
                case "IAimModelGetter":
                case "IAimModel":
                case "IAimModelInternal":
                    return obj.AimModels;
                case "Layer":
                case "ILayerGetter":
                case "ILayer":
                case "ILayerInternal":
                    return obj.Layers;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    return obj.ConstructibleObjects;
                case "AObjectModification":
                case "IAObjectModificationGetter":
                case "IAObjectModification":
                case "IAObjectModificationInternal":
                    return obj.ObjectModifications;
                case "MaterialSwap":
                case "IMaterialSwapGetter":
                case "IMaterialSwap":
                case "IMaterialSwapInternal":
                    return obj.MaterialSwaps;
                case "Zoom":
                case "IZoomGetter":
                case "IZoom":
                case "IZoomInternal":
                    return obj.Zooms;
                case "InstanceNamingRules":
                case "IInstanceNamingRulesGetter":
                case "IInstanceNamingRules":
                case "IInstanceNamingRulesInternal":
                    return obj.InstanceNamingRules;
                case "SoundKeywordMapping":
                case "ISoundKeywordMappingGetter":
                case "ISoundKeywordMapping":
                case "ISoundKeywordMappingInternal":
                    return obj.SoundKeywordMappings;
                case "AudioEffectChain":
                case "IAudioEffectChainGetter":
                case "IAudioEffectChain":
                case "IAudioEffectChainInternal":
                    return obj.AudioEffectChains;
                case "SceneCollection":
                case "ISceneCollectionGetter":
                case "ISceneCollection":
                case "ISceneCollectionInternal":
                    return obj.SceneCollections;
                case "AttractionRule":
                case "IAttractionRuleGetter":
                case "IAttractionRule":
                case "IAttractionRuleInternal":
                    return obj.AttractionRules;
                case "AudioCategorySnapshot":
                case "IAudioCategorySnapshotGetter":
                case "IAudioCategorySnapshot":
                case "IAudioCategorySnapshotInternal":
                    return obj.AudioCategorySnapshots;
                case "AnimationSoundTagSet":
                case "IAnimationSoundTagSetGetter":
                case "IAnimationSoundTagSet":
                case "IAnimationSoundTagSetInternal":
                    return obj.AnimationSoundTagSets;
                case "NavigationMeshObstacleManager":
                case "INavigationMeshObstacleManagerGetter":
                case "INavigationMeshObstacleManager":
                case "INavigationMeshObstacleManagerInternal":
                    return obj.NavigationMeshObstacleManagers;
                case "LensFlare":
                case "ILensFlareGetter":
                case "ILensFlare":
                case "ILensFlareInternal":
                    return obj.LensFlares;
                case "GodRays":
                case "IGodRaysGetter":
                case "IGodRays":
                case "IGodRaysInternal":
                    return obj.GodRays;
                case "ObjectVisibilityManager":
                case "IObjectVisibilityManagerGetter":
                case "IObjectVisibilityManager":
                case "IObjectVisibilityManagerInternal":
                    return obj.ObjectVisibilityManagers;
                default:
                    return null;
            }
        }
        
        public static void WriteParallel(
            IFallout4ModGetter item,
            MutagenWriter writer,
            BinaryWriteParameters param,
            ModKey modKey)
        {
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            Stream[] outputStreams = new Stream[126];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, 0, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Keywords, 1, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LocationReferenceTypes, 2, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Actions, 3, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Transforms, 4, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Components, 5, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.TextureSets, 6, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Globals, 7, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.DamageTypes, 8, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Classes, 9, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Factions, 10, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.HeadParts, 11, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Races, 12, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoundMarkers, 13, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AcousticSpaces, 14, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MagicEffects, 15, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LandscapeTextures, 16, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ObjectEffects, 17, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Spells, 18, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Activators, 19, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.TalkingActivators, 20, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Armors, 21, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Books, 22, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Containers, 23, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Doors, 24, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Ingredients, 25, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Lights, 26, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MiscItems, 27, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Statics, 28, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.StaticCollections, 29, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MovableStatics, 30, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Grasses, 31, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Trees, 32, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Florae, 33, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Furniture, 34, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Weapons, 35, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Ammunitions, 36, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Npcs, 37, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledNpcs, 38, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Keys, 39, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Ingestibles, 40, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.IdleMarkers, 41, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Holotapes, 42, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Projectiles, 43, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Hazards, 44, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.BendableSplines, 45, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Terminals, 46, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledItems, 47, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Weather, 48, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Climates, 49, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ShaderParticleGeometries, 50, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.VisualEffects, 51, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Regions, 52, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.NavigationMeshInfoMaps, 53, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteCellsParallel(item.Cells, 54, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteWorldspacesParallel(item.Worldspaces, 55, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteQuestsParallel(item.Quests, 56, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.IdleAnimations, 57, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Packages, 58, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CombatStyles, 59, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LoadScreens, 60, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AnimatedObjects, 61, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Waters, 62, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.EffectShaders, 63, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Explosions, 64, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Debris, 65, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ImageSpaces, 66, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ImageSpaceAdapters, 67, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.FormLists, 68, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Perks, 69, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.BodyParts, 70, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AddonNodes, 71, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ActorValueInformation, 72, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CameraShots, 73, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CameraPaths, 74, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.VoiceTypes, 75, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MaterialTypes, 76, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Impacts, 77, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ImpactDataSets, 78, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ArmorAddons, 79, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.EncounterZones, 80, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Locations, 81, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Messages, 82, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.DefaultObjectManagers, 83, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.DefaultObjects, 84, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LightingTemplates, 85, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MusicTypes, 86, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Footsteps, 87, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.FootstepSets, 88, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerBranchNodes, 89, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerQuestNodes, 90, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerEventNodes, 91, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MusicTracks, 92, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.DialogViews, 93, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.EquipTypes, 94, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Relationships, 95, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AssociationTypes, 96, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Outfits, 97, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ArtObjects, 98, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MaterialObjects, 99, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MovementTypes, 100, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoundDescriptors, 101, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoundCategories, 102, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoundOutputModels, 103, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CollisionLayers, 104, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Colors, 105, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ReverbParameters, 106, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.PackIns, 107, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ReferenceGroups, 108, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AimModels, 109, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Layers, 110, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ConstructibleObjects, 111, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ObjectModifications, 112, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MaterialSwaps, 113, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Zooms, 114, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.InstanceNamingRules, 115, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoundKeywordMappings, 116, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AudioEffectChains, 117, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SceneCollections, 118, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AttractionRules, 119, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AudioCategorySnapshots, 120, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AnimationSoundTagSets, 121, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.NavigationMeshObstacleManagers, 122, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LensFlares, 123, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.GodRays, 124, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ObjectVisibilityManagers, 125, outputStreams, writer.MetaData, param.Parallel));
            Parallel.Invoke(param.Parallel.ParallelOptions, toDo.ToArray());
            PluginUtilityTranslation.CompileStreamsInto(
                outputStreams.NotNull(),
                writer.BaseStream);
        }
        
        public static void WriteGroupParallel<T>(
            IFallout4GroupGetter<T> group,
            int targetIndex,
            Stream[] streamDepositArray,
            WritingBundle bundle,
            ParallelWriteParameters parallelParam)
            where T : class, IFallout4MajorRecordGetter, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return;
            var cuts = group.Cut(parallelParam.CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[bundle.Constants.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), RecordTypes.GRUP.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            using (var stream = new MutagenWriter(groupByteStream, bundle.Constants, dispose: false))
            {
                stream.Position += 8;
                Fallout4GroupBinaryWriteTranslation.WriteEmbedded<T>(group, stream);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, parallelParam.ParallelOptions, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                using (var stream = new MutagenWriter(trib, bundle with {}, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            PluginUtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public uint GetRecordCount(IFallout4ModGetter item)
        {
            uint count = (uint)item.EnumerateMajorRecords().Count();
            count += item.GameSettings.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Keywords.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LocationReferenceTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Actions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Transforms.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Components.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.TextureSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Globals.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DamageTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Classes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Factions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.HeadParts.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Races.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoundMarkers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AcousticSpaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MagicEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LandscapeTextures.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ObjectEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Spells.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Activators.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.TalkingActivators.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Armors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Books.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Containers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Doors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Ingredients.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Lights.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MiscItems.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Statics.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.StaticCollections.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MovableStatics.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Grasses.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Trees.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Florae.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Furniture.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Weapons.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Ammunitions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Npcs.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledNpcs.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Keys.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Ingestibles.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.IdleMarkers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Holotapes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Projectiles.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Hazards.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.BendableSplines.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Terminals.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledItems.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Weather.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Climates.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ShaderParticleGeometries.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.VisualEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Regions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.NavigationMeshInfoMaps.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Cells.Records.Count > 0 ? 1 : default(uint);
            count += item.Worldspaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Quests.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.IdleAnimations.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Packages.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CombatStyles.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LoadScreens.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AnimatedObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Waters.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.EffectShaders.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Explosions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Debris.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ImageSpaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ImageSpaceAdapters.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.FormLists.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Perks.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.BodyParts.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AddonNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ActorValueInformation.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CameraShots.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CameraPaths.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.VoiceTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MaterialTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Impacts.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ImpactDataSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ArmorAddons.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.EncounterZones.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Locations.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Messages.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DefaultObjectManagers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DefaultObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LightingTemplates.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MusicTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Footsteps.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.FootstepSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.StoryManagerBranchNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.StoryManagerQuestNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.StoryManagerEventNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MusicTracks.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DialogViews.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.EquipTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Relationships.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AssociationTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Outfits.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ArtObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MaterialObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MovementTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoundDescriptors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoundCategories.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoundOutputModels.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CollisionLayers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Colors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ReverbParameters.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.PackIns.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ReferenceGroups.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AimModels.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Layers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ConstructibleObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ObjectModifications.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MaterialSwaps.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Zooms.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.InstanceNamingRules.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoundKeywordMappings.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AudioEffectChains.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SceneCollections.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AttractionRules.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AudioCategorySnapshots.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AnimationSoundTagSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.NavigationMeshObstacleManagers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LensFlares.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.GodRays.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ObjectVisibilityManagers.RecordCache.Count > 0 ? 1 : default(uint);
            GetCustomRecordCount(item, (customCount) => count += customCount);
            return count;
        }
        
        partial void GetCustomRecordCount(IFallout4ModGetter item, Action<uint> setter);
        
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFallout4ModGetter obj)
        {
            foreach (var item in obj.ModHeader.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Actions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Components.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.DamageTypes is IFormLinkContainerGetter DamageTypeslinkCont)
            {
                foreach (var item in DamageTypeslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Classes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.HeadParts.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoundMarkers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AcousticSpaces.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LandscapeTextures.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectEffects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.TalkingActivators.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Ingredients.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MiscItems.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.StaticCollections.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MovableStatics.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Grasses.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Trees.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Florae.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledNpcs.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Ingestibles.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.IdleMarkers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Holotapes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Projectiles.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Hazards.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.BendableSplines.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Terminals.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Weather.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.VisualEffects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.NavigationMeshInfoMaps.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Worldspaces.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Packages.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AnimatedObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Waters.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.EffectShaders.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Explosions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.FormLists.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Perks.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.BodyParts.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AddonNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.CameraShots.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.CameraPaths.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialTypes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Impacts.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ImpactDataSets.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ArmorAddons.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.EncounterZones.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Locations.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Messages.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.DefaultObjectManagers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.DefaultObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LightingTemplates.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTypes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Footsteps.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.FootstepSets.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerBranchNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerQuestNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerEventNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTracks.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.DialogViews.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.EquipTypes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Relationships.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Outfits.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ArtObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoundDescriptors.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoundCategories.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoundOutputModels.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.CollisionLayers.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.Colors is IFormLinkContainerGetter ColorslinkCont)
            {
                foreach (var item in ColorslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.PackIns.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ReferenceGroups.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Layers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ConstructibleObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectModifications.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Zooms.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.InstanceNamingRules.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoundKeywordMappings.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SceneCollections.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AudioCategorySnapshots.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AnimationSoundTagSets.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectVisibilityManagers.EnumerateFormLinks())
            {
                yield return item;
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(IFallout4ModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Actions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Transforms.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Components.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TextureSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Globals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DamageTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.HeadParts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AcousticSpaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LandscapeTextures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TalkingActivators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingredients.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MiscItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StaticCollections.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MovableStatics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Grasses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Trees.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Florae.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledNpcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingestibles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Holotapes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Projectiles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hazards.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.BendableSplines.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Terminals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weather.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ShaderParticleGeometries.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.VisualEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.NavigationMeshInfoMaps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Worldspaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Packages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CombatStyles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Waters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EffectShaders.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Explosions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Debris.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImageSpaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImageSpaceAdapters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FormLists.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Perks.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.BodyParts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AddonNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ActorValueInformation.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CameraShots.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CameraPaths.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.VoiceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Impacts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImpactDataSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ArmorAddons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EncounterZones.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Locations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Messages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DefaultObjectManagers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DefaultObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LightingTemplates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Footsteps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FootstepSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerBranchNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerQuestNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerEventNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTracks.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogViews.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EquipTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Relationships.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AssociationTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Outfits.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ArtObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MovementTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundDescriptors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundCategories.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundOutputModels.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CollisionLayers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Colors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ReverbParameters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.PackIns.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ReferenceGroups.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AimModels.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Layers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ConstructibleObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectModifications.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialSwaps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Zooms.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.InstanceNamingRules.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundKeywordMappings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AudioEffectChains.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SceneCollections.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AttractionRules.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AudioCategorySnapshots.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AnimationSoundTagSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.NavigationMeshObstacleManagers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LensFlares.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.GodRays.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectVisibilityManagers.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IFallout4ModGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IFallout4ModGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IFallout4MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in obj.Keywords.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in obj.Actions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Transform":
                case "ITransformGetter":
                case "ITransform":
                case "ITransformInternal":
                    foreach (var item in obj.Transforms.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Component":
                case "IComponentGetter":
                case "IComponent":
                case "IComponentInternal":
                    foreach (var item in obj.Components.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in obj.TextureSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ADamageType":
                case "IADamageTypeGetter":
                case "IADamageType":
                case "IADamageTypeInternal":
                    foreach (var item in obj.DamageTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    foreach (var item in obj.HeadParts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    foreach (var item in obj.SoundMarkers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    foreach (var item in obj.AcousticSpaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in obj.MagicEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    foreach (var item in obj.LandscapeTextures.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    foreach (var item in obj.ObjectEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    foreach (var item in obj.Spells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in obj.Activators.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    foreach (var item in obj.TalkingActivators.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in obj.Armors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in obj.Books.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in obj.Containers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in obj.Doors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in obj.Ingredients.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in obj.Lights.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    foreach (var item in obj.MiscItems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in obj.Statics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StaticCollection":
                case "IStaticCollectionGetter":
                case "IStaticCollection":
                case "IStaticCollectionInternal":
                    foreach (var item in obj.StaticCollections.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MovableStatic":
                case "IMovableStaticGetter":
                case "IMovableStatic":
                case "IMovableStaticInternal":
                    foreach (var item in obj.MovableStatics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in obj.Grasses.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in obj.Trees.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in obj.Florae.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in obj.Furniture.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in obj.Weapons.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in obj.Ammunitions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in obj.Npcs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    foreach (var item in obj.LeveledNpcs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in obj.Keys.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    foreach (var item in obj.Ingestibles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    foreach (var item in obj.IdleMarkers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Holotape":
                case "IHolotapeGetter":
                case "IHolotape":
                case "IHolotapeInternal":
                    foreach (var item in obj.Holotapes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    foreach (var item in obj.Projectiles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    foreach (var item in obj.Hazards.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "BendableSpline":
                case "IBendableSplineGetter":
                case "IBendableSpline":
                case "IBendableSplineInternal":
                    foreach (var item in obj.BendableSplines.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Terminal":
                case "ITerminalGetter":
                case "ITerminal":
                case "ITerminalInternal":
                    foreach (var item in obj.Terminals.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in obj.LeveledItems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in obj.Weather.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in obj.Climates.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    foreach (var item in obj.ShaderParticleGeometries.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    foreach (var item in obj.VisualEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in obj.Regions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    foreach (var item in obj.NavigationMeshInfoMaps.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in obj.IdleAnimations.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    foreach (var item in obj.Packages.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in obj.CombatStyles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in obj.LoadScreens.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in obj.Waters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in obj.EffectShaders.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    foreach (var item in obj.Explosions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    foreach (var item in obj.Debris.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    foreach (var item in obj.ImageSpaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    foreach (var item in obj.ImageSpaceAdapters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    foreach (var item in obj.FormLists.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    foreach (var item in obj.Perks.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    foreach (var item in obj.BodyParts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    foreach (var item in obj.AddonNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    foreach (var item in obj.ActorValueInformation.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    foreach (var item in obj.CameraShots.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    foreach (var item in obj.CameraPaths.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    foreach (var item in obj.VoiceTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    foreach (var item in obj.MaterialTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    foreach (var item in obj.Impacts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    foreach (var item in obj.ImpactDataSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    foreach (var item in obj.ArmorAddons.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    foreach (var item in obj.EncounterZones.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    foreach (var item in obj.Locations.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    foreach (var item in obj.Messages.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    foreach (var item in obj.DefaultObjectManagers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DefaultObject":
                case "IDefaultObjectGetter":
                case "IDefaultObject":
                case "IDefaultObjectInternal":
                    foreach (var item in obj.DefaultObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    foreach (var item in obj.LightingTemplates.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    foreach (var item in obj.MusicTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    foreach (var item in obj.Footsteps.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    foreach (var item in obj.FootstepSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    foreach (var item in obj.StoryManagerBranchNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    foreach (var item in obj.StoryManagerQuestNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    foreach (var item in obj.StoryManagerEventNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    foreach (var item in obj.MusicTracks.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    foreach (var item in obj.DialogViews.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    foreach (var item in obj.EquipTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    foreach (var item in obj.Relationships.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    foreach (var item in obj.AssociationTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    foreach (var item in obj.Outfits.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    foreach (var item in obj.ArtObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    foreach (var item in obj.MaterialObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    foreach (var item in obj.MovementTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    foreach (var item in obj.SoundDescriptors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    foreach (var item in obj.SoundCategories.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    foreach (var item in obj.SoundOutputModels.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    foreach (var item in obj.CollisionLayers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    foreach (var item in obj.Colors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    foreach (var item in obj.ReverbParameters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PackIn":
                case "IPackInGetter":
                case "IPackIn":
                case "IPackInInternal":
                    foreach (var item in obj.PackIns.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ReferenceGroup":
                case "IReferenceGroupGetter":
                case "IReferenceGroup":
                case "IReferenceGroupInternal":
                    foreach (var item in obj.ReferenceGroups.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AimModel":
                case "IAimModelGetter":
                case "IAimModel":
                case "IAimModelInternal":
                    foreach (var item in obj.AimModels.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Layer":
                case "ILayerGetter":
                case "ILayer":
                case "ILayerInternal":
                    foreach (var item in obj.Layers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    foreach (var item in obj.ConstructibleObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AObjectModification":
                case "IAObjectModificationGetter":
                case "IAObjectModification":
                case "IAObjectModificationInternal":
                    foreach (var item in obj.ObjectModifications.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialSwap":
                case "IMaterialSwapGetter":
                case "IMaterialSwap":
                case "IMaterialSwapInternal":
                    foreach (var item in obj.MaterialSwaps.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Zoom":
                case "IZoomGetter":
                case "IZoom":
                case "IZoomInternal":
                    foreach (var item in obj.Zooms.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "InstanceNamingRules":
                case "IInstanceNamingRulesGetter":
                case "IInstanceNamingRules":
                case "IInstanceNamingRulesInternal":
                    foreach (var item in obj.InstanceNamingRules.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundKeywordMapping":
                case "ISoundKeywordMappingGetter":
                case "ISoundKeywordMapping":
                case "ISoundKeywordMappingInternal":
                    foreach (var item in obj.SoundKeywordMappings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AudioEffectChain":
                case "IAudioEffectChainGetter":
                case "IAudioEffectChain":
                case "IAudioEffectChainInternal":
                    foreach (var item in obj.AudioEffectChains.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SceneCollection":
                case "ISceneCollectionGetter":
                case "ISceneCollection":
                case "ISceneCollectionInternal":
                    foreach (var item in obj.SceneCollections.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AttractionRule":
                case "IAttractionRuleGetter":
                case "IAttractionRule":
                case "IAttractionRuleInternal":
                    foreach (var item in obj.AttractionRules.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AudioCategorySnapshot":
                case "IAudioCategorySnapshotGetter":
                case "IAudioCategorySnapshot":
                case "IAudioCategorySnapshotInternal":
                    foreach (var item in obj.AudioCategorySnapshots.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimationSoundTagSet":
                case "IAnimationSoundTagSetGetter":
                case "IAnimationSoundTagSet":
                case "IAnimationSoundTagSetInternal":
                    foreach (var item in obj.AnimationSoundTagSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMeshObstacleManager":
                case "INavigationMeshObstacleManagerGetter":
                case "INavigationMeshObstacleManager":
                case "INavigationMeshObstacleManagerInternal":
                    foreach (var item in obj.NavigationMeshObstacleManagers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LensFlare":
                case "ILensFlareGetter":
                case "ILensFlare":
                case "ILensFlareInternal":
                    foreach (var item in obj.LensFlares.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "GodRays":
                case "IGodRaysGetter":
                case "IGodRays":
                case "IGodRaysInternal":
                    foreach (var item in obj.GodRays.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectVisibilityManager":
                case "IObjectVisibilityManagerGetter":
                case "IObjectVisibilityManager":
                case "IObjectVisibilityManagerInternal":
                    foreach (var item in obj.ObjectVisibilityManagers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMesh":
                case "INavigationMeshGetter":
                case "INavigationMesh":
                case "INavigationMeshInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Fallout4, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IFallout4Mod, IFallout4ModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IFallout4ModGetter obj,
            ILinkCache linkCache)
        {
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, GameSetting, IGameSettingGetter>(
                srcGroup: obj.GameSettings,
                type: typeof(IGameSettingGetter),
                modKey: obj.ModKey,
                group: (m) => m.GameSettings,
                groupGetter: (m) => m.GameSettings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Keyword, IKeywordGetter>(
                srcGroup: obj.Keywords,
                type: typeof(IKeywordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Keywords,
                groupGetter: (m) => m.Keywords))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LocationReferenceType, ILocationReferenceTypeGetter>(
                srcGroup: obj.LocationReferenceTypes,
                type: typeof(ILocationReferenceTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.LocationReferenceTypes,
                groupGetter: (m) => m.LocationReferenceTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ActionRecord, IActionRecordGetter>(
                srcGroup: obj.Actions,
                type: typeof(IActionRecordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Actions,
                groupGetter: (m) => m.Actions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Transform, ITransformGetter>(
                srcGroup: obj.Transforms,
                type: typeof(ITransformGetter),
                modKey: obj.ModKey,
                group: (m) => m.Transforms,
                groupGetter: (m) => m.Transforms))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Component, IComponentGetter>(
                srcGroup: obj.Components,
                type: typeof(IComponentGetter),
                modKey: obj.ModKey,
                group: (m) => m.Components,
                groupGetter: (m) => m.Components))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, TextureSet, ITextureSetGetter>(
                srcGroup: obj.TextureSets,
                type: typeof(ITextureSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.TextureSets,
                groupGetter: (m) => m.TextureSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Global, IGlobalGetter>(
                srcGroup: obj.Globals,
                type: typeof(IGlobalGetter),
                modKey: obj.ModKey,
                group: (m) => m.Globals,
                groupGetter: (m) => m.Globals))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ADamageType, IADamageTypeGetter>(
                srcGroup: obj.DamageTypes,
                type: typeof(IADamageTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.DamageTypes,
                groupGetter: (m) => m.DamageTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Class, IClassGetter>(
                srcGroup: obj.Classes,
                type: typeof(IClassGetter),
                modKey: obj.ModKey,
                group: (m) => m.Classes,
                groupGetter: (m) => m.Classes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Faction, IFactionGetter>(
                srcGroup: obj.Factions,
                type: typeof(IFactionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Factions,
                groupGetter: (m) => m.Factions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, HeadPart, IHeadPartGetter>(
                srcGroup: obj.HeadParts,
                type: typeof(IHeadPartGetter),
                modKey: obj.ModKey,
                group: (m) => m.HeadParts,
                groupGetter: (m) => m.HeadParts))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Race, IRaceGetter>(
                srcGroup: obj.Races,
                type: typeof(IRaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.Races,
                groupGetter: (m) => m.Races))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, SoundMarker, ISoundMarkerGetter>(
                srcGroup: obj.SoundMarkers,
                type: typeof(ISoundMarkerGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoundMarkers,
                groupGetter: (m) => m.SoundMarkers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AcousticSpace, IAcousticSpaceGetter>(
                srcGroup: obj.AcousticSpaces,
                type: typeof(IAcousticSpaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.AcousticSpaces,
                groupGetter: (m) => m.AcousticSpaces))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MagicEffect, IMagicEffectGetter>(
                srcGroup: obj.MagicEffects,
                type: typeof(IMagicEffectGetter),
                modKey: obj.ModKey,
                group: (m) => m.MagicEffects,
                groupGetter: (m) => m.MagicEffects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LandscapeTexture, ILandscapeTextureGetter>(
                srcGroup: obj.LandscapeTextures,
                type: typeof(ILandscapeTextureGetter),
                modKey: obj.ModKey,
                group: (m) => m.LandscapeTextures,
                groupGetter: (m) => m.LandscapeTextures))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ObjectEffect, IObjectEffectGetter>(
                srcGroup: obj.ObjectEffects,
                type: typeof(IObjectEffectGetter),
                modKey: obj.ModKey,
                group: (m) => m.ObjectEffects,
                groupGetter: (m) => m.ObjectEffects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Spell, ISpellGetter>(
                srcGroup: obj.Spells,
                type: typeof(ISpellGetter),
                modKey: obj.ModKey,
                group: (m) => m.Spells,
                groupGetter: (m) => m.Spells))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Activator, IActivatorGetter>(
                srcGroup: obj.Activators,
                type: typeof(IActivatorGetter),
                modKey: obj.ModKey,
                group: (m) => m.Activators,
                groupGetter: (m) => m.Activators))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, TalkingActivator, ITalkingActivatorGetter>(
                srcGroup: obj.TalkingActivators,
                type: typeof(ITalkingActivatorGetter),
                modKey: obj.ModKey,
                group: (m) => m.TalkingActivators,
                groupGetter: (m) => m.TalkingActivators))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Armor, IArmorGetter>(
                srcGroup: obj.Armors,
                type: typeof(IArmorGetter),
                modKey: obj.ModKey,
                group: (m) => m.Armors,
                groupGetter: (m) => m.Armors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Book, IBookGetter>(
                srcGroup: obj.Books,
                type: typeof(IBookGetter),
                modKey: obj.ModKey,
                group: (m) => m.Books,
                groupGetter: (m) => m.Books))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Container, IContainerGetter>(
                srcGroup: obj.Containers,
                type: typeof(IContainerGetter),
                modKey: obj.ModKey,
                group: (m) => m.Containers,
                groupGetter: (m) => m.Containers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Door, IDoorGetter>(
                srcGroup: obj.Doors,
                type: typeof(IDoorGetter),
                modKey: obj.ModKey,
                group: (m) => m.Doors,
                groupGetter: (m) => m.Doors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Ingredient, IIngredientGetter>(
                srcGroup: obj.Ingredients,
                type: typeof(IIngredientGetter),
                modKey: obj.ModKey,
                group: (m) => m.Ingredients,
                groupGetter: (m) => m.Ingredients))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Light, ILightGetter>(
                srcGroup: obj.Lights,
                type: typeof(ILightGetter),
                modKey: obj.ModKey,
                group: (m) => m.Lights,
                groupGetter: (m) => m.Lights))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MiscItem, IMiscItemGetter>(
                srcGroup: obj.MiscItems,
                type: typeof(IMiscItemGetter),
                modKey: obj.ModKey,
                group: (m) => m.MiscItems,
                groupGetter: (m) => m.MiscItems))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Static, IStaticGetter>(
                srcGroup: obj.Statics,
                type: typeof(IStaticGetter),
                modKey: obj.ModKey,
                group: (m) => m.Statics,
                groupGetter: (m) => m.Statics))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, StaticCollection, IStaticCollectionGetter>(
                srcGroup: obj.StaticCollections,
                type: typeof(IStaticCollectionGetter),
                modKey: obj.ModKey,
                group: (m) => m.StaticCollections,
                groupGetter: (m) => m.StaticCollections))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MovableStatic, IMovableStaticGetter>(
                srcGroup: obj.MovableStatics,
                type: typeof(IMovableStaticGetter),
                modKey: obj.ModKey,
                group: (m) => m.MovableStatics,
                groupGetter: (m) => m.MovableStatics))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Grass, IGrassGetter>(
                srcGroup: obj.Grasses,
                type: typeof(IGrassGetter),
                modKey: obj.ModKey,
                group: (m) => m.Grasses,
                groupGetter: (m) => m.Grasses))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Tree, ITreeGetter>(
                srcGroup: obj.Trees,
                type: typeof(ITreeGetter),
                modKey: obj.ModKey,
                group: (m) => m.Trees,
                groupGetter: (m) => m.Trees))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Flora, IFloraGetter>(
                srcGroup: obj.Florae,
                type: typeof(IFloraGetter),
                modKey: obj.ModKey,
                group: (m) => m.Florae,
                groupGetter: (m) => m.Florae))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Furniture, IFurnitureGetter>(
                srcGroup: obj.Furniture,
                type: typeof(IFurnitureGetter),
                modKey: obj.ModKey,
                group: (m) => m.Furniture,
                groupGetter: (m) => m.Furniture))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Weapon, IWeaponGetter>(
                srcGroup: obj.Weapons,
                type: typeof(IWeaponGetter),
                modKey: obj.ModKey,
                group: (m) => m.Weapons,
                groupGetter: (m) => m.Weapons))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Ammunition, IAmmunitionGetter>(
                srcGroup: obj.Ammunitions,
                type: typeof(IAmmunitionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Ammunitions,
                groupGetter: (m) => m.Ammunitions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Npc, INpcGetter>(
                srcGroup: obj.Npcs,
                type: typeof(INpcGetter),
                modKey: obj.ModKey,
                group: (m) => m.Npcs,
                groupGetter: (m) => m.Npcs))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LeveledNpc, ILeveledNpcGetter>(
                srcGroup: obj.LeveledNpcs,
                type: typeof(ILeveledNpcGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledNpcs,
                groupGetter: (m) => m.LeveledNpcs))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Key, IKeyGetter>(
                srcGroup: obj.Keys,
                type: typeof(IKeyGetter),
                modKey: obj.ModKey,
                group: (m) => m.Keys,
                groupGetter: (m) => m.Keys))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Ingestible, IIngestibleGetter>(
                srcGroup: obj.Ingestibles,
                type: typeof(IIngestibleGetter),
                modKey: obj.ModKey,
                group: (m) => m.Ingestibles,
                groupGetter: (m) => m.Ingestibles))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, IdleMarker, IIdleMarkerGetter>(
                srcGroup: obj.IdleMarkers,
                type: typeof(IIdleMarkerGetter),
                modKey: obj.ModKey,
                group: (m) => m.IdleMarkers,
                groupGetter: (m) => m.IdleMarkers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Holotape, IHolotapeGetter>(
                srcGroup: obj.Holotapes,
                type: typeof(IHolotapeGetter),
                modKey: obj.ModKey,
                group: (m) => m.Holotapes,
                groupGetter: (m) => m.Holotapes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Projectile, IProjectileGetter>(
                srcGroup: obj.Projectiles,
                type: typeof(IProjectileGetter),
                modKey: obj.ModKey,
                group: (m) => m.Projectiles,
                groupGetter: (m) => m.Projectiles))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Hazard, IHazardGetter>(
                srcGroup: obj.Hazards,
                type: typeof(IHazardGetter),
                modKey: obj.ModKey,
                group: (m) => m.Hazards,
                groupGetter: (m) => m.Hazards))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, BendableSpline, IBendableSplineGetter>(
                srcGroup: obj.BendableSplines,
                type: typeof(IBendableSplineGetter),
                modKey: obj.ModKey,
                group: (m) => m.BendableSplines,
                groupGetter: (m) => m.BendableSplines))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Terminal, ITerminalGetter>(
                srcGroup: obj.Terminals,
                type: typeof(ITerminalGetter),
                modKey: obj.ModKey,
                group: (m) => m.Terminals,
                groupGetter: (m) => m.Terminals))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LeveledItem, ILeveledItemGetter>(
                srcGroup: obj.LeveledItems,
                type: typeof(ILeveledItemGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledItems,
                groupGetter: (m) => m.LeveledItems))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Weather, IWeatherGetter>(
                srcGroup: obj.Weather,
                type: typeof(IWeatherGetter),
                modKey: obj.ModKey,
                group: (m) => m.Weather,
                groupGetter: (m) => m.Weather))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Climate, IClimateGetter>(
                srcGroup: obj.Climates,
                type: typeof(IClimateGetter),
                modKey: obj.ModKey,
                group: (m) => m.Climates,
                groupGetter: (m) => m.Climates))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ShaderParticleGeometry, IShaderParticleGeometryGetter>(
                srcGroup: obj.ShaderParticleGeometries,
                type: typeof(IShaderParticleGeometryGetter),
                modKey: obj.ModKey,
                group: (m) => m.ShaderParticleGeometries,
                groupGetter: (m) => m.ShaderParticleGeometries))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, VisualEffect, IVisualEffectGetter>(
                srcGroup: obj.VisualEffects,
                type: typeof(IVisualEffectGetter),
                modKey: obj.ModKey,
                group: (m) => m.VisualEffects,
                groupGetter: (m) => m.VisualEffects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Region, IRegionGetter>(
                srcGroup: obj.Regions,
                type: typeof(IRegionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Regions,
                groupGetter: (m) => m.Regions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, NavigationMeshInfoMap, INavigationMeshInfoMapGetter>(
                srcGroup: obj.NavigationMeshInfoMaps,
                type: typeof(INavigationMeshInfoMapGetter),
                modKey: obj.ModKey,
                group: (m) => m.NavigationMeshInfoMaps,
                groupGetter: (m) => m.NavigationMeshInfoMaps))
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                linkCache: linkCache,
                modKey: obj.ModKey,
                parent: null))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Worldspace, IWorldspaceGetter>(
                srcGroup: obj.Worldspaces,
                type: typeof(IWorldspaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.Worldspaces,
                groupGetter: (m) => m.Worldspaces))
            {
                yield return item;
            }
            foreach (var groupItem in obj.Worldspaces)
            {
                foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                    groupItem,
                    linkCache: linkCache,
                    modKey: obj.ModKey,
                    parent: null,
                    getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                    duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                {
                    yield return item;
                }
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Quest, IQuestGetter>(
                srcGroup: obj.Quests,
                type: typeof(IQuestGetter),
                modKey: obj.ModKey,
                group: (m) => m.Quests,
                groupGetter: (m) => m.Quests))
            {
                yield return item;
            }
            foreach (var groupItem in obj.Quests)
            {
                foreach (var item in QuestCommon.Instance.EnumerateMajorRecordContexts(
                    groupItem,
                    linkCache: linkCache,
                    modKey: obj.ModKey,
                    parent: null,
                    getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(linkCache.Resolve<IQuestGetter>(r.FormKey)),
                    duplicateInto: (m, r, e, f) => m.Quests.DuplicateInAsNewRecord(linkCache.Resolve<IQuestGetter>(r.FormKey), e, f)))
                {
                    yield return item;
                }
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, IdleAnimation, IIdleAnimationGetter>(
                srcGroup: obj.IdleAnimations,
                type: typeof(IIdleAnimationGetter),
                modKey: obj.ModKey,
                group: (m) => m.IdleAnimations,
                groupGetter: (m) => m.IdleAnimations))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Package, IPackageGetter>(
                srcGroup: obj.Packages,
                type: typeof(IPackageGetter),
                modKey: obj.ModKey,
                group: (m) => m.Packages,
                groupGetter: (m) => m.Packages))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, CombatStyle, ICombatStyleGetter>(
                srcGroup: obj.CombatStyles,
                type: typeof(ICombatStyleGetter),
                modKey: obj.ModKey,
                group: (m) => m.CombatStyles,
                groupGetter: (m) => m.CombatStyles))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LoadScreen, ILoadScreenGetter>(
                srcGroup: obj.LoadScreens,
                type: typeof(ILoadScreenGetter),
                modKey: obj.ModKey,
                group: (m) => m.LoadScreens,
                groupGetter: (m) => m.LoadScreens))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AnimatedObject, IAnimatedObjectGetter>(
                srcGroup: obj.AnimatedObjects,
                type: typeof(IAnimatedObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.AnimatedObjects,
                groupGetter: (m) => m.AnimatedObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Water, IWaterGetter>(
                srcGroup: obj.Waters,
                type: typeof(IWaterGetter),
                modKey: obj.ModKey,
                group: (m) => m.Waters,
                groupGetter: (m) => m.Waters))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, EffectShader, IEffectShaderGetter>(
                srcGroup: obj.EffectShaders,
                type: typeof(IEffectShaderGetter),
                modKey: obj.ModKey,
                group: (m) => m.EffectShaders,
                groupGetter: (m) => m.EffectShaders))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Explosion, IExplosionGetter>(
                srcGroup: obj.Explosions,
                type: typeof(IExplosionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Explosions,
                groupGetter: (m) => m.Explosions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Debris, IDebrisGetter>(
                srcGroup: obj.Debris,
                type: typeof(IDebrisGetter),
                modKey: obj.ModKey,
                group: (m) => m.Debris,
                groupGetter: (m) => m.Debris))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ImageSpace, IImageSpaceGetter>(
                srcGroup: obj.ImageSpaces,
                type: typeof(IImageSpaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.ImageSpaces,
                groupGetter: (m) => m.ImageSpaces))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ImageSpaceAdapter, IImageSpaceAdapterGetter>(
                srcGroup: obj.ImageSpaceAdapters,
                type: typeof(IImageSpaceAdapterGetter),
                modKey: obj.ModKey,
                group: (m) => m.ImageSpaceAdapters,
                groupGetter: (m) => m.ImageSpaceAdapters))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, FormList, IFormListGetter>(
                srcGroup: obj.FormLists,
                type: typeof(IFormListGetter),
                modKey: obj.ModKey,
                group: (m) => m.FormLists,
                groupGetter: (m) => m.FormLists))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Perk, IPerkGetter>(
                srcGroup: obj.Perks,
                type: typeof(IPerkGetter),
                modKey: obj.ModKey,
                group: (m) => m.Perks,
                groupGetter: (m) => m.Perks))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, BodyPartData, IBodyPartDataGetter>(
                srcGroup: obj.BodyParts,
                type: typeof(IBodyPartDataGetter),
                modKey: obj.ModKey,
                group: (m) => m.BodyParts,
                groupGetter: (m) => m.BodyParts))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AddonNode, IAddonNodeGetter>(
                srcGroup: obj.AddonNodes,
                type: typeof(IAddonNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.AddonNodes,
                groupGetter: (m) => m.AddonNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ActorValueInformation, IActorValueInformationGetter>(
                srcGroup: obj.ActorValueInformation,
                type: typeof(IActorValueInformationGetter),
                modKey: obj.ModKey,
                group: (m) => m.ActorValueInformation,
                groupGetter: (m) => m.ActorValueInformation))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, CameraShot, ICameraShotGetter>(
                srcGroup: obj.CameraShots,
                type: typeof(ICameraShotGetter),
                modKey: obj.ModKey,
                group: (m) => m.CameraShots,
                groupGetter: (m) => m.CameraShots))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, CameraPath, ICameraPathGetter>(
                srcGroup: obj.CameraPaths,
                type: typeof(ICameraPathGetter),
                modKey: obj.ModKey,
                group: (m) => m.CameraPaths,
                groupGetter: (m) => m.CameraPaths))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, VoiceType, IVoiceTypeGetter>(
                srcGroup: obj.VoiceTypes,
                type: typeof(IVoiceTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.VoiceTypes,
                groupGetter: (m) => m.VoiceTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MaterialType, IMaterialTypeGetter>(
                srcGroup: obj.MaterialTypes,
                type: typeof(IMaterialTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.MaterialTypes,
                groupGetter: (m) => m.MaterialTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Impact, IImpactGetter>(
                srcGroup: obj.Impacts,
                type: typeof(IImpactGetter),
                modKey: obj.ModKey,
                group: (m) => m.Impacts,
                groupGetter: (m) => m.Impacts))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ImpactDataSet, IImpactDataSetGetter>(
                srcGroup: obj.ImpactDataSets,
                type: typeof(IImpactDataSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.ImpactDataSets,
                groupGetter: (m) => m.ImpactDataSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ArmorAddon, IArmorAddonGetter>(
                srcGroup: obj.ArmorAddons,
                type: typeof(IArmorAddonGetter),
                modKey: obj.ModKey,
                group: (m) => m.ArmorAddons,
                groupGetter: (m) => m.ArmorAddons))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, EncounterZone, IEncounterZoneGetter>(
                srcGroup: obj.EncounterZones,
                type: typeof(IEncounterZoneGetter),
                modKey: obj.ModKey,
                group: (m) => m.EncounterZones,
                groupGetter: (m) => m.EncounterZones))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Location, ILocationGetter>(
                srcGroup: obj.Locations,
                type: typeof(ILocationGetter),
                modKey: obj.ModKey,
                group: (m) => m.Locations,
                groupGetter: (m) => m.Locations))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Message, IMessageGetter>(
                srcGroup: obj.Messages,
                type: typeof(IMessageGetter),
                modKey: obj.ModKey,
                group: (m) => m.Messages,
                groupGetter: (m) => m.Messages))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, DefaultObjectManager, IDefaultObjectManagerGetter>(
                srcGroup: obj.DefaultObjectManagers,
                type: typeof(IDefaultObjectManagerGetter),
                modKey: obj.ModKey,
                group: (m) => m.DefaultObjectManagers,
                groupGetter: (m) => m.DefaultObjectManagers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, DefaultObject, IDefaultObjectGetter>(
                srcGroup: obj.DefaultObjects,
                type: typeof(IDefaultObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.DefaultObjects,
                groupGetter: (m) => m.DefaultObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LightingTemplate, ILightingTemplateGetter>(
                srcGroup: obj.LightingTemplates,
                type: typeof(ILightingTemplateGetter),
                modKey: obj.ModKey,
                group: (m) => m.LightingTemplates,
                groupGetter: (m) => m.LightingTemplates))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MusicType, IMusicTypeGetter>(
                srcGroup: obj.MusicTypes,
                type: typeof(IMusicTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.MusicTypes,
                groupGetter: (m) => m.MusicTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Footstep, IFootstepGetter>(
                srcGroup: obj.Footsteps,
                type: typeof(IFootstepGetter),
                modKey: obj.ModKey,
                group: (m) => m.Footsteps,
                groupGetter: (m) => m.Footsteps))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, FootstepSet, IFootstepSetGetter>(
                srcGroup: obj.FootstepSets,
                type: typeof(IFootstepSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.FootstepSets,
                groupGetter: (m) => m.FootstepSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, StoryManagerBranchNode, IStoryManagerBranchNodeGetter>(
                srcGroup: obj.StoryManagerBranchNodes,
                type: typeof(IStoryManagerBranchNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.StoryManagerBranchNodes,
                groupGetter: (m) => m.StoryManagerBranchNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, StoryManagerQuestNode, IStoryManagerQuestNodeGetter>(
                srcGroup: obj.StoryManagerQuestNodes,
                type: typeof(IStoryManagerQuestNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.StoryManagerQuestNodes,
                groupGetter: (m) => m.StoryManagerQuestNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, StoryManagerEventNode, IStoryManagerEventNodeGetter>(
                srcGroup: obj.StoryManagerEventNodes,
                type: typeof(IStoryManagerEventNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.StoryManagerEventNodes,
                groupGetter: (m) => m.StoryManagerEventNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MusicTrack, IMusicTrackGetter>(
                srcGroup: obj.MusicTracks,
                type: typeof(IMusicTrackGetter),
                modKey: obj.ModKey,
                group: (m) => m.MusicTracks,
                groupGetter: (m) => m.MusicTracks))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, DialogView, IDialogViewGetter>(
                srcGroup: obj.DialogViews,
                type: typeof(IDialogViewGetter),
                modKey: obj.ModKey,
                group: (m) => m.DialogViews,
                groupGetter: (m) => m.DialogViews))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, EquipType, IEquipTypeGetter>(
                srcGroup: obj.EquipTypes,
                type: typeof(IEquipTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.EquipTypes,
                groupGetter: (m) => m.EquipTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Relationship, IRelationshipGetter>(
                srcGroup: obj.Relationships,
                type: typeof(IRelationshipGetter),
                modKey: obj.ModKey,
                group: (m) => m.Relationships,
                groupGetter: (m) => m.Relationships))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AssociationType, IAssociationTypeGetter>(
                srcGroup: obj.AssociationTypes,
                type: typeof(IAssociationTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.AssociationTypes,
                groupGetter: (m) => m.AssociationTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Outfit, IOutfitGetter>(
                srcGroup: obj.Outfits,
                type: typeof(IOutfitGetter),
                modKey: obj.ModKey,
                group: (m) => m.Outfits,
                groupGetter: (m) => m.Outfits))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ArtObject, IArtObjectGetter>(
                srcGroup: obj.ArtObjects,
                type: typeof(IArtObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.ArtObjects,
                groupGetter: (m) => m.ArtObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MaterialObject, IMaterialObjectGetter>(
                srcGroup: obj.MaterialObjects,
                type: typeof(IMaterialObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.MaterialObjects,
                groupGetter: (m) => m.MaterialObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MovementType, IMovementTypeGetter>(
                srcGroup: obj.MovementTypes,
                type: typeof(IMovementTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.MovementTypes,
                groupGetter: (m) => m.MovementTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, SoundDescriptor, ISoundDescriptorGetter>(
                srcGroup: obj.SoundDescriptors,
                type: typeof(ISoundDescriptorGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoundDescriptors,
                groupGetter: (m) => m.SoundDescriptors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, SoundCategory, ISoundCategoryGetter>(
                srcGroup: obj.SoundCategories,
                type: typeof(ISoundCategoryGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoundCategories,
                groupGetter: (m) => m.SoundCategories))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, SoundOutputModel, ISoundOutputModelGetter>(
                srcGroup: obj.SoundOutputModels,
                type: typeof(ISoundOutputModelGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoundOutputModels,
                groupGetter: (m) => m.SoundOutputModels))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, CollisionLayer, ICollisionLayerGetter>(
                srcGroup: obj.CollisionLayers,
                type: typeof(ICollisionLayerGetter),
                modKey: obj.ModKey,
                group: (m) => m.CollisionLayers,
                groupGetter: (m) => m.CollisionLayers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ColorRecord, IColorRecordGetter>(
                srcGroup: obj.Colors,
                type: typeof(IColorRecordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Colors,
                groupGetter: (m) => m.Colors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ReverbParameters, IReverbParametersGetter>(
                srcGroup: obj.ReverbParameters,
                type: typeof(IReverbParametersGetter),
                modKey: obj.ModKey,
                group: (m) => m.ReverbParameters,
                groupGetter: (m) => m.ReverbParameters))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, PackIn, IPackInGetter>(
                srcGroup: obj.PackIns,
                type: typeof(IPackInGetter),
                modKey: obj.ModKey,
                group: (m) => m.PackIns,
                groupGetter: (m) => m.PackIns))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ReferenceGroup, IReferenceGroupGetter>(
                srcGroup: obj.ReferenceGroups,
                type: typeof(IReferenceGroupGetter),
                modKey: obj.ModKey,
                group: (m) => m.ReferenceGroups,
                groupGetter: (m) => m.ReferenceGroups))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AimModel, IAimModelGetter>(
                srcGroup: obj.AimModels,
                type: typeof(IAimModelGetter),
                modKey: obj.ModKey,
                group: (m) => m.AimModels,
                groupGetter: (m) => m.AimModels))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Layer, ILayerGetter>(
                srcGroup: obj.Layers,
                type: typeof(ILayerGetter),
                modKey: obj.ModKey,
                group: (m) => m.Layers,
                groupGetter: (m) => m.Layers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ConstructibleObject, IConstructibleObjectGetter>(
                srcGroup: obj.ConstructibleObjects,
                type: typeof(IConstructibleObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.ConstructibleObjects,
                groupGetter: (m) => m.ConstructibleObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AObjectModification, IAObjectModificationGetter>(
                srcGroup: obj.ObjectModifications,
                type: typeof(IAObjectModificationGetter),
                modKey: obj.ModKey,
                group: (m) => m.ObjectModifications,
                groupGetter: (m) => m.ObjectModifications))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MaterialSwap, IMaterialSwapGetter>(
                srcGroup: obj.MaterialSwaps,
                type: typeof(IMaterialSwapGetter),
                modKey: obj.ModKey,
                group: (m) => m.MaterialSwaps,
                groupGetter: (m) => m.MaterialSwaps))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Zoom, IZoomGetter>(
                srcGroup: obj.Zooms,
                type: typeof(IZoomGetter),
                modKey: obj.ModKey,
                group: (m) => m.Zooms,
                groupGetter: (m) => m.Zooms))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, InstanceNamingRules, IInstanceNamingRulesGetter>(
                srcGroup: obj.InstanceNamingRules,
                type: typeof(IInstanceNamingRulesGetter),
                modKey: obj.ModKey,
                group: (m) => m.InstanceNamingRules,
                groupGetter: (m) => m.InstanceNamingRules))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, SoundKeywordMapping, ISoundKeywordMappingGetter>(
                srcGroup: obj.SoundKeywordMappings,
                type: typeof(ISoundKeywordMappingGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoundKeywordMappings,
                groupGetter: (m) => m.SoundKeywordMappings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AudioEffectChain, IAudioEffectChainGetter>(
                srcGroup: obj.AudioEffectChains,
                type: typeof(IAudioEffectChainGetter),
                modKey: obj.ModKey,
                group: (m) => m.AudioEffectChains,
                groupGetter: (m) => m.AudioEffectChains))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, SceneCollection, ISceneCollectionGetter>(
                srcGroup: obj.SceneCollections,
                type: typeof(ISceneCollectionGetter),
                modKey: obj.ModKey,
                group: (m) => m.SceneCollections,
                groupGetter: (m) => m.SceneCollections))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AttractionRule, IAttractionRuleGetter>(
                srcGroup: obj.AttractionRules,
                type: typeof(IAttractionRuleGetter),
                modKey: obj.ModKey,
                group: (m) => m.AttractionRules,
                groupGetter: (m) => m.AttractionRules))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AudioCategorySnapshot, IAudioCategorySnapshotGetter>(
                srcGroup: obj.AudioCategorySnapshots,
                type: typeof(IAudioCategorySnapshotGetter),
                modKey: obj.ModKey,
                group: (m) => m.AudioCategorySnapshots,
                groupGetter: (m) => m.AudioCategorySnapshots))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AnimationSoundTagSet, IAnimationSoundTagSetGetter>(
                srcGroup: obj.AnimationSoundTagSets,
                type: typeof(IAnimationSoundTagSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.AnimationSoundTagSets,
                groupGetter: (m) => m.AnimationSoundTagSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, NavigationMeshObstacleManager, INavigationMeshObstacleManagerGetter>(
                srcGroup: obj.NavigationMeshObstacleManagers,
                type: typeof(INavigationMeshObstacleManagerGetter),
                modKey: obj.ModKey,
                group: (m) => m.NavigationMeshObstacleManagers,
                groupGetter: (m) => m.NavigationMeshObstacleManagers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LensFlare, ILensFlareGetter>(
                srcGroup: obj.LensFlares,
                type: typeof(ILensFlareGetter),
                modKey: obj.ModKey,
                group: (m) => m.LensFlares,
                groupGetter: (m) => m.LensFlares))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, GodRays, IGodRaysGetter>(
                srcGroup: obj.GodRays,
                type: typeof(IGodRaysGetter),
                modKey: obj.ModKey,
                group: (m) => m.GodRays,
                groupGetter: (m) => m.GodRays))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ObjectVisibilityManager, IObjectVisibilityManagerGetter>(
                srcGroup: obj.ObjectVisibilityManagers,
                type: typeof(IObjectVisibilityManagerGetter),
                modKey: obj.ModKey,
                group: (m) => m.ObjectVisibilityManagers,
                groupGetter: (m) => m.ObjectVisibilityManagers))
            {
                yield return item;
            }
        }
        
        public IEnumerable<IModContext<IFallout4Mod, IFallout4ModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IFallout4ModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                    if (!Fallout4Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IFallout4MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, GameSetting, IGameSettingGetter>(
                        srcGroup: obj.GameSettings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GameSettings,
                        groupGetter: (m) => m.GameSettings))
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Keyword, IKeywordGetter>(
                        srcGroup: obj.Keywords,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Keywords,
                        groupGetter: (m) => m.Keywords))
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LocationReferenceType, ILocationReferenceTypeGetter>(
                        srcGroup: obj.LocationReferenceTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LocationReferenceTypes,
                        groupGetter: (m) => m.LocationReferenceTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ActionRecord, IActionRecordGetter>(
                        srcGroup: obj.Actions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Actions,
                        groupGetter: (m) => m.Actions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Transform":
                case "ITransformGetter":
                case "ITransform":
                case "ITransformInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Transform, ITransformGetter>(
                        srcGroup: obj.Transforms,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Transforms,
                        groupGetter: (m) => m.Transforms))
                    {
                        yield return item;
                    }
                    yield break;
                case "Component":
                case "IComponentGetter":
                case "IComponent":
                case "IComponentInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Component, IComponentGetter>(
                        srcGroup: obj.Components,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Components,
                        groupGetter: (m) => m.Components))
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, TextureSet, ITextureSetGetter>(
                        srcGroup: obj.TextureSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.TextureSets,
                        groupGetter: (m) => m.TextureSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Global, IGlobalGetter>(
                        srcGroup: obj.Globals,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Globals,
                        groupGetter: (m) => m.Globals))
                    {
                        yield return item;
                    }
                    yield break;
                case "ADamageType":
                case "IADamageTypeGetter":
                case "IADamageType":
                case "IADamageTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ADamageType, IADamageTypeGetter>(
                        srcGroup: obj.DamageTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DamageTypes,
                        groupGetter: (m) => m.DamageTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Class, IClassGetter>(
                        srcGroup: obj.Classes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Classes,
                        groupGetter: (m) => m.Classes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Faction, IFactionGetter>(
                        srcGroup: obj.Factions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Factions,
                        groupGetter: (m) => m.Factions))
                    {
                        yield return item;
                    }
                    yield break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, HeadPart, IHeadPartGetter>(
                        srcGroup: obj.HeadParts,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.HeadParts,
                        groupGetter: (m) => m.HeadParts))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Race, IRaceGetter>(
                        srcGroup: obj.Races,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Races,
                        groupGetter: (m) => m.Races))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, SoundMarker, ISoundMarkerGetter>(
                        srcGroup: obj.SoundMarkers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoundMarkers,
                        groupGetter: (m) => m.SoundMarkers))
                    {
                        yield return item;
                    }
                    yield break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AcousticSpace, IAcousticSpaceGetter>(
                        srcGroup: obj.AcousticSpaces,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AcousticSpaces,
                        groupGetter: (m) => m.AcousticSpaces))
                    {
                        yield return item;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MagicEffect, IMagicEffectGetter>(
                        srcGroup: obj.MagicEffects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MagicEffects,
                        groupGetter: (m) => m.MagicEffects))
                    {
                        yield return item;
                    }
                    yield break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LandscapeTexture, ILandscapeTextureGetter>(
                        srcGroup: obj.LandscapeTextures,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LandscapeTextures,
                        groupGetter: (m) => m.LandscapeTextures))
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ObjectEffect, IObjectEffectGetter>(
                        srcGroup: obj.ObjectEffects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ObjectEffects,
                        groupGetter: (m) => m.ObjectEffects))
                    {
                        yield return item;
                    }
                    yield break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Spell, ISpellGetter>(
                        srcGroup: obj.Spells,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Spells,
                        groupGetter: (m) => m.Spells))
                    {
                        yield return item;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Activator, IActivatorGetter>(
                        srcGroup: obj.Activators,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Activators,
                        groupGetter: (m) => m.Activators))
                    {
                        yield return item;
                    }
                    yield break;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, TalkingActivator, ITalkingActivatorGetter>(
                        srcGroup: obj.TalkingActivators,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.TalkingActivators,
                        groupGetter: (m) => m.TalkingActivators))
                    {
                        yield return item;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Armor, IArmorGetter>(
                        srcGroup: obj.Armors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Armors,
                        groupGetter: (m) => m.Armors))
                    {
                        yield return item;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Book, IBookGetter>(
                        srcGroup: obj.Books,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Books,
                        groupGetter: (m) => m.Books))
                    {
                        yield return item;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Container, IContainerGetter>(
                        srcGroup: obj.Containers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Containers,
                        groupGetter: (m) => m.Containers))
                    {
                        yield return item;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Door, IDoorGetter>(
                        srcGroup: obj.Doors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Doors,
                        groupGetter: (m) => m.Doors))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Ingredient, IIngredientGetter>(
                        srcGroup: obj.Ingredients,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Ingredients,
                        groupGetter: (m) => m.Ingredients))
                    {
                        yield return item;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Light, ILightGetter>(
                        srcGroup: obj.Lights,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Lights,
                        groupGetter: (m) => m.Lights))
                    {
                        yield return item;
                    }
                    yield break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MiscItem, IMiscItemGetter>(
                        srcGroup: obj.MiscItems,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MiscItems,
                        groupGetter: (m) => m.MiscItems))
                    {
                        yield return item;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Static, IStaticGetter>(
                        srcGroup: obj.Statics,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Statics,
                        groupGetter: (m) => m.Statics))
                    {
                        yield return item;
                    }
                    yield break;
                case "StaticCollection":
                case "IStaticCollectionGetter":
                case "IStaticCollection":
                case "IStaticCollectionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, StaticCollection, IStaticCollectionGetter>(
                        srcGroup: obj.StaticCollections,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.StaticCollections,
                        groupGetter: (m) => m.StaticCollections))
                    {
                        yield return item;
                    }
                    yield break;
                case "MovableStatic":
                case "IMovableStaticGetter":
                case "IMovableStatic":
                case "IMovableStaticInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MovableStatic, IMovableStaticGetter>(
                        srcGroup: obj.MovableStatics,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MovableStatics,
                        groupGetter: (m) => m.MovableStatics))
                    {
                        yield return item;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Grass, IGrassGetter>(
                        srcGroup: obj.Grasses,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Grasses,
                        groupGetter: (m) => m.Grasses))
                    {
                        yield return item;
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Tree, ITreeGetter>(
                        srcGroup: obj.Trees,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Trees,
                        groupGetter: (m) => m.Trees))
                    {
                        yield return item;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Flora, IFloraGetter>(
                        srcGroup: obj.Florae,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Florae,
                        groupGetter: (m) => m.Florae))
                    {
                        yield return item;
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Furniture, IFurnitureGetter>(
                        srcGroup: obj.Furniture,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Furniture,
                        groupGetter: (m) => m.Furniture))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Weapon, IWeaponGetter>(
                        srcGroup: obj.Weapons,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Weapons,
                        groupGetter: (m) => m.Weapons))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Ammunition, IAmmunitionGetter>(
                        srcGroup: obj.Ammunitions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Ammunitions,
                        groupGetter: (m) => m.Ammunitions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Npc, INpcGetter>(
                        srcGroup: obj.Npcs,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Npcs,
                        groupGetter: (m) => m.Npcs))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LeveledNpc, ILeveledNpcGetter>(
                        srcGroup: obj.LeveledNpcs,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledNpcs,
                        groupGetter: (m) => m.LeveledNpcs))
                    {
                        yield return item;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Key, IKeyGetter>(
                        srcGroup: obj.Keys,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Keys,
                        groupGetter: (m) => m.Keys))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Ingestible, IIngestibleGetter>(
                        srcGroup: obj.Ingestibles,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Ingestibles,
                        groupGetter: (m) => m.Ingestibles))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, IdleMarker, IIdleMarkerGetter>(
                        srcGroup: obj.IdleMarkers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.IdleMarkers,
                        groupGetter: (m) => m.IdleMarkers))
                    {
                        yield return item;
                    }
                    yield break;
                case "Holotape":
                case "IHolotapeGetter":
                case "IHolotape":
                case "IHolotapeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Holotape, IHolotapeGetter>(
                        srcGroup: obj.Holotapes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Holotapes,
                        groupGetter: (m) => m.Holotapes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Projectile, IProjectileGetter>(
                        srcGroup: obj.Projectiles,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Projectiles,
                        groupGetter: (m) => m.Projectiles))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Hazard, IHazardGetter>(
                        srcGroup: obj.Hazards,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Hazards,
                        groupGetter: (m) => m.Hazards))
                    {
                        yield return item;
                    }
                    yield break;
                case "BendableSpline":
                case "IBendableSplineGetter":
                case "IBendableSpline":
                case "IBendableSplineInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, BendableSpline, IBendableSplineGetter>(
                        srcGroup: obj.BendableSplines,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.BendableSplines,
                        groupGetter: (m) => m.BendableSplines))
                    {
                        yield return item;
                    }
                    yield break;
                case "Terminal":
                case "ITerminalGetter":
                case "ITerminal":
                case "ITerminalInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Terminal, ITerminalGetter>(
                        srcGroup: obj.Terminals,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Terminals,
                        groupGetter: (m) => m.Terminals))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LeveledItem, ILeveledItemGetter>(
                        srcGroup: obj.LeveledItems,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledItems,
                        groupGetter: (m) => m.LeveledItems))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Weather, IWeatherGetter>(
                        srcGroup: obj.Weather,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Weather,
                        groupGetter: (m) => m.Weather))
                    {
                        yield return item;
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Climate, IClimateGetter>(
                        srcGroup: obj.Climates,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Climates,
                        groupGetter: (m) => m.Climates))
                    {
                        yield return item;
                    }
                    yield break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ShaderParticleGeometry, IShaderParticleGeometryGetter>(
                        srcGroup: obj.ShaderParticleGeometries,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ShaderParticleGeometries,
                        groupGetter: (m) => m.ShaderParticleGeometries))
                    {
                        yield return item;
                    }
                    yield break;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, VisualEffect, IVisualEffectGetter>(
                        srcGroup: obj.VisualEffects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.VisualEffects,
                        groupGetter: (m) => m.VisualEffects))
                    {
                        yield return item;
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Region, IRegionGetter>(
                        srcGroup: obj.Regions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Regions,
                        groupGetter: (m) => m.Regions))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, NavigationMeshInfoMap, INavigationMeshInfoMapGetter>(
                        srcGroup: obj.NavigationMeshInfoMaps,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.NavigationMeshInfoMaps,
                        groupGetter: (m) => m.NavigationMeshInfoMaps))
                    {
                        yield return item;
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Worldspace, IWorldspaceGetter>(
                        srcGroup: obj.Worldspaces,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Worldspaces,
                        groupGetter: (m) => m.Worldspaces))
                    {
                        yield return item;
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Quest, IQuestGetter>(
                        srcGroup: obj.Quests,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Quests,
                        groupGetter: (m) => m.Quests))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, IdleAnimation, IIdleAnimationGetter>(
                        srcGroup: obj.IdleAnimations,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.IdleAnimations,
                        groupGetter: (m) => m.IdleAnimations))
                    {
                        yield return item;
                    }
                    yield break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Package, IPackageGetter>(
                        srcGroup: obj.Packages,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Packages,
                        groupGetter: (m) => m.Packages))
                    {
                        yield return item;
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, CombatStyle, ICombatStyleGetter>(
                        srcGroup: obj.CombatStyles,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CombatStyles,
                        groupGetter: (m) => m.CombatStyles))
                    {
                        yield return item;
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LoadScreen, ILoadScreenGetter>(
                        srcGroup: obj.LoadScreens,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LoadScreens,
                        groupGetter: (m) => m.LoadScreens))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AnimatedObject, IAnimatedObjectGetter>(
                        srcGroup: obj.AnimatedObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AnimatedObjects,
                        groupGetter: (m) => m.AnimatedObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Water, IWaterGetter>(
                        srcGroup: obj.Waters,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Waters,
                        groupGetter: (m) => m.Waters))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, EffectShader, IEffectShaderGetter>(
                        srcGroup: obj.EffectShaders,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.EffectShaders,
                        groupGetter: (m) => m.EffectShaders))
                    {
                        yield return item;
                    }
                    yield break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Explosion, IExplosionGetter>(
                        srcGroup: obj.Explosions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Explosions,
                        groupGetter: (m) => m.Explosions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Debris, IDebrisGetter>(
                        srcGroup: obj.Debris,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Debris,
                        groupGetter: (m) => m.Debris))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ImageSpace, IImageSpaceGetter>(
                        srcGroup: obj.ImageSpaces,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ImageSpaces,
                        groupGetter: (m) => m.ImageSpaces))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ImageSpaceAdapter, IImageSpaceAdapterGetter>(
                        srcGroup: obj.ImageSpaceAdapters,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ImageSpaceAdapters,
                        groupGetter: (m) => m.ImageSpaceAdapters))
                    {
                        yield return item;
                    }
                    yield break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, FormList, IFormListGetter>(
                        srcGroup: obj.FormLists,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.FormLists,
                        groupGetter: (m) => m.FormLists))
                    {
                        yield return item;
                    }
                    yield break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Perk, IPerkGetter>(
                        srcGroup: obj.Perks,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Perks,
                        groupGetter: (m) => m.Perks))
                    {
                        yield return item;
                    }
                    yield break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, BodyPartData, IBodyPartDataGetter>(
                        srcGroup: obj.BodyParts,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.BodyParts,
                        groupGetter: (m) => m.BodyParts))
                    {
                        yield return item;
                    }
                    yield break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AddonNode, IAddonNodeGetter>(
                        srcGroup: obj.AddonNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AddonNodes,
                        groupGetter: (m) => m.AddonNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ActorValueInformation, IActorValueInformationGetter>(
                        srcGroup: obj.ActorValueInformation,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ActorValueInformation,
                        groupGetter: (m) => m.ActorValueInformation))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, CameraShot, ICameraShotGetter>(
                        srcGroup: obj.CameraShots,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CameraShots,
                        groupGetter: (m) => m.CameraShots))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, CameraPath, ICameraPathGetter>(
                        srcGroup: obj.CameraPaths,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CameraPaths,
                        groupGetter: (m) => m.CameraPaths))
                    {
                        yield return item;
                    }
                    yield break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, VoiceType, IVoiceTypeGetter>(
                        srcGroup: obj.VoiceTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.VoiceTypes,
                        groupGetter: (m) => m.VoiceTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MaterialType, IMaterialTypeGetter>(
                        srcGroup: obj.MaterialTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MaterialTypes,
                        groupGetter: (m) => m.MaterialTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Impact, IImpactGetter>(
                        srcGroup: obj.Impacts,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Impacts,
                        groupGetter: (m) => m.Impacts))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ImpactDataSet, IImpactDataSetGetter>(
                        srcGroup: obj.ImpactDataSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ImpactDataSets,
                        groupGetter: (m) => m.ImpactDataSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ArmorAddon, IArmorAddonGetter>(
                        srcGroup: obj.ArmorAddons,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ArmorAddons,
                        groupGetter: (m) => m.ArmorAddons))
                    {
                        yield return item;
                    }
                    yield break;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, EncounterZone, IEncounterZoneGetter>(
                        srcGroup: obj.EncounterZones,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.EncounterZones,
                        groupGetter: (m) => m.EncounterZones))
                    {
                        yield return item;
                    }
                    yield break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Location, ILocationGetter>(
                        srcGroup: obj.Locations,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Locations,
                        groupGetter: (m) => m.Locations))
                    {
                        yield return item;
                    }
                    yield break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Message, IMessageGetter>(
                        srcGroup: obj.Messages,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Messages,
                        groupGetter: (m) => m.Messages))
                    {
                        yield return item;
                    }
                    yield break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, DefaultObjectManager, IDefaultObjectManagerGetter>(
                        srcGroup: obj.DefaultObjectManagers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DefaultObjectManagers,
                        groupGetter: (m) => m.DefaultObjectManagers))
                    {
                        yield return item;
                    }
                    yield break;
                case "DefaultObject":
                case "IDefaultObjectGetter":
                case "IDefaultObject":
                case "IDefaultObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, DefaultObject, IDefaultObjectGetter>(
                        srcGroup: obj.DefaultObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DefaultObjects,
                        groupGetter: (m) => m.DefaultObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LightingTemplate, ILightingTemplateGetter>(
                        srcGroup: obj.LightingTemplates,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LightingTemplates,
                        groupGetter: (m) => m.LightingTemplates))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MusicType, IMusicTypeGetter>(
                        srcGroup: obj.MusicTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MusicTypes,
                        groupGetter: (m) => m.MusicTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Footstep, IFootstepGetter>(
                        srcGroup: obj.Footsteps,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Footsteps,
                        groupGetter: (m) => m.Footsteps))
                    {
                        yield return item;
                    }
                    yield break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, FootstepSet, IFootstepSetGetter>(
                        srcGroup: obj.FootstepSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.FootstepSets,
                        groupGetter: (m) => m.FootstepSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, StoryManagerBranchNode, IStoryManagerBranchNodeGetter>(
                        srcGroup: obj.StoryManagerBranchNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.StoryManagerBranchNodes,
                        groupGetter: (m) => m.StoryManagerBranchNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, StoryManagerQuestNode, IStoryManagerQuestNodeGetter>(
                        srcGroup: obj.StoryManagerQuestNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.StoryManagerQuestNodes,
                        groupGetter: (m) => m.StoryManagerQuestNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, StoryManagerEventNode, IStoryManagerEventNodeGetter>(
                        srcGroup: obj.StoryManagerEventNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.StoryManagerEventNodes,
                        groupGetter: (m) => m.StoryManagerEventNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MusicTrack, IMusicTrackGetter>(
                        srcGroup: obj.MusicTracks,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MusicTracks,
                        groupGetter: (m) => m.MusicTracks))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, DialogView, IDialogViewGetter>(
                        srcGroup: obj.DialogViews,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DialogViews,
                        groupGetter: (m) => m.DialogViews))
                    {
                        yield return item;
                    }
                    yield break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, EquipType, IEquipTypeGetter>(
                        srcGroup: obj.EquipTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.EquipTypes,
                        groupGetter: (m) => m.EquipTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Relationship, IRelationshipGetter>(
                        srcGroup: obj.Relationships,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Relationships,
                        groupGetter: (m) => m.Relationships))
                    {
                        yield return item;
                    }
                    yield break;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AssociationType, IAssociationTypeGetter>(
                        srcGroup: obj.AssociationTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AssociationTypes,
                        groupGetter: (m) => m.AssociationTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Outfit, IOutfitGetter>(
                        srcGroup: obj.Outfits,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Outfits,
                        groupGetter: (m) => m.Outfits))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ArtObject, IArtObjectGetter>(
                        srcGroup: obj.ArtObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ArtObjects,
                        groupGetter: (m) => m.ArtObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MaterialObject, IMaterialObjectGetter>(
                        srcGroup: obj.MaterialObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MaterialObjects,
                        groupGetter: (m) => m.MaterialObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MovementType, IMovementTypeGetter>(
                        srcGroup: obj.MovementTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MovementTypes,
                        groupGetter: (m) => m.MovementTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, SoundDescriptor, ISoundDescriptorGetter>(
                        srcGroup: obj.SoundDescriptors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoundDescriptors,
                        groupGetter: (m) => m.SoundDescriptors))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, SoundCategory, ISoundCategoryGetter>(
                        srcGroup: obj.SoundCategories,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoundCategories,
                        groupGetter: (m) => m.SoundCategories))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, SoundOutputModel, ISoundOutputModelGetter>(
                        srcGroup: obj.SoundOutputModels,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoundOutputModels,
                        groupGetter: (m) => m.SoundOutputModels))
                    {
                        yield return item;
                    }
                    yield break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, CollisionLayer, ICollisionLayerGetter>(
                        srcGroup: obj.CollisionLayers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CollisionLayers,
                        groupGetter: (m) => m.CollisionLayers))
                    {
                        yield return item;
                    }
                    yield break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ColorRecord, IColorRecordGetter>(
                        srcGroup: obj.Colors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Colors,
                        groupGetter: (m) => m.Colors))
                    {
                        yield return item;
                    }
                    yield break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ReverbParameters, IReverbParametersGetter>(
                        srcGroup: obj.ReverbParameters,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ReverbParameters,
                        groupGetter: (m) => m.ReverbParameters))
                    {
                        yield return item;
                    }
                    yield break;
                case "PackIn":
                case "IPackInGetter":
                case "IPackIn":
                case "IPackInInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, PackIn, IPackInGetter>(
                        srcGroup: obj.PackIns,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.PackIns,
                        groupGetter: (m) => m.PackIns))
                    {
                        yield return item;
                    }
                    yield break;
                case "ReferenceGroup":
                case "IReferenceGroupGetter":
                case "IReferenceGroup":
                case "IReferenceGroupInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ReferenceGroup, IReferenceGroupGetter>(
                        srcGroup: obj.ReferenceGroups,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ReferenceGroups,
                        groupGetter: (m) => m.ReferenceGroups))
                    {
                        yield return item;
                    }
                    yield break;
                case "AimModel":
                case "IAimModelGetter":
                case "IAimModel":
                case "IAimModelInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AimModel, IAimModelGetter>(
                        srcGroup: obj.AimModels,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AimModels,
                        groupGetter: (m) => m.AimModels))
                    {
                        yield return item;
                    }
                    yield break;
                case "Layer":
                case "ILayerGetter":
                case "ILayer":
                case "ILayerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Layer, ILayerGetter>(
                        srcGroup: obj.Layers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Layers,
                        groupGetter: (m) => m.Layers))
                    {
                        yield return item;
                    }
                    yield break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ConstructibleObject, IConstructibleObjectGetter>(
                        srcGroup: obj.ConstructibleObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ConstructibleObjects,
                        groupGetter: (m) => m.ConstructibleObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "AObjectModification":
                case "IAObjectModificationGetter":
                case "IAObjectModification":
                case "IAObjectModificationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AObjectModification, IAObjectModificationGetter>(
                        srcGroup: obj.ObjectModifications,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ObjectModifications,
                        groupGetter: (m) => m.ObjectModifications))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialSwap":
                case "IMaterialSwapGetter":
                case "IMaterialSwap":
                case "IMaterialSwapInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, MaterialSwap, IMaterialSwapGetter>(
                        srcGroup: obj.MaterialSwaps,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MaterialSwaps,
                        groupGetter: (m) => m.MaterialSwaps))
                    {
                        yield return item;
                    }
                    yield break;
                case "Zoom":
                case "IZoomGetter":
                case "IZoom":
                case "IZoomInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, Zoom, IZoomGetter>(
                        srcGroup: obj.Zooms,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Zooms,
                        groupGetter: (m) => m.Zooms))
                    {
                        yield return item;
                    }
                    yield break;
                case "InstanceNamingRules":
                case "IInstanceNamingRulesGetter":
                case "IInstanceNamingRules":
                case "IInstanceNamingRulesInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, InstanceNamingRules, IInstanceNamingRulesGetter>(
                        srcGroup: obj.InstanceNamingRules,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.InstanceNamingRules,
                        groupGetter: (m) => m.InstanceNamingRules))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundKeywordMapping":
                case "ISoundKeywordMappingGetter":
                case "ISoundKeywordMapping":
                case "ISoundKeywordMappingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, SoundKeywordMapping, ISoundKeywordMappingGetter>(
                        srcGroup: obj.SoundKeywordMappings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoundKeywordMappings,
                        groupGetter: (m) => m.SoundKeywordMappings))
                    {
                        yield return item;
                    }
                    yield break;
                case "AudioEffectChain":
                case "IAudioEffectChainGetter":
                case "IAudioEffectChain":
                case "IAudioEffectChainInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AudioEffectChain, IAudioEffectChainGetter>(
                        srcGroup: obj.AudioEffectChains,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AudioEffectChains,
                        groupGetter: (m) => m.AudioEffectChains))
                    {
                        yield return item;
                    }
                    yield break;
                case "SceneCollection":
                case "ISceneCollectionGetter":
                case "ISceneCollection":
                case "ISceneCollectionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, SceneCollection, ISceneCollectionGetter>(
                        srcGroup: obj.SceneCollections,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SceneCollections,
                        groupGetter: (m) => m.SceneCollections))
                    {
                        yield return item;
                    }
                    yield break;
                case "AttractionRule":
                case "IAttractionRuleGetter":
                case "IAttractionRule":
                case "IAttractionRuleInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AttractionRule, IAttractionRuleGetter>(
                        srcGroup: obj.AttractionRules,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AttractionRules,
                        groupGetter: (m) => m.AttractionRules))
                    {
                        yield return item;
                    }
                    yield break;
                case "AudioCategorySnapshot":
                case "IAudioCategorySnapshotGetter":
                case "IAudioCategorySnapshot":
                case "IAudioCategorySnapshotInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AudioCategorySnapshot, IAudioCategorySnapshotGetter>(
                        srcGroup: obj.AudioCategorySnapshots,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AudioCategorySnapshots,
                        groupGetter: (m) => m.AudioCategorySnapshots))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimationSoundTagSet":
                case "IAnimationSoundTagSetGetter":
                case "IAnimationSoundTagSet":
                case "IAnimationSoundTagSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, AnimationSoundTagSet, IAnimationSoundTagSetGetter>(
                        srcGroup: obj.AnimationSoundTagSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AnimationSoundTagSets,
                        groupGetter: (m) => m.AnimationSoundTagSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMeshObstacleManager":
                case "INavigationMeshObstacleManagerGetter":
                case "INavigationMeshObstacleManager":
                case "INavigationMeshObstacleManagerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, NavigationMeshObstacleManager, INavigationMeshObstacleManagerGetter>(
                        srcGroup: obj.NavigationMeshObstacleManagers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.NavigationMeshObstacleManagers,
                        groupGetter: (m) => m.NavigationMeshObstacleManagers))
                    {
                        yield return item;
                    }
                    yield break;
                case "LensFlare":
                case "ILensFlareGetter":
                case "ILensFlare":
                case "ILensFlareInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, LensFlare, ILensFlareGetter>(
                        srcGroup: obj.LensFlares,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LensFlares,
                        groupGetter: (m) => m.LensFlares))
                    {
                        yield return item;
                    }
                    yield break;
                case "GodRays":
                case "IGodRaysGetter":
                case "IGodRays":
                case "IGodRaysInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, GodRays, IGodRaysGetter>(
                        srcGroup: obj.GodRays,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GodRays,
                        groupGetter: (m) => m.GodRays))
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectVisibilityManager":
                case "IObjectVisibilityManagerGetter":
                case "IObjectVisibilityManager":
                case "IObjectVisibilityManagerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout4Mod, IFallout4ModGetter, ObjectVisibilityManager, IObjectVisibilityManagerGetter>(
                        srcGroup: obj.ObjectVisibilityManagers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ObjectVisibilityManagers,
                        groupGetter: (m) => m.ObjectVisibilityManagers))
                    {
                        yield return item;
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "NavigationMesh":
                case "INavigationMeshGetter":
                case "INavigationMesh":
                case "INavigationMeshInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    foreach (var groupItem in obj.Quests)
                    {
                        foreach (var item in QuestCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(linkCache.Resolve<IQuestGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Quests.DuplicateInAsNewRecord(linkCache.Resolve<IQuestGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var groupItem in obj.Quests)
                    {
                        foreach (var item in QuestCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(linkCache.Resolve<IQuestGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Quests.DuplicateInAsNewRecord(linkCache.Resolve<IQuestGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var groupItem in obj.Quests)
                    {
                        foreach (var item in QuestCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(linkCache.Resolve<IQuestGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Quests.DuplicateInAsNewRecord(linkCache.Resolve<IQuestGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    foreach (var groupItem in obj.Quests)
                    {
                        foreach (var item in QuestCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(linkCache.Resolve<IQuestGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Quests.DuplicateInAsNewRecord(linkCache.Resolve<IQuestGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceContextsFor<IFallout4ModGetter, IFallout4Mod, IFallout4ModGetter>(
                        GameCategory.Fallout4,
                        obj,
                        type,
                        linkCache,
                        out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IFallout4ModGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            if (obj.Cells is IAssetLinkContainerGetter CellslinkCont)
            {
                foreach (var item in CellslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Worldspaces is IAssetLinkContainerGetter WorldspaceslinkCont)
            {
                foreach (var item in WorldspaceslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class Fallout4ModSetterTranslationCommon
    {
        public static readonly Fallout4ModSetterTranslationCommon Instance = new Fallout4ModSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFallout4Mod item,
            IFallout4ModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyIn(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyIn(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Keywords);
                try
                {
                    item.Keywords.DeepCopyIn(
                        rhs: rhs.Keywords,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Keywords));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LocationReferenceTypes);
                try
                {
                    item.LocationReferenceTypes.DeepCopyIn(
                        rhs: rhs.LocationReferenceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LocationReferenceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Actions) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Actions);
                try
                {
                    item.Actions.DeepCopyIn(
                        rhs: rhs.Actions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Actions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Transforms) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Transforms);
                try
                {
                    item.Transforms.DeepCopyIn(
                        rhs: rhs.Transforms,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Transforms));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Components);
                try
                {
                    item.Components.DeepCopyIn(
                        rhs: rhs.Components,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Components));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.TextureSets) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.TextureSets);
                try
                {
                    item.TextureSets.DeepCopyIn(
                        rhs: rhs.TextureSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.TextureSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Globals) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Globals);
                try
                {
                    item.Globals.DeepCopyIn(
                        rhs: rhs.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Globals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DamageTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.DamageTypes);
                try
                {
                    item.DamageTypes.DeepCopyIn(
                        rhs: rhs.DamageTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.DamageTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Classes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Classes);
                try
                {
                    item.Classes.DeepCopyIn(
                        rhs: rhs.Classes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Classes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Factions);
                try
                {
                    item.Factions.DeepCopyIn(
                        rhs: rhs.Factions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Factions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.HeadParts);
                try
                {
                    item.HeadParts.DeepCopyIn(
                        rhs: rhs.HeadParts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.HeadParts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Races) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Races);
                try
                {
                    item.Races.DeepCopyIn(
                        rhs: rhs.Races,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Races));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundMarkers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.SoundMarkers);
                try
                {
                    item.SoundMarkers.DeepCopyIn(
                        rhs: rhs.SoundMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.SoundMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AcousticSpaces) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AcousticSpaces);
                try
                {
                    item.AcousticSpaces.DeepCopyIn(
                        rhs: rhs.AcousticSpaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AcousticSpaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MagicEffects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MagicEffects);
                try
                {
                    item.MagicEffects.DeepCopyIn(
                        rhs: rhs.MagicEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MagicEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LandscapeTextures) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LandscapeTextures);
                try
                {
                    item.LandscapeTextures.DeepCopyIn(
                        rhs: rhs.LandscapeTextures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LandscapeTextures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ObjectEffects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ObjectEffects);
                try
                {
                    item.ObjectEffects.DeepCopyIn(
                        rhs: rhs.ObjectEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ObjectEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Spells);
                try
                {
                    item.Spells.DeepCopyIn(
                        rhs: rhs.Spells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Spells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Activators) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Activators);
                try
                {
                    item.Activators.DeepCopyIn(
                        rhs: rhs.Activators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Activators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.TalkingActivators) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.TalkingActivators);
                try
                {
                    item.TalkingActivators.DeepCopyIn(
                        rhs: rhs.TalkingActivators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.TalkingActivators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Armors) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Armors);
                try
                {
                    item.Armors.DeepCopyIn(
                        rhs: rhs.Armors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Armors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Books) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Books);
                try
                {
                    item.Books.DeepCopyIn(
                        rhs: rhs.Books,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Books));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Containers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Containers);
                try
                {
                    item.Containers.DeepCopyIn(
                        rhs: rhs.Containers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Containers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Doors) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Doors);
                try
                {
                    item.Doors.DeepCopyIn(
                        rhs: rhs.Doors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Doors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Ingredients) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Ingredients);
                try
                {
                    item.Ingredients.DeepCopyIn(
                        rhs: rhs.Ingredients,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Ingredients));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Lights) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Lights);
                try
                {
                    item.Lights.DeepCopyIn(
                        rhs: rhs.Lights,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Lights));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MiscItems) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MiscItems);
                try
                {
                    item.MiscItems.DeepCopyIn(
                        rhs: rhs.MiscItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MiscItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Statics) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Statics);
                try
                {
                    item.Statics.DeepCopyIn(
                        rhs: rhs.Statics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Statics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.StaticCollections) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.StaticCollections);
                try
                {
                    item.StaticCollections.DeepCopyIn(
                        rhs: rhs.StaticCollections,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.StaticCollections));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MovableStatics) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MovableStatics);
                try
                {
                    item.MovableStatics.DeepCopyIn(
                        rhs: rhs.MovableStatics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MovableStatics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Grasses);
                try
                {
                    item.Grasses.DeepCopyIn(
                        rhs: rhs.Grasses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Grasses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Trees) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Trees);
                try
                {
                    item.Trees.DeepCopyIn(
                        rhs: rhs.Trees,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Trees));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Florae) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Florae);
                try
                {
                    item.Florae.DeepCopyIn(
                        rhs: rhs.Florae,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Florae));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Furniture) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Furniture);
                try
                {
                    item.Furniture.DeepCopyIn(
                        rhs: rhs.Furniture,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Furniture));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Weapons) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Weapons);
                try
                {
                    item.Weapons.DeepCopyIn(
                        rhs: rhs.Weapons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Weapons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Ammunitions) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Ammunitions);
                try
                {
                    item.Ammunitions.DeepCopyIn(
                        rhs: rhs.Ammunitions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Ammunitions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Npcs) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Npcs);
                try
                {
                    item.Npcs.DeepCopyIn(
                        rhs: rhs.Npcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Npcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LeveledNpcs) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LeveledNpcs);
                try
                {
                    item.LeveledNpcs.DeepCopyIn(
                        rhs: rhs.LeveledNpcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LeveledNpcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Keys) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Keys);
                try
                {
                    item.Keys.DeepCopyIn(
                        rhs: rhs.Keys,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Keys));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Ingestibles) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Ingestibles);
                try
                {
                    item.Ingestibles.DeepCopyIn(
                        rhs: rhs.Ingestibles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Ingestibles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.IdleMarkers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.IdleMarkers);
                try
                {
                    item.IdleMarkers.DeepCopyIn(
                        rhs: rhs.IdleMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.IdleMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Holotapes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Holotapes);
                try
                {
                    item.Holotapes.DeepCopyIn(
                        rhs: rhs.Holotapes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Holotapes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Projectiles) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Projectiles);
                try
                {
                    item.Projectiles.DeepCopyIn(
                        rhs: rhs.Projectiles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Projectiles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Hazards) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Hazards);
                try
                {
                    item.Hazards.DeepCopyIn(
                        rhs: rhs.Hazards,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Hazards));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.BendableSplines) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.BendableSplines);
                try
                {
                    item.BendableSplines.DeepCopyIn(
                        rhs: rhs.BendableSplines,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.BendableSplines));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Terminals) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Terminals);
                try
                {
                    item.Terminals.DeepCopyIn(
                        rhs: rhs.Terminals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Terminals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LeveledItems) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LeveledItems);
                try
                {
                    item.LeveledItems.DeepCopyIn(
                        rhs: rhs.LeveledItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LeveledItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Weather) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Weather);
                try
                {
                    item.Weather.DeepCopyIn(
                        rhs: rhs.Weather,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Weather));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Climates) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Climates);
                try
                {
                    item.Climates.DeepCopyIn(
                        rhs: rhs.Climates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Climates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ShaderParticleGeometries) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ShaderParticleGeometries);
                try
                {
                    item.ShaderParticleGeometries.DeepCopyIn(
                        rhs: rhs.ShaderParticleGeometries,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ShaderParticleGeometries));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.VisualEffects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.VisualEffects);
                try
                {
                    item.VisualEffects.DeepCopyIn(
                        rhs: rhs.VisualEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.VisualEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Regions);
                try
                {
                    item.Regions.DeepCopyIn(
                        rhs: rhs.Regions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Regions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.NavigationMeshInfoMaps) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.NavigationMeshInfoMaps);
                try
                {
                    item.NavigationMeshInfoMaps.DeepCopyIn(
                        rhs: rhs.NavigationMeshInfoMaps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.NavigationMeshInfoMaps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Cells) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Cells);
                try
                {
                    item.Cells.DeepCopyIn(
                        rhs: rhs.Cells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Cells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Worldspaces) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Worldspaces);
                try
                {
                    item.Worldspaces.DeepCopyIn(
                        rhs: rhs.Worldspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Worldspaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Quests) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Quests);
                try
                {
                    item.Quests.DeepCopyIn(
                        rhs: rhs.Quests,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Quests));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.IdleAnimations) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.IdleAnimations);
                try
                {
                    item.IdleAnimations.DeepCopyIn(
                        rhs: rhs.IdleAnimations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.IdleAnimations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Packages) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Packages);
                try
                {
                    item.Packages.DeepCopyIn(
                        rhs: rhs.Packages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Packages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.CombatStyles) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.CombatStyles);
                try
                {
                    item.CombatStyles.DeepCopyIn(
                        rhs: rhs.CombatStyles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.CombatStyles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LoadScreens) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LoadScreens);
                try
                {
                    item.LoadScreens.DeepCopyIn(
                        rhs: rhs.LoadScreens,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LoadScreens));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AnimatedObjects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AnimatedObjects);
                try
                {
                    item.AnimatedObjects.DeepCopyIn(
                        rhs: rhs.AnimatedObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AnimatedObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Waters) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Waters);
                try
                {
                    item.Waters.DeepCopyIn(
                        rhs: rhs.Waters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Waters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.EffectShaders) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.EffectShaders);
                try
                {
                    item.EffectShaders.DeepCopyIn(
                        rhs: rhs.EffectShaders,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.EffectShaders));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Explosions) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Explosions);
                try
                {
                    item.Explosions.DeepCopyIn(
                        rhs: rhs.Explosions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Explosions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Debris) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Debris);
                try
                {
                    item.Debris.DeepCopyIn(
                        rhs: rhs.Debris,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Debris));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ImageSpaces) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ImageSpaces);
                try
                {
                    item.ImageSpaces.DeepCopyIn(
                        rhs: rhs.ImageSpaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ImageSpaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ImageSpaceAdapters) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ImageSpaceAdapters);
                try
                {
                    item.ImageSpaceAdapters.DeepCopyIn(
                        rhs: rhs.ImageSpaceAdapters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ImageSpaceAdapters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.FormLists) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.FormLists);
                try
                {
                    item.FormLists.DeepCopyIn(
                        rhs: rhs.FormLists,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.FormLists));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Perks) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Perks);
                try
                {
                    item.Perks.DeepCopyIn(
                        rhs: rhs.Perks,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Perks));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.BodyParts) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.BodyParts);
                try
                {
                    item.BodyParts.DeepCopyIn(
                        rhs: rhs.BodyParts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.BodyParts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AddonNodes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AddonNodes);
                try
                {
                    item.AddonNodes.DeepCopyIn(
                        rhs: rhs.AddonNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AddonNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ActorValueInformation) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ActorValueInformation);
                try
                {
                    item.ActorValueInformation.DeepCopyIn(
                        rhs: rhs.ActorValueInformation,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ActorValueInformation));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.CameraShots) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.CameraShots);
                try
                {
                    item.CameraShots.DeepCopyIn(
                        rhs: rhs.CameraShots,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.CameraShots));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.CameraPaths) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.CameraPaths);
                try
                {
                    item.CameraPaths.DeepCopyIn(
                        rhs: rhs.CameraPaths,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.CameraPaths));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.VoiceTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.VoiceTypes);
                try
                {
                    item.VoiceTypes.DeepCopyIn(
                        rhs: rhs.VoiceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.VoiceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MaterialTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MaterialTypes);
                try
                {
                    item.MaterialTypes.DeepCopyIn(
                        rhs: rhs.MaterialTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MaterialTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Impacts) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Impacts);
                try
                {
                    item.Impacts.DeepCopyIn(
                        rhs: rhs.Impacts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Impacts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ImpactDataSets) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ImpactDataSets);
                try
                {
                    item.ImpactDataSets.DeepCopyIn(
                        rhs: rhs.ImpactDataSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ImpactDataSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ArmorAddons) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ArmorAddons);
                try
                {
                    item.ArmorAddons.DeepCopyIn(
                        rhs: rhs.ArmorAddons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ArmorAddons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.EncounterZones) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.EncounterZones);
                try
                {
                    item.EncounterZones.DeepCopyIn(
                        rhs: rhs.EncounterZones,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.EncounterZones));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Locations) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Locations);
                try
                {
                    item.Locations.DeepCopyIn(
                        rhs: rhs.Locations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Locations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Messages) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Messages);
                try
                {
                    item.Messages.DeepCopyIn(
                        rhs: rhs.Messages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Messages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DefaultObjectManagers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.DefaultObjectManagers);
                try
                {
                    item.DefaultObjectManagers.DeepCopyIn(
                        rhs: rhs.DefaultObjectManagers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.DefaultObjectManagers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DefaultObjects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.DefaultObjects);
                try
                {
                    item.DefaultObjects.DeepCopyIn(
                        rhs: rhs.DefaultObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.DefaultObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LightingTemplates) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LightingTemplates);
                try
                {
                    item.LightingTemplates.DeepCopyIn(
                        rhs: rhs.LightingTemplates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LightingTemplates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MusicTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MusicTypes);
                try
                {
                    item.MusicTypes.DeepCopyIn(
                        rhs: rhs.MusicTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MusicTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Footsteps) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Footsteps);
                try
                {
                    item.Footsteps.DeepCopyIn(
                        rhs: rhs.Footsteps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Footsteps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.FootstepSets) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.FootstepSets);
                try
                {
                    item.FootstepSets.DeepCopyIn(
                        rhs: rhs.FootstepSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.FootstepSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.StoryManagerBranchNodes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.StoryManagerBranchNodes);
                try
                {
                    item.StoryManagerBranchNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerBranchNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.StoryManagerBranchNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.StoryManagerQuestNodes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.StoryManagerQuestNodes);
                try
                {
                    item.StoryManagerQuestNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerQuestNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.StoryManagerQuestNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.StoryManagerEventNodes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.StoryManagerEventNodes);
                try
                {
                    item.StoryManagerEventNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerEventNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.StoryManagerEventNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MusicTracks) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MusicTracks);
                try
                {
                    item.MusicTracks.DeepCopyIn(
                        rhs: rhs.MusicTracks,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MusicTracks));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.DialogViews) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.DialogViews);
                try
                {
                    item.DialogViews.DeepCopyIn(
                        rhs: rhs.DialogViews,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.DialogViews));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.EquipTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.EquipTypes);
                try
                {
                    item.EquipTypes.DeepCopyIn(
                        rhs: rhs.EquipTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.EquipTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Relationships) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Relationships);
                try
                {
                    item.Relationships.DeepCopyIn(
                        rhs: rhs.Relationships,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Relationships));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AssociationTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AssociationTypes);
                try
                {
                    item.AssociationTypes.DeepCopyIn(
                        rhs: rhs.AssociationTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AssociationTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Outfits) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Outfits);
                try
                {
                    item.Outfits.DeepCopyIn(
                        rhs: rhs.Outfits,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Outfits));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ArtObjects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ArtObjects);
                try
                {
                    item.ArtObjects.DeepCopyIn(
                        rhs: rhs.ArtObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ArtObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MaterialObjects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MaterialObjects);
                try
                {
                    item.MaterialObjects.DeepCopyIn(
                        rhs: rhs.MaterialObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MaterialObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MovementTypes) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MovementTypes);
                try
                {
                    item.MovementTypes.DeepCopyIn(
                        rhs: rhs.MovementTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MovementTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundDescriptors) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.SoundDescriptors);
                try
                {
                    item.SoundDescriptors.DeepCopyIn(
                        rhs: rhs.SoundDescriptors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.SoundDescriptors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundCategories) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.SoundCategories);
                try
                {
                    item.SoundCategories.DeepCopyIn(
                        rhs: rhs.SoundCategories,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.SoundCategories));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundOutputModels) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.SoundOutputModels);
                try
                {
                    item.SoundOutputModels.DeepCopyIn(
                        rhs: rhs.SoundOutputModels,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.SoundOutputModels));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.CollisionLayers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.CollisionLayers);
                try
                {
                    item.CollisionLayers.DeepCopyIn(
                        rhs: rhs.CollisionLayers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.CollisionLayers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Colors) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Colors);
                try
                {
                    item.Colors.DeepCopyIn(
                        rhs: rhs.Colors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Colors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ReverbParameters) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ReverbParameters);
                try
                {
                    item.ReverbParameters.DeepCopyIn(
                        rhs: rhs.ReverbParameters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ReverbParameters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.PackIns) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.PackIns);
                try
                {
                    item.PackIns.DeepCopyIn(
                        rhs: rhs.PackIns,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.PackIns));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ReferenceGroups) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ReferenceGroups);
                try
                {
                    item.ReferenceGroups.DeepCopyIn(
                        rhs: rhs.ReferenceGroups,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ReferenceGroups));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AimModels) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AimModels);
                try
                {
                    item.AimModels.DeepCopyIn(
                        rhs: rhs.AimModels,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AimModels));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Layers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Layers);
                try
                {
                    item.Layers.DeepCopyIn(
                        rhs: rhs.Layers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Layers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ConstructibleObjects) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ConstructibleObjects);
                try
                {
                    item.ConstructibleObjects.DeepCopyIn(
                        rhs: rhs.ConstructibleObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ConstructibleObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ObjectModifications) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ObjectModifications);
                try
                {
                    item.ObjectModifications.DeepCopyIn(
                        rhs: rhs.ObjectModifications,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ObjectModifications));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.MaterialSwaps) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.MaterialSwaps);
                try
                {
                    item.MaterialSwaps.DeepCopyIn(
                        rhs: rhs.MaterialSwaps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.MaterialSwaps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.Zooms) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.Zooms);
                try
                {
                    item.Zooms.DeepCopyIn(
                        rhs: rhs.Zooms,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.Zooms));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.InstanceNamingRules) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.InstanceNamingRules);
                try
                {
                    item.InstanceNamingRules.DeepCopyIn(
                        rhs: rhs.InstanceNamingRules,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.InstanceNamingRules));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SoundKeywordMappings) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.SoundKeywordMappings);
                try
                {
                    item.SoundKeywordMappings.DeepCopyIn(
                        rhs: rhs.SoundKeywordMappings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.SoundKeywordMappings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AudioEffectChains) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AudioEffectChains);
                try
                {
                    item.AudioEffectChains.DeepCopyIn(
                        rhs: rhs.AudioEffectChains,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AudioEffectChains));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.SceneCollections) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.SceneCollections);
                try
                {
                    item.SceneCollections.DeepCopyIn(
                        rhs: rhs.SceneCollections,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.SceneCollections));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AttractionRules) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AttractionRules);
                try
                {
                    item.AttractionRules.DeepCopyIn(
                        rhs: rhs.AttractionRules,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AttractionRules));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AudioCategorySnapshots) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AudioCategorySnapshots);
                try
                {
                    item.AudioCategorySnapshots.DeepCopyIn(
                        rhs: rhs.AudioCategorySnapshots,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AudioCategorySnapshots));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.AnimationSoundTagSets) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.AnimationSoundTagSets);
                try
                {
                    item.AnimationSoundTagSets.DeepCopyIn(
                        rhs: rhs.AnimationSoundTagSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.AnimationSoundTagSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.NavigationMeshObstacleManagers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.NavigationMeshObstacleManagers);
                try
                {
                    item.NavigationMeshObstacleManagers.DeepCopyIn(
                        rhs: rhs.NavigationMeshObstacleManagers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.NavigationMeshObstacleManagers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.LensFlares) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.LensFlares);
                try
                {
                    item.LensFlares.DeepCopyIn(
                        rhs: rhs.LensFlares,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.LensFlares));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.GodRays) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.GodRays);
                try
                {
                    item.GodRays.DeepCopyIn(
                        rhs: rhs.GodRays,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.GodRays));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4Mod_FieldIndex.ObjectVisibilityManagers) ?? true))
            {
                errorMask?.PushIndex((int)Fallout4Mod_FieldIndex.ObjectVisibilityManagers);
                try
                {
                    item.ObjectVisibilityManagers.DeepCopyIn(
                        rhs: rhs.ObjectVisibilityManagers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout4Mod_FieldIndex.ObjectVisibilityManagers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFallout4Mod item,
            IFallout4ModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public partial Fallout4Mod DeepCopyGetNew(IFallout4ModGetter item);
        public Fallout4Mod DeepCopy(
            IFallout4ModGetter item,
            Fallout4Mod.TranslationMask? copyMask = null)
        {
            var ret = DeepCopyGetNew(item);
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Fallout4Mod DeepCopy(
            IFallout4ModGetter item,
            out Fallout4Mod.ErrorMask errorMask,
            Fallout4Mod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            var ret = DeepCopyGetNew(item);
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Fallout4Mod.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Fallout4Mod DeepCopy(
            IFallout4ModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            var ret = DeepCopyGetNew(item);
            ((Fallout4ModSetterTranslationCommon)((IFallout4ModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Fallout4Mod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Fallout4Mod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Fallout4Mod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => Fallout4ModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return Fallout4ModSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => Fallout4ModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFallout4ModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IFallout4ModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IFallout4ModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Mutagen
namespace Mutagen.Bethesda.Fallout4
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool Keywords;
        public bool LocationReferenceTypes;
        public bool Actions;
        public bool Transforms;
        public bool Components;
        public bool TextureSets;
        public bool Globals;
        public bool DamageTypes;
        public bool Classes;
        public bool Factions;
        public bool HeadParts;
        public bool Races;
        public bool SoundMarkers;
        public bool AcousticSpaces;
        public bool MagicEffects;
        public bool LandscapeTextures;
        public bool ObjectEffects;
        public bool Spells;
        public bool Activators;
        public bool TalkingActivators;
        public bool Armors;
        public bool Books;
        public bool Containers;
        public bool Doors;
        public bool Ingredients;
        public bool Lights;
        public bool MiscItems;
        public bool Statics;
        public bool StaticCollections;
        public bool MovableStatics;
        public bool Grasses;
        public bool Trees;
        public bool Florae;
        public bool Furniture;
        public bool Weapons;
        public bool Ammunitions;
        public bool Npcs;
        public bool LeveledNpcs;
        public bool Keys;
        public bool Ingestibles;
        public bool IdleMarkers;
        public bool Holotapes;
        public bool Projectiles;
        public bool Hazards;
        public bool BendableSplines;
        public bool Terminals;
        public bool LeveledItems;
        public bool Weather;
        public bool Climates;
        public bool ShaderParticleGeometries;
        public bool VisualEffects;
        public bool Regions;
        public bool NavigationMeshInfoMaps;
        public bool Cells;
        public bool Worldspaces;
        public bool Quests;
        public bool IdleAnimations;
        public bool Packages;
        public bool CombatStyles;
        public bool LoadScreens;
        public bool AnimatedObjects;
        public bool Waters;
        public bool EffectShaders;
        public bool Explosions;
        public bool Debris;
        public bool ImageSpaces;
        public bool ImageSpaceAdapters;
        public bool FormLists;
        public bool Perks;
        public bool BodyParts;
        public bool AddonNodes;
        public bool ActorValueInformation;
        public bool CameraShots;
        public bool CameraPaths;
        public bool VoiceTypes;
        public bool MaterialTypes;
        public bool Impacts;
        public bool ImpactDataSets;
        public bool ArmorAddons;
        public bool EncounterZones;
        public bool Locations;
        public bool Messages;
        public bool DefaultObjectManagers;
        public bool DefaultObjects;
        public bool LightingTemplates;
        public bool MusicTypes;
        public bool Footsteps;
        public bool FootstepSets;
        public bool StoryManagerBranchNodes;
        public bool StoryManagerQuestNodes;
        public bool StoryManagerEventNodes;
        public bool MusicTracks;
        public bool DialogViews;
        public bool EquipTypes;
        public bool Relationships;
        public bool AssociationTypes;
        public bool Outfits;
        public bool ArtObjects;
        public bool MaterialObjects;
        public bool MovementTypes;
        public bool SoundDescriptors;
        public bool SoundCategories;
        public bool SoundOutputModels;
        public bool CollisionLayers;
        public bool Colors;
        public bool ReverbParameters;
        public bool PackIns;
        public bool ReferenceGroups;
        public bool AimModels;
        public bool Layers;
        public bool ConstructibleObjects;
        public bool ObjectModifications;
        public bool MaterialSwaps;
        public bool Zooms;
        public bool InstanceNamingRules;
        public bool SoundKeywordMappings;
        public bool AudioEffectChains;
        public bool SceneCollections;
        public bool AttractionRules;
        public bool AudioCategorySnapshots;
        public bool AnimationSoundTagSets;
        public bool NavigationMeshObstacleManagers;
        public bool LensFlares;
        public bool GodRays;
        public bool ObjectVisibilityManagers;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Keywords = defaultValue;
            LocationReferenceTypes = defaultValue;
            Actions = defaultValue;
            Transforms = defaultValue;
            Components = defaultValue;
            TextureSets = defaultValue;
            Globals = defaultValue;
            DamageTypes = defaultValue;
            Classes = defaultValue;
            Factions = defaultValue;
            HeadParts = defaultValue;
            Races = defaultValue;
            SoundMarkers = defaultValue;
            AcousticSpaces = defaultValue;
            MagicEffects = defaultValue;
            LandscapeTextures = defaultValue;
            ObjectEffects = defaultValue;
            Spells = defaultValue;
            Activators = defaultValue;
            TalkingActivators = defaultValue;
            Armors = defaultValue;
            Books = defaultValue;
            Containers = defaultValue;
            Doors = defaultValue;
            Ingredients = defaultValue;
            Lights = defaultValue;
            MiscItems = defaultValue;
            Statics = defaultValue;
            StaticCollections = defaultValue;
            MovableStatics = defaultValue;
            Grasses = defaultValue;
            Trees = defaultValue;
            Florae = defaultValue;
            Furniture = defaultValue;
            Weapons = defaultValue;
            Ammunitions = defaultValue;
            Npcs = defaultValue;
            LeveledNpcs = defaultValue;
            Keys = defaultValue;
            Ingestibles = defaultValue;
            IdleMarkers = defaultValue;
            Holotapes = defaultValue;
            Projectiles = defaultValue;
            Hazards = defaultValue;
            BendableSplines = defaultValue;
            Terminals = defaultValue;
            LeveledItems = defaultValue;
            Weather = defaultValue;
            Climates = defaultValue;
            ShaderParticleGeometries = defaultValue;
            VisualEffects = defaultValue;
            Regions = defaultValue;
            NavigationMeshInfoMaps = defaultValue;
            Cells = defaultValue;
            Worldspaces = defaultValue;
            Quests = defaultValue;
            IdleAnimations = defaultValue;
            Packages = defaultValue;
            CombatStyles = defaultValue;
            LoadScreens = defaultValue;
            AnimatedObjects = defaultValue;
            Waters = defaultValue;
            EffectShaders = defaultValue;
            Explosions = defaultValue;
            Debris = defaultValue;
            ImageSpaces = defaultValue;
            ImageSpaceAdapters = defaultValue;
            FormLists = defaultValue;
            Perks = defaultValue;
            BodyParts = defaultValue;
            AddonNodes = defaultValue;
            ActorValueInformation = defaultValue;
            CameraShots = defaultValue;
            CameraPaths = defaultValue;
            VoiceTypes = defaultValue;
            MaterialTypes = defaultValue;
            Impacts = defaultValue;
            ImpactDataSets = defaultValue;
            ArmorAddons = defaultValue;
            EncounterZones = defaultValue;
            Locations = defaultValue;
            Messages = defaultValue;
            DefaultObjectManagers = defaultValue;
            DefaultObjects = defaultValue;
            LightingTemplates = defaultValue;
            MusicTypes = defaultValue;
            Footsteps = defaultValue;
            FootstepSets = defaultValue;
            StoryManagerBranchNodes = defaultValue;
            StoryManagerQuestNodes = defaultValue;
            StoryManagerEventNodes = defaultValue;
            MusicTracks = defaultValue;
            DialogViews = defaultValue;
            EquipTypes = defaultValue;
            Relationships = defaultValue;
            AssociationTypes = defaultValue;
            Outfits = defaultValue;
            ArtObjects = defaultValue;
            MaterialObjects = defaultValue;
            MovementTypes = defaultValue;
            SoundDescriptors = defaultValue;
            SoundCategories = defaultValue;
            SoundOutputModels = defaultValue;
            CollisionLayers = defaultValue;
            Colors = defaultValue;
            ReverbParameters = defaultValue;
            PackIns = defaultValue;
            ReferenceGroups = defaultValue;
            AimModels = defaultValue;
            Layers = defaultValue;
            ConstructibleObjects = defaultValue;
            ObjectModifications = defaultValue;
            MaterialSwaps = defaultValue;
            Zooms = defaultValue;
            InstanceNamingRules = defaultValue;
            SoundKeywordMappings = defaultValue;
            AudioEffectChains = defaultValue;
            SceneCollections = defaultValue;
            AttractionRules = defaultValue;
            AudioCategorySnapshots = defaultValue;
            AnimationSoundTagSets = defaultValue;
            NavigationMeshObstacleManagers = defaultValue;
            LensFlares = defaultValue;
            GodRays = defaultValue;
            ObjectVisibilityManagers = defaultValue;
        }
    }

    public interface IFallout4ModDisposableGetter : IFallout4ModGetter, IModDisposeGetter
    {
    }

    /// <summary>
    /// Different game release versions a Fallout4 mod can have
    /// </summary>
    public enum Fallout4Release
    {
        Fallout4 = 4,
        Fallout4VR = 9
    }

    public static class Fallout4ReleaseExt
    {
        public static GameRelease ToGameRelease(this Fallout4Release release)
        {
            return release switch
            {
                Fallout4Release.Fallout4 => GameRelease.Fallout4,
                Fallout4Release.Fallout4VR => GameRelease.Fallout4VR,
                _ => throw new ArgumentException()
            };
        }

        public static Fallout4Release ToFallout4Release(this GameRelease release)
        {
            return release switch
            {
                GameRelease.Fallout4 => Fallout4Release.Fallout4,
                GameRelease.Fallout4VR => Fallout4Release.Fallout4VR,
                _ => throw new ArgumentException()
            };
        }
    }
}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class Fallout4Mod_Registration : IModRegistration
    {
        public GameCategory GameCategory => GameCategory.Fallout4;
    }

}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class Fallout4ModBinaryWriteTranslation
    {
        public static readonly Fallout4ModBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IFallout4ModGetter item,
            MutagenWriter writer,
            GroupMask? importMask,
            TypedWriteParams translationParams = default)
        {
            if (importMask?.GameSettings ?? true)
            {
                var GameSettingsItem = item.GameSettings;
                if (GameSettingsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)GameSettingsItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: GameSettingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Keywords ?? true)
            {
                var KeywordsItem = item.Keywords;
                if (KeywordsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)KeywordsItem).BinaryWriteTranslator).Write<IKeywordGetter>(
                        item: KeywordsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LocationReferenceTypes ?? true)
            {
                var LocationReferenceTypesItem = item.LocationReferenceTypes;
                if (LocationReferenceTypesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)LocationReferenceTypesItem).BinaryWriteTranslator).Write<ILocationReferenceTypeGetter>(
                        item: LocationReferenceTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Actions ?? true)
            {
                var ActionsItem = item.Actions;
                if (ActionsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ActionsItem).BinaryWriteTranslator).Write<IActionRecordGetter>(
                        item: ActionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Transforms ?? true)
            {
                var TransformsItem = item.Transforms;
                if (TransformsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)TransformsItem).BinaryWriteTranslator).Write<ITransformGetter>(
                        item: TransformsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Components ?? true)
            {
                var ComponentsItem = item.Components;
                if (ComponentsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ComponentsItem).BinaryWriteTranslator).Write<IComponentGetter>(
                        item: ComponentsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.TextureSets ?? true)
            {
                var TextureSetsItem = item.TextureSets;
                if (TextureSetsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)TextureSetsItem).BinaryWriteTranslator).Write<ITextureSetGetter>(
                        item: TextureSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Globals ?? true)
            {
                var GlobalsItem = item.Globals;
                if (GlobalsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)GlobalsItem).BinaryWriteTranslator).Write<IGlobalGetter>(
                        item: GlobalsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DamageTypes ?? true)
            {
                var DamageTypesItem = item.DamageTypes;
                if (DamageTypesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)DamageTypesItem).BinaryWriteTranslator).Write<IADamageTypeGetter>(
                        item: DamageTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Classes ?? true)
            {
                var ClassesItem = item.Classes;
                if (ClassesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ClassesItem).BinaryWriteTranslator).Write<IClassGetter>(
                        item: ClassesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Factions ?? true)
            {
                var FactionsItem = item.Factions;
                if (FactionsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)FactionsItem).BinaryWriteTranslator).Write<IFactionGetter>(
                        item: FactionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.HeadParts ?? true)
            {
                var HeadPartsItem = item.HeadParts;
                if (HeadPartsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)HeadPartsItem).BinaryWriteTranslator).Write<IHeadPartGetter>(
                        item: HeadPartsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Races ?? true)
            {
                var RacesItem = item.Races;
                if (RacesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)RacesItem).BinaryWriteTranslator).Write<IRaceGetter>(
                        item: RacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoundMarkers ?? true)
            {
                var SoundMarkersItem = item.SoundMarkers;
                if (SoundMarkersItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)SoundMarkersItem).BinaryWriteTranslator).Write<ISoundMarkerGetter>(
                        item: SoundMarkersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AcousticSpaces ?? true)
            {
                var AcousticSpacesItem = item.AcousticSpaces;
                if (AcousticSpacesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)AcousticSpacesItem).BinaryWriteTranslator).Write<IAcousticSpaceGetter>(
                        item: AcousticSpacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MagicEffects ?? true)
            {
                var MagicEffectsItem = item.MagicEffects;
                if (MagicEffectsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)MagicEffectsItem).BinaryWriteTranslator).Write<IMagicEffectGetter>(
                        item: MagicEffectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LandscapeTextures ?? true)
            {
                var LandscapeTexturesItem = item.LandscapeTextures;
                if (LandscapeTexturesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)LandscapeTexturesItem).BinaryWriteTranslator).Write<ILandscapeTextureGetter>(
                        item: LandscapeTexturesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ObjectEffects ?? true)
            {
                var ObjectEffectsItem = item.ObjectEffects;
                if (ObjectEffectsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ObjectEffectsItem).BinaryWriteTranslator).Write<IObjectEffectGetter>(
                        item: ObjectEffectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Spells ?? true)
            {
                var SpellsItem = item.Spells;
                if (SpellsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)SpellsItem).BinaryWriteTranslator).Write<ISpellGetter>(
                        item: SpellsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Activators ?? true)
            {
                var ActivatorsItem = item.Activators;
                if (ActivatorsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ActivatorsItem).BinaryWriteTranslator).Write<IActivatorGetter>(
                        item: ActivatorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.TalkingActivators ?? true)
            {
                var TalkingActivatorsItem = item.TalkingActivators;
                if (TalkingActivatorsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)TalkingActivatorsItem).BinaryWriteTranslator).Write<ITalkingActivatorGetter>(
                        item: TalkingActivatorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Armors ?? true)
            {
                var ArmorsItem = item.Armors;
                if (ArmorsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ArmorsItem).BinaryWriteTranslator).Write<IArmorGetter>(
                        item: ArmorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Books ?? true)
            {
                var BooksItem = item.Books;
                if (BooksItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)BooksItem).BinaryWriteTranslator).Write<IBookGetter>(
                        item: BooksItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Containers ?? true)
            {
                var ContainersItem = item.Containers;
                if (ContainersItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ContainersItem).BinaryWriteTranslator).Write<IContainerGetter>(
                        item: ContainersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Doors ?? true)
            {
                var DoorsItem = item.Doors;
                if (DoorsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)DoorsItem).BinaryWriteTranslator).Write<IDoorGetter>(
                        item: DoorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Ingredients ?? true)
            {
                var IngredientsItem = item.Ingredients;
                if (IngredientsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)IngredientsItem).BinaryWriteTranslator).Write<IIngredientGetter>(
                        item: IngredientsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Lights ?? true)
            {
                var LightsItem = item.Lights;
                if (LightsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)LightsItem).BinaryWriteTranslator).Write<ILightGetter>(
                        item: LightsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MiscItems ?? true)
            {
                var MiscItemsItem = item.MiscItems;
                if (MiscItemsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)MiscItemsItem).BinaryWriteTranslator).Write<IMiscItemGetter>(
                        item: MiscItemsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Statics ?? true)
            {
                var StaticsItem = item.Statics;
                if (StaticsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)StaticsItem).BinaryWriteTranslator).Write<IStaticGetter>(
                        item: StaticsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.StaticCollections ?? true)
            {
                var StaticCollectionsItem = item.StaticCollections;
                if (StaticCollectionsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)StaticCollectionsItem).BinaryWriteTranslator).Write<IStaticCollectionGetter>(
                        item: StaticCollectionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MovableStatics ?? true)
            {
                var MovableStaticsItem = item.MovableStatics;
                if (MovableStaticsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)MovableStaticsItem).BinaryWriteTranslator).Write<IMovableStaticGetter>(
                        item: MovableStaticsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Grasses ?? true)
            {
                var GrassesItem = item.Grasses;
                if (GrassesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)GrassesItem).BinaryWriteTranslator).Write<IGrassGetter>(
                        item: GrassesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Trees ?? true)
            {
                var TreesItem = item.Trees;
                if (TreesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)TreesItem).BinaryWriteTranslator).Write<ITreeGetter>(
                        item: TreesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Florae ?? true)
            {
                var FloraeItem = item.Florae;
                if (FloraeItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)FloraeItem).BinaryWriteTranslator).Write<IFloraGetter>(
                        item: FloraeItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Furniture ?? true)
            {
                var FurnitureItem = item.Furniture;
                if (FurnitureItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)FurnitureItem).BinaryWriteTranslator).Write<IFurnitureGetter>(
                        item: FurnitureItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Weapons ?? true)
            {
                var WeaponsItem = item.Weapons;
                if (WeaponsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)WeaponsItem).BinaryWriteTranslator).Write<IWeaponGetter>(
                        item: WeaponsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Ammunitions ?? true)
            {
                var AmmunitionsItem = item.Ammunitions;
                if (AmmunitionsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)AmmunitionsItem).BinaryWriteTranslator).Write<IAmmunitionGetter>(
                        item: AmmunitionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Npcs ?? true)
            {
                var NpcsItem = item.Npcs;
                if (NpcsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)NpcsItem).BinaryWriteTranslator).Write<INpcGetter>(
                        item: NpcsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledNpcs ?? true)
            {
                var LeveledNpcsItem = item.LeveledNpcs;
                if (LeveledNpcsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)LeveledNpcsItem).BinaryWriteTranslator).Write<ILeveledNpcGetter>(
                        item: LeveledNpcsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Keys ?? true)
            {
                var KeysItem = item.Keys;
                if (KeysItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)KeysItem).BinaryWriteTranslator).Write<IKeyGetter>(
                        item: KeysItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Ingestibles ?? true)
            {
                var IngestiblesItem = item.Ingestibles;
                if (IngestiblesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)IngestiblesItem).BinaryWriteTranslator).Write<IIngestibleGetter>(
                        item: IngestiblesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.IdleMarkers ?? true)
            {
                var IdleMarkersItem = item.IdleMarkers;
                if (IdleMarkersItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)IdleMarkersItem).BinaryWriteTranslator).Write<IIdleMarkerGetter>(
                        item: IdleMarkersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Holotapes ?? true)
            {
                var HolotapesItem = item.Holotapes;
                if (HolotapesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)HolotapesItem).BinaryWriteTranslator).Write<IHolotapeGetter>(
                        item: HolotapesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Projectiles ?? true)
            {
                var ProjectilesItem = item.Projectiles;
                if (ProjectilesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ProjectilesItem).BinaryWriteTranslator).Write<IProjectileGetter>(
                        item: ProjectilesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Hazards ?? true)
            {
                var HazardsItem = item.Hazards;
                if (HazardsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)HazardsItem).BinaryWriteTranslator).Write<IHazardGetter>(
                        item: HazardsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.BendableSplines ?? true)
            {
                var BendableSplinesItem = item.BendableSplines;
                if (BendableSplinesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)BendableSplinesItem).BinaryWriteTranslator).Write<IBendableSplineGetter>(
                        item: BendableSplinesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Terminals ?? true)
            {
                var TerminalsItem = item.Terminals;
                if (TerminalsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)TerminalsItem).BinaryWriteTranslator).Write<ITerminalGetter>(
                        item: TerminalsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledItems ?? true)
            {
                var LeveledItemsItem = item.LeveledItems;
                if (LeveledItemsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)LeveledItemsItem).BinaryWriteTranslator).Write<ILeveledItemGetter>(
                        item: LeveledItemsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Weather ?? true)
            {
                var WeatherItem = item.Weather;
                if (WeatherItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)WeatherItem).BinaryWriteTranslator).Write<IWeatherGetter>(
                        item: WeatherItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Climates ?? true)
            {
                var ClimatesItem = item.Climates;
                if (ClimatesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ClimatesItem).BinaryWriteTranslator).Write<IClimateGetter>(
                        item: ClimatesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ShaderParticleGeometries ?? true)
            {
                var ShaderParticleGeometriesItem = item.ShaderParticleGeometries;
                if (ShaderParticleGeometriesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ShaderParticleGeometriesItem).BinaryWriteTranslator).Write<IShaderParticleGeometryGetter>(
                        item: ShaderParticleGeometriesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.VisualEffects ?? true)
            {
                var VisualEffectsItem = item.VisualEffects;
                if (VisualEffectsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)VisualEffectsItem).BinaryWriteTranslator).Write<IVisualEffectGetter>(
                        item: VisualEffectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Regions ?? true)
            {
                var RegionsItem = item.Regions;
                if (RegionsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)RegionsItem).BinaryWriteTranslator).Write<IRegionGetter>(
                        item: RegionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.NavigationMeshInfoMaps ?? true)
            {
                var NavigationMeshInfoMapsItem = item.NavigationMeshInfoMaps;
                if (NavigationMeshInfoMapsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)NavigationMeshInfoMapsItem).BinaryWriteTranslator).Write<INavigationMeshInfoMapGetter>(
                        item: NavigationMeshInfoMapsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Cells ?? true)
            {
                var CellsItem = item.Cells;
                if (CellsItem.Records.Count > 0)
                {
                    ((Fallout4ListGroupBinaryWriteTranslation)((IBinaryItem)CellsItem).BinaryWriteTranslator).Write<ICellBlockGetter>(
                        item: CellsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Worldspaces ?? true)
            {
                var WorldspacesItem = item.Worldspaces;
                if (WorldspacesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)WorldspacesItem).BinaryWriteTranslator).Write<IWorldspaceGetter>(
                        item: WorldspacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Quests ?? true)
            {
                var QuestsItem = item.Quests;
                if (QuestsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)QuestsItem).BinaryWriteTranslator).Write<IQuestGetter>(
                        item: QuestsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.IdleAnimations ?? true)
            {
                var IdleAnimationsItem = item.IdleAnimations;
                if (IdleAnimationsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)IdleAnimationsItem).BinaryWriteTranslator).Write<IIdleAnimationGetter>(
                        item: IdleAnimationsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Packages ?? true)
            {
                var PackagesItem = item.Packages;
                if (PackagesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)PackagesItem).BinaryWriteTranslator).Write<IPackageGetter>(
                        item: PackagesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CombatStyles ?? true)
            {
                var CombatStylesItem = item.CombatStyles;
                if (CombatStylesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)CombatStylesItem).BinaryWriteTranslator).Write<ICombatStyleGetter>(
                        item: CombatStylesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LoadScreens ?? true)
            {
                var LoadScreensItem = item.LoadScreens;
                if (LoadScreensItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)LoadScreensItem).BinaryWriteTranslator).Write<ILoadScreenGetter>(
                        item: LoadScreensItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AnimatedObjects ?? true)
            {
                var AnimatedObjectsItem = item.AnimatedObjects;
                if (AnimatedObjectsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)AnimatedObjectsItem).BinaryWriteTranslator).Write<IAnimatedObjectGetter>(
                        item: AnimatedObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Waters ?? true)
            {
                var WatersItem = item.Waters;
                if (WatersItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)WatersItem).BinaryWriteTranslator).Write<IWaterGetter>(
                        item: WatersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.EffectShaders ?? true)
            {
                var EffectShadersItem = item.EffectShaders;
                if (EffectShadersItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)EffectShadersItem).BinaryWriteTranslator).Write<IEffectShaderGetter>(
                        item: EffectShadersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Explosions ?? true)
            {
                var ExplosionsItem = item.Explosions;
                if (ExplosionsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ExplosionsItem).BinaryWriteTranslator).Write<IExplosionGetter>(
                        item: ExplosionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Debris ?? true)
            {
                var DebrisItem = item.Debris;
                if (DebrisItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)DebrisItem).BinaryWriteTranslator).Write<IDebrisGetter>(
                        item: DebrisItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ImageSpaces ?? true)
            {
                var ImageSpacesItem = item.ImageSpaces;
                if (ImageSpacesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ImageSpacesItem).BinaryWriteTranslator).Write<IImageSpaceGetter>(
                        item: ImageSpacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ImageSpaceAdapters ?? true)
            {
                var ImageSpaceAdaptersItem = item.ImageSpaceAdapters;
                if (ImageSpaceAdaptersItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ImageSpaceAdaptersItem).BinaryWriteTranslator).Write<IImageSpaceAdapterGetter>(
                        item: ImageSpaceAdaptersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.FormLists ?? true)
            {
                var FormListsItem = item.FormLists;
                if (FormListsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)FormListsItem).BinaryWriteTranslator).Write<IFormListGetter>(
                        item: FormListsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Perks ?? true)
            {
                var PerksItem = item.Perks;
                if (PerksItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)PerksItem).BinaryWriteTranslator).Write<IPerkGetter>(
                        item: PerksItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.BodyParts ?? true)
            {
                var BodyPartsItem = item.BodyParts;
                if (BodyPartsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)BodyPartsItem).BinaryWriteTranslator).Write<IBodyPartDataGetter>(
                        item: BodyPartsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AddonNodes ?? true)
            {
                var AddonNodesItem = item.AddonNodes;
                if (AddonNodesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)AddonNodesItem).BinaryWriteTranslator).Write<IAddonNodeGetter>(
                        item: AddonNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ActorValueInformation ?? true)
            {
                var ActorValueInformationItem = item.ActorValueInformation;
                if (ActorValueInformationItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ActorValueInformationItem).BinaryWriteTranslator).Write<IActorValueInformationGetter>(
                        item: ActorValueInformationItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CameraShots ?? true)
            {
                var CameraShotsItem = item.CameraShots;
                if (CameraShotsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)CameraShotsItem).BinaryWriteTranslator).Write<ICameraShotGetter>(
                        item: CameraShotsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CameraPaths ?? true)
            {
                var CameraPathsItem = item.CameraPaths;
                if (CameraPathsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)CameraPathsItem).BinaryWriteTranslator).Write<ICameraPathGetter>(
                        item: CameraPathsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.VoiceTypes ?? true)
            {
                var VoiceTypesItem = item.VoiceTypes;
                if (VoiceTypesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)VoiceTypesItem).BinaryWriteTranslator).Write<IVoiceTypeGetter>(
                        item: VoiceTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MaterialTypes ?? true)
            {
                var MaterialTypesItem = item.MaterialTypes;
                if (MaterialTypesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)MaterialTypesItem).BinaryWriteTranslator).Write<IMaterialTypeGetter>(
                        item: MaterialTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Impacts ?? true)
            {
                var ImpactsItem = item.Impacts;
                if (ImpactsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ImpactsItem).BinaryWriteTranslator).Write<IImpactGetter>(
                        item: ImpactsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ImpactDataSets ?? true)
            {
                var ImpactDataSetsItem = item.ImpactDataSets;
                if (ImpactDataSetsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ImpactDataSetsItem).BinaryWriteTranslator).Write<IImpactDataSetGetter>(
                        item: ImpactDataSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ArmorAddons ?? true)
            {
                var ArmorAddonsItem = item.ArmorAddons;
                if (ArmorAddonsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ArmorAddonsItem).BinaryWriteTranslator).Write<IArmorAddonGetter>(
                        item: ArmorAddonsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.EncounterZones ?? true)
            {
                var EncounterZonesItem = item.EncounterZones;
                if (EncounterZonesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)EncounterZonesItem).BinaryWriteTranslator).Write<IEncounterZoneGetter>(
                        item: EncounterZonesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Locations ?? true)
            {
                var LocationsItem = item.Locations;
                if (LocationsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)LocationsItem).BinaryWriteTranslator).Write<ILocationGetter>(
                        item: LocationsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Messages ?? true)
            {
                var MessagesItem = item.Messages;
                if (MessagesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)MessagesItem).BinaryWriteTranslator).Write<IMessageGetter>(
                        item: MessagesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DefaultObjectManagers ?? true)
            {
                var DefaultObjectManagersItem = item.DefaultObjectManagers;
                if (DefaultObjectManagersItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)DefaultObjectManagersItem).BinaryWriteTranslator).Write<IDefaultObjectManagerGetter>(
                        item: DefaultObjectManagersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DefaultObjects ?? true)
            {
                var DefaultObjectsItem = item.DefaultObjects;
                if (DefaultObjectsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)DefaultObjectsItem).BinaryWriteTranslator).Write<IDefaultObjectGetter>(
                        item: DefaultObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LightingTemplates ?? true)
            {
                var LightingTemplatesItem = item.LightingTemplates;
                if (LightingTemplatesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)LightingTemplatesItem).BinaryWriteTranslator).Write<ILightingTemplateGetter>(
                        item: LightingTemplatesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MusicTypes ?? true)
            {
                var MusicTypesItem = item.MusicTypes;
                if (MusicTypesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)MusicTypesItem).BinaryWriteTranslator).Write<IMusicTypeGetter>(
                        item: MusicTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Footsteps ?? true)
            {
                var FootstepsItem = item.Footsteps;
                if (FootstepsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)FootstepsItem).BinaryWriteTranslator).Write<IFootstepGetter>(
                        item: FootstepsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.FootstepSets ?? true)
            {
                var FootstepSetsItem = item.FootstepSets;
                if (FootstepSetsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)FootstepSetsItem).BinaryWriteTranslator).Write<IFootstepSetGetter>(
                        item: FootstepSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.StoryManagerBranchNodes ?? true)
            {
                var StoryManagerBranchNodesItem = item.StoryManagerBranchNodes;
                if (StoryManagerBranchNodesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)StoryManagerBranchNodesItem).BinaryWriteTranslator).Write<IStoryManagerBranchNodeGetter>(
                        item: StoryManagerBranchNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.StoryManagerQuestNodes ?? true)
            {
                var StoryManagerQuestNodesItem = item.StoryManagerQuestNodes;
                if (StoryManagerQuestNodesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)StoryManagerQuestNodesItem).BinaryWriteTranslator).Write<IStoryManagerQuestNodeGetter>(
                        item: StoryManagerQuestNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.StoryManagerEventNodes ?? true)
            {
                var StoryManagerEventNodesItem = item.StoryManagerEventNodes;
                if (StoryManagerEventNodesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)StoryManagerEventNodesItem).BinaryWriteTranslator).Write<IStoryManagerEventNodeGetter>(
                        item: StoryManagerEventNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MusicTracks ?? true)
            {
                var MusicTracksItem = item.MusicTracks;
                if (MusicTracksItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)MusicTracksItem).BinaryWriteTranslator).Write<IMusicTrackGetter>(
                        item: MusicTracksItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DialogViews ?? true)
            {
                var DialogViewsItem = item.DialogViews;
                if (DialogViewsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)DialogViewsItem).BinaryWriteTranslator).Write<IDialogViewGetter>(
                        item: DialogViewsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.EquipTypes ?? true)
            {
                var EquipTypesItem = item.EquipTypes;
                if (EquipTypesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)EquipTypesItem).BinaryWriteTranslator).Write<IEquipTypeGetter>(
                        item: EquipTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Relationships ?? true)
            {
                var RelationshipsItem = item.Relationships;
                if (RelationshipsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)RelationshipsItem).BinaryWriteTranslator).Write<IRelationshipGetter>(
                        item: RelationshipsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AssociationTypes ?? true)
            {
                var AssociationTypesItem = item.AssociationTypes;
                if (AssociationTypesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)AssociationTypesItem).BinaryWriteTranslator).Write<IAssociationTypeGetter>(
                        item: AssociationTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Outfits ?? true)
            {
                var OutfitsItem = item.Outfits;
                if (OutfitsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)OutfitsItem).BinaryWriteTranslator).Write<IOutfitGetter>(
                        item: OutfitsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ArtObjects ?? true)
            {
                var ArtObjectsItem = item.ArtObjects;
                if (ArtObjectsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ArtObjectsItem).BinaryWriteTranslator).Write<IArtObjectGetter>(
                        item: ArtObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MaterialObjects ?? true)
            {
                var MaterialObjectsItem = item.MaterialObjects;
                if (MaterialObjectsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)MaterialObjectsItem).BinaryWriteTranslator).Write<IMaterialObjectGetter>(
                        item: MaterialObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MovementTypes ?? true)
            {
                var MovementTypesItem = item.MovementTypes;
                if (MovementTypesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)MovementTypesItem).BinaryWriteTranslator).Write<IMovementTypeGetter>(
                        item: MovementTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoundDescriptors ?? true)
            {
                var SoundDescriptorsItem = item.SoundDescriptors;
                if (SoundDescriptorsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)SoundDescriptorsItem).BinaryWriteTranslator).Write<ISoundDescriptorGetter>(
                        item: SoundDescriptorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoundCategories ?? true)
            {
                var SoundCategoriesItem = item.SoundCategories;
                if (SoundCategoriesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)SoundCategoriesItem).BinaryWriteTranslator).Write<ISoundCategoryGetter>(
                        item: SoundCategoriesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoundOutputModels ?? true)
            {
                var SoundOutputModelsItem = item.SoundOutputModels;
                if (SoundOutputModelsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)SoundOutputModelsItem).BinaryWriteTranslator).Write<ISoundOutputModelGetter>(
                        item: SoundOutputModelsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CollisionLayers ?? true)
            {
                var CollisionLayersItem = item.CollisionLayers;
                if (CollisionLayersItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)CollisionLayersItem).BinaryWriteTranslator).Write<ICollisionLayerGetter>(
                        item: CollisionLayersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Colors ?? true)
            {
                var ColorsItem = item.Colors;
                if (ColorsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ColorsItem).BinaryWriteTranslator).Write<IColorRecordGetter>(
                        item: ColorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ReverbParameters ?? true)
            {
                var ReverbParametersItem = item.ReverbParameters;
                if (ReverbParametersItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ReverbParametersItem).BinaryWriteTranslator).Write<IReverbParametersGetter>(
                        item: ReverbParametersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.PackIns ?? true)
            {
                var PackInsItem = item.PackIns;
                if (PackInsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)PackInsItem).BinaryWriteTranslator).Write<IPackInGetter>(
                        item: PackInsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ReferenceGroups ?? true)
            {
                var ReferenceGroupsItem = item.ReferenceGroups;
                if (ReferenceGroupsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ReferenceGroupsItem).BinaryWriteTranslator).Write<IReferenceGroupGetter>(
                        item: ReferenceGroupsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AimModels ?? true)
            {
                var AimModelsItem = item.AimModels;
                if (AimModelsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)AimModelsItem).BinaryWriteTranslator).Write<IAimModelGetter>(
                        item: AimModelsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Layers ?? true)
            {
                var LayersItem = item.Layers;
                if (LayersItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)LayersItem).BinaryWriteTranslator).Write<ILayerGetter>(
                        item: LayersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ConstructibleObjects ?? true)
            {
                var ConstructibleObjectsItem = item.ConstructibleObjects;
                if (ConstructibleObjectsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ConstructibleObjectsItem).BinaryWriteTranslator).Write<IConstructibleObjectGetter>(
                        item: ConstructibleObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ObjectModifications ?? true)
            {
                var ObjectModificationsItem = item.ObjectModifications;
                if (ObjectModificationsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ObjectModificationsItem).BinaryWriteTranslator).Write<IAObjectModificationGetter>(
                        item: ObjectModificationsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MaterialSwaps ?? true)
            {
                var MaterialSwapsItem = item.MaterialSwaps;
                if (MaterialSwapsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)MaterialSwapsItem).BinaryWriteTranslator).Write<IMaterialSwapGetter>(
                        item: MaterialSwapsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Zooms ?? true)
            {
                var ZoomsItem = item.Zooms;
                if (ZoomsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ZoomsItem).BinaryWriteTranslator).Write<IZoomGetter>(
                        item: ZoomsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.InstanceNamingRules ?? true)
            {
                var InstanceNamingRulesItem = item.InstanceNamingRules;
                if (InstanceNamingRulesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)InstanceNamingRulesItem).BinaryWriteTranslator).Write<IInstanceNamingRulesGetter>(
                        item: InstanceNamingRulesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoundKeywordMappings ?? true)
            {
                var SoundKeywordMappingsItem = item.SoundKeywordMappings;
                if (SoundKeywordMappingsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)SoundKeywordMappingsItem).BinaryWriteTranslator).Write<ISoundKeywordMappingGetter>(
                        item: SoundKeywordMappingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AudioEffectChains ?? true)
            {
                var AudioEffectChainsItem = item.AudioEffectChains;
                if (AudioEffectChainsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)AudioEffectChainsItem).BinaryWriteTranslator).Write<IAudioEffectChainGetter>(
                        item: AudioEffectChainsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SceneCollections ?? true)
            {
                var SceneCollectionsItem = item.SceneCollections;
                if (SceneCollectionsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)SceneCollectionsItem).BinaryWriteTranslator).Write<ISceneCollectionGetter>(
                        item: SceneCollectionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AttractionRules ?? true)
            {
                var AttractionRulesItem = item.AttractionRules;
                if (AttractionRulesItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)AttractionRulesItem).BinaryWriteTranslator).Write<IAttractionRuleGetter>(
                        item: AttractionRulesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AudioCategorySnapshots ?? true)
            {
                var AudioCategorySnapshotsItem = item.AudioCategorySnapshots;
                if (AudioCategorySnapshotsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)AudioCategorySnapshotsItem).BinaryWriteTranslator).Write<IAudioCategorySnapshotGetter>(
                        item: AudioCategorySnapshotsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AnimationSoundTagSets ?? true)
            {
                var AnimationSoundTagSetsItem = item.AnimationSoundTagSets;
                if (AnimationSoundTagSetsItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)AnimationSoundTagSetsItem).BinaryWriteTranslator).Write<IAnimationSoundTagSetGetter>(
                        item: AnimationSoundTagSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.NavigationMeshObstacleManagers ?? true)
            {
                var NavigationMeshObstacleManagersItem = item.NavigationMeshObstacleManagers;
                if (NavigationMeshObstacleManagersItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)NavigationMeshObstacleManagersItem).BinaryWriteTranslator).Write<INavigationMeshObstacleManagerGetter>(
                        item: NavigationMeshObstacleManagersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LensFlares ?? true)
            {
                var LensFlaresItem = item.LensFlares;
                if (LensFlaresItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)LensFlaresItem).BinaryWriteTranslator).Write<ILensFlareGetter>(
                        item: LensFlaresItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.GodRays ?? true)
            {
                var GodRaysItem = item.GodRays;
                if (GodRaysItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)GodRaysItem).BinaryWriteTranslator).Write<IGodRaysGetter>(
                        item: GodRaysItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ObjectVisibilityManagers ?? true)
            {
                var ObjectVisibilityManagersItem = item.ObjectVisibilityManagers;
                if (ObjectVisibilityManagersItem.RecordCache.Count > 0)
                {
                    ((Fallout4GroupBinaryWriteTranslation)((IBinaryItem)ObjectVisibilityManagersItem).BinaryWriteTranslator).Write<IObjectVisibilityManagerGetter>(
                        item: ObjectVisibilityManagersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IFallout4ModGetter item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            param ??= BinaryWriteParameters.Default;
            if (param.Parallel.MaxDegreeOfParallelism != 1)
            {
                Fallout4ModCommon.WriteParallel(
                    item: item,
                    writer: writer,
                    param: param,
                    modKey: modKey);
                return;
            }
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            WriteRecordTypes(
                item: item,
                writer: writer,
                importMask: importMask);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            Write(
                item: (IFallout4ModGetter)item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

    }

    internal partial class Fallout4ModBinaryCreateTranslation
    {
        public static readonly Fallout4ModBinaryCreateTranslation Instance = new Fallout4ModBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IFallout4Mod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            GroupMask? importMask,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    item.ModHeader.CopyInFromBinary(
                        frame: frame,
                        translationParams: null);
                    return (int)Fallout4Mod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        item.GameSettings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    if (importMask?.Keywords ?? true)
                    {
                        item.Keywords.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Keywords;
                }
                case RecordTypeInts.LCRT:
                {
                    if (importMask?.LocationReferenceTypes ?? true)
                    {
                        item.LocationReferenceTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.AACT:
                {
                    if (importMask?.Actions ?? true)
                    {
                        item.Actions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Actions;
                }
                case RecordTypeInts.TRNS:
                {
                    if (importMask?.Transforms ?? true)
                    {
                        item.Transforms.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Transforms;
                }
                case RecordTypeInts.CMPO:
                {
                    if (importMask?.Components ?? true)
                    {
                        item.Components.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Components;
                }
                case RecordTypeInts.TXST:
                {
                    if (importMask?.TextureSets ?? true)
                    {
                        item.TextureSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.GLOB:
                {
                    if (importMask?.Globals ?? true)
                    {
                        item.Globals.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Globals;
                }
                case RecordTypeInts.DMGT:
                {
                    if (importMask?.DamageTypes ?? true)
                    {
                        item.DamageTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.DamageTypes;
                }
                case RecordTypeInts.CLAS:
                {
                    if (importMask?.Classes ?? true)
                    {
                        item.Classes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    if (importMask?.Factions ?? true)
                    {
                        item.Factions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Factions;
                }
                case RecordTypeInts.HDPT:
                {
                    if (importMask?.HeadParts ?? true)
                    {
                        item.HeadParts.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.HeadParts;
                }
                case RecordTypeInts.RACE:
                {
                    if (importMask?.Races ?? true)
                    {
                        item.Races.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    if (importMask?.SoundMarkers ?? true)
                    {
                        item.SoundMarkers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.SoundMarkers;
                }
                case RecordTypeInts.ASPC:
                {
                    if (importMask?.AcousticSpaces ?? true)
                    {
                        item.AcousticSpaces.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AcousticSpaces;
                }
                case RecordTypeInts.MGEF:
                {
                    if (importMask?.MagicEffects ?? true)
                    {
                        item.MagicEffects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.LTEX:
                {
                    if (importMask?.LandscapeTextures ?? true)
                    {
                        item.LandscapeTextures.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LandscapeTextures;
                }
                case RecordTypeInts.ENCH:
                {
                    if (importMask?.ObjectEffects ?? true)
                    {
                        item.ObjectEffects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ObjectEffects;
                }
                case RecordTypeInts.SPEL:
                {
                    if (importMask?.Spells ?? true)
                    {
                        item.Spells.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Spells;
                }
                case RecordTypeInts.ACTI:
                {
                    if (importMask?.Activators ?? true)
                    {
                        item.Activators.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Activators;
                }
                case RecordTypeInts.TACT:
                {
                    if (importMask?.TalkingActivators ?? true)
                    {
                        item.TalkingActivators.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.TalkingActivators;
                }
                case RecordTypeInts.ARMO:
                {
                    if (importMask?.Armors ?? true)
                    {
                        item.Armors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    if (importMask?.Books ?? true)
                    {
                        item.Books.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Books;
                }
                case RecordTypeInts.CONT:
                {
                    if (importMask?.Containers ?? true)
                    {
                        item.Containers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    if (importMask?.Doors ?? true)
                    {
                        item.Doors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Doors;
                }
                case RecordTypeInts.INGR:
                {
                    if (importMask?.Ingredients ?? true)
                    {
                        item.Ingredients.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Ingredients;
                }
                case RecordTypeInts.LIGH:
                {
                    if (importMask?.Lights ?? true)
                    {
                        item.Lights.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    if (importMask?.MiscItems ?? true)
                    {
                        item.MiscItems.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MiscItems;
                }
                case RecordTypeInts.STAT:
                {
                    if (importMask?.Statics ?? true)
                    {
                        item.Statics.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Statics;
                }
                case RecordTypeInts.SCOL:
                {
                    if (importMask?.StaticCollections ?? true)
                    {
                        item.StaticCollections.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.StaticCollections;
                }
                case RecordTypeInts.MSTT:
                {
                    if (importMask?.MovableStatics ?? true)
                    {
                        item.MovableStatics.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MovableStatics;
                }
                case RecordTypeInts.GRAS:
                {
                    if (importMask?.Grasses ?? true)
                    {
                        item.Grasses.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Grasses;
                }
                case RecordTypeInts.TREE:
                {
                    if (importMask?.Trees ?? true)
                    {
                        item.Trees.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Trees;
                }
                case RecordTypeInts.FLOR:
                {
                    if (importMask?.Florae ?? true)
                    {
                        item.Florae.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Florae;
                }
                case RecordTypeInts.FURN:
                {
                    if (importMask?.Furniture ?? true)
                    {
                        item.Furniture.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    if (importMask?.Weapons ?? true)
                    {
                        item.Weapons.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    if (importMask?.Ammunitions ?? true)
                    {
                        item.Ammunitions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    if (importMask?.Npcs ?? true)
                    {
                        item.Npcs.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Npcs;
                }
                case RecordTypeInts.LVLN:
                {
                    if (importMask?.LeveledNpcs ?? true)
                    {
                        item.LeveledNpcs.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LeveledNpcs;
                }
                case RecordTypeInts.KEYM:
                {
                    if (importMask?.Keys ?? true)
                    {
                        item.Keys.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    if (importMask?.Ingestibles ?? true)
                    {
                        item.Ingestibles.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Ingestibles;
                }
                case RecordTypeInts.IDLM:
                {
                    if (importMask?.IdleMarkers ?? true)
                    {
                        item.IdleMarkers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.IdleMarkers;
                }
                case RecordTypeInts.NOTE:
                {
                    if (importMask?.Holotapes ?? true)
                    {
                        item.Holotapes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Holotapes;
                }
                case RecordTypeInts.PROJ:
                {
                    if (importMask?.Projectiles ?? true)
                    {
                        item.Projectiles.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Projectiles;
                }
                case RecordTypeInts.HAZD:
                {
                    if (importMask?.Hazards ?? true)
                    {
                        item.Hazards.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Hazards;
                }
                case RecordTypeInts.BNDS:
                {
                    if (importMask?.BendableSplines ?? true)
                    {
                        item.BendableSplines.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.BendableSplines;
                }
                case RecordTypeInts.TERM:
                {
                    if (importMask?.Terminals ?? true)
                    {
                        item.Terminals.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Terminals;
                }
                case RecordTypeInts.LVLI:
                {
                    if (importMask?.LeveledItems ?? true)
                    {
                        item.LeveledItems.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.WTHR:
                {
                    if (importMask?.Weather ?? true)
                    {
                        item.Weather.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Weather;
                }
                case RecordTypeInts.CLMT:
                {
                    if (importMask?.Climates ?? true)
                    {
                        item.Climates.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Climates;
                }
                case RecordTypeInts.SPGD:
                {
                    if (importMask?.ShaderParticleGeometries ?? true)
                    {
                        item.ShaderParticleGeometries.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ShaderParticleGeometries;
                }
                case RecordTypeInts.RFCT:
                {
                    if (importMask?.VisualEffects ?? true)
                    {
                        item.VisualEffects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.VisualEffects;
                }
                case RecordTypeInts.REGN:
                {
                    if (importMask?.Regions ?? true)
                    {
                        item.Regions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Regions;
                }
                case RecordTypeInts.NAVI:
                {
                    if (importMask?.NavigationMeshInfoMaps ?? true)
                    {
                        item.NavigationMeshInfoMaps.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.NavigationMeshInfoMaps;
                }
                case RecordTypeInts.CELL:
                {
                    if (importMask?.Cells ?? true)
                    {
                        item.Cells.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    if (importMask?.Worldspaces ?? true)
                    {
                        item.Worldspaces.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.QUST:
                {
                    if (importMask?.Quests ?? true)
                    {
                        item.Quests.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    if (importMask?.IdleAnimations ?? true)
                    {
                        item.IdleAnimations.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    if (importMask?.Packages ?? true)
                    {
                        item.Packages.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Packages;
                }
                case RecordTypeInts.CSTY:
                {
                    if (importMask?.CombatStyles ?? true)
                    {
                        item.CombatStyles.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    if (importMask?.LoadScreens ?? true)
                    {
                        item.LoadScreens.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.ANIO:
                {
                    if (importMask?.AnimatedObjects ?? true)
                    {
                        item.AnimatedObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    if (importMask?.Waters ?? true)
                    {
                        item.Waters.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    if (importMask?.EffectShaders ?? true)
                    {
                        item.EffectShaders.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.EffectShaders;
                }
                case RecordTypeInts.EXPL:
                {
                    if (importMask?.Explosions ?? true)
                    {
                        item.Explosions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Explosions;
                }
                case RecordTypeInts.DEBR:
                {
                    if (importMask?.Debris ?? true)
                    {
                        item.Debris.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Debris;
                }
                case RecordTypeInts.IMGS:
                {
                    if (importMask?.ImageSpaces ?? true)
                    {
                        item.ImageSpaces.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.IMAD:
                {
                    if (importMask?.ImageSpaceAdapters ?? true)
                    {
                        item.ImageSpaceAdapters.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ImageSpaceAdapters;
                }
                case RecordTypeInts.FLST:
                {
                    if (importMask?.FormLists ?? true)
                    {
                        item.FormLists.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.FormLists;
                }
                case RecordTypeInts.PERK:
                {
                    if (importMask?.Perks ?? true)
                    {
                        item.Perks.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Perks;
                }
                case RecordTypeInts.BPTD:
                {
                    if (importMask?.BodyParts ?? true)
                    {
                        item.BodyParts.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.BodyParts;
                }
                case RecordTypeInts.ADDN:
                {
                    if (importMask?.AddonNodes ?? true)
                    {
                        item.AddonNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AddonNodes;
                }
                case RecordTypeInts.AVIF:
                {
                    if (importMask?.ActorValueInformation ?? true)
                    {
                        item.ActorValueInformation.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ActorValueInformation;
                }
                case RecordTypeInts.CAMS:
                {
                    if (importMask?.CameraShots ?? true)
                    {
                        item.CameraShots.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.CameraShots;
                }
                case RecordTypeInts.CPTH:
                {
                    if (importMask?.CameraPaths ?? true)
                    {
                        item.CameraPaths.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.CameraPaths;
                }
                case RecordTypeInts.VTYP:
                {
                    if (importMask?.VoiceTypes ?? true)
                    {
                        item.VoiceTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.MATT:
                {
                    if (importMask?.MaterialTypes ?? true)
                    {
                        item.MaterialTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MaterialTypes;
                }
                case RecordTypeInts.IPCT:
                {
                    if (importMask?.Impacts ?? true)
                    {
                        item.Impacts.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Impacts;
                }
                case RecordTypeInts.IPDS:
                {
                    if (importMask?.ImpactDataSets ?? true)
                    {
                        item.ImpactDataSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ImpactDataSets;
                }
                case RecordTypeInts.ARMA:
                {
                    if (importMask?.ArmorAddons ?? true)
                    {
                        item.ArmorAddons.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ArmorAddons;
                }
                case RecordTypeInts.ECZN:
                {
                    if (importMask?.EncounterZones ?? true)
                    {
                        item.EncounterZones.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.EncounterZones;
                }
                case RecordTypeInts.LCTN:
                {
                    if (importMask?.Locations ?? true)
                    {
                        item.Locations.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Locations;
                }
                case RecordTypeInts.MESG:
                {
                    if (importMask?.Messages ?? true)
                    {
                        item.Messages.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Messages;
                }
                case RecordTypeInts.DOBJ:
                {
                    if (importMask?.DefaultObjectManagers ?? true)
                    {
                        item.DefaultObjectManagers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.DefaultObjectManagers;
                }
                case RecordTypeInts.DFOB:
                {
                    if (importMask?.DefaultObjects ?? true)
                    {
                        item.DefaultObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.DefaultObjects;
                }
                case RecordTypeInts.LGTM:
                {
                    if (importMask?.LightingTemplates ?? true)
                    {
                        item.LightingTemplates.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LightingTemplates;
                }
                case RecordTypeInts.MUSC:
                {
                    if (importMask?.MusicTypes ?? true)
                    {
                        item.MusicTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MusicTypes;
                }
                case RecordTypeInts.FSTP:
                {
                    if (importMask?.Footsteps ?? true)
                    {
                        item.Footsteps.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Footsteps;
                }
                case RecordTypeInts.FSTS:
                {
                    if (importMask?.FootstepSets ?? true)
                    {
                        item.FootstepSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.FootstepSets;
                }
                case RecordTypeInts.SMBN:
                {
                    if (importMask?.StoryManagerBranchNodes ?? true)
                    {
                        item.StoryManagerBranchNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.StoryManagerBranchNodes;
                }
                case RecordTypeInts.SMQN:
                {
                    if (importMask?.StoryManagerQuestNodes ?? true)
                    {
                        item.StoryManagerQuestNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.StoryManagerQuestNodes;
                }
                case RecordTypeInts.SMEN:
                {
                    if (importMask?.StoryManagerEventNodes ?? true)
                    {
                        item.StoryManagerEventNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.StoryManagerEventNodes;
                }
                case RecordTypeInts.MUST:
                {
                    if (importMask?.MusicTracks ?? true)
                    {
                        item.MusicTracks.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MusicTracks;
                }
                case RecordTypeInts.DLVW:
                {
                    if (importMask?.DialogViews ?? true)
                    {
                        item.DialogViews.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.DialogViews;
                }
                case RecordTypeInts.EQUP:
                {
                    if (importMask?.EquipTypes ?? true)
                    {
                        item.EquipTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.EquipTypes;
                }
                case RecordTypeInts.RELA:
                {
                    if (importMask?.Relationships ?? true)
                    {
                        item.Relationships.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Relationships;
                }
                case RecordTypeInts.ASTP:
                {
                    if (importMask?.AssociationTypes ?? true)
                    {
                        item.AssociationTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AssociationTypes;
                }
                case RecordTypeInts.OTFT:
                {
                    if (importMask?.Outfits ?? true)
                    {
                        item.Outfits.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Outfits;
                }
                case RecordTypeInts.ARTO:
                {
                    if (importMask?.ArtObjects ?? true)
                    {
                        item.ArtObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ArtObjects;
                }
                case RecordTypeInts.MATO:
                {
                    if (importMask?.MaterialObjects ?? true)
                    {
                        item.MaterialObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MaterialObjects;
                }
                case RecordTypeInts.MOVT:
                {
                    if (importMask?.MovementTypes ?? true)
                    {
                        item.MovementTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MovementTypes;
                }
                case RecordTypeInts.SNDR:
                {
                    if (importMask?.SoundDescriptors ?? true)
                    {
                        item.SoundDescriptors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.SoundDescriptors;
                }
                case RecordTypeInts.SNCT:
                {
                    if (importMask?.SoundCategories ?? true)
                    {
                        item.SoundCategories.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.SoundCategories;
                }
                case RecordTypeInts.SOPM:
                {
                    if (importMask?.SoundOutputModels ?? true)
                    {
                        item.SoundOutputModels.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.SoundOutputModels;
                }
                case RecordTypeInts.COLL:
                {
                    if (importMask?.CollisionLayers ?? true)
                    {
                        item.CollisionLayers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.CollisionLayers;
                }
                case RecordTypeInts.CLFM:
                {
                    if (importMask?.Colors ?? true)
                    {
                        item.Colors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Colors;
                }
                case RecordTypeInts.REVB:
                {
                    if (importMask?.ReverbParameters ?? true)
                    {
                        item.ReverbParameters.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ReverbParameters;
                }
                case RecordTypeInts.PKIN:
                {
                    if (importMask?.PackIns ?? true)
                    {
                        item.PackIns.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.PackIns;
                }
                case RecordTypeInts.RFGP:
                {
                    if (importMask?.ReferenceGroups ?? true)
                    {
                        item.ReferenceGroups.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ReferenceGroups;
                }
                case RecordTypeInts.AMDL:
                {
                    if (importMask?.AimModels ?? true)
                    {
                        item.AimModels.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AimModels;
                }
                case RecordTypeInts.LAYR:
                {
                    if (importMask?.Layers ?? true)
                    {
                        item.Layers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Layers;
                }
                case RecordTypeInts.COBJ:
                {
                    if (importMask?.ConstructibleObjects ?? true)
                    {
                        item.ConstructibleObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ConstructibleObjects;
                }
                case RecordTypeInts.OMOD:
                {
                    if (importMask?.ObjectModifications ?? true)
                    {
                        item.ObjectModifications.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ObjectModifications;
                }
                case RecordTypeInts.MSWP:
                {
                    if (importMask?.MaterialSwaps ?? true)
                    {
                        item.MaterialSwaps.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.MaterialSwaps;
                }
                case RecordTypeInts.ZOOM:
                {
                    if (importMask?.Zooms ?? true)
                    {
                        item.Zooms.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.Zooms;
                }
                case RecordTypeInts.INNR:
                {
                    if (importMask?.InstanceNamingRules ?? true)
                    {
                        item.InstanceNamingRules.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.InstanceNamingRules;
                }
                case RecordTypeInts.KSSM:
                {
                    if (importMask?.SoundKeywordMappings ?? true)
                    {
                        item.SoundKeywordMappings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.SoundKeywordMappings;
                }
                case RecordTypeInts.AECH:
                {
                    if (importMask?.AudioEffectChains ?? true)
                    {
                        item.AudioEffectChains.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AudioEffectChains;
                }
                case RecordTypeInts.SCCO:
                {
                    if (importMask?.SceneCollections ?? true)
                    {
                        item.SceneCollections.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.SceneCollections;
                }
                case RecordTypeInts.AORU:
                {
                    if (importMask?.AttractionRules ?? true)
                    {
                        item.AttractionRules.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AttractionRules;
                }
                case RecordTypeInts.SCSN:
                {
                    if (importMask?.AudioCategorySnapshots ?? true)
                    {
                        item.AudioCategorySnapshots.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AudioCategorySnapshots;
                }
                case RecordTypeInts.STAG:
                {
                    if (importMask?.AnimationSoundTagSets ?? true)
                    {
                        item.AnimationSoundTagSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.AnimationSoundTagSets;
                }
                case RecordTypeInts.NOCM:
                {
                    if (importMask?.NavigationMeshObstacleManagers ?? true)
                    {
                        item.NavigationMeshObstacleManagers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.NavigationMeshObstacleManagers;
                }
                case RecordTypeInts.LENS:
                {
                    if (importMask?.LensFlares ?? true)
                    {
                        item.LensFlares.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.LensFlares;
                }
                case RecordTypeInts.GDRY:
                {
                    if (importMask?.GodRays ?? true)
                    {
                        item.GodRays.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.GodRays;
                }
                case RecordTypeInts.OVIS:
                {
                    if (importMask?.ObjectVisibilityManagers ?? true)
                    {
                        item.ObjectVisibilityManagers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout4Mod_FieldIndex.ObjectVisibilityManagers;
                }
                default:
                    frame.Position += contentLength;
                    return default(int?);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class Fallout4ModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFallout4ModGetter item,
            MutagenWriter writer,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            var modKey = item.ModKey;
            Fallout4ModBinaryWriteTranslation.Instance.Write(
                item: item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

        public static void WriteToBinary(
            this IFallout4ModGetter item,
            FilePath path,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            param = PluginUtilityTranslation.SetStringsWriter(item, param, path, modKey);
            var bundle = new WritingBundle(item.Fallout4Release.ToGameRelease())
            {
                StringsWriter = param.StringsWriter,
                CleanNulls = param.CleanNulls,
                TargetLanguageOverride = param.TargetLanguageOverride,
                Header = item
            };
            if (param.Encodings != null)
            {
                bundle.Encodings = param.Encodings;
            }
            using var memStream = new MemoryTributary();
            using (var writer = new MutagenWriter(
                memStream,
                bundle,
                dispose: false))
            {
                Fallout4ModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
            using (var fs = param.FileSystem.GetOrDefault().FileStream.New(path, FileMode.Create, FileAccess.Write))
            {
                memStream.Position = 0;
                memStream.CopyTo(fs);
            }
            param.StringsWriter?.Dispose();
        }

        public static void WriteToBinary(
            this IFallout4ModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            using (var writer = new MutagenWriter(
                stream: stream,
                new WritingBundle(item.Fallout4Release.ToGameRelease()),
                dispose: false))
            {
                Fallout4ModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    [DebuggerDisplay("{GameRelease} {ModKey.ToString()}")]
    internal partial class Fallout4ModBinaryOverlay : IFallout4ModDisposableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Fallout4Mod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Fallout4Mod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => Fallout4ModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => Fallout4ModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFallout4ModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IFallout4ModGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IFallout4ModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public Fallout4Release Fallout4Release { get; }
        public GameRelease GameRelease => Fallout4Release.ToGameRelease();
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        uint IModGetter.GetRecordCount() => this.GetRecordCount();
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        public bool CanUseLocalization => true;
        public bool UsingLocalization => this.ModHeader.Flags.HasFlag(Fallout4ModHeader.HeaderFlag.Localized);
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => Fallout4ModCommon.Instance.EnumerateFormLinks(this);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => Fallout4ModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IFallout4Mod, IFallout4ModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<IFallout4Mod, IFallout4ModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IFallout4Mod, IFallout4ModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<IFallout4Mod, IFallout4ModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        uint IModGetter.NextFormID => ModHeader.Stats.NextFormID;
        public ModKey ModKey { get; }
        private readonly BinaryOverlayFactoryPackage _package;
        private readonly IBinaryReadStream _stream;
        private readonly bool _shouldDispose;
        public void Dispose()
        {
            if (!_shouldDispose) return;
            _stream.Dispose();
        }

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private IFallout4ModHeaderGetter? _ModHeader => _ModHeaderLocation.HasValue ? Fallout4ModHeaderBinaryOverlay.Fallout4ModHeaderFactory(PluginBinaryOverlay.LockExtractMemory(_stream, _ModHeaderLocation!.Value.Min, _ModHeaderLocation!.Value.Max), _package) : default;
        public IFallout4ModHeaderGetter ModHeader => _ModHeader ?? new Fallout4ModHeader();
        #endregion
        #region GameSettings
        private List<RangeInt64>? _GameSettingsLocations;
        private IFallout4GroupGetter<IGameSettingGetter>? _GameSettings => _GameSettingsLocations != null ? Fallout4GroupBinaryOverlay<IGameSettingGetter>.Fallout4GroupFactory(_stream, _GameSettingsLocations, _package) : default;
        public IFallout4GroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new Fallout4Group<GameSetting>(this);
        #endregion
        #region Keywords
        private List<RangeInt64>? _KeywordsLocations;
        private IFallout4GroupGetter<IKeywordGetter>? _Keywords => _KeywordsLocations != null ? Fallout4GroupBinaryOverlay<IKeywordGetter>.Fallout4GroupFactory(_stream, _KeywordsLocations, _package) : default;
        public IFallout4GroupGetter<IKeywordGetter> Keywords => _Keywords ?? new Fallout4Group<Keyword>(this);
        #endregion
        #region LocationReferenceTypes
        private List<RangeInt64>? _LocationReferenceTypesLocations;
        private IFallout4GroupGetter<ILocationReferenceTypeGetter>? _LocationReferenceTypes => _LocationReferenceTypesLocations != null ? Fallout4GroupBinaryOverlay<ILocationReferenceTypeGetter>.Fallout4GroupFactory(_stream, _LocationReferenceTypesLocations, _package) : default;
        public IFallout4GroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes => _LocationReferenceTypes ?? new Fallout4Group<LocationReferenceType>(this);
        #endregion
        #region Actions
        private List<RangeInt64>? _ActionsLocations;
        private IFallout4GroupGetter<IActionRecordGetter>? _Actions => _ActionsLocations != null ? Fallout4GroupBinaryOverlay<IActionRecordGetter>.Fallout4GroupFactory(_stream, _ActionsLocations, _package) : default;
        public IFallout4GroupGetter<IActionRecordGetter> Actions => _Actions ?? new Fallout4Group<ActionRecord>(this);
        #endregion
        #region Transforms
        private List<RangeInt64>? _TransformsLocations;
        private IFallout4GroupGetter<ITransformGetter>? _Transforms => _TransformsLocations != null ? Fallout4GroupBinaryOverlay<ITransformGetter>.Fallout4GroupFactory(_stream, _TransformsLocations, _package) : default;
        public IFallout4GroupGetter<ITransformGetter> Transforms => _Transforms ?? new Fallout4Group<Transform>(this);
        #endregion
        #region Components
        private List<RangeInt64>? _ComponentsLocations;
        private IFallout4GroupGetter<IComponentGetter>? _Components => _ComponentsLocations != null ? Fallout4GroupBinaryOverlay<IComponentGetter>.Fallout4GroupFactory(_stream, _ComponentsLocations, _package) : default;
        public IFallout4GroupGetter<IComponentGetter> Components => _Components ?? new Fallout4Group<Component>(this);
        #endregion
        #region TextureSets
        private List<RangeInt64>? _TextureSetsLocations;
        private IFallout4GroupGetter<ITextureSetGetter>? _TextureSets => _TextureSetsLocations != null ? Fallout4GroupBinaryOverlay<ITextureSetGetter>.Fallout4GroupFactory(_stream, _TextureSetsLocations, _package) : default;
        public IFallout4GroupGetter<ITextureSetGetter> TextureSets => _TextureSets ?? new Fallout4Group<TextureSet>(this);
        #endregion
        #region Globals
        private List<RangeInt64>? _GlobalsLocations;
        private IFallout4GroupGetter<IGlobalGetter>? _Globals => _GlobalsLocations != null ? Fallout4GroupBinaryOverlay<IGlobalGetter>.Fallout4GroupFactory(_stream, _GlobalsLocations, _package) : default;
        public IFallout4GroupGetter<IGlobalGetter> Globals => _Globals ?? new Fallout4Group<Global>(this);
        #endregion
        #region DamageTypes
        private List<RangeInt64>? _DamageTypesLocations;
        private IFallout4GroupGetter<IADamageTypeGetter>? _DamageTypes => _DamageTypesLocations != null ? Fallout4GroupBinaryOverlay<IADamageTypeGetter>.Fallout4GroupFactory(_stream, _DamageTypesLocations, _package) : default;
        public IFallout4GroupGetter<IADamageTypeGetter> DamageTypes => _DamageTypes ?? new Fallout4Group<ADamageType>(this);
        #endregion
        #region Classes
        private List<RangeInt64>? _ClassesLocations;
        private IFallout4GroupGetter<IClassGetter>? _Classes => _ClassesLocations != null ? Fallout4GroupBinaryOverlay<IClassGetter>.Fallout4GroupFactory(_stream, _ClassesLocations, _package) : default;
        public IFallout4GroupGetter<IClassGetter> Classes => _Classes ?? new Fallout4Group<Class>(this);
        #endregion
        #region Factions
        private List<RangeInt64>? _FactionsLocations;
        private IFallout4GroupGetter<IFactionGetter>? _Factions => _FactionsLocations != null ? Fallout4GroupBinaryOverlay<IFactionGetter>.Fallout4GroupFactory(_stream, _FactionsLocations, _package) : default;
        public IFallout4GroupGetter<IFactionGetter> Factions => _Factions ?? new Fallout4Group<Faction>(this);
        #endregion
        #region HeadParts
        private List<RangeInt64>? _HeadPartsLocations;
        private IFallout4GroupGetter<IHeadPartGetter>? _HeadParts => _HeadPartsLocations != null ? Fallout4GroupBinaryOverlay<IHeadPartGetter>.Fallout4GroupFactory(_stream, _HeadPartsLocations, _package) : default;
        public IFallout4GroupGetter<IHeadPartGetter> HeadParts => _HeadParts ?? new Fallout4Group<HeadPart>(this);
        #endregion
        #region Races
        private List<RangeInt64>? _RacesLocations;
        private IFallout4GroupGetter<IRaceGetter>? _Races => _RacesLocations != null ? Fallout4GroupBinaryOverlay<IRaceGetter>.Fallout4GroupFactory(_stream, _RacesLocations, _package) : default;
        public IFallout4GroupGetter<IRaceGetter> Races => _Races ?? new Fallout4Group<Race>(this);
        #endregion
        #region SoundMarkers
        private List<RangeInt64>? _SoundMarkersLocations;
        private IFallout4GroupGetter<ISoundMarkerGetter>? _SoundMarkers => _SoundMarkersLocations != null ? Fallout4GroupBinaryOverlay<ISoundMarkerGetter>.Fallout4GroupFactory(_stream, _SoundMarkersLocations, _package) : default;
        public IFallout4GroupGetter<ISoundMarkerGetter> SoundMarkers => _SoundMarkers ?? new Fallout4Group<SoundMarker>(this);
        #endregion
        #region AcousticSpaces
        private List<RangeInt64>? _AcousticSpacesLocations;
        private IFallout4GroupGetter<IAcousticSpaceGetter>? _AcousticSpaces => _AcousticSpacesLocations != null ? Fallout4GroupBinaryOverlay<IAcousticSpaceGetter>.Fallout4GroupFactory(_stream, _AcousticSpacesLocations, _package) : default;
        public IFallout4GroupGetter<IAcousticSpaceGetter> AcousticSpaces => _AcousticSpaces ?? new Fallout4Group<AcousticSpace>(this);
        #endregion
        #region MagicEffects
        private List<RangeInt64>? _MagicEffectsLocations;
        private IFallout4GroupGetter<IMagicEffectGetter>? _MagicEffects => _MagicEffectsLocations != null ? Fallout4GroupBinaryOverlay<IMagicEffectGetter>.Fallout4GroupFactory(_stream, _MagicEffectsLocations, _package) : default;
        public IFallout4GroupGetter<IMagicEffectGetter> MagicEffects => _MagicEffects ?? new Fallout4Group<MagicEffect>(this);
        #endregion
        #region LandscapeTextures
        private List<RangeInt64>? _LandscapeTexturesLocations;
        private IFallout4GroupGetter<ILandscapeTextureGetter>? _LandscapeTextures => _LandscapeTexturesLocations != null ? Fallout4GroupBinaryOverlay<ILandscapeTextureGetter>.Fallout4GroupFactory(_stream, _LandscapeTexturesLocations, _package) : default;
        public IFallout4GroupGetter<ILandscapeTextureGetter> LandscapeTextures => _LandscapeTextures ?? new Fallout4Group<LandscapeTexture>(this);
        #endregion
        #region ObjectEffects
        private List<RangeInt64>? _ObjectEffectsLocations;
        private IFallout4GroupGetter<IObjectEffectGetter>? _ObjectEffects => _ObjectEffectsLocations != null ? Fallout4GroupBinaryOverlay<IObjectEffectGetter>.Fallout4GroupFactory(_stream, _ObjectEffectsLocations, _package) : default;
        public IFallout4GroupGetter<IObjectEffectGetter> ObjectEffects => _ObjectEffects ?? new Fallout4Group<ObjectEffect>(this);
        #endregion
        #region Spells
        private List<RangeInt64>? _SpellsLocations;
        private IFallout4GroupGetter<ISpellGetter>? _Spells => _SpellsLocations != null ? Fallout4GroupBinaryOverlay<ISpellGetter>.Fallout4GroupFactory(_stream, _SpellsLocations, _package) : default;
        public IFallout4GroupGetter<ISpellGetter> Spells => _Spells ?? new Fallout4Group<Spell>(this);
        #endregion
        #region Activators
        private List<RangeInt64>? _ActivatorsLocations;
        private IFallout4GroupGetter<IActivatorGetter>? _Activators => _ActivatorsLocations != null ? Fallout4GroupBinaryOverlay<IActivatorGetter>.Fallout4GroupFactory(_stream, _ActivatorsLocations, _package) : default;
        public IFallout4GroupGetter<IActivatorGetter> Activators => _Activators ?? new Fallout4Group<Activator>(this);
        #endregion
        #region TalkingActivators
        private List<RangeInt64>? _TalkingActivatorsLocations;
        private IFallout4GroupGetter<ITalkingActivatorGetter>? _TalkingActivators => _TalkingActivatorsLocations != null ? Fallout4GroupBinaryOverlay<ITalkingActivatorGetter>.Fallout4GroupFactory(_stream, _TalkingActivatorsLocations, _package) : default;
        public IFallout4GroupGetter<ITalkingActivatorGetter> TalkingActivators => _TalkingActivators ?? new Fallout4Group<TalkingActivator>(this);
        #endregion
        #region Armors
        private List<RangeInt64>? _ArmorsLocations;
        private IFallout4GroupGetter<IArmorGetter>? _Armors => _ArmorsLocations != null ? Fallout4GroupBinaryOverlay<IArmorGetter>.Fallout4GroupFactory(_stream, _ArmorsLocations, _package) : default;
        public IFallout4GroupGetter<IArmorGetter> Armors => _Armors ?? new Fallout4Group<Armor>(this);
        #endregion
        #region Books
        private List<RangeInt64>? _BooksLocations;
        private IFallout4GroupGetter<IBookGetter>? _Books => _BooksLocations != null ? Fallout4GroupBinaryOverlay<IBookGetter>.Fallout4GroupFactory(_stream, _BooksLocations, _package) : default;
        public IFallout4GroupGetter<IBookGetter> Books => _Books ?? new Fallout4Group<Book>(this);
        #endregion
        #region Containers
        private List<RangeInt64>? _ContainersLocations;
        private IFallout4GroupGetter<IContainerGetter>? _Containers => _ContainersLocations != null ? Fallout4GroupBinaryOverlay<IContainerGetter>.Fallout4GroupFactory(_stream, _ContainersLocations, _package) : default;
        public IFallout4GroupGetter<IContainerGetter> Containers => _Containers ?? new Fallout4Group<Container>(this);
        #endregion
        #region Doors
        private List<RangeInt64>? _DoorsLocations;
        private IFallout4GroupGetter<IDoorGetter>? _Doors => _DoorsLocations != null ? Fallout4GroupBinaryOverlay<IDoorGetter>.Fallout4GroupFactory(_stream, _DoorsLocations, _package) : default;
        public IFallout4GroupGetter<IDoorGetter> Doors => _Doors ?? new Fallout4Group<Door>(this);
        #endregion
        #region Ingredients
        private List<RangeInt64>? _IngredientsLocations;
        private IFallout4GroupGetter<IIngredientGetter>? _Ingredients => _IngredientsLocations != null ? Fallout4GroupBinaryOverlay<IIngredientGetter>.Fallout4GroupFactory(_stream, _IngredientsLocations, _package) : default;
        public IFallout4GroupGetter<IIngredientGetter> Ingredients => _Ingredients ?? new Fallout4Group<Ingredient>(this);
        #endregion
        #region Lights
        private List<RangeInt64>? _LightsLocations;
        private IFallout4GroupGetter<ILightGetter>? _Lights => _LightsLocations != null ? Fallout4GroupBinaryOverlay<ILightGetter>.Fallout4GroupFactory(_stream, _LightsLocations, _package) : default;
        public IFallout4GroupGetter<ILightGetter> Lights => _Lights ?? new Fallout4Group<Light>(this);
        #endregion
        #region MiscItems
        private List<RangeInt64>? _MiscItemsLocations;
        private IFallout4GroupGetter<IMiscItemGetter>? _MiscItems => _MiscItemsLocations != null ? Fallout4GroupBinaryOverlay<IMiscItemGetter>.Fallout4GroupFactory(_stream, _MiscItemsLocations, _package) : default;
        public IFallout4GroupGetter<IMiscItemGetter> MiscItems => _MiscItems ?? new Fallout4Group<MiscItem>(this);
        #endregion
        #region Statics
        private List<RangeInt64>? _StaticsLocations;
        private IFallout4GroupGetter<IStaticGetter>? _Statics => _StaticsLocations != null ? Fallout4GroupBinaryOverlay<IStaticGetter>.Fallout4GroupFactory(_stream, _StaticsLocations, _package) : default;
        public IFallout4GroupGetter<IStaticGetter> Statics => _Statics ?? new Fallout4Group<Static>(this);
        #endregion
        #region StaticCollections
        private List<RangeInt64>? _StaticCollectionsLocations;
        private IFallout4GroupGetter<IStaticCollectionGetter>? _StaticCollections => _StaticCollectionsLocations != null ? Fallout4GroupBinaryOverlay<IStaticCollectionGetter>.Fallout4GroupFactory(_stream, _StaticCollectionsLocations, _package) : default;
        public IFallout4GroupGetter<IStaticCollectionGetter> StaticCollections => _StaticCollections ?? new Fallout4Group<StaticCollection>(this);
        #endregion
        #region MovableStatics
        private List<RangeInt64>? _MovableStaticsLocations;
        private IFallout4GroupGetter<IMovableStaticGetter>? _MovableStatics => _MovableStaticsLocations != null ? Fallout4GroupBinaryOverlay<IMovableStaticGetter>.Fallout4GroupFactory(_stream, _MovableStaticsLocations, _package) : default;
        public IFallout4GroupGetter<IMovableStaticGetter> MovableStatics => _MovableStatics ?? new Fallout4Group<MovableStatic>(this);
        #endregion
        #region Grasses
        private List<RangeInt64>? _GrassesLocations;
        private IFallout4GroupGetter<IGrassGetter>? _Grasses => _GrassesLocations != null ? Fallout4GroupBinaryOverlay<IGrassGetter>.Fallout4GroupFactory(_stream, _GrassesLocations, _package) : default;
        public IFallout4GroupGetter<IGrassGetter> Grasses => _Grasses ?? new Fallout4Group<Grass>(this);
        #endregion
        #region Trees
        private List<RangeInt64>? _TreesLocations;
        private IFallout4GroupGetter<ITreeGetter>? _Trees => _TreesLocations != null ? Fallout4GroupBinaryOverlay<ITreeGetter>.Fallout4GroupFactory(_stream, _TreesLocations, _package) : default;
        public IFallout4GroupGetter<ITreeGetter> Trees => _Trees ?? new Fallout4Group<Tree>(this);
        #endregion
        #region Florae
        private List<RangeInt64>? _FloraeLocations;
        private IFallout4GroupGetter<IFloraGetter>? _Florae => _FloraeLocations != null ? Fallout4GroupBinaryOverlay<IFloraGetter>.Fallout4GroupFactory(_stream, _FloraeLocations, _package) : default;
        public IFallout4GroupGetter<IFloraGetter> Florae => _Florae ?? new Fallout4Group<Flora>(this);
        #endregion
        #region Furniture
        private List<RangeInt64>? _FurnitureLocations;
        private IFallout4GroupGetter<IFurnitureGetter>? _Furniture => _FurnitureLocations != null ? Fallout4GroupBinaryOverlay<IFurnitureGetter>.Fallout4GroupFactory(_stream, _FurnitureLocations, _package) : default;
        public IFallout4GroupGetter<IFurnitureGetter> Furniture => _Furniture ?? new Fallout4Group<Furniture>(this);
        #endregion
        #region Weapons
        private List<RangeInt64>? _WeaponsLocations;
        private IFallout4GroupGetter<IWeaponGetter>? _Weapons => _WeaponsLocations != null ? Fallout4GroupBinaryOverlay<IWeaponGetter>.Fallout4GroupFactory(_stream, _WeaponsLocations, _package) : default;
        public IFallout4GroupGetter<IWeaponGetter> Weapons => _Weapons ?? new Fallout4Group<Weapon>(this);
        #endregion
        #region Ammunitions
        private List<RangeInt64>? _AmmunitionsLocations;
        private IFallout4GroupGetter<IAmmunitionGetter>? _Ammunitions => _AmmunitionsLocations != null ? Fallout4GroupBinaryOverlay<IAmmunitionGetter>.Fallout4GroupFactory(_stream, _AmmunitionsLocations, _package) : default;
        public IFallout4GroupGetter<IAmmunitionGetter> Ammunitions => _Ammunitions ?? new Fallout4Group<Ammunition>(this);
        #endregion
        #region Npcs
        private List<RangeInt64>? _NpcsLocations;
        private IFallout4GroupGetter<INpcGetter>? _Npcs => _NpcsLocations != null ? Fallout4GroupBinaryOverlay<INpcGetter>.Fallout4GroupFactory(_stream, _NpcsLocations, _package) : default;
        public IFallout4GroupGetter<INpcGetter> Npcs => _Npcs ?? new Fallout4Group<Npc>(this);
        #endregion
        #region LeveledNpcs
        private List<RangeInt64>? _LeveledNpcsLocations;
        private IFallout4GroupGetter<ILeveledNpcGetter>? _LeveledNpcs => _LeveledNpcsLocations != null ? Fallout4GroupBinaryOverlay<ILeveledNpcGetter>.Fallout4GroupFactory(_stream, _LeveledNpcsLocations, _package) : default;
        public IFallout4GroupGetter<ILeveledNpcGetter> LeveledNpcs => _LeveledNpcs ?? new Fallout4Group<LeveledNpc>(this);
        #endregion
        #region Keys
        private List<RangeInt64>? _KeysLocations;
        private IFallout4GroupGetter<IKeyGetter>? _Keys => _KeysLocations != null ? Fallout4GroupBinaryOverlay<IKeyGetter>.Fallout4GroupFactory(_stream, _KeysLocations, _package) : default;
        public IFallout4GroupGetter<IKeyGetter> Keys => _Keys ?? new Fallout4Group<Key>(this);
        #endregion
        #region Ingestibles
        private List<RangeInt64>? _IngestiblesLocations;
        private IFallout4GroupGetter<IIngestibleGetter>? _Ingestibles => _IngestiblesLocations != null ? Fallout4GroupBinaryOverlay<IIngestibleGetter>.Fallout4GroupFactory(_stream, _IngestiblesLocations, _package) : default;
        public IFallout4GroupGetter<IIngestibleGetter> Ingestibles => _Ingestibles ?? new Fallout4Group<Ingestible>(this);
        #endregion
        #region IdleMarkers
        private List<RangeInt64>? _IdleMarkersLocations;
        private IFallout4GroupGetter<IIdleMarkerGetter>? _IdleMarkers => _IdleMarkersLocations != null ? Fallout4GroupBinaryOverlay<IIdleMarkerGetter>.Fallout4GroupFactory(_stream, _IdleMarkersLocations, _package) : default;
        public IFallout4GroupGetter<IIdleMarkerGetter> IdleMarkers => _IdleMarkers ?? new Fallout4Group<IdleMarker>(this);
        #endregion
        #region Holotapes
        private List<RangeInt64>? _HolotapesLocations;
        private IFallout4GroupGetter<IHolotapeGetter>? _Holotapes => _HolotapesLocations != null ? Fallout4GroupBinaryOverlay<IHolotapeGetter>.Fallout4GroupFactory(_stream, _HolotapesLocations, _package) : default;
        public IFallout4GroupGetter<IHolotapeGetter> Holotapes => _Holotapes ?? new Fallout4Group<Holotape>(this);
        #endregion
        #region Projectiles
        private List<RangeInt64>? _ProjectilesLocations;
        private IFallout4GroupGetter<IProjectileGetter>? _Projectiles => _ProjectilesLocations != null ? Fallout4GroupBinaryOverlay<IProjectileGetter>.Fallout4GroupFactory(_stream, _ProjectilesLocations, _package) : default;
        public IFallout4GroupGetter<IProjectileGetter> Projectiles => _Projectiles ?? new Fallout4Group<Projectile>(this);
        #endregion
        #region Hazards
        private List<RangeInt64>? _HazardsLocations;
        private IFallout4GroupGetter<IHazardGetter>? _Hazards => _HazardsLocations != null ? Fallout4GroupBinaryOverlay<IHazardGetter>.Fallout4GroupFactory(_stream, _HazardsLocations, _package) : default;
        public IFallout4GroupGetter<IHazardGetter> Hazards => _Hazards ?? new Fallout4Group<Hazard>(this);
        #endregion
        #region BendableSplines
        private List<RangeInt64>? _BendableSplinesLocations;
        private IFallout4GroupGetter<IBendableSplineGetter>? _BendableSplines => _BendableSplinesLocations != null ? Fallout4GroupBinaryOverlay<IBendableSplineGetter>.Fallout4GroupFactory(_stream, _BendableSplinesLocations, _package) : default;
        public IFallout4GroupGetter<IBendableSplineGetter> BendableSplines => _BendableSplines ?? new Fallout4Group<BendableSpline>(this);
        #endregion
        #region Terminals
        private List<RangeInt64>? _TerminalsLocations;
        private IFallout4GroupGetter<ITerminalGetter>? _Terminals => _TerminalsLocations != null ? Fallout4GroupBinaryOverlay<ITerminalGetter>.Fallout4GroupFactory(_stream, _TerminalsLocations, _package) : default;
        public IFallout4GroupGetter<ITerminalGetter> Terminals => _Terminals ?? new Fallout4Group<Terminal>(this);
        #endregion
        #region LeveledItems
        private List<RangeInt64>? _LeveledItemsLocations;
        private IFallout4GroupGetter<ILeveledItemGetter>? _LeveledItems => _LeveledItemsLocations != null ? Fallout4GroupBinaryOverlay<ILeveledItemGetter>.Fallout4GroupFactory(_stream, _LeveledItemsLocations, _package) : default;
        public IFallout4GroupGetter<ILeveledItemGetter> LeveledItems => _LeveledItems ?? new Fallout4Group<LeveledItem>(this);
        #endregion
        #region Weather
        private List<RangeInt64>? _WeatherLocations;
        private IFallout4GroupGetter<IWeatherGetter>? _Weather => _WeatherLocations != null ? Fallout4GroupBinaryOverlay<IWeatherGetter>.Fallout4GroupFactory(_stream, _WeatherLocations, _package) : default;
        public IFallout4GroupGetter<IWeatherGetter> Weather => _Weather ?? new Fallout4Group<Weather>(this);
        #endregion
        #region Climates
        private List<RangeInt64>? _ClimatesLocations;
        private IFallout4GroupGetter<IClimateGetter>? _Climates => _ClimatesLocations != null ? Fallout4GroupBinaryOverlay<IClimateGetter>.Fallout4GroupFactory(_stream, _ClimatesLocations, _package) : default;
        public IFallout4GroupGetter<IClimateGetter> Climates => _Climates ?? new Fallout4Group<Climate>(this);
        #endregion
        #region ShaderParticleGeometries
        private List<RangeInt64>? _ShaderParticleGeometriesLocations;
        private IFallout4GroupGetter<IShaderParticleGeometryGetter>? _ShaderParticleGeometries => _ShaderParticleGeometriesLocations != null ? Fallout4GroupBinaryOverlay<IShaderParticleGeometryGetter>.Fallout4GroupFactory(_stream, _ShaderParticleGeometriesLocations, _package) : default;
        public IFallout4GroupGetter<IShaderParticleGeometryGetter> ShaderParticleGeometries => _ShaderParticleGeometries ?? new Fallout4Group<ShaderParticleGeometry>(this);
        #endregion
        #region VisualEffects
        private List<RangeInt64>? _VisualEffectsLocations;
        private IFallout4GroupGetter<IVisualEffectGetter>? _VisualEffects => _VisualEffectsLocations != null ? Fallout4GroupBinaryOverlay<IVisualEffectGetter>.Fallout4GroupFactory(_stream, _VisualEffectsLocations, _package) : default;
        public IFallout4GroupGetter<IVisualEffectGetter> VisualEffects => _VisualEffects ?? new Fallout4Group<VisualEffect>(this);
        #endregion
        #region Regions
        private List<RangeInt64>? _RegionsLocations;
        private IFallout4GroupGetter<IRegionGetter>? _Regions => _RegionsLocations != null ? Fallout4GroupBinaryOverlay<IRegionGetter>.Fallout4GroupFactory(_stream, _RegionsLocations, _package) : default;
        public IFallout4GroupGetter<IRegionGetter> Regions => _Regions ?? new Fallout4Group<Region>(this);
        #endregion
        #region NavigationMeshInfoMaps
        private List<RangeInt64>? _NavigationMeshInfoMapsLocations;
        private IFallout4GroupGetter<INavigationMeshInfoMapGetter>? _NavigationMeshInfoMaps => _NavigationMeshInfoMapsLocations != null ? Fallout4GroupBinaryOverlay<INavigationMeshInfoMapGetter>.Fallout4GroupFactory(_stream, _NavigationMeshInfoMapsLocations, _package) : default;
        public IFallout4GroupGetter<INavigationMeshInfoMapGetter> NavigationMeshInfoMaps => _NavigationMeshInfoMaps ?? new Fallout4Group<NavigationMeshInfoMap>(this);
        #endregion
        #region Cells
        private RangeInt64? _CellsLocation;
        private IFallout4ListGroupGetter<ICellBlockGetter>? _Cells => _CellsLocation.HasValue ? Fallout4ListGroupBinaryOverlay<ICellBlockGetter>.Fallout4ListGroupFactory(PluginBinaryOverlay.LockExtractMemory(_stream, _CellsLocation!.Value.Min, _CellsLocation!.Value.Max), _package) : default;
        public IFallout4ListGroupGetter<ICellBlockGetter> Cells => _Cells ?? new Fallout4ListGroup<CellBlock>();
        #endregion
        #region Worldspaces
        private List<RangeInt64>? _WorldspacesLocations;
        private IFallout4GroupGetter<IWorldspaceGetter>? _Worldspaces => _WorldspacesLocations != null ? Fallout4GroupBinaryOverlay<IWorldspaceGetter>.Fallout4GroupFactory(_stream, _WorldspacesLocations, _package) : default;
        public IFallout4GroupGetter<IWorldspaceGetter> Worldspaces => _Worldspaces ?? new Fallout4Group<Worldspace>(this);
        #endregion
        #region Quests
        private List<RangeInt64>? _QuestsLocations;
        private IFallout4GroupGetter<IQuestGetter>? _Quests => _QuestsLocations != null ? Fallout4GroupBinaryOverlay<IQuestGetter>.Fallout4GroupFactory(_stream, _QuestsLocations, _package) : default;
        public IFallout4GroupGetter<IQuestGetter> Quests => _Quests ?? new Fallout4Group<Quest>(this);
        #endregion
        #region IdleAnimations
        private List<RangeInt64>? _IdleAnimationsLocations;
        private IFallout4GroupGetter<IIdleAnimationGetter>? _IdleAnimations => _IdleAnimationsLocations != null ? Fallout4GroupBinaryOverlay<IIdleAnimationGetter>.Fallout4GroupFactory(_stream, _IdleAnimationsLocations, _package) : default;
        public IFallout4GroupGetter<IIdleAnimationGetter> IdleAnimations => _IdleAnimations ?? new Fallout4Group<IdleAnimation>(this);
        #endregion
        #region Packages
        private List<RangeInt64>? _PackagesLocations;
        private IFallout4GroupGetter<IPackageGetter>? _Packages => _PackagesLocations != null ? Fallout4GroupBinaryOverlay<IPackageGetter>.Fallout4GroupFactory(_stream, _PackagesLocations, _package) : default;
        public IFallout4GroupGetter<IPackageGetter> Packages => _Packages ?? new Fallout4Group<Package>(this);
        #endregion
        #region CombatStyles
        private List<RangeInt64>? _CombatStylesLocations;
        private IFallout4GroupGetter<ICombatStyleGetter>? _CombatStyles => _CombatStylesLocations != null ? Fallout4GroupBinaryOverlay<ICombatStyleGetter>.Fallout4GroupFactory(_stream, _CombatStylesLocations, _package) : default;
        public IFallout4GroupGetter<ICombatStyleGetter> CombatStyles => _CombatStyles ?? new Fallout4Group<CombatStyle>(this);
        #endregion
        #region LoadScreens
        private List<RangeInt64>? _LoadScreensLocations;
        private IFallout4GroupGetter<ILoadScreenGetter>? _LoadScreens => _LoadScreensLocations != null ? Fallout4GroupBinaryOverlay<ILoadScreenGetter>.Fallout4GroupFactory(_stream, _LoadScreensLocations, _package) : default;
        public IFallout4GroupGetter<ILoadScreenGetter> LoadScreens => _LoadScreens ?? new Fallout4Group<LoadScreen>(this);
        #endregion
        #region AnimatedObjects
        private List<RangeInt64>? _AnimatedObjectsLocations;
        private IFallout4GroupGetter<IAnimatedObjectGetter>? _AnimatedObjects => _AnimatedObjectsLocations != null ? Fallout4GroupBinaryOverlay<IAnimatedObjectGetter>.Fallout4GroupFactory(_stream, _AnimatedObjectsLocations, _package) : default;
        public IFallout4GroupGetter<IAnimatedObjectGetter> AnimatedObjects => _AnimatedObjects ?? new Fallout4Group<AnimatedObject>(this);
        #endregion
        #region Waters
        private List<RangeInt64>? _WatersLocations;
        private IFallout4GroupGetter<IWaterGetter>? _Waters => _WatersLocations != null ? Fallout4GroupBinaryOverlay<IWaterGetter>.Fallout4GroupFactory(_stream, _WatersLocations, _package) : default;
        public IFallout4GroupGetter<IWaterGetter> Waters => _Waters ?? new Fallout4Group<Water>(this);
        #endregion
        #region EffectShaders
        private List<RangeInt64>? _EffectShadersLocations;
        private IFallout4GroupGetter<IEffectShaderGetter>? _EffectShaders => _EffectShadersLocations != null ? Fallout4GroupBinaryOverlay<IEffectShaderGetter>.Fallout4GroupFactory(_stream, _EffectShadersLocations, _package) : default;
        public IFallout4GroupGetter<IEffectShaderGetter> EffectShaders => _EffectShaders ?? new Fallout4Group<EffectShader>(this);
        #endregion
        #region Explosions
        private List<RangeInt64>? _ExplosionsLocations;
        private IFallout4GroupGetter<IExplosionGetter>? _Explosions => _ExplosionsLocations != null ? Fallout4GroupBinaryOverlay<IExplosionGetter>.Fallout4GroupFactory(_stream, _ExplosionsLocations, _package) : default;
        public IFallout4GroupGetter<IExplosionGetter> Explosions => _Explosions ?? new Fallout4Group<Explosion>(this);
        #endregion
        #region Debris
        private List<RangeInt64>? _DebrisLocations;
        private IFallout4GroupGetter<IDebrisGetter>? _Debris => _DebrisLocations != null ? Fallout4GroupBinaryOverlay<IDebrisGetter>.Fallout4GroupFactory(_stream, _DebrisLocations, _package) : default;
        public IFallout4GroupGetter<IDebrisGetter> Debris => _Debris ?? new Fallout4Group<Debris>(this);
        #endregion
        #region ImageSpaces
        private List<RangeInt64>? _ImageSpacesLocations;
        private IFallout4GroupGetter<IImageSpaceGetter>? _ImageSpaces => _ImageSpacesLocations != null ? Fallout4GroupBinaryOverlay<IImageSpaceGetter>.Fallout4GroupFactory(_stream, _ImageSpacesLocations, _package) : default;
        public IFallout4GroupGetter<IImageSpaceGetter> ImageSpaces => _ImageSpaces ?? new Fallout4Group<ImageSpace>(this);
        #endregion
        #region ImageSpaceAdapters
        private List<RangeInt64>? _ImageSpaceAdaptersLocations;
        private IFallout4GroupGetter<IImageSpaceAdapterGetter>? _ImageSpaceAdapters => _ImageSpaceAdaptersLocations != null ? Fallout4GroupBinaryOverlay<IImageSpaceAdapterGetter>.Fallout4GroupFactory(_stream, _ImageSpaceAdaptersLocations, _package) : default;
        public IFallout4GroupGetter<IImageSpaceAdapterGetter> ImageSpaceAdapters => _ImageSpaceAdapters ?? new Fallout4Group<ImageSpaceAdapter>(this);
        #endregion
        #region FormLists
        private List<RangeInt64>? _FormListsLocations;
        private IFallout4GroupGetter<IFormListGetter>? _FormLists => _FormListsLocations != null ? Fallout4GroupBinaryOverlay<IFormListGetter>.Fallout4GroupFactory(_stream, _FormListsLocations, _package) : default;
        public IFallout4GroupGetter<IFormListGetter> FormLists => _FormLists ?? new Fallout4Group<FormList>(this);
        #endregion
        #region Perks
        private List<RangeInt64>? _PerksLocations;
        private IFallout4GroupGetter<IPerkGetter>? _Perks => _PerksLocations != null ? Fallout4GroupBinaryOverlay<IPerkGetter>.Fallout4GroupFactory(_stream, _PerksLocations, _package) : default;
        public IFallout4GroupGetter<IPerkGetter> Perks => _Perks ?? new Fallout4Group<Perk>(this);
        #endregion
        #region BodyParts
        private List<RangeInt64>? _BodyPartsLocations;
        private IFallout4GroupGetter<IBodyPartDataGetter>? _BodyParts => _BodyPartsLocations != null ? Fallout4GroupBinaryOverlay<IBodyPartDataGetter>.Fallout4GroupFactory(_stream, _BodyPartsLocations, _package) : default;
        public IFallout4GroupGetter<IBodyPartDataGetter> BodyParts => _BodyParts ?? new Fallout4Group<BodyPartData>(this);
        #endregion
        #region AddonNodes
        private List<RangeInt64>? _AddonNodesLocations;
        private IFallout4GroupGetter<IAddonNodeGetter>? _AddonNodes => _AddonNodesLocations != null ? Fallout4GroupBinaryOverlay<IAddonNodeGetter>.Fallout4GroupFactory(_stream, _AddonNodesLocations, _package) : default;
        public IFallout4GroupGetter<IAddonNodeGetter> AddonNodes => _AddonNodes ?? new Fallout4Group<AddonNode>(this);
        #endregion
        #region ActorValueInformation
        private List<RangeInt64>? _ActorValueInformationLocations;
        private IFallout4GroupGetter<IActorValueInformationGetter>? _ActorValueInformation => _ActorValueInformationLocations != null ? Fallout4GroupBinaryOverlay<IActorValueInformationGetter>.Fallout4GroupFactory(_stream, _ActorValueInformationLocations, _package) : default;
        public IFallout4GroupGetter<IActorValueInformationGetter> ActorValueInformation => _ActorValueInformation ?? new Fallout4Group<ActorValueInformation>(this);
        #endregion
        #region CameraShots
        private List<RangeInt64>? _CameraShotsLocations;
        private IFallout4GroupGetter<ICameraShotGetter>? _CameraShots => _CameraShotsLocations != null ? Fallout4GroupBinaryOverlay<ICameraShotGetter>.Fallout4GroupFactory(_stream, _CameraShotsLocations, _package) : default;
        public IFallout4GroupGetter<ICameraShotGetter> CameraShots => _CameraShots ?? new Fallout4Group<CameraShot>(this);
        #endregion
        #region CameraPaths
        private List<RangeInt64>? _CameraPathsLocations;
        private IFallout4GroupGetter<ICameraPathGetter>? _CameraPaths => _CameraPathsLocations != null ? Fallout4GroupBinaryOverlay<ICameraPathGetter>.Fallout4GroupFactory(_stream, _CameraPathsLocations, _package) : default;
        public IFallout4GroupGetter<ICameraPathGetter> CameraPaths => _CameraPaths ?? new Fallout4Group<CameraPath>(this);
        #endregion
        #region VoiceTypes
        private List<RangeInt64>? _VoiceTypesLocations;
        private IFallout4GroupGetter<IVoiceTypeGetter>? _VoiceTypes => _VoiceTypesLocations != null ? Fallout4GroupBinaryOverlay<IVoiceTypeGetter>.Fallout4GroupFactory(_stream, _VoiceTypesLocations, _package) : default;
        public IFallout4GroupGetter<IVoiceTypeGetter> VoiceTypes => _VoiceTypes ?? new Fallout4Group<VoiceType>(this);
        #endregion
        #region MaterialTypes
        private List<RangeInt64>? _MaterialTypesLocations;
        private IFallout4GroupGetter<IMaterialTypeGetter>? _MaterialTypes => _MaterialTypesLocations != null ? Fallout4GroupBinaryOverlay<IMaterialTypeGetter>.Fallout4GroupFactory(_stream, _MaterialTypesLocations, _package) : default;
        public IFallout4GroupGetter<IMaterialTypeGetter> MaterialTypes => _MaterialTypes ?? new Fallout4Group<MaterialType>(this);
        #endregion
        #region Impacts
        private List<RangeInt64>? _ImpactsLocations;
        private IFallout4GroupGetter<IImpactGetter>? _Impacts => _ImpactsLocations != null ? Fallout4GroupBinaryOverlay<IImpactGetter>.Fallout4GroupFactory(_stream, _ImpactsLocations, _package) : default;
        public IFallout4GroupGetter<IImpactGetter> Impacts => _Impacts ?? new Fallout4Group<Impact>(this);
        #endregion
        #region ImpactDataSets
        private List<RangeInt64>? _ImpactDataSetsLocations;
        private IFallout4GroupGetter<IImpactDataSetGetter>? _ImpactDataSets => _ImpactDataSetsLocations != null ? Fallout4GroupBinaryOverlay<IImpactDataSetGetter>.Fallout4GroupFactory(_stream, _ImpactDataSetsLocations, _package) : default;
        public IFallout4GroupGetter<IImpactDataSetGetter> ImpactDataSets => _ImpactDataSets ?? new Fallout4Group<ImpactDataSet>(this);
        #endregion
        #region ArmorAddons
        private List<RangeInt64>? _ArmorAddonsLocations;
        private IFallout4GroupGetter<IArmorAddonGetter>? _ArmorAddons => _ArmorAddonsLocations != null ? Fallout4GroupBinaryOverlay<IArmorAddonGetter>.Fallout4GroupFactory(_stream, _ArmorAddonsLocations, _package) : default;
        public IFallout4GroupGetter<IArmorAddonGetter> ArmorAddons => _ArmorAddons ?? new Fallout4Group<ArmorAddon>(this);
        #endregion
        #region EncounterZones
        private List<RangeInt64>? _EncounterZonesLocations;
        private IFallout4GroupGetter<IEncounterZoneGetter>? _EncounterZones => _EncounterZonesLocations != null ? Fallout4GroupBinaryOverlay<IEncounterZoneGetter>.Fallout4GroupFactory(_stream, _EncounterZonesLocations, _package) : default;
        public IFallout4GroupGetter<IEncounterZoneGetter> EncounterZones => _EncounterZones ?? new Fallout4Group<EncounterZone>(this);
        #endregion
        #region Locations
        private List<RangeInt64>? _LocationsLocations;
        private IFallout4GroupGetter<ILocationGetter>? _Locations => _LocationsLocations != null ? Fallout4GroupBinaryOverlay<ILocationGetter>.Fallout4GroupFactory(_stream, _LocationsLocations, _package) : default;
        public IFallout4GroupGetter<ILocationGetter> Locations => _Locations ?? new Fallout4Group<Location>(this);
        #endregion
        #region Messages
        private List<RangeInt64>? _MessagesLocations;
        private IFallout4GroupGetter<IMessageGetter>? _Messages => _MessagesLocations != null ? Fallout4GroupBinaryOverlay<IMessageGetter>.Fallout4GroupFactory(_stream, _MessagesLocations, _package) : default;
        public IFallout4GroupGetter<IMessageGetter> Messages => _Messages ?? new Fallout4Group<Message>(this);
        #endregion
        #region DefaultObjectManagers
        private List<RangeInt64>? _DefaultObjectManagersLocations;
        private IFallout4GroupGetter<IDefaultObjectManagerGetter>? _DefaultObjectManagers => _DefaultObjectManagersLocations != null ? Fallout4GroupBinaryOverlay<IDefaultObjectManagerGetter>.Fallout4GroupFactory(_stream, _DefaultObjectManagersLocations, _package) : default;
        public IFallout4GroupGetter<IDefaultObjectManagerGetter> DefaultObjectManagers => _DefaultObjectManagers ?? new Fallout4Group<DefaultObjectManager>(this);
        #endregion
        #region DefaultObjects
        private List<RangeInt64>? _DefaultObjectsLocations;
        private IFallout4GroupGetter<IDefaultObjectGetter>? _DefaultObjects => _DefaultObjectsLocations != null ? Fallout4GroupBinaryOverlay<IDefaultObjectGetter>.Fallout4GroupFactory(_stream, _DefaultObjectsLocations, _package) : default;
        public IFallout4GroupGetter<IDefaultObjectGetter> DefaultObjects => _DefaultObjects ?? new Fallout4Group<DefaultObject>(this);
        #endregion
        #region LightingTemplates
        private List<RangeInt64>? _LightingTemplatesLocations;
        private IFallout4GroupGetter<ILightingTemplateGetter>? _LightingTemplates => _LightingTemplatesLocations != null ? Fallout4GroupBinaryOverlay<ILightingTemplateGetter>.Fallout4GroupFactory(_stream, _LightingTemplatesLocations, _package) : default;
        public IFallout4GroupGetter<ILightingTemplateGetter> LightingTemplates => _LightingTemplates ?? new Fallout4Group<LightingTemplate>(this);
        #endregion
        #region MusicTypes
        private List<RangeInt64>? _MusicTypesLocations;
        private IFallout4GroupGetter<IMusicTypeGetter>? _MusicTypes => _MusicTypesLocations != null ? Fallout4GroupBinaryOverlay<IMusicTypeGetter>.Fallout4GroupFactory(_stream, _MusicTypesLocations, _package) : default;
        public IFallout4GroupGetter<IMusicTypeGetter> MusicTypes => _MusicTypes ?? new Fallout4Group<MusicType>(this);
        #endregion
        #region Footsteps
        private List<RangeInt64>? _FootstepsLocations;
        private IFallout4GroupGetter<IFootstepGetter>? _Footsteps => _FootstepsLocations != null ? Fallout4GroupBinaryOverlay<IFootstepGetter>.Fallout4GroupFactory(_stream, _FootstepsLocations, _package) : default;
        public IFallout4GroupGetter<IFootstepGetter> Footsteps => _Footsteps ?? new Fallout4Group<Footstep>(this);
        #endregion
        #region FootstepSets
        private List<RangeInt64>? _FootstepSetsLocations;
        private IFallout4GroupGetter<IFootstepSetGetter>? _FootstepSets => _FootstepSetsLocations != null ? Fallout4GroupBinaryOverlay<IFootstepSetGetter>.Fallout4GroupFactory(_stream, _FootstepSetsLocations, _package) : default;
        public IFallout4GroupGetter<IFootstepSetGetter> FootstepSets => _FootstepSets ?? new Fallout4Group<FootstepSet>(this);
        #endregion
        #region StoryManagerBranchNodes
        private List<RangeInt64>? _StoryManagerBranchNodesLocations;
        private IFallout4GroupGetter<IStoryManagerBranchNodeGetter>? _StoryManagerBranchNodes => _StoryManagerBranchNodesLocations != null ? Fallout4GroupBinaryOverlay<IStoryManagerBranchNodeGetter>.Fallout4GroupFactory(_stream, _StoryManagerBranchNodesLocations, _package) : default;
        public IFallout4GroupGetter<IStoryManagerBranchNodeGetter> StoryManagerBranchNodes => _StoryManagerBranchNodes ?? new Fallout4Group<StoryManagerBranchNode>(this);
        #endregion
        #region StoryManagerQuestNodes
        private List<RangeInt64>? _StoryManagerQuestNodesLocations;
        private IFallout4GroupGetter<IStoryManagerQuestNodeGetter>? _StoryManagerQuestNodes => _StoryManagerQuestNodesLocations != null ? Fallout4GroupBinaryOverlay<IStoryManagerQuestNodeGetter>.Fallout4GroupFactory(_stream, _StoryManagerQuestNodesLocations, _package) : default;
        public IFallout4GroupGetter<IStoryManagerQuestNodeGetter> StoryManagerQuestNodes => _StoryManagerQuestNodes ?? new Fallout4Group<StoryManagerQuestNode>(this);
        #endregion
        #region StoryManagerEventNodes
        private List<RangeInt64>? _StoryManagerEventNodesLocations;
        private IFallout4GroupGetter<IStoryManagerEventNodeGetter>? _StoryManagerEventNodes => _StoryManagerEventNodesLocations != null ? Fallout4GroupBinaryOverlay<IStoryManagerEventNodeGetter>.Fallout4GroupFactory(_stream, _StoryManagerEventNodesLocations, _package) : default;
        public IFallout4GroupGetter<IStoryManagerEventNodeGetter> StoryManagerEventNodes => _StoryManagerEventNodes ?? new Fallout4Group<StoryManagerEventNode>(this);
        #endregion
        #region MusicTracks
        private List<RangeInt64>? _MusicTracksLocations;
        private IFallout4GroupGetter<IMusicTrackGetter>? _MusicTracks => _MusicTracksLocations != null ? Fallout4GroupBinaryOverlay<IMusicTrackGetter>.Fallout4GroupFactory(_stream, _MusicTracksLocations, _package) : default;
        public IFallout4GroupGetter<IMusicTrackGetter> MusicTracks => _MusicTracks ?? new Fallout4Group<MusicTrack>(this);
        #endregion
        #region DialogViews
        private List<RangeInt64>? _DialogViewsLocations;
        private IFallout4GroupGetter<IDialogViewGetter>? _DialogViews => _DialogViewsLocations != null ? Fallout4GroupBinaryOverlay<IDialogViewGetter>.Fallout4GroupFactory(_stream, _DialogViewsLocations, _package) : default;
        public IFallout4GroupGetter<IDialogViewGetter> DialogViews => _DialogViews ?? new Fallout4Group<DialogView>(this);
        #endregion
        #region EquipTypes
        private List<RangeInt64>? _EquipTypesLocations;
        private IFallout4GroupGetter<IEquipTypeGetter>? _EquipTypes => _EquipTypesLocations != null ? Fallout4GroupBinaryOverlay<IEquipTypeGetter>.Fallout4GroupFactory(_stream, _EquipTypesLocations, _package) : default;
        public IFallout4GroupGetter<IEquipTypeGetter> EquipTypes => _EquipTypes ?? new Fallout4Group<EquipType>(this);
        #endregion
        #region Relationships
        private List<RangeInt64>? _RelationshipsLocations;
        private IFallout4GroupGetter<IRelationshipGetter>? _Relationships => _RelationshipsLocations != null ? Fallout4GroupBinaryOverlay<IRelationshipGetter>.Fallout4GroupFactory(_stream, _RelationshipsLocations, _package) : default;
        public IFallout4GroupGetter<IRelationshipGetter> Relationships => _Relationships ?? new Fallout4Group<Relationship>(this);
        #endregion
        #region AssociationTypes
        private List<RangeInt64>? _AssociationTypesLocations;
        private IFallout4GroupGetter<IAssociationTypeGetter>? _AssociationTypes => _AssociationTypesLocations != null ? Fallout4GroupBinaryOverlay<IAssociationTypeGetter>.Fallout4GroupFactory(_stream, _AssociationTypesLocations, _package) : default;
        public IFallout4GroupGetter<IAssociationTypeGetter> AssociationTypes => _AssociationTypes ?? new Fallout4Group<AssociationType>(this);
        #endregion
        #region Outfits
        private List<RangeInt64>? _OutfitsLocations;
        private IFallout4GroupGetter<IOutfitGetter>? _Outfits => _OutfitsLocations != null ? Fallout4GroupBinaryOverlay<IOutfitGetter>.Fallout4GroupFactory(_stream, _OutfitsLocations, _package) : default;
        public IFallout4GroupGetter<IOutfitGetter> Outfits => _Outfits ?? new Fallout4Group<Outfit>(this);
        #endregion
        #region ArtObjects
        private List<RangeInt64>? _ArtObjectsLocations;
        private IFallout4GroupGetter<IArtObjectGetter>? _ArtObjects => _ArtObjectsLocations != null ? Fallout4GroupBinaryOverlay<IArtObjectGetter>.Fallout4GroupFactory(_stream, _ArtObjectsLocations, _package) : default;
        public IFallout4GroupGetter<IArtObjectGetter> ArtObjects => _ArtObjects ?? new Fallout4Group<ArtObject>(this);
        #endregion
        #region MaterialObjects
        private List<RangeInt64>? _MaterialObjectsLocations;
        private IFallout4GroupGetter<IMaterialObjectGetter>? _MaterialObjects => _MaterialObjectsLocations != null ? Fallout4GroupBinaryOverlay<IMaterialObjectGetter>.Fallout4GroupFactory(_stream, _MaterialObjectsLocations, _package) : default;
        public IFallout4GroupGetter<IMaterialObjectGetter> MaterialObjects => _MaterialObjects ?? new Fallout4Group<MaterialObject>(this);
        #endregion
        #region MovementTypes
        private List<RangeInt64>? _MovementTypesLocations;
        private IFallout4GroupGetter<IMovementTypeGetter>? _MovementTypes => _MovementTypesLocations != null ? Fallout4GroupBinaryOverlay<IMovementTypeGetter>.Fallout4GroupFactory(_stream, _MovementTypesLocations, _package) : default;
        public IFallout4GroupGetter<IMovementTypeGetter> MovementTypes => _MovementTypes ?? new Fallout4Group<MovementType>(this);
        #endregion
        #region SoundDescriptors
        private List<RangeInt64>? _SoundDescriptorsLocations;
        private IFallout4GroupGetter<ISoundDescriptorGetter>? _SoundDescriptors => _SoundDescriptorsLocations != null ? Fallout4GroupBinaryOverlay<ISoundDescriptorGetter>.Fallout4GroupFactory(_stream, _SoundDescriptorsLocations, _package) : default;
        public IFallout4GroupGetter<ISoundDescriptorGetter> SoundDescriptors => _SoundDescriptors ?? new Fallout4Group<SoundDescriptor>(this);
        #endregion
        #region SoundCategories
        private List<RangeInt64>? _SoundCategoriesLocations;
        private IFallout4GroupGetter<ISoundCategoryGetter>? _SoundCategories => _SoundCategoriesLocations != null ? Fallout4GroupBinaryOverlay<ISoundCategoryGetter>.Fallout4GroupFactory(_stream, _SoundCategoriesLocations, _package) : default;
        public IFallout4GroupGetter<ISoundCategoryGetter> SoundCategories => _SoundCategories ?? new Fallout4Group<SoundCategory>(this);
        #endregion
        #region SoundOutputModels
        private List<RangeInt64>? _SoundOutputModelsLocations;
        private IFallout4GroupGetter<ISoundOutputModelGetter>? _SoundOutputModels => _SoundOutputModelsLocations != null ? Fallout4GroupBinaryOverlay<ISoundOutputModelGetter>.Fallout4GroupFactory(_stream, _SoundOutputModelsLocations, _package) : default;
        public IFallout4GroupGetter<ISoundOutputModelGetter> SoundOutputModels => _SoundOutputModels ?? new Fallout4Group<SoundOutputModel>(this);
        #endregion
        #region CollisionLayers
        private List<RangeInt64>? _CollisionLayersLocations;
        private IFallout4GroupGetter<ICollisionLayerGetter>? _CollisionLayers => _CollisionLayersLocations != null ? Fallout4GroupBinaryOverlay<ICollisionLayerGetter>.Fallout4GroupFactory(_stream, _CollisionLayersLocations, _package) : default;
        public IFallout4GroupGetter<ICollisionLayerGetter> CollisionLayers => _CollisionLayers ?? new Fallout4Group<CollisionLayer>(this);
        #endregion
        #region Colors
        private List<RangeInt64>? _ColorsLocations;
        private IFallout4GroupGetter<IColorRecordGetter>? _Colors => _ColorsLocations != null ? Fallout4GroupBinaryOverlay<IColorRecordGetter>.Fallout4GroupFactory(_stream, _ColorsLocations, _package) : default;
        public IFallout4GroupGetter<IColorRecordGetter> Colors => _Colors ?? new Fallout4Group<ColorRecord>(this);
        #endregion
        #region ReverbParameters
        private List<RangeInt64>? _ReverbParametersLocations;
        private IFallout4GroupGetter<IReverbParametersGetter>? _ReverbParameters => _ReverbParametersLocations != null ? Fallout4GroupBinaryOverlay<IReverbParametersGetter>.Fallout4GroupFactory(_stream, _ReverbParametersLocations, _package) : default;
        public IFallout4GroupGetter<IReverbParametersGetter> ReverbParameters => _ReverbParameters ?? new Fallout4Group<ReverbParameters>(this);
        #endregion
        #region PackIns
        private List<RangeInt64>? _PackInsLocations;
        private IFallout4GroupGetter<IPackInGetter>? _PackIns => _PackInsLocations != null ? Fallout4GroupBinaryOverlay<IPackInGetter>.Fallout4GroupFactory(_stream, _PackInsLocations, _package) : default;
        public IFallout4GroupGetter<IPackInGetter> PackIns => _PackIns ?? new Fallout4Group<PackIn>(this);
        #endregion
        #region ReferenceGroups
        private List<RangeInt64>? _ReferenceGroupsLocations;
        private IFallout4GroupGetter<IReferenceGroupGetter>? _ReferenceGroups => _ReferenceGroupsLocations != null ? Fallout4GroupBinaryOverlay<IReferenceGroupGetter>.Fallout4GroupFactory(_stream, _ReferenceGroupsLocations, _package) : default;
        public IFallout4GroupGetter<IReferenceGroupGetter> ReferenceGroups => _ReferenceGroups ?? new Fallout4Group<ReferenceGroup>(this);
        #endregion
        #region AimModels
        private List<RangeInt64>? _AimModelsLocations;
        private IFallout4GroupGetter<IAimModelGetter>? _AimModels => _AimModelsLocations != null ? Fallout4GroupBinaryOverlay<IAimModelGetter>.Fallout4GroupFactory(_stream, _AimModelsLocations, _package) : default;
        public IFallout4GroupGetter<IAimModelGetter> AimModels => _AimModels ?? new Fallout4Group<AimModel>(this);
        #endregion
        #region Layers
        private List<RangeInt64>? _LayersLocations;
        private IFallout4GroupGetter<ILayerGetter>? _Layers => _LayersLocations != null ? Fallout4GroupBinaryOverlay<ILayerGetter>.Fallout4GroupFactory(_stream, _LayersLocations, _package) : default;
        public IFallout4GroupGetter<ILayerGetter> Layers => _Layers ?? new Fallout4Group<Layer>(this);
        #endregion
        #region ConstructibleObjects
        private List<RangeInt64>? _ConstructibleObjectsLocations;
        private IFallout4GroupGetter<IConstructibleObjectGetter>? _ConstructibleObjects => _ConstructibleObjectsLocations != null ? Fallout4GroupBinaryOverlay<IConstructibleObjectGetter>.Fallout4GroupFactory(_stream, _ConstructibleObjectsLocations, _package) : default;
        public IFallout4GroupGetter<IConstructibleObjectGetter> ConstructibleObjects => _ConstructibleObjects ?? new Fallout4Group<ConstructibleObject>(this);
        #endregion
        #region ObjectModifications
        private List<RangeInt64>? _ObjectModificationsLocations;
        private IFallout4GroupGetter<IAObjectModificationGetter>? _ObjectModifications => _ObjectModificationsLocations != null ? Fallout4GroupBinaryOverlay<IAObjectModificationGetter>.Fallout4GroupFactory(_stream, _ObjectModificationsLocations, _package) : default;
        public IFallout4GroupGetter<IAObjectModificationGetter> ObjectModifications => _ObjectModifications ?? new Fallout4Group<AObjectModification>(this);
        #endregion
        #region MaterialSwaps
        private List<RangeInt64>? _MaterialSwapsLocations;
        private IFallout4GroupGetter<IMaterialSwapGetter>? _MaterialSwaps => _MaterialSwapsLocations != null ? Fallout4GroupBinaryOverlay<IMaterialSwapGetter>.Fallout4GroupFactory(_stream, _MaterialSwapsLocations, _package) : default;
        public IFallout4GroupGetter<IMaterialSwapGetter> MaterialSwaps => _MaterialSwaps ?? new Fallout4Group<MaterialSwap>(this);
        #endregion
        #region Zooms
        private List<RangeInt64>? _ZoomsLocations;
        private IFallout4GroupGetter<IZoomGetter>? _Zooms => _ZoomsLocations != null ? Fallout4GroupBinaryOverlay<IZoomGetter>.Fallout4GroupFactory(_stream, _ZoomsLocations, _package) : default;
        public IFallout4GroupGetter<IZoomGetter> Zooms => _Zooms ?? new Fallout4Group<Zoom>(this);
        #endregion
        #region InstanceNamingRules
        private List<RangeInt64>? _InstanceNamingRulesLocations;
        private IFallout4GroupGetter<IInstanceNamingRulesGetter>? _InstanceNamingRules => _InstanceNamingRulesLocations != null ? Fallout4GroupBinaryOverlay<IInstanceNamingRulesGetter>.Fallout4GroupFactory(_stream, _InstanceNamingRulesLocations, _package) : default;
        public IFallout4GroupGetter<IInstanceNamingRulesGetter> InstanceNamingRules => _InstanceNamingRules ?? new Fallout4Group<InstanceNamingRules>(this);
        #endregion
        #region SoundKeywordMappings
        private List<RangeInt64>? _SoundKeywordMappingsLocations;
        private IFallout4GroupGetter<ISoundKeywordMappingGetter>? _SoundKeywordMappings => _SoundKeywordMappingsLocations != null ? Fallout4GroupBinaryOverlay<ISoundKeywordMappingGetter>.Fallout4GroupFactory(_stream, _SoundKeywordMappingsLocations, _package) : default;
        public IFallout4GroupGetter<ISoundKeywordMappingGetter> SoundKeywordMappings => _SoundKeywordMappings ?? new Fallout4Group<SoundKeywordMapping>(this);
        #endregion
        #region AudioEffectChains
        private List<RangeInt64>? _AudioEffectChainsLocations;
        private IFallout4GroupGetter<IAudioEffectChainGetter>? _AudioEffectChains => _AudioEffectChainsLocations != null ? Fallout4GroupBinaryOverlay<IAudioEffectChainGetter>.Fallout4GroupFactory(_stream, _AudioEffectChainsLocations, _package) : default;
        public IFallout4GroupGetter<IAudioEffectChainGetter> AudioEffectChains => _AudioEffectChains ?? new Fallout4Group<AudioEffectChain>(this);
        #endregion
        #region SceneCollections
        private List<RangeInt64>? _SceneCollectionsLocations;
        private IFallout4GroupGetter<ISceneCollectionGetter>? _SceneCollections => _SceneCollectionsLocations != null ? Fallout4GroupBinaryOverlay<ISceneCollectionGetter>.Fallout4GroupFactory(_stream, _SceneCollectionsLocations, _package) : default;
        public IFallout4GroupGetter<ISceneCollectionGetter> SceneCollections => _SceneCollections ?? new Fallout4Group<SceneCollection>(this);
        #endregion
        #region AttractionRules
        private List<RangeInt64>? _AttractionRulesLocations;
        private IFallout4GroupGetter<IAttractionRuleGetter>? _AttractionRules => _AttractionRulesLocations != null ? Fallout4GroupBinaryOverlay<IAttractionRuleGetter>.Fallout4GroupFactory(_stream, _AttractionRulesLocations, _package) : default;
        public IFallout4GroupGetter<IAttractionRuleGetter> AttractionRules => _AttractionRules ?? new Fallout4Group<AttractionRule>(this);
        #endregion
        #region AudioCategorySnapshots
        private List<RangeInt64>? _AudioCategorySnapshotsLocations;
        private IFallout4GroupGetter<IAudioCategorySnapshotGetter>? _AudioCategorySnapshots => _AudioCategorySnapshotsLocations != null ? Fallout4GroupBinaryOverlay<IAudioCategorySnapshotGetter>.Fallout4GroupFactory(_stream, _AudioCategorySnapshotsLocations, _package) : default;
        public IFallout4GroupGetter<IAudioCategorySnapshotGetter> AudioCategorySnapshots => _AudioCategorySnapshots ?? new Fallout4Group<AudioCategorySnapshot>(this);
        #endregion
        #region AnimationSoundTagSets
        private List<RangeInt64>? _AnimationSoundTagSetsLocations;
        private IFallout4GroupGetter<IAnimationSoundTagSetGetter>? _AnimationSoundTagSets => _AnimationSoundTagSetsLocations != null ? Fallout4GroupBinaryOverlay<IAnimationSoundTagSetGetter>.Fallout4GroupFactory(_stream, _AnimationSoundTagSetsLocations, _package) : default;
        public IFallout4GroupGetter<IAnimationSoundTagSetGetter> AnimationSoundTagSets => _AnimationSoundTagSets ?? new Fallout4Group<AnimationSoundTagSet>(this);
        #endregion
        #region NavigationMeshObstacleManagers
        private List<RangeInt64>? _NavigationMeshObstacleManagersLocations;
        private IFallout4GroupGetter<INavigationMeshObstacleManagerGetter>? _NavigationMeshObstacleManagers => _NavigationMeshObstacleManagersLocations != null ? Fallout4GroupBinaryOverlay<INavigationMeshObstacleManagerGetter>.Fallout4GroupFactory(_stream, _NavigationMeshObstacleManagersLocations, _package) : default;
        public IFallout4GroupGetter<INavigationMeshObstacleManagerGetter> NavigationMeshObstacleManagers => _NavigationMeshObstacleManagers ?? new Fallout4Group<NavigationMeshObstacleManager>(this);
        #endregion
        #region LensFlares
        private List<RangeInt64>? _LensFlaresLocations;
        private IFallout4GroupGetter<ILensFlareGetter>? _LensFlares => _LensFlaresLocations != null ? Fallout4GroupBinaryOverlay<ILensFlareGetter>.Fallout4GroupFactory(_stream, _LensFlaresLocations, _package) : default;
        public IFallout4GroupGetter<ILensFlareGetter> LensFlares => _LensFlares ?? new Fallout4Group<LensFlare>(this);
        #endregion
        #region GodRays
        private List<RangeInt64>? _GodRaysLocations;
        private IFallout4GroupGetter<IGodRaysGetter>? _GodRays => _GodRaysLocations != null ? Fallout4GroupBinaryOverlay<IGodRaysGetter>.Fallout4GroupFactory(_stream, _GodRaysLocations, _package) : default;
        public IFallout4GroupGetter<IGodRaysGetter> GodRays => _GodRays ?? new Fallout4Group<GodRays>(this);
        #endregion
        #region ObjectVisibilityManagers
        private List<RangeInt64>? _ObjectVisibilityManagersLocations;
        private IFallout4GroupGetter<IObjectVisibilityManagerGetter>? _ObjectVisibilityManagers => _ObjectVisibilityManagersLocations != null ? Fallout4GroupBinaryOverlay<IObjectVisibilityManagerGetter>.Fallout4GroupFactory(_stream, _ObjectVisibilityManagersLocations, _package) : default;
        public IFallout4GroupGetter<IObjectVisibilityManagerGetter> ObjectVisibilityManagers => _ObjectVisibilityManagers ?? new Fallout4Group<ObjectVisibilityManager>(this);
        #endregion
        protected Fallout4ModBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose,
            Fallout4Release release)
        {
            this.ModKey = modKey;
            this.Fallout4Release = release;
            this._stream = stream;
            this._package = new BinaryOverlayFactoryPackage(stream.MetaData);
            this._shouldDispose = shouldDispose;
        }

        public static Fallout4ModBinaryOverlay Fallout4ModFactory(
            ModPath path,
            Fallout4Release release,
            BinaryReadParameters? param)
        {
            param ??= BinaryReadParameters.Default;
            var meta = ParsingMeta.Factory(param, release.ToGameRelease(), path);
            meta.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
            var stream = new MutagenBinaryReadStream(
                path: path.Path,
                metaData: meta);
            try
            {
                if (stream.Remaining < 12)
                {
                    throw new ArgumentException("File stream was too short to parse flags");
                }
                var flags = stream.GetInt32(offset: 8);
                if (Enums.HasFlag(flags, (int)Fallout4ModHeader.HeaderFlag.Localized))
                {
                    meta.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(release.ToGameRelease(), path.ModKey, Path.GetDirectoryName(path.Path)!, param.StringsParam, fileSystem: param.FileSystem);
                }
                return Fallout4ModFactory(
                    stream: stream,
                    path.ModKey,
                    release: release,
                    shouldDispose: true);
            }
            catch (Exception)
            {
                stream.Dispose();
                throw;
            }
        }

        public static Fallout4ModBinaryOverlay Fallout4ModFactory(
            IMutagenReadStream stream,
            ModKey modKey,
            Fallout4Release release,
            bool shouldDispose)
        {
            var ret = new Fallout4ModBinaryOverlay(
                stream: stream,
                release: release,
                modKey: modKey,
                shouldDispose: shouldDispose);
            PluginBinaryOverlay.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            return ret;
        }


        public ParseResult FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos - offset);
                    return (int)Fallout4Mod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    _GameSettingsLocations ??= new();
                    _GameSettingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    _KeywordsLocations ??= new();
                    _KeywordsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Keywords;
                }
                case RecordTypeInts.LCRT:
                {
                    _LocationReferenceTypesLocations ??= new();
                    _LocationReferenceTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.AACT:
                {
                    _ActionsLocations ??= new();
                    _ActionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Actions;
                }
                case RecordTypeInts.TRNS:
                {
                    _TransformsLocations ??= new();
                    _TransformsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Transforms;
                }
                case RecordTypeInts.CMPO:
                {
                    _ComponentsLocations ??= new();
                    _ComponentsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Components;
                }
                case RecordTypeInts.TXST:
                {
                    _TextureSetsLocations ??= new();
                    _TextureSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.GLOB:
                {
                    _GlobalsLocations ??= new();
                    _GlobalsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Globals;
                }
                case RecordTypeInts.DMGT:
                {
                    _DamageTypesLocations ??= new();
                    _DamageTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.DamageTypes;
                }
                case RecordTypeInts.CLAS:
                {
                    _ClassesLocations ??= new();
                    _ClassesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    _FactionsLocations ??= new();
                    _FactionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Factions;
                }
                case RecordTypeInts.HDPT:
                {
                    _HeadPartsLocations ??= new();
                    _HeadPartsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.HeadParts;
                }
                case RecordTypeInts.RACE:
                {
                    _RacesLocations ??= new();
                    _RacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    _SoundMarkersLocations ??= new();
                    _SoundMarkersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.SoundMarkers;
                }
                case RecordTypeInts.ASPC:
                {
                    _AcousticSpacesLocations ??= new();
                    _AcousticSpacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.AcousticSpaces;
                }
                case RecordTypeInts.MGEF:
                {
                    _MagicEffectsLocations ??= new();
                    _MagicEffectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.LTEX:
                {
                    _LandscapeTexturesLocations ??= new();
                    _LandscapeTexturesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.LandscapeTextures;
                }
                case RecordTypeInts.ENCH:
                {
                    _ObjectEffectsLocations ??= new();
                    _ObjectEffectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ObjectEffects;
                }
                case RecordTypeInts.SPEL:
                {
                    _SpellsLocations ??= new();
                    _SpellsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Spells;
                }
                case RecordTypeInts.ACTI:
                {
                    _ActivatorsLocations ??= new();
                    _ActivatorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Activators;
                }
                case RecordTypeInts.TACT:
                {
                    _TalkingActivatorsLocations ??= new();
                    _TalkingActivatorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.TalkingActivators;
                }
                case RecordTypeInts.ARMO:
                {
                    _ArmorsLocations ??= new();
                    _ArmorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    _BooksLocations ??= new();
                    _BooksLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Books;
                }
                case RecordTypeInts.CONT:
                {
                    _ContainersLocations ??= new();
                    _ContainersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    _DoorsLocations ??= new();
                    _DoorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Doors;
                }
                case RecordTypeInts.INGR:
                {
                    _IngredientsLocations ??= new();
                    _IngredientsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Ingredients;
                }
                case RecordTypeInts.LIGH:
                {
                    _LightsLocations ??= new();
                    _LightsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    _MiscItemsLocations ??= new();
                    _MiscItemsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.MiscItems;
                }
                case RecordTypeInts.STAT:
                {
                    _StaticsLocations ??= new();
                    _StaticsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Statics;
                }
                case RecordTypeInts.SCOL:
                {
                    _StaticCollectionsLocations ??= new();
                    _StaticCollectionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.StaticCollections;
                }
                case RecordTypeInts.MSTT:
                {
                    _MovableStaticsLocations ??= new();
                    _MovableStaticsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.MovableStatics;
                }
                case RecordTypeInts.GRAS:
                {
                    _GrassesLocations ??= new();
                    _GrassesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Grasses;
                }
                case RecordTypeInts.TREE:
                {
                    _TreesLocations ??= new();
                    _TreesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Trees;
                }
                case RecordTypeInts.FLOR:
                {
                    _FloraeLocations ??= new();
                    _FloraeLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Florae;
                }
                case RecordTypeInts.FURN:
                {
                    _FurnitureLocations ??= new();
                    _FurnitureLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    _WeaponsLocations ??= new();
                    _WeaponsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    _AmmunitionsLocations ??= new();
                    _AmmunitionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    _NpcsLocations ??= new();
                    _NpcsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Npcs;
                }
                case RecordTypeInts.LVLN:
                {
                    _LeveledNpcsLocations ??= new();
                    _LeveledNpcsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.LeveledNpcs;
                }
                case RecordTypeInts.KEYM:
                {
                    _KeysLocations ??= new();
                    _KeysLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    _IngestiblesLocations ??= new();
                    _IngestiblesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Ingestibles;
                }
                case RecordTypeInts.IDLM:
                {
                    _IdleMarkersLocations ??= new();
                    _IdleMarkersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.IdleMarkers;
                }
                case RecordTypeInts.NOTE:
                {
                    _HolotapesLocations ??= new();
                    _HolotapesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Holotapes;
                }
                case RecordTypeInts.PROJ:
                {
                    _ProjectilesLocations ??= new();
                    _ProjectilesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Projectiles;
                }
                case RecordTypeInts.HAZD:
                {
                    _HazardsLocations ??= new();
                    _HazardsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Hazards;
                }
                case RecordTypeInts.BNDS:
                {
                    _BendableSplinesLocations ??= new();
                    _BendableSplinesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.BendableSplines;
                }
                case RecordTypeInts.TERM:
                {
                    _TerminalsLocations ??= new();
                    _TerminalsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Terminals;
                }
                case RecordTypeInts.LVLI:
                {
                    _LeveledItemsLocations ??= new();
                    _LeveledItemsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.WTHR:
                {
                    _WeatherLocations ??= new();
                    _WeatherLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Weather;
                }
                case RecordTypeInts.CLMT:
                {
                    _ClimatesLocations ??= new();
                    _ClimatesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Climates;
                }
                case RecordTypeInts.SPGD:
                {
                    _ShaderParticleGeometriesLocations ??= new();
                    _ShaderParticleGeometriesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ShaderParticleGeometries;
                }
                case RecordTypeInts.RFCT:
                {
                    _VisualEffectsLocations ??= new();
                    _VisualEffectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.VisualEffects;
                }
                case RecordTypeInts.REGN:
                {
                    _RegionsLocations ??= new();
                    _RegionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Regions;
                }
                case RecordTypeInts.NAVI:
                {
                    _NavigationMeshInfoMapsLocations ??= new();
                    _NavigationMeshInfoMapsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.NavigationMeshInfoMaps;
                }
                case RecordTypeInts.CELL:
                {
                    _CellsLocation = new RangeInt64((stream.Position - offset), finalPos - offset);
                    return (int)Fallout4Mod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    _WorldspacesLocations ??= new();
                    _WorldspacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.QUST:
                {
                    _QuestsLocations ??= new();
                    _QuestsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    _IdleAnimationsLocations ??= new();
                    _IdleAnimationsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    _PackagesLocations ??= new();
                    _PackagesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Packages;
                }
                case RecordTypeInts.CSTY:
                {
                    _CombatStylesLocations ??= new();
                    _CombatStylesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    _LoadScreensLocations ??= new();
                    _LoadScreensLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.ANIO:
                {
                    _AnimatedObjectsLocations ??= new();
                    _AnimatedObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    _WatersLocations ??= new();
                    _WatersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    _EffectShadersLocations ??= new();
                    _EffectShadersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.EffectShaders;
                }
                case RecordTypeInts.EXPL:
                {
                    _ExplosionsLocations ??= new();
                    _ExplosionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Explosions;
                }
                case RecordTypeInts.DEBR:
                {
                    _DebrisLocations ??= new();
                    _DebrisLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Debris;
                }
                case RecordTypeInts.IMGS:
                {
                    _ImageSpacesLocations ??= new();
                    _ImageSpacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.IMAD:
                {
                    _ImageSpaceAdaptersLocations ??= new();
                    _ImageSpaceAdaptersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ImageSpaceAdapters;
                }
                case RecordTypeInts.FLST:
                {
                    _FormListsLocations ??= new();
                    _FormListsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.FormLists;
                }
                case RecordTypeInts.PERK:
                {
                    _PerksLocations ??= new();
                    _PerksLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Perks;
                }
                case RecordTypeInts.BPTD:
                {
                    _BodyPartsLocations ??= new();
                    _BodyPartsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.BodyParts;
                }
                case RecordTypeInts.ADDN:
                {
                    _AddonNodesLocations ??= new();
                    _AddonNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.AddonNodes;
                }
                case RecordTypeInts.AVIF:
                {
                    _ActorValueInformationLocations ??= new();
                    _ActorValueInformationLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ActorValueInformation;
                }
                case RecordTypeInts.CAMS:
                {
                    _CameraShotsLocations ??= new();
                    _CameraShotsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.CameraShots;
                }
                case RecordTypeInts.CPTH:
                {
                    _CameraPathsLocations ??= new();
                    _CameraPathsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.CameraPaths;
                }
                case RecordTypeInts.VTYP:
                {
                    _VoiceTypesLocations ??= new();
                    _VoiceTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.MATT:
                {
                    _MaterialTypesLocations ??= new();
                    _MaterialTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.MaterialTypes;
                }
                case RecordTypeInts.IPCT:
                {
                    _ImpactsLocations ??= new();
                    _ImpactsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Impacts;
                }
                case RecordTypeInts.IPDS:
                {
                    _ImpactDataSetsLocations ??= new();
                    _ImpactDataSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ImpactDataSets;
                }
                case RecordTypeInts.ARMA:
                {
                    _ArmorAddonsLocations ??= new();
                    _ArmorAddonsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ArmorAddons;
                }
                case RecordTypeInts.ECZN:
                {
                    _EncounterZonesLocations ??= new();
                    _EncounterZonesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.EncounterZones;
                }
                case RecordTypeInts.LCTN:
                {
                    _LocationsLocations ??= new();
                    _LocationsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Locations;
                }
                case RecordTypeInts.MESG:
                {
                    _MessagesLocations ??= new();
                    _MessagesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Messages;
                }
                case RecordTypeInts.DOBJ:
                {
                    _DefaultObjectManagersLocations ??= new();
                    _DefaultObjectManagersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.DefaultObjectManagers;
                }
                case RecordTypeInts.DFOB:
                {
                    _DefaultObjectsLocations ??= new();
                    _DefaultObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.DefaultObjects;
                }
                case RecordTypeInts.LGTM:
                {
                    _LightingTemplatesLocations ??= new();
                    _LightingTemplatesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.LightingTemplates;
                }
                case RecordTypeInts.MUSC:
                {
                    _MusicTypesLocations ??= new();
                    _MusicTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.MusicTypes;
                }
                case RecordTypeInts.FSTP:
                {
                    _FootstepsLocations ??= new();
                    _FootstepsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Footsteps;
                }
                case RecordTypeInts.FSTS:
                {
                    _FootstepSetsLocations ??= new();
                    _FootstepSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.FootstepSets;
                }
                case RecordTypeInts.SMBN:
                {
                    _StoryManagerBranchNodesLocations ??= new();
                    _StoryManagerBranchNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.StoryManagerBranchNodes;
                }
                case RecordTypeInts.SMQN:
                {
                    _StoryManagerQuestNodesLocations ??= new();
                    _StoryManagerQuestNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.StoryManagerQuestNodes;
                }
                case RecordTypeInts.SMEN:
                {
                    _StoryManagerEventNodesLocations ??= new();
                    _StoryManagerEventNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.StoryManagerEventNodes;
                }
                case RecordTypeInts.MUST:
                {
                    _MusicTracksLocations ??= new();
                    _MusicTracksLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.MusicTracks;
                }
                case RecordTypeInts.DLVW:
                {
                    _DialogViewsLocations ??= new();
                    _DialogViewsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.DialogViews;
                }
                case RecordTypeInts.EQUP:
                {
                    _EquipTypesLocations ??= new();
                    _EquipTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.EquipTypes;
                }
                case RecordTypeInts.RELA:
                {
                    _RelationshipsLocations ??= new();
                    _RelationshipsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Relationships;
                }
                case RecordTypeInts.ASTP:
                {
                    _AssociationTypesLocations ??= new();
                    _AssociationTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.AssociationTypes;
                }
                case RecordTypeInts.OTFT:
                {
                    _OutfitsLocations ??= new();
                    _OutfitsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Outfits;
                }
                case RecordTypeInts.ARTO:
                {
                    _ArtObjectsLocations ??= new();
                    _ArtObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ArtObjects;
                }
                case RecordTypeInts.MATO:
                {
                    _MaterialObjectsLocations ??= new();
                    _MaterialObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.MaterialObjects;
                }
                case RecordTypeInts.MOVT:
                {
                    _MovementTypesLocations ??= new();
                    _MovementTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.MovementTypes;
                }
                case RecordTypeInts.SNDR:
                {
                    _SoundDescriptorsLocations ??= new();
                    _SoundDescriptorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.SoundDescriptors;
                }
                case RecordTypeInts.SNCT:
                {
                    _SoundCategoriesLocations ??= new();
                    _SoundCategoriesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.SoundCategories;
                }
                case RecordTypeInts.SOPM:
                {
                    _SoundOutputModelsLocations ??= new();
                    _SoundOutputModelsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.SoundOutputModels;
                }
                case RecordTypeInts.COLL:
                {
                    _CollisionLayersLocations ??= new();
                    _CollisionLayersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.CollisionLayers;
                }
                case RecordTypeInts.CLFM:
                {
                    _ColorsLocations ??= new();
                    _ColorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Colors;
                }
                case RecordTypeInts.REVB:
                {
                    _ReverbParametersLocations ??= new();
                    _ReverbParametersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ReverbParameters;
                }
                case RecordTypeInts.PKIN:
                {
                    _PackInsLocations ??= new();
                    _PackInsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.PackIns;
                }
                case RecordTypeInts.RFGP:
                {
                    _ReferenceGroupsLocations ??= new();
                    _ReferenceGroupsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ReferenceGroups;
                }
                case RecordTypeInts.AMDL:
                {
                    _AimModelsLocations ??= new();
                    _AimModelsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.AimModels;
                }
                case RecordTypeInts.LAYR:
                {
                    _LayersLocations ??= new();
                    _LayersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Layers;
                }
                case RecordTypeInts.COBJ:
                {
                    _ConstructibleObjectsLocations ??= new();
                    _ConstructibleObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ConstructibleObjects;
                }
                case RecordTypeInts.OMOD:
                {
                    _ObjectModificationsLocations ??= new();
                    _ObjectModificationsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ObjectModifications;
                }
                case RecordTypeInts.MSWP:
                {
                    _MaterialSwapsLocations ??= new();
                    _MaterialSwapsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.MaterialSwaps;
                }
                case RecordTypeInts.ZOOM:
                {
                    _ZoomsLocations ??= new();
                    _ZoomsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.Zooms;
                }
                case RecordTypeInts.INNR:
                {
                    _InstanceNamingRulesLocations ??= new();
                    _InstanceNamingRulesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.InstanceNamingRules;
                }
                case RecordTypeInts.KSSM:
                {
                    _SoundKeywordMappingsLocations ??= new();
                    _SoundKeywordMappingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.SoundKeywordMappings;
                }
                case RecordTypeInts.AECH:
                {
                    _AudioEffectChainsLocations ??= new();
                    _AudioEffectChainsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.AudioEffectChains;
                }
                case RecordTypeInts.SCCO:
                {
                    _SceneCollectionsLocations ??= new();
                    _SceneCollectionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.SceneCollections;
                }
                case RecordTypeInts.AORU:
                {
                    _AttractionRulesLocations ??= new();
                    _AttractionRulesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.AttractionRules;
                }
                case RecordTypeInts.SCSN:
                {
                    _AudioCategorySnapshotsLocations ??= new();
                    _AudioCategorySnapshotsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.AudioCategorySnapshots;
                }
                case RecordTypeInts.STAG:
                {
                    _AnimationSoundTagSetsLocations ??= new();
                    _AnimationSoundTagSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.AnimationSoundTagSets;
                }
                case RecordTypeInts.NOCM:
                {
                    _NavigationMeshObstacleManagersLocations ??= new();
                    _NavigationMeshObstacleManagersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.NavigationMeshObstacleManagers;
                }
                case RecordTypeInts.LENS:
                {
                    _LensFlaresLocations ??= new();
                    _LensFlaresLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.LensFlares;
                }
                case RecordTypeInts.GDRY:
                {
                    _GodRaysLocations ??= new();
                    _GodRaysLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.GodRays;
                }
                case RecordTypeInts.OVIS:
                {
                    _ObjectVisibilityManagersLocations ??= new();
                    _ObjectVisibilityManagersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout4Mod_FieldIndex.ObjectVisibilityManagers;
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            Fallout4ModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFallout4ModGetter rhs) return false;
            return ((Fallout4ModCommon)((IFallout4ModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFallout4ModGetter? obj)
        {
            return ((Fallout4ModCommon)((IFallout4ModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((Fallout4ModCommon)((IFallout4ModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => Fallout4ModMixIn.GetEqualsMask(this, (IFallout4ModGetter)rhs, include);
    }

}
#endregion

#endregion

