/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class DestructionStage :
        IDestructionStage,
        IEquatable<IDestructionStageGetter>,
        ILoquiObjectSetter<DestructionStage>
    {
        #region Ctor
        public DestructionStage()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region HealthPercent
        public Byte HealthPercent { get; set; } = default(Byte);
        #endregion
        #region Index
        public Byte Index { get; set; } = default(Byte);
        #endregion
        #region ModelDamageStage
        public Byte ModelDamageStage { get; set; } = default(Byte);
        #endregion
        #region Flags
        public Destructible.DestructionStageDataFlag Flags { get; set; } = default(Destructible.DestructionStageDataFlag);
        #endregion
        #region SelfDamagePerSecond
        public Int32 SelfDamagePerSecond { get; set; } = default(Int32);
        #endregion
        #region Explosion
        private readonly IFormLink<IExplosionGetter> _Explosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> Explosion
        {
            get => _Explosion;
            set => _Explosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IDestructionStageGetter.Explosion => this.Explosion;
        #endregion
        #region Debris
        private readonly IFormLink<IDebrisGetter> _Debris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> Debris
        {
            get => _Debris;
            set => _Debris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IDestructionStageGetter.Debris => this.Debris;
        #endregion
        #region DebrisCount
        public Int32 DebrisCount { get; set; } = default(Int32);
        #endregion
        #region SequenceName
        public String? SequenceName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IDestructionStageGetter.SequenceName => this.SequenceName;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IDestructionStageGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DestructionStageMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDestructionStageGetter rhs) return false;
            return ((DestructionStageCommon)((IDestructionStageGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDestructionStageGetter? obj)
        {
            return ((DestructionStageCommon)((IDestructionStageGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DestructionStageCommon)((IDestructionStageGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.HealthPercent = initialValue;
                this.Index = initialValue;
                this.ModelDamageStage = initialValue;
                this.Flags = initialValue;
                this.SelfDamagePerSecond = initialValue;
                this.Explosion = initialValue;
                this.Debris = initialValue;
                this.DebrisCount = initialValue;
                this.SequenceName = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem HealthPercent,
                TItem Index,
                TItem ModelDamageStage,
                TItem Flags,
                TItem SelfDamagePerSecond,
                TItem Explosion,
                TItem Debris,
                TItem DebrisCount,
                TItem SequenceName,
                TItem Model)
            {
                this.HealthPercent = HealthPercent;
                this.Index = Index;
                this.ModelDamageStage = ModelDamageStage;
                this.Flags = Flags;
                this.SelfDamagePerSecond = SelfDamagePerSecond;
                this.Explosion = Explosion;
                this.Debris = Debris;
                this.DebrisCount = DebrisCount;
                this.SequenceName = SequenceName;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem HealthPercent;
            public TItem Index;
            public TItem ModelDamageStage;
            public TItem Flags;
            public TItem SelfDamagePerSecond;
            public TItem Explosion;
            public TItem Debris;
            public TItem DebrisCount;
            public TItem SequenceName;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.HealthPercent, rhs.HealthPercent)) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.ModelDamageStage, rhs.ModelDamageStage)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.SelfDamagePerSecond, rhs.SelfDamagePerSecond)) return false;
                if (!object.Equals(this.Explosion, rhs.Explosion)) return false;
                if (!object.Equals(this.Debris, rhs.Debris)) return false;
                if (!object.Equals(this.DebrisCount, rhs.DebrisCount)) return false;
                if (!object.Equals(this.SequenceName, rhs.SequenceName)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.HealthPercent);
                hash.Add(this.Index);
                hash.Add(this.ModelDamageStage);
                hash.Add(this.Flags);
                hash.Add(this.SelfDamagePerSecond);
                hash.Add(this.Explosion);
                hash.Add(this.Debris);
                hash.Add(this.DebrisCount);
                hash.Add(this.SequenceName);
                hash.Add(this.Model);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.HealthPercent)) return false;
                if (!eval(this.Index)) return false;
                if (!eval(this.ModelDamageStage)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.SelfDamagePerSecond)) return false;
                if (!eval(this.Explosion)) return false;
                if (!eval(this.Debris)) return false;
                if (!eval(this.DebrisCount)) return false;
                if (!eval(this.SequenceName)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.HealthPercent)) return true;
                if (eval(this.Index)) return true;
                if (eval(this.ModelDamageStage)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.SelfDamagePerSecond)) return true;
                if (eval(this.Explosion)) return true;
                if (eval(this.Debris)) return true;
                if (eval(this.DebrisCount)) return true;
                if (eval(this.SequenceName)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DestructionStage.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.HealthPercent = eval(this.HealthPercent);
                obj.Index = eval(this.Index);
                obj.ModelDamageStage = eval(this.ModelDamageStage);
                obj.Flags = eval(this.Flags);
                obj.SelfDamagePerSecond = eval(this.SelfDamagePerSecond);
                obj.Explosion = eval(this.Explosion);
                obj.Debris = eval(this.Debris);
                obj.DebrisCount = eval(this.DebrisCount);
                obj.SequenceName = eval(this.SequenceName);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DestructionStage.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DestructionStage.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DestructionStage.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.HealthPercent ?? true)
                    {
                        sb.AppendItem(HealthPercent, "HealthPercent");
                    }
                    if (printMask?.Index ?? true)
                    {
                        sb.AppendItem(Index, "Index");
                    }
                    if (printMask?.ModelDamageStage ?? true)
                    {
                        sb.AppendItem(ModelDamageStage, "ModelDamageStage");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.SelfDamagePerSecond ?? true)
                    {
                        sb.AppendItem(SelfDamagePerSecond, "SelfDamagePerSecond");
                    }
                    if (printMask?.Explosion ?? true)
                    {
                        sb.AppendItem(Explosion, "Explosion");
                    }
                    if (printMask?.Debris ?? true)
                    {
                        sb.AppendItem(Debris, "Debris");
                    }
                    if (printMask?.DebrisCount ?? true)
                    {
                        sb.AppendItem(DebrisCount, "DebrisCount");
                    }
                    if (printMask?.SequenceName ?? true)
                    {
                        sb.AppendItem(SequenceName, "SequenceName");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? HealthPercent;
            public Exception? Index;
            public Exception? ModelDamageStage;
            public Exception? Flags;
            public Exception? SelfDamagePerSecond;
            public Exception? Explosion;
            public Exception? Debris;
            public Exception? DebrisCount;
            public Exception? SequenceName;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                DestructionStage_FieldIndex enu = (DestructionStage_FieldIndex)index;
                switch (enu)
                {
                    case DestructionStage_FieldIndex.HealthPercent:
                        return HealthPercent;
                    case DestructionStage_FieldIndex.Index:
                        return Index;
                    case DestructionStage_FieldIndex.ModelDamageStage:
                        return ModelDamageStage;
                    case DestructionStage_FieldIndex.Flags:
                        return Flags;
                    case DestructionStage_FieldIndex.SelfDamagePerSecond:
                        return SelfDamagePerSecond;
                    case DestructionStage_FieldIndex.Explosion:
                        return Explosion;
                    case DestructionStage_FieldIndex.Debris:
                        return Debris;
                    case DestructionStage_FieldIndex.DebrisCount:
                        return DebrisCount;
                    case DestructionStage_FieldIndex.SequenceName:
                        return SequenceName;
                    case DestructionStage_FieldIndex.Model:
                        return Model;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                DestructionStage_FieldIndex enu = (DestructionStage_FieldIndex)index;
                switch (enu)
                {
                    case DestructionStage_FieldIndex.HealthPercent:
                        this.HealthPercent = ex;
                        break;
                    case DestructionStage_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case DestructionStage_FieldIndex.ModelDamageStage:
                        this.ModelDamageStage = ex;
                        break;
                    case DestructionStage_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case DestructionStage_FieldIndex.SelfDamagePerSecond:
                        this.SelfDamagePerSecond = ex;
                        break;
                    case DestructionStage_FieldIndex.Explosion:
                        this.Explosion = ex;
                        break;
                    case DestructionStage_FieldIndex.Debris:
                        this.Debris = ex;
                        break;
                    case DestructionStage_FieldIndex.DebrisCount:
                        this.DebrisCount = ex;
                        break;
                    case DestructionStage_FieldIndex.SequenceName:
                        this.SequenceName = ex;
                        break;
                    case DestructionStage_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                DestructionStage_FieldIndex enu = (DestructionStage_FieldIndex)index;
                switch (enu)
                {
                    case DestructionStage_FieldIndex.HealthPercent:
                        this.HealthPercent = (Exception?)obj;
                        break;
                    case DestructionStage_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case DestructionStage_FieldIndex.ModelDamageStage:
                        this.ModelDamageStage = (Exception?)obj;
                        break;
                    case DestructionStage_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case DestructionStage_FieldIndex.SelfDamagePerSecond:
                        this.SelfDamagePerSecond = (Exception?)obj;
                        break;
                    case DestructionStage_FieldIndex.Explosion:
                        this.Explosion = (Exception?)obj;
                        break;
                    case DestructionStage_FieldIndex.Debris:
                        this.Debris = (Exception?)obj;
                        break;
                    case DestructionStage_FieldIndex.DebrisCount:
                        this.DebrisCount = (Exception?)obj;
                        break;
                    case DestructionStage_FieldIndex.SequenceName:
                        this.SequenceName = (Exception?)obj;
                        break;
                    case DestructionStage_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (HealthPercent != null) return true;
                if (Index != null) return true;
                if (ModelDamageStage != null) return true;
                if (Flags != null) return true;
                if (SelfDamagePerSecond != null) return true;
                if (Explosion != null) return true;
                if (Debris != null) return true;
                if (DebrisCount != null) return true;
                if (SequenceName != null) return true;
                if (Model != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(HealthPercent, "HealthPercent");
                }
                {
                    sb.AppendItem(Index, "Index");
                }
                {
                    sb.AppendItem(ModelDamageStage, "ModelDamageStage");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(SelfDamagePerSecond, "SelfDamagePerSecond");
                }
                {
                    sb.AppendItem(Explosion, "Explosion");
                }
                {
                    sb.AppendItem(Debris, "Debris");
                }
                {
                    sb.AppendItem(DebrisCount, "DebrisCount");
                }
                {
                    sb.AppendItem(SequenceName, "SequenceName");
                }
                Model?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.HealthPercent = this.HealthPercent.Combine(rhs.HealthPercent);
                ret.Index = this.Index.Combine(rhs.Index);
                ret.ModelDamageStage = this.ModelDamageStage.Combine(rhs.ModelDamageStage);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.SelfDamagePerSecond = this.SelfDamagePerSecond.Combine(rhs.SelfDamagePerSecond);
                ret.Explosion = this.Explosion.Combine(rhs.Explosion);
                ret.Debris = this.Debris.Combine(rhs.Debris);
                ret.DebrisCount = this.DebrisCount.Combine(rhs.DebrisCount);
                ret.SequenceName = this.SequenceName.Combine(rhs.SequenceName);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool HealthPercent;
            public bool Index;
            public bool ModelDamageStage;
            public bool Flags;
            public bool SelfDamagePerSecond;
            public bool Explosion;
            public bool Debris;
            public bool DebrisCount;
            public bool SequenceName;
            public Model.TranslationMask? Model;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.HealthPercent = defaultOn;
                this.Index = defaultOn;
                this.ModelDamageStage = defaultOn;
                this.Flags = defaultOn;
                this.SelfDamagePerSecond = defaultOn;
                this.Explosion = defaultOn;
                this.Debris = defaultOn;
                this.DebrisCount = defaultOn;
                this.SequenceName = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((HealthPercent, null));
                ret.Add((Index, null));
                ret.Add((ModelDamageStage, null));
                ret.Add((Flags, null));
                ret.Add((SelfDamagePerSecond, null));
                ret.Add((Explosion, null));
                ret.Add((Debris, null));
                ret.Add((DebrisCount, null));
                ret.Add((SequenceName, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DestructionStageCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DestructionStageSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DestructionStageBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DestructionStageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static DestructionStage CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DestructionStage();
            ((DestructionStageSetterCommon)((IDestructionStageGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DestructionStage item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DestructionStageSetterCommon)((IDestructionStageGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static DestructionStage GetNew()
        {
            return new DestructionStage();
        }

    }
    #endregion

    #region Interface
    public partial interface IDestructionStage :
        IDestructionStageGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IDestructionStage>,
        IModeled
    {
        new Byte HealthPercent { get; set; }
        new Byte Index { get; set; }
        new Byte ModelDamageStage { get; set; }
        new Destructible.DestructionStageDataFlag Flags { get; set; }
        new Int32 SelfDamagePerSecond { get; set; }
        new IFormLink<IExplosionGetter> Explosion { get; set; }
        new IFormLink<IDebrisGetter> Debris { get; set; }
        new Int32 DebrisCount { get; set; }
        new String? SequenceName { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
    }

    public partial interface IDestructionStageGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IDestructionStageGetter>,
        IModeledGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => DestructionStage_Registration.Instance;
        Byte HealthPercent { get; }
        Byte Index { get; }
        Byte ModelDamageStage { get; }
        Destructible.DestructionStageDataFlag Flags { get; }
        Int32 SelfDamagePerSecond { get; }
        IFormLinkGetter<IExplosionGetter> Explosion { get; }
        IFormLinkGetter<IDebrisGetter> Debris { get; }
        Int32 DebrisCount { get; }
        String? SequenceName { get; }
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class DestructionStageMixIn
    {
        public static void Clear(this IDestructionStage item)
        {
            ((DestructionStageSetterCommon)((IDestructionStageGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DestructionStage.Mask<bool> GetEqualsMask(
            this IDestructionStageGetter item,
            IDestructionStageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DestructionStageCommon)((IDestructionStageGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDestructionStageGetter item,
            string? name = null,
            DestructionStage.Mask<bool>? printMask = null)
        {
            return ((DestructionStageCommon)((IDestructionStageGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDestructionStageGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DestructionStage.Mask<bool>? printMask = null)
        {
            ((DestructionStageCommon)((IDestructionStageGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDestructionStageGetter item,
            IDestructionStageGetter rhs,
            DestructionStage.TranslationMask? equalsMask = null)
        {
            return ((DestructionStageCommon)((IDestructionStageGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDestructionStage lhs,
            IDestructionStageGetter rhs)
        {
            ((DestructionStageSetterTranslationCommon)((IDestructionStageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDestructionStage lhs,
            IDestructionStageGetter rhs,
            DestructionStage.TranslationMask? copyMask = null)
        {
            ((DestructionStageSetterTranslationCommon)((IDestructionStageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDestructionStage lhs,
            IDestructionStageGetter rhs,
            out DestructionStage.ErrorMask errorMask,
            DestructionStage.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DestructionStageSetterTranslationCommon)((IDestructionStageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DestructionStage.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDestructionStage lhs,
            IDestructionStageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DestructionStageSetterTranslationCommon)((IDestructionStageGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DestructionStage DeepCopy(
            this IDestructionStageGetter item,
            DestructionStage.TranslationMask? copyMask = null)
        {
            return ((DestructionStageSetterTranslationCommon)((IDestructionStageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DestructionStage DeepCopy(
            this IDestructionStageGetter item,
            out DestructionStage.ErrorMask errorMask,
            DestructionStage.TranslationMask? copyMask = null)
        {
            return ((DestructionStageSetterTranslationCommon)((IDestructionStageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DestructionStage DeepCopy(
            this IDestructionStageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DestructionStageSetterTranslationCommon)((IDestructionStageGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDestructionStage item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DestructionStageSetterCommon)((IDestructionStageGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum DestructionStage_FieldIndex
    {
        HealthPercent = 0,
        Index = 1,
        ModelDamageStage = 2,
        Flags = 3,
        SelfDamagePerSecond = 4,
        Explosion = 5,
        Debris = 6,
        DebrisCount = 7,
        SequenceName = 8,
        Model = 9,
    }
    #endregion

    #region Registration
    internal partial class DestructionStage_Registration : ILoquiRegistration
    {
        public static readonly DestructionStage_Registration Instance = new DestructionStage_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(DestructionStage.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DestructionStage.ErrorMask);

        public static readonly Type ClassType = typeof(DestructionStage);

        public static readonly Type GetterType = typeof(IDestructionStageGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDestructionStage);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.DestructionStage";

        public const string Name = "DestructionStage";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DSTD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var endTriggers = RecordCollection.Factory(RecordTypes.DSTF);
            var triggers = RecordCollection.Factory(RecordTypes.DSTD);
            var all = RecordCollection.Factory(
                RecordTypes.DSTD,
                RecordTypes.DSTF,
                RecordTypes.DSTA,
                RecordTypes.DMDL,
                RecordTypes.DMDT,
                RecordTypes.DMDC,
                RecordTypes.DMDS);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers,
                endRecordTypes: endTriggers);
        });
        public static RecordTypeConverter ModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.DMDL),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODT,
                RecordTypes.DMDT),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODC,
                RecordTypes.DMDC),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODS,
                RecordTypes.DMDS));
        public static readonly Type BinaryWriteTranslation = typeof(DestructionStageBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DestructionStageSetterCommon
    {
        public static readonly DestructionStageSetterCommon Instance = new DestructionStageSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDestructionStage item)
        {
            ClearPartial();
            item.HealthPercent = default(Byte);
            item.Index = default(Byte);
            item.ModelDamageStage = default(Byte);
            item.Flags = default(Destructible.DestructionStageDataFlag);
            item.SelfDamagePerSecond = default(Int32);
            item.Explosion.Clear();
            item.Debris.Clear();
            item.DebrisCount = default(Int32);
            item.SequenceName = default;
            item.Model = null;
        }
        
        #region Mutagen
        public void RemapLinks(IDestructionStage obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Explosion.Relink(mapping);
            obj.Debris.Relink(mapping);
            obj.Model?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDestructionStage item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: DestructionStageBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class DestructionStageCommon
    {
        public static readonly DestructionStageCommon Instance = new DestructionStageCommon();

        public DestructionStage.Mask<bool> GetEqualsMask(
            IDestructionStageGetter item,
            IDestructionStageGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DestructionStage.Mask<bool>(false);
            ((DestructionStageCommon)((IDestructionStageGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDestructionStageGetter item,
            IDestructionStageGetter rhs,
            DestructionStage.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.HealthPercent = item.HealthPercent == rhs.HealthPercent;
            ret.Index = item.Index == rhs.Index;
            ret.ModelDamageStage = item.ModelDamageStage == rhs.ModelDamageStage;
            ret.Flags = item.Flags == rhs.Flags;
            ret.SelfDamagePerSecond = item.SelfDamagePerSecond == rhs.SelfDamagePerSecond;
            ret.Explosion = item.Explosion.Equals(rhs.Explosion);
            ret.Debris = item.Debris.Equals(rhs.Debris);
            ret.DebrisCount = item.DebrisCount == rhs.DebrisCount;
            ret.SequenceName = string.Equals(item.SequenceName, rhs.SequenceName);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
        }
        
        public string Print(
            IDestructionStageGetter item,
            string? name = null,
            DestructionStage.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDestructionStageGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DestructionStage.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DestructionStage =>");
            }
            else
            {
                sb.AppendLine($"{name} (DestructionStage) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDestructionStageGetter item,
            StructuredStringBuilder sb,
            DestructionStage.Mask<bool>? printMask = null)
        {
            if (printMask?.HealthPercent ?? true)
            {
                sb.AppendItem(item.HealthPercent, "HealthPercent");
            }
            if (printMask?.Index ?? true)
            {
                sb.AppendItem(item.Index, "Index");
            }
            if (printMask?.ModelDamageStage ?? true)
            {
                sb.AppendItem(item.ModelDamageStage, "ModelDamageStage");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.SelfDamagePerSecond ?? true)
            {
                sb.AppendItem(item.SelfDamagePerSecond, "SelfDamagePerSecond");
            }
            if (printMask?.Explosion ?? true)
            {
                sb.AppendItem(item.Explosion.FormKey, "Explosion");
            }
            if (printMask?.Debris ?? true)
            {
                sb.AppendItem(item.Debris.FormKey, "Debris");
            }
            if (printMask?.DebrisCount ?? true)
            {
                sb.AppendItem(item.DebrisCount, "DebrisCount");
            }
            if ((printMask?.SequenceName ?? true)
                && item.SequenceName is {} SequenceNameItem)
            {
                sb.AppendItem(SequenceNameItem, "SequenceName");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDestructionStageGetter? lhs,
            IDestructionStageGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.HealthPercent) ?? true))
            {
                if (lhs.HealthPercent != rhs.HealthPercent) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.ModelDamageStage) ?? true))
            {
                if (lhs.ModelDamageStage != rhs.ModelDamageStage) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.SelfDamagePerSecond) ?? true))
            {
                if (lhs.SelfDamagePerSecond != rhs.SelfDamagePerSecond) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.Explosion) ?? true))
            {
                if (!lhs.Explosion.Equals(rhs.Explosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.Debris) ?? true))
            {
                if (!lhs.Debris.Equals(rhs.Debris)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.DebrisCount) ?? true))
            {
                if (lhs.DebrisCount != rhs.DebrisCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.SequenceName) ?? true))
            {
                if (!string.Equals(lhs.SequenceName, rhs.SequenceName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)DestructionStage_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IDestructionStageGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.HealthPercent);
            hash.Add(item.Index);
            hash.Add(item.ModelDamageStage);
            hash.Add(item.Flags);
            hash.Add(item.SelfDamagePerSecond);
            hash.Add(item.Explosion);
            hash.Add(item.Debris);
            hash.Add(item.DebrisCount);
            if (item.SequenceName is {} SequenceNameitem)
            {
                hash.Add(SequenceNameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return DestructionStage.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDestructionStageGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.Explosion);
            yield return FormLinkInformation.Factory(obj.Debris);
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class DestructionStageSetterTranslationCommon
    {
        public static readonly DestructionStageSetterTranslationCommon Instance = new DestructionStageSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDestructionStage item,
            IDestructionStageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.HealthPercent) ?? true))
            {
                item.HealthPercent = rhs.HealthPercent;
            }
            if ((copyMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            if ((copyMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.ModelDamageStage) ?? true))
            {
                item.ModelDamageStage = rhs.ModelDamageStage;
            }
            if ((copyMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.SelfDamagePerSecond) ?? true))
            {
                item.SelfDamagePerSecond = rhs.SelfDamagePerSecond;
            }
            if ((copyMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.Explosion) ?? true))
            {
                item.Explosion.SetTo(rhs.Explosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.Debris) ?? true))
            {
                item.Debris.SetTo(rhs.Debris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.DebrisCount) ?? true))
            {
                item.DebrisCount = rhs.DebrisCount;
            }
            if ((copyMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.SequenceName) ?? true))
            {
                item.SequenceName = rhs.SequenceName;
            }
            if ((copyMask?.GetShouldTranslate((int)DestructionStage_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)DestructionStage_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DestructionStage_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDestructionStage item,
            IDestructionStageGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public DestructionStage DeepCopy(
            IDestructionStageGetter item,
            DestructionStage.TranslationMask? copyMask = null)
        {
            DestructionStage ret = (DestructionStage)((DestructionStageCommon)((IDestructionStageGetter)item).CommonInstance()!).GetNew();
            ((DestructionStageSetterTranslationCommon)((IDestructionStageGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DestructionStage DeepCopy(
            IDestructionStageGetter item,
            out DestructionStage.ErrorMask errorMask,
            DestructionStage.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DestructionStage ret = (DestructionStage)((DestructionStageCommon)((IDestructionStageGetter)item).CommonInstance()!).GetNew();
            ((DestructionStageSetterTranslationCommon)((IDestructionStageGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DestructionStage.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DestructionStage DeepCopy(
            IDestructionStageGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DestructionStage ret = (DestructionStage)((DestructionStageCommon)((IDestructionStageGetter)item).CommonInstance()!).GetNew();
            ((DestructionStageSetterTranslationCommon)((IDestructionStageGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class DestructionStage
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DestructionStage_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DestructionStage_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DestructionStageCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DestructionStageSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DestructionStageSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDestructionStageGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDestructionStageGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDestructionStageGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class DestructionStageBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly DestructionStageBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IDestructionStageGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DSTD)))
            {
                writer.Write(item.HealthPercent);
                writer.Write(item.Index);
                writer.Write(item.ModelDamageStage);
                EnumBinaryTranslation<Destructible.DestructionStageDataFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                writer.Write(item.SelfDamagePerSecond);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Explosion);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Debris);
                writer.Write(item.DebrisCount);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SequenceName,
                header: translationParams.ConvertToCustom(RecordTypes.DSTA),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams.With(DestructionStage_Registration.ModelConverter));
            }
        }

        public void Write(
            MutagenWriter writer,
            IDestructionStageGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.DSTF)) { } // End Marker
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDestructionStageGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DestructionStageBinaryCreateTranslation
    {
        public static readonly DestructionStageBinaryCreateTranslation Instance = new DestructionStageBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IDestructionStage item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DSTD:
                {
                    if (lastParsed.ShortCircuit((int)DestructionStage_FieldIndex.DebrisCount, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.HealthPercent = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.Index = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.ModelDamageStage = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.Flags = EnumBinaryTranslation<Destructible.DestructionStageDataFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 4) return null;
                    item.SelfDamagePerSecond = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.Explosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.Debris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.DebrisCount = dataFrame.ReadInt32();
                    return (int)DestructionStage_FieldIndex.DebrisCount;
                }
                case RecordTypeInts.DSTA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SequenceName = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DestructionStage_FieldIndex.SequenceName;
                }
                case RecordTypeInts.DMDL:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.DMDT:
                case RecordTypeInts.DMDS:
                {
                    item.Model = Mutagen.Bethesda.Fallout4.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(DestructionStage_Registration.ModelConverter).DoNotShortCircuit());
                    return (int)DestructionStage_FieldIndex.Model;
                }
                case RecordTypeInts.DSTF: // End Marker
                {
                    frame.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class DestructionStageBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDestructionStageGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DestructionStageBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class DestructionStageBinaryOverlay :
        PluginBinaryOverlay,
        IDestructionStageGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DestructionStage_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => DestructionStage_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DestructionStageCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DestructionStageSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDestructionStageGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDestructionStageGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDestructionStageGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DestructionStageCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DestructionStageBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DestructionStageBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _DSTDLocation;
        #region HealthPercent
        private int _HealthPercentLocation => _DSTDLocation!.Value.Min;
        private bool _HealthPercent_IsSet => _DSTDLocation.HasValue;
        public Byte HealthPercent => _HealthPercent_IsSet ? _recordData.Span[_HealthPercentLocation] : default;
        #endregion
        #region Index
        private int _IndexLocation => _DSTDLocation!.Value.Min + 0x1;
        private bool _Index_IsSet => _DSTDLocation.HasValue;
        public Byte Index => _Index_IsSet ? _recordData.Span[_IndexLocation] : default;
        #endregion
        #region ModelDamageStage
        private int _ModelDamageStageLocation => _DSTDLocation!.Value.Min + 0x2;
        private bool _ModelDamageStage_IsSet => _DSTDLocation.HasValue;
        public Byte ModelDamageStage => _ModelDamageStage_IsSet ? _recordData.Span[_ModelDamageStageLocation] : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DSTDLocation!.Value.Min + 0x3;
        private bool _Flags_IsSet => _DSTDLocation.HasValue;
        public Destructible.DestructionStageDataFlag Flags => _Flags_IsSet ? (Destructible.DestructionStageDataFlag)_recordData.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region SelfDamagePerSecond
        private int _SelfDamagePerSecondLocation => _DSTDLocation!.Value.Min + 0x4;
        private bool _SelfDamagePerSecond_IsSet => _DSTDLocation.HasValue;
        public Int32 SelfDamagePerSecond => _SelfDamagePerSecond_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_SelfDamagePerSecondLocation, 4)) : default(Int32);
        #endregion
        #region Explosion
        private int _ExplosionLocation => _DSTDLocation!.Value.Min + 0x8;
        private bool _Explosion_IsSet => _DSTDLocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> Explosion => _Explosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_ExplosionLocation, 0x4), isSet: _Explosion_IsSet) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region Debris
        private int _DebrisLocation => _DSTDLocation!.Value.Min + 0xC;
        private bool _Debris_IsSet => _DSTDLocation.HasValue;
        public IFormLinkGetter<IDebrisGetter> Debris => _Debris_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IDebrisGetter>(_package, _recordData.Span.Slice(_DebrisLocation, 0x4), isSet: _Debris_IsSet) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region DebrisCount
        private int _DebrisCountLocation => _DSTDLocation!.Value.Min + 0x10;
        private bool _DebrisCount_IsSet => _DSTDLocation.HasValue;
        public Int32 DebrisCount => _DebrisCount_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_DebrisCountLocation, 4)) : default(Int32);
        #endregion
        #region SequenceName
        private int? _SequenceNameLocation;
        public String? SequenceName => _SequenceNameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SequenceNameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IModelGetter? Model { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DestructionStageBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDestructionStageGetter DestructionStageFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DestructionStageBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IDestructionStageGetter DestructionStageFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DestructionStageFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DSTD:
                {
                    if (lastParsed.ShortCircuit((int)DestructionStage_FieldIndex.DebrisCount, translationParams)) return ParseResult.Stop;
                    _DSTDLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)DestructionStage_FieldIndex.DebrisCount;
                }
                case RecordTypeInts.DSTA:
                {
                    _SequenceNameLocation = (stream.Position - offset);
                    return (int)DestructionStage_FieldIndex.SequenceName;
                }
                case RecordTypeInts.DMDL:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.DMDT:
                case RecordTypeInts.DMDS:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.With(DestructionStage_Registration.ModelConverter).DoNotShortCircuit());
                    return (int)DestructionStage_FieldIndex.Model;
                }
                case RecordTypeInts.DSTF: // End Marker
                {
                    stream.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DestructionStageMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDestructionStageGetter rhs) return false;
            return ((DestructionStageCommon)((IDestructionStageGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDestructionStageGetter? obj)
        {
            return ((DestructionStageCommon)((IDestructionStageGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DestructionStageCommon)((IDestructionStageGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

