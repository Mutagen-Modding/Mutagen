/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class ObjectTemplate<T> :
        IEquatable<IObjectTemplateGetter<T>>,
        ILoquiObjectSetter<ObjectTemplate<T>>,
        IObjectTemplate<T>
        where T : struct, Enum
    {
        #region Ctor
        public ObjectTemplate()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region IsEditorOnly
        public Boolean IsEditorOnly { get; set; } = default(Boolean);
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IObjectTemplateGetter<T>.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region AddonIndex
        public static readonly Int16 AddonIndexDefault = -1;
        public Int16 AddonIndex { get; set; } = AddonIndexDefault;
        #endregion
        #region LevelMin
        public Byte LevelMin { get; set; } = default(Byte);
        #endregion
        #region LevelMax
        public Byte LevelMax { get; set; } = default(Byte);
        #endregion
        #region Default
        public Boolean Default { get; set; } = default(Boolean);
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>> _Keywords = new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>> Keywords
        {
            get => this._Keywords;
            init => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> IObjectTemplateGetter<T>.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        ExtendedList<IFormLinkGetter<IKeywordGetter>>? IKeyworded<IKeywordGetter>.Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value ?? new();
        }
        #endregion
        #endregion
        #region MinLevelForRanks
        public Byte MinLevelForRanks { get; set; } = default(Byte);
        #endregion
        #region AltLevelsPerTier
        public Byte AltLevelsPerTier { get; set; } = default(Byte);
        #endregion
        #region Includes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectTemplateInclude> _Includes = new ExtendedList<ObjectTemplateInclude>();
        public ExtendedList<ObjectTemplateInclude> Includes
        {
            get => this._Includes;
            init => this._Includes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectTemplateIncludeGetter> IObjectTemplateGetter<T>.Includes => _Includes;
        #endregion

        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AObjectModProperty<T>> _Properties = new ExtendedList<AObjectModProperty<T>>();
        public ExtendedList<AObjectModProperty<T>> Properties
        {
            get => this._Properties;
            init => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAObjectModPropertyGetter<T>> IObjectTemplateGetter<T>.Properties => _Properties;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectTemplateMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectTemplateGetter<T> rhs) return false;
            return ((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectTemplateGetter<T>? obj)
        {
            return ((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)this).CommonInstance(typeof(T))!).GetHashCode(this);

        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ObjectTemplateCommon<T>.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ObjectTemplateSetterCommon<T>.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ObjectTemplateBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectTemplateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ObjectTemplate<T> CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ObjectTemplate<T>();
            ((ObjectTemplateSetterCommon<T>)((IObjectTemplateGetter<T>)ret).CommonSetterInstance(typeof(T))!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ObjectTemplate<T> item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ObjectTemplateSetterCommon<T>)((IObjectTemplateGetter<T>)this).CommonSetterInstance(typeof(T))!).Clear(this);
        }

        internal static ObjectTemplate<T> GetNew()
        {
            return new ObjectTemplate<T>();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectTemplate<T> :
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IObjectTemplate<T>>,
        INamed,
        INamedRequired,
        IObjectTemplateGetter<T>,
        ITranslatedNamed,
        ITranslatedNamedRequired
        where T : struct, Enum
    {
        new Boolean IsEditorOnly { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new Int16 AddonIndex { get; set; }
        new Byte LevelMin { get; set; }
        new Byte LevelMax { get; set; }
        new Boolean Default { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>> Keywords { get; }
        new Byte MinLevelForRanks { get; set; }
        new Byte AltLevelsPerTier { get; set; }
        new ExtendedList<ObjectTemplateInclude> Includes { get; }
        new ExtendedList<AObjectModProperty<T>> Properties { get; }
    }

    public partial interface IObjectTemplateGetter<out T> :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IObjectTemplateGetter<T>>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
        where T : struct, Enum
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance(Type type0);
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance(Type type0);
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ObjectTemplate_Registration.Instance;
        Boolean IsEditorOnly { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        Int16 AddonIndex { get; }
        Byte LevelMin { get; }
        Byte LevelMax { get; }
        Boolean Default { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>> Keywords { get; }
        #endregion
        Byte MinLevelForRanks { get; }
        Byte AltLevelsPerTier { get; }
        IReadOnlyList<IObjectTemplateIncludeGetter> Includes { get; }
        IReadOnlyList<IAObjectModPropertyGetter<T>> Properties { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectTemplateMixIn
    {
        public static void Clear<T>(this IObjectTemplate<T> item)
            where T : struct, Enum
        {
            ((ObjectTemplateSetterCommon<T>)((IObjectTemplateGetter<T>)item).CommonSetterInstance(typeof(T))!).Clear(item: item);
        }

        public static ObjectTemplate.Mask<bool> GetEqualsMask<T>(
            this IObjectTemplateGetter<T> item,
            IObjectTemplateGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where T : struct, Enum
        {
            return ((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)item).CommonInstance(typeof(T))!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print<T>(
            this IObjectTemplateGetter<T> item,
            string? name = null,
            ObjectTemplate.Mask<bool>? printMask = null)
            where T : struct, Enum
        {
            return ((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)item).CommonInstance(typeof(T))!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print<T>(
            this IObjectTemplateGetter<T> item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectTemplate.Mask<bool>? printMask = null)
            where T : struct, Enum
        {
            ((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)item).CommonInstance(typeof(T))!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals<T>(
            this IObjectTemplateGetter<T> item,
            IObjectTemplateGetter<T> rhs)
            where T : struct, Enum
        {
            return ((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)item).CommonInstance(typeof(T))!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: null);
        }

        public static bool Equals<T>(
            this IObjectTemplateGetter<T> item,
            IObjectTemplateGetter<T> rhs,
            ObjectTemplate.TranslationMask equalsMask)
            where T : struct, Enum
        {
            return ((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)item).CommonInstance(typeof(T))!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask.GetCrystal());
        }

        public static void DeepCopyIn<T>(
            this IObjectTemplate<T> lhs,
            IObjectTemplateGetter<T> rhs)
            where T : struct, Enum
        {
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn<T>(
            this IObjectTemplate<T> lhs,
            IObjectTemplateGetter<T> rhs,
            ObjectTemplate.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn<T>(
            this IObjectTemplate<T> lhs,
            IObjectTemplateGetter<T> rhs,
            out ObjectTemplate.ErrorMask errorMask,
            ObjectTemplate.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ObjectTemplate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn<T>(
            this IObjectTemplate<T> lhs,
            IObjectTemplateGetter<T> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
            where T : struct, Enum
        {
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ObjectTemplate<T> DeepCopy<T>(
            this IObjectTemplateGetter<T> item,
            ObjectTemplate.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            return ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter<T>)item).CommonSetterTranslationInstance()!).DeepCopy<T>(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectTemplate<T> DeepCopy<T>(
            this IObjectTemplateGetter<T> item,
            out ObjectTemplate.ErrorMask errorMask,
            ObjectTemplate.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            return ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter<T>)item).CommonSetterTranslationInstance()!).DeepCopy<T>(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectTemplate<T> DeepCopy<T>(
            this IObjectTemplateGetter<T> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : struct, Enum
        {
            return ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter<T>)item).CommonSetterTranslationInstance()!).DeepCopy<T>(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary<T>(
            this IObjectTemplate<T> item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
            where T : struct, Enum
        {
            ((ObjectTemplateSetterCommon<T>)((IObjectTemplateGetter<T>)item).CommonSetterInstance(typeof(T))!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum ObjectTemplate_FieldIndex
    {
        IsEditorOnly = 0,
        Name = 1,
        AddonIndex = 2,
        LevelMin = 3,
        LevelMax = 4,
        Default = 5,
        Keywords = 6,
        MinLevelForRanks = 7,
        AltLevelsPerTier = 8,
        Includes = 9,
        Properties = 10,
    }
    #endregion

    #region Registration
    internal partial class ObjectTemplate_Registration : ILoquiRegistration
    {
        public static readonly ObjectTemplate_Registration Instance = new ObjectTemplate_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(ObjectTemplate.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectTemplate.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectTemplate<>);

        public static readonly Type GetterType = typeof(IObjectTemplateGetter<>);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectTemplate<>);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.ObjectTemplate";

        public const string Name = "ObjectTemplate";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 1;

        public static readonly Type? GenericRegistrationType = typeof(ObjectTemplate_Registration<>);

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.OBTF,
                RecordTypes.FULL,
                RecordTypes.OBTS);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ObjectTemplateBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }

    internal class ObjectTemplate_Registration<T> : ObjectTemplate_Registration
        where T : struct, Enum
    {
        public static readonly ObjectTemplate_Registration<T> GenericInstance = new ObjectTemplate_Registration<T>();

    }
    #endregion

    #region Common
    internal partial class ObjectTemplateSetterCommon<T>
        where T : struct, Enum
    {
        public static readonly ObjectTemplateSetterCommon<T> Instance = new ObjectTemplateSetterCommon<T>();

        partial void ClearPartial();
        
        public void Clear(IObjectTemplate<T> item)
        {
            ClearPartial();
            item.IsEditorOnly = default(Boolean);
            item.Name = default;
            item.AddonIndex = ObjectTemplate<T>.AddonIndexDefault;
            item.LevelMin = default(Byte);
            item.LevelMax = default(Byte);
            item.Default = default(Boolean);
            item.Keywords.Clear();
            item.MinLevelForRanks = default(Byte);
            item.AltLevelsPerTier = default(Byte);
            item.Includes.Clear();
            item.Properties.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IObjectTemplate<T> obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Keywords.RemapLinks(mapping);
            obj.Includes.RemapLinks(mapping);
            obj.Properties.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IObjectTemplate<T> item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ObjectTemplateBinaryCreateTranslation<T>.FillBinaryStructs,
                fillTyped: ObjectTemplateBinaryCreateTranslation<T>.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class ObjectTemplateCommon<T>
        where T : struct, Enum
    {
        public static readonly ObjectTemplateCommon<T> Instance = new ObjectTemplateCommon<T>();

        public ObjectTemplate.Mask<bool> GetEqualsMask(
            IObjectTemplateGetter<T> item,
            IObjectTemplateGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectTemplate.Mask<bool>(false);
            ((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)item).CommonInstance(typeof(T))!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectTemplateGetter<T> item,
            IObjectTemplateGetter<T> rhs,
            ObjectTemplate.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.IsEditorOnly = item.IsEditorOnly == rhs.IsEditorOnly;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.AddonIndex = item.AddonIndex == rhs.AddonIndex;
            ret.LevelMin = item.LevelMin == rhs.LevelMin;
            ret.LevelMax = item.LevelMax == rhs.LevelMax;
            ret.Default = item.Default == rhs.Default;
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.MinLevelForRanks = item.MinLevelForRanks == rhs.MinLevelForRanks;
            ret.AltLevelsPerTier = item.AltLevelsPerTier == rhs.AltLevelsPerTier;
            ret.Includes = item.Includes.CollectionEqualsHelper(
                rhs.Includes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            IObjectTemplateGetter<T> item,
            string? name = null,
            ObjectTemplate.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IObjectTemplateGetter<T> item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectTemplate.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ObjectTemplate<{typeof(T).Name}> =>");
            }
            else
            {
                sb.AppendLine($"{name} (ObjectTemplate<{typeof(T).Name}>) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IObjectTemplateGetter<T> item,
            StructuredStringBuilder sb,
            ObjectTemplate.Mask<bool>? printMask = null)
        {
            if (printMask?.IsEditorOnly ?? true)
            {
                sb.AppendItem(item.IsEditorOnly, "IsEditorOnly");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.AddonIndex ?? true)
            {
                sb.AppendItem(item.AddonIndex, "AddonIndex");
            }
            if (printMask?.LevelMin ?? true)
            {
                sb.AppendItem(item.LevelMin, "LevelMin");
            }
            if (printMask?.LevelMax ?? true)
            {
                sb.AppendItem(item.LevelMax, "LevelMax");
            }
            if (printMask?.Default ?? true)
            {
                sb.AppendItem(item.Default, "Default");
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Keywords)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.MinLevelForRanks ?? true)
            {
                sb.AppendItem(item.MinLevelForRanks, "MinLevelForRanks");
            }
            if (printMask?.AltLevelsPerTier ?? true)
            {
                sb.AppendItem(item.AltLevelsPerTier, "AltLevelsPerTier");
            }
            if (printMask?.Includes?.Overall ?? true)
            {
                sb.AppendLine("Includes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Includes)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Properties?.Overall ?? true)
            {
                sb.AppendLine("Properties =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Properties)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectTemplateGetter<T>? lhs,
            IObjectTemplateGetter<T>? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.IsEditorOnly) ?? true))
            {
                if (lhs.IsEditorOnly != rhs.IsEditorOnly) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.AddonIndex) ?? true))
            {
                if (lhs.AddonIndex != rhs.AddonIndex) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.LevelMin) ?? true))
            {
                if (lhs.LevelMin != rhs.LevelMin) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.LevelMax) ?? true))
            {
                if (lhs.LevelMax != rhs.LevelMax) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.Default) ?? true))
            {
                if (lhs.Default != rhs.Default) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.MinLevelForRanks) ?? true))
            {
                if (lhs.MinLevelForRanks != rhs.MinLevelForRanks) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.AltLevelsPerTier) ?? true))
            {
                if (lhs.AltLevelsPerTier != rhs.AltLevelsPerTier) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.Includes) ?? true))
            {
                if (!lhs.Includes.SequenceEqual(rhs.Includes, (l, r) => ((ObjectTemplateIncludeCommon)((IObjectTemplateIncludeGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ObjectTemplate_FieldIndex.Includes)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqual(rhs.Properties, (l, r) => ((AObjectModPropertyCommon<T>)((IAObjectModPropertyGetter<T>)l).CommonInstance(typeof(T))!).Equals(l, r, equalsMask?.GetSubCrystal((int)ObjectTemplate_FieldIndex.Properties)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IObjectTemplateGetter<T> item)
        {
            var hash = new HashCode();
            hash.Add(item.IsEditorOnly);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.AddonIndex);
            hash.Add(item.LevelMin);
            hash.Add(item.LevelMax);
            hash.Add(item.Default);
            hash.Add(item.Keywords);
            hash.Add(item.MinLevelForRanks);
            hash.Add(item.AltLevelsPerTier);
            hash.Add(item.Includes);
            hash.Add(item.Properties);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew<T_Setter>()
            where T_Setter : struct, Enum
        {
            return ObjectTemplate<T_Setter>.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IObjectTemplateGetter<T> obj)
        {
            foreach (var item in obj.Keywords)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Includes.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Properties.WhereCastable<IAObjectModPropertyGetter<T>, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ObjectTemplateSetterTranslationCommon
    {
        public static readonly ObjectTemplateSetterTranslationCommon Instance = new ObjectTemplateSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn<T>(
            IObjectTemplate<T> item,
            IObjectTemplateGetter<T> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
            where T : struct, Enum
        {
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.IsEditorOnly) ?? true))
            {
                item.IsEditorOnly = rhs.IsEditorOnly;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.AddonIndex) ?? true))
            {
                item.AddonIndex = rhs.AddonIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.LevelMin) ?? true))
            {
                item.LevelMin = rhs.LevelMin;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.LevelMax) ?? true))
            {
                item.LevelMax = rhs.LevelMax;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.Default) ?? true))
            {
                item.Default = rhs.Default;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)ObjectTemplate_FieldIndex.Keywords);
                try
                {
                    item.Keywords.SetTo(
                        rhs.Keywords
                            .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.MinLevelForRanks) ?? true))
            {
                item.MinLevelForRanks = rhs.MinLevelForRanks;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.AltLevelsPerTier) ?? true))
            {
                item.AltLevelsPerTier = rhs.AltLevelsPerTier;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.Includes) ?? true))
            {
                errorMask?.PushIndex((int)ObjectTemplate_FieldIndex.Includes);
                try
                {
                    item.Includes.SetTo(
                        rhs.Includes
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectTemplate_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)ObjectTemplate_FieldIndex.Properties);
                try
                {
                    item.Properties.SetTo(
                        rhs.Properties
                        .Select(r =>
                        {
                            return r.DeepCopy<T>(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom<T>(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom<T>(
            IObjectTemplate<T> item,
            IObjectTemplateGetter<T> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
            where T : struct, Enum;
        #endregion
        
        public ObjectTemplate<T> DeepCopy<T>(
            IObjectTemplateGetter<T> item,
            ObjectTemplate.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            ObjectTemplate<T> ret = (ObjectTemplate<T>)((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ObjectTemplate<T> DeepCopy<T>(
            IObjectTemplateGetter<T> item,
            out ObjectTemplate.ErrorMask errorMask,
            ObjectTemplate.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectTemplate<T> ret = (ObjectTemplate<T>)((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ObjectTemplate.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ObjectTemplate<T> DeepCopy<T>(
            IObjectTemplateGetter<T> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : struct, Enum
        {
            ObjectTemplate<T> ret = (ObjectTemplate<T>)((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((ObjectTemplateSetterTranslationCommon)((IObjectTemplateGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class ObjectTemplate<T>
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectTemplate_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ObjectTemplate_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance(Type type0) => GenericCommonInstanceGetter.Get(ObjectTemplateCommon<T>.Instance, typeof(T), type0);
        [DebuggerStepThrough]
        protected object CommonSetterInstance(Type type0)
        {
            return GenericCommonInstanceGetter.Get(ObjectTemplateSetterCommon<T>.Instance, typeof(T), type0);
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectTemplateSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectTemplateGetter<T>.CommonInstance(Type type0) => this.CommonInstance(type0);
        [DebuggerStepThrough]
        object IObjectTemplateGetter<T>.CommonSetterInstance(Type type0) => this.CommonSetterInstance(type0);
        [DebuggerStepThrough]
        object IObjectTemplateGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class ObjectTemplateBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ObjectTemplateBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded<T>(
            IObjectTemplateGetter<T> item,
            MutagenWriter writer)
            where T : struct, Enum
        {
        }

        public static void WriteRecordTypes<T>(
            IObjectTemplateGetter<T> item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
            where T : struct, Enum
        {
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.IsEditorOnly,
                header: translationParams.ConvertToCustom(RecordTypes.OBTF));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            ObjectTemplateBinaryWriteTranslation.WriteBinaryOBTSLogic(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryOBTSLogicCustom<T>(
            MutagenWriter writer,
            IObjectTemplateGetter<T> item)
            where T : struct, Enum;

        public static void WriteBinaryOBTSLogic<T>(
            MutagenWriter writer,
            IObjectTemplateGetter<T> item)
            where T : struct, Enum
        {
            WriteBinaryOBTSLogicCustom(
                writer: writer,
                item: item);
        }

        public void Write<T>(
            MutagenWriter writer,
            IObjectTemplateGetter<T> item,
            TypedWriteParams translationParams)
            where T : struct, Enum
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            throw new NotImplementedException();
        }

    }

    internal partial class ObjectTemplateBinaryCreateTranslation<T>
        where T : struct, Enum
    {
        public static readonly ObjectTemplateBinaryCreateTranslation<T> Instance = new ObjectTemplateBinaryCreateTranslation<T>();

        public static void FillBinaryStructs(
            IObjectTemplate<T> item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IObjectTemplate<T> item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBTF:
                {
                    if (lastParsed.ShortCircuit((int)ObjectTemplate_FieldIndex.IsEditorOnly, translationParams)) return ParseResult.Stop;
                    item.IsEditorOnly = true;
                    return (int)ObjectTemplate_FieldIndex.IsEditorOnly;
                }
                case RecordTypeInts.FULL:
                {
                    if (lastParsed.ShortCircuit((int)ObjectTemplate_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ObjectTemplate_FieldIndex.Name;
                }
                case RecordTypeInts.OBTS:
                {
                    if (lastParsed.ShortCircuit((int)ObjectTemplate_FieldIndex.AddonIndex, translationParams)) return ParseResult.Stop;
                    return ObjectTemplateBinaryCreateTranslation<T>.FillBinaryOBTSLogicCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                default:
                    return ParseResult.Stop;
            }
        }

        public static partial ParseResult FillBinaryOBTSLogicCustom(
            MutagenFrame frame,
            IObjectTemplate<T> item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class ObjectTemplateBinaryTranslationMixIn
    {
        public static void WriteToBinary<T>(
            this IObjectTemplateGetter<T> item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
            where T : struct, Enum
        {
            ((ObjectTemplateBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class ObjectTemplateBinaryOverlay<T> :
        PluginBinaryOverlay,
        IObjectTemplateGetter<T>
        where T : struct, Enum
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectTemplate_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ObjectTemplate_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance(Type type0) => GenericCommonInstanceGetter.Get(ObjectTemplateCommon<T>.Instance, typeof(T), type0);
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ObjectTemplateSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IObjectTemplateGetter<T>.CommonInstance(Type type0) => this.CommonInstance(type0);
        [DebuggerStepThrough]
        object? IObjectTemplateGetter<T>.CommonSetterInstance(Type type0) => null;
        [DebuggerStepThrough]
        object IObjectTemplateGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ObjectTemplateCommon<T>.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ObjectTemplateBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectTemplateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region IsEditorOnly
        private int? _IsEditorOnlyLocation;
        public Boolean IsEditorOnly => _IsEditorOnlyLocation.HasValue ? true : default(Boolean);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region OBTSLogic
        public partial ParseResult OBTSLogicCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ObjectTemplateBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IObjectTemplateGetter<T> ObjectTemplateFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ObjectTemplateBinaryOverlay<T>(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IObjectTemplateGetter<T> ObjectTemplateFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ObjectTemplateFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBTF:
                {
                    if (lastParsed.ShortCircuit((int)ObjectTemplate_FieldIndex.IsEditorOnly, translationParams)) return ParseResult.Stop;
                    _IsEditorOnlyLocation = (stream.Position - offset);
                    return (int)ObjectTemplate_FieldIndex.IsEditorOnly;
                }
                case RecordTypeInts.FULL:
                {
                    if (lastParsed.ShortCircuit((int)ObjectTemplate_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    _NameLocation = (stream.Position - offset);
                    return (int)ObjectTemplate_FieldIndex.Name;
                }
                case RecordTypeInts.OBTS:
                {
                    if (lastParsed.ShortCircuit((int)ObjectTemplate_FieldIndex.AddonIndex, translationParams)) return ParseResult.Stop;
                    return OBTSLogicCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectTemplateMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IObjectTemplateGetter<T> rhs) return false;
            return ((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectTemplateGetter<T>? obj)
        {
            return ((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectTemplateCommon<T>)((IObjectTemplateGetter<T>)this).CommonInstance(typeof(T))!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

namespace Mutagen.Bethesda.Fallout4
{
    public static class ObjectTemplate
    {
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.IsEditorOnly = initialValue;
                this.Name = initialValue;
                this.AddonIndex = initialValue;
                this.LevelMin = initialValue;
                this.LevelMax = initialValue;
                this.Default = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MinLevelForRanks = initialValue;
                this.AltLevelsPerTier = initialValue;
                this.Includes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplateInclude.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectTemplateInclude.Mask<TItem>?>>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>());
            }
        
            public Mask(
                TItem IsEditorOnly,
                TItem Name,
                TItem AddonIndex,
                TItem LevelMin,
                TItem LevelMax,
                TItem Default,
                TItem Keywords,
                TItem MinLevelForRanks,
                TItem AltLevelsPerTier,
                TItem Includes,
                TItem Properties)
            {
                this.IsEditorOnly = IsEditorOnly;
                this.Name = Name;
                this.AddonIndex = AddonIndex;
                this.LevelMin = LevelMin;
                this.LevelMax = LevelMax;
                this.Default = Default;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.MinLevelForRanks = MinLevelForRanks;
                this.AltLevelsPerTier = AltLevelsPerTier;
                this.Includes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplateInclude.Mask<TItem>?>>?>(Includes, Enumerable.Empty<MaskItemIndexed<TItem, ObjectTemplateInclude.Mask<TItem>?>>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>());
            }
        
            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618
        
            #endregion
        
            #region Members
            public TItem IsEditorOnly;
            public TItem Name;
            public TItem AddonIndex;
            public TItem LevelMin;
            public TItem LevelMax;
            public TItem Default;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem MinLevelForRanks;
            public TItem AltLevelsPerTier;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplateInclude.Mask<TItem>?>>?>? Includes;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AObjectModProperty.Mask<TItem>?>>?>? Properties;
            #endregion
        
            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }
        
            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.IsEditorOnly, rhs.IsEditorOnly)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.AddonIndex, rhs.AddonIndex)) return false;
                if (!object.Equals(this.LevelMin, rhs.LevelMin)) return false;
                if (!object.Equals(this.LevelMax, rhs.LevelMax)) return false;
                if (!object.Equals(this.Default, rhs.Default)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.MinLevelForRanks, rhs.MinLevelForRanks)) return false;
                if (!object.Equals(this.AltLevelsPerTier, rhs.AltLevelsPerTier)) return false;
                if (!object.Equals(this.Includes, rhs.Includes)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.IsEditorOnly);
                hash.Add(this.Name);
                hash.Add(this.AddonIndex);
                hash.Add(this.LevelMin);
                hash.Add(this.LevelMax);
                hash.Add(this.Default);
                hash.Add(this.Keywords);
                hash.Add(this.MinLevelForRanks);
                hash.Add(this.AltLevelsPerTier);
                hash.Add(this.Includes);
                hash.Add(this.Properties);
                return hash.ToHashCode();
            }
        
            #endregion
        
            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.IsEditorOnly)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.AddonIndex)) return false;
                if (!eval(this.LevelMin)) return false;
                if (!eval(this.LevelMax)) return false;
                if (!eval(this.Default)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.MinLevelForRanks)) return false;
                if (!eval(this.AltLevelsPerTier)) return false;
                if (this.Includes != null)
                {
                    if (!eval(this.Includes.Overall)) return false;
                    if (this.Includes.Specific != null)
                    {
                        foreach (var item in this.Includes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion
        
            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.IsEditorOnly)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.AddonIndex)) return true;
                if (eval(this.LevelMin)) return true;
                if (eval(this.LevelMax)) return true;
                if (eval(this.Default)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.MinLevelForRanks)) return true;
                if (eval(this.AltLevelsPerTier)) return true;
                if (this.Includes != null)
                {
                    if (eval(this.Includes.Overall)) return true;
                    if (this.Includes.Specific != null)
                    {
                        foreach (var item in this.Includes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion
        
            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectTemplate.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }
        
            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.IsEditorOnly = eval(this.IsEditorOnly);
                obj.Name = eval(this.Name);
                obj.AddonIndex = eval(this.AddonIndex);
                obj.LevelMin = eval(this.LevelMin);
                obj.LevelMax = eval(this.LevelMax);
                obj.Default = eval(this.Default);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.MinLevelForRanks = eval(this.MinLevelForRanks);
                obj.AltLevelsPerTier = eval(this.AltLevelsPerTier);
                if (Includes != null)
                {
                    obj.Includes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectTemplateInclude.Mask<R>?>>?>(eval(this.Includes.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectTemplateInclude.Mask<R>?>>());
                    if (Includes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectTemplateInclude.Mask<R>?>>();
                        obj.Includes.Specific = l;
                        foreach (var item in Includes.Specific)
                        {
                            MaskItemIndexed<R, ObjectTemplateInclude.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectTemplateInclude.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AObjectModProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, AObjectModProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AObjectModProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, AObjectModProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AObjectModProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion
        
            #region To String
            public override string ToString() => this.Print();
        
            public string Print(ObjectTemplate.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }
        
            public void Print(StructuredStringBuilder sb, ObjectTemplate.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ObjectTemplate.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.IsEditorOnly ?? true)
                    {
                        sb.AppendItem(IsEditorOnly, "IsEditorOnly");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.AddonIndex ?? true)
                    {
                        sb.AppendItem(AddonIndex, "AddonIndex");
                    }
                    if (printMask?.LevelMin ?? true)
                    {
                        sb.AppendItem(LevelMin, "LevelMin");
                    }
                    if (printMask?.LevelMax ?? true)
                    {
                        sb.AppendItem(LevelMax, "LevelMax");
                    }
                    if (printMask?.Default ?? true)
                    {
                        sb.AppendItem(Default, "Default");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.MinLevelForRanks ?? true)
                    {
                        sb.AppendItem(MinLevelForRanks, "MinLevelForRanks");
                    }
                    if (printMask?.AltLevelsPerTier ?? true)
                    {
                        sb.AppendItem(AltLevelsPerTier, "AltLevelsPerTier");
                    }
                    if ((printMask?.Includes?.Overall ?? true)
                        && Includes is {} IncludesItem)
                    {
                        sb.AppendLine("Includes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(IncludesItem.Overall);
                            if (IncludesItem.Specific != null)
                            {
                                foreach (var subItem in IncludesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        sb.AppendLine("Properties =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion
        
        }
        
        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? IsEditorOnly;
            public Exception? Name;
            public Exception? AddonIndex;
            public Exception? LevelMin;
            public Exception? LevelMax;
            public Exception? Default;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? MinLevelForRanks;
            public Exception? AltLevelsPerTier;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplateInclude.ErrorMask?>>?>? Includes;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>? Properties;
            #endregion
        
            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ObjectTemplate_FieldIndex enu = (ObjectTemplate_FieldIndex)index;
                switch (enu)
                {
                    case ObjectTemplate_FieldIndex.IsEditorOnly:
                        return IsEditorOnly;
                    case ObjectTemplate_FieldIndex.Name:
                        return Name;
                    case ObjectTemplate_FieldIndex.AddonIndex:
                        return AddonIndex;
                    case ObjectTemplate_FieldIndex.LevelMin:
                        return LevelMin;
                    case ObjectTemplate_FieldIndex.LevelMax:
                        return LevelMax;
                    case ObjectTemplate_FieldIndex.Default:
                        return Default;
                    case ObjectTemplate_FieldIndex.Keywords:
                        return Keywords;
                    case ObjectTemplate_FieldIndex.MinLevelForRanks:
                        return MinLevelForRanks;
                    case ObjectTemplate_FieldIndex.AltLevelsPerTier:
                        return AltLevelsPerTier;
                    case ObjectTemplate_FieldIndex.Includes:
                        return Includes;
                    case ObjectTemplate_FieldIndex.Properties:
                        return Properties;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthException(int index, Exception ex)
            {
                ObjectTemplate_FieldIndex enu = (ObjectTemplate_FieldIndex)index;
                switch (enu)
                {
                    case ObjectTemplate_FieldIndex.IsEditorOnly:
                        this.IsEditorOnly = ex;
                        break;
                    case ObjectTemplate_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ObjectTemplate_FieldIndex.AddonIndex:
                        this.AddonIndex = ex;
                        break;
                    case ObjectTemplate_FieldIndex.LevelMin:
                        this.LevelMin = ex;
                        break;
                    case ObjectTemplate_FieldIndex.LevelMax:
                        this.LevelMax = ex;
                        break;
                    case ObjectTemplate_FieldIndex.Default:
                        this.Default = ex;
                        break;
                    case ObjectTemplate_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ObjectTemplate_FieldIndex.MinLevelForRanks:
                        this.MinLevelForRanks = ex;
                        break;
                    case ObjectTemplate_FieldIndex.AltLevelsPerTier:
                        this.AltLevelsPerTier = ex;
                        break;
                    case ObjectTemplate_FieldIndex.Includes:
                        this.Includes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplateInclude.ErrorMask?>>?>(ex, null);
                        break;
                    case ObjectTemplate_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthMask(int index, object obj)
            {
                ObjectTemplate_FieldIndex enu = (ObjectTemplate_FieldIndex)index;
                switch (enu)
                {
                    case ObjectTemplate_FieldIndex.IsEditorOnly:
                        this.IsEditorOnly = (Exception?)obj;
                        break;
                    case ObjectTemplate_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ObjectTemplate_FieldIndex.AddonIndex:
                        this.AddonIndex = (Exception?)obj;
                        break;
                    case ObjectTemplate_FieldIndex.LevelMin:
                        this.LevelMin = (Exception?)obj;
                        break;
                    case ObjectTemplate_FieldIndex.LevelMax:
                        this.LevelMax = (Exception?)obj;
                        break;
                    case ObjectTemplate_FieldIndex.Default:
                        this.Default = (Exception?)obj;
                        break;
                    case ObjectTemplate_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ObjectTemplate_FieldIndex.MinLevelForRanks:
                        this.MinLevelForRanks = (Exception?)obj;
                        break;
                    case ObjectTemplate_FieldIndex.AltLevelsPerTier:
                        this.AltLevelsPerTier = (Exception?)obj;
                        break;
                    case ObjectTemplate_FieldIndex.Includes:
                        this.Includes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplateInclude.ErrorMask?>>?>)obj;
                        break;
                    case ObjectTemplate_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public bool IsInError()
            {
                if (Overall != null) return true;
                if (IsEditorOnly != null) return true;
                if (Name != null) return true;
                if (AddonIndex != null) return true;
                if (LevelMin != null) return true;
                if (LevelMax != null) return true;
                if (Default != null) return true;
                if (Keywords != null) return true;
                if (MinLevelForRanks != null) return true;
                if (AltLevelsPerTier != null) return true;
                if (Includes != null) return true;
                if (Properties != null) return true;
                return false;
            }
            #endregion
        
            #region To String
            public override string ToString() => this.Print();
        
            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(IsEditorOnly, "IsEditorOnly");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(AddonIndex, "AddonIndex");
                }
                {
                    sb.AppendItem(LevelMin, "LevelMin");
                }
                {
                    sb.AppendItem(LevelMax, "LevelMax");
                }
                {
                    sb.AppendItem(Default, "Default");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(MinLevelForRanks, "MinLevelForRanks");
                }
                {
                    sb.AppendItem(AltLevelsPerTier, "AltLevelsPerTier");
                }
                if (Includes is {} IncludesItem)
                {
                    sb.AppendLine("Includes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(IncludesItem.Overall);
                        if (IncludesItem.Specific != null)
                        {
                            foreach (var subItem in IncludesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Properties is {} PropertiesItem)
                {
                    sb.AppendLine("Properties =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion
        
            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.IsEditorOnly = this.IsEditorOnly.Combine(rhs.IsEditorOnly);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.AddonIndex = this.AddonIndex.Combine(rhs.AddonIndex);
                ret.LevelMin = this.LevelMin.Combine(rhs.LevelMin);
                ret.LevelMax = this.LevelMax.Combine(rhs.LevelMax);
                ret.Default = this.Default.Combine(rhs.Default);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.MinLevelForRanks = this.MinLevelForRanks.Combine(rhs.MinLevelForRanks);
                ret.AltLevelsPerTier = this.AltLevelsPerTier.Combine(rhs.AltLevelsPerTier);
                ret.Includes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplateInclude.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Includes?.Overall, rhs.Includes?.Overall), Noggog.ExceptionExt.Combine(this.Includes?.Specific, rhs.Includes?.Specific));
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AObjectModProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), Noggog.ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion
        
            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion
        
        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool IsEditorOnly;
            public bool Name;
            public bool AddonIndex;
            public bool LevelMin;
            public bool LevelMax;
            public bool Default;
            public bool Keywords;
            public bool MinLevelForRanks;
            public bool AltLevelsPerTier;
            public ObjectTemplateInclude.TranslationMask? Includes;
            public AObjectModProperty.TranslationMask? Properties;
            #endregion
        
            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.IsEditorOnly = defaultOn;
                this.Name = defaultOn;
                this.AddonIndex = defaultOn;
                this.LevelMin = defaultOn;
                this.LevelMax = defaultOn;
                this.Default = defaultOn;
                this.Keywords = defaultOn;
                this.MinLevelForRanks = defaultOn;
                this.AltLevelsPerTier = defaultOn;
            }
        
            #endregion
        
            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }
        
            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((IsEditorOnly, null));
                ret.Add((Name, null));
                ret.Add((AddonIndex, null));
                ret.Add((LevelMin, null));
                ret.Add((LevelMax, null));
                ret.Add((Default, null));
                ret.Add((Keywords, null));
                ret.Add((MinLevelForRanks, null));
                ret.Add((AltLevelsPerTier, null));
                ret.Add((Includes == null ? DefaultOn : !Includes.GetCrystal().CopyNothing, Includes?.GetCrystal()));
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
            }
        
            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }
        
        }
    }
}
