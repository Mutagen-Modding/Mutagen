/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    public partial class Attack :
        IAttack,
        IEquatable<IAttackGetter>,
        ILoquiObjectSetter<Attack>
    {
        #region Ctor
        public Attack()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AttackData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AttackData? _AttackData;
        public AttackData? AttackData
        {
            get => _AttackData;
            set => _AttackData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAttackDataGetter? IAttackGetter.AttackData => this.AttackData;
        #endregion
        #region AttackEvent
        public String? AttackEvent { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IAttackGetter.AttackEvent => this.AttackEvent;
        #endregion
        #region WeaponSlot
        private readonly IFormLinkNullable<IEquipTypeGetter> _WeaponSlot = new FormLinkNullable<IEquipTypeGetter>();
        public IFormLinkNullable<IEquipTypeGetter> WeaponSlot
        {
            get => _WeaponSlot;
            set => _WeaponSlot.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEquipTypeGetter> IAttackGetter.WeaponSlot => this.WeaponSlot;
        #endregion
        #region RequiredSlot
        private readonly IFormLinkNullable<IEquipTypeGetter> _RequiredSlot = new FormLinkNullable<IEquipTypeGetter>();
        public IFormLinkNullable<IEquipTypeGetter> RequiredSlot
        {
            get => _RequiredSlot;
            set => _RequiredSlot.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEquipTypeGetter> IAttackGetter.RequiredSlot => this.RequiredSlot;
        #endregion
        #region Description
        public String? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IAttackGetter.Description => this.Description;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AttackMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAttackGetter rhs) return false;
            return ((AttackCommon)((IAttackGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAttackGetter? obj)
        {
            return ((AttackCommon)((IAttackGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AttackCommon)((IAttackGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.AttackData = new MaskItem<TItem, AttackData.Mask<TItem>?>(initialValue, new AttackData.Mask<TItem>(initialValue));
                this.AttackEvent = initialValue;
                this.WeaponSlot = initialValue;
                this.RequiredSlot = initialValue;
                this.Description = initialValue;
            }

            public Mask(
                TItem AttackData,
                TItem AttackEvent,
                TItem WeaponSlot,
                TItem RequiredSlot,
                TItem Description)
            {
                this.AttackData = new MaskItem<TItem, AttackData.Mask<TItem>?>(AttackData, new AttackData.Mask<TItem>(AttackData));
                this.AttackEvent = AttackEvent;
                this.WeaponSlot = WeaponSlot;
                this.RequiredSlot = RequiredSlot;
                this.Description = Description;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, AttackData.Mask<TItem>?>? AttackData { get; set; }
            public TItem AttackEvent;
            public TItem WeaponSlot;
            public TItem RequiredSlot;
            public TItem Description;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.AttackData, rhs.AttackData)) return false;
                if (!object.Equals(this.AttackEvent, rhs.AttackEvent)) return false;
                if (!object.Equals(this.WeaponSlot, rhs.WeaponSlot)) return false;
                if (!object.Equals(this.RequiredSlot, rhs.RequiredSlot)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.AttackData);
                hash.Add(this.AttackEvent);
                hash.Add(this.WeaponSlot);
                hash.Add(this.RequiredSlot);
                hash.Add(this.Description);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (AttackData != null)
                {
                    if (!eval(this.AttackData.Overall)) return false;
                    if (this.AttackData.Specific != null && !this.AttackData.Specific.All(eval)) return false;
                }
                if (!eval(this.AttackEvent)) return false;
                if (!eval(this.WeaponSlot)) return false;
                if (!eval(this.RequiredSlot)) return false;
                if (!eval(this.Description)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (AttackData != null)
                {
                    if (eval(this.AttackData.Overall)) return true;
                    if (this.AttackData.Specific != null && this.AttackData.Specific.Any(eval)) return true;
                }
                if (eval(this.AttackEvent)) return true;
                if (eval(this.WeaponSlot)) return true;
                if (eval(this.RequiredSlot)) return true;
                if (eval(this.Description)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Attack.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.AttackData = this.AttackData == null ? null : new MaskItem<R, AttackData.Mask<R>?>(eval(this.AttackData.Overall), this.AttackData.Specific?.Translate(eval));
                obj.AttackEvent = eval(this.AttackEvent);
                obj.WeaponSlot = eval(this.WeaponSlot);
                obj.RequiredSlot = eval(this.RequiredSlot);
                obj.Description = eval(this.Description);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Attack.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Attack.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Attack.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.AttackData?.Overall ?? true)
                    {
                        AttackData?.Print(sb);
                    }
                    if (printMask?.AttackEvent ?? true)
                    {
                        sb.AppendItem(AttackEvent, "AttackEvent");
                    }
                    if (printMask?.WeaponSlot ?? true)
                    {
                        sb.AppendItem(WeaponSlot, "WeaponSlot");
                    }
                    if (printMask?.RequiredSlot ?? true)
                    {
                        sb.AppendItem(RequiredSlot, "RequiredSlot");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, AttackData.ErrorMask?>? AttackData;
            public Exception? AttackEvent;
            public Exception? WeaponSlot;
            public Exception? RequiredSlot;
            public Exception? Description;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Attack_FieldIndex enu = (Attack_FieldIndex)index;
                switch (enu)
                {
                    case Attack_FieldIndex.AttackData:
                        return AttackData;
                    case Attack_FieldIndex.AttackEvent:
                        return AttackEvent;
                    case Attack_FieldIndex.WeaponSlot:
                        return WeaponSlot;
                    case Attack_FieldIndex.RequiredSlot:
                        return RequiredSlot;
                    case Attack_FieldIndex.Description:
                        return Description;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Attack_FieldIndex enu = (Attack_FieldIndex)index;
                switch (enu)
                {
                    case Attack_FieldIndex.AttackData:
                        this.AttackData = new MaskItem<Exception?, AttackData.ErrorMask?>(ex, null);
                        break;
                    case Attack_FieldIndex.AttackEvent:
                        this.AttackEvent = ex;
                        break;
                    case Attack_FieldIndex.WeaponSlot:
                        this.WeaponSlot = ex;
                        break;
                    case Attack_FieldIndex.RequiredSlot:
                        this.RequiredSlot = ex;
                        break;
                    case Attack_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Attack_FieldIndex enu = (Attack_FieldIndex)index;
                switch (enu)
                {
                    case Attack_FieldIndex.AttackData:
                        this.AttackData = (MaskItem<Exception?, AttackData.ErrorMask?>?)obj;
                        break;
                    case Attack_FieldIndex.AttackEvent:
                        this.AttackEvent = (Exception?)obj;
                        break;
                    case Attack_FieldIndex.WeaponSlot:
                        this.WeaponSlot = (Exception?)obj;
                        break;
                    case Attack_FieldIndex.RequiredSlot:
                        this.RequiredSlot = (Exception?)obj;
                        break;
                    case Attack_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (AttackData != null) return true;
                if (AttackEvent != null) return true;
                if (WeaponSlot != null) return true;
                if (RequiredSlot != null) return true;
                if (Description != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                AttackData?.Print(sb);
                {
                    sb.AppendItem(AttackEvent, "AttackEvent");
                }
                {
                    sb.AppendItem(WeaponSlot, "WeaponSlot");
                }
                {
                    sb.AppendItem(RequiredSlot, "RequiredSlot");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.AttackData = this.AttackData.Combine(rhs.AttackData, (l, r) => l.Combine(r));
                ret.AttackEvent = this.AttackEvent.Combine(rhs.AttackEvent);
                ret.WeaponSlot = this.WeaponSlot.Combine(rhs.WeaponSlot);
                ret.RequiredSlot = this.RequiredSlot.Combine(rhs.RequiredSlot);
                ret.Description = this.Description.Combine(rhs.Description);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public AttackData.TranslationMask? AttackData;
            public bool AttackEvent;
            public bool WeaponSlot;
            public bool RequiredSlot;
            public bool Description;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.AttackEvent = defaultOn;
                this.WeaponSlot = defaultOn;
                this.RequiredSlot = defaultOn;
                this.Description = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((AttackData != null ? AttackData.OnOverall : DefaultOn, AttackData?.GetCrystal()));
                ret.Add((AttackEvent, null));
                ret.Add((WeaponSlot, null));
                ret.Add((RequiredSlot, null));
                ret.Add((Description, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AttackCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AttackSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AttackBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AttackBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Attack CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Attack();
            ((AttackSetterCommon)((IAttackGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Attack item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AttackSetterCommon)((IAttackGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Attack GetNew()
        {
            return new Attack();
        }

    }
    #endregion

    #region Interface
    public partial interface IAttack :
        IAttackGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IAttack>
    {
        new AttackData? AttackData { get; set; }
        new String? AttackEvent { get; set; }
        new IFormLinkNullable<IEquipTypeGetter> WeaponSlot { get; set; }
        new IFormLinkNullable<IEquipTypeGetter> RequiredSlot { get; set; }
        new String? Description { get; set; }
    }

    public partial interface IAttackGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IAttackGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Attack_Registration.Instance;
        IAttackDataGetter? AttackData { get; }
        String? AttackEvent { get; }
        IFormLinkNullableGetter<IEquipTypeGetter> WeaponSlot { get; }
        IFormLinkNullableGetter<IEquipTypeGetter> RequiredSlot { get; }
        String? Description { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AttackMixIn
    {
        public static void Clear(this IAttack item)
        {
            ((AttackSetterCommon)((IAttackGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Attack.Mask<bool> GetEqualsMask(
            this IAttackGetter item,
            IAttackGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AttackCommon)((IAttackGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAttackGetter item,
            string? name = null,
            Attack.Mask<bool>? printMask = null)
        {
            return ((AttackCommon)((IAttackGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAttackGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Attack.Mask<bool>? printMask = null)
        {
            ((AttackCommon)((IAttackGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAttackGetter item,
            IAttackGetter rhs,
            Attack.TranslationMask? equalsMask = null)
        {
            return ((AttackCommon)((IAttackGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAttack lhs,
            IAttackGetter rhs)
        {
            ((AttackSetterTranslationCommon)((IAttackGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAttack lhs,
            IAttackGetter rhs,
            Attack.TranslationMask? copyMask = null)
        {
            ((AttackSetterTranslationCommon)((IAttackGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAttack lhs,
            IAttackGetter rhs,
            out Attack.ErrorMask errorMask,
            Attack.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AttackSetterTranslationCommon)((IAttackGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Attack.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAttack lhs,
            IAttackGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AttackSetterTranslationCommon)((IAttackGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Attack DeepCopy(
            this IAttackGetter item,
            Attack.TranslationMask? copyMask = null)
        {
            return ((AttackSetterTranslationCommon)((IAttackGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Attack DeepCopy(
            this IAttackGetter item,
            out Attack.ErrorMask errorMask,
            Attack.TranslationMask? copyMask = null)
        {
            return ((AttackSetterTranslationCommon)((IAttackGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Attack DeepCopy(
            this IAttackGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AttackSetterTranslationCommon)((IAttackGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAttack item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AttackSetterCommon)((IAttackGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum Attack_FieldIndex
    {
        AttackData = 0,
        AttackEvent = 1,
        WeaponSlot = 2,
        RequiredSlot = 3,
        Description = 4,
    }
    #endregion

    #region Registration
    internal partial class Attack_Registration : ILoquiRegistration
    {
        public static readonly Attack_Registration Instance = new Attack_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(Attack.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Attack.ErrorMask);

        public static readonly Type ClassType = typeof(Attack);

        public static readonly Type GetterType = typeof(IAttackGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAttack);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout4.Attack";

        public const string Name = "Attack";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.ATKD,
                RecordTypes.ATKE,
                RecordTypes.ATKW,
                RecordTypes.ATKS,
                RecordTypes.ATKT);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AttackBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AttackSetterCommon
    {
        public static readonly AttackSetterCommon Instance = new AttackSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAttack item)
        {
            ClearPartial();
            item.AttackData = null;
            item.AttackEvent = default;
            item.WeaponSlot.Clear();
            item.RequiredSlot.Clear();
            item.Description = default;
        }
        
        #region Mutagen
        public void RemapLinks(IAttack obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.AttackData?.RemapLinks(mapping);
            obj.WeaponSlot.Relink(mapping);
            obj.RequiredSlot.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAttack item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: AttackBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class AttackCommon
    {
        public static readonly AttackCommon Instance = new AttackCommon();

        public Attack.Mask<bool> GetEqualsMask(
            IAttackGetter item,
            IAttackGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Attack.Mask<bool>(false);
            ((AttackCommon)((IAttackGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAttackGetter item,
            IAttackGetter rhs,
            Attack.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.AttackData = EqualsMaskHelper.EqualsHelper(
                item.AttackData,
                rhs.AttackData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.AttackEvent = string.Equals(item.AttackEvent, rhs.AttackEvent);
            ret.WeaponSlot = item.WeaponSlot.Equals(rhs.WeaponSlot);
            ret.RequiredSlot = item.RequiredSlot.Equals(rhs.RequiredSlot);
            ret.Description = string.Equals(item.Description, rhs.Description);
        }
        
        public string Print(
            IAttackGetter item,
            string? name = null,
            Attack.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAttackGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Attack.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Attack =>");
            }
            else
            {
                sb.AppendLine($"{name} (Attack) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAttackGetter item,
            StructuredStringBuilder sb,
            Attack.Mask<bool>? printMask = null)
        {
            if ((printMask?.AttackData?.Overall ?? true)
                && item.AttackData is {} AttackDataItem)
            {
                AttackDataItem?.Print(sb, "AttackData");
            }
            if ((printMask?.AttackEvent ?? true)
                && item.AttackEvent is {} AttackEventItem)
            {
                sb.AppendItem(AttackEventItem, "AttackEvent");
            }
            if (printMask?.WeaponSlot ?? true)
            {
                sb.AppendItem(item.WeaponSlot.FormKeyNullable, "WeaponSlot");
            }
            if (printMask?.RequiredSlot ?? true)
            {
                sb.AppendItem(item.RequiredSlot.FormKeyNullable, "RequiredSlot");
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAttackGetter? lhs,
            IAttackGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Attack_FieldIndex.AttackData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AttackData, rhs.AttackData, out var lhsAttackData, out var rhsAttackData, out var isAttackDataEqual))
                {
                    if (!((AttackDataCommon)((IAttackDataGetter)lhsAttackData).CommonInstance()!).Equals(lhsAttackData, rhsAttackData, equalsMask?.GetSubCrystal((int)Attack_FieldIndex.AttackData))) return false;
                }
                else if (!isAttackDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Attack_FieldIndex.AttackEvent) ?? true))
            {
                if (!string.Equals(lhs.AttackEvent, rhs.AttackEvent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Attack_FieldIndex.WeaponSlot) ?? true))
            {
                if (!lhs.WeaponSlot.Equals(rhs.WeaponSlot)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Attack_FieldIndex.RequiredSlot) ?? true))
            {
                if (!lhs.RequiredSlot.Equals(rhs.RequiredSlot)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Attack_FieldIndex.Description) ?? true))
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IAttackGetter item)
        {
            var hash = new HashCode();
            if (item.AttackData is {} AttackDataitem)
            {
                hash.Add(AttackDataitem);
            }
            if (item.AttackEvent is {} AttackEventitem)
            {
                hash.Add(AttackEventitem);
            }
            hash.Add(item.WeaponSlot);
            hash.Add(item.RequiredSlot);
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Attack.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAttackGetter obj)
        {
            if (obj.AttackData is {} AttackDataItems)
            {
                foreach (var item in AttackDataItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.WeaponSlot, out var WeaponSlotInfo))
            {
                yield return WeaponSlotInfo;
            }
            if (FormLinkInformation.TryFactory(obj.RequiredSlot, out var RequiredSlotInfo))
            {
                yield return RequiredSlotInfo;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class AttackSetterTranslationCommon
    {
        public static readonly AttackSetterTranslationCommon Instance = new AttackSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAttack item,
            IAttackGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Attack_FieldIndex.AttackData) ?? true))
            {
                errorMask?.PushIndex((int)Attack_FieldIndex.AttackData);
                try
                {
                    if(rhs.AttackData is {} rhsAttackData)
                    {
                        item.AttackData = rhsAttackData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Attack_FieldIndex.AttackData));
                    }
                    else
                    {
                        item.AttackData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Attack_FieldIndex.AttackEvent) ?? true))
            {
                item.AttackEvent = rhs.AttackEvent;
            }
            if ((copyMask?.GetShouldTranslate((int)Attack_FieldIndex.WeaponSlot) ?? true))
            {
                item.WeaponSlot.SetTo(rhs.WeaponSlot.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Attack_FieldIndex.RequiredSlot) ?? true))
            {
                item.RequiredSlot.SetTo(rhs.RequiredSlot.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Attack_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IAttack item,
            IAttackGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public Attack DeepCopy(
            IAttackGetter item,
            Attack.TranslationMask? copyMask = null)
        {
            Attack ret = (Attack)((AttackCommon)((IAttackGetter)item).CommonInstance()!).GetNew();
            ((AttackSetterTranslationCommon)((IAttackGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Attack DeepCopy(
            IAttackGetter item,
            out Attack.ErrorMask errorMask,
            Attack.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Attack ret = (Attack)((AttackCommon)((IAttackGetter)item).CommonInstance()!).GetNew();
            ((AttackSetterTranslationCommon)((IAttackGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Attack.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Attack DeepCopy(
            IAttackGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Attack ret = (Attack)((AttackCommon)((IAttackGetter)item).CommonInstance()!).GetNew();
            ((AttackSetterTranslationCommon)((IAttackGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Attack
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Attack_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Attack_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AttackCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return AttackSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AttackSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAttackGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAttackGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAttackGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class AttackBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly AttackBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IAttackGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            if (item.AttackData is {} AttackDataItem)
            {
                ((AttackDataBinaryWriteTranslation)((IBinaryItem)AttackDataItem).BinaryWriteTranslator).Write(
                    item: AttackDataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackEvent,
                header: translationParams.ConvertToCustom(RecordTypes.ATKE),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WeaponSlot,
                header: translationParams.ConvertToCustom(RecordTypes.ATKW));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.RequiredSlot,
                header: translationParams.ConvertToCustom(RecordTypes.ATKS));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.ATKT),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            IAttackGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAttackGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AttackBinaryCreateTranslation
    {
        public static readonly AttackBinaryCreateTranslation Instance = new AttackBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IAttack item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ATKD:
                {
                    if (lastParsed.ShortCircuit((int)Attack_FieldIndex.AttackData, translationParams)) return ParseResult.Stop;
                    item.AttackData = Mutagen.Bethesda.Fallout4.AttackData.CreateFromBinary(frame: frame);
                    return (int)Attack_FieldIndex.AttackData;
                }
                case RecordTypeInts.ATKE:
                {
                    if (lastParsed.ShortCircuit((int)Attack_FieldIndex.AttackEvent, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttackEvent = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Attack_FieldIndex.AttackEvent;
                }
                case RecordTypeInts.ATKW:
                {
                    if (lastParsed.ShortCircuit((int)Attack_FieldIndex.WeaponSlot, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WeaponSlot.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Attack_FieldIndex.WeaponSlot;
                }
                case RecordTypeInts.ATKS:
                {
                    if (lastParsed.ShortCircuit((int)Attack_FieldIndex.RequiredSlot, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RequiredSlot.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Attack_FieldIndex.RequiredSlot;
                }
                case RecordTypeInts.ATKT:
                {
                    if (lastParsed.ShortCircuit((int)Attack_FieldIndex.Description, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Attack_FieldIndex.Description;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class AttackBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAttackGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AttackBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal partial class AttackBinaryOverlay :
        PluginBinaryOverlay,
        IAttackGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Attack_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Attack_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AttackCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AttackSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAttackGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IAttackGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAttackGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AttackCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AttackBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AttackBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region AttackData
        private RangeInt32? _AttackDataLocation;
        public IAttackDataGetter? AttackData => _AttackDataLocation.HasValue ? AttackDataBinaryOverlay.AttackDataFactory(_recordData.Slice(_AttackDataLocation!.Value.Min), _package) : default;
        #endregion
        #region AttackEvent
        private int? _AttackEventLocation;
        public String? AttackEvent => _AttackEventLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AttackEventLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region WeaponSlot
        private int? _WeaponSlotLocation;
        public IFormLinkNullableGetter<IEquipTypeGetter> WeaponSlot => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEquipTypeGetter>(_package, _recordData, _WeaponSlotLocation);
        #endregion
        #region RequiredSlot
        private int? _RequiredSlotLocation;
        public IFormLinkNullableGetter<IEquipTypeGetter> RequiredSlot => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEquipTypeGetter>(_package, _recordData, _RequiredSlotLocation);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AttackBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IAttackGetter AttackFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new AttackBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IAttackGetter AttackFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AttackFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ATKD:
                {
                    if (lastParsed.ShortCircuit((int)Attack_FieldIndex.AttackData, translationParams)) return ParseResult.Stop;
                    _AttackDataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Attack_FieldIndex.AttackData;
                }
                case RecordTypeInts.ATKE:
                {
                    if (lastParsed.ShortCircuit((int)Attack_FieldIndex.AttackEvent, translationParams)) return ParseResult.Stop;
                    _AttackEventLocation = (stream.Position - offset);
                    return (int)Attack_FieldIndex.AttackEvent;
                }
                case RecordTypeInts.ATKW:
                {
                    if (lastParsed.ShortCircuit((int)Attack_FieldIndex.WeaponSlot, translationParams)) return ParseResult.Stop;
                    _WeaponSlotLocation = (stream.Position - offset);
                    return (int)Attack_FieldIndex.WeaponSlot;
                }
                case RecordTypeInts.ATKS:
                {
                    if (lastParsed.ShortCircuit((int)Attack_FieldIndex.RequiredSlot, translationParams)) return ParseResult.Stop;
                    _RequiredSlotLocation = (stream.Position - offset);
                    return (int)Attack_FieldIndex.RequiredSlot;
                }
                case RecordTypeInts.ATKT:
                {
                    if (lastParsed.ShortCircuit((int)Attack_FieldIndex.Description, translationParams)) return ParseResult.Stop;
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Attack_FieldIndex.Description;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AttackMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAttackGetter rhs) return false;
            return ((AttackCommon)((IAttackGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAttackGetter? obj)
        {
            return ((AttackCommon)((IAttackGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AttackCommon)((IAttackGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

