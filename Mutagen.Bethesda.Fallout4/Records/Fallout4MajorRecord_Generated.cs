/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout4.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout4.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout4.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout4
{
    #region Class
    /// <summary>
    /// Implemented by: [AcousticSpace, ActionRecord, Activator, ActorValueInformation, AddonNode, AimModel, Ammunition, AnimatedObject, AnimationSoundTagSet, Armor, ArmorAddon, ArtObject, AssociationType, AttractionRule, AudioCategorySnapshot, AudioEffectChain, BendableSpline, BodyPartData, Book, CameraPath, CameraShot, Cell, Class, Climate, CollisionLayer, ColorRecord, CombatStyle, Component, ConstructibleObject, Container, ADamageType, Debris, DefaultObject, DefaultObjectManager, DialogBranch, DialogResponses, DialogTopic, DialogView, Door, DualCastData, EffectShader, EncounterZone, EquipType, Explosion, Faction, Flora, Footstep, FootstepSet, FormList, Furniture, GameSetting, Global, GodRays, Grass, Hazard, HeadPart, Holotape, IdleAnimation, IdleMarker, ImageSpace, ImageSpaceAdapter, Impact, ImpactDataSet, Ingestible, Ingredient, InstanceNamingRules, Key, Keyword, Landscape, LandscapeTexture, Layer, LensFlare, LeveledItem, LeveledNpc, Light, LightingTemplate, LoadScreen, Location, LocationReferenceType, MagicEffect, MaterialObject, MaterialSwap, MaterialType, Message, MiscItem, MovableStatic, MovementType, MusicTrack, MusicType, NavigationMesh, NavigationMeshInfoMap, NavigationMeshObstacleManager, Npc, ObjectEffect, AObjectModification, ObjectVisibilityManager, Outfit, Package, PackIn, Perk, PlacedNpc, PlacedObject, APlacedTrap, Projectile, Quest, Race, ReferenceGroup, Region, Relationship, ReverbParameters, Scene, SceneCollection, ShaderParticleGeometry, SoundCategory, SoundDescriptor, SoundKeywordMapping, SoundMarker, SoundOutputModel, Spell, Static, StaticCollection, AStoryManagerNode, TalkingActivator, Terminal, TextureSet, Transform, Tree, VisualEffect, VoiceType, Water, Weapon, Weather, Worldspace, Zoom]
    /// </summary>
    public abstract partial class Fallout4MajorRecord :
        MajorRecord,
        IEquatable<IFallout4MajorRecordGetter>,
        IFallout4MajorRecordInternal,
        ILoquiObjectSetter<Fallout4MajorRecord>
    {
        #region Ctor
        protected Fallout4MajorRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FormVersion
        public UInt16 FormVersion { get; set; } = default(UInt16);
        #endregion
        #region Version2
        public UInt16 Version2 { get; set; } = default(UInt16);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            Fallout4MajorRecordMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.FormVersion = initialValue;
                this.Version2 = initialValue;
                this.Fallout4MajorRecordFlags = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout4MajorRecordFlags)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID)
            {
                this.FormVersion = FormVersion;
                this.Version2 = Version2;
                this.Fallout4MajorRecordFlags = Fallout4MajorRecordFlags;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FormVersion;
            public TItem Version2;
            public TItem Fallout4MajorRecordFlags;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.FormVersion, rhs.FormVersion)) return false;
                if (!object.Equals(this.Version2, rhs.Version2)) return false;
                if (!object.Equals(this.Fallout4MajorRecordFlags, rhs.Fallout4MajorRecordFlags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FormVersion);
                hash.Add(this.Version2);
                hash.Add(this.Fallout4MajorRecordFlags);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.FormVersion)) return false;
                if (!eval(this.Version2)) return false;
                if (!eval(this.Fallout4MajorRecordFlags)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.FormVersion)) return true;
                if (eval(this.Version2)) return true;
                if (eval(this.Fallout4MajorRecordFlags)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Fallout4MajorRecord.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.FormVersion = eval(this.FormVersion);
                obj.Version2 = eval(this.Version2);
                obj.Fallout4MajorRecordFlags = eval(this.Fallout4MajorRecordFlags);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Fallout4MajorRecord.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Fallout4MajorRecord.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Fallout4MajorRecord.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.FormVersion ?? true)
                    {
                        sb.AppendItem(FormVersion, "FormVersion");
                    }
                    if (printMask?.Version2 ?? true)
                    {
                        sb.AppendItem(Version2, "Version2");
                    }
                    if (printMask?.Fallout4MajorRecordFlags ?? true)
                    {
                        sb.AppendItem(Fallout4MajorRecordFlags, "Fallout4MajorRecordFlags");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? FormVersion;
            public Exception? Version2;
            public Exception? Fallout4MajorRecordFlags;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Fallout4MajorRecord_FieldIndex enu = (Fallout4MajorRecord_FieldIndex)index;
                switch (enu)
                {
                    case Fallout4MajorRecord_FieldIndex.FormVersion:
                        return FormVersion;
                    case Fallout4MajorRecord_FieldIndex.Version2:
                        return Version2;
                    case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                        return Fallout4MajorRecordFlags;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Fallout4MajorRecord_FieldIndex enu = (Fallout4MajorRecord_FieldIndex)index;
                switch (enu)
                {
                    case Fallout4MajorRecord_FieldIndex.FormVersion:
                        this.FormVersion = ex;
                        break;
                    case Fallout4MajorRecord_FieldIndex.Version2:
                        this.Version2 = ex;
                        break;
                    case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                        this.Fallout4MajorRecordFlags = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Fallout4MajorRecord_FieldIndex enu = (Fallout4MajorRecord_FieldIndex)index;
                switch (enu)
                {
                    case Fallout4MajorRecord_FieldIndex.FormVersion:
                        this.FormVersion = (Exception?)obj;
                        break;
                    case Fallout4MajorRecord_FieldIndex.Version2:
                        this.Version2 = (Exception?)obj;
                        break;
                    case Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags:
                        this.Fallout4MajorRecordFlags = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (FormVersion != null) return true;
                if (Version2 != null) return true;
                if (Fallout4MajorRecordFlags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(FormVersion, "FormVersion");
                }
                {
                    sb.AppendItem(Version2, "Version2");
                }
                {
                    sb.AppendItem(Fallout4MajorRecordFlags, "Fallout4MajorRecordFlags");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FormVersion = this.FormVersion.Combine(rhs.FormVersion);
                ret.Version2 = this.Version2.Combine(rhs.Version2);
                ret.Fallout4MajorRecordFlags = this.Fallout4MajorRecordFlags.Combine(rhs.Fallout4MajorRecordFlags);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool FormVersion;
            public bool Version2;
            public bool Fallout4MajorRecordFlags;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.FormVersion = defaultOn;
                this.Version2 = defaultOn;
                this.Fallout4MajorRecordFlags = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((FormVersion, null));
                ret.Add((Version2, null));
                ret.Add((Fallout4MajorRecordFlags, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => Fallout4MajorRecordCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => Fallout4MajorRecordSetterCommon.Instance.RemapLinks(this, mapping);
        public Fallout4MajorRecord(
            FormKey formKey,
            Fallout4Release gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Fallout4MajorRecord(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Fallout4MajorRecord(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Fallout4MajorRecord(IFallout4Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout4Release)
        {
        }

        public Fallout4MajorRecord(IFallout4Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout4Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Fallout4MajorRecord>.ToString(this);
        }

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<IFormLinkIdentifier> formLinks) => this.Remove(formLinks);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => Fallout4MajorRecordCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => Fallout4MajorRecordSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => Fallout4MajorRecordSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => Fallout4MajorRecordSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFallout4MajorRecordGetter rhs) return false;
            return ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFallout4MajorRecordGetter? obj)
        {
            return ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => Fallout4MajorRecordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((Fallout4MajorRecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Fallout4MajorRecord GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [AcousticSpace, ActionRecord, Activator, ActorValueInformation, AddonNode, AimModel, Ammunition, AnimatedObject, AnimationSoundTagSet, Armor, ArmorAddon, ArtObject, AssociationType, AttractionRule, AudioCategorySnapshot, AudioEffectChain, BendableSpline, BodyPartData, Book, CameraPath, CameraShot, Cell, Class, Climate, CollisionLayer, ColorRecord, CombatStyle, Component, ConstructibleObject, Container, ADamageType, Debris, DefaultObject, DefaultObjectManager, DialogBranch, DialogResponses, DialogTopic, DialogView, Door, DualCastData, EffectShader, EncounterZone, EquipType, Explosion, Faction, Flora, Footstep, FootstepSet, FormList, Furniture, GameSetting, Global, GodRays, Grass, Hazard, HeadPart, Holotape, IdleAnimation, IdleMarker, ImageSpace, ImageSpaceAdapter, Impact, ImpactDataSet, Ingestible, Ingredient, InstanceNamingRules, Key, Keyword, Landscape, LandscapeTexture, Layer, LensFlare, LeveledItem, LeveledNpc, Light, LightingTemplate, LoadScreen, Location, LocationReferenceType, MagicEffect, MaterialObject, MaterialSwap, MaterialType, Message, MiscItem, MovableStatic, MovementType, MusicTrack, MusicType, NavigationMesh, NavigationMeshInfoMap, NavigationMeshObstacleManager, Npc, ObjectEffect, AObjectModification, ObjectVisibilityManager, Outfit, Package, PackIn, Perk, PlacedNpc, PlacedObject, APlacedTrap, Projectile, Quest, Race, ReferenceGroup, Region, Relationship, ReverbParameters, Scene, SceneCollection, ShaderParticleGeometry, SoundCategory, SoundDescriptor, SoundKeywordMapping, SoundMarker, SoundOutputModel, Spell, Static, StaticCollection, AStoryManagerNode, TalkingActivator, Terminal, TextureSet, Transform, Tree, VisualEffect, VoiceType, Water, Weapon, Weather, Worldspace, Zoom]
    /// </summary>
    public partial interface IFallout4MajorRecord :
        IAssetLinkContainer,
        IFallout4MajorRecordGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IFallout4MajorRecordInternal>,
        IMajorRecordEnumerable,
        IMajorRecordInternal
    {
        new UInt16 FormVersion { get; set; }
        new UInt16 Version2 { get; set; }
        new Fallout4MajorRecord.Fallout4MajorRecordFlag Fallout4MajorRecordFlags { get; set; }
    }

    public partial interface IFallout4MajorRecordInternal :
        IMajorRecordInternal,
        IFallout4MajorRecord,
        IFallout4MajorRecordGetter
    {
    }

    /// <summary>
    /// Implemented by: [AcousticSpace, ActionRecord, Activator, ActorValueInformation, AddonNode, AimModel, Ammunition, AnimatedObject, AnimationSoundTagSet, Armor, ArmorAddon, ArtObject, AssociationType, AttractionRule, AudioCategorySnapshot, AudioEffectChain, BendableSpline, BodyPartData, Book, CameraPath, CameraShot, Cell, Class, Climate, CollisionLayer, ColorRecord, CombatStyle, Component, ConstructibleObject, Container, ADamageType, Debris, DefaultObject, DefaultObjectManager, DialogBranch, DialogResponses, DialogTopic, DialogView, Door, DualCastData, EffectShader, EncounterZone, EquipType, Explosion, Faction, Flora, Footstep, FootstepSet, FormList, Furniture, GameSetting, Global, GodRays, Grass, Hazard, HeadPart, Holotape, IdleAnimation, IdleMarker, ImageSpace, ImageSpaceAdapter, Impact, ImpactDataSet, Ingestible, Ingredient, InstanceNamingRules, Key, Keyword, Landscape, LandscapeTexture, Layer, LensFlare, LeveledItem, LeveledNpc, Light, LightingTemplate, LoadScreen, Location, LocationReferenceType, MagicEffect, MaterialObject, MaterialSwap, MaterialType, Message, MiscItem, MovableStatic, MovementType, MusicTrack, MusicType, NavigationMesh, NavigationMeshInfoMap, NavigationMeshObstacleManager, Npc, ObjectEffect, AObjectModification, ObjectVisibilityManager, Outfit, Package, PackIn, Perk, PlacedNpc, PlacedObject, APlacedTrap, Projectile, Quest, Race, ReferenceGroup, Region, Relationship, ReverbParameters, Scene, SceneCollection, ShaderParticleGeometry, SoundCategory, SoundDescriptor, SoundKeywordMapping, SoundMarker, SoundOutputModel, Spell, Static, StaticCollection, AStoryManagerNode, TalkingActivator, Terminal, TextureSet, Transform, Tree, VisualEffect, VoiceType, Water, Weapon, Weather, Worldspace, Zoom]
    /// </summary>
    public partial interface IFallout4MajorRecordGetter :
        IMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IFallout4MajorRecordGetter>,
        IMajorRecordGetterEnumerable
    {
        static new ILoquiRegistration StaticRegistration => Fallout4MajorRecord_Registration.Instance;
        UInt16 FormVersion { get; }
        UInt16 Version2 { get; }
        Fallout4MajorRecord.Fallout4MajorRecordFlag Fallout4MajorRecordFlags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class Fallout4MajorRecordMixIn
    {
        public static void Clear(this IFallout4MajorRecordInternal item)
        {
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Fallout4MajorRecord.Mask<bool> GetEqualsMask(
            this IFallout4MajorRecordGetter item,
            IFallout4MajorRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFallout4MajorRecordGetter item,
            string? name = null,
            Fallout4MajorRecord.Mask<bool>? printMask = null)
        {
            return ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFallout4MajorRecordGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Fallout4MajorRecord.Mask<bool>? printMask = null)
        {
            ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFallout4MajorRecordGetter item,
            IFallout4MajorRecordGetter rhs,
            Fallout4MajorRecord.TranslationMask? equalsMask = null)
        {
            return ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFallout4MajorRecordInternal lhs,
            IFallout4MajorRecordGetter rhs,
            out Fallout4MajorRecord.ErrorMask errorMask,
            Fallout4MajorRecord.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((Fallout4MajorRecordSetterTranslationCommon)((IFallout4MajorRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Fallout4MajorRecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFallout4MajorRecordInternal lhs,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((Fallout4MajorRecordSetterTranslationCommon)((IFallout4MajorRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Fallout4MajorRecord DeepCopy(
            this IFallout4MajorRecordGetter item,
            Fallout4MajorRecord.TranslationMask? copyMask = null)
        {
            return ((Fallout4MajorRecordSetterTranslationCommon)((IFallout4MajorRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Fallout4MajorRecord DeepCopy(
            this IFallout4MajorRecordGetter item,
            out Fallout4MajorRecord.ErrorMask errorMask,
            Fallout4MajorRecord.TranslationMask? copyMask = null)
        {
            return ((Fallout4MajorRecordSetterTranslationCommon)((IFallout4MajorRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Fallout4MajorRecord DeepCopy(
            this IFallout4MajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((Fallout4MajorRecordSetterTranslationCommon)((IFallout4MajorRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this IFallout4MajorRecordGetter obj)
        {
            return ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IFallout4MajorRecordGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this IFallout4MajorRecordGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this IFallout4MajorRecordInternal obj)
        {
            return ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IFallout4MajorRecordInternal obj)
            where TMajor : class, IMajorRecordQueryable
        {
            return ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this IFallout4MajorRecordInternal obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4MajorRecordInternal obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4MajorRecordInternal obj,
            IEnumerable<FormKey> keys)
        {
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4MajorRecordInternal obj,
            IEnumerable<IFormLinkIdentifier> keys)
        {
            foreach (var g in keys.GroupBy(x => x.Type))
            {
                Remove(
                    obj: obj,
                    keys: g.Select(x => x.FormKey),
                    type: g.Key);
            }
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4MajorRecordInternal obj,
            HashSet<FormKey> keys)
        {
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4MajorRecordInternal obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4MajorRecordInternal obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout4MajorRecordInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4MajorRecordInternal obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4MajorRecordInternal obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4MajorRecordInternal obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4MajorRecordInternal obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout4MajorRecordInternal obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        public static Fallout4MajorRecord Duplicate(
            this IFallout4MajorRecordGetter item,
            FormKey formKey,
            Fallout4MajorRecord.TranslationMask? copyMask = null)
        {
            return ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Fallout4MajorRecord Duplicate(
            this IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((Fallout4MajorRecordSetterCommon)((IFallout4MajorRecordGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    #region Field Index
    internal enum Fallout4MajorRecord_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout4MajorRecordFlags = 6,
    }
    #endregion

    #region Registration
    internal partial class Fallout4MajorRecord_Registration : ILoquiRegistration
    {
        public static readonly Fallout4MajorRecord_Registration Instance = new Fallout4MajorRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout4.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(Fallout4MajorRecord.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Fallout4MajorRecord.ErrorMask);

        public static readonly Type ClassType = typeof(Fallout4MajorRecord);

        public static readonly Type GetterType = typeof(IFallout4MajorRecordGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFallout4MajorRecord);

        public static readonly Type? InternalSetterType = typeof(IFallout4MajorRecordInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout4.Fallout4MajorRecord";

        public const string Name = "Fallout4MajorRecord";

        public const string Namespace = "Mutagen.Bethesda.Fallout4";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(Fallout4MajorRecordBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class Fallout4MajorRecordSetterCommon : MajorRecordSetterCommon
    {
        public new static readonly Fallout4MajorRecordSetterCommon Instance = new Fallout4MajorRecordSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IFallout4MajorRecordInternal item)
        {
            ClearPartial();
            item.FormVersion = default(UInt16);
            item.Version2 = default(UInt16);
            item.Fallout4MajorRecordFlags = default(Fallout4MajorRecord.Fallout4MajorRecordFlag);
            base.Clear(item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFallout4MajorRecordInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFallout4MajorRecord obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        public virtual IEnumerable<IMajorRecord> EnumerateMajorRecords(IFallout4MajorRecordInternal obj)
        {
            foreach (var item in Fallout4MajorRecordCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public virtual IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IFallout4MajorRecordInternal obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public virtual IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IFallout4MajorRecordInternal obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in Fallout4MajorRecordCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public virtual void Remove(
            IFallout4MajorRecordInternal obj,
            HashSet<FormKey> keys)
        {
        }
        
        public virtual void Remove(
            IFallout4MajorRecordInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                case "IMajorRecordGetter":
                case "IFallout4MajorRecordGetter":
                    if (!Fallout4MajorRecord_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IFallout4MajorRecord obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IFallout4MajorRecord obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IFallout4MajorRecordInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: Fallout4MajorRecordBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: Fallout4MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Fallout4MajorRecord)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class Fallout4MajorRecordCommon : MajorRecordCommon
    {
        public new static readonly Fallout4MajorRecordCommon Instance = new Fallout4MajorRecordCommon();

        public Fallout4MajorRecord.Mask<bool> GetEqualsMask(
            IFallout4MajorRecordGetter item,
            IFallout4MajorRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Fallout4MajorRecord.Mask<bool>(false);
            ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFallout4MajorRecordGetter item,
            IFallout4MajorRecordGetter rhs,
            Fallout4MajorRecord.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.FormVersion = item.FormVersion == rhs.FormVersion;
            ret.Version2 = item.Version2 == rhs.Version2;
            ret.Fallout4MajorRecordFlags = item.Fallout4MajorRecordFlags == rhs.Fallout4MajorRecordFlags;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IFallout4MajorRecordGetter item,
            string? name = null,
            Fallout4MajorRecord.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFallout4MajorRecordGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Fallout4MajorRecord.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Fallout4MajorRecord =>");
            }
            else
            {
                sb.AppendLine($"{name} (Fallout4MajorRecord) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFallout4MajorRecordGetter item,
            StructuredStringBuilder sb,
            Fallout4MajorRecord.Mask<bool>? printMask = null)
        {
            MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.FormVersion ?? true)
            {
                sb.AppendItem(item.FormVersion, "FormVersion");
            }
            if (printMask?.Version2 ?? true)
            {
                sb.AppendItem(item.Version2, "Version2");
            }
            if (printMask?.Fallout4MajorRecordFlags ?? true)
            {
                sb.AppendItem(item.Fallout4MajorRecordFlags, "Fallout4MajorRecordFlags");
            }
        }
        
        public static Fallout4MajorRecord_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Fallout4MajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Fallout4MajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Fallout4MajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Fallout4MajorRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFallout4MajorRecordGetter? lhs,
            IFallout4MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IMajorRecordGetter)lhs, (IMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Fallout4MajorRecord_FieldIndex.FormVersion) ?? true))
            {
                if (lhs.FormVersion != rhs.FormVersion) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4MajorRecord_FieldIndex.Version2) ?? true))
            {
                if (lhs.Version2 != rhs.Version2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags) ?? true))
            {
                if (lhs.Fallout4MajorRecordFlags != rhs.Fallout4MajorRecordFlags) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFallout4MajorRecordGetter?)lhs,
                rhs: rhs as IFallout4MajorRecordGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IFallout4MajorRecordGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.FormVersion);
            hash.Add(item.Version2);
            hash.Add(item.Fallout4MajorRecordFlags);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFallout4MajorRecordGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Fallout4MajorRecord.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFallout4MajorRecordGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        public virtual IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(IFallout4MajorRecordGetter obj)
        {
            yield break;
        }
        
        public virtual IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IFallout4MajorRecordGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public virtual IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IFallout4MajorRecordGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout4MajorRecord":
                case "Fallout4MajorRecord":
                    if (!Fallout4MajorRecord_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IFallout4MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Fallout4, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IFallout4MajorRecordGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public virtual Fallout4MajorRecord Duplicate(
            IFallout4MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            throw new NotImplementedException();
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFallout4MajorRecordGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class Fallout4MajorRecordSetterTranslationCommon : MajorRecordSetterTranslationCommon
    {
        public new static readonly Fallout4MajorRecordSetterTranslationCommon Instance = new Fallout4MajorRecordSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IFallout4MajorRecordInternal item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public virtual void DeepCopyIn(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IMajorRecord)item,
                (IMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Fallout4MajorRecord_FieldIndex.FormVersion) ?? true))
            {
                item.FormVersion = rhs.FormVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4MajorRecord_FieldIndex.Version2) ?? true))
            {
                item.Version2 = rhs.Version2;
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout4MajorRecord_FieldIndex.Fallout4MajorRecordFlags) ?? true))
            {
                item.Fallout4MajorRecordFlags = rhs.Fallout4MajorRecordFlags;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFallout4MajorRecord item,
            IFallout4MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFallout4MajorRecordInternal)item,
                rhs: (IFallout4MajorRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFallout4MajorRecord)item,
                rhs: (IFallout4MajorRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Fallout4MajorRecord DeepCopy(
            IFallout4MajorRecordGetter item,
            Fallout4MajorRecord.TranslationMask? copyMask = null)
        {
            Fallout4MajorRecord ret = (Fallout4MajorRecord)((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)item).CommonInstance()!).GetNew();
            ((Fallout4MajorRecordSetterTranslationCommon)((IFallout4MajorRecordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Fallout4MajorRecord DeepCopy(
            IFallout4MajorRecordGetter item,
            out Fallout4MajorRecord.ErrorMask errorMask,
            Fallout4MajorRecord.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Fallout4MajorRecord ret = (Fallout4MajorRecord)((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)item).CommonInstance()!).GetNew();
            ((Fallout4MajorRecordSetterTranslationCommon)((IFallout4MajorRecordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Fallout4MajorRecord.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Fallout4MajorRecord DeepCopy(
            IFallout4MajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Fallout4MajorRecord ret = (Fallout4MajorRecord)((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)item).CommonInstance()!).GetNew();
            ((Fallout4MajorRecordSetterTranslationCommon)((IFallout4MajorRecordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout4
{
    public partial class Fallout4MajorRecord
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Fallout4MajorRecord_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Fallout4MajorRecord_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => Fallout4MajorRecordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return Fallout4MajorRecordSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => Fallout4MajorRecordSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout4
{
    public partial class Fallout4MajorRecordBinaryWriteTranslation :
        MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly Fallout4MajorRecordBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IFallout4MajorRecordGetter item,
            MutagenWriter writer)
        {
            MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            writer.Write(item.FormVersion);
            writer.Write(item.Version2);
        }

        public virtual void Write(
            MutagenWriter writer,
            IFallout4MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            throw new NotImplementedException();
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFallout4MajorRecordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFallout4MajorRecordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class Fallout4MajorRecordBinaryCreateTranslation : MajorRecordBinaryCreateTranslation
    {
        public new static readonly Fallout4MajorRecordBinaryCreateTranslation Instance = new Fallout4MajorRecordBinaryCreateTranslation();

        public override RecordType RecordType => throw new ArgumentException();
        public static void FillBinaryStructs(
            IFallout4MajorRecordInternal item,
            MutagenFrame frame)
        {
            MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.FormVersion = frame.ReadUInt16();
            item.Version2 = frame.ReadUInt16();
        }

    }

}
namespace Mutagen.Bethesda.Fallout4
{
    #region Binary Write Mixins
    public static class Fallout4MajorRecordBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout4
{
    internal abstract partial class Fallout4MajorRecordBinaryOverlay :
        MajorRecordBinaryOverlay,
        IFallout4MajorRecordGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Fallout4MajorRecord_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Fallout4MajorRecord_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => Fallout4MajorRecordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => Fallout4MajorRecordSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => Fallout4MajorRecordCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => Fallout4MajorRecordCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => Fallout4MajorRecordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((Fallout4MajorRecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt16 FormVersion => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0xC, 0x2));
        public UInt16 Version2 => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0xE, 0x2));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected Fallout4MajorRecordBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }


        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            Fallout4MajorRecordMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Fallout4MajorRecord>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFallout4MajorRecordGetter rhs) return false;
            return ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFallout4MajorRecordGetter? obj)
        {
            return ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((Fallout4MajorRecordCommon)((IFallout4MajorRecordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

