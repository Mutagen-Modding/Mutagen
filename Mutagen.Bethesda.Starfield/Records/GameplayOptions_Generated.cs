/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class GameplayOptions :
        StarfieldMajorRecord,
        IEquatable<IGameplayOptionsGetter>,
        IGameplayOptionsInternal,
        ILoquiObjectSetter<GameplayOptions>
    {
        #region Ctor
        protected GameplayOptions()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IGameplayOptionsGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IGameplayOptionsGetter.Description => this.Description;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AGameplayOptionsData? _Data;
        public AGameplayOptionsData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAGameplayOptionsDataGetter? IGameplayOptionsGetter.Data => this.Data;
        #endregion
        #region GameplayOptionDataRange
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GameplayOptionDataRange? _GameplayOptionDataRange;
        public GameplayOptionDataRange? GameplayOptionDataRange
        {
            get => _GameplayOptionDataRange;
            set => _GameplayOptionDataRange = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGameplayOptionDataRangeGetter? IGameplayOptionsGetter.GameplayOptionDataRange => this.GameplayOptionDataRange;
        #endregion
        #region Rewards
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<GameplayOptionReward> _Rewards = new ExtendedList<GameplayOptionReward>();
        public ExtendedList<GameplayOptionReward> Rewards
        {
            get => this._Rewards;
            init => this._Rewards = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IGameplayOptionRewardGetter> IGameplayOptionsGetter.Rewards => _Rewards;
        #endregion

        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IGameplayOptionsGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GameplayOptionsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.Data = new MaskItem<TItem, AGameplayOptionsData.Mask<TItem>?>(initialValue, new AGameplayOptionsData.Mask<TItem>(initialValue));
                this.GameplayOptionDataRange = new MaskItem<TItem, GameplayOptionDataRange.Mask<TItem>?>(initialValue, new GameplayOptionDataRange.Mask<TItem>(initialValue));
                this.Rewards = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, GameplayOptionReward.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, GameplayOptionReward.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Name,
                TItem Description,
                TItem Data,
                TItem GameplayOptionDataRange,
                TItem Rewards,
                TItem Keywords)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Name = Name;
                this.Description = Description;
                this.Data = new MaskItem<TItem, AGameplayOptionsData.Mask<TItem>?>(Data, new AGameplayOptionsData.Mask<TItem>(Data));
                this.GameplayOptionDataRange = new MaskItem<TItem, GameplayOptionDataRange.Mask<TItem>?>(GameplayOptionDataRange, new GameplayOptionDataRange.Mask<TItem>(GameplayOptionDataRange));
                this.Rewards = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, GameplayOptionReward.Mask<TItem>?>>?>(Rewards, Enumerable.Empty<MaskItemIndexed<TItem, GameplayOptionReward.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Description;
            public MaskItem<TItem, AGameplayOptionsData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, GameplayOptionDataRange.Mask<TItem>?>? GameplayOptionDataRange { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, GameplayOptionReward.Mask<TItem>?>>?>? Rewards;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.GameplayOptionDataRange, rhs.GameplayOptionDataRange)) return false;
                if (!object.Equals(this.Rewards, rhs.Rewards)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.Data);
                hash.Add(this.GameplayOptionDataRange);
                hash.Add(this.Rewards);
                hash.Add(this.Keywords);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (GameplayOptionDataRange != null)
                {
                    if (!eval(this.GameplayOptionDataRange.Overall)) return false;
                    if (this.GameplayOptionDataRange.Specific != null && !this.GameplayOptionDataRange.Specific.All(eval)) return false;
                }
                if (this.Rewards != null)
                {
                    if (!eval(this.Rewards.Overall)) return false;
                    if (this.Rewards.Specific != null)
                    {
                        foreach (var item in this.Rewards.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (GameplayOptionDataRange != null)
                {
                    if (eval(this.GameplayOptionDataRange.Overall)) return true;
                    if (this.GameplayOptionDataRange.Specific != null && this.GameplayOptionDataRange.Specific.Any(eval)) return true;
                }
                if (this.Rewards != null)
                {
                    if (eval(this.Rewards.Overall)) return true;
                    if (this.Rewards.Specific != null)
                    {
                        foreach (var item in this.Rewards.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GameplayOptions.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                obj.Data = this.Data == null ? null : new MaskItem<R, AGameplayOptionsData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.GameplayOptionDataRange = this.GameplayOptionDataRange == null ? null : new MaskItem<R, GameplayOptionDataRange.Mask<R>?>(eval(this.GameplayOptionDataRange.Overall), this.GameplayOptionDataRange.Specific?.Translate(eval));
                if (Rewards != null)
                {
                    obj.Rewards = new MaskItem<R, IEnumerable<MaskItemIndexed<R, GameplayOptionReward.Mask<R>?>>?>(eval(this.Rewards.Overall), Enumerable.Empty<MaskItemIndexed<R, GameplayOptionReward.Mask<R>?>>());
                    if (Rewards.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, GameplayOptionReward.Mask<R>?>>();
                        obj.Rewards.Specific = l;
                        foreach (var item in Rewards.Specific)
                        {
                            MaskItemIndexed<R, GameplayOptionReward.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, GameplayOptionReward.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(GameplayOptions.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, GameplayOptions.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(GameplayOptions.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                    if (printMask?.GameplayOptionDataRange?.Overall ?? true)
                    {
                        GameplayOptionDataRange?.Print(sb);
                    }
                    if ((printMask?.Rewards?.Overall ?? true)
                        && Rewards is {} RewardsItem)
                    {
                        sb.AppendLine("Rewards =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RewardsItem.Overall);
                            if (RewardsItem.Specific != null)
                            {
                                foreach (var subItem in RewardsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public MaskItem<Exception?, AGameplayOptionsData.ErrorMask?>? Data;
            public MaskItem<Exception?, GameplayOptionDataRange.ErrorMask?>? GameplayOptionDataRange;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, GameplayOptionReward.ErrorMask?>>?>? Rewards;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                GameplayOptions_FieldIndex enu = (GameplayOptions_FieldIndex)index;
                switch (enu)
                {
                    case GameplayOptions_FieldIndex.Name:
                        return Name;
                    case GameplayOptions_FieldIndex.Description:
                        return Description;
                    case GameplayOptions_FieldIndex.Data:
                        return Data;
                    case GameplayOptions_FieldIndex.GameplayOptionDataRange:
                        return GameplayOptionDataRange;
                    case GameplayOptions_FieldIndex.Rewards:
                        return Rewards;
                    case GameplayOptions_FieldIndex.Keywords:
                        return Keywords;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                GameplayOptions_FieldIndex enu = (GameplayOptions_FieldIndex)index;
                switch (enu)
                {
                    case GameplayOptions_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case GameplayOptions_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case GameplayOptions_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, AGameplayOptionsData.ErrorMask?>(ex, null);
                        break;
                    case GameplayOptions_FieldIndex.GameplayOptionDataRange:
                        this.GameplayOptionDataRange = new MaskItem<Exception?, GameplayOptionDataRange.ErrorMask?>(ex, null);
                        break;
                    case GameplayOptions_FieldIndex.Rewards:
                        this.Rewards = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, GameplayOptionReward.ErrorMask?>>?>(ex, null);
                        break;
                    case GameplayOptions_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                GameplayOptions_FieldIndex enu = (GameplayOptions_FieldIndex)index;
                switch (enu)
                {
                    case GameplayOptions_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case GameplayOptions_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case GameplayOptions_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, AGameplayOptionsData.ErrorMask?>?)obj;
                        break;
                    case GameplayOptions_FieldIndex.GameplayOptionDataRange:
                        this.GameplayOptionDataRange = (MaskItem<Exception?, GameplayOptionDataRange.ErrorMask?>?)obj;
                        break;
                    case GameplayOptions_FieldIndex.Rewards:
                        this.Rewards = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, GameplayOptionReward.ErrorMask?>>?>)obj;
                        break;
                    case GameplayOptions_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (Data != null) return true;
                if (GameplayOptionDataRange != null) return true;
                if (Rewards != null) return true;
                if (Keywords != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                Data?.Print(sb);
                GameplayOptionDataRange?.Print(sb);
                if (Rewards is {} RewardsItem)
                {
                    sb.AppendLine("Rewards =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RewardsItem.Overall);
                        if (RewardsItem.Specific != null)
                        {
                            foreach (var subItem in RewardsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.GameplayOptionDataRange = this.GameplayOptionDataRange.Combine(rhs.GameplayOptionDataRange, (l, r) => l.Combine(r));
                ret.Rewards = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, GameplayOptionReward.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Rewards?.Overall, rhs.Rewards?.Overall), Noggog.ExceptionExt.Combine(this.Rewards?.Specific, rhs.Rewards?.Specific));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public AGameplayOptionsData.TranslationMask? Data;
            public GameplayOptionDataRange.TranslationMask? GameplayOptionDataRange;
            public GameplayOptionReward.TranslationMask? Rewards;
            public bool Keywords;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.Keywords = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((GameplayOptionDataRange != null ? GameplayOptionDataRange.OnOverall : DefaultOn, GameplayOptionDataRange?.GetCrystal()));
                ret.Add((Rewards == null ? DefaultOn : !Rewards.GetCrystal().CopyNothing, Rewards?.GetCrystal()));
                ret.Add((Keywords, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = GameplayOptions_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GameplayOptionsCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => GameplayOptionsSetterCommon.Instance.RemapLinks(this, mapping);
        public GameplayOptions(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private GameplayOptions(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal GameplayOptions(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public GameplayOptions(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public GameplayOptions(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<GameplayOptions>.ToString(this);
        }

        protected override Type LinkType => typeof(IGameplayOptions);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IGameplayOptionsGetter rhs) return false;
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGameplayOptionsGetter? obj)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GameplayOptionsCommon)((IGameplayOptionsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GameplayOptionsBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GameplayOptionsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static GameplayOptions CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new GameplayOptions();
            ((GameplayOptionsSetterCommon)((IGameplayOptionsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out GameplayOptions item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((GameplayOptionsSetterCommon)((IGameplayOptionsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new GameplayOptions GetNew()
        {
            return new GameplayOptions();
        }

    }
    #endregion

    #region Interface
    public partial interface IGameplayOptions :
        IFormLinkContainer,
        IGameplayOptionsGetter,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IGameplayOptionsInternal>,
        INamed,
        INamedRequired,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new TranslatedString? Description { get; set; }
        new AGameplayOptionsData? Data { get; set; }
        new GameplayOptionDataRange? GameplayOptionDataRange { get; set; }
        new ExtendedList<GameplayOptionReward> Rewards { get; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
    }

    public partial interface IGameplayOptionsInternal :
        IStarfieldMajorRecordInternal,
        IGameplayOptions,
        IGameplayOptionsGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.GPOF)]
    public partial interface IGameplayOptionsGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IGameplayOptionsGetter>,
        IMapsToGetter<IGameplayOptionsGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => GameplayOptions_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        ITranslatedStringGetter? Description { get; }
        IAGameplayOptionsDataGetter? Data { get; }
        IGameplayOptionDataRangeGetter? GameplayOptionDataRange { get; }
        IReadOnlyList<IGameplayOptionRewardGetter> Rewards { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class GameplayOptionsMixIn
    {
        public static void Clear(this IGameplayOptionsInternal item)
        {
            ((GameplayOptionsSetterCommon)((IGameplayOptionsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GameplayOptions.Mask<bool> GetEqualsMask(
            this IGameplayOptionsGetter item,
            IGameplayOptionsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IGameplayOptionsGetter item,
            string? name = null,
            GameplayOptions.Mask<bool>? printMask = null)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IGameplayOptionsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GameplayOptions.Mask<bool>? printMask = null)
        {
            ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGameplayOptionsGetter item,
            IGameplayOptionsGetter rhs,
            GameplayOptions.TranslationMask? equalsMask = null)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGameplayOptionsInternal lhs,
            IGameplayOptionsGetter rhs,
            out GameplayOptions.ErrorMask errorMask,
            GameplayOptions.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = GameplayOptions.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGameplayOptionsInternal lhs,
            IGameplayOptionsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static GameplayOptions DeepCopy(
            this IGameplayOptionsGetter item,
            GameplayOptions.TranslationMask? copyMask = null)
        {
            return ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GameplayOptions DeepCopy(
            this IGameplayOptionsGetter item,
            out GameplayOptions.ErrorMask errorMask,
            GameplayOptions.TranslationMask? copyMask = null)
        {
            return ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GameplayOptions DeepCopy(
            this IGameplayOptionsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static GameplayOptions Duplicate(
            this IGameplayOptionsGetter item,
            FormKey formKey,
            GameplayOptions.TranslationMask? copyMask = null)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static GameplayOptions Duplicate(
            this IGameplayOptionsGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGameplayOptionsInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((GameplayOptionsSetterCommon)((IGameplayOptionsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum GameplayOptions_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Name = 7,
        Description = 8,
        Data = 9,
        GameplayOptionDataRange = 10,
        Rewards = 11,
        Keywords = 12,
    }
    #endregion

    #region Registration
    internal partial class GameplayOptions_Registration : ILoquiRegistration
    {
        public static readonly GameplayOptions_Registration Instance = new GameplayOptions_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(GameplayOptions.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GameplayOptions.ErrorMask);

        public static readonly Type ClassType = typeof(GameplayOptions);

        public static readonly Type GetterType = typeof(IGameplayOptionsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGameplayOptions);

        public static readonly Type? InternalSetterType = typeof(IGameplayOptionsInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.GameplayOptions";

        public const string Name = "GameplayOptions";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.GPOF;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.GPOF);
            var all = RecordCollection.Factory(
                RecordTypes.GPOF,
                RecordTypes.NNAM,
                RecordTypes.DNAM,
                RecordTypes.TNAM,
                RecordTypes.GPOD,
                RecordTypes.VOVS,
                RecordTypes.VORV,
                RecordTypes.RESN,
                RecordTypes.VORN,
                RecordTypes.KWDA,
                RecordTypes.KSIZ);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(GameplayOptionsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class GameplayOptionsSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly GameplayOptionsSetterCommon Instance = new GameplayOptionsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGameplayOptionsInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Description = default;
            item.Data = null;
            item.GameplayOptionDataRange = null;
            item.Rewards.Clear();
            item.Keywords = null;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IGameplayOptionsInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IGameplayOptionsInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IGameplayOptions obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Keywords?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGameplayOptionsInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IGameplayOptionsInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: GameplayOptionsBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: GameplayOptionsBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (GameplayOptions)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (GameplayOptions)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class GameplayOptionsCommon : StarfieldMajorRecordCommon
    {
        public new static readonly GameplayOptionsCommon Instance = new GameplayOptionsCommon();

        public GameplayOptions.Mask<bool> GetEqualsMask(
            IGameplayOptionsGetter item,
            IGameplayOptionsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GameplayOptions.Mask<bool>(false);
            ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGameplayOptionsGetter item,
            IGameplayOptionsGetter rhs,
            GameplayOptions.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.GameplayOptionDataRange = EqualsMaskHelper.EqualsHelper(
                item.GameplayOptionDataRange,
                rhs.GameplayOptionDataRange,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Rewards = item.Rewards.CollectionEqualsHelper(
                rhs.Rewards,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IGameplayOptionsGetter item,
            string? name = null,
            GameplayOptions.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IGameplayOptionsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GameplayOptions.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"GameplayOptions =>");
            }
            else
            {
                sb.AppendLine($"{name} (GameplayOptions) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IGameplayOptionsGetter item,
            StructuredStringBuilder sb,
            GameplayOptions.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
            if ((printMask?.GameplayOptionDataRange?.Overall ?? true)
                && item.GameplayOptionDataRange is {} GameplayOptionDataRangeItem)
            {
                GameplayOptionDataRangeItem?.Print(sb, "GameplayOptionDataRange");
            }
            if (printMask?.Rewards?.Overall ?? true)
            {
                sb.AppendLine("Rewards =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Rewards)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
        }
        
        public static GameplayOptions_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GameplayOptions_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (GameplayOptions_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (GameplayOptions_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (GameplayOptions_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (GameplayOptions_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (GameplayOptions_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (GameplayOptions_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new GameplayOptions_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GameplayOptions_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (GameplayOptions_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (GameplayOptions_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (GameplayOptions_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGameplayOptionsGetter? lhs,
            IGameplayOptionsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((AGameplayOptionsDataCommon)((IAGameplayOptionsDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)GameplayOptions_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.GameplayOptionDataRange) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GameplayOptionDataRange, rhs.GameplayOptionDataRange, out var lhsGameplayOptionDataRange, out var rhsGameplayOptionDataRange, out var isGameplayOptionDataRangeEqual))
                {
                    if (!((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)lhsGameplayOptionDataRange).CommonInstance()!).Equals(lhsGameplayOptionDataRange, rhsGameplayOptionDataRange, equalsMask?.GetSubCrystal((int)GameplayOptions_FieldIndex.GameplayOptionDataRange))) return false;
                }
                else if (!isGameplayOptionDataRangeEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Rewards) ?? true))
            {
                if (!lhs.Rewards.SequenceEqual(rhs.Rewards, (l, r) => ((GameplayOptionRewardCommon)((IGameplayOptionRewardGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)GameplayOptions_FieldIndex.Rewards)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGameplayOptionsGetter?)lhs,
                rhs: rhs as IGameplayOptionsGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGameplayOptionsGetter?)lhs,
                rhs: rhs as IGameplayOptionsGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IGameplayOptionsGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            if (item.GameplayOptionDataRange is {} GameplayOptionDataRangeitem)
            {
                hash.Add(GameplayOptionDataRangeitem);
            }
            hash.Add(item.Rewards);
            hash.Add(item.Keywords);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IGameplayOptionsGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IGameplayOptionsGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return GameplayOptions.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IGameplayOptionsGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public GameplayOptions Duplicate(
            IGameplayOptionsGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new GameplayOptions(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGameplayOptionsGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGameplayOptionsGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class GameplayOptionsSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly GameplayOptionsSetterTranslationCommon Instance = new GameplayOptionsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGameplayOptionsInternal item,
            IGameplayOptionsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IGameplayOptions item,
            IGameplayOptionsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)GameplayOptions_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)GameplayOptions_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.GameplayOptionDataRange) ?? true))
            {
                errorMask?.PushIndex((int)GameplayOptions_FieldIndex.GameplayOptionDataRange);
                try
                {
                    if(rhs.GameplayOptionDataRange is {} rhsGameplayOptionDataRange)
                    {
                        item.GameplayOptionDataRange = rhsGameplayOptionDataRange.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)GameplayOptions_FieldIndex.GameplayOptionDataRange));
                    }
                    else
                    {
                        item.GameplayOptionDataRange = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Rewards) ?? true))
            {
                errorMask?.PushIndex((int)GameplayOptions_FieldIndex.Rewards);
                try
                {
                    item.Rewards.SetTo(
                        rhs.Rewards
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)GameplayOptions_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IGameplayOptions item,
            IGameplayOptionsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGameplayOptionsInternal)item,
                rhs: (IGameplayOptionsGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGameplayOptions)item,
                rhs: (IGameplayOptionsGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGameplayOptionsInternal)item,
                rhs: (IGameplayOptionsGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGameplayOptions)item,
                rhs: (IGameplayOptionsGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public GameplayOptions DeepCopy(
            IGameplayOptionsGetter item,
            GameplayOptions.TranslationMask? copyMask = null)
        {
            GameplayOptions ret = (GameplayOptions)((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).GetNew();
            ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public GameplayOptions DeepCopy(
            IGameplayOptionsGetter item,
            out GameplayOptions.ErrorMask errorMask,
            GameplayOptions.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GameplayOptions ret = (GameplayOptions)((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).GetNew();
            ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = GameplayOptions.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public GameplayOptions DeepCopy(
            IGameplayOptionsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GameplayOptions ret = (GameplayOptions)((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).GetNew();
            ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class GameplayOptions
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GameplayOptions_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GameplayOptions_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GameplayOptionsCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GameplayOptionsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GameplayOptionsSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class GameplayOptionsBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly GameplayOptionsBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IGameplayOptionsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            GameplayOptionsBinaryWriteTranslation.WriteBinaryData(
                writer: writer,
                item: item);
            if (item.GameplayOptionDataRange is {} GameplayOptionDataRangeItem)
            {
                ((GameplayOptionDataRangeBinaryWriteTranslation)((IBinaryItem)GameplayOptionDataRangeItem).BinaryWriteTranslator).Write(
                    item: GameplayOptionDataRangeItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IGameplayOptionRewardGetter>.Instance.Write(
                writer: writer,
                items: item.Rewards,
                transl: (MutagenWriter subWriter, IGameplayOptionRewardGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((GameplayOptionRewardBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
        }

        public static partial void WriteBinaryDataCustom(
            MutagenWriter writer,
            IGameplayOptionsGetter item);

        public static void WriteBinaryData(
            MutagenWriter writer,
            IGameplayOptionsGetter item)
        {
            WriteBinaryDataCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IGameplayOptionsGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.GPOF,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IGameplayOptionsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGameplayOptionsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGameplayOptionsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class GameplayOptionsBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly GameplayOptionsBinaryCreateTranslation Instance = new GameplayOptionsBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.GPOF;
        public static ParseResult FillBinaryRecordTypes(
            IGameplayOptionsInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)GameplayOptions_FieldIndex.Name;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)GameplayOptions_FieldIndex.Description;
                }
                case RecordTypeInts.TNAM:
                {
                    GameplayOptionsBinaryCreateTranslation.FillBinaryDataCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)GameplayOptions_FieldIndex.Data;
                }
                case RecordTypeInts.GPOD:
                {
                    item.GameplayOptionDataRange = Mutagen.Bethesda.Starfield.GameplayOptionDataRange.CreateFromBinary(frame: frame);
                    return (int)GameplayOptions_FieldIndex.GameplayOptionDataRange;
                }
                case RecordTypeInts.VOVS:
                case RecordTypeInts.VORV:
                case RecordTypeInts.RESN:
                case RecordTypeInts.VORN:
                {
                    item.Rewards.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<GameplayOptionReward>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: GameplayOptionReward_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: GameplayOptionReward.TryCreateFromBinary));
                    return (int)GameplayOptions_FieldIndex.Rewards;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)GameplayOptions_FieldIndex.Keywords;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryDataCustom(
            MutagenFrame frame,
            IGameplayOptionsInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class GameplayOptionsBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class GameplayOptionsBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IGameplayOptionsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GameplayOptions_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GameplayOptions_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GameplayOptionsCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GameplayOptionsSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GameplayOptionsCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GameplayOptionsBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GameplayOptionsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IGameplayOptions);


        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        #region Data
        partial void DataCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset);
        public partial IAGameplayOptionsDataGetter? GetDataCustom();
        public IAGameplayOptionsDataGetter? Data => GetDataCustom();
        #endregion
        #region GameplayOptionDataRange
        private RangeInt32? _GameplayOptionDataRangeLocation;
        public IGameplayOptionDataRangeGetter? GameplayOptionDataRange => _GameplayOptionDataRangeLocation.HasValue ? GameplayOptionDataRangeBinaryOverlay.GameplayOptionDataRangeFactory(_recordData.Slice(_GameplayOptionDataRangeLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IGameplayOptionRewardGetter> Rewards { get; private set; } = Array.Empty<IGameplayOptionRewardGetter>();
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected GameplayOptionsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IGameplayOptionsGetter GameplayOptionsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new GameplayOptionsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IGameplayOptionsGetter GameplayOptionsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return GameplayOptionsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NNAM:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)GameplayOptions_FieldIndex.Name;
                }
                case RecordTypeInts.DNAM:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)GameplayOptions_FieldIndex.Description;
                }
                case RecordTypeInts.TNAM:
                {
                    DataCustomParse(
                        stream,
                        finalPos,
                        offset);
                    return (int)GameplayOptions_FieldIndex.Data;
                }
                case RecordTypeInts.GPOD:
                {
                    _GameplayOptionDataRangeLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)GameplayOptions_FieldIndex.GameplayOptionDataRange;
                }
                case RecordTypeInts.VOVS:
                case RecordTypeInts.VORV:
                case RecordTypeInts.RESN:
                case RecordTypeInts.VORN:
                {
                    this.Rewards = this.ParseRepeatedTypelessSubrecord<IGameplayOptionRewardGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: GameplayOptionReward_Registration.TriggerSpecs,
                        factory: GameplayOptionRewardBinaryOverlay.GameplayOptionRewardFactory);
                    return (int)GameplayOptions_FieldIndex.Rewards;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)GameplayOptions_FieldIndex.Keywords;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GameplayOptionsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<GameplayOptions>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IGameplayOptionsGetter rhs) return false;
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGameplayOptionsGetter? obj)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GameplayOptionsCommon)((IGameplayOptionsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

