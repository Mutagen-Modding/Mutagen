/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class GameplayOptions :
        StarfieldMajorRecord,
        IEquatable<IGameplayOptionsGetter>,
        IGameplayOptionsInternal,
        ILoquiObjectSetter<GameplayOptions>
    {
        #region Ctor
        protected GameplayOptions()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Title
        public TranslatedString? Title { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IGameplayOptionsGetter.Title => this.Title;
        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IGameplayOptionsGetter.Description => this.Description;
        #endregion
        #region TNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TNAM;
        public MemorySlice<Byte>? TNAM
        {
            get => this._TNAM;
            set => this._TNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IGameplayOptionsGetter.TNAM => this.TNAM;
        #endregion
        #region DefaultIndex
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DefaultIndex;
        public MemorySlice<Byte>? DefaultIndex
        {
            get => this._DefaultIndex;
            set => this._DefaultIndex = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IGameplayOptionsGetter.DefaultIndex => this.DefaultIndex;
        #endregion
        #region WNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _WNAM;
        public MemorySlice<Byte>? WNAM
        {
            get => this._WNAM;
            set => this._WNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IGameplayOptionsGetter.WNAM => this.WNAM;
        #endregion
        #region GPOD
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private GPOD? _GPOD;
        public GPOD? GPOD
        {
            get => _GPOD;
            set => _GPOD = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IGPODGetter? IGameplayOptionsGetter.GPOD => this.GPOD;
        #endregion
        #region SliderEntries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<SliderEntry> _SliderEntries = new ExtendedList<SliderEntry>();
        public ExtendedList<SliderEntry> SliderEntries
        {
            get => this._SliderEntries;
            init => this._SliderEntries = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISliderEntryGetter> IGameplayOptionsGetter.SliderEntries => _SliderEntries;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GameplayOptionsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Title = initialValue;
                this.Description = initialValue;
                this.TNAM = initialValue;
                this.DefaultIndex = initialValue;
                this.WNAM = initialValue;
                this.GPOD = new MaskItem<TItem, GPOD.Mask<TItem>?>(initialValue, new GPOD.Mask<TItem>(initialValue));
                this.SliderEntries = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SliderEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, SliderEntry.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Title,
                TItem Description,
                TItem TNAM,
                TItem DefaultIndex,
                TItem WNAM,
                TItem GPOD,
                TItem SliderEntries)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Title = Title;
                this.Description = Description;
                this.TNAM = TNAM;
                this.DefaultIndex = DefaultIndex;
                this.WNAM = WNAM;
                this.GPOD = new MaskItem<TItem, GPOD.Mask<TItem>?>(GPOD, new GPOD.Mask<TItem>(GPOD));
                this.SliderEntries = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SliderEntry.Mask<TItem>?>>?>(SliderEntries, Enumerable.Empty<MaskItemIndexed<TItem, SliderEntry.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Title;
            public TItem Description;
            public TItem TNAM;
            public TItem DefaultIndex;
            public TItem WNAM;
            public MaskItem<TItem, GPOD.Mask<TItem>?>? GPOD { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SliderEntry.Mask<TItem>?>>?>? SliderEntries;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Title, rhs.Title)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.TNAM, rhs.TNAM)) return false;
                if (!object.Equals(this.DefaultIndex, rhs.DefaultIndex)) return false;
                if (!object.Equals(this.WNAM, rhs.WNAM)) return false;
                if (!object.Equals(this.GPOD, rhs.GPOD)) return false;
                if (!object.Equals(this.SliderEntries, rhs.SliderEntries)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Title);
                hash.Add(this.Description);
                hash.Add(this.TNAM);
                hash.Add(this.DefaultIndex);
                hash.Add(this.WNAM);
                hash.Add(this.GPOD);
                hash.Add(this.SliderEntries);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Title)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.TNAM)) return false;
                if (!eval(this.DefaultIndex)) return false;
                if (!eval(this.WNAM)) return false;
                if (GPOD != null)
                {
                    if (!eval(this.GPOD.Overall)) return false;
                    if (this.GPOD.Specific != null && !this.GPOD.Specific.All(eval)) return false;
                }
                if (this.SliderEntries != null)
                {
                    if (!eval(this.SliderEntries.Overall)) return false;
                    if (this.SliderEntries.Specific != null)
                    {
                        foreach (var item in this.SliderEntries.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Title)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.TNAM)) return true;
                if (eval(this.DefaultIndex)) return true;
                if (eval(this.WNAM)) return true;
                if (GPOD != null)
                {
                    if (eval(this.GPOD.Overall)) return true;
                    if (this.GPOD.Specific != null && this.GPOD.Specific.Any(eval)) return true;
                }
                if (this.SliderEntries != null)
                {
                    if (eval(this.SliderEntries.Overall)) return true;
                    if (this.SliderEntries.Specific != null)
                    {
                        foreach (var item in this.SliderEntries.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GameplayOptions.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Title = eval(this.Title);
                obj.Description = eval(this.Description);
                obj.TNAM = eval(this.TNAM);
                obj.DefaultIndex = eval(this.DefaultIndex);
                obj.WNAM = eval(this.WNAM);
                obj.GPOD = this.GPOD == null ? null : new MaskItem<R, GPOD.Mask<R>?>(eval(this.GPOD.Overall), this.GPOD.Specific?.Translate(eval));
                if (SliderEntries != null)
                {
                    obj.SliderEntries = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SliderEntry.Mask<R>?>>?>(eval(this.SliderEntries.Overall), Enumerable.Empty<MaskItemIndexed<R, SliderEntry.Mask<R>?>>());
                    if (SliderEntries.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, SliderEntry.Mask<R>?>>();
                        obj.SliderEntries.Specific = l;
                        foreach (var item in SliderEntries.Specific)
                        {
                            MaskItemIndexed<R, SliderEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, SliderEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(GameplayOptions.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, GameplayOptions.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(GameplayOptions.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Title ?? true)
                    {
                        sb.AppendItem(Title, "Title");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if (printMask?.TNAM ?? true)
                    {
                        sb.AppendItem(TNAM, "TNAM");
                    }
                    if (printMask?.DefaultIndex ?? true)
                    {
                        sb.AppendItem(DefaultIndex, "DefaultIndex");
                    }
                    if (printMask?.WNAM ?? true)
                    {
                        sb.AppendItem(WNAM, "WNAM");
                    }
                    if (printMask?.GPOD?.Overall ?? true)
                    {
                        GPOD?.Print(sb);
                    }
                    if ((printMask?.SliderEntries?.Overall ?? true)
                        && SliderEntries is {} SliderEntriesItem)
                    {
                        sb.AppendLine("SliderEntries =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SliderEntriesItem.Overall);
                            if (SliderEntriesItem.Specific != null)
                            {
                                foreach (var subItem in SliderEntriesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Title;
            public Exception? Description;
            public Exception? TNAM;
            public Exception? DefaultIndex;
            public Exception? WNAM;
            public MaskItem<Exception?, GPOD.ErrorMask?>? GPOD;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SliderEntry.ErrorMask?>>?>? SliderEntries;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                GameplayOptions_FieldIndex enu = (GameplayOptions_FieldIndex)index;
                switch (enu)
                {
                    case GameplayOptions_FieldIndex.Title:
                        return Title;
                    case GameplayOptions_FieldIndex.Description:
                        return Description;
                    case GameplayOptions_FieldIndex.TNAM:
                        return TNAM;
                    case GameplayOptions_FieldIndex.DefaultIndex:
                        return DefaultIndex;
                    case GameplayOptions_FieldIndex.WNAM:
                        return WNAM;
                    case GameplayOptions_FieldIndex.GPOD:
                        return GPOD;
                    case GameplayOptions_FieldIndex.SliderEntries:
                        return SliderEntries;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                GameplayOptions_FieldIndex enu = (GameplayOptions_FieldIndex)index;
                switch (enu)
                {
                    case GameplayOptions_FieldIndex.Title:
                        this.Title = ex;
                        break;
                    case GameplayOptions_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case GameplayOptions_FieldIndex.TNAM:
                        this.TNAM = ex;
                        break;
                    case GameplayOptions_FieldIndex.DefaultIndex:
                        this.DefaultIndex = ex;
                        break;
                    case GameplayOptions_FieldIndex.WNAM:
                        this.WNAM = ex;
                        break;
                    case GameplayOptions_FieldIndex.GPOD:
                        this.GPOD = new MaskItem<Exception?, GPOD.ErrorMask?>(ex, null);
                        break;
                    case GameplayOptions_FieldIndex.SliderEntries:
                        this.SliderEntries = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SliderEntry.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                GameplayOptions_FieldIndex enu = (GameplayOptions_FieldIndex)index;
                switch (enu)
                {
                    case GameplayOptions_FieldIndex.Title:
                        this.Title = (Exception?)obj;
                        break;
                    case GameplayOptions_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case GameplayOptions_FieldIndex.TNAM:
                        this.TNAM = (Exception?)obj;
                        break;
                    case GameplayOptions_FieldIndex.DefaultIndex:
                        this.DefaultIndex = (Exception?)obj;
                        break;
                    case GameplayOptions_FieldIndex.WNAM:
                        this.WNAM = (Exception?)obj;
                        break;
                    case GameplayOptions_FieldIndex.GPOD:
                        this.GPOD = (MaskItem<Exception?, GPOD.ErrorMask?>?)obj;
                        break;
                    case GameplayOptions_FieldIndex.SliderEntries:
                        this.SliderEntries = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SliderEntry.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Title != null) return true;
                if (Description != null) return true;
                if (TNAM != null) return true;
                if (DefaultIndex != null) return true;
                if (WNAM != null) return true;
                if (GPOD != null) return true;
                if (SliderEntries != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Title, "Title");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                {
                    sb.AppendItem(TNAM, "TNAM");
                }
                {
                    sb.AppendItem(DefaultIndex, "DefaultIndex");
                }
                {
                    sb.AppendItem(WNAM, "WNAM");
                }
                GPOD?.Print(sb);
                if (SliderEntries is {} SliderEntriesItem)
                {
                    sb.AppendLine("SliderEntries =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SliderEntriesItem.Overall);
                        if (SliderEntriesItem.Specific != null)
                        {
                            foreach (var subItem in SliderEntriesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Title = this.Title.Combine(rhs.Title);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.TNAM = this.TNAM.Combine(rhs.TNAM);
                ret.DefaultIndex = this.DefaultIndex.Combine(rhs.DefaultIndex);
                ret.WNAM = this.WNAM.Combine(rhs.WNAM);
                ret.GPOD = this.GPOD.Combine(rhs.GPOD, (l, r) => l.Combine(r));
                ret.SliderEntries = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SliderEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.SliderEntries?.Overall, rhs.SliderEntries?.Overall), Noggog.ExceptionExt.Combine(this.SliderEntries?.Specific, rhs.SliderEntries?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Title;
            public bool Description;
            public bool TNAM;
            public bool DefaultIndex;
            public bool WNAM;
            public GPOD.TranslationMask? GPOD;
            public SliderEntry.TranslationMask? SliderEntries;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Title = defaultOn;
                this.Description = defaultOn;
                this.TNAM = defaultOn;
                this.DefaultIndex = defaultOn;
                this.WNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Title, null));
                ret.Add((Description, null));
                ret.Add((TNAM, null));
                ret.Add((DefaultIndex, null));
                ret.Add((WNAM, null));
                ret.Add((GPOD != null ? GPOD.OnOverall : DefaultOn, GPOD?.GetCrystal()));
                ret.Add((SliderEntries == null ? DefaultOn : !SliderEntries.GetCrystal().CopyNothing, SliderEntries?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = GameplayOptions_Registration.TriggeringRecordType;
        public GameplayOptions(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private GameplayOptions(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal GameplayOptions(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public GameplayOptions(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public GameplayOptions(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<GameplayOptions>.ToString(this);
        }

        protected override Type LinkType => typeof(IGameplayOptions);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IGameplayOptionsGetter rhs) return false;
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGameplayOptionsGetter? obj)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GameplayOptionsCommon)((IGameplayOptionsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GameplayOptionsBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GameplayOptionsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static GameplayOptions CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new GameplayOptions();
            ((GameplayOptionsSetterCommon)((IGameplayOptionsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out GameplayOptions item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((GameplayOptionsSetterCommon)((IGameplayOptionsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new GameplayOptions GetNew()
        {
            return new GameplayOptions();
        }

    }
    #endregion

    #region Interface
    public partial interface IGameplayOptions :
        IGameplayOptionsGetter,
        ILoquiObjectSetter<IGameplayOptionsInternal>,
        IStarfieldMajorRecordInternal
    {
        new TranslatedString? Title { get; set; }
        new TranslatedString? Description { get; set; }
        new MemorySlice<Byte>? TNAM { get; set; }
        new MemorySlice<Byte>? DefaultIndex { get; set; }
        new MemorySlice<Byte>? WNAM { get; set; }
        new GPOD? GPOD { get; set; }
        new ExtendedList<SliderEntry> SliderEntries { get; }
    }

    public partial interface IGameplayOptionsInternal :
        IStarfieldMajorRecordInternal,
        IGameplayOptions,
        IGameplayOptionsGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.GPOF)]
    public partial interface IGameplayOptionsGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IGameplayOptionsGetter>,
        IMapsToGetter<IGameplayOptionsGetter>
    {
        static new ILoquiRegistration StaticRegistration => GameplayOptions_Registration.Instance;
        ITranslatedStringGetter? Title { get; }
        ITranslatedStringGetter? Description { get; }
        ReadOnlyMemorySlice<Byte>? TNAM { get; }
        ReadOnlyMemorySlice<Byte>? DefaultIndex { get; }
        ReadOnlyMemorySlice<Byte>? WNAM { get; }
        IGPODGetter? GPOD { get; }
        IReadOnlyList<ISliderEntryGetter> SliderEntries { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GameplayOptionsMixIn
    {
        public static void Clear(this IGameplayOptionsInternal item)
        {
            ((GameplayOptionsSetterCommon)((IGameplayOptionsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GameplayOptions.Mask<bool> GetEqualsMask(
            this IGameplayOptionsGetter item,
            IGameplayOptionsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IGameplayOptionsGetter item,
            string? name = null,
            GameplayOptions.Mask<bool>? printMask = null)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IGameplayOptionsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GameplayOptions.Mask<bool>? printMask = null)
        {
            ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGameplayOptionsGetter item,
            IGameplayOptionsGetter rhs,
            GameplayOptions.TranslationMask? equalsMask = null)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGameplayOptionsInternal lhs,
            IGameplayOptionsGetter rhs,
            out GameplayOptions.ErrorMask errorMask,
            GameplayOptions.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = GameplayOptions.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGameplayOptionsInternal lhs,
            IGameplayOptionsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static GameplayOptions DeepCopy(
            this IGameplayOptionsGetter item,
            GameplayOptions.TranslationMask? copyMask = null)
        {
            return ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GameplayOptions DeepCopy(
            this IGameplayOptionsGetter item,
            out GameplayOptions.ErrorMask errorMask,
            GameplayOptions.TranslationMask? copyMask = null)
        {
            return ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GameplayOptions DeepCopy(
            this IGameplayOptionsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static GameplayOptions Duplicate(
            this IGameplayOptionsGetter item,
            FormKey formKey,
            GameplayOptions.TranslationMask? copyMask = null)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static GameplayOptions Duplicate(
            this IGameplayOptionsGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGameplayOptionsInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((GameplayOptionsSetterCommon)((IGameplayOptionsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum GameplayOptions_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Title = 7,
        Description = 8,
        TNAM = 9,
        DefaultIndex = 10,
        WNAM = 11,
        GPOD = 12,
        SliderEntries = 13,
    }
    #endregion

    #region Registration
    internal partial class GameplayOptions_Registration : ILoquiRegistration
    {
        public static readonly GameplayOptions_Registration Instance = new GameplayOptions_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(GameplayOptions.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GameplayOptions.ErrorMask);

        public static readonly Type ClassType = typeof(GameplayOptions);

        public static readonly Type GetterType = typeof(IGameplayOptionsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGameplayOptions);

        public static readonly Type? InternalSetterType = typeof(IGameplayOptionsInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.GameplayOptions";

        public const string Name = "GameplayOptions";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.GPOF;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.GPOF);
            var all = RecordCollection.Factory(
                RecordTypes.GPOF,
                RecordTypes.NNAM,
                RecordTypes.DNAM,
                RecordTypes.TNAM,
                RecordTypes.VNAM,
                RecordTypes.WNAM,
                RecordTypes.GPOD,
                RecordTypes.VOVS,
                RecordTypes.VORV,
                RecordTypes.RESN,
                RecordTypes.VORN);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(GameplayOptionsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class GameplayOptionsSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly GameplayOptionsSetterCommon Instance = new GameplayOptionsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGameplayOptionsInternal item)
        {
            ClearPartial();
            item.Title = default;
            item.Description = default;
            item.TNAM = default;
            item.DefaultIndex = default;
            item.WNAM = default;
            item.GPOD = null;
            item.SliderEntries.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IGameplayOptionsInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IGameplayOptionsInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IGameplayOptions obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGameplayOptionsInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IGameplayOptionsInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: GameplayOptionsBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: GameplayOptionsBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (GameplayOptions)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (GameplayOptions)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class GameplayOptionsCommon : StarfieldMajorRecordCommon
    {
        public new static readonly GameplayOptionsCommon Instance = new GameplayOptionsCommon();

        public GameplayOptions.Mask<bool> GetEqualsMask(
            IGameplayOptionsGetter item,
            IGameplayOptionsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GameplayOptions.Mask<bool>(false);
            ((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGameplayOptionsGetter item,
            IGameplayOptionsGetter rhs,
            GameplayOptions.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Title = object.Equals(item.Title, rhs.Title);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.TNAM = MemorySliceExt.SequenceEqual(item.TNAM, rhs.TNAM);
            ret.DefaultIndex = MemorySliceExt.SequenceEqual(item.DefaultIndex, rhs.DefaultIndex);
            ret.WNAM = MemorySliceExt.SequenceEqual(item.WNAM, rhs.WNAM);
            ret.GPOD = EqualsMaskHelper.EqualsHelper(
                item.GPOD,
                rhs.GPOD,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SliderEntries = item.SliderEntries.CollectionEqualsHelper(
                rhs.SliderEntries,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IGameplayOptionsGetter item,
            string? name = null,
            GameplayOptions.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IGameplayOptionsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GameplayOptions.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"GameplayOptions =>");
            }
            else
            {
                sb.AppendLine($"{name} (GameplayOptions) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IGameplayOptionsGetter item,
            StructuredStringBuilder sb,
            GameplayOptions.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Title ?? true)
                && item.Title is {} TitleItem)
            {
                sb.AppendItem(TitleItem, "Title");
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.TNAM ?? true)
                && item.TNAM is {} TNAMItem)
            {
                sb.AppendLine($"TNAM => {SpanExt.ToHexString(TNAMItem)}");
            }
            if ((printMask?.DefaultIndex ?? true)
                && item.DefaultIndex is {} DefaultIndexItem)
            {
                sb.AppendLine($"DefaultIndex => {SpanExt.ToHexString(DefaultIndexItem)}");
            }
            if ((printMask?.WNAM ?? true)
                && item.WNAM is {} WNAMItem)
            {
                sb.AppendLine($"WNAM => {SpanExt.ToHexString(WNAMItem)}");
            }
            if ((printMask?.GPOD?.Overall ?? true)
                && item.GPOD is {} GPODItem)
            {
                GPODItem?.Print(sb, "GPOD");
            }
            if (printMask?.SliderEntries?.Overall ?? true)
            {
                sb.AppendLine("SliderEntries =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.SliderEntries)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static GameplayOptions_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GameplayOptions_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (GameplayOptions_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (GameplayOptions_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (GameplayOptions_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (GameplayOptions_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (GameplayOptions_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (GameplayOptions_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new GameplayOptions_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GameplayOptions_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (GameplayOptions_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (GameplayOptions_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (GameplayOptions_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGameplayOptionsGetter? lhs,
            IGameplayOptionsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Title) ?? true))
            {
                if (!object.Equals(lhs.Title, rhs.Title)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.TNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TNAM, rhs.TNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.DefaultIndex) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DefaultIndex, rhs.DefaultIndex)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.WNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.WNAM, rhs.WNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.GPOD) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GPOD, rhs.GPOD, out var lhsGPOD, out var rhsGPOD, out var isGPODEqual))
                {
                    if (!((GPODCommon)((IGPODGetter)lhsGPOD).CommonInstance()!).Equals(lhsGPOD, rhsGPOD, equalsMask?.GetSubCrystal((int)GameplayOptions_FieldIndex.GPOD))) return false;
                }
                else if (!isGPODEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.SliderEntries) ?? true))
            {
                if (!lhs.SliderEntries.SequenceEqual(rhs.SliderEntries, (l, r) => ((SliderEntryCommon)((ISliderEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)GameplayOptions_FieldIndex.SliderEntries)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGameplayOptionsGetter?)lhs,
                rhs: rhs as IGameplayOptionsGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGameplayOptionsGetter?)lhs,
                rhs: rhs as IGameplayOptionsGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IGameplayOptionsGetter item)
        {
            var hash = new HashCode();
            if (item.Title is {} Titleitem)
            {
                hash.Add(Titleitem);
            }
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            if (item.TNAM is {} TNAMItem)
            {
                hash.Add(TNAMItem);
            }
            if (item.DefaultIndex is {} DefaultIndexItem)
            {
                hash.Add(DefaultIndexItem);
            }
            if (item.WNAM is {} WNAMItem)
            {
                hash.Add(WNAMItem);
            }
            if (item.GPOD is {} GPODitem)
            {
                hash.Add(GPODitem);
            }
            hash.Add(item.SliderEntries);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IGameplayOptionsGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IGameplayOptionsGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return GameplayOptions.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IGameplayOptionsGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public GameplayOptions Duplicate(
            IGameplayOptionsGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new GameplayOptions(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGameplayOptionsGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGameplayOptionsGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class GameplayOptionsSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly GameplayOptionsSetterTranslationCommon Instance = new GameplayOptionsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGameplayOptionsInternal item,
            IGameplayOptionsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IGameplayOptions item,
            IGameplayOptionsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Title) ?? true))
            {
                item.Title = rhs.Title?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.TNAM) ?? true))
            {
                if(rhs.TNAM is {} TNAMrhs)
                {
                    item.TNAM = TNAMrhs.ToArray();
                }
                else
                {
                    item.TNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.DefaultIndex) ?? true))
            {
                if(rhs.DefaultIndex is {} DefaultIndexrhs)
                {
                    item.DefaultIndex = DefaultIndexrhs.ToArray();
                }
                else
                {
                    item.DefaultIndex = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.WNAM) ?? true))
            {
                if(rhs.WNAM is {} WNAMrhs)
                {
                    item.WNAM = WNAMrhs.ToArray();
                }
                else
                {
                    item.WNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.GPOD) ?? true))
            {
                errorMask?.PushIndex((int)GameplayOptions_FieldIndex.GPOD);
                try
                {
                    if(rhs.GPOD is {} rhsGPOD)
                    {
                        item.GPOD = rhsGPOD.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)GameplayOptions_FieldIndex.GPOD));
                    }
                    else
                    {
                        item.GPOD = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptions_FieldIndex.SliderEntries) ?? true))
            {
                errorMask?.PushIndex((int)GameplayOptions_FieldIndex.SliderEntries);
                try
                {
                    item.SliderEntries.SetTo(
                        rhs.SliderEntries
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IGameplayOptions item,
            IGameplayOptionsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGameplayOptionsInternal)item,
                rhs: (IGameplayOptionsGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGameplayOptions)item,
                rhs: (IGameplayOptionsGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGameplayOptionsInternal)item,
                rhs: (IGameplayOptionsGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGameplayOptions)item,
                rhs: (IGameplayOptionsGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public GameplayOptions DeepCopy(
            IGameplayOptionsGetter item,
            GameplayOptions.TranslationMask? copyMask = null)
        {
            GameplayOptions ret = (GameplayOptions)((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).GetNew();
            ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public GameplayOptions DeepCopy(
            IGameplayOptionsGetter item,
            out GameplayOptions.ErrorMask errorMask,
            GameplayOptions.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GameplayOptions ret = (GameplayOptions)((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).GetNew();
            ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = GameplayOptions.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public GameplayOptions DeepCopy(
            IGameplayOptionsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GameplayOptions ret = (GameplayOptions)((GameplayOptionsCommon)((IGameplayOptionsGetter)item).CommonInstance()!).GetNew();
            ((GameplayOptionsSetterTranslationCommon)((IGameplayOptionsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class GameplayOptions
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GameplayOptions_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GameplayOptions_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GameplayOptionsCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GameplayOptionsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GameplayOptionsSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class GameplayOptionsBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly GameplayOptionsBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IGameplayOptionsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Title,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TNAM,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DefaultIndex,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WNAM,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            if (item.GPOD is {} GPODItem)
            {
                ((GPODBinaryWriteTranslation)((IBinaryItem)GPODItem).BinaryWriteTranslator).Write(
                    item: GPODItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ISliderEntryGetter>.Instance.Write(
                writer: writer,
                items: item.SliderEntries,
                transl: (MutagenWriter subWriter, ISliderEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((SliderEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IGameplayOptionsGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.GPOF,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IGameplayOptionsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGameplayOptionsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGameplayOptionsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class GameplayOptionsBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly GameplayOptionsBinaryCreateTranslation Instance = new GameplayOptionsBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.GPOF;
        public static ParseResult FillBinaryRecordTypes(
            IGameplayOptionsInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Title = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)GameplayOptions_FieldIndex.Title;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)GameplayOptions_FieldIndex.Description;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)GameplayOptions_FieldIndex.TNAM;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultIndex = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)GameplayOptions_FieldIndex.DefaultIndex;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)GameplayOptions_FieldIndex.WNAM;
                }
                case RecordTypeInts.GPOD:
                {
                    item.GPOD = Mutagen.Bethesda.Starfield.GPOD.CreateFromBinary(frame: frame);
                    return (int)GameplayOptions_FieldIndex.GPOD;
                }
                case RecordTypeInts.VOVS:
                case RecordTypeInts.VORV:
                case RecordTypeInts.RESN:
                case RecordTypeInts.VORN:
                {
                    item.SliderEntries.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<SliderEntry>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: SliderEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: SliderEntry.TryCreateFromBinary));
                    return (int)GameplayOptions_FieldIndex.SliderEntries;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class GameplayOptionsBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class GameplayOptionsBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IGameplayOptionsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GameplayOptions_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GameplayOptions_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GameplayOptionsCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GameplayOptionsSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GameplayOptionsBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GameplayOptionsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IGameplayOptions);


        #region Title
        private int? _TitleLocation;
        public ITranslatedStringGetter? Title => _TitleLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TitleLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        #region TNAM
        private int? _TNAMLocation;
        public ReadOnlyMemorySlice<Byte>? TNAM => _TNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region DefaultIndex
        private int? _DefaultIndexLocation;
        public ReadOnlyMemorySlice<Byte>? DefaultIndex => _DefaultIndexLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DefaultIndexLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region WNAM
        private int? _WNAMLocation;
        public ReadOnlyMemorySlice<Byte>? WNAM => _WNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region GPOD
        private RangeInt32? _GPODLocation;
        public IGPODGetter? GPOD => _GPODLocation.HasValue ? GPODBinaryOverlay.GPODFactory(_recordData.Slice(_GPODLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<ISliderEntryGetter> SliderEntries { get; private set; } = Array.Empty<ISliderEntryGetter>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected GameplayOptionsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IGameplayOptionsGetter GameplayOptionsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new GameplayOptionsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IGameplayOptionsGetter GameplayOptionsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return GameplayOptionsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NNAM:
                {
                    _TitleLocation = (stream.Position - offset);
                    return (int)GameplayOptions_FieldIndex.Title;
                }
                case RecordTypeInts.DNAM:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)GameplayOptions_FieldIndex.Description;
                }
                case RecordTypeInts.TNAM:
                {
                    _TNAMLocation = (stream.Position - offset);
                    return (int)GameplayOptions_FieldIndex.TNAM;
                }
                case RecordTypeInts.VNAM:
                {
                    _DefaultIndexLocation = (stream.Position - offset);
                    return (int)GameplayOptions_FieldIndex.DefaultIndex;
                }
                case RecordTypeInts.WNAM:
                {
                    _WNAMLocation = (stream.Position - offset);
                    return (int)GameplayOptions_FieldIndex.WNAM;
                }
                case RecordTypeInts.GPOD:
                {
                    _GPODLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)GameplayOptions_FieldIndex.GPOD;
                }
                case RecordTypeInts.VOVS:
                case RecordTypeInts.VORV:
                case RecordTypeInts.RESN:
                case RecordTypeInts.VORN:
                {
                    this.SliderEntries = this.ParseRepeatedTypelessSubrecord<ISliderEntryGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: SliderEntry_Registration.TriggerSpecs,
                        factory: SliderEntryBinaryOverlay.SliderEntryFactory);
                    return (int)GameplayOptions_FieldIndex.SliderEntries;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GameplayOptionsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<GameplayOptions>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IGameplayOptionsGetter rhs) return false;
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGameplayOptionsGetter? obj)
        {
            return ((GameplayOptionsCommon)((IGameplayOptionsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GameplayOptionsCommon)((IGameplayOptionsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

