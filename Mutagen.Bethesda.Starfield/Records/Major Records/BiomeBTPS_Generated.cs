/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BiomeBTPS :
        IBiomeBTPS,
        IEquatable<IBiomeBTPSGetter>,
        ILoquiObjectSetter<BiomeBTPS>
    {
        #region Ctor
        public BiomeBTPS()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        public BiomeBTPSItem Base { get; set; } = new BiomeBTPSItem();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBiomeBTPSItemGetter IBiomeBTPSGetter.Base => Base;
        #endregion
        #region Flow
        public BiomeBTPSItem Flow { get; set; } = new BiomeBTPSItem();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBiomeBTPSItemGetter IBiomeBTPSGetter.Flow => Flow;
        #endregion
        #region FlatOuter
        public BiomeBTPSItem FlatOuter { get; set; } = new BiomeBTPSItem();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBiomeBTPSItemGetter IBiomeBTPSGetter.FlatOuter => FlatOuter;
        #endregion
        #region FlatInner
        public BiomeBTPSItem FlatInner { get; set; } = new BiomeBTPSItem();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBiomeBTPSItemGetter IBiomeBTPSGetter.FlatInner => FlatInner;
        #endregion
        #region Talus
        public BiomeBTPSItem Talus { get; set; } = new BiomeBTPSItem();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBiomeBTPSItemGetter IBiomeBTPSGetter.Talus => Talus;
        #endregion
        #region Solid
        public BiomeBTPSItem Solid { get; set; } = new BiomeBTPSItem();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBiomeBTPSItemGetter IBiomeBTPSGetter.Solid => Solid;
        #endregion
        #region Path
        public BiomeBTPSItem Path { get; set; } = new BiomeBTPSItem();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBiomeBTPSItemGetter IBiomeBTPSGetter.Path => Path;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeBTPSMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeBTPSGetter rhs) return false;
            return ((BiomeBTPSCommon)((IBiomeBTPSGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeBTPSGetter? obj)
        {
            return ((BiomeBTPSCommon)((IBiomeBTPSGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeBTPSCommon)((IBiomeBTPSGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Base = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(initialValue, new BiomeBTPSItem.Mask<TItem>(initialValue));
                this.Flow = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(initialValue, new BiomeBTPSItem.Mask<TItem>(initialValue));
                this.FlatOuter = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(initialValue, new BiomeBTPSItem.Mask<TItem>(initialValue));
                this.FlatInner = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(initialValue, new BiomeBTPSItem.Mask<TItem>(initialValue));
                this.Talus = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(initialValue, new BiomeBTPSItem.Mask<TItem>(initialValue));
                this.Solid = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(initialValue, new BiomeBTPSItem.Mask<TItem>(initialValue));
                this.Path = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(initialValue, new BiomeBTPSItem.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Base,
                TItem Flow,
                TItem FlatOuter,
                TItem FlatInner,
                TItem Talus,
                TItem Solid,
                TItem Path)
            {
                this.Base = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(Base, new BiomeBTPSItem.Mask<TItem>(Base));
                this.Flow = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(Flow, new BiomeBTPSItem.Mask<TItem>(Flow));
                this.FlatOuter = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(FlatOuter, new BiomeBTPSItem.Mask<TItem>(FlatOuter));
                this.FlatInner = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(FlatInner, new BiomeBTPSItem.Mask<TItem>(FlatInner));
                this.Talus = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(Talus, new BiomeBTPSItem.Mask<TItem>(Talus));
                this.Solid = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(Solid, new BiomeBTPSItem.Mask<TItem>(Solid));
                this.Path = new MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>(Path, new BiomeBTPSItem.Mask<TItem>(Path));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>? Base { get; set; }
            public MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>? Flow { get; set; }
            public MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>? FlatOuter { get; set; }
            public MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>? FlatInner { get; set; }
            public MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>? Talus { get; set; }
            public MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>? Solid { get; set; }
            public MaskItem<TItem, BiomeBTPSItem.Mask<TItem>?>? Path { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Base, rhs.Base)) return false;
                if (!object.Equals(this.Flow, rhs.Flow)) return false;
                if (!object.Equals(this.FlatOuter, rhs.FlatOuter)) return false;
                if (!object.Equals(this.FlatInner, rhs.FlatInner)) return false;
                if (!object.Equals(this.Talus, rhs.Talus)) return false;
                if (!object.Equals(this.Solid, rhs.Solid)) return false;
                if (!object.Equals(this.Path, rhs.Path)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Base);
                hash.Add(this.Flow);
                hash.Add(this.FlatOuter);
                hash.Add(this.FlatInner);
                hash.Add(this.Talus);
                hash.Add(this.Solid);
                hash.Add(this.Path);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (Base != null)
                {
                    if (!eval(this.Base.Overall)) return false;
                    if (this.Base.Specific != null && !this.Base.Specific.All(eval)) return false;
                }
                if (Flow != null)
                {
                    if (!eval(this.Flow.Overall)) return false;
                    if (this.Flow.Specific != null && !this.Flow.Specific.All(eval)) return false;
                }
                if (FlatOuter != null)
                {
                    if (!eval(this.FlatOuter.Overall)) return false;
                    if (this.FlatOuter.Specific != null && !this.FlatOuter.Specific.All(eval)) return false;
                }
                if (FlatInner != null)
                {
                    if (!eval(this.FlatInner.Overall)) return false;
                    if (this.FlatInner.Specific != null && !this.FlatInner.Specific.All(eval)) return false;
                }
                if (Talus != null)
                {
                    if (!eval(this.Talus.Overall)) return false;
                    if (this.Talus.Specific != null && !this.Talus.Specific.All(eval)) return false;
                }
                if (Solid != null)
                {
                    if (!eval(this.Solid.Overall)) return false;
                    if (this.Solid.Specific != null && !this.Solid.Specific.All(eval)) return false;
                }
                if (Path != null)
                {
                    if (!eval(this.Path.Overall)) return false;
                    if (this.Path.Specific != null && !this.Path.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (Base != null)
                {
                    if (eval(this.Base.Overall)) return true;
                    if (this.Base.Specific != null && this.Base.Specific.Any(eval)) return true;
                }
                if (Flow != null)
                {
                    if (eval(this.Flow.Overall)) return true;
                    if (this.Flow.Specific != null && this.Flow.Specific.Any(eval)) return true;
                }
                if (FlatOuter != null)
                {
                    if (eval(this.FlatOuter.Overall)) return true;
                    if (this.FlatOuter.Specific != null && this.FlatOuter.Specific.Any(eval)) return true;
                }
                if (FlatInner != null)
                {
                    if (eval(this.FlatInner.Overall)) return true;
                    if (this.FlatInner.Specific != null && this.FlatInner.Specific.Any(eval)) return true;
                }
                if (Talus != null)
                {
                    if (eval(this.Talus.Overall)) return true;
                    if (this.Talus.Specific != null && this.Talus.Specific.Any(eval)) return true;
                }
                if (Solid != null)
                {
                    if (eval(this.Solid.Overall)) return true;
                    if (this.Solid.Specific != null && this.Solid.Specific.Any(eval)) return true;
                }
                if (Path != null)
                {
                    if (eval(this.Path.Overall)) return true;
                    if (this.Path.Specific != null && this.Path.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BiomeBTPS.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Base = this.Base == null ? null : new MaskItem<R, BiomeBTPSItem.Mask<R>?>(eval(this.Base.Overall), this.Base.Specific?.Translate(eval));
                obj.Flow = this.Flow == null ? null : new MaskItem<R, BiomeBTPSItem.Mask<R>?>(eval(this.Flow.Overall), this.Flow.Specific?.Translate(eval));
                obj.FlatOuter = this.FlatOuter == null ? null : new MaskItem<R, BiomeBTPSItem.Mask<R>?>(eval(this.FlatOuter.Overall), this.FlatOuter.Specific?.Translate(eval));
                obj.FlatInner = this.FlatInner == null ? null : new MaskItem<R, BiomeBTPSItem.Mask<R>?>(eval(this.FlatInner.Overall), this.FlatInner.Specific?.Translate(eval));
                obj.Talus = this.Talus == null ? null : new MaskItem<R, BiomeBTPSItem.Mask<R>?>(eval(this.Talus.Overall), this.Talus.Specific?.Translate(eval));
                obj.Solid = this.Solid == null ? null : new MaskItem<R, BiomeBTPSItem.Mask<R>?>(eval(this.Solid.Overall), this.Solid.Specific?.Translate(eval));
                obj.Path = this.Path == null ? null : new MaskItem<R, BiomeBTPSItem.Mask<R>?>(eval(this.Path.Overall), this.Path.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BiomeBTPS.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BiomeBTPS.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BiomeBTPS.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Base?.Overall ?? true)
                    {
                        Base?.Print(sb);
                    }
                    if (printMask?.Flow?.Overall ?? true)
                    {
                        Flow?.Print(sb);
                    }
                    if (printMask?.FlatOuter?.Overall ?? true)
                    {
                        FlatOuter?.Print(sb);
                    }
                    if (printMask?.FlatInner?.Overall ?? true)
                    {
                        FlatInner?.Print(sb);
                    }
                    if (printMask?.Talus?.Overall ?? true)
                    {
                        Talus?.Print(sb);
                    }
                    if (printMask?.Solid?.Overall ?? true)
                    {
                        Solid?.Print(sb);
                    }
                    if (printMask?.Path?.Overall ?? true)
                    {
                        Path?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>? Base;
            public MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>? Flow;
            public MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>? FlatOuter;
            public MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>? FlatInner;
            public MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>? Talus;
            public MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>? Solid;
            public MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>? Path;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BiomeBTPS_FieldIndex enu = (BiomeBTPS_FieldIndex)index;
                switch (enu)
                {
                    case BiomeBTPS_FieldIndex.Base:
                        return Base;
                    case BiomeBTPS_FieldIndex.Flow:
                        return Flow;
                    case BiomeBTPS_FieldIndex.FlatOuter:
                        return FlatOuter;
                    case BiomeBTPS_FieldIndex.FlatInner:
                        return FlatInner;
                    case BiomeBTPS_FieldIndex.Talus:
                        return Talus;
                    case BiomeBTPS_FieldIndex.Solid:
                        return Solid;
                    case BiomeBTPS_FieldIndex.Path:
                        return Path;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BiomeBTPS_FieldIndex enu = (BiomeBTPS_FieldIndex)index;
                switch (enu)
                {
                    case BiomeBTPS_FieldIndex.Base:
                        this.Base = new MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>(ex, null);
                        break;
                    case BiomeBTPS_FieldIndex.Flow:
                        this.Flow = new MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>(ex, null);
                        break;
                    case BiomeBTPS_FieldIndex.FlatOuter:
                        this.FlatOuter = new MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>(ex, null);
                        break;
                    case BiomeBTPS_FieldIndex.FlatInner:
                        this.FlatInner = new MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>(ex, null);
                        break;
                    case BiomeBTPS_FieldIndex.Talus:
                        this.Talus = new MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>(ex, null);
                        break;
                    case BiomeBTPS_FieldIndex.Solid:
                        this.Solid = new MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>(ex, null);
                        break;
                    case BiomeBTPS_FieldIndex.Path:
                        this.Path = new MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BiomeBTPS_FieldIndex enu = (BiomeBTPS_FieldIndex)index;
                switch (enu)
                {
                    case BiomeBTPS_FieldIndex.Base:
                        this.Base = (MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>?)obj;
                        break;
                    case BiomeBTPS_FieldIndex.Flow:
                        this.Flow = (MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>?)obj;
                        break;
                    case BiomeBTPS_FieldIndex.FlatOuter:
                        this.FlatOuter = (MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>?)obj;
                        break;
                    case BiomeBTPS_FieldIndex.FlatInner:
                        this.FlatInner = (MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>?)obj;
                        break;
                    case BiomeBTPS_FieldIndex.Talus:
                        this.Talus = (MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>?)obj;
                        break;
                    case BiomeBTPS_FieldIndex.Solid:
                        this.Solid = (MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>?)obj;
                        break;
                    case BiomeBTPS_FieldIndex.Path:
                        this.Path = (MaskItem<Exception?, BiomeBTPSItem.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Base != null) return true;
                if (Flow != null) return true;
                if (FlatOuter != null) return true;
                if (FlatInner != null) return true;
                if (Talus != null) return true;
                if (Solid != null) return true;
                if (Path != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                Base?.Print(sb);
                Flow?.Print(sb);
                FlatOuter?.Print(sb);
                FlatInner?.Print(sb);
                Talus?.Print(sb);
                Solid?.Print(sb);
                Path?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Base = this.Base.Combine(rhs.Base, (l, r) => l.Combine(r));
                ret.Flow = this.Flow.Combine(rhs.Flow, (l, r) => l.Combine(r));
                ret.FlatOuter = this.FlatOuter.Combine(rhs.FlatOuter, (l, r) => l.Combine(r));
                ret.FlatInner = this.FlatInner.Combine(rhs.FlatInner, (l, r) => l.Combine(r));
                ret.Talus = this.Talus.Combine(rhs.Talus, (l, r) => l.Combine(r));
                ret.Solid = this.Solid.Combine(rhs.Solid, (l, r) => l.Combine(r));
                ret.Path = this.Path.Combine(rhs.Path, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public BiomeBTPSItem.TranslationMask? Base;
            public BiomeBTPSItem.TranslationMask? Flow;
            public BiomeBTPSItem.TranslationMask? FlatOuter;
            public BiomeBTPSItem.TranslationMask? FlatInner;
            public BiomeBTPSItem.TranslationMask? Talus;
            public BiomeBTPSItem.TranslationMask? Solid;
            public BiomeBTPSItem.TranslationMask? Path;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Base != null ? Base.OnOverall : DefaultOn, Base?.GetCrystal()));
                ret.Add((Flow != null ? Flow.OnOverall : DefaultOn, Flow?.GetCrystal()));
                ret.Add((FlatOuter != null ? FlatOuter.OnOverall : DefaultOn, FlatOuter?.GetCrystal()));
                ret.Add((FlatInner != null ? FlatInner.OnOverall : DefaultOn, FlatInner?.GetCrystal()));
                ret.Add((Talus != null ? Talus.OnOverall : DefaultOn, Talus?.GetCrystal()));
                ret.Add((Solid != null ? Solid.OnOverall : DefaultOn, Solid?.GetCrystal()));
                ret.Add((Path != null ? Path.OnOverall : DefaultOn, Path?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeBTPSBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeBTPSBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static BiomeBTPS CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BiomeBTPS();
            ((BiomeBTPSSetterCommon)((IBiomeBTPSGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BiomeBTPS item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BiomeBTPSSetterCommon)((IBiomeBTPSGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BiomeBTPS GetNew()
        {
            return new BiomeBTPS();
        }

    }
    #endregion

    #region Interface
    public partial interface IBiomeBTPS :
        IBiomeBTPSGetter,
        ILoquiObjectSetter<IBiomeBTPS>
    {
        new BiomeBTPSItem Base { get; set; }
        new BiomeBTPSItem Flow { get; set; }
        new BiomeBTPSItem FlatOuter { get; set; }
        new BiomeBTPSItem FlatInner { get; set; }
        new BiomeBTPSItem Talus { get; set; }
        new BiomeBTPSItem Solid { get; set; }
        new BiomeBTPSItem Path { get; set; }
    }

    public partial interface IBiomeBTPSGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IBiomeBTPSGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => BiomeBTPS_Registration.Instance;
        IBiomeBTPSItemGetter Base { get; }
        IBiomeBTPSItemGetter Flow { get; }
        IBiomeBTPSItemGetter FlatOuter { get; }
        IBiomeBTPSItemGetter FlatInner { get; }
        IBiomeBTPSItemGetter Talus { get; }
        IBiomeBTPSItemGetter Solid { get; }
        IBiomeBTPSItemGetter Path { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BiomeBTPSMixIn
    {
        public static void Clear(this IBiomeBTPS item)
        {
            ((BiomeBTPSSetterCommon)((IBiomeBTPSGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BiomeBTPS.Mask<bool> GetEqualsMask(
            this IBiomeBTPSGetter item,
            IBiomeBTPSGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BiomeBTPSCommon)((IBiomeBTPSGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBiomeBTPSGetter item,
            string? name = null,
            BiomeBTPS.Mask<bool>? printMask = null)
        {
            return ((BiomeBTPSCommon)((IBiomeBTPSGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBiomeBTPSGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeBTPS.Mask<bool>? printMask = null)
        {
            ((BiomeBTPSCommon)((IBiomeBTPSGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBiomeBTPSGetter item,
            IBiomeBTPSGetter rhs,
            BiomeBTPS.TranslationMask? equalsMask = null)
        {
            return ((BiomeBTPSCommon)((IBiomeBTPSGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBiomeBTPS lhs,
            IBiomeBTPSGetter rhs)
        {
            ((BiomeBTPSSetterTranslationCommon)((IBiomeBTPSGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeBTPS lhs,
            IBiomeBTPSGetter rhs,
            BiomeBTPS.TranslationMask? copyMask = null)
        {
            ((BiomeBTPSSetterTranslationCommon)((IBiomeBTPSGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeBTPS lhs,
            IBiomeBTPSGetter rhs,
            out BiomeBTPS.ErrorMask errorMask,
            BiomeBTPS.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BiomeBTPSSetterTranslationCommon)((IBiomeBTPSGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BiomeBTPS.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBiomeBTPS lhs,
            IBiomeBTPSGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BiomeBTPSSetterTranslationCommon)((IBiomeBTPSGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BiomeBTPS DeepCopy(
            this IBiomeBTPSGetter item,
            BiomeBTPS.TranslationMask? copyMask = null)
        {
            return ((BiomeBTPSSetterTranslationCommon)((IBiomeBTPSGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BiomeBTPS DeepCopy(
            this IBiomeBTPSGetter item,
            out BiomeBTPS.ErrorMask errorMask,
            BiomeBTPS.TranslationMask? copyMask = null)
        {
            return ((BiomeBTPSSetterTranslationCommon)((IBiomeBTPSGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BiomeBTPS DeepCopy(
            this IBiomeBTPSGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BiomeBTPSSetterTranslationCommon)((IBiomeBTPSGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBiomeBTPS item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BiomeBTPSSetterCommon)((IBiomeBTPSGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BiomeBTPS_FieldIndex
    {
        Base = 0,
        Flow = 1,
        FlatOuter = 2,
        FlatInner = 3,
        Talus = 4,
        Solid = 5,
        Path = 6,
    }
    #endregion

    #region Registration
    internal partial class BiomeBTPS_Registration : ILoquiRegistration
    {
        public static readonly BiomeBTPS_Registration Instance = new BiomeBTPS_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(BiomeBTPS.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BiomeBTPS.ErrorMask);

        public static readonly Type ClassType = typeof(BiomeBTPS);

        public static readonly Type GetterType = typeof(IBiomeBTPSGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBiomeBTPS);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BiomeBTPS";

        public const string Name = "BiomeBTPS";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(BiomeBTPSBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BiomeBTPSSetterCommon
    {
        public static readonly BiomeBTPSSetterCommon Instance = new BiomeBTPSSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBiomeBTPS item)
        {
            ClearPartial();
            item.Base.Clear();
            item.Flow.Clear();
            item.FlatOuter.Clear();
            item.FlatInner.Clear();
            item.Talus.Clear();
            item.Solid.Clear();
            item.Path.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IBiomeBTPS obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBiomeBTPS item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: BiomeBTPSBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class BiomeBTPSCommon
    {
        public static readonly BiomeBTPSCommon Instance = new BiomeBTPSCommon();

        public BiomeBTPS.Mask<bool> GetEqualsMask(
            IBiomeBTPSGetter item,
            IBiomeBTPSGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BiomeBTPS.Mask<bool>(false);
            ((BiomeBTPSCommon)((IBiomeBTPSGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBiomeBTPSGetter item,
            IBiomeBTPSGetter rhs,
            BiomeBTPS.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Base = MaskItemExt.Factory(item.Base.GetEqualsMask(rhs.Base, include), include);
            ret.Flow = MaskItemExt.Factory(item.Flow.GetEqualsMask(rhs.Flow, include), include);
            ret.FlatOuter = MaskItemExt.Factory(item.FlatOuter.GetEqualsMask(rhs.FlatOuter, include), include);
            ret.FlatInner = MaskItemExt.Factory(item.FlatInner.GetEqualsMask(rhs.FlatInner, include), include);
            ret.Talus = MaskItemExt.Factory(item.Talus.GetEqualsMask(rhs.Talus, include), include);
            ret.Solid = MaskItemExt.Factory(item.Solid.GetEqualsMask(rhs.Solid, include), include);
            ret.Path = MaskItemExt.Factory(item.Path.GetEqualsMask(rhs.Path, include), include);
        }
        
        public string Print(
            IBiomeBTPSGetter item,
            string? name = null,
            BiomeBTPS.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBiomeBTPSGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeBTPS.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BiomeBTPS =>");
            }
            else
            {
                sb.AppendLine($"{name} (BiomeBTPS) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBiomeBTPSGetter item,
            StructuredStringBuilder sb,
            BiomeBTPS.Mask<bool>? printMask = null)
        {
            if (printMask?.Base?.Overall ?? true)
            {
                item.Base?.Print(sb, "Base");
            }
            if (printMask?.Flow?.Overall ?? true)
            {
                item.Flow?.Print(sb, "Flow");
            }
            if (printMask?.FlatOuter?.Overall ?? true)
            {
                item.FlatOuter?.Print(sb, "FlatOuter");
            }
            if (printMask?.FlatInner?.Overall ?? true)
            {
                item.FlatInner?.Print(sb, "FlatInner");
            }
            if (printMask?.Talus?.Overall ?? true)
            {
                item.Talus?.Print(sb, "Talus");
            }
            if (printMask?.Solid?.Overall ?? true)
            {
                item.Solid?.Print(sb, "Solid");
            }
            if (printMask?.Path?.Overall ?? true)
            {
                item.Path?.Print(sb, "Path");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBiomeBTPSGetter? lhs,
            IBiomeBTPSGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Base) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Base, rhs.Base, out var lhsBase, out var rhsBase, out var isBaseEqual))
                {
                    if (!((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)lhsBase).CommonInstance()!).Equals(lhsBase, rhsBase, equalsMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.Base))) return false;
                }
                else if (!isBaseEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Flow) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Flow, rhs.Flow, out var lhsFlow, out var rhsFlow, out var isFlowEqual))
                {
                    if (!((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)lhsFlow).CommonInstance()!).Equals(lhsFlow, rhsFlow, equalsMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.Flow))) return false;
                }
                else if (!isFlowEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.FlatOuter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FlatOuter, rhs.FlatOuter, out var lhsFlatOuter, out var rhsFlatOuter, out var isFlatOuterEqual))
                {
                    if (!((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)lhsFlatOuter).CommonInstance()!).Equals(lhsFlatOuter, rhsFlatOuter, equalsMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.FlatOuter))) return false;
                }
                else if (!isFlatOuterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.FlatInner) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FlatInner, rhs.FlatInner, out var lhsFlatInner, out var rhsFlatInner, out var isFlatInnerEqual))
                {
                    if (!((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)lhsFlatInner).CommonInstance()!).Equals(lhsFlatInner, rhsFlatInner, equalsMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.FlatInner))) return false;
                }
                else if (!isFlatInnerEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Talus) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Talus, rhs.Talus, out var lhsTalus, out var rhsTalus, out var isTalusEqual))
                {
                    if (!((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)lhsTalus).CommonInstance()!).Equals(lhsTalus, rhsTalus, equalsMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.Talus))) return false;
                }
                else if (!isTalusEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Solid) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Solid, rhs.Solid, out var lhsSolid, out var rhsSolid, out var isSolidEqual))
                {
                    if (!((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)lhsSolid).CommonInstance()!).Equals(lhsSolid, rhsSolid, equalsMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.Solid))) return false;
                }
                else if (!isSolidEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Path) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Path, rhs.Path, out var lhsPath, out var rhsPath, out var isPathEqual))
                {
                    if (!((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)lhsPath).CommonInstance()!).Equals(lhsPath, rhsPath, equalsMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.Path))) return false;
                }
                else if (!isPathEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBiomeBTPSGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Base);
            hash.Add(item.Flow);
            hash.Add(item.FlatOuter);
            hash.Add(item.FlatInner);
            hash.Add(item.Talus);
            hash.Add(item.Solid);
            hash.Add(item.Path);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BiomeBTPS.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBiomeBTPSGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BiomeBTPSSetterTranslationCommon
    {
        public static readonly BiomeBTPSSetterTranslationCommon Instance = new BiomeBTPSSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBiomeBTPS item,
            IBiomeBTPSGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Base) ?? true))
            {
                errorMask?.PushIndex((int)BiomeBTPS_FieldIndex.Base);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Base) ?? true))
                    {
                        item.Base = rhs.Base.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.Base),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Flow) ?? true))
            {
                errorMask?.PushIndex((int)BiomeBTPS_FieldIndex.Flow);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Flow) ?? true))
                    {
                        item.Flow = rhs.Flow.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.Flow),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.FlatOuter) ?? true))
            {
                errorMask?.PushIndex((int)BiomeBTPS_FieldIndex.FlatOuter);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.FlatOuter) ?? true))
                    {
                        item.FlatOuter = rhs.FlatOuter.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.FlatOuter),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.FlatInner) ?? true))
            {
                errorMask?.PushIndex((int)BiomeBTPS_FieldIndex.FlatInner);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.FlatInner) ?? true))
                    {
                        item.FlatInner = rhs.FlatInner.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.FlatInner),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Talus) ?? true))
            {
                errorMask?.PushIndex((int)BiomeBTPS_FieldIndex.Talus);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Talus) ?? true))
                    {
                        item.Talus = rhs.Talus.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.Talus),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Solid) ?? true))
            {
                errorMask?.PushIndex((int)BiomeBTPS_FieldIndex.Solid);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Solid) ?? true))
                    {
                        item.Solid = rhs.Solid.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.Solid),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Path) ?? true))
            {
                errorMask?.PushIndex((int)BiomeBTPS_FieldIndex.Path);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)BiomeBTPS_FieldIndex.Path) ?? true))
                    {
                        item.Path = rhs.Path.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)BiomeBTPS_FieldIndex.Path),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBiomeBTPS item,
            IBiomeBTPSGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public BiomeBTPS DeepCopy(
            IBiomeBTPSGetter item,
            BiomeBTPS.TranslationMask? copyMask = null)
        {
            BiomeBTPS ret = (BiomeBTPS)((BiomeBTPSCommon)((IBiomeBTPSGetter)item).CommonInstance()!).GetNew();
            ((BiomeBTPSSetterTranslationCommon)((IBiomeBTPSGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BiomeBTPS DeepCopy(
            IBiomeBTPSGetter item,
            out BiomeBTPS.ErrorMask errorMask,
            BiomeBTPS.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BiomeBTPS ret = (BiomeBTPS)((BiomeBTPSCommon)((IBiomeBTPSGetter)item).CommonInstance()!).GetNew();
            ((BiomeBTPSSetterTranslationCommon)((IBiomeBTPSGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BiomeBTPS.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BiomeBTPS DeepCopy(
            IBiomeBTPSGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BiomeBTPS ret = (BiomeBTPS)((BiomeBTPSCommon)((IBiomeBTPSGetter)item).CommonInstance()!).GetNew();
            ((BiomeBTPSSetterTranslationCommon)((IBiomeBTPSGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeBTPS
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeBTPS_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeBTPS_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeBTPSCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BiomeBTPSSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeBTPSSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeBTPSGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBiomeBTPSGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBiomeBTPSGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeBTPSBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly BiomeBTPSBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IBiomeBTPSGetter item,
            MutagenWriter writer)
        {
            var BaseItem = item.Base;
            ((BiomeBTPSItemBinaryWriteTranslation)((IBinaryItem)BaseItem).BinaryWriteTranslator).Write(
                item: BaseItem,
                writer: writer);
            var FlowItem = item.Flow;
            ((BiomeBTPSItemBinaryWriteTranslation)((IBinaryItem)FlowItem).BinaryWriteTranslator).Write(
                item: FlowItem,
                writer: writer);
            var FlatOuterItem = item.FlatOuter;
            ((BiomeBTPSItemBinaryWriteTranslation)((IBinaryItem)FlatOuterItem).BinaryWriteTranslator).Write(
                item: FlatOuterItem,
                writer: writer);
            var FlatInnerItem = item.FlatInner;
            ((BiomeBTPSItemBinaryWriteTranslation)((IBinaryItem)FlatInnerItem).BinaryWriteTranslator).Write(
                item: FlatInnerItem,
                writer: writer);
            var TalusItem = item.Talus;
            ((BiomeBTPSItemBinaryWriteTranslation)((IBinaryItem)TalusItem).BinaryWriteTranslator).Write(
                item: TalusItem,
                writer: writer);
            var SolidItem = item.Solid;
            ((BiomeBTPSItemBinaryWriteTranslation)((IBinaryItem)SolidItem).BinaryWriteTranslator).Write(
                item: SolidItem,
                writer: writer);
            var PathItem = item.Path;
            ((BiomeBTPSItemBinaryWriteTranslation)((IBinaryItem)PathItem).BinaryWriteTranslator).Write(
                item: PathItem,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            IBiomeBTPSGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBiomeBTPSGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BiomeBTPSBinaryCreateTranslation
    {
        public static readonly BiomeBTPSBinaryCreateTranslation Instance = new BiomeBTPSBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IBiomeBTPS item,
            MutagenFrame frame)
        {
            item.Base = Mutagen.Bethesda.Starfield.BiomeBTPSItem.CreateFromBinary(frame: frame);
            item.Flow = Mutagen.Bethesda.Starfield.BiomeBTPSItem.CreateFromBinary(frame: frame);
            item.FlatOuter = Mutagen.Bethesda.Starfield.BiomeBTPSItem.CreateFromBinary(frame: frame);
            item.FlatInner = Mutagen.Bethesda.Starfield.BiomeBTPSItem.CreateFromBinary(frame: frame);
            item.Talus = Mutagen.Bethesda.Starfield.BiomeBTPSItem.CreateFromBinary(frame: frame);
            item.Solid = Mutagen.Bethesda.Starfield.BiomeBTPSItem.CreateFromBinary(frame: frame);
            item.Path = Mutagen.Bethesda.Starfield.BiomeBTPSItem.CreateFromBinary(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BiomeBTPSBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBiomeBTPSGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeBTPSBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BiomeBTPSBinaryOverlay :
        PluginBinaryOverlay,
        IBiomeBTPSGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeBTPS_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeBTPS_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeBTPSCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeBTPSSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeBTPSGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBiomeBTPSGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBiomeBTPSGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeBTPSBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeBTPSBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public IBiomeBTPSItemGetter Base => BiomeBTPSItemBinaryOverlay.BiomeBTPSItemFactory(_structData, _package, default(TypedParseParams));
        public IBiomeBTPSItemGetter Flow => BiomeBTPSItemBinaryOverlay.BiomeBTPSItemFactory(_structData.Slice(0x20), _package, default(TypedParseParams));
        public IBiomeBTPSItemGetter FlatOuter => BiomeBTPSItemBinaryOverlay.BiomeBTPSItemFactory(_structData.Slice(0x40), _package, default(TypedParseParams));
        public IBiomeBTPSItemGetter FlatInner => BiomeBTPSItemBinaryOverlay.BiomeBTPSItemFactory(_structData.Slice(0x60), _package, default(TypedParseParams));
        public IBiomeBTPSItemGetter Talus => BiomeBTPSItemBinaryOverlay.BiomeBTPSItemFactory(_structData.Slice(0x80), _package, default(TypedParseParams));
        public IBiomeBTPSItemGetter Solid => BiomeBTPSItemBinaryOverlay.BiomeBTPSItemFactory(_structData.Slice(0xA0), _package, default(TypedParseParams));
        public IBiomeBTPSItemGetter Path => BiomeBTPSItemBinaryOverlay.BiomeBTPSItemFactory(_structData.Slice(0xC0), _package, default(TypedParseParams));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BiomeBTPSBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBiomeBTPSGetter BiomeBTPSFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0xE0,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new BiomeBTPSBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0xE0;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IBiomeBTPSGetter BiomeBTPSFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BiomeBTPSFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeBTPSMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeBTPSGetter rhs) return false;
            return ((BiomeBTPSCommon)((IBiomeBTPSGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeBTPSGetter? obj)
        {
            return ((BiomeBTPSCommon)((IBiomeBTPSGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeBTPSCommon)((IBiomeBTPSGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

