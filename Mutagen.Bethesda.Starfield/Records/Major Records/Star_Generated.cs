/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Star :
        StarfieldMajorRecord,
        IEquatable<IStarGetter>,
        ILoquiObjectSetter<Star>,
        IStarInternal
    {
        #region Ctor
        protected Star()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IStarGetter.Components => _Components;
        #endregion

        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IStarGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IStarGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region BNAM
        public P3Float? BNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P3Float? IStarGetter.BNAM => this.BNAM;
        #endregion
        #region ONAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ONAM;
        public MemorySlice<Byte>? ONAM
        {
            get => this._ONAM;
            set => this._ONAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IStarGetter.ONAM => this.ONAM;
        #endregion
        #region ID
        public UInt32? ID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IStarGetter.ID => this.ID;
        #endregion
        #region Color
        public Color? Color { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? IStarGetter.Color => this.Color;
        #endregion
        #region SunPreset
        private readonly IFormLinkNullable<ISunPresetGetter> _SunPreset = new FormLinkNullable<ISunPresetGetter>();
        public IFormLinkNullable<ISunPresetGetter> SunPreset
        {
            get => _SunPreset;
            set => _SunPreset.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISunPresetGetter> IStarGetter.SunPreset => this.SunPreset;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StarMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Name = initialValue;
                this.BNAM = initialValue;
                this.ONAM = initialValue;
                this.ID = initialValue;
                this.Color = initialValue;
                this.SunPreset = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Keywords,
                TItem Name,
                TItem BNAM,
                TItem ONAM,
                TItem ID,
                TItem Color,
                TItem SunPreset)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Name = Name;
                this.BNAM = BNAM;
                this.ONAM = ONAM;
                this.ID = ID;
                this.Color = Color;
                this.SunPreset = SunPreset;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem Name;
            public TItem BNAM;
            public TItem ONAM;
            public TItem ID;
            public TItem Color;
            public TItem SunPreset;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.BNAM, rhs.BNAM)) return false;
                if (!object.Equals(this.ONAM, rhs.ONAM)) return false;
                if (!object.Equals(this.ID, rhs.ID)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.SunPreset, rhs.SunPreset)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.Keywords);
                hash.Add(this.Name);
                hash.Add(this.BNAM);
                hash.Add(this.ONAM);
                hash.Add(this.ID);
                hash.Add(this.Color);
                hash.Add(this.SunPreset);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.BNAM)) return false;
                if (!eval(this.ONAM)) return false;
                if (!eval(this.ID)) return false;
                if (!eval(this.Color)) return false;
                if (!eval(this.SunPreset)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Name)) return true;
                if (eval(this.BNAM)) return true;
                if (eval(this.ONAM)) return true;
                if (eval(this.ID)) return true;
                if (eval(this.Color)) return true;
                if (eval(this.SunPreset)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Star.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Name = eval(this.Name);
                obj.BNAM = eval(this.BNAM);
                obj.ONAM = eval(this.ONAM);
                obj.ID = eval(this.ID);
                obj.Color = eval(this.Color);
                obj.SunPreset = eval(this.SunPreset);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Star.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Star.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Star.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.BNAM ?? true)
                    {
                        sb.AppendItem(BNAM, "BNAM");
                    }
                    if (printMask?.ONAM ?? true)
                    {
                        sb.AppendItem(ONAM, "ONAM");
                    }
                    if (printMask?.ID ?? true)
                    {
                        sb.AppendItem(ID, "ID");
                    }
                    if (printMask?.Color ?? true)
                    {
                        sb.AppendItem(Color, "Color");
                    }
                    if (printMask?.SunPreset ?? true)
                    {
                        sb.AppendItem(SunPreset, "SunPreset");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? Name;
            public Exception? BNAM;
            public Exception? ONAM;
            public Exception? ID;
            public Exception? Color;
            public Exception? SunPreset;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Star_FieldIndex enu = (Star_FieldIndex)index;
                switch (enu)
                {
                    case Star_FieldIndex.Components:
                        return Components;
                    case Star_FieldIndex.Keywords:
                        return Keywords;
                    case Star_FieldIndex.Name:
                        return Name;
                    case Star_FieldIndex.BNAM:
                        return BNAM;
                    case Star_FieldIndex.ONAM:
                        return ONAM;
                    case Star_FieldIndex.ID:
                        return ID;
                    case Star_FieldIndex.Color:
                        return Color;
                    case Star_FieldIndex.SunPreset:
                        return SunPreset;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Star_FieldIndex enu = (Star_FieldIndex)index;
                switch (enu)
                {
                    case Star_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Star_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Star_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Star_FieldIndex.BNAM:
                        this.BNAM = ex;
                        break;
                    case Star_FieldIndex.ONAM:
                        this.ONAM = ex;
                        break;
                    case Star_FieldIndex.ID:
                        this.ID = ex;
                        break;
                    case Star_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case Star_FieldIndex.SunPreset:
                        this.SunPreset = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Star_FieldIndex enu = (Star_FieldIndex)index;
                switch (enu)
                {
                    case Star_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Star_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Star_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Star_FieldIndex.BNAM:
                        this.BNAM = (Exception?)obj;
                        break;
                    case Star_FieldIndex.ONAM:
                        this.ONAM = (Exception?)obj;
                        break;
                    case Star_FieldIndex.ID:
                        this.ID = (Exception?)obj;
                        break;
                    case Star_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case Star_FieldIndex.SunPreset:
                        this.SunPreset = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (Keywords != null) return true;
                if (Name != null) return true;
                if (BNAM != null) return true;
                if (ONAM != null) return true;
                if (ID != null) return true;
                if (Color != null) return true;
                if (SunPreset != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(BNAM, "BNAM");
                }
                {
                    sb.AppendItem(ONAM, "ONAM");
                }
                {
                    sb.AppendItem(ID, "ID");
                }
                {
                    sb.AppendItem(Color, "Color");
                }
                {
                    sb.AppendItem(SunPreset, "SunPreset");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.BNAM = this.BNAM.Combine(rhs.BNAM);
                ret.ONAM = this.ONAM.Combine(rhs.ONAM);
                ret.ID = this.ID.Combine(rhs.ID);
                ret.Color = this.Color.Combine(rhs.Color);
                ret.SunPreset = this.SunPreset.Combine(rhs.SunPreset);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool Keywords;
            public bool Name;
            public bool BNAM;
            public bool ONAM;
            public bool ID;
            public bool Color;
            public bool SunPreset;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Keywords = defaultOn;
                this.Name = defaultOn;
                this.BNAM = defaultOn;
                this.ONAM = defaultOn;
                this.ID = defaultOn;
                this.Color = defaultOn;
                this.SunPreset = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Name, null));
                ret.Add((BNAM, null));
                ret.Add((ONAM, null));
                ret.Add((ID, null));
                ret.Add((Color, null));
                ret.Add((SunPreset, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Star_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StarCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => StarSetterCommon.Instance.RemapLinks(this, mapping);
        public Star(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Star(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Star(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Star(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Star(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Star>.ToString(this);
        }

        protected override Type LinkType => typeof(IStar);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => StarCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => StarSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => StarSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => StarSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IStarGetter rhs) return false;
            return ((StarCommon)((IStarGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStarGetter? obj)
        {
            return ((StarCommon)((IStarGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StarCommon)((IStarGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StarBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StarBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Star CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Star();
            ((StarSetterCommon)((IStarGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Star item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((StarSetterCommon)((IStarGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Star GetNew()
        {
            return new Star();
        }

    }
    #endregion

    #region Interface
    public partial interface IStar :
        IAssetLinkContainer,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IStarInternal>,
        INamed,
        INamedRequired,
        IStarfieldMajorRecordInternal,
        IStarGetter
    {
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new P3Float? BNAM { get; set; }
        new MemorySlice<Byte>? ONAM { get; set; }
        new UInt32? ID { get; set; }
        new Color? Color { get; set; }
        new IFormLinkNullable<ISunPresetGetter> SunPreset { get; set; }
    }

    public partial interface IStarInternal :
        IStarfieldMajorRecordInternal,
        IStar,
        IStarGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.STDT)]
    public partial interface IStarGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IStarGetter>,
        IMapsToGetter<IStarGetter>,
        INamedGetter,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Star_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        P3Float? BNAM { get; }
        ReadOnlyMemorySlice<Byte>? ONAM { get; }
        UInt32? ID { get; }
        Color? Color { get; }
        IFormLinkNullableGetter<ISunPresetGetter> SunPreset { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class StarMixIn
    {
        public static void Clear(this IStarInternal item)
        {
            ((StarSetterCommon)((IStarGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Star.Mask<bool> GetEqualsMask(
            this IStarGetter item,
            IStarGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StarCommon)((IStarGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IStarGetter item,
            string? name = null,
            Star.Mask<bool>? printMask = null)
        {
            return ((StarCommon)((IStarGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IStarGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Star.Mask<bool>? printMask = null)
        {
            ((StarCommon)((IStarGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStarGetter item,
            IStarGetter rhs,
            Star.TranslationMask? equalsMask = null)
        {
            return ((StarCommon)((IStarGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IStarInternal lhs,
            IStarGetter rhs,
            out Star.ErrorMask errorMask,
            Star.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StarSetterTranslationCommon)((IStarGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Star.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStarInternal lhs,
            IStarGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StarSetterTranslationCommon)((IStarGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Star DeepCopy(
            this IStarGetter item,
            Star.TranslationMask? copyMask = null)
        {
            return ((StarSetterTranslationCommon)((IStarGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Star DeepCopy(
            this IStarGetter item,
            out Star.ErrorMask errorMask,
            Star.TranslationMask? copyMask = null)
        {
            return ((StarSetterTranslationCommon)((IStarGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Star DeepCopy(
            this IStarGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StarSetterTranslationCommon)((IStarGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Star Duplicate(
            this IStarGetter item,
            FormKey formKey,
            Star.TranslationMask? copyMask = null)
        {
            return ((StarCommon)((IStarGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Star Duplicate(
            this IStarGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((StarCommon)((IStarGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStarInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((StarSetterCommon)((IStarGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Star_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Keywords = 8,
        Name = 9,
        BNAM = 10,
        ONAM = 11,
        ID = 12,
        Color = 13,
        SunPreset = 14,
    }
    #endregion

    #region Registration
    internal partial class Star_Registration : ILoquiRegistration
    {
        public static readonly Star_Registration Instance = new Star_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(Star.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Star.ErrorMask);

        public static readonly Type ClassType = typeof(Star);

        public static readonly Type GetterType = typeof(IStarGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStar);

        public static readonly Type? InternalSetterType = typeof(IStarInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Star";

        public const string Name = "Star";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.STDT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.STDT);
            var all = RecordCollection.Factory(
                RecordTypes.STDT,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.ANAM,
                RecordTypes.BNAM,
                RecordTypes.ONAM,
                RecordTypes.DNAM,
                RecordTypes.ENAM,
                RecordTypes.PNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(StarBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class StarSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly StarSetterCommon Instance = new StarSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStarInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.Keywords = null;
            item.Name = default;
            item.BNAM = default;
            item.ONAM = default;
            item.ID = default;
            item.Color = default;
            item.SunPreset.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IStarInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IStarInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IStar obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.SunPreset.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IStar obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IStar obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStarInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IStarInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: StarBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: StarBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Star)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Star)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class StarCommon : StarfieldMajorRecordCommon
    {
        public new static readonly StarCommon Instance = new StarCommon();

        public Star.Mask<bool> GetEqualsMask(
            IStarGetter item,
            IStarGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Star.Mask<bool>(false);
            ((StarCommon)((IStarGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStarGetter item,
            IStarGetter rhs,
            Star.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.BNAM = item.BNAM.Equals(rhs.BNAM);
            ret.ONAM = MemorySliceExt.SequenceEqual(item.ONAM, rhs.ONAM);
            ret.ID = item.ID == rhs.ID;
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            ret.SunPreset = item.SunPreset.Equals(rhs.SunPreset);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IStarGetter item,
            string? name = null,
            Star.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IStarGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Star.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Star =>");
            }
            else
            {
                sb.AppendLine($"{name} (Star) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IStarGetter item,
            StructuredStringBuilder sb,
            Star.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.BNAM ?? true)
                && item.BNAM is {} BNAMItem)
            {
                sb.AppendItem(BNAMItem, "BNAM");
            }
            if ((printMask?.ONAM ?? true)
                && item.ONAM is {} ONAMItem)
            {
                sb.AppendLine($"ONAM => {SpanExt.ToHexString(ONAMItem)}");
            }
            if ((printMask?.ID ?? true)
                && item.ID is {} IDItem)
            {
                sb.AppendItem(IDItem, "ID");
            }
            if ((printMask?.Color ?? true)
                && item.Color is {} ColorItem)
            {
                sb.AppendItem(ColorItem, "Color");
            }
            if (printMask?.SunPreset ?? true)
            {
                sb.AppendItem(item.SunPreset.FormKeyNullable, "SunPreset");
            }
        }
        
        public static Star_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Star_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Star_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Star_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Star_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Star_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Star_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Star_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Star_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Star_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Star_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Star_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Star_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStarGetter? lhs,
            IStarGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Star_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Star_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Star_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Star_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Star_FieldIndex.BNAM) ?? true))
            {
                if (!lhs.BNAM.Equals(rhs.BNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Star_FieldIndex.ONAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ONAM, rhs.ONAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Star_FieldIndex.ID) ?? true))
            {
                if (lhs.ID != rhs.ID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Star_FieldIndex.Color) ?? true))
            {
                if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Star_FieldIndex.SunPreset) ?? true))
            {
                if (!lhs.SunPreset.Equals(rhs.SunPreset)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IStarGetter?)lhs,
                rhs: rhs as IStarGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IStarGetter?)lhs,
                rhs: rhs as IStarGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IStarGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            hash.Add(item.Keywords);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.BNAM is {} BNAMitem)
            {
                hash.Add(BNAMitem);
            }
            if (item.ONAM is {} ONAMItem)
            {
                hash.Add(ONAMItem);
            }
            if (item.ID is {} IDitem)
            {
                hash.Add(IDitem);
            }
            if (item.Color is {} Coloritem)
            {
                hash.Add(Coloritem);
            }
            hash.Add(item.SunPreset);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IStarGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IStarGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Star.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IStarGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.SunPreset, out var SunPresetInfo))
            {
                yield return SunPresetInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IStarGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Star Duplicate(
            IStarGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Star(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IStarGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IStarGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class StarSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly StarSetterTranslationCommon Instance = new StarSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStarInternal item,
            IStarGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IStar item,
            IStarGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Star_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Star_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Star_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Star_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Star_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Star_FieldIndex.BNAM) ?? true))
            {
                item.BNAM = rhs.BNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)Star_FieldIndex.ONAM) ?? true))
            {
                if(rhs.ONAM is {} ONAMrhs)
                {
                    item.ONAM = ONAMrhs.ToArray();
                }
                else
                {
                    item.ONAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Star_FieldIndex.ID) ?? true))
            {
                item.ID = rhs.ID;
            }
            if ((copyMask?.GetShouldTranslate((int)Star_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            if ((copyMask?.GetShouldTranslate((int)Star_FieldIndex.SunPreset) ?? true))
            {
                item.SunPreset.SetTo(rhs.SunPreset.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IStar item,
            IStarGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStarInternal)item,
                rhs: (IStarGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStar)item,
                rhs: (IStarGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStarInternal)item,
                rhs: (IStarGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStar)item,
                rhs: (IStarGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Star DeepCopy(
            IStarGetter item,
            Star.TranslationMask? copyMask = null)
        {
            Star ret = (Star)((StarCommon)((IStarGetter)item).CommonInstance()!).GetNew();
            ((StarSetterTranslationCommon)((IStarGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Star DeepCopy(
            IStarGetter item,
            out Star.ErrorMask errorMask,
            Star.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Star ret = (Star)((StarCommon)((IStarGetter)item).CommonInstance()!).GetNew();
            ((StarSetterTranslationCommon)((IStarGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Star.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Star DeepCopy(
            IStarGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Star ret = (Star)((StarCommon)((IStarGetter)item).CommonInstance()!).GetNew();
            ((StarSetterTranslationCommon)((IStarGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Star
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Star_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Star_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StarCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return StarSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StarSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class StarBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly StarBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IStarGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM),
                binaryType: StringBinaryType.NullTerminate);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.BNAM,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ONAM,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ID,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Color,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SunPreset,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
        }

        public void Write(
            MutagenWriter writer,
            IStarGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.STDT,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IStarGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IStarGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IStarGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class StarBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly StarBinaryCreateTranslation Instance = new StarBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.STDT;
        public static ParseResult FillBinaryRecordTypes(
            IStarInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Star_FieldIndex.Components;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Star_FieldIndex.Keywords;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Star_FieldIndex.Name;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BNAM = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Star_FieldIndex.BNAM;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ONAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Star_FieldIndex.ONAM;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ID = frame.ReadUInt32();
                    return (int)Star_FieldIndex.ID;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Color = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)Star_FieldIndex.Color;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SunPreset.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Star_FieldIndex.SunPreset;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class StarBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class StarBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IStarGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Star_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Star_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StarCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StarSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StarCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => StarCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StarBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StarBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IStar);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region BNAM
        private int? _BNAMLocation;
        public P3Float? BNAM => _BNAMLocation.HasValue ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BNAMLocation.Value, _package.MetaData.Constants)) : default(P3Float?);
        #endregion
        #region ONAM
        private int? _ONAMLocation;
        public ReadOnlyMemorySlice<Byte>? ONAM => _ONAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ONAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ID
        private int? _IDLocation;
        public UInt32? ID => _IDLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IDLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region Color
        private int? _ColorLocation;
        public Color? Color => _ColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color?);
        #endregion
        #region SunPreset
        private int? _SunPresetLocation;
        public IFormLinkNullableGetter<ISunPresetGetter> SunPreset => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISunPresetGetter>(_package, _recordData, _SunPresetLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected StarBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IStarGetter StarFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new StarBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IStarGetter StarFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return StarFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Star_FieldIndex.Components;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Star_FieldIndex.Keywords;
                }
                case RecordTypeInts.ANAM:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Star_FieldIndex.Name;
                }
                case RecordTypeInts.BNAM:
                {
                    _BNAMLocation = (stream.Position - offset);
                    return (int)Star_FieldIndex.BNAM;
                }
                case RecordTypeInts.ONAM:
                {
                    _ONAMLocation = (stream.Position - offset);
                    return (int)Star_FieldIndex.ONAM;
                }
                case RecordTypeInts.DNAM:
                {
                    _IDLocation = (stream.Position - offset);
                    return (int)Star_FieldIndex.ID;
                }
                case RecordTypeInts.ENAM:
                {
                    _ColorLocation = (stream.Position - offset);
                    return (int)Star_FieldIndex.Color;
                }
                case RecordTypeInts.PNAM:
                {
                    _SunPresetLocation = (stream.Position - offset);
                    return (int)Star_FieldIndex.SunPreset;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StarMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Star>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IStarGetter rhs) return false;
            return ((StarCommon)((IStarGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStarGetter? obj)
        {
            return ((StarCommon)((IStarGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StarCommon)((IStarGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

