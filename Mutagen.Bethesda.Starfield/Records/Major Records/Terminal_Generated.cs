/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Terminal :
        StarfieldMajorRecord,
        IEquatable<ITerminalGetter>,
        ILoquiObjectSetter<Terminal>,
        ITerminalInternal
    {
        #region Ctor
        protected Terminal()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapterIndexed? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        public VirtualMachineAdapterIndexed? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterIndexedGetter? ITerminalGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ITerminalGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region ODTY
        public Single? ODTY { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ITerminalGetter.ODTY => this.ODTY;
        #endregion
        #region Transforms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Transforms? _Transforms;
        public Transforms? Transforms
        {
            get => _Transforms;
            set => _Transforms = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITransformsGetter? ITerminalGetter.Transforms => this.Transforms;
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> ITerminalGetter.Components => _Components;
        #endregion

        #endregion
        #region Menu
        private readonly IFormLinkNullable<ITerminalMenuGetter> _Menu = new FormLinkNullable<ITerminalMenuGetter>();
        public IFormLinkNullable<ITerminalMenuGetter> Menu
        {
            get => _Menu;
            set => _Menu.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITerminalMenuGetter> ITerminalGetter.Menu => this.Menu;
        #endregion
        #region Background
        public Terminal.BackgroundType? Background { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Terminal.BackgroundType? ITerminalGetter.Background => this.Background;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITerminalGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ITerminalGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? ITerminalGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectProperty>? _Properties;
        public ExtendedList<ObjectProperty>? Properties
        {
            get => this._Properties;
            set => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectPropertyGetter>? ITerminalGetter.Properties => _Properties;
        #endregion

        #endregion
        #region ForcedLocations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? _ForcedLocations;
        public ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ForcedLocations
        {
            get => this._ForcedLocations;
            set => this._ForcedLocations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ITerminalGetter.ForcedLocations => _ForcedLocations;
        #endregion

        #endregion
        #region PNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _PNAM;
        public MemorySlice<Byte>? PNAM
        {
            get => this._PNAM;
            set => this._PNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ITerminalGetter.PNAM => this.PNAM;
        #endregion
        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FNAM;
        public MemorySlice<Byte>? FNAM
        {
            get => this._FNAM;
            set => this._FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ITerminalGetter.FNAM => this.FNAM;
        #endregion
        #region JNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _JNAM;
        public MemorySlice<Byte>? JNAM
        {
            get => this._JNAM;
            set => this._JNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ITerminalGetter.JNAM => this.JNAM;
        #endregion
        #region MarkerFlags
        public FurnitureMarkerFlags? MarkerFlags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FurnitureMarkerFlags? ITerminalGetter.MarkerFlags => this.MarkerFlags;
        #endregion
        #region GNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _GNAM;
        public MemorySlice<Byte>? GNAM
        {
            get => this._GNAM;
            set => this._GNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ITerminalGetter.GNAM => this.GNAM;
        #endregion
        #region WorkbenchData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _WorkbenchData;
        public MemorySlice<Byte>? WorkbenchData
        {
            get => this._WorkbenchData;
            set => this._WorkbenchData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ITerminalGetter.WorkbenchData => this.WorkbenchData;
        #endregion
        #region FurnitureTemplate
        private readonly IFormLinkNullable<IFurnitureGetter> _FurnitureTemplate = new FormLinkNullable<IFurnitureGetter>();
        public IFormLinkNullable<IFurnitureGetter> FurnitureTemplate
        {
            get => _FurnitureTemplate;
            set => _FurnitureTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFurnitureGetter> ITerminalGetter.FurnitureTemplate => this.FurnitureTemplate;
        #endregion
        #region FNPR
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FNPR;
        public MemorySlice<Byte>? FNPR
        {
            get => this._FNPR;
            set => this._FNPR = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ITerminalGetter.FNPR => this.FNPR;
        #endregion
        #region MarkerModel
        public String? MarkerModel { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ITerminalGetter.MarkerModel => this.MarkerModel;
        #endregion
        #region MarkerParameters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FurnitureMarkerParameters>? _MarkerParameters;
        public ExtendedList<FurnitureMarkerParameters>? MarkerParameters
        {
            get => this._MarkerParameters;
            set => this._MarkerParameters = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFurnitureMarkerParametersGetter>? ITerminalGetter.MarkerParameters => _MarkerParameters;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TerminalMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapterIndexed.Mask<TItem>?>(initialValue, new VirtualMachineAdapterIndexed.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.ODTY = initialValue;
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(initialValue, new Transforms.Mask<TItem>(initialValue));
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Menu = initialValue;
                this.Background = initialValue;
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.ForcedLocations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.PNAM = initialValue;
                this.FNAM = initialValue;
                this.JNAM = initialValue;
                this.MarkerFlags = initialValue;
                this.GNAM = initialValue;
                this.WorkbenchData = initialValue;
                this.FurnitureTemplate = initialValue;
                this.FNPR = initialValue;
                this.MarkerModel = initialValue;
                this.MarkerParameters = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem ODTY,
                TItem Transforms,
                TItem Components,
                TItem Menu,
                TItem Background,
                TItem Name,
                TItem Model,
                TItem Keywords,
                TItem Properties,
                TItem ForcedLocations,
                TItem PNAM,
                TItem FNAM,
                TItem JNAM,
                TItem MarkerFlags,
                TItem GNAM,
                TItem WorkbenchData,
                TItem FurnitureTemplate,
                TItem FNPR,
                TItem MarkerModel,
                TItem MarkerParameters)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapterIndexed.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapterIndexed.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.ODTY = ODTY;
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(Transforms, new Transforms.Mask<TItem>(Transforms));
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Menu = Menu;
                this.Background = Background;
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.ForcedLocations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ForcedLocations, Enumerable.Empty<(int Index, TItem Value)>());
                this.PNAM = PNAM;
                this.FNAM = FNAM;
                this.JNAM = JNAM;
                this.MarkerFlags = MarkerFlags;
                this.GNAM = GNAM;
                this.WorkbenchData = WorkbenchData;
                this.FurnitureTemplate = FurnitureTemplate;
                this.FNPR = FNPR;
                this.MarkerModel = MarkerModel;
                this.MarkerParameters = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>?>(MarkerParameters, Enumerable.Empty<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapterIndexed.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem ODTY;
            public MaskItem<TItem, Transforms.Mask<TItem>?>? Transforms { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Menu;
            public TItem Background;
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>? Properties;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ForcedLocations;
            public TItem PNAM;
            public TItem FNAM;
            public TItem JNAM;
            public TItem MarkerFlags;
            public TItem GNAM;
            public TItem WorkbenchData;
            public TItem FurnitureTemplate;
            public TItem FNPR;
            public TItem MarkerModel;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FurnitureMarkerParameters.Mask<TItem>?>>?>? MarkerParameters;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.ODTY, rhs.ODTY)) return false;
                if (!object.Equals(this.Transforms, rhs.Transforms)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Menu, rhs.Menu)) return false;
                if (!object.Equals(this.Background, rhs.Background)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.ForcedLocations, rhs.ForcedLocations)) return false;
                if (!object.Equals(this.PNAM, rhs.PNAM)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.JNAM, rhs.JNAM)) return false;
                if (!object.Equals(this.MarkerFlags, rhs.MarkerFlags)) return false;
                if (!object.Equals(this.GNAM, rhs.GNAM)) return false;
                if (!object.Equals(this.WorkbenchData, rhs.WorkbenchData)) return false;
                if (!object.Equals(this.FurnitureTemplate, rhs.FurnitureTemplate)) return false;
                if (!object.Equals(this.FNPR, rhs.FNPR)) return false;
                if (!object.Equals(this.MarkerModel, rhs.MarkerModel)) return false;
                if (!object.Equals(this.MarkerParameters, rhs.MarkerParameters)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.ODTY);
                hash.Add(this.Transforms);
                hash.Add(this.Components);
                hash.Add(this.Menu);
                hash.Add(this.Background);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Keywords);
                hash.Add(this.Properties);
                hash.Add(this.ForcedLocations);
                hash.Add(this.PNAM);
                hash.Add(this.FNAM);
                hash.Add(this.JNAM);
                hash.Add(this.MarkerFlags);
                hash.Add(this.GNAM);
                hash.Add(this.WorkbenchData);
                hash.Add(this.FurnitureTemplate);
                hash.Add(this.FNPR);
                hash.Add(this.MarkerModel);
                hash.Add(this.MarkerParameters);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.ODTY)) return false;
                if (Transforms != null)
                {
                    if (!eval(this.Transforms.Overall)) return false;
                    if (this.Transforms.Specific != null && !this.Transforms.Specific.All(eval)) return false;
                }
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Menu)) return false;
                if (!eval(this.Background)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ForcedLocations != null)
                {
                    if (!eval(this.ForcedLocations.Overall)) return false;
                    if (this.ForcedLocations.Specific != null)
                    {
                        foreach (var item in this.ForcedLocations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.PNAM)) return false;
                if (!eval(this.FNAM)) return false;
                if (!eval(this.JNAM)) return false;
                if (!eval(this.MarkerFlags)) return false;
                if (!eval(this.GNAM)) return false;
                if (!eval(this.WorkbenchData)) return false;
                if (!eval(this.FurnitureTemplate)) return false;
                if (!eval(this.FNPR)) return false;
                if (!eval(this.MarkerModel)) return false;
                if (this.MarkerParameters != null)
                {
                    if (!eval(this.MarkerParameters.Overall)) return false;
                    if (this.MarkerParameters.Specific != null)
                    {
                        foreach (var item in this.MarkerParameters.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.ODTY)) return true;
                if (Transforms != null)
                {
                    if (eval(this.Transforms.Overall)) return true;
                    if (this.Transforms.Specific != null && this.Transforms.Specific.Any(eval)) return true;
                }
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Menu)) return true;
                if (eval(this.Background)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ForcedLocations != null)
                {
                    if (eval(this.ForcedLocations.Overall)) return true;
                    if (this.ForcedLocations.Specific != null)
                    {
                        foreach (var item in this.ForcedLocations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.PNAM)) return true;
                if (eval(this.FNAM)) return true;
                if (eval(this.JNAM)) return true;
                if (eval(this.MarkerFlags)) return true;
                if (eval(this.GNAM)) return true;
                if (eval(this.WorkbenchData)) return true;
                if (eval(this.FurnitureTemplate)) return true;
                if (eval(this.FNPR)) return true;
                if (eval(this.MarkerModel)) return true;
                if (this.MarkerParameters != null)
                {
                    if (eval(this.MarkerParameters.Overall)) return true;
                    if (this.MarkerParameters.Specific != null)
                    {
                        foreach (var item in this.MarkerParameters.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Terminal.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapterIndexed.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.ODTY = eval(this.ODTY);
                obj.Transforms = this.Transforms == null ? null : new MaskItem<R, Transforms.Mask<R>?>(eval(this.Transforms.Overall), this.Transforms.Specific?.Translate(eval));
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Menu = eval(this.Menu);
                obj.Background = eval(this.Background);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, ObjectProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (ForcedLocations != null)
                {
                    obj.ForcedLocations = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ForcedLocations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ForcedLocations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ForcedLocations.Specific = l;
                        foreach (var item in ForcedLocations.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.PNAM = eval(this.PNAM);
                obj.FNAM = eval(this.FNAM);
                obj.JNAM = eval(this.JNAM);
                obj.MarkerFlags = eval(this.MarkerFlags);
                obj.GNAM = eval(this.GNAM);
                obj.WorkbenchData = eval(this.WorkbenchData);
                obj.FurnitureTemplate = eval(this.FurnitureTemplate);
                obj.FNPR = eval(this.FNPR);
                obj.MarkerModel = eval(this.MarkerModel);
                if (MarkerParameters != null)
                {
                    obj.MarkerParameters = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>>?>(eval(this.MarkerParameters.Overall), Enumerable.Empty<MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>>());
                    if (MarkerParameters.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>>();
                        obj.MarkerParameters.Specific = l;
                        foreach (var item in MarkerParameters.Specific)
                        {
                            MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, FurnitureMarkerParameters.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Terminal.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Terminal.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Terminal.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.ODTY ?? true)
                    {
                        sb.AppendItem(ODTY, "ODTY");
                    }
                    if (printMask?.Transforms?.Overall ?? true)
                    {
                        Transforms?.Print(sb);
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Menu ?? true)
                    {
                        sb.AppendItem(Menu, "Menu");
                    }
                    if (printMask?.Background ?? true)
                    {
                        sb.AppendItem(Background, "Background");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        sb.AppendLine("Properties =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ForcedLocations?.Overall ?? true)
                        && ForcedLocations is {} ForcedLocationsItem)
                    {
                        sb.AppendLine("ForcedLocations =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ForcedLocationsItem.Overall);
                            if (ForcedLocationsItem.Specific != null)
                            {
                                foreach (var subItem in ForcedLocationsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.PNAM ?? true)
                    {
                        sb.AppendItem(PNAM, "PNAM");
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        sb.AppendItem(FNAM, "FNAM");
                    }
                    if (printMask?.JNAM ?? true)
                    {
                        sb.AppendItem(JNAM, "JNAM");
                    }
                    if (printMask?.MarkerFlags ?? true)
                    {
                        sb.AppendItem(MarkerFlags, "MarkerFlags");
                    }
                    if (printMask?.GNAM ?? true)
                    {
                        sb.AppendItem(GNAM, "GNAM");
                    }
                    if (printMask?.WorkbenchData ?? true)
                    {
                        sb.AppendItem(WorkbenchData, "WorkbenchData");
                    }
                    if (printMask?.FurnitureTemplate ?? true)
                    {
                        sb.AppendItem(FurnitureTemplate, "FurnitureTemplate");
                    }
                    if (printMask?.FNPR ?? true)
                    {
                        sb.AppendItem(FNPR, "FNPR");
                    }
                    if (printMask?.MarkerModel ?? true)
                    {
                        sb.AppendItem(MarkerModel, "MarkerModel");
                    }
                    if ((printMask?.MarkerParameters?.Overall ?? true)
                        && MarkerParameters is {} MarkerParametersItem)
                    {
                        sb.AppendLine("MarkerParameters =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MarkerParametersItem.Overall);
                            if (MarkerParametersItem.Specific != null)
                            {
                                foreach (var subItem in MarkerParametersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapterIndexed.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? ODTY;
            public MaskItem<Exception?, Transforms.ErrorMask?>? Transforms;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Menu;
            public Exception? Background;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>? Properties;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ForcedLocations;
            public Exception? PNAM;
            public Exception? FNAM;
            public Exception? JNAM;
            public Exception? MarkerFlags;
            public Exception? GNAM;
            public Exception? WorkbenchData;
            public Exception? FurnitureTemplate;
            public Exception? FNPR;
            public Exception? MarkerModel;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>? MarkerParameters;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Terminal_FieldIndex enu = (Terminal_FieldIndex)index;
                switch (enu)
                {
                    case Terminal_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Terminal_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Terminal_FieldIndex.ODTY:
                        return ODTY;
                    case Terminal_FieldIndex.Transforms:
                        return Transforms;
                    case Terminal_FieldIndex.Components:
                        return Components;
                    case Terminal_FieldIndex.Menu:
                        return Menu;
                    case Terminal_FieldIndex.Background:
                        return Background;
                    case Terminal_FieldIndex.Name:
                        return Name;
                    case Terminal_FieldIndex.Model:
                        return Model;
                    case Terminal_FieldIndex.Keywords:
                        return Keywords;
                    case Terminal_FieldIndex.Properties:
                        return Properties;
                    case Terminal_FieldIndex.ForcedLocations:
                        return ForcedLocations;
                    case Terminal_FieldIndex.PNAM:
                        return PNAM;
                    case Terminal_FieldIndex.FNAM:
                        return FNAM;
                    case Terminal_FieldIndex.JNAM:
                        return JNAM;
                    case Terminal_FieldIndex.MarkerFlags:
                        return MarkerFlags;
                    case Terminal_FieldIndex.GNAM:
                        return GNAM;
                    case Terminal_FieldIndex.WorkbenchData:
                        return WorkbenchData;
                    case Terminal_FieldIndex.FurnitureTemplate:
                        return FurnitureTemplate;
                    case Terminal_FieldIndex.FNPR:
                        return FNPR;
                    case Terminal_FieldIndex.MarkerModel:
                        return MarkerModel;
                    case Terminal_FieldIndex.MarkerParameters:
                        return MarkerParameters;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Terminal_FieldIndex enu = (Terminal_FieldIndex)index;
                switch (enu)
                {
                    case Terminal_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapterIndexed.ErrorMask?>(ex, null);
                        break;
                    case Terminal_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Terminal_FieldIndex.ODTY:
                        this.ODTY = ex;
                        break;
                    case Terminal_FieldIndex.Transforms:
                        this.Transforms = new MaskItem<Exception?, Transforms.ErrorMask?>(ex, null);
                        break;
                    case Terminal_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Terminal_FieldIndex.Menu:
                        this.Menu = ex;
                        break;
                    case Terminal_FieldIndex.Background:
                        this.Background = ex;
                        break;
                    case Terminal_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Terminal_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Terminal_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Terminal_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(ex, null);
                        break;
                    case Terminal_FieldIndex.ForcedLocations:
                        this.ForcedLocations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Terminal_FieldIndex.PNAM:
                        this.PNAM = ex;
                        break;
                    case Terminal_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case Terminal_FieldIndex.JNAM:
                        this.JNAM = ex;
                        break;
                    case Terminal_FieldIndex.MarkerFlags:
                        this.MarkerFlags = ex;
                        break;
                    case Terminal_FieldIndex.GNAM:
                        this.GNAM = ex;
                        break;
                    case Terminal_FieldIndex.WorkbenchData:
                        this.WorkbenchData = ex;
                        break;
                    case Terminal_FieldIndex.FurnitureTemplate:
                        this.FurnitureTemplate = ex;
                        break;
                    case Terminal_FieldIndex.FNPR:
                        this.FNPR = ex;
                        break;
                    case Terminal_FieldIndex.MarkerModel:
                        this.MarkerModel = ex;
                        break;
                    case Terminal_FieldIndex.MarkerParameters:
                        this.MarkerParameters = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Terminal_FieldIndex enu = (Terminal_FieldIndex)index;
                switch (enu)
                {
                    case Terminal_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapterIndexed.ErrorMask?>?)obj;
                        break;
                    case Terminal_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Terminal_FieldIndex.ODTY:
                        this.ODTY = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.Transforms:
                        this.Transforms = (MaskItem<Exception?, Transforms.ErrorMask?>?)obj;
                        break;
                    case Terminal_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Terminal_FieldIndex.Menu:
                        this.Menu = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.Background:
                        this.Background = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Terminal_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Terminal_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>)obj;
                        break;
                    case Terminal_FieldIndex.ForcedLocations:
                        this.ForcedLocations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Terminal_FieldIndex.PNAM:
                        this.PNAM = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.JNAM:
                        this.JNAM = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.MarkerFlags:
                        this.MarkerFlags = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.GNAM:
                        this.GNAM = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.WorkbenchData:
                        this.WorkbenchData = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.FurnitureTemplate:
                        this.FurnitureTemplate = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.FNPR:
                        this.FNPR = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.MarkerModel:
                        this.MarkerModel = (Exception?)obj;
                        break;
                    case Terminal_FieldIndex.MarkerParameters:
                        this.MarkerParameters = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (ODTY != null) return true;
                if (Transforms != null) return true;
                if (Components != null) return true;
                if (Menu != null) return true;
                if (Background != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Keywords != null) return true;
                if (Properties != null) return true;
                if (ForcedLocations != null) return true;
                if (PNAM != null) return true;
                if (FNAM != null) return true;
                if (JNAM != null) return true;
                if (MarkerFlags != null) return true;
                if (GNAM != null) return true;
                if (WorkbenchData != null) return true;
                if (FurnitureTemplate != null) return true;
                if (FNPR != null) return true;
                if (MarkerModel != null) return true;
                if (MarkerParameters != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(ODTY, "ODTY");
                }
                Transforms?.Print(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Menu, "Menu");
                }
                {
                    sb.AppendItem(Background, "Background");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                Model?.Print(sb);
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Properties is {} PropertiesItem)
                {
                    sb.AppendLine("Properties =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (ForcedLocations is {} ForcedLocationsItem)
                {
                    sb.AppendLine("ForcedLocations =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ForcedLocationsItem.Overall);
                        if (ForcedLocationsItem.Specific != null)
                        {
                            foreach (var subItem in ForcedLocationsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(PNAM, "PNAM");
                }
                {
                    sb.AppendItem(FNAM, "FNAM");
                }
                {
                    sb.AppendItem(JNAM, "JNAM");
                }
                {
                    sb.AppendItem(MarkerFlags, "MarkerFlags");
                }
                {
                    sb.AppendItem(GNAM, "GNAM");
                }
                {
                    sb.AppendItem(WorkbenchData, "WorkbenchData");
                }
                {
                    sb.AppendItem(FurnitureTemplate, "FurnitureTemplate");
                }
                {
                    sb.AppendItem(FNPR, "FNPR");
                }
                {
                    sb.AppendItem(MarkerModel, "MarkerModel");
                }
                if (MarkerParameters is {} MarkerParametersItem)
                {
                    sb.AppendLine("MarkerParameters =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MarkerParametersItem.Overall);
                        if (MarkerParametersItem.Specific != null)
                        {
                            foreach (var subItem in MarkerParametersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.ODTY = this.ODTY.Combine(rhs.ODTY);
                ret.Transforms = this.Transforms.Combine(rhs.Transforms, (l, r) => l.Combine(r));
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Menu = this.Menu.Combine(rhs.Menu);
                ret.Background = this.Background.Combine(rhs.Background);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), Noggog.ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                ret.ForcedLocations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ForcedLocations?.Overall, rhs.ForcedLocations?.Overall), Noggog.ExceptionExt.Combine(this.ForcedLocations?.Specific, rhs.ForcedLocations?.Specific));
                ret.PNAM = this.PNAM.Combine(rhs.PNAM);
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.JNAM = this.JNAM.Combine(rhs.JNAM);
                ret.MarkerFlags = this.MarkerFlags.Combine(rhs.MarkerFlags);
                ret.GNAM = this.GNAM.Combine(rhs.GNAM);
                ret.WorkbenchData = this.WorkbenchData.Combine(rhs.WorkbenchData);
                ret.FurnitureTemplate = this.FurnitureTemplate.Combine(rhs.FurnitureTemplate);
                ret.FNPR = this.FNPR.Combine(rhs.FNPR);
                ret.MarkerModel = this.MarkerModel.Combine(rhs.MarkerModel);
                ret.MarkerParameters = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FurnitureMarkerParameters.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MarkerParameters?.Overall, rhs.MarkerParameters?.Overall), Noggog.ExceptionExt.Combine(this.MarkerParameters?.Specific, rhs.MarkerParameters?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapterIndexed.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool ODTY;
            public Transforms.TranslationMask? Transforms;
            public AComponent.TranslationMask? Components;
            public bool Menu;
            public bool Background;
            public bool Name;
            public Model.TranslationMask? Model;
            public bool Keywords;
            public ObjectProperty.TranslationMask? Properties;
            public bool ForcedLocations;
            public bool PNAM;
            public bool FNAM;
            public bool JNAM;
            public bool MarkerFlags;
            public bool GNAM;
            public bool WorkbenchData;
            public bool FurnitureTemplate;
            public bool FNPR;
            public bool MarkerModel;
            public FurnitureMarkerParameters.TranslationMask? MarkerParameters;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ODTY = defaultOn;
                this.Menu = defaultOn;
                this.Background = defaultOn;
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.ForcedLocations = defaultOn;
                this.PNAM = defaultOn;
                this.FNAM = defaultOn;
                this.JNAM = defaultOn;
                this.MarkerFlags = defaultOn;
                this.GNAM = defaultOn;
                this.WorkbenchData = defaultOn;
                this.FurnitureTemplate = defaultOn;
                this.FNPR = defaultOn;
                this.MarkerModel = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((ODTY, null));
                ret.Add((Transforms != null ? Transforms.OnOverall : DefaultOn, Transforms?.GetCrystal()));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Menu, null));
                ret.Add((Background, null));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
                ret.Add((ForcedLocations, null));
                ret.Add((PNAM, null));
                ret.Add((FNAM, null));
                ret.Add((JNAM, null));
                ret.Add((MarkerFlags, null));
                ret.Add((GNAM, null));
                ret.Add((WorkbenchData, null));
                ret.Add((FurnitureTemplate, null));
                ret.Add((FNPR, null));
                ret.Add((MarkerModel, null));
                ret.Add((MarkerParameters == null ? DefaultOn : !MarkerParameters.GetCrystal().CopyNothing, MarkerParameters?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Terminal_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TerminalCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TerminalSetterCommon.Instance.RemapLinks(this, mapping);
        public Terminal(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Terminal(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Terminal(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Terminal(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Terminal(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Terminal>.ToString(this);
        }

        protected override Type LinkType => typeof(ITerminal);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => TerminalCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => TerminalSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => TerminalSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => TerminalSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITerminalGetter rhs) return false;
            return ((TerminalCommon)((ITerminalGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITerminalGetter? obj)
        {
            return ((TerminalCommon)((ITerminalGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TerminalCommon)((ITerminalGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TerminalBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TerminalBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Terminal CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Terminal();
            ((TerminalSetterCommon)((ITerminalGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Terminal item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TerminalSetterCommon)((ITerminalGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Terminal GetNew()
        {
            return new Terminal();
        }

    }
    #endregion

    #region Interface
    public partial interface ITerminal :
        IAssetLinkContainer,
        IBaseObject,
        IConstructibleObjectTarget,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<ITerminalInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IStarfieldMajorRecordInternal,
        IStaticTarget,
        ITerminalGetter,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        new VirtualMachineAdapterIndexed? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new Single? ODTY { get; set; }
        new Transforms? Transforms { get; set; }
        new ExtendedList<AComponent> Components { get; }
        new IFormLinkNullable<ITerminalMenuGetter> Menu { get; set; }
        new Terminal.BackgroundType? Background { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<ObjectProperty>? Properties { get; set; }
        new ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ForcedLocations { get; set; }
        new MemorySlice<Byte>? PNAM { get; set; }
        new MemorySlice<Byte>? FNAM { get; set; }
        new MemorySlice<Byte>? JNAM { get; set; }
        new FurnitureMarkerFlags? MarkerFlags { get; set; }
        new MemorySlice<Byte>? GNAM { get; set; }
        new MemorySlice<Byte>? WorkbenchData { get; set; }
        new IFormLinkNullable<IFurnitureGetter> FurnitureTemplate { get; set; }
        new MemorySlice<Byte>? FNPR { get; set; }
        new String? MarkerModel { get; set; }
        new ExtendedList<FurnitureMarkerParameters>? MarkerParameters { get; set; }
        #region Mutagen
        new Terminal.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ITerminalInternal :
        IStarfieldMajorRecordInternal,
        ITerminal,
        ITerminalGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.TERM)]
    public partial interface ITerminalGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IConstructibleObjectTargetGetter,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<ITerminalGetter>,
        IMapsToGetter<ITerminalGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IStaticTargetGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Terminal_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter
        /// </summary>
        IVirtualMachineAdapterIndexedGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        Single? ODTY { get; }
        ITransformsGetter? Transforms { get; }
        IReadOnlyList<IAComponentGetter> Components { get; }
        IFormLinkNullableGetter<ITerminalMenuGetter> Menu { get; }
        Terminal.BackgroundType? Background { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IReadOnlyList<IObjectPropertyGetter>? Properties { get; }
        IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ForcedLocations { get; }
        ReadOnlyMemorySlice<Byte>? PNAM { get; }
        ReadOnlyMemorySlice<Byte>? FNAM { get; }
        ReadOnlyMemorySlice<Byte>? JNAM { get; }
        FurnitureMarkerFlags? MarkerFlags { get; }
        ReadOnlyMemorySlice<Byte>? GNAM { get; }
        ReadOnlyMemorySlice<Byte>? WorkbenchData { get; }
        IFormLinkNullableGetter<IFurnitureGetter> FurnitureTemplate { get; }
        ReadOnlyMemorySlice<Byte>? FNPR { get; }
        String? MarkerModel { get; }
        IReadOnlyList<IFurnitureMarkerParametersGetter>? MarkerParameters { get; }

        #region Mutagen
        Terminal.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class TerminalMixIn
    {
        public static void Clear(this ITerminalInternal item)
        {
            ((TerminalSetterCommon)((ITerminalGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Terminal.Mask<bool> GetEqualsMask(
            this ITerminalGetter item,
            ITerminalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITerminalGetter item,
            string? name = null,
            Terminal.Mask<bool>? printMask = null)
        {
            return ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITerminalGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Terminal.Mask<bool>? printMask = null)
        {
            ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITerminalGetter item,
            ITerminalGetter rhs,
            Terminal.TranslationMask? equalsMask = null)
        {
            return ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITerminalInternal lhs,
            ITerminalGetter rhs,
            out Terminal.ErrorMask errorMask,
            Terminal.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TerminalSetterTranslationCommon)((ITerminalGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Terminal.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITerminalInternal lhs,
            ITerminalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TerminalSetterTranslationCommon)((ITerminalGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Terminal DeepCopy(
            this ITerminalGetter item,
            Terminal.TranslationMask? copyMask = null)
        {
            return ((TerminalSetterTranslationCommon)((ITerminalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Terminal DeepCopy(
            this ITerminalGetter item,
            out Terminal.ErrorMask errorMask,
            Terminal.TranslationMask? copyMask = null)
        {
            return ((TerminalSetterTranslationCommon)((ITerminalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Terminal DeepCopy(
            this ITerminalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TerminalSetterTranslationCommon)((ITerminalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Terminal Duplicate(
            this ITerminalGetter item,
            FormKey formKey,
            Terminal.TranslationMask? copyMask = null)
        {
            return ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Terminal Duplicate(
            this ITerminalGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITerminalInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TerminalSetterCommon)((ITerminalGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Terminal_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        ODTY = 9,
        Transforms = 10,
        Components = 11,
        Menu = 12,
        Background = 13,
        Name = 14,
        Model = 15,
        Keywords = 16,
        Properties = 17,
        ForcedLocations = 18,
        PNAM = 19,
        FNAM = 20,
        JNAM = 21,
        MarkerFlags = 22,
        GNAM = 23,
        WorkbenchData = 24,
        FurnitureTemplate = 25,
        FNPR = 26,
        MarkerModel = 27,
        MarkerParameters = 28,
    }
    #endregion

    #region Registration
    internal partial class Terminal_Registration : ILoquiRegistration
    {
        public static readonly Terminal_Registration Instance = new Terminal_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 22;

        public const ushort FieldCount = 29;

        public static readonly Type MaskType = typeof(Terminal.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Terminal.ErrorMask);

        public static readonly Type ClassType = typeof(Terminal);

        public static readonly Type GetterType = typeof(ITerminalGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITerminal);

        public static readonly Type? InternalSetterType = typeof(ITerminalInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Terminal";

        public const string Name = "Terminal";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TERM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var endTriggers = RecordCollection.Factory(RecordTypes.STOP);
            var triggers = RecordCollection.Factory(RecordTypes.TERM);
            var all = RecordCollection.Factory(
                RecordTypes.TERM,
                RecordTypes.STOP,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.PTT2,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.DNAM,
                RecordTypes.NAM1,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.DMDC,
                RecordTypes.BLMS,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.PRPS,
                RecordTypes.FTYP,
                RecordTypes.PNAM,
                RecordTypes.FNAM,
                RecordTypes.JNAM,
                RecordTypes.MNAM,
                RecordTypes.GNAM,
                RecordTypes.WBDT,
                RecordTypes.FTMP,
                RecordTypes.FNPR,
                RecordTypes.XMRK,
                RecordTypes.SNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers,
                endRecordTypes: endTriggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TerminalBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TerminalSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly TerminalSetterCommon Instance = new TerminalSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITerminalInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.ODTY = default;
            item.Transforms = null;
            item.Components.Clear();
            item.Menu.Clear();
            item.Background = default;
            item.Name = default;
            item.Model = null;
            item.Keywords = null;
            item.Properties = null;
            item.ForcedLocations = null;
            item.PNAM = default;
            item.FNAM = default;
            item.JNAM = default;
            item.MarkerFlags = default;
            item.GNAM = default;
            item.WorkbenchData = default;
            item.FurnitureTemplate.Clear();
            item.FNPR = default;
            item.MarkerModel = default;
            item.MarkerParameters = null;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ITerminalInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITerminalInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ITerminal obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Transforms?.RemapLinks(mapping);
            obj.Components.RemapLinks(mapping);
            obj.Menu.Relink(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Properties?.RemapLinks(mapping);
            obj.ForcedLocations?.RemapLinks(mapping);
            obj.FurnitureTemplate.Relink(mapping);
            obj.MarkerParameters?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ITerminal obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ITerminal obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITerminalInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ITerminalInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TerminalBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TerminalBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Terminal)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Terminal)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class TerminalCommon : StarfieldMajorRecordCommon
    {
        public new static readonly TerminalCommon Instance = new TerminalCommon();

        public Terminal.Mask<bool> GetEqualsMask(
            ITerminalGetter item,
            ITerminalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Terminal.Mask<bool>(false);
            ((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITerminalGetter item,
            ITerminalGetter rhs,
            Terminal.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.ODTY = item.ODTY.EqualsWithin(rhs.ODTY);
            ret.Transforms = EqualsMaskHelper.EqualsHelper(
                item.Transforms,
                rhs.Transforms,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Menu = item.Menu.Equals(rhs.Menu);
            ret.Background = item.Background == rhs.Background;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ForcedLocations = item.ForcedLocations.CollectionEqualsHelper(
                rhs.ForcedLocations,
                (l, r) => object.Equals(l, r),
                include);
            ret.PNAM = MemorySliceExt.SequenceEqual(item.PNAM, rhs.PNAM);
            ret.FNAM = MemorySliceExt.SequenceEqual(item.FNAM, rhs.FNAM);
            ret.JNAM = MemorySliceExt.SequenceEqual(item.JNAM, rhs.JNAM);
            ret.MarkerFlags = item.MarkerFlags == rhs.MarkerFlags;
            ret.GNAM = MemorySliceExt.SequenceEqual(item.GNAM, rhs.GNAM);
            ret.WorkbenchData = MemorySliceExt.SequenceEqual(item.WorkbenchData, rhs.WorkbenchData);
            ret.FurnitureTemplate = item.FurnitureTemplate.Equals(rhs.FurnitureTemplate);
            ret.FNPR = MemorySliceExt.SequenceEqual(item.FNPR, rhs.FNPR);
            ret.MarkerModel = string.Equals(item.MarkerModel, rhs.MarkerModel);
            ret.MarkerParameters = item.MarkerParameters.CollectionEqualsHelper(
                rhs.MarkerParameters,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ITerminalGetter item,
            string? name = null,
            Terminal.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITerminalGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Terminal.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Terminal =>");
            }
            else
            {
                sb.AppendLine($"{name} (Terminal) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITerminalGetter item,
            StructuredStringBuilder sb,
            Terminal.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.ODTY ?? true)
                && item.ODTY is {} ODTYItem)
            {
                sb.AppendItem(ODTYItem, "ODTY");
            }
            if ((printMask?.Transforms?.Overall ?? true)
                && item.Transforms is {} TransformsItem)
            {
                TransformsItem?.Print(sb, "Transforms");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Menu ?? true)
            {
                sb.AppendItem(item.Menu.FormKeyNullable, "Menu");
            }
            if ((printMask?.Background ?? true)
                && item.Background is {} BackgroundItem)
            {
                sb.AppendItem(BackgroundItem, "Background");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Properties?.Overall ?? true)
                && item.Properties is {} PropertiesItem)
            {
                sb.AppendLine("Properties =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PropertiesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ForcedLocations?.Overall ?? true)
                && item.ForcedLocations is {} ForcedLocationsItem)
            {
                sb.AppendLine("ForcedLocations =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ForcedLocationsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.PNAM ?? true)
                && item.PNAM is {} PNAMItem)
            {
                sb.AppendLine($"PNAM => {SpanExt.ToHexString(PNAMItem)}");
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM is {} FNAMItem)
            {
                sb.AppendLine($"FNAM => {SpanExt.ToHexString(FNAMItem)}");
            }
            if ((printMask?.JNAM ?? true)
                && item.JNAM is {} JNAMItem)
            {
                sb.AppendLine($"JNAM => {SpanExt.ToHexString(JNAMItem)}");
            }
            if ((printMask?.MarkerFlags ?? true)
                && item.MarkerFlags is {} MarkerFlagsItem)
            {
                sb.AppendItem(MarkerFlagsItem, "MarkerFlags");
            }
            if ((printMask?.GNAM ?? true)
                && item.GNAM is {} GNAMItem)
            {
                sb.AppendLine($"GNAM => {SpanExt.ToHexString(GNAMItem)}");
            }
            if ((printMask?.WorkbenchData ?? true)
                && item.WorkbenchData is {} WorkbenchDataItem)
            {
                sb.AppendLine($"WorkbenchData => {SpanExt.ToHexString(WorkbenchDataItem)}");
            }
            if (printMask?.FurnitureTemplate ?? true)
            {
                sb.AppendItem(item.FurnitureTemplate.FormKeyNullable, "FurnitureTemplate");
            }
            if ((printMask?.FNPR ?? true)
                && item.FNPR is {} FNPRItem)
            {
                sb.AppendLine($"FNPR => {SpanExt.ToHexString(FNPRItem)}");
            }
            if ((printMask?.MarkerModel ?? true)
                && item.MarkerModel is {} MarkerModelItem)
            {
                sb.AppendItem(MarkerModelItem, "MarkerModel");
            }
            if ((printMask?.MarkerParameters?.Overall ?? true)
                && item.MarkerParameters is {} MarkerParametersItem)
            {
                sb.AppendLine("MarkerParameters =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MarkerParametersItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static Terminal_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Terminal_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Terminal_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Terminal_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Terminal_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Terminal_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Terminal_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Terminal_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Terminal_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Terminal_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Terminal_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Terminal_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Terminal_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITerminalGetter? lhs,
            ITerminalGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterIndexedCommon)((IVirtualMachineAdapterIndexedGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.ODTY) ?? true))
            {
                if (!lhs.ODTY.EqualsWithin(rhs.ODTY)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Transforms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Transforms, rhs.Transforms, out var lhsTransforms, out var rhsTransforms, out var isTransformsEqual))
                {
                    if (!((TransformsCommon)((ITransformsGetter)lhsTransforms).CommonInstance()!).Equals(lhsTransforms, rhsTransforms, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.Transforms))) return false;
                }
                else if (!isTransformsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Menu) ?? true))
            {
                if (!lhs.Menu.Equals(rhs.Menu)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Background) ?? true))
            {
                if (lhs.Background != rhs.Background) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqualNullable(rhs.Properties, (l, r) => ((ObjectPropertyCommon)((IObjectPropertyGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.Properties)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.ForcedLocations) ?? true))
            {
                if (!lhs.ForcedLocations.SequenceEqualNullable(rhs.ForcedLocations)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.PNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.PNAM, rhs.PNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.FNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FNAM, rhs.FNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.JNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.JNAM, rhs.JNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.MarkerFlags) ?? true))
            {
                if (lhs.MarkerFlags != rhs.MarkerFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.GNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.GNAM, rhs.GNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.WorkbenchData) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.WorkbenchData, rhs.WorkbenchData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.FurnitureTemplate) ?? true))
            {
                if (!lhs.FurnitureTemplate.Equals(rhs.FurnitureTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.FNPR) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FNPR, rhs.FNPR)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.MarkerModel) ?? true))
            {
                if (!string.Equals(lhs.MarkerModel, rhs.MarkerModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Terminal_FieldIndex.MarkerParameters) ?? true))
            {
                if (!lhs.MarkerParameters.SequenceEqualNullable(rhs.MarkerParameters, (l, r) => ((FurnitureMarkerParametersCommon)((IFurnitureMarkerParametersGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Terminal_FieldIndex.MarkerParameters)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITerminalGetter?)lhs,
                rhs: rhs as ITerminalGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITerminalGetter?)lhs,
                rhs: rhs as ITerminalGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ITerminalGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.ODTY is {} ODTYitem)
            {
                hash.Add(ODTYitem);
            }
            if (item.Transforms is {} Transformsitem)
            {
                hash.Add(Transformsitem);
            }
            hash.Add(item.Components);
            hash.Add(item.Menu);
            if (item.Background is {} Backgrounditem)
            {
                hash.Add(Backgrounditem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.Properties);
            hash.Add(item.ForcedLocations);
            if (item.PNAM is {} PNAMItem)
            {
                hash.Add(PNAMItem);
            }
            if (item.FNAM is {} FNAMItem)
            {
                hash.Add(FNAMItem);
            }
            if (item.JNAM is {} JNAMItem)
            {
                hash.Add(JNAMItem);
            }
            if (item.MarkerFlags is {} MarkerFlagsitem)
            {
                hash.Add(MarkerFlagsitem);
            }
            if (item.GNAM is {} GNAMItem)
            {
                hash.Add(GNAMItem);
            }
            if (item.WorkbenchData is {} WorkbenchDataItem)
            {
                hash.Add(WorkbenchDataItem);
            }
            hash.Add(item.FurnitureTemplate);
            if (item.FNPR is {} FNPRItem)
            {
                hash.Add(FNPRItem);
            }
            if (item.MarkerModel is {} MarkerModelitem)
            {
                hash.Add(MarkerModelitem);
            }
            hash.Add(item.MarkerParameters);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ITerminalGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITerminalGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Terminal.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITerminalGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Transforms is {} TransformsItems)
            {
                foreach (var item in TransformsItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Menu, out var MenuInfo))
            {
                yield return MenuInfo;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Properties is {} PropertiesItem)
            {
                foreach (var item in PropertiesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ForcedLocations is {} ForcedLocationsItem)
            {
                foreach (var item in ForcedLocationsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.FurnitureTemplate, out var FurnitureTemplateInfo))
            {
                yield return FurnitureTemplateInfo;
            }
            if (obj.MarkerParameters is {} MarkerParametersItem)
            {
                foreach (var item in MarkerParametersItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ITerminalGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Terminal Duplicate(
            ITerminalGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Terminal(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITerminalGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITerminalGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class TerminalSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly TerminalSetterTranslationCommon Instance = new TerminalSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITerminalInternal item,
            ITerminalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ITerminal item,
            ITerminalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Terminal_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Terminal_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.ODTY) ?? true))
            {
                item.ODTY = rhs.ODTY;
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Transforms) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.Transforms);
                try
                {
                    if(rhs.Transforms is {} rhsTransforms)
                    {
                        item.Transforms = rhsTransforms.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Terminal_FieldIndex.Transforms));
                    }
                    else
                    {
                        item.Transforms = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Menu) ?? true))
            {
                item.Menu.SetTo(rhs.Menu.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Background) ?? true))
            {
                item.Background = rhs.Background;
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Terminal_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.Properties);
                try
                {
                    if ((rhs.Properties != null))
                    {
                        item.Properties = 
                            rhs.Properties
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectProperty>();
                    }
                    else
                    {
                        item.Properties = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.ForcedLocations) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.ForcedLocations);
                try
                {
                    if ((rhs.ForcedLocations != null))
                    {
                        item.ForcedLocations = 
                            rhs.ForcedLocations
                                .Select(b => (IFormLinkGetter<ILocationReferenceTypeGetter>)new FormLink<ILocationReferenceTypeGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>();
                    }
                    else
                    {
                        item.ForcedLocations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.PNAM) ?? true))
            {
                if(rhs.PNAM is {} PNAMrhs)
                {
                    item.PNAM = PNAMrhs.ToArray();
                }
                else
                {
                    item.PNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.FNAM) ?? true))
            {
                if(rhs.FNAM is {} FNAMrhs)
                {
                    item.FNAM = FNAMrhs.ToArray();
                }
                else
                {
                    item.FNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.JNAM) ?? true))
            {
                if(rhs.JNAM is {} JNAMrhs)
                {
                    item.JNAM = JNAMrhs.ToArray();
                }
                else
                {
                    item.JNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.MarkerFlags) ?? true))
            {
                item.MarkerFlags = rhs.MarkerFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.GNAM) ?? true))
            {
                if(rhs.GNAM is {} GNAMrhs)
                {
                    item.GNAM = GNAMrhs.ToArray();
                }
                else
                {
                    item.GNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.WorkbenchData) ?? true))
            {
                if(rhs.WorkbenchData is {} WorkbenchDatarhs)
                {
                    item.WorkbenchData = WorkbenchDatarhs.ToArray();
                }
                else
                {
                    item.WorkbenchData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.FurnitureTemplate) ?? true))
            {
                item.FurnitureTemplate.SetTo(rhs.FurnitureTemplate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.FNPR) ?? true))
            {
                if(rhs.FNPR is {} FNPRrhs)
                {
                    item.FNPR = FNPRrhs.ToArray();
                }
                else
                {
                    item.FNPR = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.MarkerModel) ?? true))
            {
                item.MarkerModel = rhs.MarkerModel;
            }
            if ((copyMask?.GetShouldTranslate((int)Terminal_FieldIndex.MarkerParameters) ?? true))
            {
                errorMask?.PushIndex((int)Terminal_FieldIndex.MarkerParameters);
                try
                {
                    if ((rhs.MarkerParameters != null))
                    {
                        item.MarkerParameters = 
                            rhs.MarkerParameters
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<FurnitureMarkerParameters>();
                    }
                    else
                    {
                        item.MarkerParameters = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITerminal item,
            ITerminalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITerminalInternal)item,
                rhs: (ITerminalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITerminal)item,
                rhs: (ITerminalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITerminalInternal)item,
                rhs: (ITerminalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITerminal)item,
                rhs: (ITerminalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Terminal DeepCopy(
            ITerminalGetter item,
            Terminal.TranslationMask? copyMask = null)
        {
            Terminal ret = (Terminal)((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).GetNew();
            ((TerminalSetterTranslationCommon)((ITerminalGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Terminal DeepCopy(
            ITerminalGetter item,
            out Terminal.ErrorMask errorMask,
            Terminal.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Terminal ret = (Terminal)((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).GetNew();
            ((TerminalSetterTranslationCommon)((ITerminalGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Terminal.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Terminal DeepCopy(
            ITerminalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Terminal ret = (Terminal)((TerminalCommon)((ITerminalGetter)item).CommonInstance()!).GetNew();
            ((TerminalSetterTranslationCommon)((ITerminalGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Terminal
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Terminal_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Terminal_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TerminalCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TerminalSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TerminalSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class TerminalBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly TerminalBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ITerminalGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterIndexedBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ODTY,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            if (item.Transforms is {} TransformsItem)
            {
                ((TransformsBinaryWriteTranslation)((IBinaryItem)TransformsItem).BinaryWriteTranslator).Write(
                    item: TransformsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Menu,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            EnumBinaryTranslation<Terminal.BackgroundType, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Background,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectPropertyGetter>.Instance.Write(
                writer: writer,
                items: item.Properties,
                recordType: translationParams.ConvertToCustom(RecordTypes.PRPS),
                transl: (MutagenWriter subWriter, IObjectPropertyGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ObjectPropertyBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILocationReferenceTypeGetter>>.Instance.Write(
                writer: writer,
                items: item.ForcedLocations,
                recordType: translationParams.ConvertToCustom(RecordTypes.FTYP),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ILocationReferenceTypeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PNAM,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FNAM,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.JNAM,
                header: translationParams.ConvertToCustom(RecordTypes.JNAM));
            EnumBinaryTranslation<FurnitureMarkerFlags, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.MarkerFlags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.GNAM,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WorkbenchData,
                header: translationParams.ConvertToCustom(RecordTypes.WBDT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FurnitureTemplate,
                header: translationParams.ConvertToCustom(RecordTypes.FTMP));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FNPR,
                header: translationParams.ConvertToCustom(RecordTypes.FNPR));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MarkerModel,
                header: translationParams.ConvertToCustom(RecordTypes.XMRK),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFurnitureMarkerParametersGetter>.Instance.Write(
                writer: writer,
                items: item.MarkerParameters,
                recordType: translationParams.ConvertToCustom(RecordTypes.SNAM),
                transl: (MutagenWriter subWriter, IFurnitureMarkerParametersGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((FurnitureMarkerParametersBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ITerminalGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.TERM,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes,
                endMarker: RecordTypes.STOP);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITerminalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITerminalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITerminalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TerminalBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly TerminalBinaryCreateTranslation Instance = new TerminalBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.TERM;
        public static ParseResult FillBinaryRecordTypes(
            ITerminalInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Starfield.VirtualMachineAdapterIndexed.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Terminal_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Terminal_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ODTY = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Terminal_FieldIndex.ODTY;
                }
                case RecordTypeInts.PTT2:
                {
                    item.Transforms = Mutagen.Bethesda.Starfield.Transforms.CreateFromBinary(frame: frame);
                    return (int)Terminal_FieldIndex.Transforms;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Terminal_FieldIndex.Components;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Menu.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Terminal_FieldIndex.Menu;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Background = EnumBinaryTranslation<Terminal.BackgroundType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Terminal_FieldIndex.Background;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Terminal_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Terminal_FieldIndex.Model;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Terminal_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Properties = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectProperty>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ObjectProperty.TryCreateFromBinary)
                        .CastExtendedList<ObjectProperty>();
                    return (int)Terminal_FieldIndex.Properties;
                }
                case RecordTypeInts.FTYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ForcedLocations = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILocationReferenceTypeGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>();
                    return (int)Terminal_FieldIndex.ForcedLocations;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Terminal_FieldIndex.PNAM;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Terminal_FieldIndex.FNAM;
                }
                case RecordTypeInts.JNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.JNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Terminal_FieldIndex.JNAM;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MarkerFlags = EnumBinaryTranslation<FurnitureMarkerFlags, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Terminal_FieldIndex.MarkerFlags;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Terminal_FieldIndex.GNAM;
                }
                case RecordTypeInts.WBDT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WorkbenchData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Terminal_FieldIndex.WorkbenchData;
                }
                case RecordTypeInts.FTMP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FurnitureTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Terminal_FieldIndex.FurnitureTemplate;
                }
                case RecordTypeInts.FNPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNPR = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Terminal_FieldIndex.FNPR;
                }
                case RecordTypeInts.XMRK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MarkerModel = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Terminal_FieldIndex.MarkerModel;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MarkerParameters = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<FurnitureMarkerParameters>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FurnitureMarkerParameters.TryCreateFromBinary)
                        .CastExtendedList<FurnitureMarkerParameters>();
                    return (int)Terminal_FieldIndex.MarkerParameters;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                case RecordTypeInts.STOP: // End Marker
                {
                    frame.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class TerminalBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class TerminalBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ITerminalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Terminal_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Terminal_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TerminalCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TerminalSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TerminalCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => TerminalCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TerminalBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TerminalBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ITerminal);

        public Terminal.MajorFlag MajorFlags => (Terminal.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterIndexedGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterIndexedBinaryOverlay.VirtualMachineAdapterIndexedFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region ODTY
        private int? _ODTYLocation;
        public Single? ODTY => _ODTYLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ODTYLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Transforms
        private RangeInt32? _TransformsLocation;
        public ITransformsGetter? Transforms => _TransformsLocation.HasValue ? TransformsBinaryOverlay.TransformsFactory(_recordData.Slice(_TransformsLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Menu
        private int? _MenuLocation;
        public IFormLinkNullableGetter<ITerminalMenuGetter> Menu => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITerminalMenuGetter>(_package, _recordData, _MenuLocation);
        #endregion
        #region Background
        private int? _BackgroundLocation;
        public Terminal.BackgroundType? Background => _BackgroundLocation.HasValue ? (Terminal.BackgroundType)HeaderTranslation.ExtractSubrecordMemory(_recordData, _BackgroundLocation!.Value, _package.MetaData.Constants)[0] : default(Terminal.BackgroundType?);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IObjectPropertyGetter>? Properties { get; private set; }
        public IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ForcedLocations { get; private set; }
        #region PNAM
        private int? _PNAMLocation;
        public ReadOnlyMemorySlice<Byte>? PNAM => _PNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _PNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FNAM
        private int? _FNAMLocation;
        public ReadOnlyMemorySlice<Byte>? FNAM => _FNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region JNAM
        private int? _JNAMLocation;
        public ReadOnlyMemorySlice<Byte>? JNAM => _JNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _JNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region MarkerFlags
        private int? _MarkerFlagsLocation;
        public FurnitureMarkerFlags? MarkerFlags => _MarkerFlagsLocation.HasValue ? (FurnitureMarkerFlags)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MarkerFlagsLocation!.Value, _package.MetaData.Constants)) : default(FurnitureMarkerFlags?);
        #endregion
        #region GNAM
        private int? _GNAMLocation;
        public ReadOnlyMemorySlice<Byte>? GNAM => _GNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _GNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region WorkbenchData
        private int? _WorkbenchDataLocation;
        public ReadOnlyMemorySlice<Byte>? WorkbenchData => _WorkbenchDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WorkbenchDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FurnitureTemplate
        private int? _FurnitureTemplateLocation;
        public IFormLinkNullableGetter<IFurnitureGetter> FurnitureTemplate => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFurnitureGetter>(_package, _recordData, _FurnitureTemplateLocation);
        #endregion
        #region FNPR
        private int? _FNPRLocation;
        public ReadOnlyMemorySlice<Byte>? FNPR => _FNPRLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FNPRLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region MarkerModel
        private int? _MarkerModelLocation;
        public String? MarkerModel => _MarkerModelLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MarkerModelLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<IFurnitureMarkerParametersGetter>? MarkerParameters { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TerminalBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITerminalGetter TerminalFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TerminalBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ITerminalGetter TerminalFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TerminalFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Terminal_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Terminal_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _ODTYLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.ODTY;
                }
                case RecordTypeInts.PTT2:
                {
                    _TransformsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Terminal_FieldIndex.Transforms;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Terminal_FieldIndex.Components;
                }
                case RecordTypeInts.DNAM:
                {
                    _MenuLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.Menu;
                }
                case RecordTypeInts.NAM1:
                {
                    _BackgroundLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.Background;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Terminal_FieldIndex.Model;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Terminal_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRPS:
                {
                    this.Properties = BinaryOverlayList.FactoryByStartIndexWithTrigger<IObjectPropertyGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => ObjectPropertyBinaryOverlay.ObjectPropertyFactory(s, p));
                    return (int)Terminal_FieldIndex.Properties;
                }
                case RecordTypeInts.FTYP:
                {
                    this.ForcedLocations = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<ILocationReferenceTypeGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ILocationReferenceTypeGetter>(p, s));
                    return (int)Terminal_FieldIndex.ForcedLocations;
                }
                case RecordTypeInts.PNAM:
                {
                    _PNAMLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.PNAM;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.FNAM;
                }
                case RecordTypeInts.JNAM:
                {
                    _JNAMLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.JNAM;
                }
                case RecordTypeInts.MNAM:
                {
                    _MarkerFlagsLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.MarkerFlags;
                }
                case RecordTypeInts.GNAM:
                {
                    _GNAMLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.GNAM;
                }
                case RecordTypeInts.WBDT:
                {
                    _WorkbenchDataLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.WorkbenchData;
                }
                case RecordTypeInts.FTMP:
                {
                    _FurnitureTemplateLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.FurnitureTemplate;
                }
                case RecordTypeInts.FNPR:
                {
                    _FNPRLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.FNPR;
                }
                case RecordTypeInts.XMRK:
                {
                    _MarkerModelLocation = (stream.Position - offset);
                    return (int)Terminal_FieldIndex.MarkerModel;
                }
                case RecordTypeInts.SNAM:
                {
                    this.MarkerParameters = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFurnitureMarkerParametersGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 28,
                        getter: (s, p) => FurnitureMarkerParametersBinaryOverlay.FurnitureMarkerParametersFactory(s, p));
                    return (int)Terminal_FieldIndex.MarkerParameters;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                case RecordTypeInts.STOP: // End Marker
                {
                    stream.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TerminalMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Terminal>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITerminalGetter rhs) return false;
            return ((TerminalCommon)((ITerminalGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITerminalGetter? obj)
        {
            return ((TerminalCommon)((ITerminalGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TerminalCommon)((ITerminalGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

