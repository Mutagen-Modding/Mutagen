/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class PlanetContentManagerBranchNode :
        StarfieldMajorRecord,
        IEquatable<IPlanetContentManagerBranchNodeGetter>,
        ILoquiObjectSetter<PlanetContentManagerBranchNode>,
        IPlanetContentManagerBranchNodeInternal
    {
        #region Ctor
        protected PlanetContentManagerBranchNode()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IPlanetContentManagerBranchNodeGetter.Components => _Components;
        #endregion

        #endregion
        #region NodeType
        public PlanetContentManagerBranchNode.NodeTypeOption? NodeType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        PlanetContentManagerBranchNode.NodeTypeOption? IPlanetContentManagerBranchNodeGetter.NodeType => this.NodeType;
        #endregion
        #region ChildSelection
        public Int32 ChildSelection { get; set; } = default(Int32);
        #endregion
        #region CountCurve
        private readonly IFormLinkNullable<ICurveTableGetter> _CountCurve = new FormLinkNullable<ICurveTableGetter>();
        public IFormLinkNullable<ICurveTableGetter> CountCurve
        {
            get => _CountCurve;
            set => _CountCurve.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICurveTableGetter> IPlanetContentManagerBranchNodeGetter.CountCurve => this.CountCurve;
        #endregion
        #region DistributionCurve
        private readonly IFormLinkNullable<ICurveTableGetter> _DistributionCurve = new FormLinkNullable<ICurveTableGetter>();
        public IFormLinkNullable<ICurveTableGetter> DistributionCurve
        {
            get => _DistributionCurve;
            set => _DistributionCurve.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICurveTableGetter> IPlanetContentManagerBranchNodeGetter.DistributionCurve => this.DistributionCurve;
        #endregion
        #region ConsumeRequestEvenOnFailure
        public Boolean? ConsumeRequestEvenOnFailure { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Boolean? IPlanetContentManagerBranchNodeGetter.ConsumeRequestEvenOnFailure => this.ConsumeRequestEvenOnFailure;
        #endregion
        #region Nodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPlanetNodeGetter>> _Nodes = new ExtendedList<IFormLinkGetter<IPlanetNodeGetter>>();
        public ExtendedList<IFormLinkGetter<IPlanetNodeGetter>> Nodes
        {
            get => this._Nodes;
            init => this._Nodes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPlanetNodeGetter>> IPlanetContentManagerBranchNodeGetter.Nodes => _Nodes;
        #endregion

        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition>? _Conditions;
        public ExtendedList<Condition>? Conditions
        {
            get => this._Conditions;
            set => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter>? IPlanetContentManagerBranchNodeGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IPlanetContentManagerBranchNodeGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region ParentNode
        private readonly IFormLinkNullable<IPlanetParentNodeGetter> _ParentNode = new FormLinkNullable<IPlanetParentNodeGetter>();
        public IFormLinkNullable<IPlanetParentNodeGetter> ParentNode
        {
            get => _ParentNode;
            set => _ParentNode.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlanetParentNodeGetter> IPlanetContentManagerBranchNodeGetter.ParentNode => this.ParentNode;
        #endregion
        #region PreviousNode
        private readonly IFormLinkNullable<IPlanetContentManagerBranchNodeGetter> _PreviousNode = new FormLinkNullable<IPlanetContentManagerBranchNodeGetter>();
        public IFormLinkNullable<IPlanetContentManagerBranchNodeGetter> PreviousNode
        {
            get => _PreviousNode;
            set => _PreviousNode.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlanetContentManagerBranchNodeGetter> IPlanetContentManagerBranchNodeGetter.PreviousNode => this.PreviousNode;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetContentManagerBranchNodeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.NodeType = initialValue;
                this.ChildSelection = initialValue;
                this.CountCurve = initialValue;
                this.DistributionCurve = initialValue;
                this.ConsumeRequestEvenOnFailure = initialValue;
                this.Nodes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ParentNode = initialValue;
                this.PreviousNode = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem NodeType,
                TItem ChildSelection,
                TItem CountCurve,
                TItem DistributionCurve,
                TItem ConsumeRequestEvenOnFailure,
                TItem Nodes,
                TItem Conditions,
                TItem Keywords,
                TItem ParentNode,
                TItem PreviousNode)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.NodeType = NodeType;
                this.ChildSelection = ChildSelection;
                this.CountCurve = CountCurve;
                this.DistributionCurve = DistributionCurve;
                this.ConsumeRequestEvenOnFailure = ConsumeRequestEvenOnFailure;
                this.Nodes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Nodes, Enumerable.Empty<(int Index, TItem Value)>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.ParentNode = ParentNode;
                this.PreviousNode = PreviousNode;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem NodeType;
            public TItem ChildSelection;
            public TItem CountCurve;
            public TItem DistributionCurve;
            public TItem ConsumeRequestEvenOnFailure;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Nodes;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem ParentNode;
            public TItem PreviousNode;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.NodeType, rhs.NodeType)) return false;
                if (!object.Equals(this.ChildSelection, rhs.ChildSelection)) return false;
                if (!object.Equals(this.CountCurve, rhs.CountCurve)) return false;
                if (!object.Equals(this.DistributionCurve, rhs.DistributionCurve)) return false;
                if (!object.Equals(this.ConsumeRequestEvenOnFailure, rhs.ConsumeRequestEvenOnFailure)) return false;
                if (!object.Equals(this.Nodes, rhs.Nodes)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.ParentNode, rhs.ParentNode)) return false;
                if (!object.Equals(this.PreviousNode, rhs.PreviousNode)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.NodeType);
                hash.Add(this.ChildSelection);
                hash.Add(this.CountCurve);
                hash.Add(this.DistributionCurve);
                hash.Add(this.ConsumeRequestEvenOnFailure);
                hash.Add(this.Nodes);
                hash.Add(this.Conditions);
                hash.Add(this.Keywords);
                hash.Add(this.ParentNode);
                hash.Add(this.PreviousNode);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.NodeType)) return false;
                if (!eval(this.ChildSelection)) return false;
                if (!eval(this.CountCurve)) return false;
                if (!eval(this.DistributionCurve)) return false;
                if (!eval(this.ConsumeRequestEvenOnFailure)) return false;
                if (this.Nodes != null)
                {
                    if (!eval(this.Nodes.Overall)) return false;
                    if (this.Nodes.Specific != null)
                    {
                        foreach (var item in this.Nodes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ParentNode)) return false;
                if (!eval(this.PreviousNode)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.NodeType)) return true;
                if (eval(this.ChildSelection)) return true;
                if (eval(this.CountCurve)) return true;
                if (eval(this.DistributionCurve)) return true;
                if (eval(this.ConsumeRequestEvenOnFailure)) return true;
                if (this.Nodes != null)
                {
                    if (eval(this.Nodes.Overall)) return true;
                    if (this.Nodes.Specific != null)
                    {
                        foreach (var item in this.Nodes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ParentNode)) return true;
                if (eval(this.PreviousNode)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlanetContentManagerBranchNode.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.NodeType = eval(this.NodeType);
                obj.ChildSelection = eval(this.ChildSelection);
                obj.CountCurve = eval(this.CountCurve);
                obj.DistributionCurve = eval(this.DistributionCurve);
                obj.ConsumeRequestEvenOnFailure = eval(this.ConsumeRequestEvenOnFailure);
                if (Nodes != null)
                {
                    obj.Nodes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Nodes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Nodes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Nodes.Specific = l;
                        foreach (var item in Nodes.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ParentNode = eval(this.ParentNode);
                obj.PreviousNode = eval(this.PreviousNode);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlanetContentManagerBranchNode.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlanetContentManagerBranchNode.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlanetContentManagerBranchNode.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.NodeType ?? true)
                    {
                        sb.AppendItem(NodeType, "NodeType");
                    }
                    if (printMask?.ChildSelection ?? true)
                    {
                        sb.AppendItem(ChildSelection, "ChildSelection");
                    }
                    if (printMask?.CountCurve ?? true)
                    {
                        sb.AppendItem(CountCurve, "CountCurve");
                    }
                    if (printMask?.DistributionCurve ?? true)
                    {
                        sb.AppendItem(DistributionCurve, "DistributionCurve");
                    }
                    if (printMask?.ConsumeRequestEvenOnFailure ?? true)
                    {
                        sb.AppendItem(ConsumeRequestEvenOnFailure, "ConsumeRequestEvenOnFailure");
                    }
                    if ((printMask?.Nodes?.Overall ?? true)
                        && Nodes is {} NodesItem)
                    {
                        sb.AppendLine("Nodes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(NodesItem.Overall);
                            if (NodesItem.Specific != null)
                            {
                                foreach (var subItem in NodesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ParentNode ?? true)
                    {
                        sb.AppendItem(ParentNode, "ParentNode");
                    }
                    if (printMask?.PreviousNode ?? true)
                    {
                        sb.AppendItem(PreviousNode, "PreviousNode");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? NodeType;
            public Exception? ChildSelection;
            public Exception? CountCurve;
            public Exception? DistributionCurve;
            public Exception? ConsumeRequestEvenOnFailure;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Nodes;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? ParentNode;
            public Exception? PreviousNode;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlanetContentManagerBranchNode_FieldIndex enu = (PlanetContentManagerBranchNode_FieldIndex)index;
                switch (enu)
                {
                    case PlanetContentManagerBranchNode_FieldIndex.Components:
                        return Components;
                    case PlanetContentManagerBranchNode_FieldIndex.NodeType:
                        return NodeType;
                    case PlanetContentManagerBranchNode_FieldIndex.ChildSelection:
                        return ChildSelection;
                    case PlanetContentManagerBranchNode_FieldIndex.CountCurve:
                        return CountCurve;
                    case PlanetContentManagerBranchNode_FieldIndex.DistributionCurve:
                        return DistributionCurve;
                    case PlanetContentManagerBranchNode_FieldIndex.ConsumeRequestEvenOnFailure:
                        return ConsumeRequestEvenOnFailure;
                    case PlanetContentManagerBranchNode_FieldIndex.Nodes:
                        return Nodes;
                    case PlanetContentManagerBranchNode_FieldIndex.Conditions:
                        return Conditions;
                    case PlanetContentManagerBranchNode_FieldIndex.Keywords:
                        return Keywords;
                    case PlanetContentManagerBranchNode_FieldIndex.ParentNode:
                        return ParentNode;
                    case PlanetContentManagerBranchNode_FieldIndex.PreviousNode:
                        return PreviousNode;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlanetContentManagerBranchNode_FieldIndex enu = (PlanetContentManagerBranchNode_FieldIndex)index;
                switch (enu)
                {
                    case PlanetContentManagerBranchNode_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.NodeType:
                        this.NodeType = ex;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.ChildSelection:
                        this.ChildSelection = ex;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.CountCurve:
                        this.CountCurve = ex;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.DistributionCurve:
                        this.DistributionCurve = ex;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.ConsumeRequestEvenOnFailure:
                        this.ConsumeRequestEvenOnFailure = ex;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.Nodes:
                        this.Nodes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.ParentNode:
                        this.ParentNode = ex;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.PreviousNode:
                        this.PreviousNode = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlanetContentManagerBranchNode_FieldIndex enu = (PlanetContentManagerBranchNode_FieldIndex)index;
                switch (enu)
                {
                    case PlanetContentManagerBranchNode_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.NodeType:
                        this.NodeType = (Exception?)obj;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.ChildSelection:
                        this.ChildSelection = (Exception?)obj;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.CountCurve:
                        this.CountCurve = (Exception?)obj;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.DistributionCurve:
                        this.DistributionCurve = (Exception?)obj;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.ConsumeRequestEvenOnFailure:
                        this.ConsumeRequestEvenOnFailure = (Exception?)obj;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.Nodes:
                        this.Nodes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.ParentNode:
                        this.ParentNode = (Exception?)obj;
                        break;
                    case PlanetContentManagerBranchNode_FieldIndex.PreviousNode:
                        this.PreviousNode = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (NodeType != null) return true;
                if (ChildSelection != null) return true;
                if (CountCurve != null) return true;
                if (DistributionCurve != null) return true;
                if (ConsumeRequestEvenOnFailure != null) return true;
                if (Nodes != null) return true;
                if (Conditions != null) return true;
                if (Keywords != null) return true;
                if (ParentNode != null) return true;
                if (PreviousNode != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(NodeType, "NodeType");
                }
                {
                    sb.AppendItem(ChildSelection, "ChildSelection");
                }
                {
                    sb.AppendItem(CountCurve, "CountCurve");
                }
                {
                    sb.AppendItem(DistributionCurve, "DistributionCurve");
                }
                {
                    sb.AppendItem(ConsumeRequestEvenOnFailure, "ConsumeRequestEvenOnFailure");
                }
                if (Nodes is {} NodesItem)
                {
                    sb.AppendLine("Nodes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(NodesItem.Overall);
                        if (NodesItem.Specific != null)
                        {
                            foreach (var subItem in NodesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ParentNode, "ParentNode");
                }
                {
                    sb.AppendItem(PreviousNode, "PreviousNode");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.NodeType = this.NodeType.Combine(rhs.NodeType);
                ret.ChildSelection = this.ChildSelection.Combine(rhs.ChildSelection);
                ret.CountCurve = this.CountCurve.Combine(rhs.CountCurve);
                ret.DistributionCurve = this.DistributionCurve.Combine(rhs.DistributionCurve);
                ret.ConsumeRequestEvenOnFailure = this.ConsumeRequestEvenOnFailure.Combine(rhs.ConsumeRequestEvenOnFailure);
                ret.Nodes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Nodes?.Overall, rhs.Nodes?.Overall), Noggog.ExceptionExt.Combine(this.Nodes?.Specific, rhs.Nodes?.Specific));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.ParentNode = this.ParentNode.Combine(rhs.ParentNode);
                ret.PreviousNode = this.PreviousNode.Combine(rhs.PreviousNode);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool NodeType;
            public bool ChildSelection;
            public bool CountCurve;
            public bool DistributionCurve;
            public bool ConsumeRequestEvenOnFailure;
            public bool Nodes;
            public Condition.TranslationMask? Conditions;
            public bool Keywords;
            public bool ParentNode;
            public bool PreviousNode;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.NodeType = defaultOn;
                this.ChildSelection = defaultOn;
                this.CountCurve = defaultOn;
                this.DistributionCurve = defaultOn;
                this.ConsumeRequestEvenOnFailure = defaultOn;
                this.Nodes = defaultOn;
                this.Keywords = defaultOn;
                this.ParentNode = defaultOn;
                this.PreviousNode = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((NodeType, null));
                ret.Add((ChildSelection, null));
                ret.Add((CountCurve, null));
                ret.Add((DistributionCurve, null));
                ret.Add((ConsumeRequestEvenOnFailure, null));
                ret.Add((Nodes, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((ParentNode, null));
                ret.Add((PreviousNode, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PlanetContentManagerBranchNode_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlanetContentManagerBranchNodeCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlanetContentManagerBranchNodeSetterCommon.Instance.RemapLinks(this, mapping);
        public PlanetContentManagerBranchNode(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private PlanetContentManagerBranchNode(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal PlanetContentManagerBranchNode(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public PlanetContentManagerBranchNode(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public PlanetContentManagerBranchNode(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<PlanetContentManagerBranchNode>.ToString(this);
        }

        protected override Type LinkType => typeof(IPlanetContentManagerBranchNode);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => PlanetContentManagerBranchNodeCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => PlanetContentManagerBranchNodeSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => PlanetContentManagerBranchNodeSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => PlanetContentManagerBranchNodeSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlanetContentManagerBranchNodeGetter rhs) return false;
            return ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetContentManagerBranchNodeGetter? obj)
        {
            return ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlanetContentManagerBranchNodeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetContentManagerBranchNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PlanetContentManagerBranchNode CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlanetContentManagerBranchNode();
            ((PlanetContentManagerBranchNodeSetterCommon)((IPlanetContentManagerBranchNodeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlanetContentManagerBranchNode item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlanetContentManagerBranchNodeSetterCommon)((IPlanetContentManagerBranchNodeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlanetContentManagerBranchNode GetNew()
        {
            return new PlanetContentManagerBranchNode();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlanetContentManagerBranchNode :
        IAssetLinkContainer,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IPlanetContentManagerBranchNodeInternal>,
        IPlanetContentManagerBranchNodeGetter,
        IPlanetNode,
        IPlanetParentNode,
        IStarfieldMajorRecordInternal
    {
        new ExtendedList<AComponent> Components { get; }
        new PlanetContentManagerBranchNode.NodeTypeOption? NodeType { get; set; }
        new Int32 ChildSelection { get; set; }
        new IFormLinkNullable<ICurveTableGetter> CountCurve { get; set; }
        new IFormLinkNullable<ICurveTableGetter> DistributionCurve { get; set; }
        new Boolean? ConsumeRequestEvenOnFailure { get; set; }
        new ExtendedList<IFormLinkGetter<IPlanetNodeGetter>> Nodes { get; }
        new ExtendedList<Condition>? Conditions { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new IFormLinkNullable<IPlanetParentNodeGetter> ParentNode { get; set; }
        new IFormLinkNullable<IPlanetContentManagerBranchNodeGetter> PreviousNode { get; set; }
    }

    public partial interface IPlanetContentManagerBranchNodeInternal :
        IStarfieldMajorRecordInternal,
        IPlanetContentManagerBranchNode,
        IPlanetContentManagerBranchNodeGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.PCBN)]
    public partial interface IPlanetContentManagerBranchNodeGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IPlanetContentManagerBranchNodeGetter>,
        IMapsToGetter<IPlanetContentManagerBranchNodeGetter>,
        IPlanetNodeGetter,
        IPlanetParentNodeGetter
    {
        static new ILoquiRegistration StaticRegistration => PlanetContentManagerBranchNode_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        PlanetContentManagerBranchNode.NodeTypeOption? NodeType { get; }
        Int32 ChildSelection { get; }
        IFormLinkNullableGetter<ICurveTableGetter> CountCurve { get; }
        IFormLinkNullableGetter<ICurveTableGetter> DistributionCurve { get; }
        Boolean? ConsumeRequestEvenOnFailure { get; }
        IReadOnlyList<IFormLinkGetter<IPlanetNodeGetter>> Nodes { get; }
        IReadOnlyList<IConditionGetter>? Conditions { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IFormLinkNullableGetter<IPlanetParentNodeGetter> ParentNode { get; }
        IFormLinkNullableGetter<IPlanetContentManagerBranchNodeGetter> PreviousNode { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlanetContentManagerBranchNodeMixIn
    {
        public static void Clear(this IPlanetContentManagerBranchNodeInternal item)
        {
            ((PlanetContentManagerBranchNodeSetterCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlanetContentManagerBranchNode.Mask<bool> GetEqualsMask(
            this IPlanetContentManagerBranchNodeGetter item,
            IPlanetContentManagerBranchNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlanetContentManagerBranchNodeGetter item,
            string? name = null,
            PlanetContentManagerBranchNode.Mask<bool>? printMask = null)
        {
            return ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlanetContentManagerBranchNodeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlanetContentManagerBranchNode.Mask<bool>? printMask = null)
        {
            ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlanetContentManagerBranchNodeGetter item,
            IPlanetContentManagerBranchNodeGetter rhs,
            PlanetContentManagerBranchNode.TranslationMask? equalsMask = null)
        {
            return ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlanetContentManagerBranchNodeInternal lhs,
            IPlanetContentManagerBranchNodeGetter rhs,
            out PlanetContentManagerBranchNode.ErrorMask errorMask,
            PlanetContentManagerBranchNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlanetContentManagerBranchNodeSetterTranslationCommon)((IPlanetContentManagerBranchNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlanetContentManagerBranchNode.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlanetContentManagerBranchNodeInternal lhs,
            IPlanetContentManagerBranchNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlanetContentManagerBranchNodeSetterTranslationCommon)((IPlanetContentManagerBranchNodeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlanetContentManagerBranchNode DeepCopy(
            this IPlanetContentManagerBranchNodeGetter item,
            PlanetContentManagerBranchNode.TranslationMask? copyMask = null)
        {
            return ((PlanetContentManagerBranchNodeSetterTranslationCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlanetContentManagerBranchNode DeepCopy(
            this IPlanetContentManagerBranchNodeGetter item,
            out PlanetContentManagerBranchNode.ErrorMask errorMask,
            PlanetContentManagerBranchNode.TranslationMask? copyMask = null)
        {
            return ((PlanetContentManagerBranchNodeSetterTranslationCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlanetContentManagerBranchNode DeepCopy(
            this IPlanetContentManagerBranchNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlanetContentManagerBranchNodeSetterTranslationCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlanetContentManagerBranchNode Duplicate(
            this IPlanetContentManagerBranchNodeGetter item,
            FormKey formKey,
            PlanetContentManagerBranchNode.TranslationMask? copyMask = null)
        {
            return ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static PlanetContentManagerBranchNode Duplicate(
            this IPlanetContentManagerBranchNodeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlanetContentManagerBranchNodeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlanetContentManagerBranchNodeSetterCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum PlanetContentManagerBranchNode_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        NodeType = 8,
        ChildSelection = 9,
        CountCurve = 10,
        DistributionCurve = 11,
        ConsumeRequestEvenOnFailure = 12,
        Nodes = 13,
        Conditions = 14,
        Keywords = 15,
        ParentNode = 16,
        PreviousNode = 17,
    }
    #endregion

    #region Registration
    internal partial class PlanetContentManagerBranchNode_Registration : ILoquiRegistration
    {
        public static readonly PlanetContentManagerBranchNode_Registration Instance = new PlanetContentManagerBranchNode_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(PlanetContentManagerBranchNode.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlanetContentManagerBranchNode.ErrorMask);

        public static readonly Type ClassType = typeof(PlanetContentManagerBranchNode);

        public static readonly Type GetterType = typeof(IPlanetContentManagerBranchNodeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlanetContentManagerBranchNode);

        public static readonly Type? InternalSetterType = typeof(IPlanetContentManagerBranchNodeInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.PlanetContentManagerBranchNode";

        public const string Name = "PlanetContentManagerBranchNode";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PCBN;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.PCBN);
            var all = RecordCollection.Factory(
                RecordTypes.PCBN,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.NAM4,
                RecordTypes.NAM5,
                RecordTypes.PCCB,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.KWDA,
                RecordTypes.PRTN,
                RecordTypes.PRVN);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlanetContentManagerBranchNodeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlanetContentManagerBranchNodeSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly PlanetContentManagerBranchNodeSetterCommon Instance = new PlanetContentManagerBranchNodeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlanetContentManagerBranchNodeInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.NodeType = default;
            item.ChildSelection = default(Int32);
            item.CountCurve.Clear();
            item.DistributionCurve.Clear();
            item.ConsumeRequestEvenOnFailure = default;
            item.Nodes.Clear();
            item.Conditions = null;
            item.Keywords = null;
            item.ParentNode.Clear();
            item.PreviousNode.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IPlanetContentManagerBranchNodeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlanetContentManagerBranchNodeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlanetContentManagerBranchNode obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.CountCurve.Relink(mapping);
            obj.DistributionCurve.Relink(mapping);
            obj.Nodes.RemapLinks(mapping);
            obj.Conditions?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.ParentNode.Relink(mapping);
            obj.PreviousNode.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IPlanetContentManagerBranchNode obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IPlanetContentManagerBranchNode obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlanetContentManagerBranchNodeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IPlanetContentManagerBranchNodeInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlanetContentManagerBranchNodeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlanetContentManagerBranchNodeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlanetContentManagerBranchNode)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlanetContentManagerBranchNode)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlanetContentManagerBranchNodeCommon : StarfieldMajorRecordCommon
    {
        public new static readonly PlanetContentManagerBranchNodeCommon Instance = new PlanetContentManagerBranchNodeCommon();

        public PlanetContentManagerBranchNode.Mask<bool> GetEqualsMask(
            IPlanetContentManagerBranchNodeGetter item,
            IPlanetContentManagerBranchNodeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlanetContentManagerBranchNode.Mask<bool>(false);
            ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlanetContentManagerBranchNodeGetter item,
            IPlanetContentManagerBranchNodeGetter rhs,
            PlanetContentManagerBranchNode.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.NodeType = item.NodeType == rhs.NodeType;
            ret.ChildSelection = item.ChildSelection == rhs.ChildSelection;
            ret.CountCurve = item.CountCurve.Equals(rhs.CountCurve);
            ret.DistributionCurve = item.DistributionCurve.Equals(rhs.DistributionCurve);
            ret.ConsumeRequestEvenOnFailure = item.ConsumeRequestEvenOnFailure == rhs.ConsumeRequestEvenOnFailure;
            ret.Nodes = item.Nodes.CollectionEqualsHelper(
                rhs.Nodes,
                (l, r) => object.Equals(l, r),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.ParentNode = item.ParentNode.Equals(rhs.ParentNode);
            ret.PreviousNode = item.PreviousNode.Equals(rhs.PreviousNode);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IPlanetContentManagerBranchNodeGetter item,
            string? name = null,
            PlanetContentManagerBranchNode.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlanetContentManagerBranchNodeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlanetContentManagerBranchNode.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlanetContentManagerBranchNode =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlanetContentManagerBranchNode) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlanetContentManagerBranchNodeGetter item,
            StructuredStringBuilder sb,
            PlanetContentManagerBranchNode.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.NodeType ?? true)
                && item.NodeType is {} NodeTypeItem)
            {
                sb.AppendItem(NodeTypeItem, "NodeType");
            }
            if (printMask?.ChildSelection ?? true)
            {
                sb.AppendItem(item.ChildSelection, "ChildSelection");
            }
            if (printMask?.CountCurve ?? true)
            {
                sb.AppendItem(item.CountCurve.FormKeyNullable, "CountCurve");
            }
            if (printMask?.DistributionCurve ?? true)
            {
                sb.AppendItem(item.DistributionCurve.FormKeyNullable, "DistributionCurve");
            }
            if ((printMask?.ConsumeRequestEvenOnFailure ?? true)
                && item.ConsumeRequestEvenOnFailure is {} ConsumeRequestEvenOnFailureItem)
            {
                sb.AppendItem(ConsumeRequestEvenOnFailureItem, "ConsumeRequestEvenOnFailure");
            }
            if (printMask?.Nodes?.Overall ?? true)
            {
                sb.AppendLine("Nodes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Nodes)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Conditions?.Overall ?? true)
                && item.Conditions is {} ConditionsItem)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ConditionsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.ParentNode ?? true)
            {
                sb.AppendItem(item.ParentNode.FormKeyNullable, "ParentNode");
            }
            if (printMask?.PreviousNode ?? true)
            {
                sb.AppendItem(item.PreviousNode.FormKeyNullable, "PreviousNode");
            }
        }
        
        public static PlanetContentManagerBranchNode_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlanetContentManagerBranchNode_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (PlanetContentManagerBranchNode_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (PlanetContentManagerBranchNode_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (PlanetContentManagerBranchNode_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (PlanetContentManagerBranchNode_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (PlanetContentManagerBranchNode_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (PlanetContentManagerBranchNode_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new PlanetContentManagerBranchNode_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlanetContentManagerBranchNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlanetContentManagerBranchNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlanetContentManagerBranchNode_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlanetContentManagerBranchNode_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlanetContentManagerBranchNodeGetter? lhs,
            IPlanetContentManagerBranchNodeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PlanetContentManagerBranchNode_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.NodeType) ?? true))
            {
                if (lhs.NodeType != rhs.NodeType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.ChildSelection) ?? true))
            {
                if (lhs.ChildSelection != rhs.ChildSelection) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.CountCurve) ?? true))
            {
                if (!lhs.CountCurve.Equals(rhs.CountCurve)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.DistributionCurve) ?? true))
            {
                if (!lhs.DistributionCurve.Equals(rhs.DistributionCurve)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.ConsumeRequestEvenOnFailure) ?? true))
            {
                if (lhs.ConsumeRequestEvenOnFailure != rhs.ConsumeRequestEvenOnFailure) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.Nodes) ?? true))
            {
                if (!lhs.Nodes.SequenceEqualNullable(rhs.Nodes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqualNullable(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PlanetContentManagerBranchNode_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.ParentNode) ?? true))
            {
                if (!lhs.ParentNode.Equals(rhs.ParentNode)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.PreviousNode) ?? true))
            {
                if (!lhs.PreviousNode.Equals(rhs.PreviousNode)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlanetContentManagerBranchNodeGetter?)lhs,
                rhs: rhs as IPlanetContentManagerBranchNodeGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlanetContentManagerBranchNodeGetter?)lhs,
                rhs: rhs as IPlanetContentManagerBranchNodeGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IPlanetContentManagerBranchNodeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            if (item.NodeType is {} NodeTypeitem)
            {
                hash.Add(NodeTypeitem);
            }
            hash.Add(item.ChildSelection);
            hash.Add(item.CountCurve);
            hash.Add(item.DistributionCurve);
            if (item.ConsumeRequestEvenOnFailure is {} ConsumeRequestEvenOnFailureitem)
            {
                hash.Add(ConsumeRequestEvenOnFailureitem);
            }
            hash.Add(item.Nodes);
            hash.Add(item.Conditions);
            hash.Add(item.Keywords);
            hash.Add(item.ParentNode);
            hash.Add(item.PreviousNode);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlanetContentManagerBranchNodeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlanetContentManagerBranchNodeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlanetContentManagerBranchNode.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlanetContentManagerBranchNodeGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.CountCurve, out var CountCurveInfo))
            {
                yield return CountCurveInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DistributionCurve, out var DistributionCurveInfo))
            {
                yield return DistributionCurveInfo;
            }
            foreach (var item in obj.Nodes)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Conditions is {} ConditionsItem)
            {
                foreach (var item in ConditionsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.ParentNode, out var ParentNodeInfo))
            {
                yield return ParentNodeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.PreviousNode, out var PreviousNodeInfo))
            {
                yield return PreviousNodeInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IPlanetContentManagerBranchNodeGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public PlanetContentManagerBranchNode Duplicate(
            IPlanetContentManagerBranchNodeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlanetContentManagerBranchNode(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlanetContentManagerBranchNodeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlanetContentManagerBranchNodeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class PlanetContentManagerBranchNodeSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly PlanetContentManagerBranchNodeSetterTranslationCommon Instance = new PlanetContentManagerBranchNodeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlanetContentManagerBranchNodeInternal item,
            IPlanetContentManagerBranchNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlanetContentManagerBranchNode item,
            IPlanetContentManagerBranchNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)PlanetContentManagerBranchNode_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.NodeType) ?? true))
            {
                item.NodeType = rhs.NodeType;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.ChildSelection) ?? true))
            {
                item.ChildSelection = rhs.ChildSelection;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.CountCurve) ?? true))
            {
                item.CountCurve.SetTo(rhs.CountCurve.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.DistributionCurve) ?? true))
            {
                item.DistributionCurve.SetTo(rhs.DistributionCurve.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.ConsumeRequestEvenOnFailure) ?? true))
            {
                item.ConsumeRequestEvenOnFailure = rhs.ConsumeRequestEvenOnFailure;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.Nodes) ?? true))
            {
                errorMask?.PushIndex((int)PlanetContentManagerBranchNode_FieldIndex.Nodes);
                try
                {
                    item.Nodes.SetTo(
                        rhs.Nodes
                            .Select(b => (IFormLinkGetter<IPlanetNodeGetter>)new FormLink<IPlanetNodeGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)PlanetContentManagerBranchNode_FieldIndex.Conditions);
                try
                {
                    if ((rhs.Conditions != null))
                    {
                        item.Conditions = 
                            rhs.Conditions
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Condition>();
                    }
                    else
                    {
                        item.Conditions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)PlanetContentManagerBranchNode_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.ParentNode) ?? true))
            {
                item.ParentNode.SetTo(rhs.ParentNode.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetContentManagerBranchNode_FieldIndex.PreviousNode) ?? true))
            {
                item.PreviousNode.SetTo(rhs.PreviousNode.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlanetContentManagerBranchNode item,
            IPlanetContentManagerBranchNodeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlanetContentManagerBranchNodeInternal)item,
                rhs: (IPlanetContentManagerBranchNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlanetContentManagerBranchNode)item,
                rhs: (IPlanetContentManagerBranchNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlanetContentManagerBranchNodeInternal)item,
                rhs: (IPlanetContentManagerBranchNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlanetContentManagerBranchNode)item,
                rhs: (IPlanetContentManagerBranchNodeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlanetContentManagerBranchNode DeepCopy(
            IPlanetContentManagerBranchNodeGetter item,
            PlanetContentManagerBranchNode.TranslationMask? copyMask = null)
        {
            PlanetContentManagerBranchNode ret = (PlanetContentManagerBranchNode)((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonInstance()!).GetNew();
            ((PlanetContentManagerBranchNodeSetterTranslationCommon)((IPlanetContentManagerBranchNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlanetContentManagerBranchNode DeepCopy(
            IPlanetContentManagerBranchNodeGetter item,
            out PlanetContentManagerBranchNode.ErrorMask errorMask,
            PlanetContentManagerBranchNode.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlanetContentManagerBranchNode ret = (PlanetContentManagerBranchNode)((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonInstance()!).GetNew();
            ((PlanetContentManagerBranchNodeSetterTranslationCommon)((IPlanetContentManagerBranchNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlanetContentManagerBranchNode.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlanetContentManagerBranchNode DeepCopy(
            IPlanetContentManagerBranchNodeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlanetContentManagerBranchNode ret = (PlanetContentManagerBranchNode)((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)item).CommonInstance()!).GetNew();
            ((PlanetContentManagerBranchNodeSetterTranslationCommon)((IPlanetContentManagerBranchNodeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetContentManagerBranchNode
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlanetContentManagerBranchNode_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlanetContentManagerBranchNode_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlanetContentManagerBranchNodeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlanetContentManagerBranchNodeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlanetContentManagerBranchNodeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetContentManagerBranchNodeBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly PlanetContentManagerBranchNodeBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IPlanetContentManagerBranchNodeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            EnumBinaryTranslation<PlanetContentManagerBranchNode.NodeTypeOption, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.NodeType,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChildSelection,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CountCurve,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DistributionCurve,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteNullable(
                writer: writer,
                item: item.ConsumeRequestEvenOnFailure,
                header: translationParams.ConvertToCustom(RecordTypes.NAM5));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlanetNodeGetter>>.Instance.Write(
                writer: writer,
                items: item.Nodes,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPlanetNodeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.PCCB));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Conditions,
                counterType: RecordTypes.CITC,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.Keywords,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ParentNode,
                header: translationParams.ConvertToCustom(RecordTypes.PRTN));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PreviousNode,
                header: translationParams.ConvertToCustom(RecordTypes.PRVN));
        }

        public void Write(
            MutagenWriter writer,
            IPlanetContentManagerBranchNodeGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.PCBN,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlanetContentManagerBranchNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlanetContentManagerBranchNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlanetContentManagerBranchNodeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlanetContentManagerBranchNodeBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly PlanetContentManagerBranchNodeBinaryCreateTranslation Instance = new PlanetContentManagerBranchNodeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.PCBN;
        public static ParseResult FillBinaryRecordTypes(
            IPlanetContentManagerBranchNodeInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)PlanetContentManagerBranchNode_FieldIndex.Components;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NodeType = EnumBinaryTranslation<PlanetContentManagerBranchNode.NodeTypeOption, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)PlanetContentManagerBranchNode_FieldIndex.NodeType;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ChildSelection = frame.ReadInt32();
                    return (int)PlanetContentManagerBranchNode_FieldIndex.ChildSelection;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CountCurve.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlanetContentManagerBranchNode_FieldIndex.CountCurve;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DistributionCurve.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlanetContentManagerBranchNode_FieldIndex.DistributionCurve;
                }
                case RecordTypeInts.NAM5:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ConsumeRequestEvenOnFailure = frame.ReadBoolean();
                    return (int)PlanetContentManagerBranchNode_FieldIndex.ConsumeRequestEvenOnFailure;
                }
                case RecordTypeInts.PCCB:
                {
                    item.Nodes.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlanetNodeGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.PCCB),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)PlanetContentManagerBranchNode_FieldIndex.Nodes;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    item.Conditions = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.CITC,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary)
                        .CastExtendedList<Condition>();
                    return (int)PlanetContentManagerBranchNode_FieldIndex.Conditions;
                }
                case RecordTypeInts.KWDA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)PlanetContentManagerBranchNode_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRTN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ParentNode.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlanetContentManagerBranchNode_FieldIndex.ParentNode;
                }
                case RecordTypeInts.PRVN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PreviousNode.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlanetContentManagerBranchNode_FieldIndex.PreviousNode;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class PlanetContentManagerBranchNodeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class PlanetContentManagerBranchNodeBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IPlanetContentManagerBranchNodeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlanetContentManagerBranchNode_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlanetContentManagerBranchNode_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlanetContentManagerBranchNodeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlanetContentManagerBranchNodeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlanetContentManagerBranchNodeCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => PlanetContentManagerBranchNodeCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlanetContentManagerBranchNodeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetContentManagerBranchNodeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IPlanetContentManagerBranchNode);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region NodeType
        private int? _NodeTypeLocation;
        public PlanetContentManagerBranchNode.NodeTypeOption? NodeType => _NodeTypeLocation.HasValue ? (PlanetContentManagerBranchNode.NodeTypeOption)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NodeTypeLocation!.Value, _package.MetaData.Constants)) : default(PlanetContentManagerBranchNode.NodeTypeOption?);
        #endregion
        #region ChildSelection
        private int? _ChildSelectionLocation;
        public Int32 ChildSelection => _ChildSelectionLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ChildSelectionLocation.Value, _package.MetaData.Constants)) : default(Int32);
        #endregion
        #region CountCurve
        private int? _CountCurveLocation;
        public IFormLinkNullableGetter<ICurveTableGetter> CountCurve => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICurveTableGetter>(_package, _recordData, _CountCurveLocation);
        #endregion
        #region DistributionCurve
        private int? _DistributionCurveLocation;
        public IFormLinkNullableGetter<ICurveTableGetter> DistributionCurve => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICurveTableGetter>(_package, _recordData, _DistributionCurveLocation);
        #endregion
        #region ConsumeRequestEvenOnFailure
        private int? _ConsumeRequestEvenOnFailureLocation;
        public Boolean? ConsumeRequestEvenOnFailure => _ConsumeRequestEvenOnFailureLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ConsumeRequestEvenOnFailureLocation.Value, _package.MetaData.Constants)[0] >= 1 : default(Boolean?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IPlanetNodeGetter>> Nodes { get; private set; } = Array.Empty<IFormLinkGetter<IPlanetNodeGetter>>();
        public IReadOnlyList<IConditionGetter>? Conditions { get; private set; }
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region ParentNode
        private int? _ParentNodeLocation;
        public IFormLinkNullableGetter<IPlanetParentNodeGetter> ParentNode => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlanetParentNodeGetter>(_package, _recordData, _ParentNodeLocation);
        #endregion
        #region PreviousNode
        private int? _PreviousNodeLocation;
        public IFormLinkNullableGetter<IPlanetContentManagerBranchNodeGetter> PreviousNode => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlanetContentManagerBranchNodeGetter>(_package, _recordData, _PreviousNodeLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlanetContentManagerBranchNodeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlanetContentManagerBranchNodeGetter PlanetContentManagerBranchNodeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlanetContentManagerBranchNodeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlanetContentManagerBranchNodeGetter PlanetContentManagerBranchNodeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlanetContentManagerBranchNodeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)PlanetContentManagerBranchNode_FieldIndex.Components;
                }
                case RecordTypeInts.NAM1:
                {
                    _NodeTypeLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerBranchNode_FieldIndex.NodeType;
                }
                case RecordTypeInts.NAM2:
                {
                    _ChildSelectionLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerBranchNode_FieldIndex.ChildSelection;
                }
                case RecordTypeInts.NAM3:
                {
                    _CountCurveLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerBranchNode_FieldIndex.CountCurve;
                }
                case RecordTypeInts.NAM4:
                {
                    _DistributionCurveLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerBranchNode_FieldIndex.DistributionCurve;
                }
                case RecordTypeInts.NAM5:
                {
                    _ConsumeRequestEvenOnFailureLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerBranchNode_FieldIndex.ConsumeRequestEvenOnFailure;
                }
                case RecordTypeInts.PCCB:
                {
                    this.Nodes = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IPlanetNodeGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPlanetNodeGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.PCCB,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)PlanetContentManagerBranchNode_FieldIndex.Nodes;
                }
                case RecordTypeInts.CTDA:
                case RecordTypeInts.CITC:
                {
                    this.Conditions = BinaryOverlayList.FactoryByCountPerItem<IConditionGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: Condition_Registration.TriggerSpecs,
                        countType: RecordTypes.CITC,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)PlanetContentManagerBranchNode_FieldIndex.Conditions;
                }
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)PlanetContentManagerBranchNode_FieldIndex.Keywords;
                }
                case RecordTypeInts.PRTN:
                {
                    _ParentNodeLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerBranchNode_FieldIndex.ParentNode;
                }
                case RecordTypeInts.PRVN:
                {
                    _PreviousNodeLocation = (stream.Position - offset);
                    return (int)PlanetContentManagerBranchNode_FieldIndex.PreviousNode;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetContentManagerBranchNodeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<PlanetContentManagerBranchNode>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlanetContentManagerBranchNodeGetter rhs) return false;
            return ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetContentManagerBranchNodeGetter? obj)
        {
            return ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetContentManagerBranchNodeCommon)((IPlanetContentManagerBranchNodeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

