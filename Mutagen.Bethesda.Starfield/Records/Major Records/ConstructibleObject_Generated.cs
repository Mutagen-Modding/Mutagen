/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ConstructibleObject :
        StarfieldMajorRecord,
        IConstructibleObjectInternal,
        IEquatable<IConstructibleObjectGetter>,
        ILoquiObjectSetter<ConstructibleObject>
    {
        #region Ctor
        protected ConstructibleObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IConstructibleObjectGetter.Components => _Components;
        #endregion

        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IConstructibleObjectGetter.Description => this.Description;
        #endregion
        #region WorkbenchKeyword
        private readonly IFormLinkNullable<IKeywordGetter> _WorkbenchKeyword = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> WorkbenchKeyword
        {
            get => _WorkbenchKeyword;
            set => _WorkbenchKeyword.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IConstructibleObjectGetter.WorkbenchKeyword => this.WorkbenchKeyword;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IConstructibleObjectGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region ConstructableComponents
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ConstructibleObjectComponent>? _ConstructableComponents;
        public ExtendedList<ConstructibleObjectComponent>? ConstructableComponents
        {
            get => this._ConstructableComponents;
            set => this._ConstructableComponents = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConstructibleObjectComponentGetter>? IConstructibleObjectGetter.ConstructableComponents => _ConstructableComponents;
        #endregion

        #endregion
        #region RequiredPerks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ConstructibleRequiredPerk>? _RequiredPerks;
        public ExtendedList<ConstructibleRequiredPerk>? RequiredPerks
        {
            get => this._RequiredPerks;
            set => this._RequiredPerks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConstructibleRequiredPerkGetter>? IConstructibleObjectGetter.RequiredPerks => _RequiredPerks;
        #endregion

        #endregion
        #region CreatedObject
        private readonly IFormLinkNullable<IConstructibleObjectTargetGetter> _CreatedObject = new FormLinkNullable<IConstructibleObjectTargetGetter>();
        public IFormLinkNullable<IConstructibleObjectTargetGetter> CreatedObject
        {
            get => _CreatedObject;
            set => _CreatedObject.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IConstructibleObjectTargetGetter> IConstructibleObjectGetter.CreatedObject => this.CreatedObject;
        #endregion
        #region AmountProduced
        public UInt16 AmountProduced { get; set; } = default(UInt16);
        #endregion
        #region MenuSortOrder
        public Single MenuSortOrder { get; set; } = default(Single);
        #endregion
        #region Tier
        public Byte Tier { get; set; } = default(Byte);
        #endregion
        #region CraftingSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _CraftingSound;
        public SoundReference? CraftingSound
        {
            get => _CraftingSound;
            set => _CraftingSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IConstructibleObjectGetter.CraftingSound => this.CraftingSound;
        #endregion
        #region PickupSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _PickupSound;
        public SoundReference? PickupSound
        {
            get => _PickupSound;
            set => _PickupSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IConstructibleObjectGetter.PickupSound => this.PickupSound;
        #endregion
        #region DropdownSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _DropdownSound;
        public SoundReference? DropdownSound
        {
            get => _DropdownSound;
            set => _DropdownSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IConstructibleObjectGetter.DropdownSound => this.DropdownSound;
        #endregion
        #region RepairComponents
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ConstructibleObjectComponent>? _RepairComponents;
        public ExtendedList<ConstructibleObjectComponent>? RepairComponents
        {
            get => this._RepairComponents;
            set => this._RepairComponents = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConstructibleObjectComponentGetter>? IConstructibleObjectGetter.RepairComponents => _RepairComponents;
        #endregion

        #endregion
        #region LearnMethod
        public ConstructibleObject.LearnMethodEnum? LearnMethod { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ConstructibleObject.LearnMethodEnum? IConstructibleObjectGetter.LearnMethod => this.LearnMethod;
        #endregion
        #region Value
        public UInt32 Value { get; set; } = default(UInt32);
        #endregion
        #region MenuArtObject
        private readonly IFormLinkNullable<IArtObjectGetter> _MenuArtObject = new FormLinkNullable<IArtObjectGetter>();
        public IFormLinkNullable<IArtObjectGetter> MenuArtObject
        {
            get => _MenuArtObject;
            set => _MenuArtObject.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArtObjectGetter> IConstructibleObjectGetter.MenuArtObject => this.MenuArtObject;
        #endregion
        #region LearnedFrom
        private readonly IFormLinkNullable<IStarfieldMajorRecordGetter> _LearnedFrom = new FormLinkNullable<IStarfieldMajorRecordGetter>();
        public IFormLinkNullable<IStarfieldMajorRecordGetter> LearnedFrom
        {
            get => _LearnedFrom;
            set => _LearnedFrom.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IStarfieldMajorRecordGetter> IConstructibleObjectGetter.LearnedFrom => this.LearnedFrom;
        #endregion
        #region BaseReturnScaleTable
        private readonly IFormLinkNullable<ICurveTableGetter> _BaseReturnScaleTable = new FormLinkNullable<ICurveTableGetter>();
        public IFormLinkNullable<ICurveTableGetter> BaseReturnScaleTable
        {
            get => _BaseReturnScaleTable;
            set => _BaseReturnScaleTable.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICurveTableGetter> IConstructibleObjectGetter.BaseReturnScaleTable => this.BaseReturnScaleTable;
        #endregion
        #region LearnChance
        private readonly IFormLinkNullable<IGlobalGetter> _LearnChance = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> LearnChance
        {
            get => _LearnChance;
            set => _LearnChance.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IConstructibleObjectGetter.LearnChance => this.LearnChance;
        #endregion
        #region MaxBuildCountGlobal
        private readonly IFormLinkNullable<IGlobalGetter> _MaxBuildCountGlobal = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> MaxBuildCountGlobal
        {
            get => _MaxBuildCountGlobal;
            set => _MaxBuildCountGlobal.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IConstructibleObjectGetter.MaxBuildCountGlobal => this.MaxBuildCountGlobal;
        #endregion
        #region RecipeFilters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _RecipeFilters;
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? RecipeFilters
        {
            get => this._RecipeFilters;
            set => this._RecipeFilters = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IConstructibleObjectGetter.RecipeFilters => _RecipeFilters;
        #endregion

        #endregion
        #region InstantiationFilterKeyword
        private readonly IFormLinkNullable<IKeywordGetter> _InstantiationFilterKeyword = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> InstantiationFilterKeyword
        {
            get => _InstantiationFilterKeyword;
            set => _InstantiationFilterKeyword.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IConstructibleObjectGetter.InstantiationFilterKeyword => this.InstantiationFilterKeyword;
        #endregion
        #region Flags
        public ConstructibleObject.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ConstructibleObject.Flag? IConstructibleObjectGetter.Flags => this.Flags;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ConstructibleObjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Description = initialValue;
                this.WorkbenchKeyword = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.ConstructableComponents = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>());
                this.RequiredPerks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleRequiredPerk.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ConstructibleRequiredPerk.Mask<TItem>?>>());
                this.CreatedObject = initialValue;
                this.AmountProduced = initialValue;
                this.MenuSortOrder = initialValue;
                this.Tier = initialValue;
                this.CraftingSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.PickupSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.DropdownSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.RepairComponents = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>());
                this.LearnMethod = initialValue;
                this.Value = initialValue;
                this.MenuArtObject = initialValue;
                this.LearnedFrom = initialValue;
                this.BaseReturnScaleTable = initialValue;
                this.LearnChance = initialValue;
                this.MaxBuildCountGlobal = initialValue;
                this.RecipeFilters = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.InstantiationFilterKeyword = initialValue;
                this.Flags = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Description,
                TItem WorkbenchKeyword,
                TItem Conditions,
                TItem ConstructableComponents,
                TItem RequiredPerks,
                TItem CreatedObject,
                TItem AmountProduced,
                TItem MenuSortOrder,
                TItem Tier,
                TItem CraftingSound,
                TItem PickupSound,
                TItem DropdownSound,
                TItem RepairComponents,
                TItem LearnMethod,
                TItem Value,
                TItem MenuArtObject,
                TItem LearnedFrom,
                TItem BaseReturnScaleTable,
                TItem LearnChance,
                TItem MaxBuildCountGlobal,
                TItem RecipeFilters,
                TItem InstantiationFilterKeyword,
                TItem Flags)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Description = Description;
                this.WorkbenchKeyword = WorkbenchKeyword;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.ConstructableComponents = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>?>(ConstructableComponents, Enumerable.Empty<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>());
                this.RequiredPerks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleRequiredPerk.Mask<TItem>?>>?>(RequiredPerks, Enumerable.Empty<MaskItemIndexed<TItem, ConstructibleRequiredPerk.Mask<TItem>?>>());
                this.CreatedObject = CreatedObject;
                this.AmountProduced = AmountProduced;
                this.MenuSortOrder = MenuSortOrder;
                this.Tier = Tier;
                this.CraftingSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(CraftingSound, new SoundReference.Mask<TItem>(CraftingSound));
                this.PickupSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(PickupSound, new SoundReference.Mask<TItem>(PickupSound));
                this.DropdownSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(DropdownSound, new SoundReference.Mask<TItem>(DropdownSound));
                this.RepairComponents = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>?>(RepairComponents, Enumerable.Empty<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>());
                this.LearnMethod = LearnMethod;
                this.Value = Value;
                this.MenuArtObject = MenuArtObject;
                this.LearnedFrom = LearnedFrom;
                this.BaseReturnScaleTable = BaseReturnScaleTable;
                this.LearnChance = LearnChance;
                this.MaxBuildCountGlobal = MaxBuildCountGlobal;
                this.RecipeFilters = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RecipeFilters, Enumerable.Empty<(int Index, TItem Value)>());
                this.InstantiationFilterKeyword = InstantiationFilterKeyword;
                this.Flags = Flags;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Description;
            public TItem WorkbenchKeyword;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>?>? ConstructableComponents;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleRequiredPerk.Mask<TItem>?>>?>? RequiredPerks;
            public TItem CreatedObject;
            public TItem AmountProduced;
            public TItem MenuSortOrder;
            public TItem Tier;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? CraftingSound { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? PickupSound { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? DropdownSound { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ConstructibleObjectComponent.Mask<TItem>?>>?>? RepairComponents;
            public TItem LearnMethod;
            public TItem Value;
            public TItem MenuArtObject;
            public TItem LearnedFrom;
            public TItem BaseReturnScaleTable;
            public TItem LearnChance;
            public TItem MaxBuildCountGlobal;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RecipeFilters;
            public TItem InstantiationFilterKeyword;
            public TItem Flags;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.WorkbenchKeyword, rhs.WorkbenchKeyword)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.ConstructableComponents, rhs.ConstructableComponents)) return false;
                if (!object.Equals(this.RequiredPerks, rhs.RequiredPerks)) return false;
                if (!object.Equals(this.CreatedObject, rhs.CreatedObject)) return false;
                if (!object.Equals(this.AmountProduced, rhs.AmountProduced)) return false;
                if (!object.Equals(this.MenuSortOrder, rhs.MenuSortOrder)) return false;
                if (!object.Equals(this.Tier, rhs.Tier)) return false;
                if (!object.Equals(this.CraftingSound, rhs.CraftingSound)) return false;
                if (!object.Equals(this.PickupSound, rhs.PickupSound)) return false;
                if (!object.Equals(this.DropdownSound, rhs.DropdownSound)) return false;
                if (!object.Equals(this.RepairComponents, rhs.RepairComponents)) return false;
                if (!object.Equals(this.LearnMethod, rhs.LearnMethod)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.MenuArtObject, rhs.MenuArtObject)) return false;
                if (!object.Equals(this.LearnedFrom, rhs.LearnedFrom)) return false;
                if (!object.Equals(this.BaseReturnScaleTable, rhs.BaseReturnScaleTable)) return false;
                if (!object.Equals(this.LearnChance, rhs.LearnChance)) return false;
                if (!object.Equals(this.MaxBuildCountGlobal, rhs.MaxBuildCountGlobal)) return false;
                if (!object.Equals(this.RecipeFilters, rhs.RecipeFilters)) return false;
                if (!object.Equals(this.InstantiationFilterKeyword, rhs.InstantiationFilterKeyword)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.Description);
                hash.Add(this.WorkbenchKeyword);
                hash.Add(this.Conditions);
                hash.Add(this.ConstructableComponents);
                hash.Add(this.RequiredPerks);
                hash.Add(this.CreatedObject);
                hash.Add(this.AmountProduced);
                hash.Add(this.MenuSortOrder);
                hash.Add(this.Tier);
                hash.Add(this.CraftingSound);
                hash.Add(this.PickupSound);
                hash.Add(this.DropdownSound);
                hash.Add(this.RepairComponents);
                hash.Add(this.LearnMethod);
                hash.Add(this.Value);
                hash.Add(this.MenuArtObject);
                hash.Add(this.LearnedFrom);
                hash.Add(this.BaseReturnScaleTable);
                hash.Add(this.LearnChance);
                hash.Add(this.MaxBuildCountGlobal);
                hash.Add(this.RecipeFilters);
                hash.Add(this.InstantiationFilterKeyword);
                hash.Add(this.Flags);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Description)) return false;
                if (!eval(this.WorkbenchKeyword)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ConstructableComponents != null)
                {
                    if (!eval(this.ConstructableComponents.Overall)) return false;
                    if (this.ConstructableComponents.Specific != null)
                    {
                        foreach (var item in this.ConstructableComponents.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RequiredPerks != null)
                {
                    if (!eval(this.RequiredPerks.Overall)) return false;
                    if (this.RequiredPerks.Specific != null)
                    {
                        foreach (var item in this.RequiredPerks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.CreatedObject)) return false;
                if (!eval(this.AmountProduced)) return false;
                if (!eval(this.MenuSortOrder)) return false;
                if (!eval(this.Tier)) return false;
                if (CraftingSound != null)
                {
                    if (!eval(this.CraftingSound.Overall)) return false;
                    if (this.CraftingSound.Specific != null && !this.CraftingSound.Specific.All(eval)) return false;
                }
                if (PickupSound != null)
                {
                    if (!eval(this.PickupSound.Overall)) return false;
                    if (this.PickupSound.Specific != null && !this.PickupSound.Specific.All(eval)) return false;
                }
                if (DropdownSound != null)
                {
                    if (!eval(this.DropdownSound.Overall)) return false;
                    if (this.DropdownSound.Specific != null && !this.DropdownSound.Specific.All(eval)) return false;
                }
                if (this.RepairComponents != null)
                {
                    if (!eval(this.RepairComponents.Overall)) return false;
                    if (this.RepairComponents.Specific != null)
                    {
                        foreach (var item in this.RepairComponents.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.LearnMethod)) return false;
                if (!eval(this.Value)) return false;
                if (!eval(this.MenuArtObject)) return false;
                if (!eval(this.LearnedFrom)) return false;
                if (!eval(this.BaseReturnScaleTable)) return false;
                if (!eval(this.LearnChance)) return false;
                if (!eval(this.MaxBuildCountGlobal)) return false;
                if (this.RecipeFilters != null)
                {
                    if (!eval(this.RecipeFilters.Overall)) return false;
                    if (this.RecipeFilters.Specific != null)
                    {
                        foreach (var item in this.RecipeFilters.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.InstantiationFilterKeyword)) return false;
                if (!eval(this.Flags)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Description)) return true;
                if (eval(this.WorkbenchKeyword)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ConstructableComponents != null)
                {
                    if (eval(this.ConstructableComponents.Overall)) return true;
                    if (this.ConstructableComponents.Specific != null)
                    {
                        foreach (var item in this.ConstructableComponents.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.RequiredPerks != null)
                {
                    if (eval(this.RequiredPerks.Overall)) return true;
                    if (this.RequiredPerks.Specific != null)
                    {
                        foreach (var item in this.RequiredPerks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.CreatedObject)) return true;
                if (eval(this.AmountProduced)) return true;
                if (eval(this.MenuSortOrder)) return true;
                if (eval(this.Tier)) return true;
                if (CraftingSound != null)
                {
                    if (eval(this.CraftingSound.Overall)) return true;
                    if (this.CraftingSound.Specific != null && this.CraftingSound.Specific.Any(eval)) return true;
                }
                if (PickupSound != null)
                {
                    if (eval(this.PickupSound.Overall)) return true;
                    if (this.PickupSound.Specific != null && this.PickupSound.Specific.Any(eval)) return true;
                }
                if (DropdownSound != null)
                {
                    if (eval(this.DropdownSound.Overall)) return true;
                    if (this.DropdownSound.Specific != null && this.DropdownSound.Specific.Any(eval)) return true;
                }
                if (this.RepairComponents != null)
                {
                    if (eval(this.RepairComponents.Overall)) return true;
                    if (this.RepairComponents.Specific != null)
                    {
                        foreach (var item in this.RepairComponents.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.LearnMethod)) return true;
                if (eval(this.Value)) return true;
                if (eval(this.MenuArtObject)) return true;
                if (eval(this.LearnedFrom)) return true;
                if (eval(this.BaseReturnScaleTable)) return true;
                if (eval(this.LearnChance)) return true;
                if (eval(this.MaxBuildCountGlobal)) return true;
                if (this.RecipeFilters != null)
                {
                    if (eval(this.RecipeFilters.Overall)) return true;
                    if (this.RecipeFilters.Specific != null)
                    {
                        foreach (var item in this.RecipeFilters.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.InstantiationFilterKeyword)) return true;
                if (eval(this.Flags)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ConstructibleObject.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Description = eval(this.Description);
                obj.WorkbenchKeyword = eval(this.WorkbenchKeyword);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (ConstructableComponents != null)
                {
                    obj.ConstructableComponents = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>>?>(eval(this.ConstructableComponents.Overall), Enumerable.Empty<MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>>());
                    if (ConstructableComponents.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>>();
                        obj.ConstructableComponents.Specific = l;
                        foreach (var item in ConstructableComponents.Specific)
                        {
                            MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (RequiredPerks != null)
                {
                    obj.RequiredPerks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ConstructibleRequiredPerk.Mask<R>?>>?>(eval(this.RequiredPerks.Overall), Enumerable.Empty<MaskItemIndexed<R, ConstructibleRequiredPerk.Mask<R>?>>());
                    if (RequiredPerks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ConstructibleRequiredPerk.Mask<R>?>>();
                        obj.RequiredPerks.Specific = l;
                        foreach (var item in RequiredPerks.Specific)
                        {
                            MaskItemIndexed<R, ConstructibleRequiredPerk.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ConstructibleRequiredPerk.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.CreatedObject = eval(this.CreatedObject);
                obj.AmountProduced = eval(this.AmountProduced);
                obj.MenuSortOrder = eval(this.MenuSortOrder);
                obj.Tier = eval(this.Tier);
                obj.CraftingSound = this.CraftingSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.CraftingSound.Overall), this.CraftingSound.Specific?.Translate(eval));
                obj.PickupSound = this.PickupSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.PickupSound.Overall), this.PickupSound.Specific?.Translate(eval));
                obj.DropdownSound = this.DropdownSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.DropdownSound.Overall), this.DropdownSound.Specific?.Translate(eval));
                if (RepairComponents != null)
                {
                    obj.RepairComponents = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>>?>(eval(this.RepairComponents.Overall), Enumerable.Empty<MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>>());
                    if (RepairComponents.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>>();
                        obj.RepairComponents.Specific = l;
                        foreach (var item in RepairComponents.Specific)
                        {
                            MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ConstructibleObjectComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.LearnMethod = eval(this.LearnMethod);
                obj.Value = eval(this.Value);
                obj.MenuArtObject = eval(this.MenuArtObject);
                obj.LearnedFrom = eval(this.LearnedFrom);
                obj.BaseReturnScaleTable = eval(this.BaseReturnScaleTable);
                obj.LearnChance = eval(this.LearnChance);
                obj.MaxBuildCountGlobal = eval(this.MaxBuildCountGlobal);
                if (RecipeFilters != null)
                {
                    obj.RecipeFilters = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RecipeFilters.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RecipeFilters.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RecipeFilters.Specific = l;
                        foreach (var item in RecipeFilters.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.InstantiationFilterKeyword = eval(this.InstantiationFilterKeyword);
                obj.Flags = eval(this.Flags);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ConstructibleObject.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ConstructibleObject.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ConstructibleObject.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if (printMask?.WorkbenchKeyword ?? true)
                    {
                        sb.AppendItem(WorkbenchKeyword, "WorkbenchKeyword");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ConstructableComponents?.Overall ?? true)
                        && ConstructableComponents is {} ConstructableComponentsItem)
                    {
                        sb.AppendLine("ConstructableComponents =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConstructableComponentsItem.Overall);
                            if (ConstructableComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ConstructableComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.RequiredPerks?.Overall ?? true)
                        && RequiredPerks is {} RequiredPerksItem)
                    {
                        sb.AppendLine("RequiredPerks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RequiredPerksItem.Overall);
                            if (RequiredPerksItem.Specific != null)
                            {
                                foreach (var subItem in RequiredPerksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.CreatedObject ?? true)
                    {
                        sb.AppendItem(CreatedObject, "CreatedObject");
                    }
                    if (printMask?.AmountProduced ?? true)
                    {
                        sb.AppendItem(AmountProduced, "AmountProduced");
                    }
                    if (printMask?.MenuSortOrder ?? true)
                    {
                        sb.AppendItem(MenuSortOrder, "MenuSortOrder");
                    }
                    if (printMask?.Tier ?? true)
                    {
                        sb.AppendItem(Tier, "Tier");
                    }
                    if (printMask?.CraftingSound?.Overall ?? true)
                    {
                        CraftingSound?.Print(sb);
                    }
                    if (printMask?.PickupSound?.Overall ?? true)
                    {
                        PickupSound?.Print(sb);
                    }
                    if (printMask?.DropdownSound?.Overall ?? true)
                    {
                        DropdownSound?.Print(sb);
                    }
                    if ((printMask?.RepairComponents?.Overall ?? true)
                        && RepairComponents is {} RepairComponentsItem)
                    {
                        sb.AppendLine("RepairComponents =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RepairComponentsItem.Overall);
                            if (RepairComponentsItem.Specific != null)
                            {
                                foreach (var subItem in RepairComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.LearnMethod ?? true)
                    {
                        sb.AppendItem(LearnMethod, "LearnMethod");
                    }
                    if (printMask?.Value ?? true)
                    {
                        sb.AppendItem(Value, "Value");
                    }
                    if (printMask?.MenuArtObject ?? true)
                    {
                        sb.AppendItem(MenuArtObject, "MenuArtObject");
                    }
                    if (printMask?.LearnedFrom ?? true)
                    {
                        sb.AppendItem(LearnedFrom, "LearnedFrom");
                    }
                    if (printMask?.BaseReturnScaleTable ?? true)
                    {
                        sb.AppendItem(BaseReturnScaleTable, "BaseReturnScaleTable");
                    }
                    if (printMask?.LearnChance ?? true)
                    {
                        sb.AppendItem(LearnChance, "LearnChance");
                    }
                    if (printMask?.MaxBuildCountGlobal ?? true)
                    {
                        sb.AppendItem(MaxBuildCountGlobal, "MaxBuildCountGlobal");
                    }
                    if ((printMask?.RecipeFilters?.Overall ?? true)
                        && RecipeFilters is {} RecipeFiltersItem)
                    {
                        sb.AppendLine("RecipeFilters =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RecipeFiltersItem.Overall);
                            if (RecipeFiltersItem.Specific != null)
                            {
                                foreach (var subItem in RecipeFiltersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.InstantiationFilterKeyword ?? true)
                    {
                        sb.AppendItem(InstantiationFilterKeyword, "InstantiationFilterKeyword");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Description;
            public Exception? WorkbenchKeyword;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleObjectComponent.ErrorMask?>>?>? ConstructableComponents;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleRequiredPerk.ErrorMask?>>?>? RequiredPerks;
            public Exception? CreatedObject;
            public Exception? AmountProduced;
            public Exception? MenuSortOrder;
            public Exception? Tier;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? CraftingSound;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? PickupSound;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? DropdownSound;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleObjectComponent.ErrorMask?>>?>? RepairComponents;
            public Exception? LearnMethod;
            public Exception? Value;
            public Exception? MenuArtObject;
            public Exception? LearnedFrom;
            public Exception? BaseReturnScaleTable;
            public Exception? LearnChance;
            public Exception? MaxBuildCountGlobal;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RecipeFilters;
            public Exception? InstantiationFilterKeyword;
            public Exception? Flags;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
                switch (enu)
                {
                    case ConstructibleObject_FieldIndex.Components:
                        return Components;
                    case ConstructibleObject_FieldIndex.Description:
                        return Description;
                    case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                        return WorkbenchKeyword;
                    case ConstructibleObject_FieldIndex.Conditions:
                        return Conditions;
                    case ConstructibleObject_FieldIndex.ConstructableComponents:
                        return ConstructableComponents;
                    case ConstructibleObject_FieldIndex.RequiredPerks:
                        return RequiredPerks;
                    case ConstructibleObject_FieldIndex.CreatedObject:
                        return CreatedObject;
                    case ConstructibleObject_FieldIndex.AmountProduced:
                        return AmountProduced;
                    case ConstructibleObject_FieldIndex.MenuSortOrder:
                        return MenuSortOrder;
                    case ConstructibleObject_FieldIndex.Tier:
                        return Tier;
                    case ConstructibleObject_FieldIndex.CraftingSound:
                        return CraftingSound;
                    case ConstructibleObject_FieldIndex.PickupSound:
                        return PickupSound;
                    case ConstructibleObject_FieldIndex.DropdownSound:
                        return DropdownSound;
                    case ConstructibleObject_FieldIndex.RepairComponents:
                        return RepairComponents;
                    case ConstructibleObject_FieldIndex.LearnMethod:
                        return LearnMethod;
                    case ConstructibleObject_FieldIndex.Value:
                        return Value;
                    case ConstructibleObject_FieldIndex.MenuArtObject:
                        return MenuArtObject;
                    case ConstructibleObject_FieldIndex.LearnedFrom:
                        return LearnedFrom;
                    case ConstructibleObject_FieldIndex.BaseReturnScaleTable:
                        return BaseReturnScaleTable;
                    case ConstructibleObject_FieldIndex.LearnChance:
                        return LearnChance;
                    case ConstructibleObject_FieldIndex.MaxBuildCountGlobal:
                        return MaxBuildCountGlobal;
                    case ConstructibleObject_FieldIndex.RecipeFilters:
                        return RecipeFilters;
                    case ConstructibleObject_FieldIndex.InstantiationFilterKeyword:
                        return InstantiationFilterKeyword;
                    case ConstructibleObject_FieldIndex.Flags:
                        return Flags;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
                switch (enu)
                {
                    case ConstructibleObject_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                        this.WorkbenchKeyword = ex;
                        break;
                    case ConstructibleObject_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.ConstructableComponents:
                        this.ConstructableComponents = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleObjectComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.RequiredPerks:
                        this.RequiredPerks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleRequiredPerk.ErrorMask?>>?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.CreatedObject:
                        this.CreatedObject = ex;
                        break;
                    case ConstructibleObject_FieldIndex.AmountProduced:
                        this.AmountProduced = ex;
                        break;
                    case ConstructibleObject_FieldIndex.MenuSortOrder:
                        this.MenuSortOrder = ex;
                        break;
                    case ConstructibleObject_FieldIndex.Tier:
                        this.Tier = ex;
                        break;
                    case ConstructibleObject_FieldIndex.CraftingSound:
                        this.CraftingSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.PickupSound:
                        this.PickupSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.DropdownSound:
                        this.DropdownSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.RepairComponents:
                        this.RepairComponents = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleObjectComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.LearnMethod:
                        this.LearnMethod = ex;
                        break;
                    case ConstructibleObject_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case ConstructibleObject_FieldIndex.MenuArtObject:
                        this.MenuArtObject = ex;
                        break;
                    case ConstructibleObject_FieldIndex.LearnedFrom:
                        this.LearnedFrom = ex;
                        break;
                    case ConstructibleObject_FieldIndex.BaseReturnScaleTable:
                        this.BaseReturnScaleTable = ex;
                        break;
                    case ConstructibleObject_FieldIndex.LearnChance:
                        this.LearnChance = ex;
                        break;
                    case ConstructibleObject_FieldIndex.MaxBuildCountGlobal:
                        this.MaxBuildCountGlobal = ex;
                        break;
                    case ConstructibleObject_FieldIndex.RecipeFilters:
                        this.RecipeFilters = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ConstructibleObject_FieldIndex.InstantiationFilterKeyword:
                        this.InstantiationFilterKeyword = ex;
                        break;
                    case ConstructibleObject_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ConstructibleObject_FieldIndex enu = (ConstructibleObject_FieldIndex)index;
                switch (enu)
                {
                    case ConstructibleObject_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case ConstructibleObject_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.WorkbenchKeyword:
                        this.WorkbenchKeyword = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case ConstructibleObject_FieldIndex.ConstructableComponents:
                        this.ConstructableComponents = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleObjectComponent.ErrorMask?>>?>)obj;
                        break;
                    case ConstructibleObject_FieldIndex.RequiredPerks:
                        this.RequiredPerks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleRequiredPerk.ErrorMask?>>?>)obj;
                        break;
                    case ConstructibleObject_FieldIndex.CreatedObject:
                        this.CreatedObject = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.AmountProduced:
                        this.AmountProduced = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.MenuSortOrder:
                        this.MenuSortOrder = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.Tier:
                        this.Tier = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.CraftingSound:
                        this.CraftingSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.PickupSound:
                        this.PickupSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.DropdownSound:
                        this.DropdownSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.RepairComponents:
                        this.RepairComponents = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleObjectComponent.ErrorMask?>>?>)obj;
                        break;
                    case ConstructibleObject_FieldIndex.LearnMethod:
                        this.LearnMethod = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.MenuArtObject:
                        this.MenuArtObject = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.LearnedFrom:
                        this.LearnedFrom = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.BaseReturnScaleTable:
                        this.BaseReturnScaleTable = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.LearnChance:
                        this.LearnChance = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.MaxBuildCountGlobal:
                        this.MaxBuildCountGlobal = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.RecipeFilters:
                        this.RecipeFilters = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ConstructibleObject_FieldIndex.InstantiationFilterKeyword:
                        this.InstantiationFilterKeyword = (Exception?)obj;
                        break;
                    case ConstructibleObject_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (Description != null) return true;
                if (WorkbenchKeyword != null) return true;
                if (Conditions != null) return true;
                if (ConstructableComponents != null) return true;
                if (RequiredPerks != null) return true;
                if (CreatedObject != null) return true;
                if (AmountProduced != null) return true;
                if (MenuSortOrder != null) return true;
                if (Tier != null) return true;
                if (CraftingSound != null) return true;
                if (PickupSound != null) return true;
                if (DropdownSound != null) return true;
                if (RepairComponents != null) return true;
                if (LearnMethod != null) return true;
                if (Value != null) return true;
                if (MenuArtObject != null) return true;
                if (LearnedFrom != null) return true;
                if (BaseReturnScaleTable != null) return true;
                if (LearnChance != null) return true;
                if (MaxBuildCountGlobal != null) return true;
                if (RecipeFilters != null) return true;
                if (InstantiationFilterKeyword != null) return true;
                if (Flags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                {
                    sb.AppendItem(WorkbenchKeyword, "WorkbenchKeyword");
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (ConstructableComponents is {} ConstructableComponentsItem)
                {
                    sb.AppendLine("ConstructableComponents =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConstructableComponentsItem.Overall);
                        if (ConstructableComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ConstructableComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (RequiredPerks is {} RequiredPerksItem)
                {
                    sb.AppendLine("RequiredPerks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RequiredPerksItem.Overall);
                        if (RequiredPerksItem.Specific != null)
                        {
                            foreach (var subItem in RequiredPerksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(CreatedObject, "CreatedObject");
                }
                {
                    sb.AppendItem(AmountProduced, "AmountProduced");
                }
                {
                    sb.AppendItem(MenuSortOrder, "MenuSortOrder");
                }
                {
                    sb.AppendItem(Tier, "Tier");
                }
                CraftingSound?.Print(sb);
                PickupSound?.Print(sb);
                DropdownSound?.Print(sb);
                if (RepairComponents is {} RepairComponentsItem)
                {
                    sb.AppendLine("RepairComponents =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RepairComponentsItem.Overall);
                        if (RepairComponentsItem.Specific != null)
                        {
                            foreach (var subItem in RepairComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(LearnMethod, "LearnMethod");
                }
                {
                    sb.AppendItem(Value, "Value");
                }
                {
                    sb.AppendItem(MenuArtObject, "MenuArtObject");
                }
                {
                    sb.AppendItem(LearnedFrom, "LearnedFrom");
                }
                {
                    sb.AppendItem(BaseReturnScaleTable, "BaseReturnScaleTable");
                }
                {
                    sb.AppendItem(LearnChance, "LearnChance");
                }
                {
                    sb.AppendItem(MaxBuildCountGlobal, "MaxBuildCountGlobal");
                }
                if (RecipeFilters is {} RecipeFiltersItem)
                {
                    sb.AppendLine("RecipeFilters =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RecipeFiltersItem.Overall);
                        if (RecipeFiltersItem.Specific != null)
                        {
                            foreach (var subItem in RecipeFiltersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(InstantiationFilterKeyword, "InstantiationFilterKeyword");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.WorkbenchKeyword = this.WorkbenchKeyword.Combine(rhs.WorkbenchKeyword);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.ConstructableComponents = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleObjectComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ConstructableComponents?.Overall, rhs.ConstructableComponents?.Overall), Noggog.ExceptionExt.Combine(this.ConstructableComponents?.Specific, rhs.ConstructableComponents?.Specific));
                ret.RequiredPerks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleRequiredPerk.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.RequiredPerks?.Overall, rhs.RequiredPerks?.Overall), Noggog.ExceptionExt.Combine(this.RequiredPerks?.Specific, rhs.RequiredPerks?.Specific));
                ret.CreatedObject = this.CreatedObject.Combine(rhs.CreatedObject);
                ret.AmountProduced = this.AmountProduced.Combine(rhs.AmountProduced);
                ret.MenuSortOrder = this.MenuSortOrder.Combine(rhs.MenuSortOrder);
                ret.Tier = this.Tier.Combine(rhs.Tier);
                ret.CraftingSound = this.CraftingSound.Combine(rhs.CraftingSound, (l, r) => l.Combine(r));
                ret.PickupSound = this.PickupSound.Combine(rhs.PickupSound, (l, r) => l.Combine(r));
                ret.DropdownSound = this.DropdownSound.Combine(rhs.DropdownSound, (l, r) => l.Combine(r));
                ret.RepairComponents = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ConstructibleObjectComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.RepairComponents?.Overall, rhs.RepairComponents?.Overall), Noggog.ExceptionExt.Combine(this.RepairComponents?.Specific, rhs.RepairComponents?.Specific));
                ret.LearnMethod = this.LearnMethod.Combine(rhs.LearnMethod);
                ret.Value = this.Value.Combine(rhs.Value);
                ret.MenuArtObject = this.MenuArtObject.Combine(rhs.MenuArtObject);
                ret.LearnedFrom = this.LearnedFrom.Combine(rhs.LearnedFrom);
                ret.BaseReturnScaleTable = this.BaseReturnScaleTable.Combine(rhs.BaseReturnScaleTable);
                ret.LearnChance = this.LearnChance.Combine(rhs.LearnChance);
                ret.MaxBuildCountGlobal = this.MaxBuildCountGlobal.Combine(rhs.MaxBuildCountGlobal);
                ret.RecipeFilters = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.RecipeFilters?.Overall, rhs.RecipeFilters?.Overall), Noggog.ExceptionExt.Combine(this.RecipeFilters?.Specific, rhs.RecipeFilters?.Specific));
                ret.InstantiationFilterKeyword = this.InstantiationFilterKeyword.Combine(rhs.InstantiationFilterKeyword);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool Description;
            public bool WorkbenchKeyword;
            public Condition.TranslationMask? Conditions;
            public ConstructibleObjectComponent.TranslationMask? ConstructableComponents;
            public ConstructibleRequiredPerk.TranslationMask? RequiredPerks;
            public bool CreatedObject;
            public bool AmountProduced;
            public bool MenuSortOrder;
            public bool Tier;
            public SoundReference.TranslationMask? CraftingSound;
            public SoundReference.TranslationMask? PickupSound;
            public SoundReference.TranslationMask? DropdownSound;
            public ConstructibleObjectComponent.TranslationMask? RepairComponents;
            public bool LearnMethod;
            public bool Value;
            public bool MenuArtObject;
            public bool LearnedFrom;
            public bool BaseReturnScaleTable;
            public bool LearnChance;
            public bool MaxBuildCountGlobal;
            public bool RecipeFilters;
            public bool InstantiationFilterKeyword;
            public bool Flags;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Description = defaultOn;
                this.WorkbenchKeyword = defaultOn;
                this.CreatedObject = defaultOn;
                this.AmountProduced = defaultOn;
                this.MenuSortOrder = defaultOn;
                this.Tier = defaultOn;
                this.LearnMethod = defaultOn;
                this.Value = defaultOn;
                this.MenuArtObject = defaultOn;
                this.LearnedFrom = defaultOn;
                this.BaseReturnScaleTable = defaultOn;
                this.LearnChance = defaultOn;
                this.MaxBuildCountGlobal = defaultOn;
                this.RecipeFilters = defaultOn;
                this.InstantiationFilterKeyword = defaultOn;
                this.Flags = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Description, null));
                ret.Add((WorkbenchKeyword, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((ConstructableComponents == null ? DefaultOn : !ConstructableComponents.GetCrystal().CopyNothing, ConstructableComponents?.GetCrystal()));
                ret.Add((RequiredPerks == null ? DefaultOn : !RequiredPerks.GetCrystal().CopyNothing, RequiredPerks?.GetCrystal()));
                ret.Add((CreatedObject, null));
                ret.Add((AmountProduced, null));
                ret.Add((MenuSortOrder, null));
                ret.Add((Tier, null));
                ret.Add((CraftingSound != null ? CraftingSound.OnOverall : DefaultOn, CraftingSound?.GetCrystal()));
                ret.Add((PickupSound != null ? PickupSound.OnOverall : DefaultOn, PickupSound?.GetCrystal()));
                ret.Add((DropdownSound != null ? DropdownSound.OnOverall : DefaultOn, DropdownSound?.GetCrystal()));
                ret.Add((RepairComponents == null ? DefaultOn : !RepairComponents.GetCrystal().CopyNothing, RepairComponents?.GetCrystal()));
                ret.Add((LearnMethod, null));
                ret.Add((Value, null));
                ret.Add((MenuArtObject, null));
                ret.Add((LearnedFrom, null));
                ret.Add((BaseReturnScaleTable, null));
                ret.Add((LearnChance, null));
                ret.Add((MaxBuildCountGlobal, null));
                ret.Add((RecipeFilters, null));
                ret.Add((InstantiationFilterKeyword, null));
                ret.Add((Flags, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ConstructibleObject_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ConstructibleObjectCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ConstructibleObjectSetterCommon.Instance.RemapLinks(this, mapping);
        public ConstructibleObject(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ConstructibleObject(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ConstructibleObject(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ConstructibleObject(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public ConstructibleObject(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ConstructibleObject>.ToString(this);
        }

        protected override Type LinkType => typeof(IConstructibleObject);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ConstructibleObjectCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => ConstructibleObjectSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => ConstructibleObjectSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => ConstructibleObjectSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IConstructibleObjectGetter rhs) return false;
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IConstructibleObjectGetter? obj)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ConstructibleObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ConstructibleObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ConstructibleObject CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ConstructibleObject();
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ConstructibleObject item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ConstructibleObject GetNew()
        {
            return new ConstructibleObject();
        }

    }
    #endregion

    #region Interface
    public partial interface IConstructibleObject :
        IAssetLinkContainer,
        IBaseObject,
        IConstructibleObjectGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IConstructibleObjectInternal>,
        IResearchResourceTarget,
        IResourceTarget,
        IStarfieldMajorRecordInternal
    {
        new ExtendedList<AComponent> Components { get; }
        new TranslatedString? Description { get; set; }
        new IFormLinkNullable<IKeywordGetter> WorkbenchKeyword { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new ExtendedList<ConstructibleObjectComponent>? ConstructableComponents { get; set; }
        new ExtendedList<ConstructibleRequiredPerk>? RequiredPerks { get; set; }
        new IFormLinkNullable<IConstructibleObjectTargetGetter> CreatedObject { get; set; }
        new UInt16 AmountProduced { get; set; }
        new Single MenuSortOrder { get; set; }
        new Byte Tier { get; set; }
        new SoundReference? CraftingSound { get; set; }
        new SoundReference? PickupSound { get; set; }
        new SoundReference? DropdownSound { get; set; }
        new ExtendedList<ConstructibleObjectComponent>? RepairComponents { get; set; }
        new ConstructibleObject.LearnMethodEnum? LearnMethod { get; set; }
        new UInt32 Value { get; set; }
        new IFormLinkNullable<IArtObjectGetter> MenuArtObject { get; set; }
        new IFormLinkNullable<IStarfieldMajorRecordGetter> LearnedFrom { get; set; }
        new IFormLinkNullable<ICurveTableGetter> BaseReturnScaleTable { get; set; }
        new IFormLinkNullable<IGlobalGetter> LearnChance { get; set; }
        new IFormLinkNullable<IGlobalGetter> MaxBuildCountGlobal { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? RecipeFilters { get; set; }
        new IFormLinkNullable<IKeywordGetter> InstantiationFilterKeyword { get; set; }
        new ConstructibleObject.Flag? Flags { get; set; }
        #region Mutagen
        new ConstructibleObject.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IConstructibleObjectInternal :
        IStarfieldMajorRecordInternal,
        IConstructibleObject,
        IConstructibleObjectGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.COBJ)]
    public partial interface IConstructibleObjectGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IConstructibleObjectGetter>,
        IMapsToGetter<IConstructibleObjectGetter>,
        IResearchResourceTargetGetter,
        IResourceTargetGetter
    {
        static new ILoquiRegistration StaticRegistration => ConstructibleObject_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        ITranslatedStringGetter? Description { get; }
        IFormLinkNullableGetter<IKeywordGetter> WorkbenchKeyword { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IReadOnlyList<IConstructibleObjectComponentGetter>? ConstructableComponents { get; }
        IReadOnlyList<IConstructibleRequiredPerkGetter>? RequiredPerks { get; }
        IFormLinkNullableGetter<IConstructibleObjectTargetGetter> CreatedObject { get; }
        UInt16 AmountProduced { get; }
        Single MenuSortOrder { get; }
        Byte Tier { get; }
        ISoundReferenceGetter? CraftingSound { get; }
        ISoundReferenceGetter? PickupSound { get; }
        ISoundReferenceGetter? DropdownSound { get; }
        IReadOnlyList<IConstructibleObjectComponentGetter>? RepairComponents { get; }
        ConstructibleObject.LearnMethodEnum? LearnMethod { get; }
        UInt32 Value { get; }
        IFormLinkNullableGetter<IArtObjectGetter> MenuArtObject { get; }
        IFormLinkNullableGetter<IStarfieldMajorRecordGetter> LearnedFrom { get; }
        IFormLinkNullableGetter<ICurveTableGetter> BaseReturnScaleTable { get; }
        IFormLinkNullableGetter<IGlobalGetter> LearnChance { get; }
        IFormLinkNullableGetter<IGlobalGetter> MaxBuildCountGlobal { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? RecipeFilters { get; }
        IFormLinkNullableGetter<IKeywordGetter> InstantiationFilterKeyword { get; }
        ConstructibleObject.Flag? Flags { get; }

        #region Mutagen
        ConstructibleObject.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class ConstructibleObjectMixIn
    {
        public static void Clear(this IConstructibleObjectInternal item)
        {
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ConstructibleObject.Mask<bool> GetEqualsMask(
            this IConstructibleObjectGetter item,
            IConstructibleObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IConstructibleObjectGetter item,
            string? name = null,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IConstructibleObjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IConstructibleObjectGetter item,
            IConstructibleObjectGetter rhs,
            ConstructibleObject.TranslationMask? equalsMask = null)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IConstructibleObjectInternal lhs,
            IConstructibleObjectGetter rhs,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ConstructibleObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IConstructibleObjectInternal lhs,
            IConstructibleObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ConstructibleObject DeepCopy(
            this IConstructibleObjectGetter item,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            return ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ConstructibleObject DeepCopy(
            this IConstructibleObjectGetter item,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            return ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ConstructibleObject DeepCopy(
            this IConstructibleObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ConstructibleObject Duplicate(
            this IConstructibleObjectGetter item,
            FormKey formKey,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ConstructibleObject Duplicate(
            this IConstructibleObjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IConstructibleObjectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ConstructibleObjectSetterCommon)((IConstructibleObjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ConstructibleObject_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Description = 8,
        WorkbenchKeyword = 9,
        Conditions = 10,
        ConstructableComponents = 11,
        RequiredPerks = 12,
        CreatedObject = 13,
        AmountProduced = 14,
        MenuSortOrder = 15,
        Tier = 16,
        CraftingSound = 17,
        PickupSound = 18,
        DropdownSound = 19,
        RepairComponents = 20,
        LearnMethod = 21,
        Value = 22,
        MenuArtObject = 23,
        LearnedFrom = 24,
        BaseReturnScaleTable = 25,
        LearnChance = 26,
        MaxBuildCountGlobal = 27,
        RecipeFilters = 28,
        InstantiationFilterKeyword = 29,
        Flags = 30,
    }
    #endregion

    #region Registration
    internal partial class ConstructibleObject_Registration : ILoquiRegistration
    {
        public static readonly ConstructibleObject_Registration Instance = new ConstructibleObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 24;

        public const ushort FieldCount = 31;

        public static readonly Type MaskType = typeof(ConstructibleObject.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ConstructibleObject.ErrorMask);

        public static readonly Type ClassType = typeof(ConstructibleObject);

        public static readonly Type GetterType = typeof(IConstructibleObjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IConstructibleObject);

        public static readonly Type? InternalSetterType = typeof(IConstructibleObjectInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.ConstructibleObject";

        public const string Name = "ConstructibleObject";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.COBJ;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.COBJ);
            var all = RecordCollection.Factory(
                RecordTypes.COBJ,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.DESC,
                RecordTypes.BNAM,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.FVPA,
                RecordTypes.RQPK,
                RecordTypes.CNAM,
                RecordTypes.NNAM,
                RecordTypes.SNAM,
                RecordTypes.TNAM,
                RecordTypes.CUSH,
                RecordTypes.PUSH,
                RecordTypes.PDSH,
                RecordTypes.REPR,
                RecordTypes.LRNM,
                RecordTypes.DATA,
                RecordTypes.ANAM,
                RecordTypes.GNAM,
                RecordTypes.CVT0,
                RecordTypes.LRNC,
                RecordTypes.JNAM,
                RecordTypes.FNAM,
                RecordTypes.CIFK,
                RecordTypes.RECF);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ConstructibleObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ConstructibleObjectSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly ConstructibleObjectSetterCommon Instance = new ConstructibleObjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IConstructibleObjectInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.Description = default;
            item.WorkbenchKeyword.Clear();
            item.Conditions.Clear();
            item.ConstructableComponents = null;
            item.RequiredPerks = null;
            item.CreatedObject.Clear();
            item.AmountProduced = default(UInt16);
            item.MenuSortOrder = default(Single);
            item.Tier = default(Byte);
            item.CraftingSound = null;
            item.PickupSound = null;
            item.DropdownSound = null;
            item.RepairComponents = null;
            item.LearnMethod = default;
            item.Value = default(UInt32);
            item.MenuArtObject.Clear();
            item.LearnedFrom.Clear();
            item.BaseReturnScaleTable.Clear();
            item.LearnChance.Clear();
            item.MaxBuildCountGlobal.Clear();
            item.RecipeFilters = null;
            item.InstantiationFilterKeyword.Clear();
            item.Flags = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IConstructibleObjectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IConstructibleObjectInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IConstructibleObject obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.WorkbenchKeyword.Relink(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.ConstructableComponents?.RemapLinks(mapping);
            obj.RequiredPerks?.RemapLinks(mapping);
            obj.CreatedObject.Relink(mapping);
            obj.CraftingSound?.RemapLinks(mapping);
            obj.PickupSound?.RemapLinks(mapping);
            obj.DropdownSound?.RemapLinks(mapping);
            obj.RepairComponents?.RemapLinks(mapping);
            obj.MenuArtObject.Relink(mapping);
            obj.LearnedFrom.Relink(mapping);
            obj.BaseReturnScaleTable.Relink(mapping);
            obj.LearnChance.Relink(mapping);
            obj.MaxBuildCountGlobal.Relink(mapping);
            obj.RecipeFilters?.RemapLinks(mapping);
            obj.InstantiationFilterKeyword.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IConstructibleObject obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IConstructibleObject obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IConstructibleObjectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IConstructibleObjectInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ConstructibleObjectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ConstructibleObjectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ConstructibleObject)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ConstructibleObject)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ConstructibleObjectCommon : StarfieldMajorRecordCommon
    {
        public new static readonly ConstructibleObjectCommon Instance = new ConstructibleObjectCommon();

        public ConstructibleObject.Mask<bool> GetEqualsMask(
            IConstructibleObjectGetter item,
            IConstructibleObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ConstructibleObject.Mask<bool>(false);
            ((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IConstructibleObjectGetter item,
            IConstructibleObjectGetter rhs,
            ConstructibleObject.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.WorkbenchKeyword = item.WorkbenchKeyword.Equals(rhs.WorkbenchKeyword);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ConstructableComponents = item.ConstructableComponents.CollectionEqualsHelper(
                rhs.ConstructableComponents,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.RequiredPerks = item.RequiredPerks.CollectionEqualsHelper(
                rhs.RequiredPerks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.CreatedObject = item.CreatedObject.Equals(rhs.CreatedObject);
            ret.AmountProduced = item.AmountProduced == rhs.AmountProduced;
            ret.MenuSortOrder = item.MenuSortOrder.EqualsWithin(rhs.MenuSortOrder);
            ret.Tier = item.Tier == rhs.Tier;
            ret.CraftingSound = EqualsMaskHelper.EqualsHelper(
                item.CraftingSound,
                rhs.CraftingSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PickupSound = EqualsMaskHelper.EqualsHelper(
                item.PickupSound,
                rhs.PickupSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DropdownSound = EqualsMaskHelper.EqualsHelper(
                item.DropdownSound,
                rhs.DropdownSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.RepairComponents = item.RepairComponents.CollectionEqualsHelper(
                rhs.RepairComponents,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LearnMethod = item.LearnMethod == rhs.LearnMethod;
            ret.Value = item.Value == rhs.Value;
            ret.MenuArtObject = item.MenuArtObject.Equals(rhs.MenuArtObject);
            ret.LearnedFrom = item.LearnedFrom.Equals(rhs.LearnedFrom);
            ret.BaseReturnScaleTable = item.BaseReturnScaleTable.Equals(rhs.BaseReturnScaleTable);
            ret.LearnChance = item.LearnChance.Equals(rhs.LearnChance);
            ret.MaxBuildCountGlobal = item.MaxBuildCountGlobal.Equals(rhs.MaxBuildCountGlobal);
            ret.RecipeFilters = item.RecipeFilters.CollectionEqualsHelper(
                rhs.RecipeFilters,
                (l, r) => object.Equals(l, r),
                include);
            ret.InstantiationFilterKeyword = item.InstantiationFilterKeyword.Equals(rhs.InstantiationFilterKeyword);
            ret.Flags = item.Flags == rhs.Flags;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IConstructibleObjectGetter item,
            string? name = null,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IConstructibleObjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ConstructibleObject =>");
            }
            else
            {
                sb.AppendLine($"{name} (ConstructibleObject) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IConstructibleObjectGetter item,
            StructuredStringBuilder sb,
            ConstructibleObject.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.WorkbenchKeyword ?? true)
            {
                sb.AppendItem(item.WorkbenchKeyword.FormKeyNullable, "WorkbenchKeyword");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ConstructableComponents?.Overall ?? true)
                && item.ConstructableComponents is {} ConstructableComponentsItem)
            {
                sb.AppendLine("ConstructableComponents =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ConstructableComponentsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.RequiredPerks?.Overall ?? true)
                && item.RequiredPerks is {} RequiredPerksItem)
            {
                sb.AppendLine("RequiredPerks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in RequiredPerksItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.CreatedObject ?? true)
            {
                sb.AppendItem(item.CreatedObject.FormKeyNullable, "CreatedObject");
            }
            if (printMask?.AmountProduced ?? true)
            {
                sb.AppendItem(item.AmountProduced, "AmountProduced");
            }
            if (printMask?.MenuSortOrder ?? true)
            {
                sb.AppendItem(item.MenuSortOrder, "MenuSortOrder");
            }
            if (printMask?.Tier ?? true)
            {
                sb.AppendItem(item.Tier, "Tier");
            }
            if ((printMask?.CraftingSound?.Overall ?? true)
                && item.CraftingSound is {} CraftingSoundItem)
            {
                CraftingSoundItem?.Print(sb, "CraftingSound");
            }
            if ((printMask?.PickupSound?.Overall ?? true)
                && item.PickupSound is {} PickupSoundItem)
            {
                PickupSoundItem?.Print(sb, "PickupSound");
            }
            if ((printMask?.DropdownSound?.Overall ?? true)
                && item.DropdownSound is {} DropdownSoundItem)
            {
                DropdownSoundItem?.Print(sb, "DropdownSound");
            }
            if ((printMask?.RepairComponents?.Overall ?? true)
                && item.RepairComponents is {} RepairComponentsItem)
            {
                sb.AppendLine("RepairComponents =>");
                using (sb.Brace())
                {
                    foreach (var subItem in RepairComponentsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.LearnMethod ?? true)
                && item.LearnMethod is {} LearnMethodItem)
            {
                sb.AppendItem(LearnMethodItem, "LearnMethod");
            }
            if (printMask?.Value ?? true)
            {
                sb.AppendItem(item.Value, "Value");
            }
            if (printMask?.MenuArtObject ?? true)
            {
                sb.AppendItem(item.MenuArtObject.FormKeyNullable, "MenuArtObject");
            }
            if (printMask?.LearnedFrom ?? true)
            {
                sb.AppendItem(item.LearnedFrom.FormKeyNullable, "LearnedFrom");
            }
            if (printMask?.BaseReturnScaleTable ?? true)
            {
                sb.AppendItem(item.BaseReturnScaleTable.FormKeyNullable, "BaseReturnScaleTable");
            }
            if (printMask?.LearnChance ?? true)
            {
                sb.AppendItem(item.LearnChance.FormKeyNullable, "LearnChance");
            }
            if (printMask?.MaxBuildCountGlobal ?? true)
            {
                sb.AppendItem(item.MaxBuildCountGlobal.FormKeyNullable, "MaxBuildCountGlobal");
            }
            if ((printMask?.RecipeFilters?.Overall ?? true)
                && item.RecipeFilters is {} RecipeFiltersItem)
            {
                sb.AppendLine("RecipeFilters =>");
                using (sb.Brace())
                {
                    foreach (var subItem in RecipeFiltersItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.InstantiationFilterKeyword ?? true)
            {
                sb.AppendItem(item.InstantiationFilterKeyword.FormKeyNullable, "InstantiationFilterKeyword");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
        }
        
        public static ConstructibleObject_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (ConstructibleObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ConstructibleObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ConstructibleObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ConstructibleObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IConstructibleObjectGetter? lhs,
            IConstructibleObjectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.WorkbenchKeyword) ?? true))
            {
                if (!lhs.WorkbenchKeyword.Equals(rhs.WorkbenchKeyword)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.ConstructableComponents) ?? true))
            {
                if (!lhs.ConstructableComponents.SequenceEqualNullable(rhs.ConstructableComponents, (l, r) => ((ConstructibleObjectComponentCommon)((IConstructibleObjectComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.ConstructableComponents)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.RequiredPerks) ?? true))
            {
                if (!lhs.RequiredPerks.SequenceEqualNullable(rhs.RequiredPerks, (l, r) => ((ConstructibleRequiredPerkCommon)((IConstructibleRequiredPerkGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.RequiredPerks)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.CreatedObject) ?? true))
            {
                if (!lhs.CreatedObject.Equals(rhs.CreatedObject)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.AmountProduced) ?? true))
            {
                if (lhs.AmountProduced != rhs.AmountProduced) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.MenuSortOrder) ?? true))
            {
                if (!lhs.MenuSortOrder.EqualsWithin(rhs.MenuSortOrder)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Tier) ?? true))
            {
                if (lhs.Tier != rhs.Tier) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.CraftingSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CraftingSound, rhs.CraftingSound, out var lhsCraftingSound, out var rhsCraftingSound, out var isCraftingSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsCraftingSound).CommonInstance()!).Equals(lhsCraftingSound, rhsCraftingSound, equalsMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.CraftingSound))) return false;
                }
                else if (!isCraftingSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.PickupSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PickupSound, rhs.PickupSound, out var lhsPickupSound, out var rhsPickupSound, out var isPickupSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsPickupSound).CommonInstance()!).Equals(lhsPickupSound, rhsPickupSound, equalsMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.PickupSound))) return false;
                }
                else if (!isPickupSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.DropdownSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DropdownSound, rhs.DropdownSound, out var lhsDropdownSound, out var rhsDropdownSound, out var isDropdownSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsDropdownSound).CommonInstance()!).Equals(lhsDropdownSound, rhsDropdownSound, equalsMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.DropdownSound))) return false;
                }
                else if (!isDropdownSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.RepairComponents) ?? true))
            {
                if (!lhs.RepairComponents.SequenceEqualNullable(rhs.RepairComponents, (l, r) => ((ConstructibleObjectComponentCommon)((IConstructibleObjectComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.RepairComponents)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.LearnMethod) ?? true))
            {
                if (lhs.LearnMethod != rhs.LearnMethod) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Value) ?? true))
            {
                if (lhs.Value != rhs.Value) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.MenuArtObject) ?? true))
            {
                if (!lhs.MenuArtObject.Equals(rhs.MenuArtObject)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.LearnedFrom) ?? true))
            {
                if (!lhs.LearnedFrom.Equals(rhs.LearnedFrom)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.BaseReturnScaleTable) ?? true))
            {
                if (!lhs.BaseReturnScaleTable.Equals(rhs.BaseReturnScaleTable)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.LearnChance) ?? true))
            {
                if (!lhs.LearnChance.Equals(rhs.LearnChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.MaxBuildCountGlobal) ?? true))
            {
                if (!lhs.MaxBuildCountGlobal.Equals(rhs.MaxBuildCountGlobal)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.RecipeFilters) ?? true))
            {
                if (!lhs.RecipeFilters.SequenceEqualNullable(rhs.RecipeFilters)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.InstantiationFilterKeyword) ?? true))
            {
                if (!lhs.InstantiationFilterKeyword.Equals(rhs.InstantiationFilterKeyword)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IConstructibleObjectGetter?)lhs,
                rhs: rhs as IConstructibleObjectGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IConstructibleObjectGetter?)lhs,
                rhs: rhs as IConstructibleObjectGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IConstructibleObjectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.WorkbenchKeyword);
            hash.Add(item.Conditions);
            hash.Add(item.ConstructableComponents);
            hash.Add(item.RequiredPerks);
            hash.Add(item.CreatedObject);
            hash.Add(item.AmountProduced);
            hash.Add(item.MenuSortOrder);
            hash.Add(item.Tier);
            if (item.CraftingSound is {} CraftingSounditem)
            {
                hash.Add(CraftingSounditem);
            }
            if (item.PickupSound is {} PickupSounditem)
            {
                hash.Add(PickupSounditem);
            }
            if (item.DropdownSound is {} DropdownSounditem)
            {
                hash.Add(DropdownSounditem);
            }
            hash.Add(item.RepairComponents);
            if (item.LearnMethod is {} LearnMethoditem)
            {
                hash.Add(LearnMethoditem);
            }
            hash.Add(item.Value);
            hash.Add(item.MenuArtObject);
            hash.Add(item.LearnedFrom);
            hash.Add(item.BaseReturnScaleTable);
            hash.Add(item.LearnChance);
            hash.Add(item.MaxBuildCountGlobal);
            hash.Add(item.RecipeFilters);
            hash.Add(item.InstantiationFilterKeyword);
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IConstructibleObjectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IConstructibleObjectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ConstructibleObject.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IConstructibleObjectGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.WorkbenchKeyword, out var WorkbenchKeywordInfo))
            {
                yield return WorkbenchKeywordInfo;
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.ConstructableComponents is {} ConstructableComponentsItem)
            {
                foreach (var item in ConstructableComponentsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.RequiredPerks is {} RequiredPerksItem)
            {
                foreach (var item in RequiredPerksItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.CreatedObject, out var CreatedObjectInfo))
            {
                yield return CreatedObjectInfo;
            }
            if (obj.CraftingSound is {} CraftingSoundItems)
            {
                foreach (var item in CraftingSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.PickupSound is {} PickupSoundItems)
            {
                foreach (var item in PickupSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.DropdownSound is {} DropdownSoundItems)
            {
                foreach (var item in DropdownSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.RepairComponents is {} RepairComponentsItem)
            {
                foreach (var item in RepairComponentsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.MenuArtObject, out var MenuArtObjectInfo))
            {
                yield return MenuArtObjectInfo;
            }
            if (FormLinkInformation.TryFactory(obj.LearnedFrom, out var LearnedFromInfo))
            {
                yield return LearnedFromInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseReturnScaleTable, out var BaseReturnScaleTableInfo))
            {
                yield return BaseReturnScaleTableInfo;
            }
            if (FormLinkInformation.TryFactory(obj.LearnChance, out var LearnChanceInfo))
            {
                yield return LearnChanceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MaxBuildCountGlobal, out var MaxBuildCountGlobalInfo))
            {
                yield return MaxBuildCountGlobalInfo;
            }
            if (obj.RecipeFilters is {} RecipeFiltersItem)
            {
                foreach (var item in RecipeFiltersItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.InstantiationFilterKeyword, out var InstantiationFilterKeywordInfo))
            {
                yield return InstantiationFilterKeywordInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IConstructibleObjectGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public ConstructibleObject Duplicate(
            IConstructibleObjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ConstructibleObject(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IConstructibleObjectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IConstructibleObjectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ConstructibleObjectSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly ConstructibleObjectSetterTranslationCommon Instance = new ConstructibleObjectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IConstructibleObjectInternal item,
            IConstructibleObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IConstructibleObject item,
            IConstructibleObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.WorkbenchKeyword) ?? true))
            {
                item.WorkbenchKeyword.SetTo(rhs.WorkbenchKeyword.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.ConstructableComponents) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.ConstructableComponents);
                try
                {
                    if ((rhs.ConstructableComponents != null))
                    {
                        item.ConstructableComponents = 
                            rhs.ConstructableComponents
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ConstructibleObjectComponent>();
                    }
                    else
                    {
                        item.ConstructableComponents = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.RequiredPerks) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.RequiredPerks);
                try
                {
                    if ((rhs.RequiredPerks != null))
                    {
                        item.RequiredPerks = 
                            rhs.RequiredPerks
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ConstructibleRequiredPerk>();
                    }
                    else
                    {
                        item.RequiredPerks = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.CreatedObject) ?? true))
            {
                item.CreatedObject.SetTo(rhs.CreatedObject.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.AmountProduced) ?? true))
            {
                item.AmountProduced = rhs.AmountProduced;
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.MenuSortOrder) ?? true))
            {
                item.MenuSortOrder = rhs.MenuSortOrder;
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Tier) ?? true))
            {
                item.Tier = rhs.Tier;
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.CraftingSound) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.CraftingSound);
                try
                {
                    if(rhs.CraftingSound is {} rhsCraftingSound)
                    {
                        item.CraftingSound = rhsCraftingSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.CraftingSound));
                    }
                    else
                    {
                        item.CraftingSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.PickupSound) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.PickupSound);
                try
                {
                    if(rhs.PickupSound is {} rhsPickupSound)
                    {
                        item.PickupSound = rhsPickupSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.PickupSound));
                    }
                    else
                    {
                        item.PickupSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.DropdownSound) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.DropdownSound);
                try
                {
                    if(rhs.DropdownSound is {} rhsDropdownSound)
                    {
                        item.DropdownSound = rhsDropdownSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ConstructibleObject_FieldIndex.DropdownSound));
                    }
                    else
                    {
                        item.DropdownSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.RepairComponents) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.RepairComponents);
                try
                {
                    if ((rhs.RepairComponents != null))
                    {
                        item.RepairComponents = 
                            rhs.RepairComponents
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ConstructibleObjectComponent>();
                    }
                    else
                    {
                        item.RepairComponents = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.LearnMethod) ?? true))
            {
                item.LearnMethod = rhs.LearnMethod;
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.MenuArtObject) ?? true))
            {
                item.MenuArtObject.SetTo(rhs.MenuArtObject.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.LearnedFrom) ?? true))
            {
                item.LearnedFrom.SetTo(rhs.LearnedFrom.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.BaseReturnScaleTable) ?? true))
            {
                item.BaseReturnScaleTable.SetTo(rhs.BaseReturnScaleTable.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.LearnChance) ?? true))
            {
                item.LearnChance.SetTo(rhs.LearnChance.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.MaxBuildCountGlobal) ?? true))
            {
                item.MaxBuildCountGlobal.SetTo(rhs.MaxBuildCountGlobal.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.RecipeFilters) ?? true))
            {
                errorMask?.PushIndex((int)ConstructibleObject_FieldIndex.RecipeFilters);
                try
                {
                    if ((rhs.RecipeFilters != null))
                    {
                        item.RecipeFilters = 
                            rhs.RecipeFilters
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.RecipeFilters = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.InstantiationFilterKeyword) ?? true))
            {
                item.InstantiationFilterKeyword.SetTo(rhs.InstantiationFilterKeyword.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ConstructibleObject_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IConstructibleObject item,
            IConstructibleObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IConstructibleObjectInternal)item,
                rhs: (IConstructibleObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IConstructibleObject)item,
                rhs: (IConstructibleObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IConstructibleObjectInternal)item,
                rhs: (IConstructibleObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IConstructibleObject)item,
                rhs: (IConstructibleObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ConstructibleObject DeepCopy(
            IConstructibleObjectGetter item,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            ConstructibleObject ret = (ConstructibleObject)((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).GetNew();
            ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ConstructibleObject DeepCopy(
            IConstructibleObjectGetter item,
            out ConstructibleObject.ErrorMask errorMask,
            ConstructibleObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ConstructibleObject ret = (ConstructibleObject)((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).GetNew();
            ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ConstructibleObject.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ConstructibleObject DeepCopy(
            IConstructibleObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ConstructibleObject ret = (ConstructibleObject)((ConstructibleObjectCommon)((IConstructibleObjectGetter)item).CommonInstance()!).GetNew();
            ((ConstructibleObjectSetterTranslationCommon)((IConstructibleObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ConstructibleObject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ConstructibleObject_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ConstructibleObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ConstructibleObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ConstructibleObjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ConstructibleObjectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ConstructibleObjectBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ConstructibleObjectBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IConstructibleObjectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WorkbenchKeyword,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConstructibleObjectComponentGetter>.Instance.Write(
                writer: writer,
                items: item.ConstructableComponents,
                recordType: translationParams.ConvertToCustom(RecordTypes.FVPA),
                transl: (MutagenWriter subWriter, IConstructibleObjectComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConstructibleObjectComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConstructibleRequiredPerkGetter>.Instance.Write(
                writer: writer,
                items: item.RequiredPerks,
                recordType: translationParams.ConvertToCustom(RecordTypes.RQPK),
                transl: (MutagenWriter subWriter, IConstructibleRequiredPerkGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConstructibleRequiredPerkBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CreatedObject,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AmountProduced,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MenuSortOrder,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Tier,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            if (item.CraftingSound is {} CraftingSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.CUSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)CraftingSoundItem).BinaryWriteTranslator).Write(
                        item: CraftingSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.PickupSound is {} PickupSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.PUSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)PickupSoundItem).BinaryWriteTranslator).Write(
                        item: PickupSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.DropdownSound is {} DropdownSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.PDSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)DropdownSoundItem).BinaryWriteTranslator).Write(
                        item: DropdownSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConstructibleObjectComponentGetter>.Instance.Write(
                writer: writer,
                items: item.RepairComponents,
                recordType: translationParams.ConvertToCustom(RecordTypes.REPR),
                transl: (MutagenWriter subWriter, IConstructibleObjectComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConstructibleObjectComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            EnumBinaryTranslation<ConstructibleObject.LearnMethodEnum, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.LearnMethod,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.LRNM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Value,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MenuArtObject,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LearnedFrom,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseReturnScaleTable,
                header: translationParams.ConvertToCustom(RecordTypes.CVT0));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LearnChance,
                header: translationParams.ConvertToCustom(RecordTypes.LRNC));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaxBuildCountGlobal,
                header: translationParams.ConvertToCustom(RecordTypes.JNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.RecipeFilters,
                recordType: translationParams.ConvertToCustom(RecordTypes.FNAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InstantiationFilterKeyword,
                header: translationParams.ConvertToCustom(RecordTypes.CIFK));
            EnumBinaryTranslation<ConstructibleObject.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 8,
                header: translationParams.ConvertToCustom(RecordTypes.RECF));
        }

        public void Write(
            MutagenWriter writer,
            IConstructibleObjectGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.COBJ,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IConstructibleObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IConstructibleObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IConstructibleObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ConstructibleObjectBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly ConstructibleObjectBinaryCreateTranslation Instance = new ConstructibleObjectBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.COBJ;
        public static ParseResult FillBinaryRecordTypes(
            IConstructibleObjectInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)ConstructibleObject_FieldIndex.Components;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ConstructibleObject_FieldIndex.Description;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WorkbenchKeyword.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.WorkbenchKeyword;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)ConstructibleObject_FieldIndex.Conditions;
                }
                case RecordTypeInts.FVPA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ConstructableComponents = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ConstructibleObjectComponent>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ConstructibleObjectComponent.TryCreateFromBinary)
                        .CastExtendedList<ConstructibleObjectComponent>();
                    return (int)ConstructibleObject_FieldIndex.ConstructableComponents;
                }
                case RecordTypeInts.RQPK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RequiredPerks = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ConstructibleRequiredPerk>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ConstructibleRequiredPerk.TryCreateFromBinary)
                        .CastExtendedList<ConstructibleRequiredPerk>();
                    return (int)ConstructibleObject_FieldIndex.RequiredPerks;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CreatedObject.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.CreatedObject;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AmountProduced = frame.ReadUInt16();
                    return (int)ConstructibleObject_FieldIndex.AmountProduced;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MenuSortOrder = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ConstructibleObject_FieldIndex.MenuSortOrder;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Tier = frame.ReadUInt8();
                    return (int)ConstructibleObject_FieldIndex.Tier;
                }
                case RecordTypeInts.CUSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.CraftingSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)ConstructibleObject_FieldIndex.CraftingSound;
                }
                case RecordTypeInts.PUSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.PickupSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)ConstructibleObject_FieldIndex.PickupSound;
                }
                case RecordTypeInts.PDSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.DropdownSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)ConstructibleObject_FieldIndex.DropdownSound;
                }
                case RecordTypeInts.REPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RepairComponents = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ConstructibleObjectComponent>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ConstructibleObjectComponent.TryCreateFromBinary)
                        .CastExtendedList<ConstructibleObjectComponent>();
                    return (int)ConstructibleObject_FieldIndex.RepairComponents;
                }
                case RecordTypeInts.LRNM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LearnMethod = EnumBinaryTranslation<ConstructibleObject.LearnMethodEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)ConstructibleObject_FieldIndex.LearnMethod;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Value = frame.ReadUInt32();
                    return (int)ConstructibleObject_FieldIndex.Value;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MenuArtObject.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.MenuArtObject;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LearnedFrom.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.LearnedFrom;
                }
                case RecordTypeInts.CVT0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseReturnScaleTable.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.BaseReturnScaleTable;
                }
                case RecordTypeInts.LRNC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LearnChance.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.LearnChance;
                }
                case RecordTypeInts.JNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaxBuildCountGlobal.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.MaxBuildCountGlobal;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RecipeFilters = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)ConstructibleObject_FieldIndex.RecipeFilters;
                }
                case RecordTypeInts.CIFK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InstantiationFilterKeyword.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ConstructibleObject_FieldIndex.InstantiationFilterKeyword;
                }
                case RecordTypeInts.RECF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<ConstructibleObject.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)ConstructibleObject_FieldIndex.Flags;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ConstructibleObjectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ConstructibleObjectBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IConstructibleObjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ConstructibleObject_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ConstructibleObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ConstructibleObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ConstructibleObjectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ConstructibleObjectCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ConstructibleObjectCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ConstructibleObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ConstructibleObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IConstructibleObject);

        public ConstructibleObject.MajorFlag MajorFlags => (ConstructibleObject.MajorFlag)this.MajorRecordFlagsRaw;

        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        #region WorkbenchKeyword
        private int? _WorkbenchKeywordLocation;
        public IFormLinkNullableGetter<IKeywordGetter> WorkbenchKeyword => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _WorkbenchKeywordLocation);
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = Array.Empty<IConditionGetter>();
        public IReadOnlyList<IConstructibleObjectComponentGetter>? ConstructableComponents { get; private set; }
        public IReadOnlyList<IConstructibleRequiredPerkGetter>? RequiredPerks { get; private set; }
        #region CreatedObject
        private int? _CreatedObjectLocation;
        public IFormLinkNullableGetter<IConstructibleObjectTargetGetter> CreatedObject => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IConstructibleObjectTargetGetter>(_package, _recordData, _CreatedObjectLocation);
        #endregion
        #region AmountProduced
        private int? _AmountProducedLocation;
        public UInt16 AmountProduced => _AmountProducedLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AmountProducedLocation.Value, _package.MetaData.Constants)) : default(UInt16);
        #endregion
        #region MenuSortOrder
        private int? _MenuSortOrderLocation;
        public Single MenuSortOrder => _MenuSortOrderLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _MenuSortOrderLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region Tier
        private int? _TierLocation;
        public Byte Tier => _TierLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TierLocation.Value, _package.MetaData.Constants)[0] : default(Byte);
        #endregion
        public ISoundReferenceGetter? CraftingSound { get; private set; }
        public ISoundReferenceGetter? PickupSound { get; private set; }
        public ISoundReferenceGetter? DropdownSound { get; private set; }
        public IReadOnlyList<IConstructibleObjectComponentGetter>? RepairComponents { get; private set; }
        #region LearnMethod
        private int? _LearnMethodLocation;
        public ConstructibleObject.LearnMethodEnum? LearnMethod => _LearnMethodLocation.HasValue ? (ConstructibleObject.LearnMethodEnum)HeaderTranslation.ExtractSubrecordMemory(_recordData, _LearnMethodLocation!.Value, _package.MetaData.Constants)[0] : default(ConstructibleObject.LearnMethodEnum?);
        #endregion
        #region Value
        private int? _ValueLocation;
        public UInt32 Value => _ValueLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ValueLocation.Value, _package.MetaData.Constants)) : default(UInt32);
        #endregion
        #region MenuArtObject
        private int? _MenuArtObjectLocation;
        public IFormLinkNullableGetter<IArtObjectGetter> MenuArtObject => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArtObjectGetter>(_package, _recordData, _MenuArtObjectLocation);
        #endregion
        #region LearnedFrom
        private int? _LearnedFromLocation;
        public IFormLinkNullableGetter<IStarfieldMajorRecordGetter> LearnedFrom => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IStarfieldMajorRecordGetter>(_package, _recordData, _LearnedFromLocation);
        #endregion
        #region BaseReturnScaleTable
        private int? _BaseReturnScaleTableLocation;
        public IFormLinkNullableGetter<ICurveTableGetter> BaseReturnScaleTable => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICurveTableGetter>(_package, _recordData, _BaseReturnScaleTableLocation);
        #endregion
        #region LearnChance
        private int? _LearnChanceLocation;
        public IFormLinkNullableGetter<IGlobalGetter> LearnChance => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _LearnChanceLocation);
        #endregion
        #region MaxBuildCountGlobal
        private int? _MaxBuildCountGlobalLocation;
        public IFormLinkNullableGetter<IGlobalGetter> MaxBuildCountGlobal => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _MaxBuildCountGlobalLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? RecipeFilters { get; private set; }
        #region InstantiationFilterKeyword
        private int? _InstantiationFilterKeywordLocation;
        public IFormLinkNullableGetter<IKeywordGetter> InstantiationFilterKeyword => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _InstantiationFilterKeywordLocation);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public ConstructibleObject.Flag? Flags => _FlagsLocation.HasValue ? (ConstructibleObject.Flag)BinaryPrimitives.ReadInt64LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(ConstructibleObject.Flag?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ConstructibleObjectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IConstructibleObjectGetter ConstructibleObjectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ConstructibleObjectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IConstructibleObjectGetter ConstructibleObjectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ConstructibleObjectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)ConstructibleObject_FieldIndex.Components;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.Description;
                }
                case RecordTypeInts.BNAM:
                {
                    _WorkbenchKeywordLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.WorkbenchKeyword;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)ConstructibleObject_FieldIndex.Conditions;
                }
                case RecordTypeInts.FVPA:
                {
                    this.ConstructableComponents = BinaryOverlayList.FactoryByStartIndexWithTrigger<IConstructibleObjectComponentGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => ConstructibleObjectComponentBinaryOverlay.ConstructibleObjectComponentFactory(s, p));
                    return (int)ConstructibleObject_FieldIndex.ConstructableComponents;
                }
                case RecordTypeInts.RQPK:
                {
                    this.RequiredPerks = BinaryOverlayList.FactoryByStartIndexWithTrigger<IConstructibleRequiredPerkGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => ConstructibleRequiredPerkBinaryOverlay.ConstructibleRequiredPerkFactory(s, p));
                    return (int)ConstructibleObject_FieldIndex.RequiredPerks;
                }
                case RecordTypeInts.CNAM:
                {
                    _CreatedObjectLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.CreatedObject;
                }
                case RecordTypeInts.NNAM:
                {
                    _AmountProducedLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.AmountProduced;
                }
                case RecordTypeInts.SNAM:
                {
                    _MenuSortOrderLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.MenuSortOrder;
                }
                case RecordTypeInts.TNAM:
                {
                    _TierLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.Tier;
                }
                case RecordTypeInts.CUSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.CraftingSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)ConstructibleObject_FieldIndex.CraftingSound;
                }
                case RecordTypeInts.PUSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.PickupSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)ConstructibleObject_FieldIndex.PickupSound;
                }
                case RecordTypeInts.PDSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.DropdownSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)ConstructibleObject_FieldIndex.DropdownSound;
                }
                case RecordTypeInts.REPR:
                {
                    this.RepairComponents = BinaryOverlayList.FactoryByStartIndexWithTrigger<IConstructibleObjectComponentGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => ConstructibleObjectComponentBinaryOverlay.ConstructibleObjectComponentFactory(s, p));
                    return (int)ConstructibleObject_FieldIndex.RepairComponents;
                }
                case RecordTypeInts.LRNM:
                {
                    _LearnMethodLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.LearnMethod;
                }
                case RecordTypeInts.DATA:
                {
                    _ValueLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.Value;
                }
                case RecordTypeInts.ANAM:
                {
                    _MenuArtObjectLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.MenuArtObject;
                }
                case RecordTypeInts.GNAM:
                {
                    _LearnedFromLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.LearnedFrom;
                }
                case RecordTypeInts.CVT0:
                {
                    _BaseReturnScaleTableLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.BaseReturnScaleTable;
                }
                case RecordTypeInts.LRNC:
                {
                    _LearnChanceLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.LearnChance;
                }
                case RecordTypeInts.JNAM:
                {
                    _MaxBuildCountGlobalLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.MaxBuildCountGlobal;
                }
                case RecordTypeInts.FNAM:
                {
                    this.RecipeFilters = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)ConstructibleObject_FieldIndex.RecipeFilters;
                }
                case RecordTypeInts.CIFK:
                {
                    _InstantiationFilterKeywordLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.InstantiationFilterKeyword;
                }
                case RecordTypeInts.RECF:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)ConstructibleObject_FieldIndex.Flags;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ConstructibleObjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ConstructibleObject>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IConstructibleObjectGetter rhs) return false;
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IConstructibleObjectGetter? obj)
        {
            return ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ConstructibleObjectCommon)((IConstructibleObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

