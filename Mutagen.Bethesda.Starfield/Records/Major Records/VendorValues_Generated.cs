/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class VendorValues :
        IEquatable<IVendorValuesGetter>,
        ILoquiObjectSetter<VendorValues>,
        IVendorValues
    {
        #region Ctor
        public VendorValues()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region StartHour
        public UInt16 StartHour { get; set; } = default(UInt16);
        #endregion
        #region EndHour
        public UInt16 EndHour { get; set; } = default(UInt16);
        #endregion
        #region Radius
        public Single Radius { get; set; } = default(Single);
        #endregion
        #region BuysStolenItems
        public Boolean BuysStolenItems { get; set; } = default(Boolean);
        #endregion
        #region BuySellEverythingNotInList
        public Boolean BuySellEverythingNotInList { get; set; } = default(Boolean);
        #endregion
        #region BuysNonStolenItems
        public Boolean BuysNonStolenItems { get; set; } = default(Boolean);
        #endregion
        #region Unknown
        public Byte Unknown { get; set; } = default(Byte);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            VendorValuesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IVendorValuesGetter rhs) return false;
            return ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IVendorValuesGetter? obj)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.StartHour = initialValue;
                this.EndHour = initialValue;
                this.Radius = initialValue;
                this.BuysStolenItems = initialValue;
                this.BuySellEverythingNotInList = initialValue;
                this.BuysNonStolenItems = initialValue;
                this.Unknown = initialValue;
            }

            public Mask(
                TItem StartHour,
                TItem EndHour,
                TItem Radius,
                TItem BuysStolenItems,
                TItem BuySellEverythingNotInList,
                TItem BuysNonStolenItems,
                TItem Unknown)
            {
                this.StartHour = StartHour;
                this.EndHour = EndHour;
                this.Radius = Radius;
                this.BuysStolenItems = BuysStolenItems;
                this.BuySellEverythingNotInList = BuySellEverythingNotInList;
                this.BuysNonStolenItems = BuysNonStolenItems;
                this.Unknown = Unknown;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem StartHour;
            public TItem EndHour;
            public TItem Radius;
            public TItem BuysStolenItems;
            public TItem BuySellEverythingNotInList;
            public TItem BuysNonStolenItems;
            public TItem Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.StartHour, rhs.StartHour)) return false;
                if (!object.Equals(this.EndHour, rhs.EndHour)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.BuysStolenItems, rhs.BuysStolenItems)) return false;
                if (!object.Equals(this.BuySellEverythingNotInList, rhs.BuySellEverythingNotInList)) return false;
                if (!object.Equals(this.BuysNonStolenItems, rhs.BuysNonStolenItems)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.StartHour);
                hash.Add(this.EndHour);
                hash.Add(this.Radius);
                hash.Add(this.BuysStolenItems);
                hash.Add(this.BuySellEverythingNotInList);
                hash.Add(this.BuysNonStolenItems);
                hash.Add(this.Unknown);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.StartHour)) return false;
                if (!eval(this.EndHour)) return false;
                if (!eval(this.Radius)) return false;
                if (!eval(this.BuysStolenItems)) return false;
                if (!eval(this.BuySellEverythingNotInList)) return false;
                if (!eval(this.BuysNonStolenItems)) return false;
                if (!eval(this.Unknown)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.StartHour)) return true;
                if (eval(this.EndHour)) return true;
                if (eval(this.Radius)) return true;
                if (eval(this.BuysStolenItems)) return true;
                if (eval(this.BuySellEverythingNotInList)) return true;
                if (eval(this.BuysNonStolenItems)) return true;
                if (eval(this.Unknown)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new VendorValues.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.StartHour = eval(this.StartHour);
                obj.EndHour = eval(this.EndHour);
                obj.Radius = eval(this.Radius);
                obj.BuysStolenItems = eval(this.BuysStolenItems);
                obj.BuySellEverythingNotInList = eval(this.BuySellEverythingNotInList);
                obj.BuysNonStolenItems = eval(this.BuysNonStolenItems);
                obj.Unknown = eval(this.Unknown);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(VendorValues.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, VendorValues.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(VendorValues.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.StartHour ?? true)
                    {
                        sb.AppendItem(StartHour, "StartHour");
                    }
                    if (printMask?.EndHour ?? true)
                    {
                        sb.AppendItem(EndHour, "EndHour");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        sb.AppendItem(Radius, "Radius");
                    }
                    if (printMask?.BuysStolenItems ?? true)
                    {
                        sb.AppendItem(BuysStolenItems, "BuysStolenItems");
                    }
                    if (printMask?.BuySellEverythingNotInList ?? true)
                    {
                        sb.AppendItem(BuySellEverythingNotInList, "BuySellEverythingNotInList");
                    }
                    if (printMask?.BuysNonStolenItems ?? true)
                    {
                        sb.AppendItem(BuysNonStolenItems, "BuysNonStolenItems");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? StartHour;
            public Exception? EndHour;
            public Exception? Radius;
            public Exception? BuysStolenItems;
            public Exception? BuySellEverythingNotInList;
            public Exception? BuysNonStolenItems;
            public Exception? Unknown;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
                switch (enu)
                {
                    case VendorValues_FieldIndex.StartHour:
                        return StartHour;
                    case VendorValues_FieldIndex.EndHour:
                        return EndHour;
                    case VendorValues_FieldIndex.Radius:
                        return Radius;
                    case VendorValues_FieldIndex.BuysStolenItems:
                        return BuysStolenItems;
                    case VendorValues_FieldIndex.BuySellEverythingNotInList:
                        return BuySellEverythingNotInList;
                    case VendorValues_FieldIndex.BuysNonStolenItems:
                        return BuysNonStolenItems;
                    case VendorValues_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
                switch (enu)
                {
                    case VendorValues_FieldIndex.StartHour:
                        this.StartHour = ex;
                        break;
                    case VendorValues_FieldIndex.EndHour:
                        this.EndHour = ex;
                        break;
                    case VendorValues_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case VendorValues_FieldIndex.BuysStolenItems:
                        this.BuysStolenItems = ex;
                        break;
                    case VendorValues_FieldIndex.BuySellEverythingNotInList:
                        this.BuySellEverythingNotInList = ex;
                        break;
                    case VendorValues_FieldIndex.BuysNonStolenItems:
                        this.BuysNonStolenItems = ex;
                        break;
                    case VendorValues_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                VendorValues_FieldIndex enu = (VendorValues_FieldIndex)index;
                switch (enu)
                {
                    case VendorValues_FieldIndex.StartHour:
                        this.StartHour = (Exception?)obj;
                        break;
                    case VendorValues_FieldIndex.EndHour:
                        this.EndHour = (Exception?)obj;
                        break;
                    case VendorValues_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case VendorValues_FieldIndex.BuysStolenItems:
                        this.BuysStolenItems = (Exception?)obj;
                        break;
                    case VendorValues_FieldIndex.BuySellEverythingNotInList:
                        this.BuySellEverythingNotInList = (Exception?)obj;
                        break;
                    case VendorValues_FieldIndex.BuysNonStolenItems:
                        this.BuysNonStolenItems = (Exception?)obj;
                        break;
                    case VendorValues_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (StartHour != null) return true;
                if (EndHour != null) return true;
                if (Radius != null) return true;
                if (BuysStolenItems != null) return true;
                if (BuySellEverythingNotInList != null) return true;
                if (BuysNonStolenItems != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(StartHour, "StartHour");
                }
                {
                    sb.AppendItem(EndHour, "EndHour");
                }
                {
                    sb.AppendItem(Radius, "Radius");
                }
                {
                    sb.AppendItem(BuysStolenItems, "BuysStolenItems");
                }
                {
                    sb.AppendItem(BuySellEverythingNotInList, "BuySellEverythingNotInList");
                }
                {
                    sb.AppendItem(BuysNonStolenItems, "BuysNonStolenItems");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.StartHour = this.StartHour.Combine(rhs.StartHour);
                ret.EndHour = this.EndHour.Combine(rhs.EndHour);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.BuysStolenItems = this.BuysStolenItems.Combine(rhs.BuysStolenItems);
                ret.BuySellEverythingNotInList = this.BuySellEverythingNotInList.Combine(rhs.BuySellEverythingNotInList);
                ret.BuysNonStolenItems = this.BuysNonStolenItems.Combine(rhs.BuysNonStolenItems);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool StartHour;
            public bool EndHour;
            public bool Radius;
            public bool BuysStolenItems;
            public bool BuySellEverythingNotInList;
            public bool BuysNonStolenItems;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.StartHour = defaultOn;
                this.EndHour = defaultOn;
                this.Radius = defaultOn;
                this.BuysStolenItems = defaultOn;
                this.BuySellEverythingNotInList = defaultOn;
                this.BuysNonStolenItems = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((StartHour, null));
                ret.Add((EndHour, null));
                ret.Add((Radius, null));
                ret.Add((BuysStolenItems, null));
                ret.Add((BuySellEverythingNotInList, null));
                ret.Add((BuysNonStolenItems, null));
                ret.Add((Unknown, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => VendorValuesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VendorValuesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static VendorValues CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new VendorValues();
            ((VendorValuesSetterCommon)((IVendorValuesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out VendorValues item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((VendorValuesSetterCommon)((IVendorValuesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static VendorValues GetNew()
        {
            return new VendorValues();
        }

    }
    #endregion

    #region Interface
    public partial interface IVendorValues :
        ILoquiObjectSetter<IVendorValues>,
        IVendorValuesGetter
    {
        new UInt16 StartHour { get; set; }
        new UInt16 EndHour { get; set; }
        new Single Radius { get; set; }
        new Boolean BuysStolenItems { get; set; }
        new Boolean BuySellEverythingNotInList { get; set; }
        new Boolean BuysNonStolenItems { get; set; }
        new Byte Unknown { get; set; }
    }

    public partial interface IVendorValuesGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IVendorValuesGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => VendorValues_Registration.Instance;
        UInt16 StartHour { get; }
        UInt16 EndHour { get; }
        Single Radius { get; }
        Boolean BuysStolenItems { get; }
        Boolean BuySellEverythingNotInList { get; }
        Boolean BuysNonStolenItems { get; }
        Byte Unknown { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class VendorValuesMixIn
    {
        public static void Clear(this IVendorValues item)
        {
            ((VendorValuesSetterCommon)((IVendorValuesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static VendorValues.Mask<bool> GetEqualsMask(
            this IVendorValuesGetter item,
            IVendorValuesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IVendorValuesGetter item,
            string? name = null,
            VendorValues.Mask<bool>? printMask = null)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IVendorValuesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            VendorValues.Mask<bool>? printMask = null)
        {
            ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IVendorValuesGetter item,
            IVendorValuesGetter rhs,
            VendorValues.TranslationMask? equalsMask = null)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IVendorValues lhs,
            IVendorValuesGetter rhs)
        {
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IVendorValues lhs,
            IVendorValuesGetter rhs,
            VendorValues.TranslationMask? copyMask = null)
        {
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IVendorValues lhs,
            IVendorValuesGetter rhs,
            out VendorValues.ErrorMask errorMask,
            VendorValues.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = VendorValues.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IVendorValues lhs,
            IVendorValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static VendorValues DeepCopy(
            this IVendorValuesGetter item,
            VendorValues.TranslationMask? copyMask = null)
        {
            return ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static VendorValues DeepCopy(
            this IVendorValuesGetter item,
            out VendorValues.ErrorMask errorMask,
            VendorValues.TranslationMask? copyMask = null)
        {
            return ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static VendorValues DeepCopy(
            this IVendorValuesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IVendorValues item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((VendorValuesSetterCommon)((IVendorValuesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum VendorValues_FieldIndex
    {
        StartHour = 0,
        EndHour = 1,
        Radius = 2,
        BuysStolenItems = 3,
        BuySellEverythingNotInList = 4,
        BuysNonStolenItems = 5,
        Unknown = 6,
    }
    #endregion

    #region Registration
    internal partial class VendorValues_Registration : ILoquiRegistration
    {
        public static readonly VendorValues_Registration Instance = new VendorValues_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(VendorValues.Mask<>);

        public static readonly Type ErrorMaskType = typeof(VendorValues.ErrorMask);

        public static readonly Type ClassType = typeof(VendorValues);

        public static readonly Type GetterType = typeof(IVendorValuesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IVendorValues);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.VendorValues";

        public const string Name = "VendorValues";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.VENV;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.VENV);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(VendorValuesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class VendorValuesSetterCommon
    {
        public static readonly VendorValuesSetterCommon Instance = new VendorValuesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IVendorValues item)
        {
            ClearPartial();
            item.StartHour = default(UInt16);
            item.EndHour = default(UInt16);
            item.Radius = default(Single);
            item.BuysStolenItems = default(Boolean);
            item.BuySellEverythingNotInList = default(Boolean);
            item.BuysNonStolenItems = default(Boolean);
            item.Unknown = default(Byte);
        }
        
        #region Mutagen
        public void RemapLinks(IVendorValues obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IVendorValues item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.VENV),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: VendorValuesBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class VendorValuesCommon
    {
        public static readonly VendorValuesCommon Instance = new VendorValuesCommon();

        public VendorValues.Mask<bool> GetEqualsMask(
            IVendorValuesGetter item,
            IVendorValuesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new VendorValues.Mask<bool>(false);
            ((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IVendorValuesGetter item,
            IVendorValuesGetter rhs,
            VendorValues.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.StartHour = item.StartHour == rhs.StartHour;
            ret.EndHour = item.EndHour == rhs.EndHour;
            ret.Radius = item.Radius.EqualsWithin(rhs.Radius);
            ret.BuysStolenItems = item.BuysStolenItems == rhs.BuysStolenItems;
            ret.BuySellEverythingNotInList = item.BuySellEverythingNotInList == rhs.BuySellEverythingNotInList;
            ret.BuysNonStolenItems = item.BuysNonStolenItems == rhs.BuysNonStolenItems;
            ret.Unknown = item.Unknown == rhs.Unknown;
        }
        
        public string Print(
            IVendorValuesGetter item,
            string? name = null,
            VendorValues.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IVendorValuesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            VendorValues.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"VendorValues =>");
            }
            else
            {
                sb.AppendLine($"{name} (VendorValues) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IVendorValuesGetter item,
            StructuredStringBuilder sb,
            VendorValues.Mask<bool>? printMask = null)
        {
            if (printMask?.StartHour ?? true)
            {
                sb.AppendItem(item.StartHour, "StartHour");
            }
            if (printMask?.EndHour ?? true)
            {
                sb.AppendItem(item.EndHour, "EndHour");
            }
            if (printMask?.Radius ?? true)
            {
                sb.AppendItem(item.Radius, "Radius");
            }
            if (printMask?.BuysStolenItems ?? true)
            {
                sb.AppendItem(item.BuysStolenItems, "BuysStolenItems");
            }
            if (printMask?.BuySellEverythingNotInList ?? true)
            {
                sb.AppendItem(item.BuySellEverythingNotInList, "BuySellEverythingNotInList");
            }
            if (printMask?.BuysNonStolenItems ?? true)
            {
                sb.AppendItem(item.BuysNonStolenItems, "BuysNonStolenItems");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IVendorValuesGetter? lhs,
            IVendorValuesGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)VendorValues_FieldIndex.StartHour) ?? true))
            {
                if (lhs.StartHour != rhs.StartHour) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VendorValues_FieldIndex.EndHour) ?? true))
            {
                if (lhs.EndHour != rhs.EndHour) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VendorValues_FieldIndex.Radius) ?? true))
            {
                if (!lhs.Radius.EqualsWithin(rhs.Radius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VendorValues_FieldIndex.BuysStolenItems) ?? true))
            {
                if (lhs.BuysStolenItems != rhs.BuysStolenItems) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VendorValues_FieldIndex.BuySellEverythingNotInList) ?? true))
            {
                if (lhs.BuySellEverythingNotInList != rhs.BuySellEverythingNotInList) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VendorValues_FieldIndex.BuysNonStolenItems) ?? true))
            {
                if (lhs.BuysNonStolenItems != rhs.BuysNonStolenItems) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VendorValues_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IVendorValuesGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.StartHour);
            hash.Add(item.EndHour);
            hash.Add(item.Radius);
            hash.Add(item.BuysStolenItems);
            hash.Add(item.BuySellEverythingNotInList);
            hash.Add(item.BuysNonStolenItems);
            hash.Add(item.Unknown);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return VendorValues.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IVendorValuesGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class VendorValuesSetterTranslationCommon
    {
        public static readonly VendorValuesSetterTranslationCommon Instance = new VendorValuesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IVendorValues item,
            IVendorValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.StartHour) ?? true))
            {
                item.StartHour = rhs.StartHour;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.EndHour) ?? true))
            {
                item.EndHour = rhs.EndHour;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.BuysStolenItems) ?? true))
            {
                item.BuysStolenItems = rhs.BuysStolenItems;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.BuySellEverythingNotInList) ?? true))
            {
                item.BuySellEverythingNotInList = rhs.BuySellEverythingNotInList;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.BuysNonStolenItems) ?? true))
            {
                item.BuysNonStolenItems = rhs.BuysNonStolenItems;
            }
            if ((copyMask?.GetShouldTranslate((int)VendorValues_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IVendorValues item,
            IVendorValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public VendorValues DeepCopy(
            IVendorValuesGetter item,
            VendorValues.TranslationMask? copyMask = null)
        {
            VendorValues ret = (VendorValues)((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).GetNew();
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public VendorValues DeepCopy(
            IVendorValuesGetter item,
            out VendorValues.ErrorMask errorMask,
            VendorValues.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            VendorValues ret = (VendorValues)((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).GetNew();
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = VendorValues.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public VendorValues DeepCopy(
            IVendorValuesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            VendorValues ret = (VendorValues)((VendorValuesCommon)((IVendorValuesGetter)item).CommonInstance()!).GetNew();
            ((VendorValuesSetterTranslationCommon)((IVendorValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class VendorValues
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VendorValues_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => VendorValues_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => VendorValuesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return VendorValuesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => VendorValuesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class VendorValuesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly VendorValuesBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IVendorValuesGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.StartHour);
            writer.Write(item.EndHour);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Radius);
            writer.Write(item.BuysStolenItems);
            writer.Write(item.BuySellEverythingNotInList);
            writer.Write(item.BuysNonStolenItems);
            writer.Write(item.Unknown);
        }

        public void Write(
            MutagenWriter writer,
            IVendorValuesGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.VENV),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IVendorValuesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class VendorValuesBinaryCreateTranslation
    {
        public static readonly VendorValuesBinaryCreateTranslation Instance = new VendorValuesBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IVendorValues item,
            MutagenFrame frame)
        {
            item.StartHour = frame.ReadUInt16();
            item.EndHour = frame.ReadUInt16();
            item.Radius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BuysStolenItems = frame.ReadBoolean();
            item.BuySellEverythingNotInList = frame.ReadBoolean();
            item.BuysNonStolenItems = frame.ReadBoolean();
            item.Unknown = frame.ReadUInt8();
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class VendorValuesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IVendorValuesGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VendorValuesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class VendorValuesBinaryOverlay :
        PluginBinaryOverlay,
        IVendorValuesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VendorValues_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => VendorValues_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => VendorValuesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => VendorValuesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IVendorValuesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IVendorValuesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => VendorValuesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VendorValuesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt16 StartHour => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x0, 0x2));
        public UInt16 EndHour => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x2, 0x2));
        public Single Radius => _structData.Slice(0x4, 0x4).Float();
        public Boolean BuysStolenItems => _structData.Slice(0x8, 0x1)[0] >= 1;
        public Boolean BuySellEverythingNotInList => _structData.Slice(0x9, 0x1)[0] >= 1;
        public Boolean BuysNonStolenItems => _structData.Slice(0xA, 0x1)[0] >= 1;
        public Byte Unknown => _structData.Span[0xB];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected VendorValuesBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IVendorValuesGetter VendorValuesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0xC,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new VendorValuesBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0xC + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IVendorValuesGetter VendorValuesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return VendorValuesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            VendorValuesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IVendorValuesGetter rhs) return false;
            return ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IVendorValuesGetter? obj)
        {
            return ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((VendorValuesCommon)((IVendorValuesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

