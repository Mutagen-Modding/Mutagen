/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class ArmorAddon :
        StarfieldMajorRecord,
        IArmorAddonInternal,
        IEquatable<IArmorAddonGetter>,
        ILoquiObjectSetter<ArmorAddon>
    {
        #region Ctor
        protected ArmorAddon()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IArmorAddonGetter.Components => _Components;
        #endregion

        #endregion
        #region FirstPersonFlags
        public FirstPersonFlag? FirstPersonFlags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FirstPersonFlag? IArmorAddonGetter.FirstPersonFlags => this.FirstPersonFlags;
        #endregion
        #region Race
        private readonly IFormLinkNullable<IRaceGetter> _Race = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> Race
        {
            get => _Race;
            set => _Race.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IArmorAddonGetter.Race => this.Race;
        #endregion
        #region DNAMData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _DNAMData = new byte[13];
        public MemorySlice<Byte> DNAMData
        {
            get => _DNAMData;
            set => this._DNAMData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IArmorAddonGetter.DNAMData => this.DNAMData;
        #endregion
        #region WorldModel
        public IGenderedItem<Model?>? WorldModel { get; set; }
        IGenderedItemGetter<IModelGetter?>? IArmorAddonGetter.WorldModel => this.WorldModel;
        #endregion
        #region FirstPersonModel
        public IGenderedItem<Model?>? FirstPersonModel { get; set; }
        IGenderedItemGetter<IModelGetter?>? IArmorAddonGetter.FirstPersonModel => this.FirstPersonModel;
        #endregion
        #region Skeleton
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Skeleton;
        public Model? Skeleton
        {
            get => _Skeleton;
            set => _Skeleton = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IArmorAddonGetter.Skeleton => this.Skeleton;
        #endregion
        #region UnknownModel7
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _UnknownModel7;
        public Model? UnknownModel7
        {
            get => _UnknownModel7;
            set => _UnknownModel7 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IArmorAddonGetter.UnknownModel7 => this.UnknownModel7;
        #endregion
        #region Morphs
        public IGenderedItem<ArmorAddonMorph?>? Morphs { get; set; }
        IGenderedItemGetter<IArmorAddonMorphGetter?>? IArmorAddonGetter.Morphs => this.Morphs;
        #endregion
        #region AdditionalRaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IRaceGetter>> _AdditionalRaces = new ExtendedList<IFormLinkGetter<IRaceGetter>>();
        public ExtendedList<IFormLinkGetter<IRaceGetter>> AdditionalRaces
        {
            get => this._AdditionalRaces;
            init => this._AdditionalRaces = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IRaceGetter>> IArmorAddonGetter.AdditionalRaces => _AdditionalRaces;
        #endregion

        #endregion
        #region FootstepSound
        private readonly IFormLinkNullable<IFootstepSetGetter> _FootstepSound = new FormLinkNullable<IFootstepSetGetter>();
        public IFormLinkNullable<IFootstepSetGetter> FootstepSound
        {
            get => _FootstepSound;
            set => _FootstepSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFootstepSetGetter> IArmorAddonGetter.FootstepSound => this.FootstepSound;
        #endregion
        #region ArtObject
        private readonly IFormLinkNullable<IArtObjectGetter> _ArtObject = new FormLinkNullable<IArtObjectGetter>();
        public IFormLinkNullable<IArtObjectGetter> ArtObject
        {
            get => _ArtObject;
            set => _ArtObject.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArtObjectGetter> IArmorAddonGetter.ArtObject => this.ArtObject;
        #endregion
        #region BodyPartData
        private readonly IFormLinkNullable<IBodyPartDataGetter> _BodyPartData = new FormLinkNullable<IBodyPartDataGetter>();
        public IFormLinkNullable<IBodyPartDataGetter> BodyPartData
        {
            get => _BodyPartData;
            set => _BodyPartData.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IBodyPartDataGetter> IArmorAddonGetter.BodyPartData => this.BodyPartData;
        #endregion
        #region TintType
        public TintType TintType { get; set; } = default(TintType);
        #endregion
        #region TintColorMapping
        public String? TintColorMapping { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IArmorAddonGetter.TintColorMapping => this.TintColorMapping;
        #endregion
        #region TintEntryName
        public String? TintEntryName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IArmorAddonGetter.TintEntryName => this.TintEntryName;
        #endregion
        #region TintEntryValue
        public String? TintEntryValue { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IArmorAddonGetter.TintEntryValue => this.TintEntryValue;
        #endregion
        #region BoneDataModifiers
        public IGenderedItem<ExtendedList<IFormLinkGetter<IBoneModifierGetter>>> BoneDataModifiers { get; set; } = new GenderedItem<ExtendedList<IFormLinkGetter<IBoneModifierGetter>>>(new ExtendedList<IFormLinkGetter<IBoneModifierGetter>>(), new ExtendedList<IFormLinkGetter<IBoneModifierGetter>>());
        IGenderedItemGetter<IReadOnlyList<IFormLinkGetter<IBoneModifierGetter>>> IArmorAddonGetter.BoneDataModifiers => this.BoneDataModifiers;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ArmorAddonMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.FirstPersonFlags = initialValue;
                this.Race = initialValue;
                this.DNAMData = initialValue;
                this.WorldModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(initialValue, default);
                this.FirstPersonModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(initialValue, default);
                this.Skeleton = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.UnknownModel7 = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Morphs = new MaskItem<TItem, GenderedItem<MaskItem<TItem, ArmorAddonMorph.Mask<TItem>?>?>?>(initialValue, default);
                this.AdditionalRaces = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FootstepSound = initialValue;
                this.ArtObject = initialValue;
                this.BodyPartData = initialValue;
                this.TintType = initialValue;
                this.TintColorMapping = initialValue;
                this.TintEntryName = initialValue;
                this.TintEntryValue = initialValue;
                this.BoneDataModifiers = new GenderedItem<TItem>(initialValue, initialValue);
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem FirstPersonFlags,
                TItem Race,
                TItem DNAMData,
                TItem WorldModel,
                TItem FirstPersonModel,
                TItem Skeleton,
                TItem UnknownModel7,
                TItem Morphs,
                TItem AdditionalRaces,
                TItem FootstepSound,
                TItem ArtObject,
                TItem BodyPartData,
                TItem TintType,
                TItem TintColorMapping,
                TItem TintEntryName,
                TItem TintEntryValue,
                TItem BoneDataModifiers)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.FirstPersonFlags = FirstPersonFlags;
                this.Race = Race;
                this.DNAMData = DNAMData;
                this.WorldModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(WorldModel, default);
                this.FirstPersonModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(FirstPersonModel, default);
                this.Skeleton = new MaskItem<TItem, Model.Mask<TItem>?>(Skeleton, new Model.Mask<TItem>(Skeleton));
                this.UnknownModel7 = new MaskItem<TItem, Model.Mask<TItem>?>(UnknownModel7, new Model.Mask<TItem>(UnknownModel7));
                this.Morphs = new MaskItem<TItem, GenderedItem<MaskItem<TItem, ArmorAddonMorph.Mask<TItem>?>?>?>(Morphs, default);
                this.AdditionalRaces = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AdditionalRaces, Enumerable.Empty<(int Index, TItem Value)>());
                this.FootstepSound = FootstepSound;
                this.ArtObject = ArtObject;
                this.BodyPartData = BodyPartData;
                this.TintType = TintType;
                this.TintColorMapping = TintColorMapping;
                this.TintEntryName = TintEntryName;
                this.TintEntryValue = TintEntryValue;
                this.BoneDataModifiers = new GenderedItem<TItem>(BoneDataModifiers, BoneDataModifiers);
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem FirstPersonFlags;
            public TItem Race;
            public TItem DNAMData;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>? WorldModel;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>? FirstPersonModel;
            public MaskItem<TItem, Model.Mask<TItem>?>? Skeleton { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? UnknownModel7 { get; set; }
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, ArmorAddonMorph.Mask<TItem>?>?>?>? Morphs;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AdditionalRaces;
            public TItem FootstepSound;
            public TItem ArtObject;
            public TItem BodyPartData;
            public TItem TintType;
            public TItem TintColorMapping;
            public TItem TintEntryName;
            public TItem TintEntryValue;
            public GenderedItem<TItem> BoneDataModifiers;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.FirstPersonFlags, rhs.FirstPersonFlags)) return false;
                if (!object.Equals(this.Race, rhs.Race)) return false;
                if (!object.Equals(this.DNAMData, rhs.DNAMData)) return false;
                if (!object.Equals(this.WorldModel, rhs.WorldModel)) return false;
                if (!object.Equals(this.FirstPersonModel, rhs.FirstPersonModel)) return false;
                if (!object.Equals(this.Skeleton, rhs.Skeleton)) return false;
                if (!object.Equals(this.UnknownModel7, rhs.UnknownModel7)) return false;
                if (!object.Equals(this.Morphs, rhs.Morphs)) return false;
                if (!object.Equals(this.AdditionalRaces, rhs.AdditionalRaces)) return false;
                if (!object.Equals(this.FootstepSound, rhs.FootstepSound)) return false;
                if (!object.Equals(this.ArtObject, rhs.ArtObject)) return false;
                if (!object.Equals(this.BodyPartData, rhs.BodyPartData)) return false;
                if (!object.Equals(this.TintType, rhs.TintType)) return false;
                if (!object.Equals(this.TintColorMapping, rhs.TintColorMapping)) return false;
                if (!object.Equals(this.TintEntryName, rhs.TintEntryName)) return false;
                if (!object.Equals(this.TintEntryValue, rhs.TintEntryValue)) return false;
                if (!object.Equals(this.BoneDataModifiers, rhs.BoneDataModifiers)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.FirstPersonFlags);
                hash.Add(this.Race);
                hash.Add(this.DNAMData);
                hash.Add(this.WorldModel);
                hash.Add(this.FirstPersonModel);
                hash.Add(this.Skeleton);
                hash.Add(this.UnknownModel7);
                hash.Add(this.Morphs);
                hash.Add(this.AdditionalRaces);
                hash.Add(this.FootstepSound);
                hash.Add(this.ArtObject);
                hash.Add(this.BodyPartData);
                hash.Add(this.TintType);
                hash.Add(this.TintColorMapping);
                hash.Add(this.TintEntryName);
                hash.Add(this.TintEntryValue);
                hash.Add(this.BoneDataModifiers);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.FirstPersonFlags)) return false;
                if (!eval(this.Race)) return false;
                if (!eval(this.DNAMData)) return false;
                if (!GenderedItem.AllMask(
                    this.WorldModel,
                    eval: eval)) return false;
                if (!GenderedItem.AllMask(
                    this.FirstPersonModel,
                    eval: eval)) return false;
                if (Skeleton != null)
                {
                    if (!eval(this.Skeleton.Overall)) return false;
                    if (this.Skeleton.Specific != null && !this.Skeleton.Specific.All(eval)) return false;
                }
                if (UnknownModel7 != null)
                {
                    if (!eval(this.UnknownModel7.Overall)) return false;
                    if (this.UnknownModel7.Specific != null && !this.UnknownModel7.Specific.All(eval)) return false;
                }
                if (!GenderedItem.AllMask(
                    this.Morphs,
                    eval: eval)) return false;
                if (this.AdditionalRaces != null)
                {
                    if (!eval(this.AdditionalRaces.Overall)) return false;
                    if (this.AdditionalRaces.Specific != null)
                    {
                        foreach (var item in this.AdditionalRaces.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.FootstepSound)) return false;
                if (!eval(this.ArtObject)) return false;
                if (!eval(this.BodyPartData)) return false;
                if (!eval(this.TintType)) return false;
                if (!eval(this.TintColorMapping)) return false;
                if (!eval(this.TintEntryName)) return false;
                if (!eval(this.TintEntryValue)) return false;
                if (!eval(this.BoneDataModifiers.Male) || !eval(this.BoneDataModifiers.Female)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.FirstPersonFlags)) return true;
                if (eval(this.Race)) return true;
                if (eval(this.DNAMData)) return true;
                if (GenderedItem.AnyMask(
                    this.WorldModel,
                    eval: eval)) return true;
                if (GenderedItem.AnyMask(
                    this.FirstPersonModel,
                    eval: eval)) return true;
                if (Skeleton != null)
                {
                    if (eval(this.Skeleton.Overall)) return true;
                    if (this.Skeleton.Specific != null && this.Skeleton.Specific.Any(eval)) return true;
                }
                if (UnknownModel7 != null)
                {
                    if (eval(this.UnknownModel7.Overall)) return true;
                    if (this.UnknownModel7.Specific != null && this.UnknownModel7.Specific.Any(eval)) return true;
                }
                if (GenderedItem.AnyMask(
                    this.Morphs,
                    eval: eval)) return true;
                if (this.AdditionalRaces != null)
                {
                    if (eval(this.AdditionalRaces.Overall)) return true;
                    if (this.AdditionalRaces.Specific != null)
                    {
                        foreach (var item in this.AdditionalRaces.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.FootstepSound)) return true;
                if (eval(this.ArtObject)) return true;
                if (eval(this.BodyPartData)) return true;
                if (eval(this.TintType)) return true;
                if (eval(this.TintColorMapping)) return true;
                if (eval(this.TintEntryName)) return true;
                if (eval(this.TintEntryValue)) return true;
                if (eval(this.BoneDataModifiers.Male) || eval(this.BoneDataModifiers.Female)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ArmorAddon.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.FirstPersonFlags = eval(this.FirstPersonFlags);
                obj.Race = eval(this.Race);
                obj.DNAMData = eval(this.DNAMData);
                obj.WorldModel = GenderedItem.TranslateHelper(
                    this.WorldModel,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.FirstPersonModel = GenderedItem.TranslateHelper(
                    this.FirstPersonModel,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.Skeleton = this.Skeleton == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Skeleton.Overall), this.Skeleton.Specific?.Translate(eval));
                obj.UnknownModel7 = this.UnknownModel7 == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.UnknownModel7.Overall), this.UnknownModel7.Specific?.Translate(eval));
                obj.Morphs = GenderedItem.TranslateHelper(
                    this.Morphs,
                    eval,
                    (m, e) => m?.Translate(e));
                if (AdditionalRaces != null)
                {
                    obj.AdditionalRaces = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AdditionalRaces.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AdditionalRaces.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AdditionalRaces.Specific = l;
                        foreach (var item in AdditionalRaces.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.FootstepSound = eval(this.FootstepSound);
                obj.ArtObject = eval(this.ArtObject);
                obj.BodyPartData = eval(this.BodyPartData);
                obj.TintType = eval(this.TintType);
                obj.TintColorMapping = eval(this.TintColorMapping);
                obj.TintEntryName = eval(this.TintEntryName);
                obj.TintEntryValue = eval(this.TintEntryValue);
                obj.BoneDataModifiers = new GenderedItem<R>(
                    eval(this.BoneDataModifiers.Male),
                    eval(this.BoneDataModifiers.Female));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ArmorAddon.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ArmorAddon.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ArmorAddon.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.FirstPersonFlags ?? true)
                    {
                        sb.AppendItem(FirstPersonFlags, "FirstPersonFlags");
                    }
                    if (printMask?.Race ?? true)
                    {
                        sb.AppendItem(Race, "Race");
                    }
                    if (printMask?.DNAMData ?? true)
                    {
                        sb.AppendItem(DNAMData, "DNAMData");
                    }
                    if (WorldModel != null
                        && (printMask?.WorldModel?.Overall ?? true))
                    {
                        sb.AppendLine($"WorldModel => {WorldModel}");
                    }
                    if (FirstPersonModel != null
                        && (printMask?.FirstPersonModel?.Overall ?? true))
                    {
                        sb.AppendLine($"FirstPersonModel => {FirstPersonModel}");
                    }
                    if (printMask?.Skeleton?.Overall ?? true)
                    {
                        Skeleton?.Print(sb);
                    }
                    if (printMask?.UnknownModel7?.Overall ?? true)
                    {
                        UnknownModel7?.Print(sb);
                    }
                    if (Morphs != null
                        && (printMask?.Morphs?.Overall ?? true))
                    {
                        sb.AppendLine($"Morphs => {Morphs}");
                    }
                    if ((printMask?.AdditionalRaces?.Overall ?? true)
                        && AdditionalRaces is {} AdditionalRacesItem)
                    {
                        sb.AppendLine("AdditionalRaces =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AdditionalRacesItem.Overall);
                            if (AdditionalRacesItem.Specific != null)
                            {
                                foreach (var subItem in AdditionalRacesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.FootstepSound ?? true)
                    {
                        sb.AppendItem(FootstepSound, "FootstepSound");
                    }
                    if (printMask?.ArtObject ?? true)
                    {
                        sb.AppendItem(ArtObject, "ArtObject");
                    }
                    if (printMask?.BodyPartData ?? true)
                    {
                        sb.AppendItem(BodyPartData, "BodyPartData");
                    }
                    if (printMask?.TintType ?? true)
                    {
                        sb.AppendItem(TintType, "TintType");
                    }
                    if (printMask?.TintColorMapping ?? true)
                    {
                        sb.AppendItem(TintColorMapping, "TintColorMapping");
                    }
                    if (printMask?.TintEntryName ?? true)
                    {
                        sb.AppendItem(TintEntryName, "TintEntryName");
                    }
                    if (printMask?.TintEntryValue ?? true)
                    {
                        sb.AppendItem(TintEntryValue, "TintEntryValue");
                    }
                    if ((true))
                    {
                        sb.AppendLine($"BoneDataModifiers => {BoneDataModifiers}");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? FirstPersonFlags;
            public Exception? Race;
            public Exception? DNAMData;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? WorldModel;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? FirstPersonModel;
            public MaskItem<Exception?, Model.ErrorMask?>? Skeleton;
            public MaskItem<Exception?, Model.ErrorMask?>? UnknownModel7;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Morphs;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AdditionalRaces;
            public Exception? FootstepSound;
            public Exception? ArtObject;
            public Exception? BodyPartData;
            public Exception? TintType;
            public Exception? TintColorMapping;
            public Exception? TintEntryName;
            public Exception? TintEntryValue;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? BoneDataModifiers;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ArmorAddon_FieldIndex enu = (ArmorAddon_FieldIndex)index;
                switch (enu)
                {
                    case ArmorAddon_FieldIndex.Components:
                        return Components;
                    case ArmorAddon_FieldIndex.FirstPersonFlags:
                        return FirstPersonFlags;
                    case ArmorAddon_FieldIndex.Race:
                        return Race;
                    case ArmorAddon_FieldIndex.DNAMData:
                        return DNAMData;
                    case ArmorAddon_FieldIndex.WorldModel:
                        return WorldModel;
                    case ArmorAddon_FieldIndex.FirstPersonModel:
                        return FirstPersonModel;
                    case ArmorAddon_FieldIndex.Skeleton:
                        return Skeleton;
                    case ArmorAddon_FieldIndex.UnknownModel7:
                        return UnknownModel7;
                    case ArmorAddon_FieldIndex.Morphs:
                        return Morphs;
                    case ArmorAddon_FieldIndex.AdditionalRaces:
                        return AdditionalRaces;
                    case ArmorAddon_FieldIndex.FootstepSound:
                        return FootstepSound;
                    case ArmorAddon_FieldIndex.ArtObject:
                        return ArtObject;
                    case ArmorAddon_FieldIndex.BodyPartData:
                        return BodyPartData;
                    case ArmorAddon_FieldIndex.TintType:
                        return TintType;
                    case ArmorAddon_FieldIndex.TintColorMapping:
                        return TintColorMapping;
                    case ArmorAddon_FieldIndex.TintEntryName:
                        return TintEntryName;
                    case ArmorAddon_FieldIndex.TintEntryValue:
                        return TintEntryValue;
                    case ArmorAddon_FieldIndex.BoneDataModifiers:
                        return BoneDataModifiers;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ArmorAddon_FieldIndex enu = (ArmorAddon_FieldIndex)index;
                switch (enu)
                {
                    case ArmorAddon_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.FirstPersonFlags:
                        this.FirstPersonFlags = ex;
                        break;
                    case ArmorAddon_FieldIndex.Race:
                        this.Race = ex;
                        break;
                    case ArmorAddon_FieldIndex.DNAMData:
                        this.DNAMData = ex;
                        break;
                    case ArmorAddon_FieldIndex.WorldModel:
                        this.WorldModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.FirstPersonModel:
                        this.FirstPersonModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.Skeleton:
                        this.Skeleton = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.UnknownModel7:
                        this.UnknownModel7 = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.Morphs:
                        this.Morphs = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.AdditionalRaces:
                        this.AdditionalRaces = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ArmorAddon_FieldIndex.FootstepSound:
                        this.FootstepSound = ex;
                        break;
                    case ArmorAddon_FieldIndex.ArtObject:
                        this.ArtObject = ex;
                        break;
                    case ArmorAddon_FieldIndex.BodyPartData:
                        this.BodyPartData = ex;
                        break;
                    case ArmorAddon_FieldIndex.TintType:
                        this.TintType = ex;
                        break;
                    case ArmorAddon_FieldIndex.TintColorMapping:
                        this.TintColorMapping = ex;
                        break;
                    case ArmorAddon_FieldIndex.TintEntryName:
                        this.TintEntryName = ex;
                        break;
                    case ArmorAddon_FieldIndex.TintEntryValue:
                        this.TintEntryValue = ex;
                        break;
                    case ArmorAddon_FieldIndex.BoneDataModifiers:
                        this.BoneDataModifiers = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ArmorAddon_FieldIndex enu = (ArmorAddon_FieldIndex)index;
                switch (enu)
                {
                    case ArmorAddon_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case ArmorAddon_FieldIndex.FirstPersonFlags:
                        this.FirstPersonFlags = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.Race:
                        this.Race = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.DNAMData:
                        this.DNAMData = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.WorldModel:
                        this.WorldModel = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case ArmorAddon_FieldIndex.FirstPersonModel:
                        this.FirstPersonModel = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case ArmorAddon_FieldIndex.Skeleton:
                        this.Skeleton = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case ArmorAddon_FieldIndex.UnknownModel7:
                        this.UnknownModel7 = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case ArmorAddon_FieldIndex.Morphs:
                        this.Morphs = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case ArmorAddon_FieldIndex.AdditionalRaces:
                        this.AdditionalRaces = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ArmorAddon_FieldIndex.FootstepSound:
                        this.FootstepSound = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.ArtObject:
                        this.ArtObject = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.BodyPartData:
                        this.BodyPartData = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.TintType:
                        this.TintType = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.TintColorMapping:
                        this.TintColorMapping = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.TintEntryName:
                        this.TintEntryName = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.TintEntryValue:
                        this.TintEntryValue = (Exception?)obj;
                        break;
                    case ArmorAddon_FieldIndex.BoneDataModifiers:
                        this.BoneDataModifiers = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (FirstPersonFlags != null) return true;
                if (Race != null) return true;
                if (DNAMData != null) return true;
                if (WorldModel != null) return true;
                if (FirstPersonModel != null) return true;
                if (Skeleton != null) return true;
                if (UnknownModel7 != null) return true;
                if (Morphs != null) return true;
                if (AdditionalRaces != null) return true;
                if (FootstepSound != null) return true;
                if (ArtObject != null) return true;
                if (BodyPartData != null) return true;
                if (TintType != null) return true;
                if (TintColorMapping != null) return true;
                if (TintEntryName != null) return true;
                if (TintEntryValue != null) return true;
                if (BoneDataModifiers != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(FirstPersonFlags, "FirstPersonFlags");
                }
                {
                    sb.AppendItem(Race, "Race");
                }
                {
                    sb.AppendItem(DNAMData, "DNAMData");
                }
                if (WorldModel != null)
                {
                    sb.AppendLine($"WorldModel => {WorldModel}");
                }
                if (FirstPersonModel != null)
                {
                    sb.AppendLine($"FirstPersonModel => {FirstPersonModel}");
                }
                Skeleton?.Print(sb);
                UnknownModel7?.Print(sb);
                if (Morphs != null)
                {
                    sb.AppendLine($"Morphs => {Morphs}");
                }
                if (AdditionalRaces is {} AdditionalRacesItem)
                {
                    sb.AppendLine("AdditionalRaces =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AdditionalRacesItem.Overall);
                        if (AdditionalRacesItem.Specific != null)
                        {
                            foreach (var subItem in AdditionalRacesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(FootstepSound, "FootstepSound");
                }
                {
                    sb.AppendItem(ArtObject, "ArtObject");
                }
                {
                    sb.AppendItem(BodyPartData, "BodyPartData");
                }
                {
                    sb.AppendItem(TintType, "TintType");
                }
                {
                    sb.AppendItem(TintColorMapping, "TintColorMapping");
                }
                {
                    sb.AppendItem(TintEntryName, "TintEntryName");
                }
                {
                    sb.AppendItem(TintEntryValue, "TintEntryValue");
                }
                {
                    sb.AppendLine($"BoneDataModifiers => {BoneDataModifiers}");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.FirstPersonFlags = this.FirstPersonFlags.Combine(rhs.FirstPersonFlags);
                ret.Race = this.Race.Combine(rhs.Race);
                ret.DNAMData = this.DNAMData.Combine(rhs.DNAMData);
                ret.WorldModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.WorldModel?.Overall, rhs.WorldModel?.Overall), GenderedItem.Combine(this.WorldModel?.Specific, rhs.WorldModel?.Specific));
                ret.FirstPersonModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.FirstPersonModel?.Overall, rhs.FirstPersonModel?.Overall), GenderedItem.Combine(this.FirstPersonModel?.Specific, rhs.FirstPersonModel?.Specific));
                ret.Skeleton = this.Skeleton.Combine(rhs.Skeleton, (l, r) => l.Combine(r));
                ret.UnknownModel7 = this.UnknownModel7.Combine(rhs.UnknownModel7, (l, r) => l.Combine(r));
                ret.Morphs = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.Morphs?.Overall, rhs.Morphs?.Overall), GenderedItem.Combine(this.Morphs?.Specific, rhs.Morphs?.Specific));
                ret.AdditionalRaces = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.AdditionalRaces?.Overall, rhs.AdditionalRaces?.Overall), Noggog.ExceptionExt.Combine(this.AdditionalRaces?.Specific, rhs.AdditionalRaces?.Specific));
                ret.FootstepSound = this.FootstepSound.Combine(rhs.FootstepSound);
                ret.ArtObject = this.ArtObject.Combine(rhs.ArtObject);
                ret.BodyPartData = this.BodyPartData.Combine(rhs.BodyPartData);
                ret.TintType = this.TintType.Combine(rhs.TintType);
                ret.TintColorMapping = this.TintColorMapping.Combine(rhs.TintColorMapping);
                ret.TintEntryName = this.TintEntryName.Combine(rhs.TintEntryName);
                ret.TintEntryValue = this.TintEntryValue.Combine(rhs.TintEntryValue);
                ret.BoneDataModifiers = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.BoneDataModifiers?.Overall, rhs.BoneDataModifiers?.Overall), GenderedItem.Combine(this.BoneDataModifiers?.Specific, rhs.BoneDataModifiers?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool FirstPersonFlags;
            public bool Race;
            public bool DNAMData;
            public GenderedItem<Model.TranslationMask>? WorldModel;
            public GenderedItem<Model.TranslationMask>? FirstPersonModel;
            public Model.TranslationMask? Skeleton;
            public Model.TranslationMask? UnknownModel7;
            public GenderedItem<ArmorAddonMorph.TranslationMask>? Morphs;
            public bool AdditionalRaces;
            public bool FootstepSound;
            public bool ArtObject;
            public bool BodyPartData;
            public bool TintType;
            public bool TintColorMapping;
            public bool TintEntryName;
            public bool TintEntryValue;
            public GenderedItem<bool>? BoneDataModifiers;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.FirstPersonFlags = defaultOn;
                this.Race = defaultOn;
                this.DNAMData = defaultOn;
                this.AdditionalRaces = defaultOn;
                this.FootstepSound = defaultOn;
                this.ArtObject = defaultOn;
                this.BodyPartData = defaultOn;
                this.TintType = defaultOn;
                this.TintColorMapping = defaultOn;
                this.TintEntryName = defaultOn;
                this.TintEntryValue = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((FirstPersonFlags, null));
                ret.Add((Race, null));
                ret.Add((DNAMData, null));
                ret.Add((WorldModel != null || DefaultOn, null));
                ret.Add((FirstPersonModel != null || DefaultOn, null));
                ret.Add((Skeleton != null ? Skeleton.OnOverall : DefaultOn, Skeleton?.GetCrystal()));
                ret.Add((UnknownModel7 != null ? UnknownModel7.OnOverall : DefaultOn, UnknownModel7?.GetCrystal()));
                ret.Add((Morphs != null || DefaultOn, null));
                ret.Add((AdditionalRaces, null));
                ret.Add((FootstepSound, null));
                ret.Add((ArtObject, null));
                ret.Add((BodyPartData, null));
                ret.Add((TintType, null));
                ret.Add((TintColorMapping, null));
                ret.Add((TintEntryName, null));
                ret.Add((TintEntryValue, null));
                ret.Add((BoneDataModifiers != null || DefaultOn, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ArmorAddon_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ArmorAddonCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ArmorAddonSetterCommon.Instance.RemapLinks(this, mapping);
        public ArmorAddon(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ArmorAddon(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ArmorAddon(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ArmorAddon(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public ArmorAddon(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ArmorAddon>.ToString(this);
        }

        protected override Type LinkType => typeof(IArmorAddon);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ArmorAddonCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => ArmorAddonSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => ArmorAddonSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => ArmorAddonSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IArmorAddonGetter rhs) return false;
            return ((ArmorAddonCommon)((IArmorAddonGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IArmorAddonGetter? obj)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ArmorAddonCommon)((IArmorAddonGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorAddonBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ArmorAddonBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ArmorAddon CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ArmorAddon();
            ((ArmorAddonSetterCommon)((IArmorAddonGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ArmorAddon item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ArmorAddonSetterCommon)((IArmorAddonGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ArmorAddon GetNew()
        {
            return new ArmorAddon();
        }

    }
    #endregion

    #region Interface
    public partial interface IArmorAddon :
        IArmorAddonGetter,
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<IArmorAddonInternal>,
        IStarfieldMajorRecordInternal
    {
        new ExtendedList<AComponent> Components { get; }
        new FirstPersonFlag? FirstPersonFlags { get; set; }
        new IFormLinkNullable<IRaceGetter> Race { get; set; }
        new MemorySlice<Byte> DNAMData { get; set; }
        new IGenderedItem<Model?>? WorldModel { get; set; }
        new IGenderedItem<Model?>? FirstPersonModel { get; set; }
        new Model? Skeleton { get; set; }
        new Model? UnknownModel7 { get; set; }
        new IGenderedItem<ArmorAddonMorph?>? Morphs { get; set; }
        new ExtendedList<IFormLinkGetter<IRaceGetter>> AdditionalRaces { get; }
        new IFormLinkNullable<IFootstepSetGetter> FootstepSound { get; set; }
        new IFormLinkNullable<IArtObjectGetter> ArtObject { get; set; }
        new IFormLinkNullable<IBodyPartDataGetter> BodyPartData { get; set; }
        new TintType TintType { get; set; }
        new String? TintColorMapping { get; set; }
        new String? TintEntryName { get; set; }
        new String? TintEntryValue { get; set; }
        new IGenderedItem<ExtendedList<IFormLinkGetter<IBoneModifierGetter>>> BoneDataModifiers { get; set; }
        #region Mutagen
        new ArmorAddon.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IArmorAddonInternal :
        IStarfieldMajorRecordInternal,
        IArmorAddon,
        IArmorAddonGetter
    {
        new IGenderedItem<Model?>? WorldModel { get; set; }
        new IGenderedItem<Model?>? FirstPersonModel { get; set; }
        new IGenderedItem<ArmorAddonMorph?>? Morphs { get; set; }
        new IGenderedItem<ExtendedList<IFormLinkGetter<IBoneModifierGetter>>> BoneDataModifiers { get; set; }
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.ARMA)]
    public partial interface IArmorAddonGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IArmorAddonGetter>,
        IMapsToGetter<IArmorAddonGetter>
    {
        static new ILoquiRegistration StaticRegistration => ArmorAddon_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        FirstPersonFlag? FirstPersonFlags { get; }
        IFormLinkNullableGetter<IRaceGetter> Race { get; }
        ReadOnlyMemorySlice<Byte> DNAMData { get; }
        IGenderedItemGetter<IModelGetter?>? WorldModel { get; }
        IGenderedItemGetter<IModelGetter?>? FirstPersonModel { get; }
        IModelGetter? Skeleton { get; }
        IModelGetter? UnknownModel7 { get; }
        IGenderedItemGetter<IArmorAddonMorphGetter?>? Morphs { get; }
        IReadOnlyList<IFormLinkGetter<IRaceGetter>> AdditionalRaces { get; }
        IFormLinkNullableGetter<IFootstepSetGetter> FootstepSound { get; }
        IFormLinkNullableGetter<IArtObjectGetter> ArtObject { get; }
        IFormLinkNullableGetter<IBodyPartDataGetter> BodyPartData { get; }
        TintType TintType { get; }
        String? TintColorMapping { get; }
        String? TintEntryName { get; }
        String? TintEntryValue { get; }
        IGenderedItemGetter<IReadOnlyList<IFormLinkGetter<IBoneModifierGetter>>> BoneDataModifiers { get; }

        #region Mutagen
        ArmorAddon.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class ArmorAddonMixIn
    {
        public static void Clear(this IArmorAddonInternal item)
        {
            ((ArmorAddonSetterCommon)((IArmorAddonGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ArmorAddon.Mask<bool> GetEqualsMask(
            this IArmorAddonGetter item,
            IArmorAddonGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IArmorAddonGetter item,
            string? name = null,
            ArmorAddon.Mask<bool>? printMask = null)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IArmorAddonGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ArmorAddon.Mask<bool>? printMask = null)
        {
            ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IArmorAddonGetter item,
            IArmorAddonGetter rhs,
            ArmorAddon.TranslationMask? equalsMask = null)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IArmorAddonInternal lhs,
            IArmorAddonGetter rhs,
            out ArmorAddon.ErrorMask errorMask,
            ArmorAddon.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ArmorAddon.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IArmorAddonInternal lhs,
            IArmorAddonGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ArmorAddon DeepCopy(
            this IArmorAddonGetter item,
            ArmorAddon.TranslationMask? copyMask = null)
        {
            return ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ArmorAddon DeepCopy(
            this IArmorAddonGetter item,
            out ArmorAddon.ErrorMask errorMask,
            ArmorAddon.TranslationMask? copyMask = null)
        {
            return ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ArmorAddon DeepCopy(
            this IArmorAddonGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ArmorAddon Duplicate(
            this IArmorAddonGetter item,
            FormKey formKey,
            ArmorAddon.TranslationMask? copyMask = null)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ArmorAddon Duplicate(
            this IArmorAddonGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IArmorAddonInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ArmorAddonSetterCommon)((IArmorAddonGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum ArmorAddon_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        FirstPersonFlags = 8,
        Race = 9,
        DNAMData = 10,
        WorldModel = 11,
        FirstPersonModel = 12,
        Skeleton = 13,
        UnknownModel7 = 14,
        Morphs = 15,
        AdditionalRaces = 16,
        FootstepSound = 17,
        ArtObject = 18,
        BodyPartData = 19,
        TintType = 20,
        TintColorMapping = 21,
        TintEntryName = 22,
        TintEntryValue = 23,
        BoneDataModifiers = 24,
    }
    #endregion

    #region Registration
    internal partial class ArmorAddon_Registration : ILoquiRegistration
    {
        public static readonly ArmorAddon_Registration Instance = new ArmorAddon_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 18;

        public const ushort FieldCount = 25;

        public static readonly Type MaskType = typeof(ArmorAddon.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ArmorAddon.ErrorMask);

        public static readonly Type ClassType = typeof(ArmorAddon);

        public static readonly Type GetterType = typeof(IArmorAddonGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IArmorAddon);

        public static readonly Type? InternalSetterType = typeof(IArmorAddonInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.ArmorAddon";

        public const string Name = "ArmorAddon";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ARMA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ARMA);
            var all = RecordCollection.Factory(
                RecordTypes.ARMA,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.BO64,
                RecordTypes.RNAM,
                RecordTypes.DNAM,
                RecordTypes.MOD2,
                RecordTypes.MOD3,
                RecordTypes.MO2T,
                RecordTypes.MO3T,
                RecordTypes.MLM1,
                RecordTypes.MLM2,
                RecordTypes.DMDC,
                RecordTypes.BLMS,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MO2C,
                RecordTypes.MO3C,
                RecordTypes.MO2F,
                RecordTypes.MO3F,
                RecordTypes.MOD4,
                RecordTypes.MOD5,
                RecordTypes.MO4T,
                RecordTypes.MO5T,
                RecordTypes.MLM3,
                RecordTypes.MLM4,
                RecordTypes.MO4C,
                RecordTypes.MO5C,
                RecordTypes.MO4F,
                RecordTypes.MO5F,
                RecordTypes.MOD6,
                RecordTypes.MO6T,
                RecordTypes.MLM6,
                RecordTypes.MO6C,
                RecordTypes.MO6F,
                RecordTypes.MOD7,
                RecordTypes.MO7T,
                RecordTypes.MLM7,
                RecordTypes.MO7C,
                RecordTypes.MO7F,
                RecordTypes.NAM6,
                RecordTypes.NAM4,
                RecordTypes.NAM7,
                RecordTypes.NAM5,
                RecordTypes.MODL,
                RecordTypes.SNDD,
                RecordTypes.ONAM,
                RecordTypes.PNAM,
                RecordTypes.MNAM,
                RecordTypes.TNAM,
                RecordTypes.SNAM,
                RecordTypes.VNAM,
                RecordTypes.BSMP,
                RecordTypes.BNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static RecordTypeConverter SkeletonConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.MOD6),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODT,
                RecordTypes.MO6T),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MOLM,
                RecordTypes.MLM6),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODC,
                RecordTypes.MO6C),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODF,
                RecordTypes.MO6F));
        public static RecordTypeConverter UnknownModel7Converter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.MOD7),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODT,
                RecordTypes.MO7T),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MOLM,
                RecordTypes.MLM7),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODC,
                RecordTypes.MO7C),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODF,
                RecordTypes.MO7F));
        public static readonly Type BinaryWriteTranslation = typeof(ArmorAddonBinaryWriteTranslation);
        public static RecordTypeConverter WorldModelFemaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.MOD3),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODT,
                RecordTypes.MO3T),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MOLM,
                RecordTypes.MLM2),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODC,
                RecordTypes.MO3C),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODF,
                RecordTypes.MO3F));
        public static RecordTypeConverter WorldModelMaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.MOD2),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODT,
                RecordTypes.MO2T),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MOLM,
                RecordTypes.MLM1),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODC,
                RecordTypes.MO2C),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODF,
                RecordTypes.MO2F));
        public static RecordTypeConverter FirstPersonModelFemaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.MOD5),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODT,
                RecordTypes.MO5T),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MOLM,
                RecordTypes.MLM4),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODC,
                RecordTypes.MO5C),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODF,
                RecordTypes.MO5F));
        public static RecordTypeConverter FirstPersonModelMaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.MOD4),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODT,
                RecordTypes.MO4T),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MOLM,
                RecordTypes.MLM3),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODC,
                RecordTypes.MO4C),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODF,
                RecordTypes.MO4F));
        public static RecordTypeConverter MorphsFemaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.NAM4,
                RecordTypes.NAM6),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.NAM5,
                RecordTypes.NAM7));
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ArmorAddonSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly ArmorAddonSetterCommon Instance = new ArmorAddonSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IArmorAddonInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.FirstPersonFlags = default;
            item.Race.Clear();
            item.DNAMData = new byte[13];
            item.WorldModel = null;
            item.FirstPersonModel = null;
            item.Skeleton = null;
            item.UnknownModel7 = null;
            item.Morphs = null;
            item.AdditionalRaces.Clear();
            item.FootstepSound.Clear();
            item.ArtObject.Clear();
            item.BodyPartData.Clear();
            item.TintType = default(TintType);
            item.TintColorMapping = default;
            item.TintEntryName = default;
            item.TintEntryValue = default;
            item.BoneDataModifiers.Male.Clear();
            item.BoneDataModifiers.Female.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IArmorAddonInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IArmorAddonInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IArmorAddon obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.Race.Relink(mapping);
            obj.WorldModel?.RemapLinks(mapping);
            obj.FirstPersonModel?.RemapLinks(mapping);
            obj.Skeleton?.RemapLinks(mapping);
            obj.UnknownModel7?.RemapLinks(mapping);
            obj.Morphs?.RemapLinks(mapping);
            obj.AdditionalRaces.RemapLinks(mapping);
            obj.FootstepSound.Relink(mapping);
            obj.ArtObject.Relink(mapping);
            obj.BodyPartData.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IArmorAddon obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.WorldModel is {} WorldModelItem)
            {
                foreach (var item in WorldModelItem.WhereNotNull().SelectMany(f => f.EnumerateListedAssetLinks()))
                {
                    yield return item;
                }
            }
            if (obj.FirstPersonModel is {} FirstPersonModelItem)
            {
                foreach (var item in FirstPersonModelItem.WhereNotNull().SelectMany(f => f.EnumerateListedAssetLinks()))
                {
                    yield return item;
                }
            }
            if (obj.Skeleton is {} SkeletonItems)
            {
                foreach (var item in SkeletonItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.UnknownModel7 is {} UnknownModel7Items)
            {
                foreach (var item in UnknownModel7Items.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IArmorAddon obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.WorldModel?.ForEach(x => x?.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.FirstPersonModel?.ForEach(x => x?.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Skeleton?.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.UnknownModel7?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IArmorAddonInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IArmorAddonInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ArmorAddonBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ArmorAddonBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ArmorAddon)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ArmorAddon)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ArmorAddonCommon : StarfieldMajorRecordCommon
    {
        public new static readonly ArmorAddonCommon Instance = new ArmorAddonCommon();

        public ArmorAddon.Mask<bool> GetEqualsMask(
            IArmorAddonGetter item,
            IArmorAddonGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ArmorAddon.Mask<bool>(false);
            ((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IArmorAddonGetter item,
            IArmorAddonGetter rhs,
            ArmorAddon.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.FirstPersonFlags = item.FirstPersonFlags == rhs.FirstPersonFlags;
            ret.Race = item.Race.Equals(rhs.Race);
            ret.DNAMData = MemoryExtensions.SequenceEqual(item.DNAMData.Span, rhs.DNAMData.Span);
            ret.WorldModel = GenderedItem.EqualityMaskHelper(
                lhs: item.WorldModel,
                rhs: rhs.WorldModel,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.FirstPersonModel = GenderedItem.EqualityMaskHelper(
                lhs: item.FirstPersonModel,
                rhs: rhs.FirstPersonModel,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.Skeleton = EqualsMaskHelper.EqualsHelper(
                item.Skeleton,
                rhs.Skeleton,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.UnknownModel7 = EqualsMaskHelper.EqualsHelper(
                item.UnknownModel7,
                rhs.UnknownModel7,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Morphs = GenderedItem.EqualityMaskHelper(
                lhs: item.Morphs,
                rhs: rhs.Morphs,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.AdditionalRaces = item.AdditionalRaces.CollectionEqualsHelper(
                rhs.AdditionalRaces,
                (l, r) => object.Equals(l, r),
                include);
            ret.FootstepSound = item.FootstepSound.Equals(rhs.FootstepSound);
            ret.ArtObject = item.ArtObject.Equals(rhs.ArtObject);
            ret.BodyPartData = item.BodyPartData.Equals(rhs.BodyPartData);
            ret.TintType = item.TintType == rhs.TintType;
            ret.TintColorMapping = string.Equals(item.TintColorMapping, rhs.TintColorMapping);
            ret.TintEntryName = string.Equals(item.TintEntryName, rhs.TintEntryName);
            ret.TintEntryValue = string.Equals(item.TintEntryValue, rhs.TintEntryValue);
            ret.BoneDataModifiers = new GenderedItem<bool>(
                male: item.BoneDataModifiers.Male.SequenceEqualNullable(rhs.BoneDataModifiers.Male),
                female: item.BoneDataModifiers.Female.SequenceEqualNullable(rhs.BoneDataModifiers.Female));
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IArmorAddonGetter item,
            string? name = null,
            ArmorAddon.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IArmorAddonGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ArmorAddon.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ArmorAddon =>");
            }
            else
            {
                sb.AppendLine($"{name} (ArmorAddon) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IArmorAddonGetter item,
            StructuredStringBuilder sb,
            ArmorAddon.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.FirstPersonFlags ?? true)
                && item.FirstPersonFlags is {} FirstPersonFlagsItem)
            {
                sb.AppendItem(FirstPersonFlagsItem, "FirstPersonFlags");
            }
            if (printMask?.Race ?? true)
            {
                sb.AppendItem(item.Race.FormKeyNullable, "Race");
            }
            if (printMask?.DNAMData ?? true)
            {
                sb.AppendLine($"DNAMData => {SpanExt.ToHexString(item.DNAMData)}");
            }
            if ((printMask?.WorldModel?.Overall ?? true)
                && item.WorldModel is {} WorldModelItem)
            {
                WorldModelItem?.Print(sb, "WorldModel");
            }
            if ((printMask?.FirstPersonModel?.Overall ?? true)
                && item.FirstPersonModel is {} FirstPersonModelItem)
            {
                FirstPersonModelItem?.Print(sb, "FirstPersonModel");
            }
            if ((printMask?.Skeleton?.Overall ?? true)
                && item.Skeleton is {} SkeletonItem)
            {
                SkeletonItem?.Print(sb, "Skeleton");
            }
            if ((printMask?.UnknownModel7?.Overall ?? true)
                && item.UnknownModel7 is {} UnknownModel7Item)
            {
                UnknownModel7Item?.Print(sb, "UnknownModel7");
            }
            if ((printMask?.Morphs?.Overall ?? true)
                && item.Morphs is {} MorphsItem)
            {
                MorphsItem?.Print(sb, "Morphs");
            }
            if (printMask?.AdditionalRaces?.Overall ?? true)
            {
                sb.AppendLine("AdditionalRaces =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.AdditionalRaces)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.FootstepSound ?? true)
            {
                sb.AppendItem(item.FootstepSound.FormKeyNullable, "FootstepSound");
            }
            if (printMask?.ArtObject ?? true)
            {
                sb.AppendItem(item.ArtObject.FormKeyNullable, "ArtObject");
            }
            if (printMask?.BodyPartData ?? true)
            {
                sb.AppendItem(item.BodyPartData.FormKeyNullable, "BodyPartData");
            }
            if (printMask?.TintType ?? true)
            {
                sb.AppendItem(item.TintType, "TintType");
            }
            if ((printMask?.TintColorMapping ?? true)
                && item.TintColorMapping is {} TintColorMappingItem)
            {
                sb.AppendItem(TintColorMappingItem, "TintColorMapping");
            }
            if ((printMask?.TintEntryName ?? true)
                && item.TintEntryName is {} TintEntryNameItem)
            {
                sb.AppendItem(TintEntryNameItem, "TintEntryName");
            }
            if ((printMask?.TintEntryValue ?? true)
                && item.TintEntryValue is {} TintEntryValueItem)
            {
                sb.AppendItem(TintEntryValueItem, "TintEntryValue");
            }
            if (true)
            {
                item.BoneDataModifiers.Print(sb, "BoneDataModifiers");
            }
        }
        
        public static ArmorAddon_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ArmorAddon_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (ArmorAddon_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (ArmorAddon_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (ArmorAddon_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (ArmorAddon_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (ArmorAddon_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (ArmorAddon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ArmorAddon_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ArmorAddon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ArmorAddon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ArmorAddon_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ArmorAddon_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IArmorAddonGetter? lhs,
            IArmorAddonGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ArmorAddon_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.FirstPersonFlags) ?? true))
            {
                if (lhs.FirstPersonFlags != rhs.FirstPersonFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.Race) ?? true))
            {
                if (!lhs.Race.Equals(rhs.Race)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.DNAMData) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.DNAMData.Span, rhs.DNAMData.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.WorldModel) ?? true))
            {
                if (!Equals(lhs.WorldModel, rhs.WorldModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.FirstPersonModel) ?? true))
            {
                if (!Equals(lhs.FirstPersonModel, rhs.FirstPersonModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.Skeleton) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Skeleton, rhs.Skeleton, out var lhsSkeleton, out var rhsSkeleton, out var isSkeletonEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsSkeleton).CommonInstance()!).Equals(lhsSkeleton, rhsSkeleton, equalsMask?.GetSubCrystal((int)ArmorAddon_FieldIndex.Skeleton))) return false;
                }
                else if (!isSkeletonEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.UnknownModel7) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.UnknownModel7, rhs.UnknownModel7, out var lhsUnknownModel7, out var rhsUnknownModel7, out var isUnknownModel7Equal))
                {
                    if (!((ModelCommon)((IModelGetter)lhsUnknownModel7).CommonInstance()!).Equals(lhsUnknownModel7, rhsUnknownModel7, equalsMask?.GetSubCrystal((int)ArmorAddon_FieldIndex.UnknownModel7))) return false;
                }
                else if (!isUnknownModel7Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.Morphs) ?? true))
            {
                if (!Equals(lhs.Morphs, rhs.Morphs)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.AdditionalRaces) ?? true))
            {
                if (!lhs.AdditionalRaces.SequenceEqualNullable(rhs.AdditionalRaces)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.FootstepSound) ?? true))
            {
                if (!lhs.FootstepSound.Equals(rhs.FootstepSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.ArtObject) ?? true))
            {
                if (!lhs.ArtObject.Equals(rhs.ArtObject)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.BodyPartData) ?? true))
            {
                if (!lhs.BodyPartData.Equals(rhs.BodyPartData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.TintType) ?? true))
            {
                if (lhs.TintType != rhs.TintType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.TintColorMapping) ?? true))
            {
                if (!string.Equals(lhs.TintColorMapping, rhs.TintColorMapping)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.TintEntryName) ?? true))
            {
                if (!string.Equals(lhs.TintEntryName, rhs.TintEntryName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.TintEntryValue) ?? true))
            {
                if (!string.Equals(lhs.TintEntryValue, rhs.TintEntryValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.BoneDataModifiers) ?? true))
            {
                if (!Equals(lhs.BoneDataModifiers, rhs.BoneDataModifiers)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IArmorAddonGetter?)lhs,
                rhs: rhs as IArmorAddonGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IArmorAddonGetter?)lhs,
                rhs: rhs as IArmorAddonGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IArmorAddonGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            if (item.FirstPersonFlags is {} FirstPersonFlagsitem)
            {
                hash.Add(FirstPersonFlagsitem);
            }
            hash.Add(item.Race);
            hash.Add(item.DNAMData);
            if (item.WorldModel is {} WorldModelitem)
            {
                hash.Add(HashCode.Combine(WorldModelitem.Male, WorldModelitem.Female));
            }
            if (item.FirstPersonModel is {} FirstPersonModelitem)
            {
                hash.Add(HashCode.Combine(FirstPersonModelitem.Male, FirstPersonModelitem.Female));
            }
            if (item.Skeleton is {} Skeletonitem)
            {
                hash.Add(Skeletonitem);
            }
            if (item.UnknownModel7 is {} UnknownModel7item)
            {
                hash.Add(UnknownModel7item);
            }
            if (item.Morphs is {} Morphsitem)
            {
                hash.Add(HashCode.Combine(Morphsitem.Male, Morphsitem.Female));
            }
            hash.Add(item.AdditionalRaces);
            hash.Add(item.FootstepSound);
            hash.Add(item.ArtObject);
            hash.Add(item.BodyPartData);
            hash.Add(item.TintType);
            if (item.TintColorMapping is {} TintColorMappingitem)
            {
                hash.Add(TintColorMappingitem);
            }
            if (item.TintEntryName is {} TintEntryNameitem)
            {
                hash.Add(TintEntryNameitem);
            }
            if (item.TintEntryValue is {} TintEntryValueitem)
            {
                hash.Add(TintEntryValueitem);
            }
            hash.Add(HashCode.Combine(item.BoneDataModifiers.Male, item.BoneDataModifiers.Female));
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IArmorAddonGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IArmorAddonGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ArmorAddon.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IArmorAddonGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Race, out var RaceInfo))
            {
                yield return RaceInfo;
            }
            if (obj.WorldModel is {} WorldModelItem)
            {
                foreach (var item in WorldModelItem.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.FirstPersonModel is {} FirstPersonModelItem)
            {
                foreach (var item in FirstPersonModelItem.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Skeleton is {} SkeletonItems)
            {
                foreach (var item in SkeletonItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.UnknownModel7 is {} UnknownModel7Items)
            {
                foreach (var item in UnknownModel7Items.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Morphs is {} MorphsItem)
            {
                foreach (var item in MorphsItem.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.AdditionalRaces)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.FootstepSound, out var FootstepSoundInfo))
            {
                yield return FootstepSoundInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ArtObject, out var ArtObjectInfo))
            {
                yield return ArtObjectInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BodyPartData, out var BodyPartDataInfo))
            {
                yield return BodyPartDataInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IArmorAddonGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.WorldModel is {} WorldModelItem)
            {
                foreach (var item in WorldModelItem.WhereNotNull().SelectMany(f => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
                {
                    yield return item;
                }
            }
            if (obj.FirstPersonModel is {} FirstPersonModelItem)
            {
                foreach (var item in FirstPersonModelItem.WhereNotNull().SelectMany(f => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
                {
                    yield return item;
                }
            }
            if (obj.Skeleton is {} SkeletonItems)
            {
                foreach (var item in SkeletonItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.UnknownModel7 is {} UnknownModel7Items)
            {
                foreach (var item in UnknownModel7Items.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public ArmorAddon Duplicate(
            IArmorAddonGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ArmorAddon(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IArmorAddonGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IArmorAddonGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ArmorAddonSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly ArmorAddonSetterTranslationCommon Instance = new ArmorAddonSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IArmorAddonInternal item,
            IArmorAddonGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IArmorAddon item,
            IArmorAddonGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)ArmorAddon_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.FirstPersonFlags) ?? true))
            {
                item.FirstPersonFlags = rhs.FirstPersonFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.Race) ?? true))
            {
                item.Race.SetTo(rhs.Race.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.DNAMData) ?? true))
            {
                item.DNAMData = rhs.DNAMData.ToArray();
            }
            if (rhs.WorldModel is not {} rhsWorldModelitem)
            {
                item.WorldModel = null;
            }
            else
            {
                item.WorldModel = new GenderedItem<Model?>(
                    male: rhsWorldModelitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsWorldModelitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if (rhs.FirstPersonModel is not {} rhsFirstPersonModelitem)
            {
                item.FirstPersonModel = null;
            }
            else
            {
                item.FirstPersonModel = new GenderedItem<Model?>(
                    male: rhsFirstPersonModelitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsFirstPersonModelitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.Skeleton) ?? true))
            {
                errorMask?.PushIndex((int)ArmorAddon_FieldIndex.Skeleton);
                try
                {
                    if(rhs.Skeleton is {} rhsSkeleton)
                    {
                        item.Skeleton = rhsSkeleton.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ArmorAddon_FieldIndex.Skeleton));
                    }
                    else
                    {
                        item.Skeleton = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.UnknownModel7) ?? true))
            {
                errorMask?.PushIndex((int)ArmorAddon_FieldIndex.UnknownModel7);
                try
                {
                    if(rhs.UnknownModel7 is {} rhsUnknownModel7)
                    {
                        item.UnknownModel7 = rhsUnknownModel7.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ArmorAddon_FieldIndex.UnknownModel7));
                    }
                    else
                    {
                        item.UnknownModel7 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (rhs.Morphs is not {} rhsMorphsitem)
            {
                item.Morphs = null;
            }
            else
            {
                item.Morphs = new GenderedItem<ArmorAddonMorph?>(
                    male: rhsMorphsitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsMorphsitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.AdditionalRaces) ?? true))
            {
                errorMask?.PushIndex((int)ArmorAddon_FieldIndex.AdditionalRaces);
                try
                {
                    item.AdditionalRaces.SetTo(
                        rhs.AdditionalRaces
                            .Select(b => (IFormLinkGetter<IRaceGetter>)new FormLink<IRaceGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.FootstepSound) ?? true))
            {
                item.FootstepSound.SetTo(rhs.FootstepSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.ArtObject) ?? true))
            {
                item.ArtObject.SetTo(rhs.ArtObject.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.BodyPartData) ?? true))
            {
                item.BodyPartData.SetTo(rhs.BodyPartData.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.TintType) ?? true))
            {
                item.TintType = rhs.TintType;
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.TintColorMapping) ?? true))
            {
                item.TintColorMapping = rhs.TintColorMapping;
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.TintEntryName) ?? true))
            {
                item.TintEntryName = rhs.TintEntryName;
            }
            if ((copyMask?.GetShouldTranslate((int)ArmorAddon_FieldIndex.TintEntryValue) ?? true))
            {
                item.TintEntryValue = rhs.TintEntryValue;
            }
            item.BoneDataModifiers = new GenderedItem<ExtendedList<IFormLinkGetter<IBoneModifierGetter>>>(
                male: rhs.BoneDataModifiers.Male.Select(x => new FormLink<IBoneModifierGetter>(x.FormKey)).ToExtendedList<IFormLinkGetter<IBoneModifierGetter>>(),
                female: rhs.BoneDataModifiers.Female.Select(x => new FormLink<IBoneModifierGetter>(x.FormKey)).ToExtendedList<IFormLinkGetter<IBoneModifierGetter>>());
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IArmorAddon item,
            IArmorAddonGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorAddonInternal)item,
                rhs: (IArmorAddonGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorAddon)item,
                rhs: (IArmorAddonGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorAddonInternal)item,
                rhs: (IArmorAddonGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorAddon)item,
                rhs: (IArmorAddonGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ArmorAddon DeepCopy(
            IArmorAddonGetter item,
            ArmorAddon.TranslationMask? copyMask = null)
        {
            ArmorAddon ret = (ArmorAddon)((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).GetNew();
            ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ArmorAddon DeepCopy(
            IArmorAddonGetter item,
            out ArmorAddon.ErrorMask errorMask,
            ArmorAddon.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ArmorAddon ret = (ArmorAddon)((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).GetNew();
            ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ArmorAddon.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ArmorAddon DeepCopy(
            IArmorAddonGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ArmorAddon ret = (ArmorAddon)((ArmorAddonCommon)((IArmorAddonGetter)item).CommonInstance()!).GetNew();
            ((ArmorAddonSetterTranslationCommon)((IArmorAddonGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class ArmorAddon
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ArmorAddon_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ArmorAddon_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorAddonCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ArmorAddonSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorAddonSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ArmorAddonBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ArmorAddonBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IArmorAddonGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            EnumBinaryTranslation<FirstPersonFlag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.FirstPersonFlags,
                length: 8,
                header: translationParams.ConvertToCustom(RecordTypes.BO64));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Race,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DNAM)))
            {
                ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DNAMData);
            }
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.WorldModel,
                femaleRecordConverter: ArmorAddon_Registration.WorldModelFemaleConverter,
                maleRecordConverter: ArmorAddon_Registration.WorldModelMaleConverter,
                transl: (MutagenWriter subWriter, IModelGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((ModelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.FirstPersonModel,
                femaleRecordConverter: ArmorAddon_Registration.FirstPersonModelFemaleConverter,
                maleRecordConverter: ArmorAddon_Registration.FirstPersonModelMaleConverter,
                transl: (MutagenWriter subWriter, IModelGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((ModelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            if (item.Skeleton is {} SkeletonItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)SkeletonItem).BinaryWriteTranslator).Write(
                    item: SkeletonItem,
                    writer: writer,
                    translationParams: translationParams.With(ArmorAddon_Registration.SkeletonConverter));
            }
            if (item.UnknownModel7 is {} UnknownModel7Item)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)UnknownModel7Item).BinaryWriteTranslator).Write(
                    item: UnknownModel7Item,
                    writer: writer,
                    translationParams: translationParams.With(ArmorAddon_Registration.UnknownModel7Converter));
            }
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.Morphs,
                femaleRecordConverter: ArmorAddon_Registration.MorphsFemaleConverter,
                transl: (MutagenWriter subWriter, IArmorAddonMorphGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((ArmorAddonMorphBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IRaceGetter>>.Instance.Write(
                writer: writer,
                items: item.AdditionalRaces,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IRaceGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.MODL));
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FootstepSound,
                header: translationParams.ConvertToCustom(RecordTypes.SNDD));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ArtObject,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BodyPartData,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            EnumBinaryTranslation<TintType, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.TintType,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TintColorMapping,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TintEntryName,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TintEntryValue,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM),
                binaryType: StringBinaryType.NullTerminate);
            GenderedItemBinaryTranslation.WriteGenderedEnumRecord(
                writer: writer,
                item: item.BoneDataModifiers,
                genderEnumRecord: RecordTypes.BSMP,
                transl: (MutagenWriter subWriter, IReadOnlyList<IFormLinkGetter<IBoneModifierGetter>> subItem) =>
                {
                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IBoneModifierGetter>>.Instance.Write(
                        writer: subWriter,
                        items: subItem,
                        transl: (MutagenWriter subWriter, IFormLinkGetter<IBoneModifierGetter> subItem, TypedWriteParams conv) =>
                        {
                            FormLinkBinaryTranslation.Instance.Write(
                                writer: subWriter,
                                item: subItem,
                                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
                        });
                });
        }

        public void Write(
            MutagenWriter writer,
            IArmorAddonGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.ARMA,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IArmorAddonGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IArmorAddonGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IArmorAddonGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ArmorAddonBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly ArmorAddonBinaryCreateTranslation Instance = new ArmorAddonBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ARMA;
        public static ParseResult FillBinaryRecordTypes(
            IArmorAddonInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)ArmorAddon_FieldIndex.Components;
                }
                case RecordTypeInts.BO64:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FirstPersonFlags = EnumBinaryTranslation<FirstPersonFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)ArmorAddon_FieldIndex.FirstPersonFlags;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Race.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ArmorAddon_FieldIndex.Race;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.DNAMData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(13));
                    return (int)ArmorAddon_FieldIndex.DNAMData;
                }
                case RecordTypeInts.MOD2:
                case RecordTypeInts.MOD3:
                case RecordTypeInts.MO2T:
                case RecordTypeInts.MO3T:
                case RecordTypeInts.MLM1:
                case RecordTypeInts.MLM2:
                case RecordTypeInts.MO2C:
                case RecordTypeInts.MO3C:
                case RecordTypeInts.MO2F:
                case RecordTypeInts.MO3F:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)ArmorAddon_FieldIndex.DNAMData)
                    {
                        item.WorldModel = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<Model>(
                            frame: frame,
                            femaleRecordConverter: ArmorAddon_Registration.WorldModelFemaleConverter,
                            maleRecordConverter: ArmorAddon_Registration.WorldModelMaleConverter,
                            transl: Model.TryCreateFromBinary);
                        return new ParseResult((int)ArmorAddon_FieldIndex.WorldModel, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ArmorAddon_FieldIndex.WorldModel)
                    {
                        item.FirstPersonModel = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<Model>(
                            frame: frame,
                            femaleRecordConverter: ArmorAddon_Registration.FirstPersonModelFemaleConverter,
                            maleRecordConverter: ArmorAddon_Registration.FirstPersonModelMaleConverter,
                            transl: Model.TryCreateFromBinary);
                        return new ParseResult((int)ArmorAddon_FieldIndex.FirstPersonModel, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ArmorAddon_FieldIndex.FirstPersonModel)
                    {
                        item.Skeleton = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                            frame: frame,
                            translationParams: translationParams.With(ArmorAddon_Registration.SkeletonConverter));
                        return new ParseResult((int)ArmorAddon_FieldIndex.Skeleton, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ArmorAddon_FieldIndex.Skeleton)
                    {
                        item.UnknownModel7 = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                            frame: frame,
                            translationParams: translationParams.With(ArmorAddon_Registration.UnknownModel7Converter));
                        return new ParseResult((int)ArmorAddon_FieldIndex.UnknownModel7, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                item.WorldModel = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<Model>(
                                    frame: frame,
                                    femaleRecordConverter: ArmorAddon_Registration.WorldModelFemaleConverter,
                                    maleRecordConverter: ArmorAddon_Registration.WorldModelMaleConverter,
                                    transl: Model.TryCreateFromBinary);
                                return new ParseResult((int)ArmorAddon_FieldIndex.WorldModel, nextRecordType);
                            case 1:
                                item.FirstPersonModel = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<Model>(
                                    frame: frame,
                                    femaleRecordConverter: ArmorAddon_Registration.FirstPersonModelFemaleConverter,
                                    maleRecordConverter: ArmorAddon_Registration.FirstPersonModelMaleConverter,
                                    transl: Model.TryCreateFromBinary);
                                return new ParseResult((int)ArmorAddon_FieldIndex.FirstPersonModel, nextRecordType);
                            case 2:
                                item.Skeleton = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                                    frame: frame,
                                    translationParams: translationParams.With(ArmorAddon_Registration.SkeletonConverter));
                                return new ParseResult((int)ArmorAddon_FieldIndex.Skeleton, nextRecordType);
                            case 3:
                                item.UnknownModel7 = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                                    frame: frame,
                                    translationParams: translationParams.With(ArmorAddon_Registration.UnknownModel7Converter));
                                return new ParseResult((int)ArmorAddon_FieldIndex.UnknownModel7, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.MOD4:
                case RecordTypeInts.MOD5:
                case RecordTypeInts.MO4T:
                case RecordTypeInts.MO5T:
                case RecordTypeInts.MLM3:
                case RecordTypeInts.MLM4:
                case RecordTypeInts.MO4C:
                case RecordTypeInts.MO5C:
                case RecordTypeInts.MO4F:
                case RecordTypeInts.MO5F:
                {
                    item.FirstPersonModel = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<Model>(
                        frame: frame,
                        femaleRecordConverter: ArmorAddon_Registration.FirstPersonModelFemaleConverter,
                        maleRecordConverter: ArmorAddon_Registration.FirstPersonModelMaleConverter,
                        transl: Model.TryCreateFromBinary);
                    return (int)ArmorAddon_FieldIndex.FirstPersonModel;
                }
                case RecordTypeInts.MOD6:
                case RecordTypeInts.MO6T:
                case RecordTypeInts.MLM6:
                case RecordTypeInts.MO6C:
                case RecordTypeInts.MO6F:
                {
                    item.Skeleton = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(ArmorAddon_Registration.SkeletonConverter));
                    return (int)ArmorAddon_FieldIndex.Skeleton;
                }
                case RecordTypeInts.MOD7:
                case RecordTypeInts.MO7T:
                case RecordTypeInts.MLM7:
                case RecordTypeInts.MO7C:
                case RecordTypeInts.MO7F:
                {
                    item.UnknownModel7 = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(ArmorAddon_Registration.UnknownModel7Converter));
                    return (int)ArmorAddon_FieldIndex.UnknownModel7;
                }
                case RecordTypeInts.NAM6:
                case RecordTypeInts.NAM4:
                case RecordTypeInts.NAM7:
                case RecordTypeInts.NAM5:
                {
                    item.Morphs = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<ArmorAddonMorph>(
                        frame: frame,
                        femaleRecordConverter: ArmorAddon_Registration.MorphsFemaleConverter,
                        shortCircuit: false,
                        transl: ArmorAddonMorph.TryCreateFromBinary);
                    return (int)ArmorAddon_FieldIndex.Morphs;
                }
                case RecordTypeInts.MODL:
                {
                    item.AdditionalRaces.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IRaceGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.MODL),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)ArmorAddon_FieldIndex.AdditionalRaces;
                }
                case RecordTypeInts.SNDD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FootstepSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ArmorAddon_FieldIndex.FootstepSound;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ArtObject.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ArmorAddon_FieldIndex.ArtObject;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BodyPartData.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ArmorAddon_FieldIndex.BodyPartData;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TintType = EnumBinaryTranslation<TintType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)ArmorAddon_FieldIndex.TintType;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TintColorMapping = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ArmorAddon_FieldIndex.TintColorMapping;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TintEntryName = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ArmorAddon_FieldIndex.TintEntryName;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TintEntryValue = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ArmorAddon_FieldIndex.TintEntryValue;
                }
                case RecordTypeInts.BSMP:
                {
                    item.BoneDataModifiers = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<ExtendedList<IFormLinkGetter<IBoneModifierGetter>>>(
                        frame: frame,
                        genderEnumRecord: RecordTypes.BSMP,
                        contentMarker: RecordTypes.BNAM,
                        transl: (MutagenFrame r, [MaybeNullWhen(false)] out ExtendedList<IFormLinkGetter<IBoneModifierGetter>> genSubItem) =>
                        {
                            genSubItem = new ExtendedList<IFormLinkGetter<IBoneModifierGetter>>();
                            genSubItem.SetTo(
                                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IBoneModifierGetter>>.Instance.Parse(
                                    reader: frame,
                                    triggeringRecord: translationParams.ConvertToCustom(RecordTypes.BNAM),
                                    transl: FormLinkBinaryTranslation.Instance.Parse));
                            return true;
                        });
                    return (int)ArmorAddon_FieldIndex.BoneDataModifiers;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ArmorAddonBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ArmorAddonBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IArmorAddonGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ArmorAddon_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ArmorAddon_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorAddonCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorAddonSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ArmorAddonCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ArmorAddonCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorAddonBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ArmorAddonBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IArmorAddon);

        public ArmorAddon.MajorFlag MajorFlags => (ArmorAddon.MajorFlag)this.MajorRecordFlagsRaw;

        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region FirstPersonFlags
        private int? _FirstPersonFlagsLocation;
        public FirstPersonFlag? FirstPersonFlags => _FirstPersonFlagsLocation.HasValue ? (FirstPersonFlag)BinaryPrimitives.ReadInt64LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FirstPersonFlagsLocation!.Value, _package.MetaData.Constants)) : default(FirstPersonFlag?);
        #endregion
        #region Race
        private int? _RaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> Race => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _RaceLocation);
        #endregion
        private RangeInt32? _DNAMLocation;
        #region DNAMData
        private int _DNAMDataLocation => _DNAMLocation!.Value.Min;
        private bool _DNAMData_IsSet => _DNAMLocation.HasValue;
        public ReadOnlyMemorySlice<Byte> DNAMData => _DNAMData_IsSet ? _recordData.Span.Slice(_DNAMDataLocation, 13).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        #region WorldModel
        private IGenderedItemGetter<IModelGetter?>? _WorldModelOverlay;
        public IGenderedItemGetter<IModelGetter?>? WorldModel => _WorldModelOverlay;
        #endregion
        #region FirstPersonModel
        private IGenderedItemGetter<IModelGetter?>? _FirstPersonModelOverlay;
        public IGenderedItemGetter<IModelGetter?>? FirstPersonModel => _FirstPersonModelOverlay;
        #endregion
        public IModelGetter? Skeleton { get; private set; }
        public IModelGetter? UnknownModel7 { get; private set; }
        #region Morphs
        private IGenderedItemGetter<IArmorAddonMorphGetter?>? _MorphsOverlay;
        public IGenderedItemGetter<IArmorAddonMorphGetter?>? Morphs => _MorphsOverlay;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IRaceGetter>> AdditionalRaces { get; private set; } = Array.Empty<IFormLinkGetter<IRaceGetter>>();
        #region FootstepSound
        private int? _FootstepSoundLocation;
        public IFormLinkNullableGetter<IFootstepSetGetter> FootstepSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFootstepSetGetter>(_package, _recordData, _FootstepSoundLocation);
        #endregion
        #region ArtObject
        private int? _ArtObjectLocation;
        public IFormLinkNullableGetter<IArtObjectGetter> ArtObject => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArtObjectGetter>(_package, _recordData, _ArtObjectLocation);
        #endregion
        #region BodyPartData
        private int? _BodyPartDataLocation;
        public IFormLinkNullableGetter<IBodyPartDataGetter> BodyPartData => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IBodyPartDataGetter>(_package, _recordData, _BodyPartDataLocation);
        #endregion
        #region TintType
        private int? _TintTypeLocation;
        public TintType TintType => _TintTypeLocation.HasValue ? (TintType)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TintTypeLocation!.Value, _package.MetaData.Constants)) : default(TintType);
        #endregion
        #region TintColorMapping
        private int? _TintColorMappingLocation;
        public String? TintColorMapping => _TintColorMappingLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TintColorMappingLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region TintEntryName
        private int? _TintEntryNameLocation;
        public String? TintEntryName => _TintEntryNameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TintEntryNameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region TintEntryValue
        private int? _TintEntryValueLocation;
        public String? TintEntryValue => _TintEntryValueLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TintEntryValueLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region BoneDataModifiers
        private int? _BoneDataModifiersLocation;
        private IGenderedItemGetter<IReadOnlyList<IFormLinkGetter<IBoneModifierGetter>>>? _BoneDataModifiersOverlay;
        public IGenderedItemGetter<IReadOnlyList<IFormLinkGetter<IBoneModifierGetter>>> BoneDataModifiers => _BoneDataModifiersOverlay ?? new GenderedItem<IReadOnlyList<IFormLinkGetter<IBoneModifierGetter>>>(Array.Empty<IFormLinkGetter<IBoneModifierGetter>>(), Array.Empty<IFormLinkGetter<IBoneModifierGetter>>());
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ArmorAddonBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IArmorAddonGetter ArmorAddonFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ArmorAddonBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IArmorAddonGetter ArmorAddonFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ArmorAddonFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)ArmorAddon_FieldIndex.Components;
                }
                case RecordTypeInts.BO64:
                {
                    _FirstPersonFlagsLocation = (stream.Position - offset);
                    return (int)ArmorAddon_FieldIndex.FirstPersonFlags;
                }
                case RecordTypeInts.RNAM:
                {
                    _RaceLocation = (stream.Position - offset);
                    return (int)ArmorAddon_FieldIndex.Race;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)ArmorAddon_FieldIndex.DNAMData;
                }
                case RecordTypeInts.MOD2:
                case RecordTypeInts.MOD3:
                case RecordTypeInts.MO2T:
                case RecordTypeInts.MO3T:
                case RecordTypeInts.MLM1:
                case RecordTypeInts.MLM2:
                case RecordTypeInts.MO2C:
                case RecordTypeInts.MO3C:
                case RecordTypeInts.MO2F:
                case RecordTypeInts.MO3F:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)ArmorAddon_FieldIndex.DNAMData)
                    {
                        _WorldModelOverlay = GenderedItemBinaryOverlay.Factory<IModelGetter>(
                            package: _package,
                            stream: stream,
                            creator: static (s, p, r) => ModelBinaryOverlay.ModelFactory(s, p, r),
                            femaleRecordConverter: ArmorAddon_Registration.WorldModelFemaleConverter,
                            maleRecordConverter: ArmorAddon_Registration.WorldModelMaleConverter,
                            parseNonConvertedItems: true);
                        return new ParseResult((int)ArmorAddon_FieldIndex.WorldModel, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ArmorAddon_FieldIndex.WorldModel)
                    {
                        _FirstPersonModelOverlay = GenderedItemBinaryOverlay.Factory<IModelGetter>(
                            package: _package,
                            stream: stream,
                            creator: static (s, p, r) => ModelBinaryOverlay.ModelFactory(s, p, r),
                            femaleRecordConverter: ArmorAddon_Registration.FirstPersonModelFemaleConverter,
                            maleRecordConverter: ArmorAddon_Registration.FirstPersonModelMaleConverter,
                            parseNonConvertedItems: true);
                        return new ParseResult((int)ArmorAddon_FieldIndex.FirstPersonModel, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ArmorAddon_FieldIndex.FirstPersonModel)
                    {
                        this.Skeleton = ModelBinaryOverlay.ModelFactory(
                            stream: stream,
                            package: _package,
                            translationParams: ArmorAddon_Registration.SkeletonConverter);
                        return new ParseResult((int)ArmorAddon_FieldIndex.Skeleton, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)ArmorAddon_FieldIndex.Skeleton)
                    {
                        this.UnknownModel7 = ModelBinaryOverlay.ModelFactory(
                            stream: stream,
                            package: _package,
                            translationParams: ArmorAddon_Registration.UnknownModel7Converter);
                        return new ParseResult((int)ArmorAddon_FieldIndex.UnknownModel7, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                _WorldModelOverlay = GenderedItemBinaryOverlay.Factory<IModelGetter>(
                                    package: _package,
                                    stream: stream,
                                    creator: static (s, p, r) => ModelBinaryOverlay.ModelFactory(s, p, r),
                                    femaleRecordConverter: ArmorAddon_Registration.WorldModelFemaleConverter,
                                    maleRecordConverter: ArmorAddon_Registration.WorldModelMaleConverter,
                                    parseNonConvertedItems: true);
                                return new ParseResult((int)ArmorAddon_FieldIndex.WorldModel, type);
                            }
                            case 1:
                            {
                                _FirstPersonModelOverlay = GenderedItemBinaryOverlay.Factory<IModelGetter>(
                                    package: _package,
                                    stream: stream,
                                    creator: static (s, p, r) => ModelBinaryOverlay.ModelFactory(s, p, r),
                                    femaleRecordConverter: ArmorAddon_Registration.FirstPersonModelFemaleConverter,
                                    maleRecordConverter: ArmorAddon_Registration.FirstPersonModelMaleConverter,
                                    parseNonConvertedItems: true);
                                return new ParseResult((int)ArmorAddon_FieldIndex.FirstPersonModel, type);
                            }
                            case 2:
                            {
                                this.Skeleton = ModelBinaryOverlay.ModelFactory(
                                    stream: stream,
                                    package: _package,
                                    translationParams: ArmorAddon_Registration.SkeletonConverter);
                                return new ParseResult((int)ArmorAddon_FieldIndex.Skeleton, type);
                            }
                            case 3:
                            {
                                this.UnknownModel7 = ModelBinaryOverlay.ModelFactory(
                                    stream: stream,
                                    package: _package,
                                    translationParams: ArmorAddon_Registration.UnknownModel7Converter);
                                return new ParseResult((int)ArmorAddon_FieldIndex.UnknownModel7, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.MOD4:
                case RecordTypeInts.MOD5:
                case RecordTypeInts.MO4T:
                case RecordTypeInts.MO5T:
                case RecordTypeInts.MLM3:
                case RecordTypeInts.MLM4:
                case RecordTypeInts.MO4C:
                case RecordTypeInts.MO5C:
                case RecordTypeInts.MO4F:
                case RecordTypeInts.MO5F:
                {
                    _FirstPersonModelOverlay = GenderedItemBinaryOverlay.Factory<IModelGetter>(
                        package: _package,
                        stream: stream,
                        creator: static (s, p, r) => ModelBinaryOverlay.ModelFactory(s, p, r),
                        femaleRecordConverter: ArmorAddon_Registration.FirstPersonModelFemaleConverter,
                        maleRecordConverter: ArmorAddon_Registration.FirstPersonModelMaleConverter,
                        parseNonConvertedItems: true);
                    return (int)ArmorAddon_FieldIndex.FirstPersonModel;
                }
                case RecordTypeInts.MOD6:
                case RecordTypeInts.MO6T:
                case RecordTypeInts.MLM6:
                case RecordTypeInts.MO6C:
                case RecordTypeInts.MO6F:
                {
                    this.Skeleton = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.With(ArmorAddon_Registration.SkeletonConverter));
                    return (int)ArmorAddon_FieldIndex.Skeleton;
                }
                case RecordTypeInts.MOD7:
                case RecordTypeInts.MO7T:
                case RecordTypeInts.MLM7:
                case RecordTypeInts.MO7C:
                case RecordTypeInts.MO7F:
                {
                    this.UnknownModel7 = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.With(ArmorAddon_Registration.UnknownModel7Converter));
                    return (int)ArmorAddon_FieldIndex.UnknownModel7;
                }
                case RecordTypeInts.NAM6:
                case RecordTypeInts.NAM4:
                case RecordTypeInts.NAM7:
                case RecordTypeInts.NAM5:
                {
                    _MorphsOverlay = GenderedItemBinaryOverlay.Factory<IArmorAddonMorphGetter>(
                        package: _package,
                        stream: stream,
                        creator: static (s, p, r) => ArmorAddonMorphBinaryOverlay.ArmorAddonMorphFactory(s, p, r),
                        femaleRecordConverter: ArmorAddon_Registration.MorphsFemaleConverter,
                        shortCircuit: false);
                    return (int)ArmorAddon_FieldIndex.Morphs;
                }
                case RecordTypeInts.MODL:
                {
                    this.AdditionalRaces = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IRaceGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IRaceGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.MODL,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)ArmorAddon_FieldIndex.AdditionalRaces;
                }
                case RecordTypeInts.SNDD:
                {
                    _FootstepSoundLocation = (stream.Position - offset);
                    return (int)ArmorAddon_FieldIndex.FootstepSound;
                }
                case RecordTypeInts.ONAM:
                {
                    _ArtObjectLocation = (stream.Position - offset);
                    return (int)ArmorAddon_FieldIndex.ArtObject;
                }
                case RecordTypeInts.PNAM:
                {
                    _BodyPartDataLocation = (stream.Position - offset);
                    return (int)ArmorAddon_FieldIndex.BodyPartData;
                }
                case RecordTypeInts.MNAM:
                {
                    _TintTypeLocation = (stream.Position - offset);
                    return (int)ArmorAddon_FieldIndex.TintType;
                }
                case RecordTypeInts.TNAM:
                {
                    _TintColorMappingLocation = (stream.Position - offset);
                    return (int)ArmorAddon_FieldIndex.TintColorMapping;
                }
                case RecordTypeInts.SNAM:
                {
                    _TintEntryNameLocation = (stream.Position - offset);
                    return (int)ArmorAddon_FieldIndex.TintEntryName;
                }
                case RecordTypeInts.VNAM:
                {
                    _TintEntryValueLocation = (stream.Position - offset);
                    return (int)ArmorAddon_FieldIndex.TintEntryValue;
                }
                case RecordTypeInts.BSMP:
                {
                    _BoneDataModifiersOverlay = GenderedItemBinaryOverlay.Factory<IReadOnlyList<IFormLinkGetter<IBoneModifierGetter>>>(
                        package: _package,
                        genderEnumRecord: RecordTypes.BSMP,
                        getDefault: () => Array.Empty<IFormLinkGetter<IBoneModifierGetter>>(),
                        stream: stream,
                        creator: (s, p) => 
                        {
                            return BinaryOverlayList.FactoryByArray<IFormLinkGetter<IBoneModifierGetter>>(
                                mem: s.RemainingMemory,
                                package: _package,
                                getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IBoneModifierGetter>(p, s),
                                locs: ParseRecordLocations(
                                    stream: s,
                                    constants: _package.MetaData.Constants.SubConstants,
                                    trigger: RecordTypes.BNAM,
                                    skipHeader: true,
                                    translationParams: translationParams));
                        });
                    return (int)ArmorAddon_FieldIndex.BoneDataModifiers;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ArmorAddonMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ArmorAddon>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IArmorAddonGetter rhs) return false;
            return ((ArmorAddonCommon)((IArmorAddonGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IArmorAddonGetter? obj)
        {
            return ((ArmorAddonCommon)((IArmorAddonGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ArmorAddonCommon)((IArmorAddonGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

