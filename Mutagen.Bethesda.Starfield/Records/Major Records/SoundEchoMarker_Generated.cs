/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class SoundEchoMarker :
        StarfieldMajorRecord,
        IEquatable<ISoundEchoMarkerGetter>,
        ILoquiObjectSetter<SoundEchoMarker>,
        ISoundEchoMarkerInternal
    {
        #region Ctor
        protected SoundEchoMarker()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ISoundEchoMarkerGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region DirtinessScale
        public Percent DirtinessScale { get; set; } = default(Percent);
        #endregion
        #region ODRT
        public Single? ODRT { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ISoundEchoMarkerGetter.ODRT => this.ODRT;
        #endregion
        #region XALG
        public UInt64? XALG { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt64? ISoundEchoMarkerGetter.XALG => this.XALG;
        #endregion
        #region Description
        public String? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISoundEchoMarkerGetter.Description => this.Description;
        #endregion
        #region Markers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<EchoMarker> _Markers = new ExtendedList<EchoMarker>();
        public ExtendedList<EchoMarker> Markers
        {
            get => this._Markers;
            init => this._Markers = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEchoMarkerGetter> ISoundEchoMarkerGetter.Markers => _Markers;
        #endregion

        #endregion
        #region DefaultStartMarker
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EchoMarker? _DefaultStartMarker;
        public EchoMarker? DefaultStartMarker
        {
            get => _DefaultStartMarker;
            set => _DefaultStartMarker = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEchoMarkerGetter? ISoundEchoMarkerGetter.DefaultStartMarker => this.DefaultStartMarker;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundEchoMarkerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.DirtinessScale = initialValue;
                this.ODRT = initialValue;
                this.XALG = initialValue;
                this.Description = initialValue;
                this.Markers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EchoMarker.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, EchoMarker.Mask<TItem>?>>());
                this.DefaultStartMarker = new MaskItem<TItem, EchoMarker.Mask<TItem>?>(initialValue, new EchoMarker.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem ObjectBounds,
                TItem DirtinessScale,
                TItem ODRT,
                TItem XALG,
                TItem Description,
                TItem Markers,
                TItem DefaultStartMarker)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.DirtinessScale = DirtinessScale;
                this.ODRT = ODRT;
                this.XALG = XALG;
                this.Description = Description;
                this.Markers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EchoMarker.Mask<TItem>?>>?>(Markers, Enumerable.Empty<MaskItemIndexed<TItem, EchoMarker.Mask<TItem>?>>());
                this.DefaultStartMarker = new MaskItem<TItem, EchoMarker.Mask<TItem>?>(DefaultStartMarker, new EchoMarker.Mask<TItem>(DefaultStartMarker));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem DirtinessScale;
            public TItem ODRT;
            public TItem XALG;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, EchoMarker.Mask<TItem>?>>?>? Markers;
            public MaskItem<TItem, EchoMarker.Mask<TItem>?>? DefaultStartMarker { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.DirtinessScale, rhs.DirtinessScale)) return false;
                if (!object.Equals(this.ODRT, rhs.ODRT)) return false;
                if (!object.Equals(this.XALG, rhs.XALG)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Markers, rhs.Markers)) return false;
                if (!object.Equals(this.DefaultStartMarker, rhs.DefaultStartMarker)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.DirtinessScale);
                hash.Add(this.ODRT);
                hash.Add(this.XALG);
                hash.Add(this.Description);
                hash.Add(this.Markers);
                hash.Add(this.DefaultStartMarker);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.DirtinessScale)) return false;
                if (!eval(this.ODRT)) return false;
                if (!eval(this.XALG)) return false;
                if (!eval(this.Description)) return false;
                if (this.Markers != null)
                {
                    if (!eval(this.Markers.Overall)) return false;
                    if (this.Markers.Specific != null)
                    {
                        foreach (var item in this.Markers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (DefaultStartMarker != null)
                {
                    if (!eval(this.DefaultStartMarker.Overall)) return false;
                    if (this.DefaultStartMarker.Specific != null && !this.DefaultStartMarker.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.DirtinessScale)) return true;
                if (eval(this.ODRT)) return true;
                if (eval(this.XALG)) return true;
                if (eval(this.Description)) return true;
                if (this.Markers != null)
                {
                    if (eval(this.Markers.Overall)) return true;
                    if (this.Markers.Specific != null)
                    {
                        foreach (var item in this.Markers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (DefaultStartMarker != null)
                {
                    if (eval(this.DefaultStartMarker.Overall)) return true;
                    if (this.DefaultStartMarker.Specific != null && this.DefaultStartMarker.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundEchoMarker.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.DirtinessScale = eval(this.DirtinessScale);
                obj.ODRT = eval(this.ODRT);
                obj.XALG = eval(this.XALG);
                obj.Description = eval(this.Description);
                if (Markers != null)
                {
                    obj.Markers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, EchoMarker.Mask<R>?>>?>(eval(this.Markers.Overall), Enumerable.Empty<MaskItemIndexed<R, EchoMarker.Mask<R>?>>());
                    if (Markers.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, EchoMarker.Mask<R>?>>();
                        obj.Markers.Specific = l;
                        foreach (var item in Markers.Specific)
                        {
                            MaskItemIndexed<R, EchoMarker.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, EchoMarker.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DefaultStartMarker = this.DefaultStartMarker == null ? null : new MaskItem<R, EchoMarker.Mask<R>?>(eval(this.DefaultStartMarker.Overall), this.DefaultStartMarker.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SoundEchoMarker.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SoundEchoMarker.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SoundEchoMarker.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.DirtinessScale ?? true)
                    {
                        sb.AppendItem(DirtinessScale, "DirtinessScale");
                    }
                    if (printMask?.ODRT ?? true)
                    {
                        sb.AppendItem(ODRT, "ODRT");
                    }
                    if (printMask?.XALG ?? true)
                    {
                        sb.AppendItem(XALG, "XALG");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Markers?.Overall ?? true)
                        && Markers is {} MarkersItem)
                    {
                        sb.AppendLine("Markers =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MarkersItem.Overall);
                            if (MarkersItem.Specific != null)
                            {
                                foreach (var subItem in MarkersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.DefaultStartMarker?.Overall ?? true)
                    {
                        DefaultStartMarker?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? DirtinessScale;
            public Exception? ODRT;
            public Exception? XALG;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EchoMarker.ErrorMask?>>?>? Markers;
            public MaskItem<Exception?, EchoMarker.ErrorMask?>? DefaultStartMarker;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SoundEchoMarker_FieldIndex enu = (SoundEchoMarker_FieldIndex)index;
                switch (enu)
                {
                    case SoundEchoMarker_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case SoundEchoMarker_FieldIndex.DirtinessScale:
                        return DirtinessScale;
                    case SoundEchoMarker_FieldIndex.ODRT:
                        return ODRT;
                    case SoundEchoMarker_FieldIndex.XALG:
                        return XALG;
                    case SoundEchoMarker_FieldIndex.Description:
                        return Description;
                    case SoundEchoMarker_FieldIndex.Markers:
                        return Markers;
                    case SoundEchoMarker_FieldIndex.DefaultStartMarker:
                        return DefaultStartMarker;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SoundEchoMarker_FieldIndex enu = (SoundEchoMarker_FieldIndex)index;
                switch (enu)
                {
                    case SoundEchoMarker_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case SoundEchoMarker_FieldIndex.DirtinessScale:
                        this.DirtinessScale = ex;
                        break;
                    case SoundEchoMarker_FieldIndex.ODRT:
                        this.ODRT = ex;
                        break;
                    case SoundEchoMarker_FieldIndex.XALG:
                        this.XALG = ex;
                        break;
                    case SoundEchoMarker_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case SoundEchoMarker_FieldIndex.Markers:
                        this.Markers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EchoMarker.ErrorMask?>>?>(ex, null);
                        break;
                    case SoundEchoMarker_FieldIndex.DefaultStartMarker:
                        this.DefaultStartMarker = new MaskItem<Exception?, EchoMarker.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SoundEchoMarker_FieldIndex enu = (SoundEchoMarker_FieldIndex)index;
                switch (enu)
                {
                    case SoundEchoMarker_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case SoundEchoMarker_FieldIndex.DirtinessScale:
                        this.DirtinessScale = (Exception?)obj;
                        break;
                    case SoundEchoMarker_FieldIndex.ODRT:
                        this.ODRT = (Exception?)obj;
                        break;
                    case SoundEchoMarker_FieldIndex.XALG:
                        this.XALG = (Exception?)obj;
                        break;
                    case SoundEchoMarker_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case SoundEchoMarker_FieldIndex.Markers:
                        this.Markers = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EchoMarker.ErrorMask?>>?>)obj;
                        break;
                    case SoundEchoMarker_FieldIndex.DefaultStartMarker:
                        this.DefaultStartMarker = (MaskItem<Exception?, EchoMarker.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (DirtinessScale != null) return true;
                if (ODRT != null) return true;
                if (XALG != null) return true;
                if (Description != null) return true;
                if (Markers != null) return true;
                if (DefaultStartMarker != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(DirtinessScale, "DirtinessScale");
                }
                {
                    sb.AppendItem(ODRT, "ODRT");
                }
                {
                    sb.AppendItem(XALG, "XALG");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                if (Markers is {} MarkersItem)
                {
                    sb.AppendLine("Markers =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MarkersItem.Overall);
                        if (MarkersItem.Specific != null)
                        {
                            foreach (var subItem in MarkersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                DefaultStartMarker?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.DirtinessScale = this.DirtinessScale.Combine(rhs.DirtinessScale);
                ret.ODRT = this.ODRT.Combine(rhs.ODRT);
                ret.XALG = this.XALG.Combine(rhs.XALG);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Markers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, EchoMarker.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Markers?.Overall, rhs.Markers?.Overall), Noggog.ExceptionExt.Combine(this.Markers?.Specific, rhs.Markers?.Specific));
                ret.DefaultStartMarker = this.DefaultStartMarker.Combine(rhs.DefaultStartMarker, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool DirtinessScale;
            public bool ODRT;
            public bool XALG;
            public bool Description;
            public EchoMarker.TranslationMask? Markers;
            public EchoMarker.TranslationMask? DefaultStartMarker;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DirtinessScale = defaultOn;
                this.ODRT = defaultOn;
                this.XALG = defaultOn;
                this.Description = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((DirtinessScale, null));
                ret.Add((ODRT, null));
                ret.Add((XALG, null));
                ret.Add((Description, null));
                ret.Add((Markers == null ? DefaultOn : !Markers.GetCrystal().CopyNothing, Markers?.GetCrystal()));
                ret.Add((DefaultStartMarker != null ? DefaultStartMarker.OnOverall : DefaultOn, DefaultStartMarker?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SoundEchoMarker_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SoundEchoMarkerCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SoundEchoMarkerSetterCommon.Instance.RemapLinks(this, mapping);
        public SoundEchoMarker(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private SoundEchoMarker(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal SoundEchoMarker(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SoundEchoMarker(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public SoundEchoMarker(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<SoundEchoMarker>.ToString(this);
        }

        protected override Type LinkType => typeof(ISoundEchoMarker);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISoundEchoMarkerGetter rhs) return false;
            return ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundEchoMarkerGetter? obj)
        {
            return ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundEchoMarkerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundEchoMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SoundEchoMarker CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SoundEchoMarker();
            ((SoundEchoMarkerSetterCommon)((ISoundEchoMarkerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundEchoMarker item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SoundEchoMarkerSetterCommon)((ISoundEchoMarkerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SoundEchoMarker GetNew()
        {
            return new SoundEchoMarker();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundEchoMarker :
        IBaseObject,
        IFormLinkContainer,
        ILoquiObjectSetter<ISoundEchoMarkerInternal>,
        IObjectBounded,
        ISoundEchoMarkerGetter,
        IStarfieldMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new Percent DirtinessScale { get; set; }
        new Single? ODRT { get; set; }
        new UInt64? XALG { get; set; }
        new String? Description { get; set; }
        new ExtendedList<EchoMarker> Markers { get; }
        new EchoMarker? DefaultStartMarker { get; set; }
    }

    public partial interface ISoundEchoMarkerInternal :
        IStarfieldMajorRecordInternal,
        ISoundEchoMarker,
        ISoundEchoMarkerGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.SECH)]
    public partial interface ISoundEchoMarkerGetter :
        IStarfieldMajorRecordGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISoundEchoMarkerGetter>,
        IMapsToGetter<ISoundEchoMarkerGetter>,
        IObjectBoundedGetter
    {
        static new ILoquiRegistration StaticRegistration => SoundEchoMarker_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        Percent DirtinessScale { get; }
        Single? ODRT { get; }
        UInt64? XALG { get; }
        String? Description { get; }
        IReadOnlyList<IEchoMarkerGetter> Markers { get; }
        IEchoMarkerGetter? DefaultStartMarker { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundEchoMarkerMixIn
    {
        public static void Clear(this ISoundEchoMarkerInternal item)
        {
            ((SoundEchoMarkerSetterCommon)((ISoundEchoMarkerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundEchoMarker.Mask<bool> GetEqualsMask(
            this ISoundEchoMarkerGetter item,
            ISoundEchoMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISoundEchoMarkerGetter item,
            string? name = null,
            SoundEchoMarker.Mask<bool>? printMask = null)
        {
            return ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISoundEchoMarkerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundEchoMarker.Mask<bool>? printMask = null)
        {
            ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundEchoMarkerGetter item,
            ISoundEchoMarkerGetter rhs,
            SoundEchoMarker.TranslationMask? equalsMask = null)
        {
            return ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISoundEchoMarkerInternal lhs,
            ISoundEchoMarkerGetter rhs,
            out SoundEchoMarker.ErrorMask errorMask,
            SoundEchoMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundEchoMarkerSetterTranslationCommon)((ISoundEchoMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundEchoMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundEchoMarkerInternal lhs,
            ISoundEchoMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundEchoMarkerSetterTranslationCommon)((ISoundEchoMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundEchoMarker DeepCopy(
            this ISoundEchoMarkerGetter item,
            SoundEchoMarker.TranslationMask? copyMask = null)
        {
            return ((SoundEchoMarkerSetterTranslationCommon)((ISoundEchoMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundEchoMarker DeepCopy(
            this ISoundEchoMarkerGetter item,
            out SoundEchoMarker.ErrorMask errorMask,
            SoundEchoMarker.TranslationMask? copyMask = null)
        {
            return ((SoundEchoMarkerSetterTranslationCommon)((ISoundEchoMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundEchoMarker DeepCopy(
            this ISoundEchoMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundEchoMarkerSetterTranslationCommon)((ISoundEchoMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SoundEchoMarker Duplicate(
            this ISoundEchoMarkerGetter item,
            FormKey formKey,
            SoundEchoMarker.TranslationMask? copyMask = null)
        {
            return ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static SoundEchoMarker Duplicate(
            this ISoundEchoMarkerGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundEchoMarkerInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SoundEchoMarkerSetterCommon)((ISoundEchoMarkerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum SoundEchoMarker_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        ObjectBounds = 7,
        DirtinessScale = 8,
        ODRT = 9,
        XALG = 10,
        Description = 11,
        Markers = 12,
        DefaultStartMarker = 13,
    }
    #endregion

    #region Registration
    internal partial class SoundEchoMarker_Registration : ILoquiRegistration
    {
        public static readonly SoundEchoMarker_Registration Instance = new SoundEchoMarker_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(SoundEchoMarker.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundEchoMarker.ErrorMask);

        public static readonly Type ClassType = typeof(SoundEchoMarker);

        public static readonly Type GetterType = typeof(ISoundEchoMarkerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundEchoMarker);

        public static readonly Type? InternalSetterType = typeof(ISoundEchoMarkerInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.SoundEchoMarker";

        public const string Name = "SoundEchoMarker";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SECH;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SECH);
            var all = RecordCollection.Factory(
                RecordTypes.SECH,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.ODRT,
                RecordTypes.XALG,
                RecordTypes.NNAM,
                RecordTypes.ECHO,
                RecordTypes.ECHE,
                RecordTypes.ECTE,
                RecordTypes.ECSH,
                RecordTypes.ANAM,
                RecordTypes.BNAM,
                RecordTypes.CNAM,
                RecordTypes.DNAM,
                RecordTypes.ENAM,
                RecordTypes.ECHD);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SoundEchoMarkerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SoundEchoMarkerSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly SoundEchoMarkerSetterCommon Instance = new SoundEchoMarkerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundEchoMarkerInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.DirtinessScale = default(Percent);
            item.ODRT = default;
            item.XALG = default;
            item.Description = default;
            item.Markers.Clear();
            item.DefaultStartMarker = null;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ISoundEchoMarkerInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISoundEchoMarkerInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISoundEchoMarker obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Markers.RemapLinks(mapping);
            obj.DefaultStartMarker?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundEchoMarkerInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISoundEchoMarkerInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SoundEchoMarkerBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SoundEchoMarkerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SoundEchoMarker)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SoundEchoMarker)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SoundEchoMarkerCommon : StarfieldMajorRecordCommon
    {
        public new static readonly SoundEchoMarkerCommon Instance = new SoundEchoMarkerCommon();

        public SoundEchoMarker.Mask<bool> GetEqualsMask(
            ISoundEchoMarkerGetter item,
            ISoundEchoMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundEchoMarker.Mask<bool>(false);
            ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundEchoMarkerGetter item,
            ISoundEchoMarkerGetter rhs,
            SoundEchoMarker.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.DirtinessScale = item.DirtinessScale.Equals(rhs.DirtinessScale);
            ret.ODRT = item.ODRT.EqualsWithin(rhs.ODRT);
            ret.XALG = item.XALG == rhs.XALG;
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Markers = item.Markers.CollectionEqualsHelper(
                rhs.Markers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DefaultStartMarker = EqualsMaskHelper.EqualsHelper(
                item.DefaultStartMarker,
                rhs.DefaultStartMarker,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISoundEchoMarkerGetter item,
            string? name = null,
            SoundEchoMarker.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISoundEchoMarkerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundEchoMarker.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SoundEchoMarker =>");
            }
            else
            {
                sb.AppendLine($"{name} (SoundEchoMarker) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISoundEchoMarkerGetter item,
            StructuredStringBuilder sb,
            SoundEchoMarker.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if (printMask?.DirtinessScale ?? true)
            {
                sb.AppendItem(item.DirtinessScale, "DirtinessScale");
            }
            if ((printMask?.ODRT ?? true)
                && item.ODRT is {} ODRTItem)
            {
                sb.AppendItem(ODRTItem, "ODRT");
            }
            if ((printMask?.XALG ?? true)
                && item.XALG is {} XALGItem)
            {
                sb.AppendItem(XALGItem, "XALG");
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.Markers?.Overall ?? true)
            {
                sb.AppendLine("Markers =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Markers)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.DefaultStartMarker?.Overall ?? true)
                && item.DefaultStartMarker is {} DefaultStartMarkerItem)
            {
                DefaultStartMarkerItem?.Print(sb, "DefaultStartMarker");
            }
        }
        
        public static SoundEchoMarker_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundEchoMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (SoundEchoMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (SoundEchoMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (SoundEchoMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (SoundEchoMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (SoundEchoMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (SoundEchoMarker_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new SoundEchoMarker_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundEchoMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SoundEchoMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SoundEchoMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SoundEchoMarker_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundEchoMarkerGetter? lhs,
            ISoundEchoMarkerGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)SoundEchoMarker_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.DirtinessScale) ?? true))
            {
                if (!lhs.DirtinessScale.Equals(rhs.DirtinessScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.ODRT) ?? true))
            {
                if (!lhs.ODRT.EqualsWithin(rhs.ODRT)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.XALG) ?? true))
            {
                if (lhs.XALG != rhs.XALG) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.Description) ?? true))
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.Markers) ?? true))
            {
                if (!lhs.Markers.SequenceEqual(rhs.Markers, (l, r) => ((EchoMarkerCommon)((IEchoMarkerGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SoundEchoMarker_FieldIndex.Markers)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.DefaultStartMarker) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DefaultStartMarker, rhs.DefaultStartMarker, out var lhsDefaultStartMarker, out var rhsDefaultStartMarker, out var isDefaultStartMarkerEqual))
                {
                    if (!((EchoMarkerCommon)((IEchoMarkerGetter)lhsDefaultStartMarker).CommonInstance()!).Equals(lhsDefaultStartMarker, rhsDefaultStartMarker, equalsMask?.GetSubCrystal((int)SoundEchoMarker_FieldIndex.DefaultStartMarker))) return false;
                }
                else if (!isDefaultStartMarkerEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISoundEchoMarkerGetter?)lhs,
                rhs: rhs as ISoundEchoMarkerGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISoundEchoMarkerGetter?)lhs,
                rhs: rhs as ISoundEchoMarkerGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISoundEchoMarkerGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            hash.Add(item.DirtinessScale);
            if (item.ODRT is {} ODRTitem)
            {
                hash.Add(ODRTitem);
            }
            if (item.XALG is {} XALGitem)
            {
                hash.Add(XALGitem);
            }
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.Markers);
            if (item.DefaultStartMarker is {} DefaultStartMarkeritem)
            {
                hash.Add(DefaultStartMarkeritem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundEchoMarkerGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundEchoMarkerGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SoundEchoMarker.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISoundEchoMarkerGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Markers.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.DefaultStartMarker is {} DefaultStartMarkerItems)
            {
                foreach (var item in DefaultStartMarkerItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public SoundEchoMarker Duplicate(
            ISoundEchoMarkerGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SoundEchoMarker(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundEchoMarkerGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundEchoMarkerGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SoundEchoMarkerSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly SoundEchoMarkerSetterTranslationCommon Instance = new SoundEchoMarkerSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundEchoMarkerInternal item,
            ISoundEchoMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISoundEchoMarker item,
            ISoundEchoMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)SoundEchoMarker_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)SoundEchoMarker_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.DirtinessScale) ?? true))
            {
                item.DirtinessScale = rhs.DirtinessScale;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.ODRT) ?? true))
            {
                item.ODRT = rhs.ODRT;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.XALG) ?? true))
            {
                item.XALG = rhs.XALG;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.Markers) ?? true))
            {
                errorMask?.PushIndex((int)SoundEchoMarker_FieldIndex.Markers);
                try
                {
                    item.Markers.SetTo(
                        rhs.Markers
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundEchoMarker_FieldIndex.DefaultStartMarker) ?? true))
            {
                errorMask?.PushIndex((int)SoundEchoMarker_FieldIndex.DefaultStartMarker);
                try
                {
                    if(rhs.DefaultStartMarker is {} rhsDefaultStartMarker)
                    {
                        item.DefaultStartMarker = rhsDefaultStartMarker.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoundEchoMarker_FieldIndex.DefaultStartMarker));
                    }
                    else
                    {
                        item.DefaultStartMarker = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISoundEchoMarker item,
            ISoundEchoMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundEchoMarkerInternal)item,
                rhs: (ISoundEchoMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundEchoMarker)item,
                rhs: (ISoundEchoMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundEchoMarkerInternal)item,
                rhs: (ISoundEchoMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundEchoMarker)item,
                rhs: (ISoundEchoMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SoundEchoMarker DeepCopy(
            ISoundEchoMarkerGetter item,
            SoundEchoMarker.TranslationMask? copyMask = null)
        {
            SoundEchoMarker ret = (SoundEchoMarker)((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)item).CommonInstance()!).GetNew();
            ((SoundEchoMarkerSetterTranslationCommon)((ISoundEchoMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundEchoMarker DeepCopy(
            ISoundEchoMarkerGetter item,
            out SoundEchoMarker.ErrorMask errorMask,
            SoundEchoMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundEchoMarker ret = (SoundEchoMarker)((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)item).CommonInstance()!).GetNew();
            ((SoundEchoMarkerSetterTranslationCommon)((ISoundEchoMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundEchoMarker.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundEchoMarker DeepCopy(
            ISoundEchoMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundEchoMarker ret = (SoundEchoMarker)((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)item).CommonInstance()!).GetNew();
            ((SoundEchoMarkerSetterTranslationCommon)((ISoundEchoMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class SoundEchoMarker
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundEchoMarker_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundEchoMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundEchoMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SoundEchoMarkerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundEchoMarkerSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SoundEchoMarkerBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SoundEchoMarkerBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISoundEchoMarkerGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            PercentBinaryTranslation.Write(
                writer: writer,
                item: item.DirtinessScale,
                integerType: FloatIntegerType.UInt,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ODRT,
                header: translationParams.ConvertToCustom(RecordTypes.ODRT));
            UInt64BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.XALG,
                header: translationParams.ConvertToCustom(RecordTypes.XALG));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IEchoMarkerGetter>.Instance.Write(
                writer: writer,
                items: item.Markers,
                itemStartMarker: RecordTypes.ECHO,
                itemEndMarker: RecordTypes.ECHE,
                transl: (MutagenWriter subWriter, IEchoMarkerGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((EchoMarkerBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.DefaultStartMarker is {} DefaultStartMarkerItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.ECHD)) { }
                ((EchoMarkerBinaryWriteTranslation)((IBinaryItem)DefaultStartMarkerItem).BinaryWriteTranslator).Write(
                    item: DefaultStartMarkerItem,
                    writer: writer,
                    translationParams: translationParams);
                using (HeaderExport.Subrecord(writer, RecordTypes.ECHE)) { }
            }
        }

        public void Write(
            MutagenWriter writer,
            ISoundEchoMarkerGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SECH,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISoundEchoMarkerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISoundEchoMarkerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISoundEchoMarkerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SoundEchoMarkerBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly SoundEchoMarkerBinaryCreateTranslation Instance = new SoundEchoMarkerBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SECH;
        public static ParseResult FillBinaryRecordTypes(
            ISoundEchoMarkerInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)SoundEchoMarker_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DirtinessScale = PercentBinaryTranslation.Parse(
                        reader: frame,
                        integerType: FloatIntegerType.UInt);
                    return (int)SoundEchoMarker_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.ODRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ODRT = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)SoundEchoMarker_FieldIndex.ODRT;
                }
                case RecordTypeInts.XALG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XALG = frame.ReadUInt64();
                    return (int)SoundEchoMarker_FieldIndex.XALG;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SoundEchoMarker_FieldIndex.Description;
                }
                case RecordTypeInts.ECHO:
                case RecordTypeInts.ECHE:
                {
                    item.Markers.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<EchoMarker>.Instance.Parse(
                            reader: frame,
                            itemStartMarker: RecordTypes.ECHO,
                            itemEndMarker: RecordTypes.ECHE,
                            translationParams: translationParams,
                            transl: EchoMarker.TryCreateFromBinary));
                    return (int)SoundEchoMarker_FieldIndex.Markers;
                }
                case RecordTypeInts.ECHD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.DefaultStartMarker = Mutagen.Bethesda.Starfield.EchoMarker.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    frame.TryReadSubrecord(RecordTypes.ECHE, out _);
                    return (int)SoundEchoMarker_FieldIndex.DefaultStartMarker;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SoundEchoMarkerBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SoundEchoMarkerBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ISoundEchoMarkerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundEchoMarker_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundEchoMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundEchoMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundEchoMarkerSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SoundEchoMarkerCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundEchoMarkerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundEchoMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISoundEchoMarker);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region DirtinessScale
        private int? _DirtinessScaleLocation;
        public Percent DirtinessScale => _DirtinessScaleLocation.HasValue ? PercentBinaryTranslation.GetPercent(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DirtinessScaleLocation.Value, _package.MetaData.Constants), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region ODRT
        private int? _ODRTLocation;
        public Single? ODRT => _ODRTLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ODRTLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region XALG
        private int? _XALGLocation;
        public UInt64? XALG => _XALGLocation.HasValue ? BinaryPrimitives.ReadUInt64LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _XALGLocation.Value, _package.MetaData.Constants)) : default(UInt64?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<IEchoMarkerGetter> Markers { get; private set; } = Array.Empty<IEchoMarkerGetter>();
        public IEchoMarkerGetter? DefaultStartMarker { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundEchoMarkerBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISoundEchoMarkerGetter SoundEchoMarkerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SoundEchoMarkerBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISoundEchoMarkerGetter SoundEchoMarkerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SoundEchoMarkerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)SoundEchoMarker_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _DirtinessScaleLocation = (stream.Position - offset);
                    return (int)SoundEchoMarker_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.ODRT:
                {
                    _ODRTLocation = (stream.Position - offset);
                    return (int)SoundEchoMarker_FieldIndex.ODRT;
                }
                case RecordTypeInts.XALG:
                {
                    _XALGLocation = (stream.Position - offset);
                    return (int)SoundEchoMarker_FieldIndex.XALG;
                }
                case RecordTypeInts.NNAM:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)SoundEchoMarker_FieldIndex.Description;
                }
                case RecordTypeInts.ECHO:
                case RecordTypeInts.ECHE:
                {
                    this.Markers = this.ParseRepeatedTypelessSubrecord<IEchoMarkerGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        itemStartMarker: RecordTypes.ECHO,
                        itemEndMarker: RecordTypes.ECHE,
                        factory: EchoMarkerBinaryOverlay.EchoMarkerFactory);
                    return (int)SoundEchoMarker_FieldIndex.Markers;
                }
                case RecordTypeInts.ECHD:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.DefaultStartMarker = EchoMarkerBinaryOverlay.EchoMarkerFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    stream.TryReadSubrecord(RecordTypes.ECHE, out _); // Skip marker
                    return (int)SoundEchoMarker_FieldIndex.DefaultStartMarker;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundEchoMarkerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<SoundEchoMarker>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISoundEchoMarkerGetter rhs) return false;
            return ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundEchoMarkerGetter? obj)
        {
            return ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundEchoMarkerCommon)((ISoundEchoMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

