/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Spell :
        StarfieldMajorRecord,
        IEquatable<ISpellGetter>,
        ILoquiObjectSetter<Spell>,
        ISpellInternal
    {
        #region Ctor
        protected Spell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ISpellGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region ODTY
        public Single? ODTY { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ISpellGetter.ODTY => this.ODTY;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ISpellGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? ISpellGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region EquipmentType
        private readonly IFormLinkNullable<IEquipTypeGetter> _EquipmentType = new FormLinkNullable<IEquipTypeGetter>();
        public IFormLinkNullable<IEquipTypeGetter> EquipmentType
        {
            get => _EquipmentType;
            set => _EquipmentType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEquipTypeGetter> ISpellGetter.EquipmentType => this.EquipmentType;
        #endregion
        #region PickupSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _PickupSound;
        public SoundReference? PickupSound
        {
            get => _PickupSound;
            set => _PickupSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? ISpellGetter.PickupSound => this.PickupSound;
        #endregion
        #region DropdownSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _DropdownSound;
        public SoundReference? DropdownSound
        {
            get => _DropdownSound;
            set => _DropdownSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? ISpellGetter.DropdownSound => this.DropdownSound;
        #endregion
        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter ISpellGetter.Description => this.Description;
        #endregion
        #region BaseCost
        public UInt32 BaseCost { get; set; } = default(UInt32);
        #endregion
        #region Flags
        public Spell.Flag Flags { get; set; } = default(Spell.Flag);
        #endregion
        #region Type
        public Spell.SpellType Type { get; set; } = default(Spell.SpellType);
        #endregion
        #region ChargeTime
        public Single ChargeTime { get; set; } = default(Single);
        #endregion
        #region CastType
        public CastType CastType { get; set; } = default(CastType);
        #endregion
        #region TargetType
        public TargetType TargetType { get; set; } = default(TargetType);
        #endregion
        #region CastDuration
        public Single CastDuration { get; set; } = default(Single);
        #endregion
        #region Range
        public Single Range { get; set; } = default(Single);
        #endregion
        #region CastingPerk
        private readonly IFormLink<IPerkGetter> _CastingPerk = new FormLink<IPerkGetter>();
        public IFormLink<IPerkGetter> CastingPerk
        {
            get => _CastingPerk;
            set => _CastingPerk.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IPerkGetter> ISpellGetter.CastingPerk => this.CastingPerk;
        #endregion
        #region MAGF
        public Int32? MAGF { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ISpellGetter.MAGF => this.MAGF;
        #endregion
        #region MUID
        public Int32? MUID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ISpellGetter.MUID => this.MUID;
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Effect> _Effects = new ExtendedList<Effect>();
        public ExtendedList<Effect> Effects
        {
            get => this._Effects;
            init => this._Effects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEffectGetter> ISpellGetter.Effects => _Effects;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SpellMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.ODTY = initialValue;
                this.Name = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.EquipmentType = initialValue;
                this.PickupSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.DropdownSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.Description = initialValue;
                this.BaseCost = initialValue;
                this.Flags = initialValue;
                this.Type = initialValue;
                this.ChargeTime = initialValue;
                this.CastType = initialValue;
                this.TargetType = initialValue;
                this.CastDuration = initialValue;
                this.Range = initialValue;
                this.CastingPerk = initialValue;
                this.MAGF = initialValue;
                this.MUID = initialValue;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem ObjectBounds,
                TItem ODTY,
                TItem Name,
                TItem Keywords,
                TItem EquipmentType,
                TItem PickupSound,
                TItem DropdownSound,
                TItem Description,
                TItem BaseCost,
                TItem Flags,
                TItem Type,
                TItem ChargeTime,
                TItem CastType,
                TItem TargetType,
                TItem CastDuration,
                TItem Range,
                TItem CastingPerk,
                TItem MAGF,
                TItem MUID,
                TItem Effects)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.ODTY = ODTY;
                this.Name = Name;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.EquipmentType = EquipmentType;
                this.PickupSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(PickupSound, new SoundReference.Mask<TItem>(PickupSound));
                this.DropdownSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(DropdownSound, new SoundReference.Mask<TItem>(DropdownSound));
                this.Description = Description;
                this.BaseCost = BaseCost;
                this.Flags = Flags;
                this.Type = Type;
                this.ChargeTime = ChargeTime;
                this.CastType = CastType;
                this.TargetType = TargetType;
                this.CastDuration = CastDuration;
                this.Range = Range;
                this.CastingPerk = CastingPerk;
                this.MAGF = MAGF;
                this.MUID = MUID;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(Effects, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem ODTY;
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem EquipmentType;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? PickupSound { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? DropdownSound { get; set; }
            public TItem Description;
            public TItem BaseCost;
            public TItem Flags;
            public TItem Type;
            public TItem ChargeTime;
            public TItem CastType;
            public TItem TargetType;
            public TItem CastDuration;
            public TItem Range;
            public TItem CastingPerk;
            public TItem MAGF;
            public TItem MUID;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>? Effects;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.ODTY, rhs.ODTY)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.EquipmentType, rhs.EquipmentType)) return false;
                if (!object.Equals(this.PickupSound, rhs.PickupSound)) return false;
                if (!object.Equals(this.DropdownSound, rhs.DropdownSound)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.BaseCost, rhs.BaseCost)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.ChargeTime, rhs.ChargeTime)) return false;
                if (!object.Equals(this.CastType, rhs.CastType)) return false;
                if (!object.Equals(this.TargetType, rhs.TargetType)) return false;
                if (!object.Equals(this.CastDuration, rhs.CastDuration)) return false;
                if (!object.Equals(this.Range, rhs.Range)) return false;
                if (!object.Equals(this.CastingPerk, rhs.CastingPerk)) return false;
                if (!object.Equals(this.MAGF, rhs.MAGF)) return false;
                if (!object.Equals(this.MUID, rhs.MUID)) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.ODTY);
                hash.Add(this.Name);
                hash.Add(this.Keywords);
                hash.Add(this.EquipmentType);
                hash.Add(this.PickupSound);
                hash.Add(this.DropdownSound);
                hash.Add(this.Description);
                hash.Add(this.BaseCost);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.ChargeTime);
                hash.Add(this.CastType);
                hash.Add(this.TargetType);
                hash.Add(this.CastDuration);
                hash.Add(this.Range);
                hash.Add(this.CastingPerk);
                hash.Add(this.MAGF);
                hash.Add(this.MUID);
                hash.Add(this.Effects);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.ODTY)) return false;
                if (!eval(this.Name)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.EquipmentType)) return false;
                if (PickupSound != null)
                {
                    if (!eval(this.PickupSound.Overall)) return false;
                    if (this.PickupSound.Specific != null && !this.PickupSound.Specific.All(eval)) return false;
                }
                if (DropdownSound != null)
                {
                    if (!eval(this.DropdownSound.Overall)) return false;
                    if (this.DropdownSound.Specific != null && !this.DropdownSound.Specific.All(eval)) return false;
                }
                if (!eval(this.Description)) return false;
                if (!eval(this.BaseCost)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.ChargeTime)) return false;
                if (!eval(this.CastType)) return false;
                if (!eval(this.TargetType)) return false;
                if (!eval(this.CastDuration)) return false;
                if (!eval(this.Range)) return false;
                if (!eval(this.CastingPerk)) return false;
                if (!eval(this.MAGF)) return false;
                if (!eval(this.MUID)) return false;
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.ODTY)) return true;
                if (eval(this.Name)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.EquipmentType)) return true;
                if (PickupSound != null)
                {
                    if (eval(this.PickupSound.Overall)) return true;
                    if (this.PickupSound.Specific != null && this.PickupSound.Specific.Any(eval)) return true;
                }
                if (DropdownSound != null)
                {
                    if (eval(this.DropdownSound.Overall)) return true;
                    if (this.DropdownSound.Specific != null && this.DropdownSound.Specific.Any(eval)) return true;
                }
                if (eval(this.Description)) return true;
                if (eval(this.BaseCost)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.ChargeTime)) return true;
                if (eval(this.CastType)) return true;
                if (eval(this.TargetType)) return true;
                if (eval(this.CastDuration)) return true;
                if (eval(this.Range)) return true;
                if (eval(this.CastingPerk)) return true;
                if (eval(this.MAGF)) return true;
                if (eval(this.MUID)) return true;
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Spell.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.ODTY = eval(this.ODTY);
                obj.Name = eval(this.Name);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.EquipmentType = eval(this.EquipmentType);
                obj.PickupSound = this.PickupSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.PickupSound.Overall), this.PickupSound.Specific?.Translate(eval));
                obj.DropdownSound = this.DropdownSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.DropdownSound.Overall), this.DropdownSound.Specific?.Translate(eval));
                obj.Description = eval(this.Description);
                obj.BaseCost = eval(this.BaseCost);
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                obj.ChargeTime = eval(this.ChargeTime);
                obj.CastType = eval(this.CastType);
                obj.TargetType = eval(this.TargetType);
                obj.CastDuration = eval(this.CastDuration);
                obj.Range = eval(this.Range);
                obj.CastingPerk = eval(this.CastingPerk);
                obj.MAGF = eval(this.MAGF);
                obj.MUID = eval(this.MUID);
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect.Mask<R>?>>?>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, Effect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Effect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific)
                        {
                            MaskItemIndexed<R, Effect.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Effect.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Spell.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Spell.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Spell.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.ODTY ?? true)
                    {
                        sb.AppendItem(ODTY, "ODTY");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.EquipmentType ?? true)
                    {
                        sb.AppendItem(EquipmentType, "EquipmentType");
                    }
                    if (printMask?.PickupSound?.Overall ?? true)
                    {
                        PickupSound?.Print(sb);
                    }
                    if (printMask?.DropdownSound?.Overall ?? true)
                    {
                        DropdownSound?.Print(sb);
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if (printMask?.BaseCost ?? true)
                    {
                        sb.AppendItem(BaseCost, "BaseCost");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.ChargeTime ?? true)
                    {
                        sb.AppendItem(ChargeTime, "ChargeTime");
                    }
                    if (printMask?.CastType ?? true)
                    {
                        sb.AppendItem(CastType, "CastType");
                    }
                    if (printMask?.TargetType ?? true)
                    {
                        sb.AppendItem(TargetType, "TargetType");
                    }
                    if (printMask?.CastDuration ?? true)
                    {
                        sb.AppendItem(CastDuration, "CastDuration");
                    }
                    if (printMask?.Range ?? true)
                    {
                        sb.AppendItem(Range, "Range");
                    }
                    if (printMask?.CastingPerk ?? true)
                    {
                        sb.AppendItem(CastingPerk, "CastingPerk");
                    }
                    if (printMask?.MAGF ?? true)
                    {
                        sb.AppendItem(MAGF, "MAGF");
                    }
                    if (printMask?.MUID ?? true)
                    {
                        sb.AppendItem(MUID, "MUID");
                    }
                    if ((printMask?.Effects?.Overall ?? true)
                        && Effects is {} EffectsItem)
                    {
                        sb.AppendLine("Effects =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EffectsItem.Overall);
                            if (EffectsItem.Specific != null)
                            {
                                foreach (var subItem in EffectsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? ODTY;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? EquipmentType;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? PickupSound;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? DropdownSound;
            public Exception? Description;
            public Exception? BaseCost;
            public Exception? Flags;
            public Exception? Type;
            public Exception? ChargeTime;
            public Exception? CastType;
            public Exception? TargetType;
            public Exception? CastDuration;
            public Exception? Range;
            public Exception? CastingPerk;
            public Exception? MAGF;
            public Exception? MUID;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>? Effects;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Spell_FieldIndex enu = (Spell_FieldIndex)index;
                switch (enu)
                {
                    case Spell_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Spell_FieldIndex.ODTY:
                        return ODTY;
                    case Spell_FieldIndex.Name:
                        return Name;
                    case Spell_FieldIndex.Keywords:
                        return Keywords;
                    case Spell_FieldIndex.EquipmentType:
                        return EquipmentType;
                    case Spell_FieldIndex.PickupSound:
                        return PickupSound;
                    case Spell_FieldIndex.DropdownSound:
                        return DropdownSound;
                    case Spell_FieldIndex.Description:
                        return Description;
                    case Spell_FieldIndex.BaseCost:
                        return BaseCost;
                    case Spell_FieldIndex.Flags:
                        return Flags;
                    case Spell_FieldIndex.Type:
                        return Type;
                    case Spell_FieldIndex.ChargeTime:
                        return ChargeTime;
                    case Spell_FieldIndex.CastType:
                        return CastType;
                    case Spell_FieldIndex.TargetType:
                        return TargetType;
                    case Spell_FieldIndex.CastDuration:
                        return CastDuration;
                    case Spell_FieldIndex.Range:
                        return Range;
                    case Spell_FieldIndex.CastingPerk:
                        return CastingPerk;
                    case Spell_FieldIndex.MAGF:
                        return MAGF;
                    case Spell_FieldIndex.MUID:
                        return MUID;
                    case Spell_FieldIndex.Effects:
                        return Effects;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Spell_FieldIndex enu = (Spell_FieldIndex)index;
                switch (enu)
                {
                    case Spell_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Spell_FieldIndex.ODTY:
                        this.ODTY = ex;
                        break;
                    case Spell_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Spell_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Spell_FieldIndex.EquipmentType:
                        this.EquipmentType = ex;
                        break;
                    case Spell_FieldIndex.PickupSound:
                        this.PickupSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Spell_FieldIndex.DropdownSound:
                        this.DropdownSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Spell_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Spell_FieldIndex.BaseCost:
                        this.BaseCost = ex;
                        break;
                    case Spell_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Spell_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Spell_FieldIndex.ChargeTime:
                        this.ChargeTime = ex;
                        break;
                    case Spell_FieldIndex.CastType:
                        this.CastType = ex;
                        break;
                    case Spell_FieldIndex.TargetType:
                        this.TargetType = ex;
                        break;
                    case Spell_FieldIndex.CastDuration:
                        this.CastDuration = ex;
                        break;
                    case Spell_FieldIndex.Range:
                        this.Range = ex;
                        break;
                    case Spell_FieldIndex.CastingPerk:
                        this.CastingPerk = ex;
                        break;
                    case Spell_FieldIndex.MAGF:
                        this.MAGF = ex;
                        break;
                    case Spell_FieldIndex.MUID:
                        this.MUID = ex;
                        break;
                    case Spell_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Spell_FieldIndex enu = (Spell_FieldIndex)index;
                switch (enu)
                {
                    case Spell_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Spell_FieldIndex.ODTY:
                        this.ODTY = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Spell_FieldIndex.EquipmentType:
                        this.EquipmentType = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.PickupSound:
                        this.PickupSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Spell_FieldIndex.DropdownSound:
                        this.DropdownSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Spell_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.BaseCost:
                        this.BaseCost = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.ChargeTime:
                        this.ChargeTime = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.CastType:
                        this.CastType = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.TargetType:
                        this.TargetType = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.CastDuration:
                        this.CastDuration = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.Range:
                        this.Range = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.CastingPerk:
                        this.CastingPerk = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.MAGF:
                        this.MAGF = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.MUID:
                        this.MUID = (Exception?)obj;
                        break;
                    case Spell_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (ODTY != null) return true;
                if (Name != null) return true;
                if (Keywords != null) return true;
                if (EquipmentType != null) return true;
                if (PickupSound != null) return true;
                if (DropdownSound != null) return true;
                if (Description != null) return true;
                if (BaseCost != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (ChargeTime != null) return true;
                if (CastType != null) return true;
                if (TargetType != null) return true;
                if (CastDuration != null) return true;
                if (Range != null) return true;
                if (CastingPerk != null) return true;
                if (MAGF != null) return true;
                if (MUID != null) return true;
                if (Effects != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(ODTY, "ODTY");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(EquipmentType, "EquipmentType");
                }
                PickupSound?.Print(sb);
                DropdownSound?.Print(sb);
                {
                    sb.AppendItem(Description, "Description");
                }
                {
                    sb.AppendItem(BaseCost, "BaseCost");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(ChargeTime, "ChargeTime");
                }
                {
                    sb.AppendItem(CastType, "CastType");
                }
                {
                    sb.AppendItem(TargetType, "TargetType");
                }
                {
                    sb.AppendItem(CastDuration, "CastDuration");
                }
                {
                    sb.AppendItem(Range, "Range");
                }
                {
                    sb.AppendItem(CastingPerk, "CastingPerk");
                }
                {
                    sb.AppendItem(MAGF, "MAGF");
                }
                {
                    sb.AppendItem(MUID, "MUID");
                }
                if (Effects is {} EffectsItem)
                {
                    sb.AppendLine("Effects =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EffectsItem.Overall);
                        if (EffectsItem.Specific != null)
                        {
                            foreach (var subItem in EffectsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.ODTY = this.ODTY.Combine(rhs.ODTY);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.EquipmentType = this.EquipmentType.Combine(rhs.EquipmentType);
                ret.PickupSound = this.PickupSound.Combine(rhs.PickupSound, (l, r) => l.Combine(r));
                ret.DropdownSound = this.DropdownSound.Combine(rhs.DropdownSound, (l, r) => l.Combine(r));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.BaseCost = this.BaseCost.Combine(rhs.BaseCost);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.ChargeTime = this.ChargeTime.Combine(rhs.ChargeTime);
                ret.CastType = this.CastType.Combine(rhs.CastType);
                ret.TargetType = this.TargetType.Combine(rhs.TargetType);
                ret.CastDuration = this.CastDuration.Combine(rhs.CastDuration);
                ret.Range = this.Range.Combine(rhs.Range);
                ret.CastingPerk = this.CastingPerk.Combine(rhs.CastingPerk);
                ret.MAGF = this.MAGF.Combine(rhs.MAGF);
                ret.MUID = this.MUID.Combine(rhs.MUID);
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), Noggog.ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool ODTY;
            public bool Name;
            public bool Keywords;
            public bool EquipmentType;
            public SoundReference.TranslationMask? PickupSound;
            public SoundReference.TranslationMask? DropdownSound;
            public bool Description;
            public bool BaseCost;
            public bool Flags;
            public bool Type;
            public bool ChargeTime;
            public bool CastType;
            public bool TargetType;
            public bool CastDuration;
            public bool Range;
            public bool CastingPerk;
            public bool MAGF;
            public bool MUID;
            public Effect.TranslationMask? Effects;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ODTY = defaultOn;
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.EquipmentType = defaultOn;
                this.Description = defaultOn;
                this.BaseCost = defaultOn;
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.ChargeTime = defaultOn;
                this.CastType = defaultOn;
                this.TargetType = defaultOn;
                this.CastDuration = defaultOn;
                this.Range = defaultOn;
                this.CastingPerk = defaultOn;
                this.MAGF = defaultOn;
                this.MUID = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((ODTY, null));
                ret.Add((Name, null));
                ret.Add((Keywords, null));
                ret.Add((EquipmentType, null));
                ret.Add((PickupSound != null ? PickupSound.OnOverall : DefaultOn, PickupSound?.GetCrystal()));
                ret.Add((DropdownSound != null ? DropdownSound.OnOverall : DefaultOn, DropdownSound?.GetCrystal()));
                ret.Add((Description, null));
                ret.Add((BaseCost, null));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((ChargeTime, null));
                ret.Add((CastType, null));
                ret.Add((TargetType, null));
                ret.Add((CastDuration, null));
                ret.Add((Range, null));
                ret.Add((CastingPerk, null));
                ret.Add((MAGF, null));
                ret.Add((MUID, null));
                ret.Add((Effects == null ? DefaultOn : !Effects.GetCrystal().CopyNothing, Effects?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Spell_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SpellCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SpellSetterCommon.Instance.RemapLinks(this, mapping);
        public Spell(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Spell(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Spell(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Spell(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Spell(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Spell>.ToString(this);
        }

        protected override Type LinkType => typeof(ISpell);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISpellGetter rhs) return false;
            return ((SpellCommon)((ISpellGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISpellGetter? obj)
        {
            return ((SpellCommon)((ISpellGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SpellCommon)((ISpellGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SpellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SpellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Spell CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Spell();
            ((SpellSetterCommon)((ISpellGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Spell item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SpellSetterCommon)((ISpellGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Spell GetNew()
        {
            return new Spell();
        }

    }
    #endregion

    #region Interface
    public partial interface ISpell :
        IBaseObject,
        IEffectRecord,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<ISpellInternal>,
        INamed,
        INamedRequired,
        IObjectBounded,
        ISpellGetter,
        ISpellRecord,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new Single? ODTY { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new IFormLinkNullable<IEquipTypeGetter> EquipmentType { get; set; }
        new SoundReference? PickupSound { get; set; }
        new SoundReference? DropdownSound { get; set; }
        new TranslatedString Description { get; set; }
        new UInt32 BaseCost { get; set; }
        new Spell.Flag Flags { get; set; }
        new Spell.SpellType Type { get; set; }
        new Single ChargeTime { get; set; }
        new CastType CastType { get; set; }
        new TargetType TargetType { get; set; }
        new Single CastDuration { get; set; }
        new Single Range { get; set; }
        new IFormLink<IPerkGetter> CastingPerk { get; set; }
        new Int32? MAGF { get; set; }
        new Int32? MUID { get; set; }
        new ExtendedList<Effect> Effects { get; }
    }

    public partial interface ISpellInternal :
        IStarfieldMajorRecordInternal,
        ISpell,
        ISpellGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.SPEL)]
    public partial interface ISpellGetter :
        IStarfieldMajorRecordGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IEffectRecordGetter,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<ISpellGetter>,
        IMapsToGetter<ISpellGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        ISpellRecordGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Spell_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        Single? ODTY { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IFormLinkNullableGetter<IEquipTypeGetter> EquipmentType { get; }
        ISoundReferenceGetter? PickupSound { get; }
        ISoundReferenceGetter? DropdownSound { get; }
        ITranslatedStringGetter Description { get; }
        UInt32 BaseCost { get; }
        Spell.Flag Flags { get; }
        Spell.SpellType Type { get; }
        Single ChargeTime { get; }
        CastType CastType { get; }
        TargetType TargetType { get; }
        Single CastDuration { get; }
        Single Range { get; }
        IFormLinkGetter<IPerkGetter> CastingPerk { get; }
        Int32? MAGF { get; }
        Int32? MUID { get; }
        IReadOnlyList<IEffectGetter> Effects { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SpellMixIn
    {
        public static void Clear(this ISpellInternal item)
        {
            ((SpellSetterCommon)((ISpellGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Spell.Mask<bool> GetEqualsMask(
            this ISpellGetter item,
            ISpellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SpellCommon)((ISpellGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISpellGetter item,
            string? name = null,
            Spell.Mask<bool>? printMask = null)
        {
            return ((SpellCommon)((ISpellGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISpellGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Spell.Mask<bool>? printMask = null)
        {
            ((SpellCommon)((ISpellGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISpellGetter item,
            ISpellGetter rhs,
            Spell.TranslationMask? equalsMask = null)
        {
            return ((SpellCommon)((ISpellGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISpellInternal lhs,
            ISpellGetter rhs,
            out Spell.ErrorMask errorMask,
            Spell.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SpellSetterTranslationCommon)((ISpellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Spell.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISpellInternal lhs,
            ISpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SpellSetterTranslationCommon)((ISpellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Spell DeepCopy(
            this ISpellGetter item,
            Spell.TranslationMask? copyMask = null)
        {
            return ((SpellSetterTranslationCommon)((ISpellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Spell DeepCopy(
            this ISpellGetter item,
            out Spell.ErrorMask errorMask,
            Spell.TranslationMask? copyMask = null)
        {
            return ((SpellSetterTranslationCommon)((ISpellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Spell DeepCopy(
            this ISpellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SpellSetterTranslationCommon)((ISpellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Spell Duplicate(
            this ISpellGetter item,
            FormKey formKey,
            Spell.TranslationMask? copyMask = null)
        {
            return ((SpellCommon)((ISpellGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Spell Duplicate(
            this ISpellGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SpellCommon)((ISpellGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISpellInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SpellSetterCommon)((ISpellGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Spell_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        ObjectBounds = 7,
        ODTY = 8,
        Name = 9,
        Keywords = 10,
        EquipmentType = 11,
        PickupSound = 12,
        DropdownSound = 13,
        Description = 14,
        BaseCost = 15,
        Flags = 16,
        Type = 17,
        ChargeTime = 18,
        CastType = 19,
        TargetType = 20,
        CastDuration = 21,
        Range = 22,
        CastingPerk = 23,
        MAGF = 24,
        MUID = 25,
        Effects = 26,
    }
    #endregion

    #region Registration
    internal partial class Spell_Registration : ILoquiRegistration
    {
        public static readonly Spell_Registration Instance = new Spell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 20;

        public const ushort FieldCount = 27;

        public static readonly Type MaskType = typeof(Spell.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Spell.ErrorMask);

        public static readonly Type ClassType = typeof(Spell);

        public static readonly Type GetterType = typeof(ISpellGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISpell);

        public static readonly Type? InternalSetterType = typeof(ISpellInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Spell";

        public const string Name = "Spell";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SPEL;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SPEL);
            var all = RecordCollection.Factory(
                RecordTypes.SPEL,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.FULL,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.ETYP,
                RecordTypes.PUSH,
                RecordTypes.PDSH,
                RecordTypes.DESC,
                RecordTypes.SPIT,
                RecordTypes.MAGF,
                RecordTypes.MUID,
                RecordTypes.EFID,
                RecordTypes.EFIT,
                RecordTypes.CTDA,
                RecordTypes.MNAM,
                RecordTypes.ANAM,
                RecordTypes.ZNAM,
                RecordTypes.EFIF,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SpellBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SpellSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly SpellSetterCommon Instance = new SpellSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISpellInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.ODTY = default;
            item.Name = default;
            item.Keywords = null;
            item.EquipmentType.Clear();
            item.PickupSound = null;
            item.DropdownSound = null;
            item.Description.Clear();
            item.BaseCost = default(UInt32);
            item.Flags = default(Spell.Flag);
            item.Type = default(Spell.SpellType);
            item.ChargeTime = default(Single);
            item.CastType = default(CastType);
            item.TargetType = default(TargetType);
            item.CastDuration = default(Single);
            item.Range = default(Single);
            item.CastingPerk.Clear();
            item.MAGF = default;
            item.MUID = default;
            item.Effects.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ISpellInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISpellInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISpell obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.EquipmentType.Relink(mapping);
            obj.PickupSound?.RemapLinks(mapping);
            obj.DropdownSound?.RemapLinks(mapping);
            obj.CastingPerk.Relink(mapping);
            obj.Effects.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISpellInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISpellInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SpellBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SpellBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Spell)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Spell)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SpellCommon : StarfieldMajorRecordCommon
    {
        public new static readonly SpellCommon Instance = new SpellCommon();

        public Spell.Mask<bool> GetEqualsMask(
            ISpellGetter item,
            ISpellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Spell.Mask<bool>(false);
            ((SpellCommon)((ISpellGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISpellGetter item,
            ISpellGetter rhs,
            Spell.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.ODTY = item.ODTY.EqualsWithin(rhs.ODTY);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.EquipmentType = item.EquipmentType.Equals(rhs.EquipmentType);
            ret.PickupSound = EqualsMaskHelper.EqualsHelper(
                item.PickupSound,
                rhs.PickupSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DropdownSound = EqualsMaskHelper.EqualsHelper(
                item.DropdownSound,
                rhs.DropdownSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.BaseCost = item.BaseCost == rhs.BaseCost;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.ChargeTime = item.ChargeTime.EqualsWithin(rhs.ChargeTime);
            ret.CastType = item.CastType == rhs.CastType;
            ret.TargetType = item.TargetType == rhs.TargetType;
            ret.CastDuration = item.CastDuration.EqualsWithin(rhs.CastDuration);
            ret.Range = item.Range.EqualsWithin(rhs.Range);
            ret.CastingPerk = item.CastingPerk.Equals(rhs.CastingPerk);
            ret.MAGF = item.MAGF == rhs.MAGF;
            ret.MUID = item.MUID == rhs.MUID;
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISpellGetter item,
            string? name = null,
            Spell.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISpellGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Spell.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Spell =>");
            }
            else
            {
                sb.AppendLine($"{name} (Spell) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISpellGetter item,
            StructuredStringBuilder sb,
            Spell.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.ODTY ?? true)
                && item.ODTY is {} ODTYItem)
            {
                sb.AppendItem(ODTYItem, "ODTY");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.EquipmentType ?? true)
            {
                sb.AppendItem(item.EquipmentType.FormKeyNullable, "EquipmentType");
            }
            if ((printMask?.PickupSound?.Overall ?? true)
                && item.PickupSound is {} PickupSoundItem)
            {
                PickupSoundItem?.Print(sb, "PickupSound");
            }
            if ((printMask?.DropdownSound?.Overall ?? true)
                && item.DropdownSound is {} DropdownSoundItem)
            {
                DropdownSoundItem?.Print(sb, "DropdownSound");
            }
            if (printMask?.Description ?? true)
            {
                sb.AppendItem(item.Description, "Description");
            }
            if (printMask?.BaseCost ?? true)
            {
                sb.AppendItem(item.BaseCost, "BaseCost");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if (printMask?.ChargeTime ?? true)
            {
                sb.AppendItem(item.ChargeTime, "ChargeTime");
            }
            if (printMask?.CastType ?? true)
            {
                sb.AppendItem(item.CastType, "CastType");
            }
            if (printMask?.TargetType ?? true)
            {
                sb.AppendItem(item.TargetType, "TargetType");
            }
            if (printMask?.CastDuration ?? true)
            {
                sb.AppendItem(item.CastDuration, "CastDuration");
            }
            if (printMask?.Range ?? true)
            {
                sb.AppendItem(item.Range, "Range");
            }
            if (printMask?.CastingPerk ?? true)
            {
                sb.AppendItem(item.CastingPerk.FormKey, "CastingPerk");
            }
            if ((printMask?.MAGF ?? true)
                && item.MAGF is {} MAGFItem)
            {
                sb.AppendItem(MAGFItem, "MAGF");
            }
            if ((printMask?.MUID ?? true)
                && item.MUID is {} MUIDItem)
            {
                sb.AppendItem(MUIDItem, "MUID");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                sb.AppendLine("Effects =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Effects)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static Spell_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Spell_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Spell_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Spell_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Spell_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Spell_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Spell_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Spell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Spell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Spell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Spell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Spell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Spell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISpellGetter? lhs,
            ISpellGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Spell_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.ODTY) ?? true))
            {
                if (!lhs.ODTY.EqualsWithin(rhs.ODTY)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.EquipmentType) ?? true))
            {
                if (!lhs.EquipmentType.Equals(rhs.EquipmentType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.PickupSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PickupSound, rhs.PickupSound, out var lhsPickupSound, out var rhsPickupSound, out var isPickupSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsPickupSound).CommonInstance()!).Equals(lhsPickupSound, rhsPickupSound, equalsMask?.GetSubCrystal((int)Spell_FieldIndex.PickupSound))) return false;
                }
                else if (!isPickupSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.DropdownSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DropdownSound, rhs.DropdownSound, out var lhsDropdownSound, out var rhsDropdownSound, out var isDropdownSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsDropdownSound).CommonInstance()!).Equals(lhsDropdownSound, rhsDropdownSound, equalsMask?.GetSubCrystal((int)Spell_FieldIndex.DropdownSound))) return false;
                }
                else if (!isDropdownSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.BaseCost) ?? true))
            {
                if (lhs.BaseCost != rhs.BaseCost) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.ChargeTime) ?? true))
            {
                if (!lhs.ChargeTime.EqualsWithin(rhs.ChargeTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.CastType) ?? true))
            {
                if (lhs.CastType != rhs.CastType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.TargetType) ?? true))
            {
                if (lhs.TargetType != rhs.TargetType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.CastDuration) ?? true))
            {
                if (!lhs.CastDuration.EqualsWithin(rhs.CastDuration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.Range) ?? true))
            {
                if (!lhs.Range.EqualsWithin(rhs.Range)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.CastingPerk) ?? true))
            {
                if (!lhs.CastingPerk.Equals(rhs.CastingPerk)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.MAGF) ?? true))
            {
                if (lhs.MAGF != rhs.MAGF) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.MUID) ?? true))
            {
                if (lhs.MUID != rhs.MUID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Spell_FieldIndex.Effects) ?? true))
            {
                if (!lhs.Effects.SequenceEqual(rhs.Effects, (l, r) => ((EffectCommon)((IEffectGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Spell_FieldIndex.Effects)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISpellGetter?)lhs,
                rhs: rhs as ISpellGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISpellGetter?)lhs,
                rhs: rhs as ISpellGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISpellGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.ODTY is {} ODTYitem)
            {
                hash.Add(ODTYitem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.EquipmentType);
            if (item.PickupSound is {} PickupSounditem)
            {
                hash.Add(PickupSounditem);
            }
            if (item.DropdownSound is {} DropdownSounditem)
            {
                hash.Add(DropdownSounditem);
            }
            hash.Add(item.Description);
            hash.Add(item.BaseCost);
            hash.Add(item.Flags);
            hash.Add(item.Type);
            hash.Add(item.ChargeTime);
            hash.Add(item.CastType);
            hash.Add(item.TargetType);
            hash.Add(item.CastDuration);
            hash.Add(item.Range);
            hash.Add(item.CastingPerk);
            if (item.MAGF is {} MAGFitem)
            {
                hash.Add(MAGFitem);
            }
            if (item.MUID is {} MUIDitem)
            {
                hash.Add(MUIDitem);
            }
            hash.Add(item.Effects);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ISpellGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISpellGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Spell.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISpellGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.EquipmentType, out var EquipmentTypeInfo))
            {
                yield return EquipmentTypeInfo;
            }
            if (obj.PickupSound is {} PickupSoundItems)
            {
                foreach (var item in PickupSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.DropdownSound is {} DropdownSoundItems)
            {
                foreach (var item in DropdownSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield return FormLinkInformation.Factory(obj.CastingPerk);
            foreach (var item in obj.Effects.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public Spell Duplicate(
            ISpellGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Spell(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISpellGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISpellGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SpellSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly SpellSetterTranslationCommon Instance = new SpellSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISpellInternal item,
            ISpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISpell item,
            ISpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Spell_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Spell_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.ODTY) ?? true))
            {
                item.ODTY = rhs.ODTY;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Spell_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.EquipmentType) ?? true))
            {
                item.EquipmentType.SetTo(rhs.EquipmentType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.PickupSound) ?? true))
            {
                errorMask?.PushIndex((int)Spell_FieldIndex.PickupSound);
                try
                {
                    if(rhs.PickupSound is {} rhsPickupSound)
                    {
                        item.PickupSound = rhsPickupSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Spell_FieldIndex.PickupSound));
                    }
                    else
                    {
                        item.PickupSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.DropdownSound) ?? true))
            {
                errorMask?.PushIndex((int)Spell_FieldIndex.DropdownSound);
                try
                {
                    if(rhs.DropdownSound is {} rhsDropdownSound)
                    {
                        item.DropdownSound = rhsDropdownSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Spell_FieldIndex.DropdownSound));
                    }
                    else
                    {
                        item.DropdownSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.BaseCost) ?? true))
            {
                item.BaseCost = rhs.BaseCost;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.ChargeTime) ?? true))
            {
                item.ChargeTime = rhs.ChargeTime;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.CastType) ?? true))
            {
                item.CastType = rhs.CastType;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.TargetType) ?? true))
            {
                item.TargetType = rhs.TargetType;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.CastDuration) ?? true))
            {
                item.CastDuration = rhs.CastDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Range) ?? true))
            {
                item.Range = rhs.Range;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.CastingPerk) ?? true))
            {
                item.CastingPerk.SetTo(rhs.CastingPerk.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.MAGF) ?? true))
            {
                item.MAGF = rhs.MAGF;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.MUID) ?? true))
            {
                item.MUID = rhs.MUID;
            }
            if ((copyMask?.GetShouldTranslate((int)Spell_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)Spell_FieldIndex.Effects);
                try
                {
                    item.Effects.SetTo(
                        rhs.Effects
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISpell item,
            ISpellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpellInternal)item,
                rhs: (ISpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpell)item,
                rhs: (ISpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpellInternal)item,
                rhs: (ISpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISpell)item,
                rhs: (ISpellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Spell DeepCopy(
            ISpellGetter item,
            Spell.TranslationMask? copyMask = null)
        {
            Spell ret = (Spell)((SpellCommon)((ISpellGetter)item).CommonInstance()!).GetNew();
            ((SpellSetterTranslationCommon)((ISpellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Spell DeepCopy(
            ISpellGetter item,
            out Spell.ErrorMask errorMask,
            Spell.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Spell ret = (Spell)((SpellCommon)((ISpellGetter)item).CommonInstance()!).GetNew();
            ((SpellSetterTranslationCommon)((ISpellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Spell.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Spell DeepCopy(
            ISpellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Spell ret = (Spell)((SpellCommon)((ISpellGetter)item).CommonInstance()!).GetNew();
            ((SpellSetterTranslationCommon)((ISpellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Spell
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Spell_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Spell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SpellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SpellSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SpellSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SpellBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SpellBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISpellGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ODTY,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EquipmentType,
                header: translationParams.ConvertToCustom(RecordTypes.ETYP));
            if (item.PickupSound is {} PickupSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.PUSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)PickupSoundItem).BinaryWriteTranslator).Write(
                        item: PickupSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.DropdownSound is {} DropdownSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.PDSH))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)DropdownSoundItem).BinaryWriteTranslator).Write(
                        item: DropdownSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.SPIT)))
            {
                writer.Write(item.BaseCost);
                EnumBinaryTranslation<Spell.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                EnumBinaryTranslation<Spell.SpellType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Type,
                    length: 1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ChargeTime);
                EnumBinaryTranslation<CastType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.CastType,
                    length: 1);
                EnumBinaryTranslation<TargetType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.TargetType,
                    length: 1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CastDuration);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Range);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CastingPerk);
            }
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MAGF,
                header: translationParams.ConvertToCustom(RecordTypes.MAGF));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MUID,
                header: translationParams.ConvertToCustom(RecordTypes.MUID));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IEffectGetter>.Instance.Write(
                writer: writer,
                items: item.Effects,
                transl: (MutagenWriter subWriter, IEffectGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((EffectBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ISpellGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SPEL,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISpellGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISpellGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISpellGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SpellBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly SpellBinaryCreateTranslation Instance = new SpellBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SPEL;
        public static ParseResult FillBinaryRecordTypes(
            ISpellInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Spell_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ODTY = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Spell_FieldIndex.ODTY;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Spell_FieldIndex.Name;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Spell_FieldIndex.Keywords;
                }
                case RecordTypeInts.ETYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EquipmentType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Spell_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.PUSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.PickupSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Spell_FieldIndex.PickupSound;
                }
                case RecordTypeInts.PDSH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.DropdownSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Spell_FieldIndex.DropdownSound;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Spell_FieldIndex.Description;
                }
                case RecordTypeInts.SPIT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.BaseCost = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.Flags = EnumBinaryTranslation<Spell.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 1) return null;
                    item.Type = EnumBinaryTranslation<Spell.SpellType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 4) return null;
                    item.ChargeTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.CastType = EnumBinaryTranslation<CastType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.TargetType = EnumBinaryTranslation<TargetType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 4) return null;
                    item.CastDuration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Range = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CastingPerk.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Spell_FieldIndex.CastingPerk;
                }
                case RecordTypeInts.MAGF:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Spell_FieldIndex.CastingPerk)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.MAGF = frame.ReadInt32();
                        return new ParseResult((int)Spell_FieldIndex.MAGF, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Spell_FieldIndex.MUID)
                    {
                        item.Effects.SetTo(
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Effect>.Instance.Parse(
                                reader: frame,
                                triggeringRecord: Effect_Registration.TriggerSpecs,
                                translationParams: translationParams,
                                transl: Effect.TryCreateFromBinary));
                        return new ParseResult((int)Spell_FieldIndex.Effects, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.MAGF = frame.ReadInt32();
                                return new ParseResult((int)Spell_FieldIndex.MAGF, nextRecordType);
                            case 1:
                                item.Effects.SetTo(
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Effect>.Instance.Parse(
                                        reader: frame,
                                        triggeringRecord: Effect_Registration.TriggerSpecs,
                                        translationParams: translationParams,
                                        transl: Effect.TryCreateFromBinary));
                                return new ParseResult((int)Spell_FieldIndex.Effects, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.MUID:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Spell_FieldIndex.MAGF)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.MUID = frame.ReadInt32();
                        return new ParseResult((int)Spell_FieldIndex.MUID, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Spell_FieldIndex.MUID)
                    {
                        item.Effects.SetTo(
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Effect>.Instance.Parse(
                                reader: frame,
                                triggeringRecord: Effect_Registration.TriggerSpecs,
                                translationParams: translationParams,
                                transl: Effect.TryCreateFromBinary));
                        return new ParseResult((int)Spell_FieldIndex.Effects, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.MUID = frame.ReadInt32();
                                return new ParseResult((int)Spell_FieldIndex.MUID, nextRecordType);
                            case 1:
                                item.Effects.SetTo(
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Effect>.Instance.Parse(
                                        reader: frame,
                                        triggeringRecord: Effect_Registration.TriggerSpecs,
                                        translationParams: translationParams,
                                        transl: Effect.TryCreateFromBinary));
                                return new ParseResult((int)Spell_FieldIndex.Effects, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                case RecordTypeInts.MNAM:
                case RecordTypeInts.ANAM:
                case RecordTypeInts.ZNAM:
                case RecordTypeInts.EFIF:
                {
                    item.Effects.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Effect>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Effect_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Effect.TryCreateFromBinary));
                    return (int)Spell_FieldIndex.Effects;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SpellBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SpellBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ISpellGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Spell_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Spell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SpellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SpellSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SpellCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SpellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SpellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISpell);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region ODTY
        private int? _ODTYLocation;
        public Single? ODTY => _ODTYLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ODTYLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region EquipmentType
        private int? _EquipmentTypeLocation;
        public IFormLinkNullableGetter<IEquipTypeGetter> EquipmentType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEquipTypeGetter>(_package, _recordData, _EquipmentTypeLocation);
        #endregion
        public ISoundReferenceGetter? PickupSound { get; private set; }
        public ISoundReferenceGetter? DropdownSound { get; private set; }
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #endregion
        private RangeInt32? _SPITLocation;
        #region BaseCost
        private int _BaseCostLocation => _SPITLocation!.Value.Min;
        private bool _BaseCost_IsSet => _SPITLocation.HasValue;
        public UInt32 BaseCost => _BaseCost_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_BaseCostLocation, 4)) : default(UInt32);
        #endregion
        #region Flags
        private int _FlagsLocation => _SPITLocation!.Value.Min + 0x4;
        private bool _Flags_IsSet => _SPITLocation.HasValue;
        public Spell.Flag Flags => _Flags_IsSet ? (Spell.Flag)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region Type
        private int _TypeLocation => _SPITLocation!.Value.Min + 0x8;
        private bool _Type_IsSet => _SPITLocation.HasValue;
        public Spell.SpellType Type => _Type_IsSet ? (Spell.SpellType)_recordData.Span.Slice(_TypeLocation, 0x1)[0] : default;
        #endregion
        #region ChargeTime
        private int _ChargeTimeLocation => _SPITLocation!.Value.Min + 0x9;
        private bool _ChargeTime_IsSet => _SPITLocation.HasValue;
        public Single ChargeTime => _ChargeTime_IsSet ? _recordData.Slice(_ChargeTimeLocation, 4).Float() : default(Single);
        #endregion
        #region CastType
        private int _CastTypeLocation => _SPITLocation!.Value.Min + 0xD;
        private bool _CastType_IsSet => _SPITLocation.HasValue;
        public CastType CastType => _CastType_IsSet ? (CastType)_recordData.Span.Slice(_CastTypeLocation, 0x1)[0] : default;
        #endregion
        #region TargetType
        private int _TargetTypeLocation => _SPITLocation!.Value.Min + 0xE;
        private bool _TargetType_IsSet => _SPITLocation.HasValue;
        public TargetType TargetType => _TargetType_IsSet ? (TargetType)_recordData.Span.Slice(_TargetTypeLocation, 0x1)[0] : default;
        #endregion
        #region CastDuration
        private int _CastDurationLocation => _SPITLocation!.Value.Min + 0xF;
        private bool _CastDuration_IsSet => _SPITLocation.HasValue;
        public Single CastDuration => _CastDuration_IsSet ? _recordData.Slice(_CastDurationLocation, 4).Float() : default(Single);
        #endregion
        #region Range
        private int _RangeLocation => _SPITLocation!.Value.Min + 0x13;
        private bool _Range_IsSet => _SPITLocation.HasValue;
        public Single Range => _Range_IsSet ? _recordData.Slice(_RangeLocation, 4).Float() : default(Single);
        #endregion
        #region CastingPerk
        private int _CastingPerkLocation => _SPITLocation!.Value.Min + 0x17;
        private bool _CastingPerk_IsSet => _SPITLocation.HasValue;
        public IFormLinkGetter<IPerkGetter> CastingPerk => _CastingPerk_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IPerkGetter>(_package, _recordData.Span.Slice(_CastingPerkLocation, 0x4), isSet: _CastingPerk_IsSet) : FormLink<IPerkGetter>.Null;
        #endregion
        #region MAGF
        private int? _MAGFLocation;
        public Int32? MAGF => _MAGFLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MAGFLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region MUID
        private int? _MUIDLocation;
        public Int32? MUID => _MUIDLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MUIDLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        public IReadOnlyList<IEffectGetter> Effects { get; private set; } = Array.Empty<IEffectGetter>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SpellBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISpellGetter SpellFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SpellBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISpellGetter SpellFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SpellFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Spell_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _ODTYLocation = (stream.Position - offset);
                    return (int)Spell_FieldIndex.ODTY;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Spell_FieldIndex.Name;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Spell_FieldIndex.Keywords;
                }
                case RecordTypeInts.ETYP:
                {
                    _EquipmentTypeLocation = (stream.Position - offset);
                    return (int)Spell_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.PUSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.PickupSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Spell_FieldIndex.PickupSound;
                }
                case RecordTypeInts.PDSH:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.DropdownSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Spell_FieldIndex.DropdownSound;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Spell_FieldIndex.Description;
                }
                case RecordTypeInts.SPIT:
                {
                    _SPITLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Spell_FieldIndex.CastingPerk;
                }
                case RecordTypeInts.MAGF:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Spell_FieldIndex.CastingPerk)
                    {
                        _MAGFLocation = (stream.Position - offset);
                        return new ParseResult((int)Spell_FieldIndex.MAGF, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Spell_FieldIndex.MUID)
                    {
                        this.Effects = this.ParseRepeatedTypelessSubrecord<IEffectGetter>(
                            stream: stream,
                            translationParams: translationParams,
                            trigger: Effect_Registration.TriggerSpecs,
                            factory: EffectBinaryOverlay.EffectFactory);
                        return new ParseResult((int)Spell_FieldIndex.Effects, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                _MAGFLocation = (stream.Position - offset);
                                return new ParseResult((int)Spell_FieldIndex.MAGF, type);
                            }
                            case 1:
                            {
                                this.Effects = this.ParseRepeatedTypelessSubrecord<IEffectGetter>(
                                    stream: stream,
                                    translationParams: translationParams,
                                    trigger: Effect_Registration.TriggerSpecs,
                                    factory: EffectBinaryOverlay.EffectFactory);
                                return new ParseResult((int)Spell_FieldIndex.Effects, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.MUID:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)Spell_FieldIndex.MAGF)
                    {
                        _MUIDLocation = (stream.Position - offset);
                        return new ParseResult((int)Spell_FieldIndex.MUID, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)Spell_FieldIndex.MUID)
                    {
                        this.Effects = this.ParseRepeatedTypelessSubrecord<IEffectGetter>(
                            stream: stream,
                            translationParams: translationParams,
                            trigger: Effect_Registration.TriggerSpecs,
                            factory: EffectBinaryOverlay.EffectFactory);
                        return new ParseResult((int)Spell_FieldIndex.Effects, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                _MUIDLocation = (stream.Position - offset);
                                return new ParseResult((int)Spell_FieldIndex.MUID, type);
                            }
                            case 1:
                            {
                                this.Effects = this.ParseRepeatedTypelessSubrecord<IEffectGetter>(
                                    stream: stream,
                                    translationParams: translationParams,
                                    trigger: Effect_Registration.TriggerSpecs,
                                    factory: EffectBinaryOverlay.EffectFactory);
                                return new ParseResult((int)Spell_FieldIndex.Effects, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                case RecordTypeInts.MNAM:
                case RecordTypeInts.ANAM:
                case RecordTypeInts.ZNAM:
                case RecordTypeInts.EFIF:
                {
                    this.Effects = this.ParseRepeatedTypelessSubrecord<IEffectGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: Effect_Registration.TriggerSpecs,
                        factory: EffectBinaryOverlay.EffectFactory);
                    return (int)Spell_FieldIndex.Effects;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SpellMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Spell>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISpellGetter rhs) return false;
            return ((SpellCommon)((ISpellGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISpellGetter? obj)
        {
            return ((SpellCommon)((ISpellGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SpellCommon)((ISpellGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

