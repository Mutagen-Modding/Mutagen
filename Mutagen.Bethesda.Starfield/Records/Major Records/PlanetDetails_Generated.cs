/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class PlanetDetails :
        IEquatable<IPlanetDetailsGetter>,
        ILoquiObjectSetter<PlanetDetails>,
        IPlanetDetails
    {
        #region Ctor
        public PlanetDetails()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Unknown1
        public Int32 Unknown1 { get; set; } = default(Int32);
        #endregion
        #region SpectralClass
        public String SpectralClass { get; set; } = string.Empty;
        #endregion
        #region CatalogueId
        public String CatalogueId { get; set; } = string.Empty;
        #endregion
        #region Life
        public String Life { get; set; } = string.Empty;
        #endregion
        #region Magnetosphere
        public String Magnetosphere { get; set; } = string.Empty;
        #endregion
        #region MassInKg
        public String MassInKg { get; set; } = string.Empty;
        #endregion
        #region Type
        public String Type { get; set; } = string.Empty;
        #endregion
        #region SettledStar
        public String SettledStar { get; set; } = string.Empty;
        #endregion
        #region Special
        public String Special { get; set; } = string.Empty;
        #endregion
        #region Perihelion
        public Double Perihelion { get; set; } = default(Double);
        #endregion
        #region StarDistance
        public Double StarDistance { get; set; } = default(Double);
        #endregion
        #region Density
        public Single Density { get; set; } = default(Single);
        #endregion
        #region Heat
        public Single Heat { get; set; } = default(Single);
        #endregion
        #region Hydro
        public Single Hydro { get; set; } = default(Single);
        #endregion
        #region InnerHz
        public Single InnerHz { get; set; } = default(Single);
        #endregion
        #region OuterHz
        public Single OuterHz { get; set; } = default(Single);
        #endregion
        #region PerihelionAngle
        public Single PerihelionAngle { get; set; } = default(Single);
        #endregion
        #region Unknown2
        public Int32 Unknown2 { get; set; } = default(Int32);
        #endregion
        #region StartAngleInDegrees
        public Single StartAngleInDegrees { get; set; } = default(Single);
        #endregion
        #region YearLengthInDays
        public Single YearLengthInDays { get; set; } = default(Single);
        #endregion
        #region Asteroids
        public UInt32 Asteroids { get; set; } = default(UInt32);
        #endregion
        #region Geostationary
        public Boolean Geostationary { get; set; } = default(Boolean);
        #endregion
        #region RandomSeed
        public Int32 RandomSeed { get; set; } = default(Int32);
        #endregion
        #region Rings
        public Boolean Rings { get; set; } = default(Boolean);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetDetailsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlanetDetailsGetter rhs) return false;
            return ((PlanetDetailsCommon)((IPlanetDetailsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetDetailsGetter? obj)
        {
            return ((PlanetDetailsCommon)((IPlanetDetailsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetDetailsCommon)((IPlanetDetailsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Unknown1 = initialValue;
                this.SpectralClass = initialValue;
                this.CatalogueId = initialValue;
                this.Life = initialValue;
                this.Magnetosphere = initialValue;
                this.MassInKg = initialValue;
                this.Type = initialValue;
                this.SettledStar = initialValue;
                this.Special = initialValue;
                this.Perihelion = initialValue;
                this.StarDistance = initialValue;
                this.Density = initialValue;
                this.Heat = initialValue;
                this.Hydro = initialValue;
                this.InnerHz = initialValue;
                this.OuterHz = initialValue;
                this.PerihelionAngle = initialValue;
                this.Unknown2 = initialValue;
                this.StartAngleInDegrees = initialValue;
                this.YearLengthInDays = initialValue;
                this.Asteroids = initialValue;
                this.Geostationary = initialValue;
                this.RandomSeed = initialValue;
                this.Rings = initialValue;
            }

            public Mask(
                TItem Unknown1,
                TItem SpectralClass,
                TItem CatalogueId,
                TItem Life,
                TItem Magnetosphere,
                TItem MassInKg,
                TItem Type,
                TItem SettledStar,
                TItem Special,
                TItem Perihelion,
                TItem StarDistance,
                TItem Density,
                TItem Heat,
                TItem Hydro,
                TItem InnerHz,
                TItem OuterHz,
                TItem PerihelionAngle,
                TItem Unknown2,
                TItem StartAngleInDegrees,
                TItem YearLengthInDays,
                TItem Asteroids,
                TItem Geostationary,
                TItem RandomSeed,
                TItem Rings)
            {
                this.Unknown1 = Unknown1;
                this.SpectralClass = SpectralClass;
                this.CatalogueId = CatalogueId;
                this.Life = Life;
                this.Magnetosphere = Magnetosphere;
                this.MassInKg = MassInKg;
                this.Type = Type;
                this.SettledStar = SettledStar;
                this.Special = Special;
                this.Perihelion = Perihelion;
                this.StarDistance = StarDistance;
                this.Density = Density;
                this.Heat = Heat;
                this.Hydro = Hydro;
                this.InnerHz = InnerHz;
                this.OuterHz = OuterHz;
                this.PerihelionAngle = PerihelionAngle;
                this.Unknown2 = Unknown2;
                this.StartAngleInDegrees = StartAngleInDegrees;
                this.YearLengthInDays = YearLengthInDays;
                this.Asteroids = Asteroids;
                this.Geostationary = Geostationary;
                this.RandomSeed = RandomSeed;
                this.Rings = Rings;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Unknown1;
            public TItem SpectralClass;
            public TItem CatalogueId;
            public TItem Life;
            public TItem Magnetosphere;
            public TItem MassInKg;
            public TItem Type;
            public TItem SettledStar;
            public TItem Special;
            public TItem Perihelion;
            public TItem StarDistance;
            public TItem Density;
            public TItem Heat;
            public TItem Hydro;
            public TItem InnerHz;
            public TItem OuterHz;
            public TItem PerihelionAngle;
            public TItem Unknown2;
            public TItem StartAngleInDegrees;
            public TItem YearLengthInDays;
            public TItem Asteroids;
            public TItem Geostationary;
            public TItem RandomSeed;
            public TItem Rings;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                if (!object.Equals(this.SpectralClass, rhs.SpectralClass)) return false;
                if (!object.Equals(this.CatalogueId, rhs.CatalogueId)) return false;
                if (!object.Equals(this.Life, rhs.Life)) return false;
                if (!object.Equals(this.Magnetosphere, rhs.Magnetosphere)) return false;
                if (!object.Equals(this.MassInKg, rhs.MassInKg)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.SettledStar, rhs.SettledStar)) return false;
                if (!object.Equals(this.Special, rhs.Special)) return false;
                if (!object.Equals(this.Perihelion, rhs.Perihelion)) return false;
                if (!object.Equals(this.StarDistance, rhs.StarDistance)) return false;
                if (!object.Equals(this.Density, rhs.Density)) return false;
                if (!object.Equals(this.Heat, rhs.Heat)) return false;
                if (!object.Equals(this.Hydro, rhs.Hydro)) return false;
                if (!object.Equals(this.InnerHz, rhs.InnerHz)) return false;
                if (!object.Equals(this.OuterHz, rhs.OuterHz)) return false;
                if (!object.Equals(this.PerihelionAngle, rhs.PerihelionAngle)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.StartAngleInDegrees, rhs.StartAngleInDegrees)) return false;
                if (!object.Equals(this.YearLengthInDays, rhs.YearLengthInDays)) return false;
                if (!object.Equals(this.Asteroids, rhs.Asteroids)) return false;
                if (!object.Equals(this.Geostationary, rhs.Geostationary)) return false;
                if (!object.Equals(this.RandomSeed, rhs.RandomSeed)) return false;
                if (!object.Equals(this.Rings, rhs.Rings)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Unknown1);
                hash.Add(this.SpectralClass);
                hash.Add(this.CatalogueId);
                hash.Add(this.Life);
                hash.Add(this.Magnetosphere);
                hash.Add(this.MassInKg);
                hash.Add(this.Type);
                hash.Add(this.SettledStar);
                hash.Add(this.Special);
                hash.Add(this.Perihelion);
                hash.Add(this.StarDistance);
                hash.Add(this.Density);
                hash.Add(this.Heat);
                hash.Add(this.Hydro);
                hash.Add(this.InnerHz);
                hash.Add(this.OuterHz);
                hash.Add(this.PerihelionAngle);
                hash.Add(this.Unknown2);
                hash.Add(this.StartAngleInDegrees);
                hash.Add(this.YearLengthInDays);
                hash.Add(this.Asteroids);
                hash.Add(this.Geostationary);
                hash.Add(this.RandomSeed);
                hash.Add(this.Rings);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Unknown1)) return false;
                if (!eval(this.SpectralClass)) return false;
                if (!eval(this.CatalogueId)) return false;
                if (!eval(this.Life)) return false;
                if (!eval(this.Magnetosphere)) return false;
                if (!eval(this.MassInKg)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.SettledStar)) return false;
                if (!eval(this.Special)) return false;
                if (!eval(this.Perihelion)) return false;
                if (!eval(this.StarDistance)) return false;
                if (!eval(this.Density)) return false;
                if (!eval(this.Heat)) return false;
                if (!eval(this.Hydro)) return false;
                if (!eval(this.InnerHz)) return false;
                if (!eval(this.OuterHz)) return false;
                if (!eval(this.PerihelionAngle)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.StartAngleInDegrees)) return false;
                if (!eval(this.YearLengthInDays)) return false;
                if (!eval(this.Asteroids)) return false;
                if (!eval(this.Geostationary)) return false;
                if (!eval(this.RandomSeed)) return false;
                if (!eval(this.Rings)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Unknown1)) return true;
                if (eval(this.SpectralClass)) return true;
                if (eval(this.CatalogueId)) return true;
                if (eval(this.Life)) return true;
                if (eval(this.Magnetosphere)) return true;
                if (eval(this.MassInKg)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.SettledStar)) return true;
                if (eval(this.Special)) return true;
                if (eval(this.Perihelion)) return true;
                if (eval(this.StarDistance)) return true;
                if (eval(this.Density)) return true;
                if (eval(this.Heat)) return true;
                if (eval(this.Hydro)) return true;
                if (eval(this.InnerHz)) return true;
                if (eval(this.OuterHz)) return true;
                if (eval(this.PerihelionAngle)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.StartAngleInDegrees)) return true;
                if (eval(this.YearLengthInDays)) return true;
                if (eval(this.Asteroids)) return true;
                if (eval(this.Geostationary)) return true;
                if (eval(this.RandomSeed)) return true;
                if (eval(this.Rings)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlanetDetails.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Unknown1 = eval(this.Unknown1);
                obj.SpectralClass = eval(this.SpectralClass);
                obj.CatalogueId = eval(this.CatalogueId);
                obj.Life = eval(this.Life);
                obj.Magnetosphere = eval(this.Magnetosphere);
                obj.MassInKg = eval(this.MassInKg);
                obj.Type = eval(this.Type);
                obj.SettledStar = eval(this.SettledStar);
                obj.Special = eval(this.Special);
                obj.Perihelion = eval(this.Perihelion);
                obj.StarDistance = eval(this.StarDistance);
                obj.Density = eval(this.Density);
                obj.Heat = eval(this.Heat);
                obj.Hydro = eval(this.Hydro);
                obj.InnerHz = eval(this.InnerHz);
                obj.OuterHz = eval(this.OuterHz);
                obj.PerihelionAngle = eval(this.PerihelionAngle);
                obj.Unknown2 = eval(this.Unknown2);
                obj.StartAngleInDegrees = eval(this.StartAngleInDegrees);
                obj.YearLengthInDays = eval(this.YearLengthInDays);
                obj.Asteroids = eval(this.Asteroids);
                obj.Geostationary = eval(this.Geostationary);
                obj.RandomSeed = eval(this.RandomSeed);
                obj.Rings = eval(this.Rings);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlanetDetails.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlanetDetails.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlanetDetails.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Unknown1 ?? true)
                    {
                        sb.AppendItem(Unknown1, "Unknown1");
                    }
                    if (printMask?.SpectralClass ?? true)
                    {
                        sb.AppendItem(SpectralClass, "SpectralClass");
                    }
                    if (printMask?.CatalogueId ?? true)
                    {
                        sb.AppendItem(CatalogueId, "CatalogueId");
                    }
                    if (printMask?.Life ?? true)
                    {
                        sb.AppendItem(Life, "Life");
                    }
                    if (printMask?.Magnetosphere ?? true)
                    {
                        sb.AppendItem(Magnetosphere, "Magnetosphere");
                    }
                    if (printMask?.MassInKg ?? true)
                    {
                        sb.AppendItem(MassInKg, "MassInKg");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.SettledStar ?? true)
                    {
                        sb.AppendItem(SettledStar, "SettledStar");
                    }
                    if (printMask?.Special ?? true)
                    {
                        sb.AppendItem(Special, "Special");
                    }
                    if (printMask?.Perihelion ?? true)
                    {
                        sb.AppendItem(Perihelion, "Perihelion");
                    }
                    if (printMask?.StarDistance ?? true)
                    {
                        sb.AppendItem(StarDistance, "StarDistance");
                    }
                    if (printMask?.Density ?? true)
                    {
                        sb.AppendItem(Density, "Density");
                    }
                    if (printMask?.Heat ?? true)
                    {
                        sb.AppendItem(Heat, "Heat");
                    }
                    if (printMask?.Hydro ?? true)
                    {
                        sb.AppendItem(Hydro, "Hydro");
                    }
                    if (printMask?.InnerHz ?? true)
                    {
                        sb.AppendItem(InnerHz, "InnerHz");
                    }
                    if (printMask?.OuterHz ?? true)
                    {
                        sb.AppendItem(OuterHz, "OuterHz");
                    }
                    if (printMask?.PerihelionAngle ?? true)
                    {
                        sb.AppendItem(PerihelionAngle, "PerihelionAngle");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.StartAngleInDegrees ?? true)
                    {
                        sb.AppendItem(StartAngleInDegrees, "StartAngleInDegrees");
                    }
                    if (printMask?.YearLengthInDays ?? true)
                    {
                        sb.AppendItem(YearLengthInDays, "YearLengthInDays");
                    }
                    if (printMask?.Asteroids ?? true)
                    {
                        sb.AppendItem(Asteroids, "Asteroids");
                    }
                    if (printMask?.Geostationary ?? true)
                    {
                        sb.AppendItem(Geostationary, "Geostationary");
                    }
                    if (printMask?.RandomSeed ?? true)
                    {
                        sb.AppendItem(RandomSeed, "RandomSeed");
                    }
                    if (printMask?.Rings ?? true)
                    {
                        sb.AppendItem(Rings, "Rings");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Unknown1;
            public Exception? SpectralClass;
            public Exception? CatalogueId;
            public Exception? Life;
            public Exception? Magnetosphere;
            public Exception? MassInKg;
            public Exception? Type;
            public Exception? SettledStar;
            public Exception? Special;
            public Exception? Perihelion;
            public Exception? StarDistance;
            public Exception? Density;
            public Exception? Heat;
            public Exception? Hydro;
            public Exception? InnerHz;
            public Exception? OuterHz;
            public Exception? PerihelionAngle;
            public Exception? Unknown2;
            public Exception? StartAngleInDegrees;
            public Exception? YearLengthInDays;
            public Exception? Asteroids;
            public Exception? Geostationary;
            public Exception? RandomSeed;
            public Exception? Rings;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                PlanetDetails_FieldIndex enu = (PlanetDetails_FieldIndex)index;
                switch (enu)
                {
                    case PlanetDetails_FieldIndex.Unknown1:
                        return Unknown1;
                    case PlanetDetails_FieldIndex.SpectralClass:
                        return SpectralClass;
                    case PlanetDetails_FieldIndex.CatalogueId:
                        return CatalogueId;
                    case PlanetDetails_FieldIndex.Life:
                        return Life;
                    case PlanetDetails_FieldIndex.Magnetosphere:
                        return Magnetosphere;
                    case PlanetDetails_FieldIndex.MassInKg:
                        return MassInKg;
                    case PlanetDetails_FieldIndex.Type:
                        return Type;
                    case PlanetDetails_FieldIndex.SettledStar:
                        return SettledStar;
                    case PlanetDetails_FieldIndex.Special:
                        return Special;
                    case PlanetDetails_FieldIndex.Perihelion:
                        return Perihelion;
                    case PlanetDetails_FieldIndex.StarDistance:
                        return StarDistance;
                    case PlanetDetails_FieldIndex.Density:
                        return Density;
                    case PlanetDetails_FieldIndex.Heat:
                        return Heat;
                    case PlanetDetails_FieldIndex.Hydro:
                        return Hydro;
                    case PlanetDetails_FieldIndex.InnerHz:
                        return InnerHz;
                    case PlanetDetails_FieldIndex.OuterHz:
                        return OuterHz;
                    case PlanetDetails_FieldIndex.PerihelionAngle:
                        return PerihelionAngle;
                    case PlanetDetails_FieldIndex.Unknown2:
                        return Unknown2;
                    case PlanetDetails_FieldIndex.StartAngleInDegrees:
                        return StartAngleInDegrees;
                    case PlanetDetails_FieldIndex.YearLengthInDays:
                        return YearLengthInDays;
                    case PlanetDetails_FieldIndex.Asteroids:
                        return Asteroids;
                    case PlanetDetails_FieldIndex.Geostationary:
                        return Geostationary;
                    case PlanetDetails_FieldIndex.RandomSeed:
                        return RandomSeed;
                    case PlanetDetails_FieldIndex.Rings:
                        return Rings;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                PlanetDetails_FieldIndex enu = (PlanetDetails_FieldIndex)index;
                switch (enu)
                {
                    case PlanetDetails_FieldIndex.Unknown1:
                        this.Unknown1 = ex;
                        break;
                    case PlanetDetails_FieldIndex.SpectralClass:
                        this.SpectralClass = ex;
                        break;
                    case PlanetDetails_FieldIndex.CatalogueId:
                        this.CatalogueId = ex;
                        break;
                    case PlanetDetails_FieldIndex.Life:
                        this.Life = ex;
                        break;
                    case PlanetDetails_FieldIndex.Magnetosphere:
                        this.Magnetosphere = ex;
                        break;
                    case PlanetDetails_FieldIndex.MassInKg:
                        this.MassInKg = ex;
                        break;
                    case PlanetDetails_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case PlanetDetails_FieldIndex.SettledStar:
                        this.SettledStar = ex;
                        break;
                    case PlanetDetails_FieldIndex.Special:
                        this.Special = ex;
                        break;
                    case PlanetDetails_FieldIndex.Perihelion:
                        this.Perihelion = ex;
                        break;
                    case PlanetDetails_FieldIndex.StarDistance:
                        this.StarDistance = ex;
                        break;
                    case PlanetDetails_FieldIndex.Density:
                        this.Density = ex;
                        break;
                    case PlanetDetails_FieldIndex.Heat:
                        this.Heat = ex;
                        break;
                    case PlanetDetails_FieldIndex.Hydro:
                        this.Hydro = ex;
                        break;
                    case PlanetDetails_FieldIndex.InnerHz:
                        this.InnerHz = ex;
                        break;
                    case PlanetDetails_FieldIndex.OuterHz:
                        this.OuterHz = ex;
                        break;
                    case PlanetDetails_FieldIndex.PerihelionAngle:
                        this.PerihelionAngle = ex;
                        break;
                    case PlanetDetails_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case PlanetDetails_FieldIndex.StartAngleInDegrees:
                        this.StartAngleInDegrees = ex;
                        break;
                    case PlanetDetails_FieldIndex.YearLengthInDays:
                        this.YearLengthInDays = ex;
                        break;
                    case PlanetDetails_FieldIndex.Asteroids:
                        this.Asteroids = ex;
                        break;
                    case PlanetDetails_FieldIndex.Geostationary:
                        this.Geostationary = ex;
                        break;
                    case PlanetDetails_FieldIndex.RandomSeed:
                        this.RandomSeed = ex;
                        break;
                    case PlanetDetails_FieldIndex.Rings:
                        this.Rings = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                PlanetDetails_FieldIndex enu = (PlanetDetails_FieldIndex)index;
                switch (enu)
                {
                    case PlanetDetails_FieldIndex.Unknown1:
                        this.Unknown1 = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.SpectralClass:
                        this.SpectralClass = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.CatalogueId:
                        this.CatalogueId = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.Life:
                        this.Life = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.Magnetosphere:
                        this.Magnetosphere = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.MassInKg:
                        this.MassInKg = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.SettledStar:
                        this.SettledStar = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.Special:
                        this.Special = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.Perihelion:
                        this.Perihelion = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.StarDistance:
                        this.StarDistance = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.Density:
                        this.Density = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.Heat:
                        this.Heat = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.Hydro:
                        this.Hydro = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.InnerHz:
                        this.InnerHz = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.OuterHz:
                        this.OuterHz = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.PerihelionAngle:
                        this.PerihelionAngle = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.StartAngleInDegrees:
                        this.StartAngleInDegrees = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.YearLengthInDays:
                        this.YearLengthInDays = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.Asteroids:
                        this.Asteroids = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.Geostationary:
                        this.Geostationary = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.RandomSeed:
                        this.RandomSeed = (Exception?)obj;
                        break;
                    case PlanetDetails_FieldIndex.Rings:
                        this.Rings = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Unknown1 != null) return true;
                if (SpectralClass != null) return true;
                if (CatalogueId != null) return true;
                if (Life != null) return true;
                if (Magnetosphere != null) return true;
                if (MassInKg != null) return true;
                if (Type != null) return true;
                if (SettledStar != null) return true;
                if (Special != null) return true;
                if (Perihelion != null) return true;
                if (StarDistance != null) return true;
                if (Density != null) return true;
                if (Heat != null) return true;
                if (Hydro != null) return true;
                if (InnerHz != null) return true;
                if (OuterHz != null) return true;
                if (PerihelionAngle != null) return true;
                if (Unknown2 != null) return true;
                if (StartAngleInDegrees != null) return true;
                if (YearLengthInDays != null) return true;
                if (Asteroids != null) return true;
                if (Geostationary != null) return true;
                if (RandomSeed != null) return true;
                if (Rings != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Unknown1, "Unknown1");
                }
                {
                    sb.AppendItem(SpectralClass, "SpectralClass");
                }
                {
                    sb.AppendItem(CatalogueId, "CatalogueId");
                }
                {
                    sb.AppendItem(Life, "Life");
                }
                {
                    sb.AppendItem(Magnetosphere, "Magnetosphere");
                }
                {
                    sb.AppendItem(MassInKg, "MassInKg");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(SettledStar, "SettledStar");
                }
                {
                    sb.AppendItem(Special, "Special");
                }
                {
                    sb.AppendItem(Perihelion, "Perihelion");
                }
                {
                    sb.AppendItem(StarDistance, "StarDistance");
                }
                {
                    sb.AppendItem(Density, "Density");
                }
                {
                    sb.AppendItem(Heat, "Heat");
                }
                {
                    sb.AppendItem(Hydro, "Hydro");
                }
                {
                    sb.AppendItem(InnerHz, "InnerHz");
                }
                {
                    sb.AppendItem(OuterHz, "OuterHz");
                }
                {
                    sb.AppendItem(PerihelionAngle, "PerihelionAngle");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
                {
                    sb.AppendItem(StartAngleInDegrees, "StartAngleInDegrees");
                }
                {
                    sb.AppendItem(YearLengthInDays, "YearLengthInDays");
                }
                {
                    sb.AppendItem(Asteroids, "Asteroids");
                }
                {
                    sb.AppendItem(Geostationary, "Geostationary");
                }
                {
                    sb.AppendItem(RandomSeed, "RandomSeed");
                }
                {
                    sb.AppendItem(Rings, "Rings");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
                ret.SpectralClass = this.SpectralClass.Combine(rhs.SpectralClass);
                ret.CatalogueId = this.CatalogueId.Combine(rhs.CatalogueId);
                ret.Life = this.Life.Combine(rhs.Life);
                ret.Magnetosphere = this.Magnetosphere.Combine(rhs.Magnetosphere);
                ret.MassInKg = this.MassInKg.Combine(rhs.MassInKg);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.SettledStar = this.SettledStar.Combine(rhs.SettledStar);
                ret.Special = this.Special.Combine(rhs.Special);
                ret.Perihelion = this.Perihelion.Combine(rhs.Perihelion);
                ret.StarDistance = this.StarDistance.Combine(rhs.StarDistance);
                ret.Density = this.Density.Combine(rhs.Density);
                ret.Heat = this.Heat.Combine(rhs.Heat);
                ret.Hydro = this.Hydro.Combine(rhs.Hydro);
                ret.InnerHz = this.InnerHz.Combine(rhs.InnerHz);
                ret.OuterHz = this.OuterHz.Combine(rhs.OuterHz);
                ret.PerihelionAngle = this.PerihelionAngle.Combine(rhs.PerihelionAngle);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.StartAngleInDegrees = this.StartAngleInDegrees.Combine(rhs.StartAngleInDegrees);
                ret.YearLengthInDays = this.YearLengthInDays.Combine(rhs.YearLengthInDays);
                ret.Asteroids = this.Asteroids.Combine(rhs.Asteroids);
                ret.Geostationary = this.Geostationary.Combine(rhs.Geostationary);
                ret.RandomSeed = this.RandomSeed.Combine(rhs.RandomSeed);
                ret.Rings = this.Rings.Combine(rhs.Rings);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Unknown1;
            public bool SpectralClass;
            public bool CatalogueId;
            public bool Life;
            public bool Magnetosphere;
            public bool MassInKg;
            public bool Type;
            public bool SettledStar;
            public bool Special;
            public bool Perihelion;
            public bool StarDistance;
            public bool Density;
            public bool Heat;
            public bool Hydro;
            public bool InnerHz;
            public bool OuterHz;
            public bool PerihelionAngle;
            public bool Unknown2;
            public bool StartAngleInDegrees;
            public bool YearLengthInDays;
            public bool Asteroids;
            public bool Geostationary;
            public bool RandomSeed;
            public bool Rings;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Unknown1 = defaultOn;
                this.SpectralClass = defaultOn;
                this.CatalogueId = defaultOn;
                this.Life = defaultOn;
                this.Magnetosphere = defaultOn;
                this.MassInKg = defaultOn;
                this.Type = defaultOn;
                this.SettledStar = defaultOn;
                this.Special = defaultOn;
                this.Perihelion = defaultOn;
                this.StarDistance = defaultOn;
                this.Density = defaultOn;
                this.Heat = defaultOn;
                this.Hydro = defaultOn;
                this.InnerHz = defaultOn;
                this.OuterHz = defaultOn;
                this.PerihelionAngle = defaultOn;
                this.Unknown2 = defaultOn;
                this.StartAngleInDegrees = defaultOn;
                this.YearLengthInDays = defaultOn;
                this.Asteroids = defaultOn;
                this.Geostationary = defaultOn;
                this.RandomSeed = defaultOn;
                this.Rings = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Unknown1, null));
                ret.Add((SpectralClass, null));
                ret.Add((CatalogueId, null));
                ret.Add((Life, null));
                ret.Add((Magnetosphere, null));
                ret.Add((MassInKg, null));
                ret.Add((Type, null));
                ret.Add((SettledStar, null));
                ret.Add((Special, null));
                ret.Add((Perihelion, null));
                ret.Add((StarDistance, null));
                ret.Add((Density, null));
                ret.Add((Heat, null));
                ret.Add((Hydro, null));
                ret.Add((InnerHz, null));
                ret.Add((OuterHz, null));
                ret.Add((PerihelionAngle, null));
                ret.Add((Unknown2, null));
                ret.Add((StartAngleInDegrees, null));
                ret.Add((YearLengthInDays, null));
                ret.Add((Asteroids, null));
                ret.Add((Geostationary, null));
                ret.Add((RandomSeed, null));
                ret.Add((Rings, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlanetDetailsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetDetailsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static PlanetDetails CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlanetDetails();
            ((PlanetDetailsSetterCommon)((IPlanetDetailsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlanetDetails item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlanetDetailsSetterCommon)((IPlanetDetailsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static PlanetDetails GetNew()
        {
            return new PlanetDetails();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlanetDetails :
        ILoquiObjectSetter<IPlanetDetails>,
        IPlanetDetailsGetter
    {
        new Int32 Unknown1 { get; set; }
        new String SpectralClass { get; set; }
        new String CatalogueId { get; set; }
        new String Life { get; set; }
        new String Magnetosphere { get; set; }
        new String MassInKg { get; set; }
        new String Type { get; set; }
        new String SettledStar { get; set; }
        new String Special { get; set; }
        new Double Perihelion { get; set; }
        new Double StarDistance { get; set; }
        new Single Density { get; set; }
        new Single Heat { get; set; }
        new Single Hydro { get; set; }
        new Single InnerHz { get; set; }
        new Single OuterHz { get; set; }
        new Single PerihelionAngle { get; set; }
        new Int32 Unknown2 { get; set; }
        new Single StartAngleInDegrees { get; set; }
        new Single YearLengthInDays { get; set; }
        new UInt32 Asteroids { get; set; }
        new Boolean Geostationary { get; set; }
        new Int32 RandomSeed { get; set; }
        new Boolean Rings { get; set; }
    }

    public partial interface IPlanetDetailsGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IPlanetDetailsGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => PlanetDetails_Registration.Instance;
        Int32 Unknown1 { get; }
        String SpectralClass { get; }
        String CatalogueId { get; }
        String Life { get; }
        String Magnetosphere { get; }
        String MassInKg { get; }
        String Type { get; }
        String SettledStar { get; }
        String Special { get; }
        Double Perihelion { get; }
        Double StarDistance { get; }
        Single Density { get; }
        Single Heat { get; }
        Single Hydro { get; }
        Single InnerHz { get; }
        Single OuterHz { get; }
        Single PerihelionAngle { get; }
        Int32 Unknown2 { get; }
        Single StartAngleInDegrees { get; }
        Single YearLengthInDays { get; }
        UInt32 Asteroids { get; }
        Boolean Geostationary { get; }
        Int32 RandomSeed { get; }
        Boolean Rings { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlanetDetailsMixIn
    {
        public static void Clear(this IPlanetDetails item)
        {
            ((PlanetDetailsSetterCommon)((IPlanetDetailsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlanetDetails.Mask<bool> GetEqualsMask(
            this IPlanetDetailsGetter item,
            IPlanetDetailsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlanetDetailsCommon)((IPlanetDetailsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlanetDetailsGetter item,
            string? name = null,
            PlanetDetails.Mask<bool>? printMask = null)
        {
            return ((PlanetDetailsCommon)((IPlanetDetailsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlanetDetailsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlanetDetails.Mask<bool>? printMask = null)
        {
            ((PlanetDetailsCommon)((IPlanetDetailsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlanetDetailsGetter item,
            IPlanetDetailsGetter rhs,
            PlanetDetails.TranslationMask? equalsMask = null)
        {
            return ((PlanetDetailsCommon)((IPlanetDetailsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlanetDetails lhs,
            IPlanetDetailsGetter rhs)
        {
            ((PlanetDetailsSetterTranslationCommon)((IPlanetDetailsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlanetDetails lhs,
            IPlanetDetailsGetter rhs,
            PlanetDetails.TranslationMask? copyMask = null)
        {
            ((PlanetDetailsSetterTranslationCommon)((IPlanetDetailsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IPlanetDetails lhs,
            IPlanetDetailsGetter rhs,
            out PlanetDetails.ErrorMask errorMask,
            PlanetDetails.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlanetDetailsSetterTranslationCommon)((IPlanetDetailsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlanetDetails.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlanetDetails lhs,
            IPlanetDetailsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlanetDetailsSetterTranslationCommon)((IPlanetDetailsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlanetDetails DeepCopy(
            this IPlanetDetailsGetter item,
            PlanetDetails.TranslationMask? copyMask = null)
        {
            return ((PlanetDetailsSetterTranslationCommon)((IPlanetDetailsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlanetDetails DeepCopy(
            this IPlanetDetailsGetter item,
            out PlanetDetails.ErrorMask errorMask,
            PlanetDetails.TranslationMask? copyMask = null)
        {
            return ((PlanetDetailsSetterTranslationCommon)((IPlanetDetailsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlanetDetails DeepCopy(
            this IPlanetDetailsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlanetDetailsSetterTranslationCommon)((IPlanetDetailsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlanetDetails item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlanetDetailsSetterCommon)((IPlanetDetailsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum PlanetDetails_FieldIndex
    {
        Unknown1 = 0,
        SpectralClass = 1,
        CatalogueId = 2,
        Life = 3,
        Magnetosphere = 4,
        MassInKg = 5,
        Type = 6,
        SettledStar = 7,
        Special = 8,
        Perihelion = 9,
        StarDistance = 10,
        Density = 11,
        Heat = 12,
        Hydro = 13,
        InnerHz = 14,
        OuterHz = 15,
        PerihelionAngle = 16,
        Unknown2 = 17,
        StartAngleInDegrees = 18,
        YearLengthInDays = 19,
        Asteroids = 20,
        Geostationary = 21,
        RandomSeed = 22,
        Rings = 23,
    }
    #endregion

    #region Registration
    internal partial class PlanetDetails_Registration : ILoquiRegistration
    {
        public static readonly PlanetDetails_Registration Instance = new PlanetDetails_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 24;

        public const ushort FieldCount = 24;

        public static readonly Type MaskType = typeof(PlanetDetails.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlanetDetails.ErrorMask);

        public static readonly Type ClassType = typeof(PlanetDetails);

        public static readonly Type GetterType = typeof(IPlanetDetailsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlanetDetails);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.PlanetDetails";

        public const string Name = "PlanetDetails";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.HNAM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.HNAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlanetDetailsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlanetDetailsSetterCommon
    {
        public static readonly PlanetDetailsSetterCommon Instance = new PlanetDetailsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlanetDetails item)
        {
            ClearPartial();
            item.Unknown1 = default(Int32);
            item.SpectralClass = string.Empty;
            item.CatalogueId = string.Empty;
            item.Life = string.Empty;
            item.Magnetosphere = string.Empty;
            item.MassInKg = string.Empty;
            item.Type = string.Empty;
            item.SettledStar = string.Empty;
            item.Special = string.Empty;
            item.Perihelion = default(Double);
            item.StarDistance = default(Double);
            item.Density = default(Single);
            item.Heat = default(Single);
            item.Hydro = default(Single);
            item.InnerHz = default(Single);
            item.OuterHz = default(Single);
            item.PerihelionAngle = default(Single);
            item.Unknown2 = default(Int32);
            item.StartAngleInDegrees = default(Single);
            item.YearLengthInDays = default(Single);
            item.Asteroids = default(UInt32);
            item.Geostationary = default(Boolean);
            item.RandomSeed = default(Int32);
            item.Rings = default(Boolean);
        }
        
        #region Mutagen
        public void RemapLinks(IPlanetDetails obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlanetDetails item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.HNAM),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlanetDetailsBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class PlanetDetailsCommon
    {
        public static readonly PlanetDetailsCommon Instance = new PlanetDetailsCommon();

        public PlanetDetails.Mask<bool> GetEqualsMask(
            IPlanetDetailsGetter item,
            IPlanetDetailsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlanetDetails.Mask<bool>(false);
            ((PlanetDetailsCommon)((IPlanetDetailsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlanetDetailsGetter item,
            IPlanetDetailsGetter rhs,
            PlanetDetails.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Unknown1 = item.Unknown1 == rhs.Unknown1;
            ret.SpectralClass = string.Equals(item.SpectralClass, rhs.SpectralClass);
            ret.CatalogueId = string.Equals(item.CatalogueId, rhs.CatalogueId);
            ret.Life = string.Equals(item.Life, rhs.Life);
            ret.Magnetosphere = string.Equals(item.Magnetosphere, rhs.Magnetosphere);
            ret.MassInKg = string.Equals(item.MassInKg, rhs.MassInKg);
            ret.Type = string.Equals(item.Type, rhs.Type);
            ret.SettledStar = string.Equals(item.SettledStar, rhs.SettledStar);
            ret.Special = string.Equals(item.Special, rhs.Special);
            ret.Perihelion = item.Perihelion.EqualsWithin(rhs.Perihelion);
            ret.StarDistance = item.StarDistance.EqualsWithin(rhs.StarDistance);
            ret.Density = item.Density.EqualsWithin(rhs.Density);
            ret.Heat = item.Heat.EqualsWithin(rhs.Heat);
            ret.Hydro = item.Hydro.EqualsWithin(rhs.Hydro);
            ret.InnerHz = item.InnerHz.EqualsWithin(rhs.InnerHz);
            ret.OuterHz = item.OuterHz.EqualsWithin(rhs.OuterHz);
            ret.PerihelionAngle = item.PerihelionAngle.EqualsWithin(rhs.PerihelionAngle);
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.StartAngleInDegrees = item.StartAngleInDegrees.EqualsWithin(rhs.StartAngleInDegrees);
            ret.YearLengthInDays = item.YearLengthInDays.EqualsWithin(rhs.YearLengthInDays);
            ret.Asteroids = item.Asteroids == rhs.Asteroids;
            ret.Geostationary = item.Geostationary == rhs.Geostationary;
            ret.RandomSeed = item.RandomSeed == rhs.RandomSeed;
            ret.Rings = item.Rings == rhs.Rings;
        }
        
        public string Print(
            IPlanetDetailsGetter item,
            string? name = null,
            PlanetDetails.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlanetDetailsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlanetDetails.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlanetDetails =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlanetDetails) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlanetDetailsGetter item,
            StructuredStringBuilder sb,
            PlanetDetails.Mask<bool>? printMask = null)
        {
            if (printMask?.Unknown1 ?? true)
            {
                sb.AppendItem(item.Unknown1, "Unknown1");
            }
            if (printMask?.SpectralClass ?? true)
            {
                sb.AppendItem(item.SpectralClass, "SpectralClass");
            }
            if (printMask?.CatalogueId ?? true)
            {
                sb.AppendItem(item.CatalogueId, "CatalogueId");
            }
            if (printMask?.Life ?? true)
            {
                sb.AppendItem(item.Life, "Life");
            }
            if (printMask?.Magnetosphere ?? true)
            {
                sb.AppendItem(item.Magnetosphere, "Magnetosphere");
            }
            if (printMask?.MassInKg ?? true)
            {
                sb.AppendItem(item.MassInKg, "MassInKg");
            }
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if (printMask?.SettledStar ?? true)
            {
                sb.AppendItem(item.SettledStar, "SettledStar");
            }
            if (printMask?.Special ?? true)
            {
                sb.AppendItem(item.Special, "Special");
            }
            if (printMask?.Perihelion ?? true)
            {
                sb.AppendItem(item.Perihelion, "Perihelion");
            }
            if (printMask?.StarDistance ?? true)
            {
                sb.AppendItem(item.StarDistance, "StarDistance");
            }
            if (printMask?.Density ?? true)
            {
                sb.AppendItem(item.Density, "Density");
            }
            if (printMask?.Heat ?? true)
            {
                sb.AppendItem(item.Heat, "Heat");
            }
            if (printMask?.Hydro ?? true)
            {
                sb.AppendItem(item.Hydro, "Hydro");
            }
            if (printMask?.InnerHz ?? true)
            {
                sb.AppendItem(item.InnerHz, "InnerHz");
            }
            if (printMask?.OuterHz ?? true)
            {
                sb.AppendItem(item.OuterHz, "OuterHz");
            }
            if (printMask?.PerihelionAngle ?? true)
            {
                sb.AppendItem(item.PerihelionAngle, "PerihelionAngle");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.StartAngleInDegrees ?? true)
            {
                sb.AppendItem(item.StartAngleInDegrees, "StartAngleInDegrees");
            }
            if (printMask?.YearLengthInDays ?? true)
            {
                sb.AppendItem(item.YearLengthInDays, "YearLengthInDays");
            }
            if (printMask?.Asteroids ?? true)
            {
                sb.AppendItem(item.Asteroids, "Asteroids");
            }
            if (printMask?.Geostationary ?? true)
            {
                sb.AppendItem(item.Geostationary, "Geostationary");
            }
            if (printMask?.RandomSeed ?? true)
            {
                sb.AppendItem(item.RandomSeed, "RandomSeed");
            }
            if (printMask?.Rings ?? true)
            {
                sb.AppendItem(item.Rings, "Rings");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlanetDetailsGetter? lhs,
            IPlanetDetailsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Unknown1) ?? true))
            {
                if (lhs.Unknown1 != rhs.Unknown1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.SpectralClass) ?? true))
            {
                if (!string.Equals(lhs.SpectralClass, rhs.SpectralClass)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.CatalogueId) ?? true))
            {
                if (!string.Equals(lhs.CatalogueId, rhs.CatalogueId)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Life) ?? true))
            {
                if (!string.Equals(lhs.Life, rhs.Life)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Magnetosphere) ?? true))
            {
                if (!string.Equals(lhs.Magnetosphere, rhs.Magnetosphere)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.MassInKg) ?? true))
            {
                if (!string.Equals(lhs.MassInKg, rhs.MassInKg)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Type) ?? true))
            {
                if (!string.Equals(lhs.Type, rhs.Type)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.SettledStar) ?? true))
            {
                if (!string.Equals(lhs.SettledStar, rhs.SettledStar)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Special) ?? true))
            {
                if (!string.Equals(lhs.Special, rhs.Special)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Perihelion) ?? true))
            {
                if (!lhs.Perihelion.EqualsWithin(rhs.Perihelion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.StarDistance) ?? true))
            {
                if (!lhs.StarDistance.EqualsWithin(rhs.StarDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Density) ?? true))
            {
                if (!lhs.Density.EqualsWithin(rhs.Density)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Heat) ?? true))
            {
                if (!lhs.Heat.EqualsWithin(rhs.Heat)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Hydro) ?? true))
            {
                if (!lhs.Hydro.EqualsWithin(rhs.Hydro)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.InnerHz) ?? true))
            {
                if (!lhs.InnerHz.EqualsWithin(rhs.InnerHz)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.OuterHz) ?? true))
            {
                if (!lhs.OuterHz.EqualsWithin(rhs.OuterHz)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.PerihelionAngle) ?? true))
            {
                if (!lhs.PerihelionAngle.EqualsWithin(rhs.PerihelionAngle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Unknown2) ?? true))
            {
                if (lhs.Unknown2 != rhs.Unknown2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.StartAngleInDegrees) ?? true))
            {
                if (!lhs.StartAngleInDegrees.EqualsWithin(rhs.StartAngleInDegrees)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.YearLengthInDays) ?? true))
            {
                if (!lhs.YearLengthInDays.EqualsWithin(rhs.YearLengthInDays)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Asteroids) ?? true))
            {
                if (lhs.Asteroids != rhs.Asteroids) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Geostationary) ?? true))
            {
                if (lhs.Geostationary != rhs.Geostationary) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.RandomSeed) ?? true))
            {
                if (lhs.RandomSeed != rhs.RandomSeed) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Rings) ?? true))
            {
                if (lhs.Rings != rhs.Rings) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IPlanetDetailsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Unknown1);
            hash.Add(item.SpectralClass);
            hash.Add(item.CatalogueId);
            hash.Add(item.Life);
            hash.Add(item.Magnetosphere);
            hash.Add(item.MassInKg);
            hash.Add(item.Type);
            hash.Add(item.SettledStar);
            hash.Add(item.Special);
            hash.Add(item.Perihelion);
            hash.Add(item.StarDistance);
            hash.Add(item.Density);
            hash.Add(item.Heat);
            hash.Add(item.Hydro);
            hash.Add(item.InnerHz);
            hash.Add(item.OuterHz);
            hash.Add(item.PerihelionAngle);
            hash.Add(item.Unknown2);
            hash.Add(item.StartAngleInDegrees);
            hash.Add(item.YearLengthInDays);
            hash.Add(item.Asteroids);
            hash.Add(item.Geostationary);
            hash.Add(item.RandomSeed);
            hash.Add(item.Rings);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return PlanetDetails.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlanetDetailsGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class PlanetDetailsSetterTranslationCommon
    {
        public static readonly PlanetDetailsSetterTranslationCommon Instance = new PlanetDetailsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlanetDetails item,
            IPlanetDetailsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Unknown1) ?? true))
            {
                item.Unknown1 = rhs.Unknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.SpectralClass) ?? true))
            {
                item.SpectralClass = rhs.SpectralClass;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.CatalogueId) ?? true))
            {
                item.CatalogueId = rhs.CatalogueId;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Life) ?? true))
            {
                item.Life = rhs.Life;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Magnetosphere) ?? true))
            {
                item.Magnetosphere = rhs.Magnetosphere;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.MassInKg) ?? true))
            {
                item.MassInKg = rhs.MassInKg;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.SettledStar) ?? true))
            {
                item.SettledStar = rhs.SettledStar;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Special) ?? true))
            {
                item.Special = rhs.Special;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Perihelion) ?? true))
            {
                item.Perihelion = rhs.Perihelion;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.StarDistance) ?? true))
            {
                item.StarDistance = rhs.StarDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Density) ?? true))
            {
                item.Density = rhs.Density;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Heat) ?? true))
            {
                item.Heat = rhs.Heat;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Hydro) ?? true))
            {
                item.Hydro = rhs.Hydro;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.InnerHz) ?? true))
            {
                item.InnerHz = rhs.InnerHz;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.OuterHz) ?? true))
            {
                item.OuterHz = rhs.OuterHz;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.PerihelionAngle) ?? true))
            {
                item.PerihelionAngle = rhs.PerihelionAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.StartAngleInDegrees) ?? true))
            {
                item.StartAngleInDegrees = rhs.StartAngleInDegrees;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.YearLengthInDays) ?? true))
            {
                item.YearLengthInDays = rhs.YearLengthInDays;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Asteroids) ?? true))
            {
                item.Asteroids = rhs.Asteroids;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Geostationary) ?? true))
            {
                item.Geostationary = rhs.Geostationary;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.RandomSeed) ?? true))
            {
                item.RandomSeed = rhs.RandomSeed;
            }
            if ((copyMask?.GetShouldTranslate((int)PlanetDetails_FieldIndex.Rings) ?? true))
            {
                item.Rings = rhs.Rings;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlanetDetails item,
            IPlanetDetailsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public PlanetDetails DeepCopy(
            IPlanetDetailsGetter item,
            PlanetDetails.TranslationMask? copyMask = null)
        {
            PlanetDetails ret = (PlanetDetails)((PlanetDetailsCommon)((IPlanetDetailsGetter)item).CommonInstance()!).GetNew();
            ((PlanetDetailsSetterTranslationCommon)((IPlanetDetailsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlanetDetails DeepCopy(
            IPlanetDetailsGetter item,
            out PlanetDetails.ErrorMask errorMask,
            PlanetDetails.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlanetDetails ret = (PlanetDetails)((PlanetDetailsCommon)((IPlanetDetailsGetter)item).CommonInstance()!).GetNew();
            ((PlanetDetailsSetterTranslationCommon)((IPlanetDetailsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlanetDetails.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlanetDetails DeepCopy(
            IPlanetDetailsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlanetDetails ret = (PlanetDetails)((PlanetDetailsCommon)((IPlanetDetailsGetter)item).CommonInstance()!).GetNew();
            ((PlanetDetailsSetterTranslationCommon)((IPlanetDetailsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetDetails
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlanetDetails_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlanetDetails_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlanetDetailsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return PlanetDetailsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlanetDetailsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlanetDetailsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IPlanetDetailsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IPlanetDetailsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class PlanetDetailsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly PlanetDetailsBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IPlanetDetailsGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Unknown1);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SpectralClass,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.CatalogueId,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Life,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Magnetosphere,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MassInKg,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Type,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SettledStar,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Special,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            writer.Write(item.Perihelion);
            writer.Write(item.StarDistance);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Density);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Heat);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Hydro);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.InnerHz);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.OuterHz);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PerihelionAngle);
            writer.Write(item.Unknown2);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StartAngleInDegrees);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.YearLengthInDays);
            writer.Write(item.Asteroids);
            writer.Write(item.Geostationary, length: 4);
            writer.Write(item.RandomSeed);
            writer.Write(item.Rings, length: 4);
        }

        public void Write(
            MutagenWriter writer,
            IPlanetDetailsGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.HNAM),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlanetDetailsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlanetDetailsBinaryCreateTranslation
    {
        public static readonly PlanetDetailsBinaryCreateTranslation Instance = new PlanetDetailsBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IPlanetDetails item,
            MutagenFrame frame)
        {
            item.Unknown1 = frame.ReadInt32();
            item.SpectralClass = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.CatalogueId = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.Life = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.Magnetosphere = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.MassInKg = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.Type = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.SettledStar = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.Special = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.Perihelion = frame.ReadDouble();
            item.StarDistance = frame.ReadDouble();
            item.Density = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Heat = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Hydro = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.InnerHz = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.OuterHz = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.PerihelionAngle = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown2 = frame.ReadInt32();
            item.StartAngleInDegrees = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.YearLengthInDays = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Asteroids = frame.ReadUInt32();
            item.Geostationary = BooleanBinaryTranslation<MutagenFrame>.Instance.Parse(
                reader: frame,
                byteLength: 4);
            item.RandomSeed = frame.ReadInt32();
            item.Rings = BooleanBinaryTranslation<MutagenFrame>.Instance.Parse(
                reader: frame,
                byteLength: 4);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class PlanetDetailsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IPlanetDetailsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetDetailsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class PlanetDetailsBinaryOverlay :
        PluginBinaryOverlay,
        IPlanetDetailsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlanetDetails_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => PlanetDetails_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => PlanetDetailsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => PlanetDetailsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IPlanetDetailsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IPlanetDetailsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IPlanetDetailsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => PlanetDetailsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlanetDetailsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Int32 Unknown1 => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x0, 0x4));
        #region SpectralClass
        public String SpectralClass => BinaryStringUtility.ParsePrependedString(_structData.Slice(0x4), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int SpectralClassEndingPos;
        #endregion
        #region CatalogueId
        public String CatalogueId => BinaryStringUtility.ParsePrependedString(_structData.Slice(SpectralClassEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int CatalogueIdEndingPos;
        #endregion
        #region Life
        public String Life => BinaryStringUtility.ParsePrependedString(_structData.Slice(CatalogueIdEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int LifeEndingPos;
        #endregion
        #region Magnetosphere
        public String Magnetosphere => BinaryStringUtility.ParsePrependedString(_structData.Slice(LifeEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int MagnetosphereEndingPos;
        #endregion
        #region MassInKg
        public String MassInKg => BinaryStringUtility.ParsePrependedString(_structData.Slice(MagnetosphereEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int MassInKgEndingPos;
        #endregion
        #region Type
        public String Type => BinaryStringUtility.ParsePrependedString(_structData.Slice(MassInKgEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int TypeEndingPos;
        #endregion
        #region SettledStar
        public String SettledStar => BinaryStringUtility.ParsePrependedString(_structData.Slice(TypeEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int SettledStarEndingPos;
        #endregion
        #region Special
        public String Special => BinaryStringUtility.ParsePrependedString(_structData.Slice(SettledStarEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int SpecialEndingPos;
        #endregion
        public Double Perihelion => BinaryPrimitives.ReadDoubleLittleEndian(_structData.Slice(SpecialEndingPos, 0x8));
        public Double StarDistance => BinaryPrimitives.ReadDoubleLittleEndian(_structData.Slice(SpecialEndingPos + 0x8, 0x8));
        public Single Density => _structData.Slice(SpecialEndingPos + 0x10, 0x4).Float();
        public Single Heat => _structData.Slice(SpecialEndingPos + 0x14, 0x4).Float();
        public Single Hydro => _structData.Slice(SpecialEndingPos + 0x18, 0x4).Float();
        public Single InnerHz => _structData.Slice(SpecialEndingPos + 0x1C, 0x4).Float();
        public Single OuterHz => _structData.Slice(SpecialEndingPos + 0x20, 0x4).Float();
        public Single PerihelionAngle => _structData.Slice(SpecialEndingPos + 0x24, 0x4).Float();
        public Int32 Unknown2 => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(SpecialEndingPos + 0x28, 0x4));
        public Single StartAngleInDegrees => _structData.Slice(SpecialEndingPos + 0x2C, 0x4).Float();
        public Single YearLengthInDays => _structData.Slice(SpecialEndingPos + 0x30, 0x4).Float();
        public UInt32 Asteroids => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(SpecialEndingPos + 0x34, 0x4));
        public Boolean Geostationary => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(SpecialEndingPos + 0x38, 0x4)) >= 1;
        public Int32 RandomSeed => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(SpecialEndingPos + 0x3C, 0x4));
        public Boolean Rings => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(SpecialEndingPos + 0x40, 0x4)) >= 1;
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlanetDetailsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void PlanetDetailsParseEndingPositions(
            PlanetDetailsBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.SpectralClassEndingPos = 0x4 + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(0x4)) + 4;
            ret.CatalogueIdEndingPos = ret.SpectralClassEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.SpectralClassEndingPos)) + 4;
            ret.LifeEndingPos = ret.CatalogueIdEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.CatalogueIdEndingPos)) + 4;
            ret.MagnetosphereEndingPos = ret.LifeEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.LifeEndingPos)) + 4;
            ret.MassInKgEndingPos = ret.MagnetosphereEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.MagnetosphereEndingPos)) + 4;
            ret.TypeEndingPos = ret.MassInKgEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.MassInKgEndingPos)) + 4;
            ret.SettledStarEndingPos = ret.TypeEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.TypeEndingPos)) + 4;
            ret.SpecialEndingPos = ret.SettledStarEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.SettledStarEndingPos)) + 4;
        }

        public static IPlanetDetailsGetter PlanetDetailsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlanetDetailsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            PlanetDetailsParseEndingPositions(ret, package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IPlanetDetailsGetter PlanetDetailsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlanetDetailsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlanetDetailsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IPlanetDetailsGetter rhs) return false;
            return ((PlanetDetailsCommon)((IPlanetDetailsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlanetDetailsGetter? obj)
        {
            return ((PlanetDetailsCommon)((IPlanetDetailsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlanetDetailsCommon)((IPlanetDetailsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

