/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class CameraSceneShot :
        ICameraSceneShot,
        IEquatable<ICameraSceneShotGetter>,
        ILoquiObjectSetter<CameraSceneShot>
    {
        #region Ctor
        public CameraSceneShot()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CameraShot
        private readonly IFormLinkNullable<ICameraShotGetter> _CameraShot = new FormLinkNullable<ICameraShotGetter>();
        public IFormLinkNullable<ICameraShotGetter> CameraShot
        {
            get => _CameraShot;
            set => _CameraShot.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICameraShotGetter> ICameraSceneShotGetter.CameraShot => this.CameraShot;
        #endregion
        #region ALLA
        public Int32 ALLA { get; set; } = default(Int32);
        #endregion
        #region REPL
        private readonly IFormLink<IPlacedGetter> _REPL = new FormLink<IPlacedGetter>();
        public IFormLink<IPlacedGetter> REPL
        {
            get => _REPL;
            set => _REPL.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IPlacedGetter> ICameraSceneShotGetter.REPL => this.REPL;
        #endregion
        #region HNAM
        public Int32 HNAM { get; set; } = default(Int32);
        #endregion
        #region VCLR
        public Int32 VCLR { get; set; } = default(Int32);
        #endregion
        #region LVCR
        public Int32 LVCR { get; set; } = default(Int32);
        #endregion
        #region BTXT
        public Boolean BTXT { get; set; } = default(Boolean);
        #endregion
        #region ATXT
        public Boolean ATXT { get; set; } = default(Boolean);
        #endregion
        #region VTXT
        public Boolean VTXT { get; set; } = default(Boolean);
        #endregion
        #region AIDT
        public Boolean AIDT { get; set; } = default(Boolean);
        #endregion
        #region MPCD
        public Boolean MPCD { get; set; } = default(Boolean);
        #endregion
        #region VNAM
        public Boolean VNAM { get; set; } = default(Boolean);
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> ICameraSceneShotGetter.Conditions => _Conditions;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CameraSceneShotMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICameraSceneShotGetter rhs) return false;
            return ((CameraSceneShotCommon)((ICameraSceneShotGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICameraSceneShotGetter? obj)
        {
            return ((CameraSceneShotCommon)((ICameraSceneShotGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CameraSceneShotCommon)((ICameraSceneShotGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.CameraShot = initialValue;
                this.ALLA = initialValue;
                this.REPL = initialValue;
                this.HNAM = initialValue;
                this.VCLR = initialValue;
                this.LVCR = initialValue;
                this.BTXT = initialValue;
                this.ATXT = initialValue;
                this.VTXT = initialValue;
                this.AIDT = initialValue;
                this.MPCD = initialValue;
                this.VNAM = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            public Mask(
                TItem CameraShot,
                TItem ALLA,
                TItem REPL,
                TItem HNAM,
                TItem VCLR,
                TItem LVCR,
                TItem BTXT,
                TItem ATXT,
                TItem VTXT,
                TItem AIDT,
                TItem MPCD,
                TItem VNAM,
                TItem Conditions)
            {
                this.CameraShot = CameraShot;
                this.ALLA = ALLA;
                this.REPL = REPL;
                this.HNAM = HNAM;
                this.VCLR = VCLR;
                this.LVCR = LVCR;
                this.BTXT = BTXT;
                this.ATXT = ATXT;
                this.VTXT = VTXT;
                this.AIDT = AIDT;
                this.MPCD = MPCD;
                this.VNAM = VNAM;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem CameraShot;
            public TItem ALLA;
            public TItem REPL;
            public TItem HNAM;
            public TItem VCLR;
            public TItem LVCR;
            public TItem BTXT;
            public TItem ATXT;
            public TItem VTXT;
            public TItem AIDT;
            public TItem MPCD;
            public TItem VNAM;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.CameraShot, rhs.CameraShot)) return false;
                if (!object.Equals(this.ALLA, rhs.ALLA)) return false;
                if (!object.Equals(this.REPL, rhs.REPL)) return false;
                if (!object.Equals(this.HNAM, rhs.HNAM)) return false;
                if (!object.Equals(this.VCLR, rhs.VCLR)) return false;
                if (!object.Equals(this.LVCR, rhs.LVCR)) return false;
                if (!object.Equals(this.BTXT, rhs.BTXT)) return false;
                if (!object.Equals(this.ATXT, rhs.ATXT)) return false;
                if (!object.Equals(this.VTXT, rhs.VTXT)) return false;
                if (!object.Equals(this.AIDT, rhs.AIDT)) return false;
                if (!object.Equals(this.MPCD, rhs.MPCD)) return false;
                if (!object.Equals(this.VNAM, rhs.VNAM)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.CameraShot);
                hash.Add(this.ALLA);
                hash.Add(this.REPL);
                hash.Add(this.HNAM);
                hash.Add(this.VCLR);
                hash.Add(this.LVCR);
                hash.Add(this.BTXT);
                hash.Add(this.ATXT);
                hash.Add(this.VTXT);
                hash.Add(this.AIDT);
                hash.Add(this.MPCD);
                hash.Add(this.VNAM);
                hash.Add(this.Conditions);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.CameraShot)) return false;
                if (!eval(this.ALLA)) return false;
                if (!eval(this.REPL)) return false;
                if (!eval(this.HNAM)) return false;
                if (!eval(this.VCLR)) return false;
                if (!eval(this.LVCR)) return false;
                if (!eval(this.BTXT)) return false;
                if (!eval(this.ATXT)) return false;
                if (!eval(this.VTXT)) return false;
                if (!eval(this.AIDT)) return false;
                if (!eval(this.MPCD)) return false;
                if (!eval(this.VNAM)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.CameraShot)) return true;
                if (eval(this.ALLA)) return true;
                if (eval(this.REPL)) return true;
                if (eval(this.HNAM)) return true;
                if (eval(this.VCLR)) return true;
                if (eval(this.LVCR)) return true;
                if (eval(this.BTXT)) return true;
                if (eval(this.ATXT)) return true;
                if (eval(this.VTXT)) return true;
                if (eval(this.AIDT)) return true;
                if (eval(this.MPCD)) return true;
                if (eval(this.VNAM)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CameraSceneShot.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.CameraShot = eval(this.CameraShot);
                obj.ALLA = eval(this.ALLA);
                obj.REPL = eval(this.REPL);
                obj.HNAM = eval(this.HNAM);
                obj.VCLR = eval(this.VCLR);
                obj.LVCR = eval(this.LVCR);
                obj.BTXT = eval(this.BTXT);
                obj.ATXT = eval(this.ATXT);
                obj.VTXT = eval(this.VTXT);
                obj.AIDT = eval(this.AIDT);
                obj.MPCD = eval(this.MPCD);
                obj.VNAM = eval(this.VNAM);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CameraSceneShot.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CameraSceneShot.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CameraSceneShot.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.CameraShot ?? true)
                    {
                        sb.AppendItem(CameraShot, "CameraShot");
                    }
                    if (printMask?.ALLA ?? true)
                    {
                        sb.AppendItem(ALLA, "ALLA");
                    }
                    if (printMask?.REPL ?? true)
                    {
                        sb.AppendItem(REPL, "REPL");
                    }
                    if (printMask?.HNAM ?? true)
                    {
                        sb.AppendItem(HNAM, "HNAM");
                    }
                    if (printMask?.VCLR ?? true)
                    {
                        sb.AppendItem(VCLR, "VCLR");
                    }
                    if (printMask?.LVCR ?? true)
                    {
                        sb.AppendItem(LVCR, "LVCR");
                    }
                    if (printMask?.BTXT ?? true)
                    {
                        sb.AppendItem(BTXT, "BTXT");
                    }
                    if (printMask?.ATXT ?? true)
                    {
                        sb.AppendItem(ATXT, "ATXT");
                    }
                    if (printMask?.VTXT ?? true)
                    {
                        sb.AppendItem(VTXT, "VTXT");
                    }
                    if (printMask?.AIDT ?? true)
                    {
                        sb.AppendItem(AIDT, "AIDT");
                    }
                    if (printMask?.MPCD ?? true)
                    {
                        sb.AppendItem(MPCD, "MPCD");
                    }
                    if (printMask?.VNAM ?? true)
                    {
                        sb.AppendItem(VNAM, "VNAM");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? CameraShot;
            public Exception? ALLA;
            public Exception? REPL;
            public Exception? HNAM;
            public Exception? VCLR;
            public Exception? LVCR;
            public Exception? BTXT;
            public Exception? ATXT;
            public Exception? VTXT;
            public Exception? AIDT;
            public Exception? MPCD;
            public Exception? VNAM;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CameraSceneShot_FieldIndex enu = (CameraSceneShot_FieldIndex)index;
                switch (enu)
                {
                    case CameraSceneShot_FieldIndex.CameraShot:
                        return CameraShot;
                    case CameraSceneShot_FieldIndex.ALLA:
                        return ALLA;
                    case CameraSceneShot_FieldIndex.REPL:
                        return REPL;
                    case CameraSceneShot_FieldIndex.HNAM:
                        return HNAM;
                    case CameraSceneShot_FieldIndex.VCLR:
                        return VCLR;
                    case CameraSceneShot_FieldIndex.LVCR:
                        return LVCR;
                    case CameraSceneShot_FieldIndex.BTXT:
                        return BTXT;
                    case CameraSceneShot_FieldIndex.ATXT:
                        return ATXT;
                    case CameraSceneShot_FieldIndex.VTXT:
                        return VTXT;
                    case CameraSceneShot_FieldIndex.AIDT:
                        return AIDT;
                    case CameraSceneShot_FieldIndex.MPCD:
                        return MPCD;
                    case CameraSceneShot_FieldIndex.VNAM:
                        return VNAM;
                    case CameraSceneShot_FieldIndex.Conditions:
                        return Conditions;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CameraSceneShot_FieldIndex enu = (CameraSceneShot_FieldIndex)index;
                switch (enu)
                {
                    case CameraSceneShot_FieldIndex.CameraShot:
                        this.CameraShot = ex;
                        break;
                    case CameraSceneShot_FieldIndex.ALLA:
                        this.ALLA = ex;
                        break;
                    case CameraSceneShot_FieldIndex.REPL:
                        this.REPL = ex;
                        break;
                    case CameraSceneShot_FieldIndex.HNAM:
                        this.HNAM = ex;
                        break;
                    case CameraSceneShot_FieldIndex.VCLR:
                        this.VCLR = ex;
                        break;
                    case CameraSceneShot_FieldIndex.LVCR:
                        this.LVCR = ex;
                        break;
                    case CameraSceneShot_FieldIndex.BTXT:
                        this.BTXT = ex;
                        break;
                    case CameraSceneShot_FieldIndex.ATXT:
                        this.ATXT = ex;
                        break;
                    case CameraSceneShot_FieldIndex.VTXT:
                        this.VTXT = ex;
                        break;
                    case CameraSceneShot_FieldIndex.AIDT:
                        this.AIDT = ex;
                        break;
                    case CameraSceneShot_FieldIndex.MPCD:
                        this.MPCD = ex;
                        break;
                    case CameraSceneShot_FieldIndex.VNAM:
                        this.VNAM = ex;
                        break;
                    case CameraSceneShot_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CameraSceneShot_FieldIndex enu = (CameraSceneShot_FieldIndex)index;
                switch (enu)
                {
                    case CameraSceneShot_FieldIndex.CameraShot:
                        this.CameraShot = (Exception?)obj;
                        break;
                    case CameraSceneShot_FieldIndex.ALLA:
                        this.ALLA = (Exception?)obj;
                        break;
                    case CameraSceneShot_FieldIndex.REPL:
                        this.REPL = (Exception?)obj;
                        break;
                    case CameraSceneShot_FieldIndex.HNAM:
                        this.HNAM = (Exception?)obj;
                        break;
                    case CameraSceneShot_FieldIndex.VCLR:
                        this.VCLR = (Exception?)obj;
                        break;
                    case CameraSceneShot_FieldIndex.LVCR:
                        this.LVCR = (Exception?)obj;
                        break;
                    case CameraSceneShot_FieldIndex.BTXT:
                        this.BTXT = (Exception?)obj;
                        break;
                    case CameraSceneShot_FieldIndex.ATXT:
                        this.ATXT = (Exception?)obj;
                        break;
                    case CameraSceneShot_FieldIndex.VTXT:
                        this.VTXT = (Exception?)obj;
                        break;
                    case CameraSceneShot_FieldIndex.AIDT:
                        this.AIDT = (Exception?)obj;
                        break;
                    case CameraSceneShot_FieldIndex.MPCD:
                        this.MPCD = (Exception?)obj;
                        break;
                    case CameraSceneShot_FieldIndex.VNAM:
                        this.VNAM = (Exception?)obj;
                        break;
                    case CameraSceneShot_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (CameraShot != null) return true;
                if (ALLA != null) return true;
                if (REPL != null) return true;
                if (HNAM != null) return true;
                if (VCLR != null) return true;
                if (LVCR != null) return true;
                if (BTXT != null) return true;
                if (ATXT != null) return true;
                if (VTXT != null) return true;
                if (AIDT != null) return true;
                if (MPCD != null) return true;
                if (VNAM != null) return true;
                if (Conditions != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(CameraShot, "CameraShot");
                }
                {
                    sb.AppendItem(ALLA, "ALLA");
                }
                {
                    sb.AppendItem(REPL, "REPL");
                }
                {
                    sb.AppendItem(HNAM, "HNAM");
                }
                {
                    sb.AppendItem(VCLR, "VCLR");
                }
                {
                    sb.AppendItem(LVCR, "LVCR");
                }
                {
                    sb.AppendItem(BTXT, "BTXT");
                }
                {
                    sb.AppendItem(ATXT, "ATXT");
                }
                {
                    sb.AppendItem(VTXT, "VTXT");
                }
                {
                    sb.AppendItem(AIDT, "AIDT");
                }
                {
                    sb.AppendItem(MPCD, "MPCD");
                }
                {
                    sb.AppendItem(VNAM, "VNAM");
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.CameraShot = this.CameraShot.Combine(rhs.CameraShot);
                ret.ALLA = this.ALLA.Combine(rhs.ALLA);
                ret.REPL = this.REPL.Combine(rhs.REPL);
                ret.HNAM = this.HNAM.Combine(rhs.HNAM);
                ret.VCLR = this.VCLR.Combine(rhs.VCLR);
                ret.LVCR = this.LVCR.Combine(rhs.LVCR);
                ret.BTXT = this.BTXT.Combine(rhs.BTXT);
                ret.ATXT = this.ATXT.Combine(rhs.ATXT);
                ret.VTXT = this.VTXT.Combine(rhs.VTXT);
                ret.AIDT = this.AIDT.Combine(rhs.AIDT);
                ret.MPCD = this.MPCD.Combine(rhs.MPCD);
                ret.VNAM = this.VNAM.Combine(rhs.VNAM);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool CameraShot;
            public bool ALLA;
            public bool REPL;
            public bool HNAM;
            public bool VCLR;
            public bool LVCR;
            public bool BTXT;
            public bool ATXT;
            public bool VTXT;
            public bool AIDT;
            public bool MPCD;
            public bool VNAM;
            public Condition.TranslationMask? Conditions;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.CameraShot = defaultOn;
                this.ALLA = defaultOn;
                this.REPL = defaultOn;
                this.HNAM = defaultOn;
                this.VCLR = defaultOn;
                this.LVCR = defaultOn;
                this.BTXT = defaultOn;
                this.ATXT = defaultOn;
                this.VTXT = defaultOn;
                this.AIDT = defaultOn;
                this.MPCD = defaultOn;
                this.VNAM = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((CameraShot, null));
                ret.Add((ALLA, null));
                ret.Add((REPL, null));
                ret.Add((HNAM, null));
                ret.Add((VCLR, null));
                ret.Add((LVCR, null));
                ret.Add((BTXT, null));
                ret.Add((ATXT, null));
                ret.Add((VTXT, null));
                ret.Add((AIDT, null));
                ret.Add((MPCD, null));
                ret.Add((VNAM, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CameraSceneShotCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CameraSceneShotSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CameraSceneShotBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CameraSceneShotBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CameraSceneShot CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CameraSceneShot();
            ((CameraSceneShotSetterCommon)((ICameraSceneShotGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CameraSceneShot item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CameraSceneShotSetterCommon)((ICameraSceneShotGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CameraSceneShot GetNew()
        {
            return new CameraSceneShot();
        }

    }
    #endregion

    #region Interface
    public partial interface ICameraSceneShot :
        ICameraSceneShotGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<ICameraSceneShot>
    {
        new IFormLinkNullable<ICameraShotGetter> CameraShot { get; set; }
        new Int32 ALLA { get; set; }
        new IFormLink<IPlacedGetter> REPL { get; set; }
        new Int32 HNAM { get; set; }
        new Int32 VCLR { get; set; }
        new Int32 LVCR { get; set; }
        new Boolean BTXT { get; set; }
        new Boolean ATXT { get; set; }
        new Boolean VTXT { get; set; }
        new Boolean AIDT { get; set; }
        new Boolean MPCD { get; set; }
        new Boolean VNAM { get; set; }
        new ExtendedList<Condition> Conditions { get; }
    }

    public partial interface ICameraSceneShotGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ICameraSceneShotGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CameraSceneShot_Registration.Instance;
        IFormLinkNullableGetter<ICameraShotGetter> CameraShot { get; }
        Int32 ALLA { get; }
        IFormLinkGetter<IPlacedGetter> REPL { get; }
        Int32 HNAM { get; }
        Int32 VCLR { get; }
        Int32 LVCR { get; }
        Boolean BTXT { get; }
        Boolean ATXT { get; }
        Boolean VTXT { get; }
        Boolean AIDT { get; }
        Boolean MPCD { get; }
        Boolean VNAM { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CameraSceneShotMixIn
    {
        public static void Clear(this ICameraSceneShot item)
        {
            ((CameraSceneShotSetterCommon)((ICameraSceneShotGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CameraSceneShot.Mask<bool> GetEqualsMask(
            this ICameraSceneShotGetter item,
            ICameraSceneShotGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CameraSceneShotCommon)((ICameraSceneShotGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICameraSceneShotGetter item,
            string? name = null,
            CameraSceneShot.Mask<bool>? printMask = null)
        {
            return ((CameraSceneShotCommon)((ICameraSceneShotGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICameraSceneShotGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CameraSceneShot.Mask<bool>? printMask = null)
        {
            ((CameraSceneShotCommon)((ICameraSceneShotGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICameraSceneShotGetter item,
            ICameraSceneShotGetter rhs,
            CameraSceneShot.TranslationMask? equalsMask = null)
        {
            return ((CameraSceneShotCommon)((ICameraSceneShotGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICameraSceneShot lhs,
            ICameraSceneShotGetter rhs)
        {
            ((CameraSceneShotSetterTranslationCommon)((ICameraSceneShotGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICameraSceneShot lhs,
            ICameraSceneShotGetter rhs,
            CameraSceneShot.TranslationMask? copyMask = null)
        {
            ((CameraSceneShotSetterTranslationCommon)((ICameraSceneShotGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICameraSceneShot lhs,
            ICameraSceneShotGetter rhs,
            out CameraSceneShot.ErrorMask errorMask,
            CameraSceneShot.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CameraSceneShotSetterTranslationCommon)((ICameraSceneShotGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CameraSceneShot.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICameraSceneShot lhs,
            ICameraSceneShotGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CameraSceneShotSetterTranslationCommon)((ICameraSceneShotGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CameraSceneShot DeepCopy(
            this ICameraSceneShotGetter item,
            CameraSceneShot.TranslationMask? copyMask = null)
        {
            return ((CameraSceneShotSetterTranslationCommon)((ICameraSceneShotGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CameraSceneShot DeepCopy(
            this ICameraSceneShotGetter item,
            out CameraSceneShot.ErrorMask errorMask,
            CameraSceneShot.TranslationMask? copyMask = null)
        {
            return ((CameraSceneShotSetterTranslationCommon)((ICameraSceneShotGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CameraSceneShot DeepCopy(
            this ICameraSceneShotGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CameraSceneShotSetterTranslationCommon)((ICameraSceneShotGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICameraSceneShot item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CameraSceneShotSetterCommon)((ICameraSceneShotGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum CameraSceneShot_FieldIndex
    {
        CameraShot = 0,
        ALLA = 1,
        REPL = 2,
        HNAM = 3,
        VCLR = 4,
        LVCR = 5,
        BTXT = 6,
        ATXT = 7,
        VTXT = 8,
        AIDT = 9,
        MPCD = 10,
        VNAM = 11,
        Conditions = 12,
    }
    #endregion

    #region Registration
    internal partial class CameraSceneShot_Registration : ILoquiRegistration
    {
        public static readonly CameraSceneShot_Registration Instance = new CameraSceneShot_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(CameraSceneShot.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CameraSceneShot.ErrorMask);

        public static readonly Type ClassType = typeof(CameraSceneShot);

        public static readonly Type GetterType = typeof(ICameraSceneShotGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICameraSceneShot);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.CameraSceneShot";

        public const string Name = "CameraSceneShot";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var endTriggers = RecordCollection.Factory(RecordTypes.XNAM);
            var triggers = RecordCollection.Factory(
                RecordTypes.CNAM,
                RecordTypes.ALLA);
            var all = RecordCollection.Factory(
                RecordTypes.CNAM,
                RecordTypes.ALLA,
                RecordTypes.XNAM,
                RecordTypes.REPL,
                RecordTypes.HNAM,
                RecordTypes.VCLR,
                RecordTypes.LVCR,
                RecordTypes.BTXT,
                RecordTypes.ATXT,
                RecordTypes.VTXT,
                RecordTypes.AIDT,
                RecordTypes.MPCD,
                RecordTypes.VNAM,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers,
                endRecordTypes: endTriggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CameraSceneShotBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CameraSceneShotSetterCommon
    {
        public static readonly CameraSceneShotSetterCommon Instance = new CameraSceneShotSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICameraSceneShot item)
        {
            ClearPartial();
            item.CameraShot.Clear();
            item.ALLA = default(Int32);
            item.REPL.Clear();
            item.HNAM = default(Int32);
            item.VCLR = default(Int32);
            item.LVCR = default(Int32);
            item.BTXT = default(Boolean);
            item.ATXT = default(Boolean);
            item.VTXT = default(Boolean);
            item.AIDT = default(Boolean);
            item.MPCD = default(Boolean);
            item.VNAM = default(Boolean);
            item.Conditions.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ICameraSceneShot obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.CameraShot.Relink(mapping);
            obj.REPL.Relink(mapping);
            obj.Conditions.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICameraSceneShot item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: CameraSceneShotBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class CameraSceneShotCommon
    {
        public static readonly CameraSceneShotCommon Instance = new CameraSceneShotCommon();

        public CameraSceneShot.Mask<bool> GetEqualsMask(
            ICameraSceneShotGetter item,
            ICameraSceneShotGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CameraSceneShot.Mask<bool>(false);
            ((CameraSceneShotCommon)((ICameraSceneShotGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICameraSceneShotGetter item,
            ICameraSceneShotGetter rhs,
            CameraSceneShot.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.CameraShot = item.CameraShot.Equals(rhs.CameraShot);
            ret.ALLA = item.ALLA == rhs.ALLA;
            ret.REPL = item.REPL.Equals(rhs.REPL);
            ret.HNAM = item.HNAM == rhs.HNAM;
            ret.VCLR = item.VCLR == rhs.VCLR;
            ret.LVCR = item.LVCR == rhs.LVCR;
            ret.BTXT = item.BTXT == rhs.BTXT;
            ret.ATXT = item.ATXT == rhs.ATXT;
            ret.VTXT = item.VTXT == rhs.VTXT;
            ret.AIDT = item.AIDT == rhs.AIDT;
            ret.MPCD = item.MPCD == rhs.MPCD;
            ret.VNAM = item.VNAM == rhs.VNAM;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            ICameraSceneShotGetter item,
            string? name = null,
            CameraSceneShot.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICameraSceneShotGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CameraSceneShot.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CameraSceneShot =>");
            }
            else
            {
                sb.AppendLine($"{name} (CameraSceneShot) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICameraSceneShotGetter item,
            StructuredStringBuilder sb,
            CameraSceneShot.Mask<bool>? printMask = null)
        {
            if (printMask?.CameraShot ?? true)
            {
                sb.AppendItem(item.CameraShot.FormKeyNullable, "CameraShot");
            }
            if (printMask?.ALLA ?? true)
            {
                sb.AppendItem(item.ALLA, "ALLA");
            }
            if (printMask?.REPL ?? true)
            {
                sb.AppendItem(item.REPL.FormKey, "REPL");
            }
            if (printMask?.HNAM ?? true)
            {
                sb.AppendItem(item.HNAM, "HNAM");
            }
            if (printMask?.VCLR ?? true)
            {
                sb.AppendItem(item.VCLR, "VCLR");
            }
            if (printMask?.LVCR ?? true)
            {
                sb.AppendItem(item.LVCR, "LVCR");
            }
            if (printMask?.BTXT ?? true)
            {
                sb.AppendItem(item.BTXT, "BTXT");
            }
            if (printMask?.ATXT ?? true)
            {
                sb.AppendItem(item.ATXT, "ATXT");
            }
            if (printMask?.VTXT ?? true)
            {
                sb.AppendItem(item.VTXT, "VTXT");
            }
            if (printMask?.AIDT ?? true)
            {
                sb.AppendItem(item.AIDT, "AIDT");
            }
            if (printMask?.MPCD ?? true)
            {
                sb.AppendItem(item.MPCD, "MPCD");
            }
            if (printMask?.VNAM ?? true)
            {
                sb.AppendItem(item.VNAM, "VNAM");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICameraSceneShotGetter? lhs,
            ICameraSceneShotGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.CameraShot) ?? true))
            {
                if (!lhs.CameraShot.Equals(rhs.CameraShot)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.ALLA) ?? true))
            {
                if (lhs.ALLA != rhs.ALLA) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.REPL) ?? true))
            {
                if (!lhs.REPL.Equals(rhs.REPL)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.HNAM) ?? true))
            {
                if (lhs.HNAM != rhs.HNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.VCLR) ?? true))
            {
                if (lhs.VCLR != rhs.VCLR) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.LVCR) ?? true))
            {
                if (lhs.LVCR != rhs.LVCR) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.BTXT) ?? true))
            {
                if (lhs.BTXT != rhs.BTXT) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.ATXT) ?? true))
            {
                if (lhs.ATXT != rhs.ATXT) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.VTXT) ?? true))
            {
                if (lhs.VTXT != rhs.VTXT) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.AIDT) ?? true))
            {
                if (lhs.AIDT != rhs.AIDT) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.MPCD) ?? true))
            {
                if (lhs.MPCD != rhs.MPCD) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.VNAM) ?? true))
            {
                if (lhs.VNAM != rhs.VNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)CameraSceneShot_FieldIndex.Conditions)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICameraSceneShotGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.CameraShot);
            hash.Add(item.ALLA);
            hash.Add(item.REPL);
            hash.Add(item.HNAM);
            hash.Add(item.VCLR);
            hash.Add(item.LVCR);
            hash.Add(item.BTXT);
            hash.Add(item.ATXT);
            hash.Add(item.VTXT);
            hash.Add(item.AIDT);
            hash.Add(item.MPCD);
            hash.Add(item.VNAM);
            hash.Add(item.Conditions);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CameraSceneShot.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICameraSceneShotGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.CameraShot, out var CameraShotInfo))
            {
                yield return CameraShotInfo;
            }
            yield return FormLinkInformation.Factory(obj.REPL);
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class CameraSceneShotSetterTranslationCommon
    {
        public static readonly CameraSceneShotSetterTranslationCommon Instance = new CameraSceneShotSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICameraSceneShot item,
            ICameraSceneShotGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.CameraShot) ?? true))
            {
                item.CameraShot.SetTo(rhs.CameraShot.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.ALLA) ?? true))
            {
                item.ALLA = rhs.ALLA;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.REPL) ?? true))
            {
                item.REPL.SetTo(rhs.REPL.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.HNAM) ?? true))
            {
                item.HNAM = rhs.HNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.VCLR) ?? true))
            {
                item.VCLR = rhs.VCLR;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.LVCR) ?? true))
            {
                item.LVCR = rhs.LVCR;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.BTXT) ?? true))
            {
                item.BTXT = rhs.BTXT;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.ATXT) ?? true))
            {
                item.ATXT = rhs.ATXT;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.VTXT) ?? true))
            {
                item.VTXT = rhs.VTXT;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.AIDT) ?? true))
            {
                item.AIDT = rhs.AIDT;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.MPCD) ?? true))
            {
                item.MPCD = rhs.MPCD;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.VNAM) ?? true))
            {
                item.VNAM = rhs.VNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)CameraSceneShot_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)CameraSceneShot_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICameraSceneShot item,
            ICameraSceneShotGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public CameraSceneShot DeepCopy(
            ICameraSceneShotGetter item,
            CameraSceneShot.TranslationMask? copyMask = null)
        {
            CameraSceneShot ret = (CameraSceneShot)((CameraSceneShotCommon)((ICameraSceneShotGetter)item).CommonInstance()!).GetNew();
            ((CameraSceneShotSetterTranslationCommon)((ICameraSceneShotGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CameraSceneShot DeepCopy(
            ICameraSceneShotGetter item,
            out CameraSceneShot.ErrorMask errorMask,
            CameraSceneShot.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CameraSceneShot ret = (CameraSceneShot)((CameraSceneShotCommon)((ICameraSceneShotGetter)item).CommonInstance()!).GetNew();
            ((CameraSceneShotSetterTranslationCommon)((ICameraSceneShotGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CameraSceneShot.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CameraSceneShot DeepCopy(
            ICameraSceneShotGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CameraSceneShot ret = (CameraSceneShot)((CameraSceneShotCommon)((ICameraSceneShotGetter)item).CommonInstance()!).GetNew();
            ((CameraSceneShotSetterTranslationCommon)((ICameraSceneShotGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class CameraSceneShot
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CameraSceneShot_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CameraSceneShot_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CameraSceneShotCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CameraSceneShotSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CameraSceneShotSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICameraSceneShotGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICameraSceneShotGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICameraSceneShotGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class CameraSceneShotBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly CameraSceneShotBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ICameraSceneShotGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CameraShot,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ALLA,
                header: translationParams.ConvertToCustom(RecordTypes.ALLA));
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.REPL,
                header: translationParams.ConvertToCustom(RecordTypes.REPL));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HNAM,
                header: translationParams.ConvertToCustom(RecordTypes.HNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.VCLR,
                header: translationParams.ConvertToCustom(RecordTypes.VCLR));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LVCR,
                header: translationParams.ConvertToCustom(RecordTypes.LVCR));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.BTXT,
                header: translationParams.ConvertToCustom(RecordTypes.BTXT));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.ATXT,
                header: translationParams.ConvertToCustom(RecordTypes.ATXT));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.VTXT,
                header: translationParams.ConvertToCustom(RecordTypes.VTXT));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.AIDT,
                header: translationParams.ConvertToCustom(RecordTypes.AIDT));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.MPCD,
                header: translationParams.ConvertToCustom(RecordTypes.MPCD));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.VNAM,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ICameraSceneShotGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.XNAM)) { } // End Marker
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICameraSceneShotGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CameraSceneShotBinaryCreateTranslation
    {
        public static readonly CameraSceneShotBinaryCreateTranslation Instance = new CameraSceneShotBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ICameraSceneShot item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CNAM:
                {
                    if (lastParsed.ShortCircuit((int)CameraSceneShot_FieldIndex.CameraShot, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CameraShot.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)CameraSceneShot_FieldIndex.CameraShot;
                }
                case RecordTypeInts.ALLA:
                {
                    if (lastParsed.ShortCircuit((int)CameraSceneShot_FieldIndex.ALLA, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ALLA = frame.ReadInt32();
                    return (int)CameraSceneShot_FieldIndex.ALLA;
                }
                case RecordTypeInts.REPL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.REPL.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)CameraSceneShot_FieldIndex.REPL;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HNAM = frame.ReadInt32();
                    return (int)CameraSceneShot_FieldIndex.HNAM;
                }
                case RecordTypeInts.VCLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VCLR = frame.ReadInt32();
                    return (int)CameraSceneShot_FieldIndex.VCLR;
                }
                case RecordTypeInts.LVCR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LVCR = frame.ReadInt32();
                    return (int)CameraSceneShot_FieldIndex.LVCR;
                }
                case RecordTypeInts.BTXT:
                {
                    item.BTXT = true;
                    return (int)CameraSceneShot_FieldIndex.BTXT;
                }
                case RecordTypeInts.ATXT:
                {
                    item.ATXT = true;
                    return (int)CameraSceneShot_FieldIndex.ATXT;
                }
                case RecordTypeInts.VTXT:
                {
                    item.VTXT = true;
                    return (int)CameraSceneShot_FieldIndex.VTXT;
                }
                case RecordTypeInts.AIDT:
                {
                    item.AIDT = true;
                    return (int)CameraSceneShot_FieldIndex.AIDT;
                }
                case RecordTypeInts.MPCD:
                {
                    item.MPCD = true;
                    return (int)CameraSceneShot_FieldIndex.MPCD;
                }
                case RecordTypeInts.VNAM:
                {
                    item.VNAM = true;
                    return (int)CameraSceneShot_FieldIndex.VNAM;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)CameraSceneShot_FieldIndex.Conditions;
                }
                case RecordTypeInts.XNAM: // End Marker
                {
                    frame.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class CameraSceneShotBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICameraSceneShotGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CameraSceneShotBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class CameraSceneShotBinaryOverlay :
        PluginBinaryOverlay,
        ICameraSceneShotGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CameraSceneShot_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CameraSceneShot_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CameraSceneShotCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CameraSceneShotSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICameraSceneShotGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICameraSceneShotGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICameraSceneShotGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CameraSceneShotCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CameraSceneShotBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CameraSceneShotBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region CameraShot
        private int? _CameraShotLocation;
        public IFormLinkNullableGetter<ICameraShotGetter> CameraShot => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICameraShotGetter>(_package, _recordData, _CameraShotLocation);
        #endregion
        #region ALLA
        private int? _ALLALocation;
        public Int32 ALLA => _ALLALocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ALLALocation.Value, _package.MetaData.Constants)) : default(Int32);
        #endregion
        #region REPL
        private int? _REPLLocation;
        public IFormLinkGetter<IPlacedGetter> REPL => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedGetter>(_package, _recordData, _REPLLocation);
        #endregion
        #region HNAM
        private int? _HNAMLocation;
        public Int32 HNAM => _HNAMLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HNAMLocation.Value, _package.MetaData.Constants)) : default(Int32);
        #endregion
        #region VCLR
        private int? _VCLRLocation;
        public Int32 VCLR => _VCLRLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _VCLRLocation.Value, _package.MetaData.Constants)) : default(Int32);
        #endregion
        #region LVCR
        private int? _LVCRLocation;
        public Int32 LVCR => _LVCRLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LVCRLocation.Value, _package.MetaData.Constants)) : default(Int32);
        #endregion
        #region BTXT
        private int? _BTXTLocation;
        public Boolean BTXT => _BTXTLocation.HasValue ? true : default(Boolean);
        #endregion
        #region ATXT
        private int? _ATXTLocation;
        public Boolean ATXT => _ATXTLocation.HasValue ? true : default(Boolean);
        #endregion
        #region VTXT
        private int? _VTXTLocation;
        public Boolean VTXT => _VTXTLocation.HasValue ? true : default(Boolean);
        #endregion
        #region AIDT
        private int? _AIDTLocation;
        public Boolean AIDT => _AIDTLocation.HasValue ? true : default(Boolean);
        #endregion
        #region MPCD
        private int? _MPCDLocation;
        public Boolean MPCD => _MPCDLocation.HasValue ? true : default(Boolean);
        #endregion
        #region VNAM
        private int? _VNAMLocation;
        public Boolean VNAM => _VNAMLocation.HasValue ? true : default(Boolean);
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CameraSceneShotBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICameraSceneShotGetter CameraSceneShotFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new CameraSceneShotBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ICameraSceneShotGetter CameraSceneShotFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CameraSceneShotFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CNAM:
                {
                    if (lastParsed.ShortCircuit((int)CameraSceneShot_FieldIndex.CameraShot, translationParams)) return ParseResult.Stop;
                    _CameraShotLocation = (stream.Position - offset);
                    return (int)CameraSceneShot_FieldIndex.CameraShot;
                }
                case RecordTypeInts.ALLA:
                {
                    if (lastParsed.ShortCircuit((int)CameraSceneShot_FieldIndex.ALLA, translationParams)) return ParseResult.Stop;
                    _ALLALocation = (stream.Position - offset);
                    return (int)CameraSceneShot_FieldIndex.ALLA;
                }
                case RecordTypeInts.REPL:
                {
                    _REPLLocation = (stream.Position - offset);
                    return (int)CameraSceneShot_FieldIndex.REPL;
                }
                case RecordTypeInts.HNAM:
                {
                    _HNAMLocation = (stream.Position - offset);
                    return (int)CameraSceneShot_FieldIndex.HNAM;
                }
                case RecordTypeInts.VCLR:
                {
                    _VCLRLocation = (stream.Position - offset);
                    return (int)CameraSceneShot_FieldIndex.VCLR;
                }
                case RecordTypeInts.LVCR:
                {
                    _LVCRLocation = (stream.Position - offset);
                    return (int)CameraSceneShot_FieldIndex.LVCR;
                }
                case RecordTypeInts.BTXT:
                {
                    _BTXTLocation = (stream.Position - offset);
                    return (int)CameraSceneShot_FieldIndex.BTXT;
                }
                case RecordTypeInts.ATXT:
                {
                    _ATXTLocation = (stream.Position - offset);
                    return (int)CameraSceneShot_FieldIndex.ATXT;
                }
                case RecordTypeInts.VTXT:
                {
                    _VTXTLocation = (stream.Position - offset);
                    return (int)CameraSceneShot_FieldIndex.VTXT;
                }
                case RecordTypeInts.AIDT:
                {
                    _AIDTLocation = (stream.Position - offset);
                    return (int)CameraSceneShot_FieldIndex.AIDT;
                }
                case RecordTypeInts.MPCD:
                {
                    _MPCDLocation = (stream.Position - offset);
                    return (int)CameraSceneShot_FieldIndex.MPCD;
                }
                case RecordTypeInts.VNAM:
                {
                    _VNAMLocation = (stream.Position - offset);
                    return (int)CameraSceneShot_FieldIndex.VNAM;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)CameraSceneShot_FieldIndex.Conditions;
                }
                case RecordTypeInts.XNAM: // End Marker
                {
                    stream.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CameraSceneShotMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICameraSceneShotGetter rhs) return false;
            return ((CameraSceneShotCommon)((ICameraSceneShotGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICameraSceneShotGetter? obj)
        {
            return ((CameraSceneShotCommon)((ICameraSceneShotGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CameraSceneShotCommon)((ICameraSceneShotGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

