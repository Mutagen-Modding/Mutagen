/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class AimOpticalSightMarker :
        StarfieldMajorRecord,
        IAimOpticalSightMarkerInternal,
        IEquatable<IAimOpticalSightMarkerGetter>,
        ILoquiObjectSetter<AimOpticalSightMarker>
    {
        #region Ctor
        protected AimOpticalSightMarker()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IAimOpticalSightMarkerGetter.Components => _Components;
        #endregion

        #endregion
        #region ActivateSightOnSightedMode
        public Boolean ActivateSightOnSightedMode { get; set; } = default(Boolean);
        #endregion
        #region OpticalSightAttachNode
        public String OpticalSightAttachNode { get; set; } = string.Empty;
        #endregion
        #region DelayBeforeSightActivation
        public Single DelayBeforeSightActivation { get; set; } = default(Single);
        #endregion
        #region DelayBeforeSightDeactivation
        public Single DelayBeforeSightDeactivation { get; set; } = default(Single);
        #endregion
        #region OpticalSightLight
        private readonly IFormLink<ILightGetter> _OpticalSightLight = new FormLink<ILightGetter>();
        public IFormLink<ILightGetter> OpticalSightLight
        {
            get => _OpticalSightLight;
            set => _OpticalSightLight.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILightGetter> IAimOpticalSightMarkerGetter.OpticalSightLight => this.OpticalSightLight;
        #endregion
        #region FocalPointDistance
        public Single FocalPointDistance { get; set; } = default(Single);
        #endregion
        #region FocalPointDistanceDuringAiming
        public Single FocalPointDistanceDuringAiming { get; set; } = default(Single);
        #endregion
        #region DelayBetweenShots
        public Single DelayBetweenShots { get; set; } = default(Single);
        #endregion
        #region LaserArtObject
        private readonly IFormLink<IArtObjectGetter> _LaserArtObject = new FormLink<IArtObjectGetter>();
        public IFormLink<IArtObjectGetter> LaserArtObject
        {
            get => _LaserArtObject;
            set => _LaserArtObject.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IArtObjectGetter> IAimOpticalSightMarkerGetter.LaserArtObject => this.LaserArtObject;
        #endregion
        #region LaserDotArtObject
        private readonly IFormLink<IArtObjectGetter> _LaserDotArtObject = new FormLink<IArtObjectGetter>();
        public IFormLink<IArtObjectGetter> LaserDotArtObject
        {
            get => _LaserDotArtObject;
            set => _LaserDotArtObject.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IArtObjectGetter> IAimOpticalSightMarkerGetter.LaserDotArtObject => this.LaserDotArtObject;
        #endregion
        #region MaxLaserPointerDistance
        public Single MaxLaserPointerDistance { get; set; } = default(Single);
        #endregion
        #region SightControlsFiringDirection
        public Boolean SightControlsFiringDirection { get; set; } = default(Boolean);
        #endregion
        #region ActivateSightOnNonSightedMode
        public Boolean ActivateSightOnNonSightedMode { get; set; } = default(Boolean);
        #endregion
        #region ActivateSightOnScopedMode
        public Boolean ActivateSightOnScopedMode { get; set; } = default(Boolean);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AimOpticalSightMarkerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.ActivateSightOnSightedMode = initialValue;
                this.OpticalSightAttachNode = initialValue;
                this.DelayBeforeSightActivation = initialValue;
                this.DelayBeforeSightDeactivation = initialValue;
                this.OpticalSightLight = initialValue;
                this.FocalPointDistance = initialValue;
                this.FocalPointDistanceDuringAiming = initialValue;
                this.DelayBetweenShots = initialValue;
                this.LaserArtObject = initialValue;
                this.LaserDotArtObject = initialValue;
                this.MaxLaserPointerDistance = initialValue;
                this.SightControlsFiringDirection = initialValue;
                this.ActivateSightOnNonSightedMode = initialValue;
                this.ActivateSightOnScopedMode = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem ActivateSightOnSightedMode,
                TItem OpticalSightAttachNode,
                TItem DelayBeforeSightActivation,
                TItem DelayBeforeSightDeactivation,
                TItem OpticalSightLight,
                TItem FocalPointDistance,
                TItem FocalPointDistanceDuringAiming,
                TItem DelayBetweenShots,
                TItem LaserArtObject,
                TItem LaserDotArtObject,
                TItem MaxLaserPointerDistance,
                TItem SightControlsFiringDirection,
                TItem ActivateSightOnNonSightedMode,
                TItem ActivateSightOnScopedMode)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.ActivateSightOnSightedMode = ActivateSightOnSightedMode;
                this.OpticalSightAttachNode = OpticalSightAttachNode;
                this.DelayBeforeSightActivation = DelayBeforeSightActivation;
                this.DelayBeforeSightDeactivation = DelayBeforeSightDeactivation;
                this.OpticalSightLight = OpticalSightLight;
                this.FocalPointDistance = FocalPointDistance;
                this.FocalPointDistanceDuringAiming = FocalPointDistanceDuringAiming;
                this.DelayBetweenShots = DelayBetweenShots;
                this.LaserArtObject = LaserArtObject;
                this.LaserDotArtObject = LaserDotArtObject;
                this.MaxLaserPointerDistance = MaxLaserPointerDistance;
                this.SightControlsFiringDirection = SightControlsFiringDirection;
                this.ActivateSightOnNonSightedMode = ActivateSightOnNonSightedMode;
                this.ActivateSightOnScopedMode = ActivateSightOnScopedMode;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem ActivateSightOnSightedMode;
            public TItem OpticalSightAttachNode;
            public TItem DelayBeforeSightActivation;
            public TItem DelayBeforeSightDeactivation;
            public TItem OpticalSightLight;
            public TItem FocalPointDistance;
            public TItem FocalPointDistanceDuringAiming;
            public TItem DelayBetweenShots;
            public TItem LaserArtObject;
            public TItem LaserDotArtObject;
            public TItem MaxLaserPointerDistance;
            public TItem SightControlsFiringDirection;
            public TItem ActivateSightOnNonSightedMode;
            public TItem ActivateSightOnScopedMode;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.ActivateSightOnSightedMode, rhs.ActivateSightOnSightedMode)) return false;
                if (!object.Equals(this.OpticalSightAttachNode, rhs.OpticalSightAttachNode)) return false;
                if (!object.Equals(this.DelayBeforeSightActivation, rhs.DelayBeforeSightActivation)) return false;
                if (!object.Equals(this.DelayBeforeSightDeactivation, rhs.DelayBeforeSightDeactivation)) return false;
                if (!object.Equals(this.OpticalSightLight, rhs.OpticalSightLight)) return false;
                if (!object.Equals(this.FocalPointDistance, rhs.FocalPointDistance)) return false;
                if (!object.Equals(this.FocalPointDistanceDuringAiming, rhs.FocalPointDistanceDuringAiming)) return false;
                if (!object.Equals(this.DelayBetweenShots, rhs.DelayBetweenShots)) return false;
                if (!object.Equals(this.LaserArtObject, rhs.LaserArtObject)) return false;
                if (!object.Equals(this.LaserDotArtObject, rhs.LaserDotArtObject)) return false;
                if (!object.Equals(this.MaxLaserPointerDistance, rhs.MaxLaserPointerDistance)) return false;
                if (!object.Equals(this.SightControlsFiringDirection, rhs.SightControlsFiringDirection)) return false;
                if (!object.Equals(this.ActivateSightOnNonSightedMode, rhs.ActivateSightOnNonSightedMode)) return false;
                if (!object.Equals(this.ActivateSightOnScopedMode, rhs.ActivateSightOnScopedMode)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.ActivateSightOnSightedMode);
                hash.Add(this.OpticalSightAttachNode);
                hash.Add(this.DelayBeforeSightActivation);
                hash.Add(this.DelayBeforeSightDeactivation);
                hash.Add(this.OpticalSightLight);
                hash.Add(this.FocalPointDistance);
                hash.Add(this.FocalPointDistanceDuringAiming);
                hash.Add(this.DelayBetweenShots);
                hash.Add(this.LaserArtObject);
                hash.Add(this.LaserDotArtObject);
                hash.Add(this.MaxLaserPointerDistance);
                hash.Add(this.SightControlsFiringDirection);
                hash.Add(this.ActivateSightOnNonSightedMode);
                hash.Add(this.ActivateSightOnScopedMode);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ActivateSightOnSightedMode)) return false;
                if (!eval(this.OpticalSightAttachNode)) return false;
                if (!eval(this.DelayBeforeSightActivation)) return false;
                if (!eval(this.DelayBeforeSightDeactivation)) return false;
                if (!eval(this.OpticalSightLight)) return false;
                if (!eval(this.FocalPointDistance)) return false;
                if (!eval(this.FocalPointDistanceDuringAiming)) return false;
                if (!eval(this.DelayBetweenShots)) return false;
                if (!eval(this.LaserArtObject)) return false;
                if (!eval(this.LaserDotArtObject)) return false;
                if (!eval(this.MaxLaserPointerDistance)) return false;
                if (!eval(this.SightControlsFiringDirection)) return false;
                if (!eval(this.ActivateSightOnNonSightedMode)) return false;
                if (!eval(this.ActivateSightOnScopedMode)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ActivateSightOnSightedMode)) return true;
                if (eval(this.OpticalSightAttachNode)) return true;
                if (eval(this.DelayBeforeSightActivation)) return true;
                if (eval(this.DelayBeforeSightDeactivation)) return true;
                if (eval(this.OpticalSightLight)) return true;
                if (eval(this.FocalPointDistance)) return true;
                if (eval(this.FocalPointDistanceDuringAiming)) return true;
                if (eval(this.DelayBetweenShots)) return true;
                if (eval(this.LaserArtObject)) return true;
                if (eval(this.LaserDotArtObject)) return true;
                if (eval(this.MaxLaserPointerDistance)) return true;
                if (eval(this.SightControlsFiringDirection)) return true;
                if (eval(this.ActivateSightOnNonSightedMode)) return true;
                if (eval(this.ActivateSightOnScopedMode)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AimOpticalSightMarker.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ActivateSightOnSightedMode = eval(this.ActivateSightOnSightedMode);
                obj.OpticalSightAttachNode = eval(this.OpticalSightAttachNode);
                obj.DelayBeforeSightActivation = eval(this.DelayBeforeSightActivation);
                obj.DelayBeforeSightDeactivation = eval(this.DelayBeforeSightDeactivation);
                obj.OpticalSightLight = eval(this.OpticalSightLight);
                obj.FocalPointDistance = eval(this.FocalPointDistance);
                obj.FocalPointDistanceDuringAiming = eval(this.FocalPointDistanceDuringAiming);
                obj.DelayBetweenShots = eval(this.DelayBetweenShots);
                obj.LaserArtObject = eval(this.LaserArtObject);
                obj.LaserDotArtObject = eval(this.LaserDotArtObject);
                obj.MaxLaserPointerDistance = eval(this.MaxLaserPointerDistance);
                obj.SightControlsFiringDirection = eval(this.SightControlsFiringDirection);
                obj.ActivateSightOnNonSightedMode = eval(this.ActivateSightOnNonSightedMode);
                obj.ActivateSightOnScopedMode = eval(this.ActivateSightOnScopedMode);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AimOpticalSightMarker.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AimOpticalSightMarker.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AimOpticalSightMarker.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ActivateSightOnSightedMode ?? true)
                    {
                        sb.AppendItem(ActivateSightOnSightedMode, "ActivateSightOnSightedMode");
                    }
                    if (printMask?.OpticalSightAttachNode ?? true)
                    {
                        sb.AppendItem(OpticalSightAttachNode, "OpticalSightAttachNode");
                    }
                    if (printMask?.DelayBeforeSightActivation ?? true)
                    {
                        sb.AppendItem(DelayBeforeSightActivation, "DelayBeforeSightActivation");
                    }
                    if (printMask?.DelayBeforeSightDeactivation ?? true)
                    {
                        sb.AppendItem(DelayBeforeSightDeactivation, "DelayBeforeSightDeactivation");
                    }
                    if (printMask?.OpticalSightLight ?? true)
                    {
                        sb.AppendItem(OpticalSightLight, "OpticalSightLight");
                    }
                    if (printMask?.FocalPointDistance ?? true)
                    {
                        sb.AppendItem(FocalPointDistance, "FocalPointDistance");
                    }
                    if (printMask?.FocalPointDistanceDuringAiming ?? true)
                    {
                        sb.AppendItem(FocalPointDistanceDuringAiming, "FocalPointDistanceDuringAiming");
                    }
                    if (printMask?.DelayBetweenShots ?? true)
                    {
                        sb.AppendItem(DelayBetweenShots, "DelayBetweenShots");
                    }
                    if (printMask?.LaserArtObject ?? true)
                    {
                        sb.AppendItem(LaserArtObject, "LaserArtObject");
                    }
                    if (printMask?.LaserDotArtObject ?? true)
                    {
                        sb.AppendItem(LaserDotArtObject, "LaserDotArtObject");
                    }
                    if (printMask?.MaxLaserPointerDistance ?? true)
                    {
                        sb.AppendItem(MaxLaserPointerDistance, "MaxLaserPointerDistance");
                    }
                    if (printMask?.SightControlsFiringDirection ?? true)
                    {
                        sb.AppendItem(SightControlsFiringDirection, "SightControlsFiringDirection");
                    }
                    if (printMask?.ActivateSightOnNonSightedMode ?? true)
                    {
                        sb.AppendItem(ActivateSightOnNonSightedMode, "ActivateSightOnNonSightedMode");
                    }
                    if (printMask?.ActivateSightOnScopedMode ?? true)
                    {
                        sb.AppendItem(ActivateSightOnScopedMode, "ActivateSightOnScopedMode");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? ActivateSightOnSightedMode;
            public Exception? OpticalSightAttachNode;
            public Exception? DelayBeforeSightActivation;
            public Exception? DelayBeforeSightDeactivation;
            public Exception? OpticalSightLight;
            public Exception? FocalPointDistance;
            public Exception? FocalPointDistanceDuringAiming;
            public Exception? DelayBetweenShots;
            public Exception? LaserArtObject;
            public Exception? LaserDotArtObject;
            public Exception? MaxLaserPointerDistance;
            public Exception? SightControlsFiringDirection;
            public Exception? ActivateSightOnNonSightedMode;
            public Exception? ActivateSightOnScopedMode;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AimOpticalSightMarker_FieldIndex enu = (AimOpticalSightMarker_FieldIndex)index;
                switch (enu)
                {
                    case AimOpticalSightMarker_FieldIndex.Components:
                        return Components;
                    case AimOpticalSightMarker_FieldIndex.ActivateSightOnSightedMode:
                        return ActivateSightOnSightedMode;
                    case AimOpticalSightMarker_FieldIndex.OpticalSightAttachNode:
                        return OpticalSightAttachNode;
                    case AimOpticalSightMarker_FieldIndex.DelayBeforeSightActivation:
                        return DelayBeforeSightActivation;
                    case AimOpticalSightMarker_FieldIndex.DelayBeforeSightDeactivation:
                        return DelayBeforeSightDeactivation;
                    case AimOpticalSightMarker_FieldIndex.OpticalSightLight:
                        return OpticalSightLight;
                    case AimOpticalSightMarker_FieldIndex.FocalPointDistance:
                        return FocalPointDistance;
                    case AimOpticalSightMarker_FieldIndex.FocalPointDistanceDuringAiming:
                        return FocalPointDistanceDuringAiming;
                    case AimOpticalSightMarker_FieldIndex.DelayBetweenShots:
                        return DelayBetweenShots;
                    case AimOpticalSightMarker_FieldIndex.LaserArtObject:
                        return LaserArtObject;
                    case AimOpticalSightMarker_FieldIndex.LaserDotArtObject:
                        return LaserDotArtObject;
                    case AimOpticalSightMarker_FieldIndex.MaxLaserPointerDistance:
                        return MaxLaserPointerDistance;
                    case AimOpticalSightMarker_FieldIndex.SightControlsFiringDirection:
                        return SightControlsFiringDirection;
                    case AimOpticalSightMarker_FieldIndex.ActivateSightOnNonSightedMode:
                        return ActivateSightOnNonSightedMode;
                    case AimOpticalSightMarker_FieldIndex.ActivateSightOnScopedMode:
                        return ActivateSightOnScopedMode;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AimOpticalSightMarker_FieldIndex enu = (AimOpticalSightMarker_FieldIndex)index;
                switch (enu)
                {
                    case AimOpticalSightMarker_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case AimOpticalSightMarker_FieldIndex.ActivateSightOnSightedMode:
                        this.ActivateSightOnSightedMode = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.OpticalSightAttachNode:
                        this.OpticalSightAttachNode = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.DelayBeforeSightActivation:
                        this.DelayBeforeSightActivation = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.DelayBeforeSightDeactivation:
                        this.DelayBeforeSightDeactivation = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.OpticalSightLight:
                        this.OpticalSightLight = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.FocalPointDistance:
                        this.FocalPointDistance = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.FocalPointDistanceDuringAiming:
                        this.FocalPointDistanceDuringAiming = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.DelayBetweenShots:
                        this.DelayBetweenShots = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.LaserArtObject:
                        this.LaserArtObject = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.LaserDotArtObject:
                        this.LaserDotArtObject = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.MaxLaserPointerDistance:
                        this.MaxLaserPointerDistance = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.SightControlsFiringDirection:
                        this.SightControlsFiringDirection = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.ActivateSightOnNonSightedMode:
                        this.ActivateSightOnNonSightedMode = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.ActivateSightOnScopedMode:
                        this.ActivateSightOnScopedMode = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AimOpticalSightMarker_FieldIndex enu = (AimOpticalSightMarker_FieldIndex)index;
                switch (enu)
                {
                    case AimOpticalSightMarker_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.ActivateSightOnSightedMode:
                        this.ActivateSightOnSightedMode = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.OpticalSightAttachNode:
                        this.OpticalSightAttachNode = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.DelayBeforeSightActivation:
                        this.DelayBeforeSightActivation = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.DelayBeforeSightDeactivation:
                        this.DelayBeforeSightDeactivation = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.OpticalSightLight:
                        this.OpticalSightLight = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.FocalPointDistance:
                        this.FocalPointDistance = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.FocalPointDistanceDuringAiming:
                        this.FocalPointDistanceDuringAiming = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.DelayBetweenShots:
                        this.DelayBetweenShots = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.LaserArtObject:
                        this.LaserArtObject = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.LaserDotArtObject:
                        this.LaserDotArtObject = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.MaxLaserPointerDistance:
                        this.MaxLaserPointerDistance = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.SightControlsFiringDirection:
                        this.SightControlsFiringDirection = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.ActivateSightOnNonSightedMode:
                        this.ActivateSightOnNonSightedMode = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.ActivateSightOnScopedMode:
                        this.ActivateSightOnScopedMode = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (ActivateSightOnSightedMode != null) return true;
                if (OpticalSightAttachNode != null) return true;
                if (DelayBeforeSightActivation != null) return true;
                if (DelayBeforeSightDeactivation != null) return true;
                if (OpticalSightLight != null) return true;
                if (FocalPointDistance != null) return true;
                if (FocalPointDistanceDuringAiming != null) return true;
                if (DelayBetweenShots != null) return true;
                if (LaserArtObject != null) return true;
                if (LaserDotArtObject != null) return true;
                if (MaxLaserPointerDistance != null) return true;
                if (SightControlsFiringDirection != null) return true;
                if (ActivateSightOnNonSightedMode != null) return true;
                if (ActivateSightOnScopedMode != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ActivateSightOnSightedMode, "ActivateSightOnSightedMode");
                }
                {
                    sb.AppendItem(OpticalSightAttachNode, "OpticalSightAttachNode");
                }
                {
                    sb.AppendItem(DelayBeforeSightActivation, "DelayBeforeSightActivation");
                }
                {
                    sb.AppendItem(DelayBeforeSightDeactivation, "DelayBeforeSightDeactivation");
                }
                {
                    sb.AppendItem(OpticalSightLight, "OpticalSightLight");
                }
                {
                    sb.AppendItem(FocalPointDistance, "FocalPointDistance");
                }
                {
                    sb.AppendItem(FocalPointDistanceDuringAiming, "FocalPointDistanceDuringAiming");
                }
                {
                    sb.AppendItem(DelayBetweenShots, "DelayBetweenShots");
                }
                {
                    sb.AppendItem(LaserArtObject, "LaserArtObject");
                }
                {
                    sb.AppendItem(LaserDotArtObject, "LaserDotArtObject");
                }
                {
                    sb.AppendItem(MaxLaserPointerDistance, "MaxLaserPointerDistance");
                }
                {
                    sb.AppendItem(SightControlsFiringDirection, "SightControlsFiringDirection");
                }
                {
                    sb.AppendItem(ActivateSightOnNonSightedMode, "ActivateSightOnNonSightedMode");
                }
                {
                    sb.AppendItem(ActivateSightOnScopedMode, "ActivateSightOnScopedMode");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.ActivateSightOnSightedMode = this.ActivateSightOnSightedMode.Combine(rhs.ActivateSightOnSightedMode);
                ret.OpticalSightAttachNode = this.OpticalSightAttachNode.Combine(rhs.OpticalSightAttachNode);
                ret.DelayBeforeSightActivation = this.DelayBeforeSightActivation.Combine(rhs.DelayBeforeSightActivation);
                ret.DelayBeforeSightDeactivation = this.DelayBeforeSightDeactivation.Combine(rhs.DelayBeforeSightDeactivation);
                ret.OpticalSightLight = this.OpticalSightLight.Combine(rhs.OpticalSightLight);
                ret.FocalPointDistance = this.FocalPointDistance.Combine(rhs.FocalPointDistance);
                ret.FocalPointDistanceDuringAiming = this.FocalPointDistanceDuringAiming.Combine(rhs.FocalPointDistanceDuringAiming);
                ret.DelayBetweenShots = this.DelayBetweenShots.Combine(rhs.DelayBetweenShots);
                ret.LaserArtObject = this.LaserArtObject.Combine(rhs.LaserArtObject);
                ret.LaserDotArtObject = this.LaserDotArtObject.Combine(rhs.LaserDotArtObject);
                ret.MaxLaserPointerDistance = this.MaxLaserPointerDistance.Combine(rhs.MaxLaserPointerDistance);
                ret.SightControlsFiringDirection = this.SightControlsFiringDirection.Combine(rhs.SightControlsFiringDirection);
                ret.ActivateSightOnNonSightedMode = this.ActivateSightOnNonSightedMode.Combine(rhs.ActivateSightOnNonSightedMode);
                ret.ActivateSightOnScopedMode = this.ActivateSightOnScopedMode.Combine(rhs.ActivateSightOnScopedMode);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool ActivateSightOnSightedMode;
            public bool OpticalSightAttachNode;
            public bool DelayBeforeSightActivation;
            public bool DelayBeforeSightDeactivation;
            public bool OpticalSightLight;
            public bool FocalPointDistance;
            public bool FocalPointDistanceDuringAiming;
            public bool DelayBetweenShots;
            public bool LaserArtObject;
            public bool LaserDotArtObject;
            public bool MaxLaserPointerDistance;
            public bool SightControlsFiringDirection;
            public bool ActivateSightOnNonSightedMode;
            public bool ActivateSightOnScopedMode;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ActivateSightOnSightedMode = defaultOn;
                this.OpticalSightAttachNode = defaultOn;
                this.DelayBeforeSightActivation = defaultOn;
                this.DelayBeforeSightDeactivation = defaultOn;
                this.OpticalSightLight = defaultOn;
                this.FocalPointDistance = defaultOn;
                this.FocalPointDistanceDuringAiming = defaultOn;
                this.DelayBetweenShots = defaultOn;
                this.LaserArtObject = defaultOn;
                this.LaserDotArtObject = defaultOn;
                this.MaxLaserPointerDistance = defaultOn;
                this.SightControlsFiringDirection = defaultOn;
                this.ActivateSightOnNonSightedMode = defaultOn;
                this.ActivateSightOnScopedMode = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((ActivateSightOnSightedMode, null));
                ret.Add((OpticalSightAttachNode, null));
                ret.Add((DelayBeforeSightActivation, null));
                ret.Add((DelayBeforeSightDeactivation, null));
                ret.Add((OpticalSightLight, null));
                ret.Add((FocalPointDistance, null));
                ret.Add((FocalPointDistanceDuringAiming, null));
                ret.Add((DelayBetweenShots, null));
                ret.Add((LaserArtObject, null));
                ret.Add((LaserDotArtObject, null));
                ret.Add((MaxLaserPointerDistance, null));
                ret.Add((SightControlsFiringDirection, null));
                ret.Add((ActivateSightOnNonSightedMode, null));
                ret.Add((ActivateSightOnScopedMode, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AimOpticalSightMarker_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AimOpticalSightMarkerCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AimOpticalSightMarkerSetterCommon.Instance.RemapLinks(this, mapping);
        public AimOpticalSightMarker(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private AimOpticalSightMarker(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal AimOpticalSightMarker(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public AimOpticalSightMarker(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public AimOpticalSightMarker(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<AimOpticalSightMarker>.ToString(this);
        }

        protected override Type LinkType => typeof(IAimOpticalSightMarker);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => AimOpticalSightMarkerCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => AimOpticalSightMarkerSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => AimOpticalSightMarkerSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => AimOpticalSightMarkerSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAimOpticalSightMarkerGetter rhs) return false;
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAimOpticalSightMarkerGetter? obj)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AimOpticalSightMarkerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AimOpticalSightMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static AimOpticalSightMarker CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new AimOpticalSightMarker();
            ((AimOpticalSightMarkerSetterCommon)((IAimOpticalSightMarkerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AimOpticalSightMarker item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AimOpticalSightMarkerSetterCommon)((IAimOpticalSightMarkerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AimOpticalSightMarker GetNew()
        {
            return new AimOpticalSightMarker();
        }

    }
    #endregion

    #region Interface
    public partial interface IAimOpticalSightMarker :
        IAimOpticalSightMarkerGetter,
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<IAimOpticalSightMarkerInternal>,
        IStarfieldMajorRecordInternal
    {
        new ExtendedList<AComponent> Components { get; }
        new Boolean ActivateSightOnSightedMode { get; set; }
        new String OpticalSightAttachNode { get; set; }
        new Single DelayBeforeSightActivation { get; set; }
        new Single DelayBeforeSightDeactivation { get; set; }
        new IFormLink<ILightGetter> OpticalSightLight { get; set; }
        new Single FocalPointDistance { get; set; }
        new Single FocalPointDistanceDuringAiming { get; set; }
        new Single DelayBetweenShots { get; set; }
        new IFormLink<IArtObjectGetter> LaserArtObject { get; set; }
        new IFormLink<IArtObjectGetter> LaserDotArtObject { get; set; }
        new Single MaxLaserPointerDistance { get; set; }
        new Boolean SightControlsFiringDirection { get; set; }
        new Boolean ActivateSightOnNonSightedMode { get; set; }
        new Boolean ActivateSightOnScopedMode { get; set; }
    }

    public partial interface IAimOpticalSightMarkerInternal :
        IStarfieldMajorRecordInternal,
        IAimOpticalSightMarker,
        IAimOpticalSightMarkerGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.AOPS)]
    public partial interface IAimOpticalSightMarkerGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IAimOpticalSightMarkerGetter>,
        IMapsToGetter<IAimOpticalSightMarkerGetter>
    {
        static new ILoquiRegistration StaticRegistration => AimOpticalSightMarker_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        Boolean ActivateSightOnSightedMode { get; }
        String OpticalSightAttachNode { get; }
        Single DelayBeforeSightActivation { get; }
        Single DelayBeforeSightDeactivation { get; }
        IFormLinkGetter<ILightGetter> OpticalSightLight { get; }
        Single FocalPointDistance { get; }
        Single FocalPointDistanceDuringAiming { get; }
        Single DelayBetweenShots { get; }
        IFormLinkGetter<IArtObjectGetter> LaserArtObject { get; }
        IFormLinkGetter<IArtObjectGetter> LaserDotArtObject { get; }
        Single MaxLaserPointerDistance { get; }
        Boolean SightControlsFiringDirection { get; }
        Boolean ActivateSightOnNonSightedMode { get; }
        Boolean ActivateSightOnScopedMode { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AimOpticalSightMarkerMixIn
    {
        public static void Clear(this IAimOpticalSightMarkerInternal item)
        {
            ((AimOpticalSightMarkerSetterCommon)((IAimOpticalSightMarkerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AimOpticalSightMarker.Mask<bool> GetEqualsMask(
            this IAimOpticalSightMarkerGetter item,
            IAimOpticalSightMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAimOpticalSightMarkerGetter item,
            string? name = null,
            AimOpticalSightMarker.Mask<bool>? printMask = null)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAimOpticalSightMarkerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AimOpticalSightMarker.Mask<bool>? printMask = null)
        {
            ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAimOpticalSightMarkerGetter item,
            IAimOpticalSightMarkerGetter rhs,
            AimOpticalSightMarker.TranslationMask? equalsMask = null)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAimOpticalSightMarkerInternal lhs,
            IAimOpticalSightMarkerGetter rhs,
            out AimOpticalSightMarker.ErrorMask errorMask,
            AimOpticalSightMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AimOpticalSightMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAimOpticalSightMarkerInternal lhs,
            IAimOpticalSightMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AimOpticalSightMarker DeepCopy(
            this IAimOpticalSightMarkerGetter item,
            AimOpticalSightMarker.TranslationMask? copyMask = null)
        {
            return ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AimOpticalSightMarker DeepCopy(
            this IAimOpticalSightMarkerGetter item,
            out AimOpticalSightMarker.ErrorMask errorMask,
            AimOpticalSightMarker.TranslationMask? copyMask = null)
        {
            return ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AimOpticalSightMarker DeepCopy(
            this IAimOpticalSightMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static AimOpticalSightMarker Duplicate(
            this IAimOpticalSightMarkerGetter item,
            FormKey formKey,
            AimOpticalSightMarker.TranslationMask? copyMask = null)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static AimOpticalSightMarker Duplicate(
            this IAimOpticalSightMarkerGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAimOpticalSightMarkerInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AimOpticalSightMarkerSetterCommon)((IAimOpticalSightMarkerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum AimOpticalSightMarker_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        ActivateSightOnSightedMode = 8,
        OpticalSightAttachNode = 9,
        DelayBeforeSightActivation = 10,
        DelayBeforeSightDeactivation = 11,
        OpticalSightLight = 12,
        FocalPointDistance = 13,
        FocalPointDistanceDuringAiming = 14,
        DelayBetweenShots = 15,
        LaserArtObject = 16,
        LaserDotArtObject = 17,
        MaxLaserPointerDistance = 18,
        SightControlsFiringDirection = 19,
        ActivateSightOnNonSightedMode = 20,
        ActivateSightOnScopedMode = 21,
    }
    #endregion

    #region Registration
    internal partial class AimOpticalSightMarker_Registration : ILoquiRegistration
    {
        public static readonly AimOpticalSightMarker_Registration Instance = new AimOpticalSightMarker_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(AimOpticalSightMarker.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AimOpticalSightMarker.ErrorMask);

        public static readonly Type ClassType = typeof(AimOpticalSightMarker);

        public static readonly Type GetterType = typeof(IAimOpticalSightMarkerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAimOpticalSightMarker);

        public static readonly Type? InternalSetterType = typeof(IAimOpticalSightMarkerInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.AimOpticalSightMarker";

        public const string Name = "AimOpticalSightMarker";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.AOPS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.AOPS);
            var all = RecordCollection.Factory(
                RecordTypes.AOPS,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.ANAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AimOpticalSightMarkerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AimOpticalSightMarkerSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly AimOpticalSightMarkerSetterCommon Instance = new AimOpticalSightMarkerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAimOpticalSightMarkerInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.ActivateSightOnSightedMode = default(Boolean);
            item.OpticalSightAttachNode = string.Empty;
            item.DelayBeforeSightActivation = default(Single);
            item.DelayBeforeSightDeactivation = default(Single);
            item.OpticalSightLight.Clear();
            item.FocalPointDistance = default(Single);
            item.FocalPointDistanceDuringAiming = default(Single);
            item.DelayBetweenShots = default(Single);
            item.LaserArtObject.Clear();
            item.LaserDotArtObject.Clear();
            item.MaxLaserPointerDistance = default(Single);
            item.SightControlsFiringDirection = default(Boolean);
            item.ActivateSightOnNonSightedMode = default(Boolean);
            item.ActivateSightOnScopedMode = default(Boolean);
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IAimOpticalSightMarkerInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAimOpticalSightMarkerInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAimOpticalSightMarker obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.OpticalSightLight.Relink(mapping);
            obj.LaserArtObject.Relink(mapping);
            obj.LaserDotArtObject.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IAimOpticalSightMarker obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IAimOpticalSightMarker obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAimOpticalSightMarkerInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IAimOpticalSightMarkerInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AimOpticalSightMarkerBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AimOpticalSightMarkerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AimOpticalSightMarker)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AimOpticalSightMarker)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class AimOpticalSightMarkerCommon : StarfieldMajorRecordCommon
    {
        public new static readonly AimOpticalSightMarkerCommon Instance = new AimOpticalSightMarkerCommon();

        public AimOpticalSightMarker.Mask<bool> GetEqualsMask(
            IAimOpticalSightMarkerGetter item,
            IAimOpticalSightMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AimOpticalSightMarker.Mask<bool>(false);
            ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAimOpticalSightMarkerGetter item,
            IAimOpticalSightMarkerGetter rhs,
            AimOpticalSightMarker.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ActivateSightOnSightedMode = item.ActivateSightOnSightedMode == rhs.ActivateSightOnSightedMode;
            ret.OpticalSightAttachNode = string.Equals(item.OpticalSightAttachNode, rhs.OpticalSightAttachNode);
            ret.DelayBeforeSightActivation = item.DelayBeforeSightActivation.EqualsWithin(rhs.DelayBeforeSightActivation);
            ret.DelayBeforeSightDeactivation = item.DelayBeforeSightDeactivation.EqualsWithin(rhs.DelayBeforeSightDeactivation);
            ret.OpticalSightLight = item.OpticalSightLight.Equals(rhs.OpticalSightLight);
            ret.FocalPointDistance = item.FocalPointDistance.EqualsWithin(rhs.FocalPointDistance);
            ret.FocalPointDistanceDuringAiming = item.FocalPointDistanceDuringAiming.EqualsWithin(rhs.FocalPointDistanceDuringAiming);
            ret.DelayBetweenShots = item.DelayBetweenShots.EqualsWithin(rhs.DelayBetweenShots);
            ret.LaserArtObject = item.LaserArtObject.Equals(rhs.LaserArtObject);
            ret.LaserDotArtObject = item.LaserDotArtObject.Equals(rhs.LaserDotArtObject);
            ret.MaxLaserPointerDistance = item.MaxLaserPointerDistance.EqualsWithin(rhs.MaxLaserPointerDistance);
            ret.SightControlsFiringDirection = item.SightControlsFiringDirection == rhs.SightControlsFiringDirection;
            ret.ActivateSightOnNonSightedMode = item.ActivateSightOnNonSightedMode == rhs.ActivateSightOnNonSightedMode;
            ret.ActivateSightOnScopedMode = item.ActivateSightOnScopedMode == rhs.ActivateSightOnScopedMode;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IAimOpticalSightMarkerGetter item,
            string? name = null,
            AimOpticalSightMarker.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAimOpticalSightMarkerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AimOpticalSightMarker.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AimOpticalSightMarker =>");
            }
            else
            {
                sb.AppendLine($"{name} (AimOpticalSightMarker) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAimOpticalSightMarkerGetter item,
            StructuredStringBuilder sb,
            AimOpticalSightMarker.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.ActivateSightOnSightedMode ?? true)
            {
                sb.AppendItem(item.ActivateSightOnSightedMode, "ActivateSightOnSightedMode");
            }
            if (printMask?.OpticalSightAttachNode ?? true)
            {
                sb.AppendItem(item.OpticalSightAttachNode, "OpticalSightAttachNode");
            }
            if (printMask?.DelayBeforeSightActivation ?? true)
            {
                sb.AppendItem(item.DelayBeforeSightActivation, "DelayBeforeSightActivation");
            }
            if (printMask?.DelayBeforeSightDeactivation ?? true)
            {
                sb.AppendItem(item.DelayBeforeSightDeactivation, "DelayBeforeSightDeactivation");
            }
            if (printMask?.OpticalSightLight ?? true)
            {
                sb.AppendItem(item.OpticalSightLight.FormKey, "OpticalSightLight");
            }
            if (printMask?.FocalPointDistance ?? true)
            {
                sb.AppendItem(item.FocalPointDistance, "FocalPointDistance");
            }
            if (printMask?.FocalPointDistanceDuringAiming ?? true)
            {
                sb.AppendItem(item.FocalPointDistanceDuringAiming, "FocalPointDistanceDuringAiming");
            }
            if (printMask?.DelayBetweenShots ?? true)
            {
                sb.AppendItem(item.DelayBetweenShots, "DelayBetweenShots");
            }
            if (printMask?.LaserArtObject ?? true)
            {
                sb.AppendItem(item.LaserArtObject.FormKey, "LaserArtObject");
            }
            if (printMask?.LaserDotArtObject ?? true)
            {
                sb.AppendItem(item.LaserDotArtObject.FormKey, "LaserDotArtObject");
            }
            if (printMask?.MaxLaserPointerDistance ?? true)
            {
                sb.AppendItem(item.MaxLaserPointerDistance, "MaxLaserPointerDistance");
            }
            if (printMask?.SightControlsFiringDirection ?? true)
            {
                sb.AppendItem(item.SightControlsFiringDirection, "SightControlsFiringDirection");
            }
            if (printMask?.ActivateSightOnNonSightedMode ?? true)
            {
                sb.AppendItem(item.ActivateSightOnNonSightedMode, "ActivateSightOnNonSightedMode");
            }
            if (printMask?.ActivateSightOnScopedMode ?? true)
            {
                sb.AppendItem(item.ActivateSightOnScopedMode, "ActivateSightOnScopedMode");
            }
        }
        
        public static AimOpticalSightMarker_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new AimOpticalSightMarker_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAimOpticalSightMarkerGetter? lhs,
            IAimOpticalSightMarkerGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)AimOpticalSightMarker_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.ActivateSightOnSightedMode) ?? true))
            {
                if (lhs.ActivateSightOnSightedMode != rhs.ActivateSightOnSightedMode) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.OpticalSightAttachNode) ?? true))
            {
                if (!string.Equals(lhs.OpticalSightAttachNode, rhs.OpticalSightAttachNode)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.DelayBeforeSightActivation) ?? true))
            {
                if (!lhs.DelayBeforeSightActivation.EqualsWithin(rhs.DelayBeforeSightActivation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.DelayBeforeSightDeactivation) ?? true))
            {
                if (!lhs.DelayBeforeSightDeactivation.EqualsWithin(rhs.DelayBeforeSightDeactivation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.OpticalSightLight) ?? true))
            {
                if (!lhs.OpticalSightLight.Equals(rhs.OpticalSightLight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.FocalPointDistance) ?? true))
            {
                if (!lhs.FocalPointDistance.EqualsWithin(rhs.FocalPointDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.FocalPointDistanceDuringAiming) ?? true))
            {
                if (!lhs.FocalPointDistanceDuringAiming.EqualsWithin(rhs.FocalPointDistanceDuringAiming)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.DelayBetweenShots) ?? true))
            {
                if (!lhs.DelayBetweenShots.EqualsWithin(rhs.DelayBetweenShots)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.LaserArtObject) ?? true))
            {
                if (!lhs.LaserArtObject.Equals(rhs.LaserArtObject)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.LaserDotArtObject) ?? true))
            {
                if (!lhs.LaserDotArtObject.Equals(rhs.LaserDotArtObject)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.MaxLaserPointerDistance) ?? true))
            {
                if (!lhs.MaxLaserPointerDistance.EqualsWithin(rhs.MaxLaserPointerDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.SightControlsFiringDirection) ?? true))
            {
                if (lhs.SightControlsFiringDirection != rhs.SightControlsFiringDirection) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.ActivateSightOnNonSightedMode) ?? true))
            {
                if (lhs.ActivateSightOnNonSightedMode != rhs.ActivateSightOnNonSightedMode) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.ActivateSightOnScopedMode) ?? true))
            {
                if (lhs.ActivateSightOnScopedMode != rhs.ActivateSightOnScopedMode) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAimOpticalSightMarkerGetter?)lhs,
                rhs: rhs as IAimOpticalSightMarkerGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAimOpticalSightMarkerGetter?)lhs,
                rhs: rhs as IAimOpticalSightMarkerGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IAimOpticalSightMarkerGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            hash.Add(item.ActivateSightOnSightedMode);
            hash.Add(item.OpticalSightAttachNode);
            hash.Add(item.DelayBeforeSightActivation);
            hash.Add(item.DelayBeforeSightDeactivation);
            hash.Add(item.OpticalSightLight);
            hash.Add(item.FocalPointDistance);
            hash.Add(item.FocalPointDistanceDuringAiming);
            hash.Add(item.DelayBetweenShots);
            hash.Add(item.LaserArtObject);
            hash.Add(item.LaserDotArtObject);
            hash.Add(item.MaxLaserPointerDistance);
            hash.Add(item.SightControlsFiringDirection);
            hash.Add(item.ActivateSightOnNonSightedMode);
            hash.Add(item.ActivateSightOnScopedMode);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IAimOpticalSightMarkerGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAimOpticalSightMarkerGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AimOpticalSightMarker.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAimOpticalSightMarkerGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield return FormLinkInformation.Factory(obj.OpticalSightLight);
            yield return FormLinkInformation.Factory(obj.LaserArtObject);
            yield return FormLinkInformation.Factory(obj.LaserDotArtObject);
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IAimOpticalSightMarkerGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public AimOpticalSightMarker Duplicate(
            IAimOpticalSightMarkerGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new AimOpticalSightMarker(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAimOpticalSightMarkerGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAimOpticalSightMarkerGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class AimOpticalSightMarkerSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly AimOpticalSightMarkerSetterTranslationCommon Instance = new AimOpticalSightMarkerSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAimOpticalSightMarkerInternal item,
            IAimOpticalSightMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IAimOpticalSightMarker item,
            IAimOpticalSightMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)AimOpticalSightMarker_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.ActivateSightOnSightedMode) ?? true))
            {
                item.ActivateSightOnSightedMode = rhs.ActivateSightOnSightedMode;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.OpticalSightAttachNode) ?? true))
            {
                item.OpticalSightAttachNode = rhs.OpticalSightAttachNode;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.DelayBeforeSightActivation) ?? true))
            {
                item.DelayBeforeSightActivation = rhs.DelayBeforeSightActivation;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.DelayBeforeSightDeactivation) ?? true))
            {
                item.DelayBeforeSightDeactivation = rhs.DelayBeforeSightDeactivation;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.OpticalSightLight) ?? true))
            {
                item.OpticalSightLight.SetTo(rhs.OpticalSightLight.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.FocalPointDistance) ?? true))
            {
                item.FocalPointDistance = rhs.FocalPointDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.FocalPointDistanceDuringAiming) ?? true))
            {
                item.FocalPointDistanceDuringAiming = rhs.FocalPointDistanceDuringAiming;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.DelayBetweenShots) ?? true))
            {
                item.DelayBetweenShots = rhs.DelayBetweenShots;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.LaserArtObject) ?? true))
            {
                item.LaserArtObject.SetTo(rhs.LaserArtObject.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.LaserDotArtObject) ?? true))
            {
                item.LaserDotArtObject.SetTo(rhs.LaserDotArtObject.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.MaxLaserPointerDistance) ?? true))
            {
                item.MaxLaserPointerDistance = rhs.MaxLaserPointerDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.SightControlsFiringDirection) ?? true))
            {
                item.SightControlsFiringDirection = rhs.SightControlsFiringDirection;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.ActivateSightOnNonSightedMode) ?? true))
            {
                item.ActivateSightOnNonSightedMode = rhs.ActivateSightOnNonSightedMode;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.ActivateSightOnScopedMode) ?? true))
            {
                item.ActivateSightOnScopedMode = rhs.ActivateSightOnScopedMode;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IAimOpticalSightMarker item,
            IAimOpticalSightMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimOpticalSightMarkerInternal)item,
                rhs: (IAimOpticalSightMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimOpticalSightMarker)item,
                rhs: (IAimOpticalSightMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimOpticalSightMarkerInternal)item,
                rhs: (IAimOpticalSightMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimOpticalSightMarker)item,
                rhs: (IAimOpticalSightMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AimOpticalSightMarker DeepCopy(
            IAimOpticalSightMarkerGetter item,
            AimOpticalSightMarker.TranslationMask? copyMask = null)
        {
            AimOpticalSightMarker ret = (AimOpticalSightMarker)((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).GetNew();
            ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AimOpticalSightMarker DeepCopy(
            IAimOpticalSightMarkerGetter item,
            out AimOpticalSightMarker.ErrorMask errorMask,
            AimOpticalSightMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AimOpticalSightMarker ret = (AimOpticalSightMarker)((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).GetNew();
            ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AimOpticalSightMarker.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AimOpticalSightMarker DeepCopy(
            IAimOpticalSightMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AimOpticalSightMarker ret = (AimOpticalSightMarker)((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).GetNew();
            ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class AimOpticalSightMarker
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AimOpticalSightMarker_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AimOpticalSightMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AimOpticalSightMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AimOpticalSightMarkerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AimOpticalSightMarkerSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class AimOpticalSightMarkerBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly AimOpticalSightMarkerBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IAimOpticalSightMarkerGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.ANAM)))
            {
                writer.Write(item.ActivateSightOnSightedMode);
                StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OpticalSightAttachNode,
                    binaryType: StringBinaryType.PrependLengthWithNullIfContent);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DelayBeforeSightActivation);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DelayBeforeSightDeactivation);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.OpticalSightLight);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FocalPointDistance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FocalPointDistanceDuringAiming);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DelayBetweenShots);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LaserArtObject);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LaserDotArtObject);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MaxLaserPointerDistance);
                writer.Write(item.SightControlsFiringDirection);
                writer.Write(item.ActivateSightOnNonSightedMode);
                writer.Write(item.ActivateSightOnScopedMode);
            }
        }

        public void Write(
            MutagenWriter writer,
            IAimOpticalSightMarkerGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.AOPS,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAimOpticalSightMarkerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAimOpticalSightMarkerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAimOpticalSightMarkerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AimOpticalSightMarkerBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly AimOpticalSightMarkerBinaryCreateTranslation Instance = new AimOpticalSightMarkerBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.AOPS;
        public static ParseResult FillBinaryRecordTypes(
            IAimOpticalSightMarkerInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)AimOpticalSightMarker_FieldIndex.Components;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.ActivateSightOnSightedMode = dataFrame.ReadBoolean();
                    item.OpticalSightAttachNode = StringBinaryTranslation.Instance.Parse(
                        reader: dataFrame,
                        stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                        parseWhole: true);
                    if (dataFrame.Remaining < 4) return null;
                    item.DelayBeforeSightActivation = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DelayBeforeSightDeactivation = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.OpticalSightLight.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.FocalPointDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FocalPointDistanceDuringAiming = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DelayBetweenShots = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.LaserArtObject.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.LaserDotArtObject.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.MaxLaserPointerDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.SightControlsFiringDirection = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.ActivateSightOnNonSightedMode = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.ActivateSightOnScopedMode = dataFrame.ReadBoolean();
                    return (int)AimOpticalSightMarker_FieldIndex.ActivateSightOnScopedMode;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class AimOpticalSightMarkerBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class AimOpticalSightMarkerBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IAimOpticalSightMarkerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AimOpticalSightMarker_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AimOpticalSightMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AimOpticalSightMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AimOpticalSightMarkerSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AimOpticalSightMarkerCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => AimOpticalSightMarkerCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AimOpticalSightMarkerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AimOpticalSightMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IAimOpticalSightMarker);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        private RangeInt32? _ANAMLocation;
        #region ActivateSightOnSightedMode
        private int _ActivateSightOnSightedModeLocation => _ANAMLocation!.Value.Min;
        private bool _ActivateSightOnSightedMode_IsSet => _ANAMLocation.HasValue;
        public Boolean ActivateSightOnSightedMode => _ActivateSightOnSightedMode_IsSet ? _recordData.Slice(_ActivateSightOnSightedModeLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region OpticalSightAttachNode
        private int _OpticalSightAttachNodeLocation => _ANAMLocation!.Value.Min + 0x1;
        private bool _OpticalSightAttachNode_IsSet => _ANAMLocation.HasValue;
        public String OpticalSightAttachNode => _OpticalSightAttachNode_IsSet ? BinaryStringUtility.ParsePrependedString(_recordData.Slice(_OpticalSightAttachNodeLocation), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        protected int OpticalSightAttachNodeEndingPos;
        #endregion
        #region DelayBeforeSightActivation
        private int _DelayBeforeSightActivationLocation => OpticalSightAttachNodeEndingPos;
        private bool _DelayBeforeSightActivation_IsSet => _ANAMLocation.HasValue;
        public Single DelayBeforeSightActivation => _DelayBeforeSightActivation_IsSet ? _recordData.Slice(_DelayBeforeSightActivationLocation, 4).Float() : default(Single);
        #endregion
        #region DelayBeforeSightDeactivation
        private int _DelayBeforeSightDeactivationLocation => OpticalSightAttachNodeEndingPos + 0x4;
        private bool _DelayBeforeSightDeactivation_IsSet => _ANAMLocation.HasValue;
        public Single DelayBeforeSightDeactivation => _DelayBeforeSightDeactivation_IsSet ? _recordData.Slice(_DelayBeforeSightDeactivationLocation, 4).Float() : default(Single);
        #endregion
        #region OpticalSightLight
        private int _OpticalSightLightLocation => OpticalSightAttachNodeEndingPos + 0x8;
        private bool _OpticalSightLight_IsSet => _ANAMLocation.HasValue;
        public IFormLinkGetter<ILightGetter> OpticalSightLight => _OpticalSightLight_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ILightGetter>(_package, _recordData.Span.Slice(_OpticalSightLightLocation, 0x4), isSet: _OpticalSightLight_IsSet) : FormLink<ILightGetter>.Null;
        #endregion
        #region FocalPointDistance
        private int _FocalPointDistanceLocation => OpticalSightAttachNodeEndingPos + 0xC;
        private bool _FocalPointDistance_IsSet => _ANAMLocation.HasValue;
        public Single FocalPointDistance => _FocalPointDistance_IsSet ? _recordData.Slice(_FocalPointDistanceLocation, 4).Float() : default(Single);
        #endregion
        #region FocalPointDistanceDuringAiming
        private int _FocalPointDistanceDuringAimingLocation => OpticalSightAttachNodeEndingPos + 0x10;
        private bool _FocalPointDistanceDuringAiming_IsSet => _ANAMLocation.HasValue;
        public Single FocalPointDistanceDuringAiming => _FocalPointDistanceDuringAiming_IsSet ? _recordData.Slice(_FocalPointDistanceDuringAimingLocation, 4).Float() : default(Single);
        #endregion
        #region DelayBetweenShots
        private int _DelayBetweenShotsLocation => OpticalSightAttachNodeEndingPos + 0x14;
        private bool _DelayBetweenShots_IsSet => _ANAMLocation.HasValue;
        public Single DelayBetweenShots => _DelayBetweenShots_IsSet ? _recordData.Slice(_DelayBetweenShotsLocation, 4).Float() : default(Single);
        #endregion
        #region LaserArtObject
        private int _LaserArtObjectLocation => OpticalSightAttachNodeEndingPos + 0x18;
        private bool _LaserArtObject_IsSet => _ANAMLocation.HasValue;
        public IFormLinkGetter<IArtObjectGetter> LaserArtObject => _LaserArtObject_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IArtObjectGetter>(_package, _recordData.Span.Slice(_LaserArtObjectLocation, 0x4), isSet: _LaserArtObject_IsSet) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region LaserDotArtObject
        private int _LaserDotArtObjectLocation => OpticalSightAttachNodeEndingPos + 0x1C;
        private bool _LaserDotArtObject_IsSet => _ANAMLocation.HasValue;
        public IFormLinkGetter<IArtObjectGetter> LaserDotArtObject => _LaserDotArtObject_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IArtObjectGetter>(_package, _recordData.Span.Slice(_LaserDotArtObjectLocation, 0x4), isSet: _LaserDotArtObject_IsSet) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region MaxLaserPointerDistance
        private int _MaxLaserPointerDistanceLocation => OpticalSightAttachNodeEndingPos + 0x20;
        private bool _MaxLaserPointerDistance_IsSet => _ANAMLocation.HasValue;
        public Single MaxLaserPointerDistance => _MaxLaserPointerDistance_IsSet ? _recordData.Slice(_MaxLaserPointerDistanceLocation, 4).Float() : default(Single);
        #endregion
        #region SightControlsFiringDirection
        private int _SightControlsFiringDirectionLocation => OpticalSightAttachNodeEndingPos + 0x24;
        private bool _SightControlsFiringDirection_IsSet => _ANAMLocation.HasValue;
        public Boolean SightControlsFiringDirection => _SightControlsFiringDirection_IsSet ? _recordData.Slice(_SightControlsFiringDirectionLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region ActivateSightOnNonSightedMode
        private int _ActivateSightOnNonSightedModeLocation => OpticalSightAttachNodeEndingPos + 0x25;
        private bool _ActivateSightOnNonSightedMode_IsSet => _ANAMLocation.HasValue;
        public Boolean ActivateSightOnNonSightedMode => _ActivateSightOnNonSightedMode_IsSet ? _recordData.Slice(_ActivateSightOnNonSightedModeLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region ActivateSightOnScopedMode
        private int _ActivateSightOnScopedModeLocation => OpticalSightAttachNodeEndingPos + 0x26;
        private bool _ActivateSightOnScopedMode_IsSet => _ANAMLocation.HasValue;
        public Boolean ActivateSightOnScopedMode => _ActivateSightOnScopedMode_IsSet ? _recordData.Slice(_ActivateSightOnScopedModeLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AimOpticalSightMarkerBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IAimOpticalSightMarkerGetter AimOpticalSightMarkerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new AimOpticalSightMarkerBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            ret.OpticalSightAttachNodeEndingPos = ret._ANAMLocation!.Value.Min + 0x1 + BinaryPrimitives.ReadInt32LittleEndian(ret._recordData.Slice(ret._ANAMLocation!.Value.Min + 0x1)) + 4;
            return ret;
        }

        public static IAimOpticalSightMarkerGetter AimOpticalSightMarkerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AimOpticalSightMarkerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)AimOpticalSightMarker_FieldIndex.Components;
                }
                case RecordTypeInts.ANAM:
                {
                    _ANAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)AimOpticalSightMarker_FieldIndex.ActivateSightOnScopedMode;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AimOpticalSightMarkerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<AimOpticalSightMarker>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAimOpticalSightMarkerGetter rhs) return false;
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAimOpticalSightMarkerGetter? obj)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

