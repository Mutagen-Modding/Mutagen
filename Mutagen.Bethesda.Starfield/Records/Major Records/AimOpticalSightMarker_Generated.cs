/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class AimOpticalSightMarker :
        StarfieldMajorRecord,
        IAimOpticalSightMarkerInternal,
        IEquatable<IAimOpticalSightMarkerGetter>,
        ILoquiObjectSetter<AimOpticalSightMarker>
    {
        #region Ctor
        protected AimOpticalSightMarker()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region HideBeamByDefault
        public Boolean HideBeamByDefault { get; set; } = default(Boolean);
        #endregion
        #region UnknownOldField
        public UInt32 UnknownOldField { get; set; } = default(UInt32);
        #endregion
        #region NodeName
        public String NodeName { get; set; } = string.Empty;
        #endregion
        #region BeamReactivationDelayAfterEquipOrReloadSeconds
        public Single BeamReactivationDelayAfterEquipOrReloadSeconds { get; set; } = default(Single);
        #endregion
        #region BeamDeactivationDelayAfterReloadSeconds
        public Single BeamDeactivationDelayAfterReloadSeconds { get; set; } = default(Single);
        #endregion
        #region Light
        private readonly IFormLink<ILightGetter> _Light = new FormLink<ILightGetter>();
        public IFormLink<ILightGetter> Light
        {
            get => _Light;
            set => _Light.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILightGetter> IAimOpticalSightMarkerGetter.Light => this.Light;
        #endregion
        #region Unknown1
        public Single Unknown1 { get; set; } = default(Single);
        #endregion
        #region Unknown2
        public Single Unknown2 { get; set; } = default(Single);
        #endregion
        #region BeamReactivationDelayAfterFiringSeconds
        public Single BeamReactivationDelayAfterFiringSeconds { get; set; } = default(Single);
        #endregion
        #region BeamArtObject
        private readonly IFormLink<IArtObjectGetter> _BeamArtObject = new FormLink<IArtObjectGetter>();
        public IFormLink<IArtObjectGetter> BeamArtObject
        {
            get => _BeamArtObject;
            set => _BeamArtObject.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IArtObjectGetter> IAimOpticalSightMarkerGetter.BeamArtObject => this.BeamArtObject;
        #endregion
        #region DotArtObject
        private readonly IFormLink<IArtObjectGetter> _DotArtObject = new FormLink<IArtObjectGetter>();
        public IFormLink<IArtObjectGetter> DotArtObject
        {
            get => _DotArtObject;
            set => _DotArtObject.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IArtObjectGetter> IAimOpticalSightMarkerGetter.DotArtObject => this.DotArtObject;
        #endregion
        #region Unknown3
        public Single Unknown3 { get; set; } = default(Single);
        #endregion
        #region Unknown4
        public Boolean Unknown4 { get; set; } = default(Boolean);
        #endregion
        #region ShowBeamAtHip
        public Boolean ShowBeamAtHip { get; set; } = default(Boolean);
        #endregion
        #region Unknown5
        public Boolean Unknown5 { get; set; } = default(Boolean);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AimOpticalSightMarkerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.HideBeamByDefault = initialValue;
                this.UnknownOldField = initialValue;
                this.NodeName = initialValue;
                this.BeamReactivationDelayAfterEquipOrReloadSeconds = initialValue;
                this.BeamDeactivationDelayAfterReloadSeconds = initialValue;
                this.Light = initialValue;
                this.Unknown1 = initialValue;
                this.Unknown2 = initialValue;
                this.BeamReactivationDelayAfterFiringSeconds = initialValue;
                this.BeamArtObject = initialValue;
                this.DotArtObject = initialValue;
                this.Unknown3 = initialValue;
                this.Unknown4 = initialValue;
                this.ShowBeamAtHip = initialValue;
                this.Unknown5 = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem HideBeamByDefault,
                TItem UnknownOldField,
                TItem NodeName,
                TItem BeamReactivationDelayAfterEquipOrReloadSeconds,
                TItem BeamDeactivationDelayAfterReloadSeconds,
                TItem Light,
                TItem Unknown1,
                TItem Unknown2,
                TItem BeamReactivationDelayAfterFiringSeconds,
                TItem BeamArtObject,
                TItem DotArtObject,
                TItem Unknown3,
                TItem Unknown4,
                TItem ShowBeamAtHip,
                TItem Unknown5)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.HideBeamByDefault = HideBeamByDefault;
                this.UnknownOldField = UnknownOldField;
                this.NodeName = NodeName;
                this.BeamReactivationDelayAfterEquipOrReloadSeconds = BeamReactivationDelayAfterEquipOrReloadSeconds;
                this.BeamDeactivationDelayAfterReloadSeconds = BeamDeactivationDelayAfterReloadSeconds;
                this.Light = Light;
                this.Unknown1 = Unknown1;
                this.Unknown2 = Unknown2;
                this.BeamReactivationDelayAfterFiringSeconds = BeamReactivationDelayAfterFiringSeconds;
                this.BeamArtObject = BeamArtObject;
                this.DotArtObject = DotArtObject;
                this.Unknown3 = Unknown3;
                this.Unknown4 = Unknown4;
                this.ShowBeamAtHip = ShowBeamAtHip;
                this.Unknown5 = Unknown5;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem HideBeamByDefault;
            public TItem UnknownOldField;
            public TItem NodeName;
            public TItem BeamReactivationDelayAfterEquipOrReloadSeconds;
            public TItem BeamDeactivationDelayAfterReloadSeconds;
            public TItem Light;
            public TItem Unknown1;
            public TItem Unknown2;
            public TItem BeamReactivationDelayAfterFiringSeconds;
            public TItem BeamArtObject;
            public TItem DotArtObject;
            public TItem Unknown3;
            public TItem Unknown4;
            public TItem ShowBeamAtHip;
            public TItem Unknown5;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.HideBeamByDefault, rhs.HideBeamByDefault)) return false;
                if (!object.Equals(this.UnknownOldField, rhs.UnknownOldField)) return false;
                if (!object.Equals(this.NodeName, rhs.NodeName)) return false;
                if (!object.Equals(this.BeamReactivationDelayAfterEquipOrReloadSeconds, rhs.BeamReactivationDelayAfterEquipOrReloadSeconds)) return false;
                if (!object.Equals(this.BeamDeactivationDelayAfterReloadSeconds, rhs.BeamDeactivationDelayAfterReloadSeconds)) return false;
                if (!object.Equals(this.Light, rhs.Light)) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.BeamReactivationDelayAfterFiringSeconds, rhs.BeamReactivationDelayAfterFiringSeconds)) return false;
                if (!object.Equals(this.BeamArtObject, rhs.BeamArtObject)) return false;
                if (!object.Equals(this.DotArtObject, rhs.DotArtObject)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.Unknown4, rhs.Unknown4)) return false;
                if (!object.Equals(this.ShowBeamAtHip, rhs.ShowBeamAtHip)) return false;
                if (!object.Equals(this.Unknown5, rhs.Unknown5)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.HideBeamByDefault);
                hash.Add(this.UnknownOldField);
                hash.Add(this.NodeName);
                hash.Add(this.BeamReactivationDelayAfterEquipOrReloadSeconds);
                hash.Add(this.BeamDeactivationDelayAfterReloadSeconds);
                hash.Add(this.Light);
                hash.Add(this.Unknown1);
                hash.Add(this.Unknown2);
                hash.Add(this.BeamReactivationDelayAfterFiringSeconds);
                hash.Add(this.BeamArtObject);
                hash.Add(this.DotArtObject);
                hash.Add(this.Unknown3);
                hash.Add(this.Unknown4);
                hash.Add(this.ShowBeamAtHip);
                hash.Add(this.Unknown5);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.HideBeamByDefault)) return false;
                if (!eval(this.UnknownOldField)) return false;
                if (!eval(this.NodeName)) return false;
                if (!eval(this.BeamReactivationDelayAfterEquipOrReloadSeconds)) return false;
                if (!eval(this.BeamDeactivationDelayAfterReloadSeconds)) return false;
                if (!eval(this.Light)) return false;
                if (!eval(this.Unknown1)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.BeamReactivationDelayAfterFiringSeconds)) return false;
                if (!eval(this.BeamArtObject)) return false;
                if (!eval(this.DotArtObject)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.Unknown4)) return false;
                if (!eval(this.ShowBeamAtHip)) return false;
                if (!eval(this.Unknown5)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.HideBeamByDefault)) return true;
                if (eval(this.UnknownOldField)) return true;
                if (eval(this.NodeName)) return true;
                if (eval(this.BeamReactivationDelayAfterEquipOrReloadSeconds)) return true;
                if (eval(this.BeamDeactivationDelayAfterReloadSeconds)) return true;
                if (eval(this.Light)) return true;
                if (eval(this.Unknown1)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.BeamReactivationDelayAfterFiringSeconds)) return true;
                if (eval(this.BeamArtObject)) return true;
                if (eval(this.DotArtObject)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.Unknown4)) return true;
                if (eval(this.ShowBeamAtHip)) return true;
                if (eval(this.Unknown5)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AimOpticalSightMarker.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.HideBeamByDefault = eval(this.HideBeamByDefault);
                obj.UnknownOldField = eval(this.UnknownOldField);
                obj.NodeName = eval(this.NodeName);
                obj.BeamReactivationDelayAfterEquipOrReloadSeconds = eval(this.BeamReactivationDelayAfterEquipOrReloadSeconds);
                obj.BeamDeactivationDelayAfterReloadSeconds = eval(this.BeamDeactivationDelayAfterReloadSeconds);
                obj.Light = eval(this.Light);
                obj.Unknown1 = eval(this.Unknown1);
                obj.Unknown2 = eval(this.Unknown2);
                obj.BeamReactivationDelayAfterFiringSeconds = eval(this.BeamReactivationDelayAfterFiringSeconds);
                obj.BeamArtObject = eval(this.BeamArtObject);
                obj.DotArtObject = eval(this.DotArtObject);
                obj.Unknown3 = eval(this.Unknown3);
                obj.Unknown4 = eval(this.Unknown4);
                obj.ShowBeamAtHip = eval(this.ShowBeamAtHip);
                obj.Unknown5 = eval(this.Unknown5);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AimOpticalSightMarker.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AimOpticalSightMarker.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AimOpticalSightMarker.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.HideBeamByDefault ?? true)
                    {
                        sb.AppendItem(HideBeamByDefault, "HideBeamByDefault");
                    }
                    if (printMask?.UnknownOldField ?? true)
                    {
                        sb.AppendItem(UnknownOldField, "UnknownOldField");
                    }
                    if (printMask?.NodeName ?? true)
                    {
                        sb.AppendItem(NodeName, "NodeName");
                    }
                    if (printMask?.BeamReactivationDelayAfterEquipOrReloadSeconds ?? true)
                    {
                        sb.AppendItem(BeamReactivationDelayAfterEquipOrReloadSeconds, "BeamReactivationDelayAfterEquipOrReloadSeconds");
                    }
                    if (printMask?.BeamDeactivationDelayAfterReloadSeconds ?? true)
                    {
                        sb.AppendItem(BeamDeactivationDelayAfterReloadSeconds, "BeamDeactivationDelayAfterReloadSeconds");
                    }
                    if (printMask?.Light ?? true)
                    {
                        sb.AppendItem(Light, "Light");
                    }
                    if (printMask?.Unknown1 ?? true)
                    {
                        sb.AppendItem(Unknown1, "Unknown1");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.BeamReactivationDelayAfterFiringSeconds ?? true)
                    {
                        sb.AppendItem(BeamReactivationDelayAfterFiringSeconds, "BeamReactivationDelayAfterFiringSeconds");
                    }
                    if (printMask?.BeamArtObject ?? true)
                    {
                        sb.AppendItem(BeamArtObject, "BeamArtObject");
                    }
                    if (printMask?.DotArtObject ?? true)
                    {
                        sb.AppendItem(DotArtObject, "DotArtObject");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        sb.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.Unknown4 ?? true)
                    {
                        sb.AppendItem(Unknown4, "Unknown4");
                    }
                    if (printMask?.ShowBeamAtHip ?? true)
                    {
                        sb.AppendItem(ShowBeamAtHip, "ShowBeamAtHip");
                    }
                    if (printMask?.Unknown5 ?? true)
                    {
                        sb.AppendItem(Unknown5, "Unknown5");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? HideBeamByDefault;
            public Exception? UnknownOldField;
            public Exception? NodeName;
            public Exception? BeamReactivationDelayAfterEquipOrReloadSeconds;
            public Exception? BeamDeactivationDelayAfterReloadSeconds;
            public Exception? Light;
            public Exception? Unknown1;
            public Exception? Unknown2;
            public Exception? BeamReactivationDelayAfterFiringSeconds;
            public Exception? BeamArtObject;
            public Exception? DotArtObject;
            public Exception? Unknown3;
            public Exception? Unknown4;
            public Exception? ShowBeamAtHip;
            public Exception? Unknown5;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AimOpticalSightMarker_FieldIndex enu = (AimOpticalSightMarker_FieldIndex)index;
                switch (enu)
                {
                    case AimOpticalSightMarker_FieldIndex.HideBeamByDefault:
                        return HideBeamByDefault;
                    case AimOpticalSightMarker_FieldIndex.UnknownOldField:
                        return UnknownOldField;
                    case AimOpticalSightMarker_FieldIndex.NodeName:
                        return NodeName;
                    case AimOpticalSightMarker_FieldIndex.BeamReactivationDelayAfterEquipOrReloadSeconds:
                        return BeamReactivationDelayAfterEquipOrReloadSeconds;
                    case AimOpticalSightMarker_FieldIndex.BeamDeactivationDelayAfterReloadSeconds:
                        return BeamDeactivationDelayAfterReloadSeconds;
                    case AimOpticalSightMarker_FieldIndex.Light:
                        return Light;
                    case AimOpticalSightMarker_FieldIndex.Unknown1:
                        return Unknown1;
                    case AimOpticalSightMarker_FieldIndex.Unknown2:
                        return Unknown2;
                    case AimOpticalSightMarker_FieldIndex.BeamReactivationDelayAfterFiringSeconds:
                        return BeamReactivationDelayAfterFiringSeconds;
                    case AimOpticalSightMarker_FieldIndex.BeamArtObject:
                        return BeamArtObject;
                    case AimOpticalSightMarker_FieldIndex.DotArtObject:
                        return DotArtObject;
                    case AimOpticalSightMarker_FieldIndex.Unknown3:
                        return Unknown3;
                    case AimOpticalSightMarker_FieldIndex.Unknown4:
                        return Unknown4;
                    case AimOpticalSightMarker_FieldIndex.ShowBeamAtHip:
                        return ShowBeamAtHip;
                    case AimOpticalSightMarker_FieldIndex.Unknown5:
                        return Unknown5;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AimOpticalSightMarker_FieldIndex enu = (AimOpticalSightMarker_FieldIndex)index;
                switch (enu)
                {
                    case AimOpticalSightMarker_FieldIndex.HideBeamByDefault:
                        this.HideBeamByDefault = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.UnknownOldField:
                        this.UnknownOldField = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.NodeName:
                        this.NodeName = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.BeamReactivationDelayAfterEquipOrReloadSeconds:
                        this.BeamReactivationDelayAfterEquipOrReloadSeconds = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.BeamDeactivationDelayAfterReloadSeconds:
                        this.BeamDeactivationDelayAfterReloadSeconds = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.Light:
                        this.Light = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.Unknown1:
                        this.Unknown1 = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.BeamReactivationDelayAfterFiringSeconds:
                        this.BeamReactivationDelayAfterFiringSeconds = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.BeamArtObject:
                        this.BeamArtObject = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.DotArtObject:
                        this.DotArtObject = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.Unknown4:
                        this.Unknown4 = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.ShowBeamAtHip:
                        this.ShowBeamAtHip = ex;
                        break;
                    case AimOpticalSightMarker_FieldIndex.Unknown5:
                        this.Unknown5 = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AimOpticalSightMarker_FieldIndex enu = (AimOpticalSightMarker_FieldIndex)index;
                switch (enu)
                {
                    case AimOpticalSightMarker_FieldIndex.HideBeamByDefault:
                        this.HideBeamByDefault = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.UnknownOldField:
                        this.UnknownOldField = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.NodeName:
                        this.NodeName = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.BeamReactivationDelayAfterEquipOrReloadSeconds:
                        this.BeamReactivationDelayAfterEquipOrReloadSeconds = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.BeamDeactivationDelayAfterReloadSeconds:
                        this.BeamDeactivationDelayAfterReloadSeconds = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.Light:
                        this.Light = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.Unknown1:
                        this.Unknown1 = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.BeamReactivationDelayAfterFiringSeconds:
                        this.BeamReactivationDelayAfterFiringSeconds = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.BeamArtObject:
                        this.BeamArtObject = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.DotArtObject:
                        this.DotArtObject = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.Unknown4:
                        this.Unknown4 = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.ShowBeamAtHip:
                        this.ShowBeamAtHip = (Exception?)obj;
                        break;
                    case AimOpticalSightMarker_FieldIndex.Unknown5:
                        this.Unknown5 = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (HideBeamByDefault != null) return true;
                if (UnknownOldField != null) return true;
                if (NodeName != null) return true;
                if (BeamReactivationDelayAfterEquipOrReloadSeconds != null) return true;
                if (BeamDeactivationDelayAfterReloadSeconds != null) return true;
                if (Light != null) return true;
                if (Unknown1 != null) return true;
                if (Unknown2 != null) return true;
                if (BeamReactivationDelayAfterFiringSeconds != null) return true;
                if (BeamArtObject != null) return true;
                if (DotArtObject != null) return true;
                if (Unknown3 != null) return true;
                if (Unknown4 != null) return true;
                if (ShowBeamAtHip != null) return true;
                if (Unknown5 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(HideBeamByDefault, "HideBeamByDefault");
                }
                {
                    sb.AppendItem(UnknownOldField, "UnknownOldField");
                }
                {
                    sb.AppendItem(NodeName, "NodeName");
                }
                {
                    sb.AppendItem(BeamReactivationDelayAfterEquipOrReloadSeconds, "BeamReactivationDelayAfterEquipOrReloadSeconds");
                }
                {
                    sb.AppendItem(BeamDeactivationDelayAfterReloadSeconds, "BeamDeactivationDelayAfterReloadSeconds");
                }
                {
                    sb.AppendItem(Light, "Light");
                }
                {
                    sb.AppendItem(Unknown1, "Unknown1");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
                {
                    sb.AppendItem(BeamReactivationDelayAfterFiringSeconds, "BeamReactivationDelayAfterFiringSeconds");
                }
                {
                    sb.AppendItem(BeamArtObject, "BeamArtObject");
                }
                {
                    sb.AppendItem(DotArtObject, "DotArtObject");
                }
                {
                    sb.AppendItem(Unknown3, "Unknown3");
                }
                {
                    sb.AppendItem(Unknown4, "Unknown4");
                }
                {
                    sb.AppendItem(ShowBeamAtHip, "ShowBeamAtHip");
                }
                {
                    sb.AppendItem(Unknown5, "Unknown5");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.HideBeamByDefault = this.HideBeamByDefault.Combine(rhs.HideBeamByDefault);
                ret.UnknownOldField = this.UnknownOldField.Combine(rhs.UnknownOldField);
                ret.NodeName = this.NodeName.Combine(rhs.NodeName);
                ret.BeamReactivationDelayAfterEquipOrReloadSeconds = this.BeamReactivationDelayAfterEquipOrReloadSeconds.Combine(rhs.BeamReactivationDelayAfterEquipOrReloadSeconds);
                ret.BeamDeactivationDelayAfterReloadSeconds = this.BeamDeactivationDelayAfterReloadSeconds.Combine(rhs.BeamDeactivationDelayAfterReloadSeconds);
                ret.Light = this.Light.Combine(rhs.Light);
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.BeamReactivationDelayAfterFiringSeconds = this.BeamReactivationDelayAfterFiringSeconds.Combine(rhs.BeamReactivationDelayAfterFiringSeconds);
                ret.BeamArtObject = this.BeamArtObject.Combine(rhs.BeamArtObject);
                ret.DotArtObject = this.DotArtObject.Combine(rhs.DotArtObject);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.Unknown4 = this.Unknown4.Combine(rhs.Unknown4);
                ret.ShowBeamAtHip = this.ShowBeamAtHip.Combine(rhs.ShowBeamAtHip);
                ret.Unknown5 = this.Unknown5.Combine(rhs.Unknown5);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool HideBeamByDefault;
            public bool UnknownOldField;
            public bool NodeName;
            public bool BeamReactivationDelayAfterEquipOrReloadSeconds;
            public bool BeamDeactivationDelayAfterReloadSeconds;
            public bool Light;
            public bool Unknown1;
            public bool Unknown2;
            public bool BeamReactivationDelayAfterFiringSeconds;
            public bool BeamArtObject;
            public bool DotArtObject;
            public bool Unknown3;
            public bool Unknown4;
            public bool ShowBeamAtHip;
            public bool Unknown5;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.HideBeamByDefault = defaultOn;
                this.UnknownOldField = defaultOn;
                this.NodeName = defaultOn;
                this.BeamReactivationDelayAfterEquipOrReloadSeconds = defaultOn;
                this.BeamDeactivationDelayAfterReloadSeconds = defaultOn;
                this.Light = defaultOn;
                this.Unknown1 = defaultOn;
                this.Unknown2 = defaultOn;
                this.BeamReactivationDelayAfterFiringSeconds = defaultOn;
                this.BeamArtObject = defaultOn;
                this.DotArtObject = defaultOn;
                this.Unknown3 = defaultOn;
                this.Unknown4 = defaultOn;
                this.ShowBeamAtHip = defaultOn;
                this.Unknown5 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((HideBeamByDefault, null));
                ret.Add((UnknownOldField, null));
                ret.Add((NodeName, null));
                ret.Add((BeamReactivationDelayAfterEquipOrReloadSeconds, null));
                ret.Add((BeamDeactivationDelayAfterReloadSeconds, null));
                ret.Add((Light, null));
                ret.Add((Unknown1, null));
                ret.Add((Unknown2, null));
                ret.Add((BeamReactivationDelayAfterFiringSeconds, null));
                ret.Add((BeamArtObject, null));
                ret.Add((DotArtObject, null));
                ret.Add((Unknown3, null));
                ret.Add((Unknown4, null));
                ret.Add((ShowBeamAtHip, null));
                ret.Add((Unknown5, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AimOpticalSightMarker_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AimOpticalSightMarkerCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AimOpticalSightMarkerSetterCommon.Instance.RemapLinks(this, mapping);
        public AimOpticalSightMarker(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private AimOpticalSightMarker(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal AimOpticalSightMarker(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public AimOpticalSightMarker(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public AimOpticalSightMarker(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<AimOpticalSightMarker>.ToString(this);
        }

        protected override Type LinkType => typeof(IAimOpticalSightMarker);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAimOpticalSightMarkerGetter rhs) return false;
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAimOpticalSightMarkerGetter? obj)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AimOpticalSightMarkerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AimOpticalSightMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static AimOpticalSightMarker CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new AimOpticalSightMarker();
            ((AimOpticalSightMarkerSetterCommon)((IAimOpticalSightMarkerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AimOpticalSightMarker item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AimOpticalSightMarkerSetterCommon)((IAimOpticalSightMarkerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AimOpticalSightMarker GetNew()
        {
            return new AimOpticalSightMarker();
        }

    }
    #endregion

    #region Interface
    public partial interface IAimOpticalSightMarker :
        IAimOpticalSightMarkerGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IAimOpticalSightMarkerInternal>,
        IStarfieldMajorRecordInternal
    {
        new Boolean HideBeamByDefault { get; set; }
        new UInt32 UnknownOldField { get; set; }
        new String NodeName { get; set; }
        new Single BeamReactivationDelayAfterEquipOrReloadSeconds { get; set; }
        new Single BeamDeactivationDelayAfterReloadSeconds { get; set; }
        new IFormLink<ILightGetter> Light { get; set; }
        new Single Unknown1 { get; set; }
        new Single Unknown2 { get; set; }
        new Single BeamReactivationDelayAfterFiringSeconds { get; set; }
        new IFormLink<IArtObjectGetter> BeamArtObject { get; set; }
        new IFormLink<IArtObjectGetter> DotArtObject { get; set; }
        new Single Unknown3 { get; set; }
        new Boolean Unknown4 { get; set; }
        new Boolean ShowBeamAtHip { get; set; }
        new Boolean Unknown5 { get; set; }
    }

    public partial interface IAimOpticalSightMarkerInternal :
        IStarfieldMajorRecordInternal,
        IAimOpticalSightMarker,
        IAimOpticalSightMarkerGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.AOPS)]
    public partial interface IAimOpticalSightMarkerGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IAimOpticalSightMarkerGetter>,
        IMapsToGetter<IAimOpticalSightMarkerGetter>
    {
        static new ILoquiRegistration StaticRegistration => AimOpticalSightMarker_Registration.Instance;
        Boolean HideBeamByDefault { get; }
        UInt32 UnknownOldField { get; }
        String NodeName { get; }
        Single BeamReactivationDelayAfterEquipOrReloadSeconds { get; }
        Single BeamDeactivationDelayAfterReloadSeconds { get; }
        IFormLinkGetter<ILightGetter> Light { get; }
        Single Unknown1 { get; }
        Single Unknown2 { get; }
        Single BeamReactivationDelayAfterFiringSeconds { get; }
        IFormLinkGetter<IArtObjectGetter> BeamArtObject { get; }
        IFormLinkGetter<IArtObjectGetter> DotArtObject { get; }
        Single Unknown3 { get; }
        Boolean Unknown4 { get; }
        Boolean ShowBeamAtHip { get; }
        Boolean Unknown5 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AimOpticalSightMarkerMixIn
    {
        public static void Clear(this IAimOpticalSightMarkerInternal item)
        {
            ((AimOpticalSightMarkerSetterCommon)((IAimOpticalSightMarkerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AimOpticalSightMarker.Mask<bool> GetEqualsMask(
            this IAimOpticalSightMarkerGetter item,
            IAimOpticalSightMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAimOpticalSightMarkerGetter item,
            string? name = null,
            AimOpticalSightMarker.Mask<bool>? printMask = null)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAimOpticalSightMarkerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AimOpticalSightMarker.Mask<bool>? printMask = null)
        {
            ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAimOpticalSightMarkerGetter item,
            IAimOpticalSightMarkerGetter rhs,
            AimOpticalSightMarker.TranslationMask? equalsMask = null)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAimOpticalSightMarkerInternal lhs,
            IAimOpticalSightMarkerGetter rhs,
            out AimOpticalSightMarker.ErrorMask errorMask,
            AimOpticalSightMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AimOpticalSightMarker.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAimOpticalSightMarkerInternal lhs,
            IAimOpticalSightMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AimOpticalSightMarker DeepCopy(
            this IAimOpticalSightMarkerGetter item,
            AimOpticalSightMarker.TranslationMask? copyMask = null)
        {
            return ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AimOpticalSightMarker DeepCopy(
            this IAimOpticalSightMarkerGetter item,
            out AimOpticalSightMarker.ErrorMask errorMask,
            AimOpticalSightMarker.TranslationMask? copyMask = null)
        {
            return ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AimOpticalSightMarker DeepCopy(
            this IAimOpticalSightMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static AimOpticalSightMarker Duplicate(
            this IAimOpticalSightMarkerGetter item,
            FormKey formKey,
            AimOpticalSightMarker.TranslationMask? copyMask = null)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static AimOpticalSightMarker Duplicate(
            this IAimOpticalSightMarkerGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAimOpticalSightMarkerInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AimOpticalSightMarkerSetterCommon)((IAimOpticalSightMarkerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum AimOpticalSightMarker_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        HideBeamByDefault = 7,
        UnknownOldField = 8,
        NodeName = 9,
        BeamReactivationDelayAfterEquipOrReloadSeconds = 10,
        BeamDeactivationDelayAfterReloadSeconds = 11,
        Light = 12,
        Unknown1 = 13,
        Unknown2 = 14,
        BeamReactivationDelayAfterFiringSeconds = 15,
        BeamArtObject = 16,
        DotArtObject = 17,
        Unknown3 = 18,
        Unknown4 = 19,
        ShowBeamAtHip = 20,
        Unknown5 = 21,
    }
    #endregion

    #region Registration
    internal partial class AimOpticalSightMarker_Registration : ILoquiRegistration
    {
        public static readonly AimOpticalSightMarker_Registration Instance = new AimOpticalSightMarker_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(AimOpticalSightMarker.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AimOpticalSightMarker.ErrorMask);

        public static readonly Type ClassType = typeof(AimOpticalSightMarker);

        public static readonly Type GetterType = typeof(IAimOpticalSightMarkerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAimOpticalSightMarker);

        public static readonly Type? InternalSetterType = typeof(IAimOpticalSightMarkerInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.AimOpticalSightMarker";

        public const string Name = "AimOpticalSightMarker";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.AOPS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.AOPS);
            var all = RecordCollection.Factory(
                RecordTypes.AOPS,
                RecordTypes.ANAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AimOpticalSightMarkerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AimOpticalSightMarkerSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly AimOpticalSightMarkerSetterCommon Instance = new AimOpticalSightMarkerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAimOpticalSightMarkerInternal item)
        {
            ClearPartial();
            item.HideBeamByDefault = default(Boolean);
            item.UnknownOldField = default(UInt32);
            item.NodeName = string.Empty;
            item.BeamReactivationDelayAfterEquipOrReloadSeconds = default(Single);
            item.BeamDeactivationDelayAfterReloadSeconds = default(Single);
            item.Light.Clear();
            item.Unknown1 = default(Single);
            item.Unknown2 = default(Single);
            item.BeamReactivationDelayAfterFiringSeconds = default(Single);
            item.BeamArtObject.Clear();
            item.DotArtObject.Clear();
            item.Unknown3 = default(Single);
            item.Unknown4 = default(Boolean);
            item.ShowBeamAtHip = default(Boolean);
            item.Unknown5 = default(Boolean);
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IAimOpticalSightMarkerInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAimOpticalSightMarkerInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAimOpticalSightMarker obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Light.Relink(mapping);
            obj.BeamArtObject.Relink(mapping);
            obj.DotArtObject.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAimOpticalSightMarkerInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IAimOpticalSightMarkerInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AimOpticalSightMarkerBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AimOpticalSightMarkerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AimOpticalSightMarker)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AimOpticalSightMarker)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class AimOpticalSightMarkerCommon : StarfieldMajorRecordCommon
    {
        public new static readonly AimOpticalSightMarkerCommon Instance = new AimOpticalSightMarkerCommon();

        public AimOpticalSightMarker.Mask<bool> GetEqualsMask(
            IAimOpticalSightMarkerGetter item,
            IAimOpticalSightMarkerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AimOpticalSightMarker.Mask<bool>(false);
            ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAimOpticalSightMarkerGetter item,
            IAimOpticalSightMarkerGetter rhs,
            AimOpticalSightMarker.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.HideBeamByDefault = item.HideBeamByDefault == rhs.HideBeamByDefault;
            ret.UnknownOldField = item.UnknownOldField == rhs.UnknownOldField;
            ret.NodeName = string.Equals(item.NodeName, rhs.NodeName);
            ret.BeamReactivationDelayAfterEquipOrReloadSeconds = item.BeamReactivationDelayAfterEquipOrReloadSeconds.EqualsWithin(rhs.BeamReactivationDelayAfterEquipOrReloadSeconds);
            ret.BeamDeactivationDelayAfterReloadSeconds = item.BeamDeactivationDelayAfterReloadSeconds.EqualsWithin(rhs.BeamDeactivationDelayAfterReloadSeconds);
            ret.Light = item.Light.Equals(rhs.Light);
            ret.Unknown1 = item.Unknown1.EqualsWithin(rhs.Unknown1);
            ret.Unknown2 = item.Unknown2.EqualsWithin(rhs.Unknown2);
            ret.BeamReactivationDelayAfterFiringSeconds = item.BeamReactivationDelayAfterFiringSeconds.EqualsWithin(rhs.BeamReactivationDelayAfterFiringSeconds);
            ret.BeamArtObject = item.BeamArtObject.Equals(rhs.BeamArtObject);
            ret.DotArtObject = item.DotArtObject.Equals(rhs.DotArtObject);
            ret.Unknown3 = item.Unknown3.EqualsWithin(rhs.Unknown3);
            ret.Unknown4 = item.Unknown4 == rhs.Unknown4;
            ret.ShowBeamAtHip = item.ShowBeamAtHip == rhs.ShowBeamAtHip;
            ret.Unknown5 = item.Unknown5 == rhs.Unknown5;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IAimOpticalSightMarkerGetter item,
            string? name = null,
            AimOpticalSightMarker.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAimOpticalSightMarkerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AimOpticalSightMarker.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AimOpticalSightMarker =>");
            }
            else
            {
                sb.AppendLine($"{name} (AimOpticalSightMarker) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAimOpticalSightMarkerGetter item,
            StructuredStringBuilder sb,
            AimOpticalSightMarker.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.HideBeamByDefault ?? true)
            {
                sb.AppendItem(item.HideBeamByDefault, "HideBeamByDefault");
            }
            if (printMask?.UnknownOldField ?? true)
            {
                sb.AppendItem(item.UnknownOldField, "UnknownOldField");
            }
            if (printMask?.NodeName ?? true)
            {
                sb.AppendItem(item.NodeName, "NodeName");
            }
            if (printMask?.BeamReactivationDelayAfterEquipOrReloadSeconds ?? true)
            {
                sb.AppendItem(item.BeamReactivationDelayAfterEquipOrReloadSeconds, "BeamReactivationDelayAfterEquipOrReloadSeconds");
            }
            if (printMask?.BeamDeactivationDelayAfterReloadSeconds ?? true)
            {
                sb.AppendItem(item.BeamDeactivationDelayAfterReloadSeconds, "BeamDeactivationDelayAfterReloadSeconds");
            }
            if (printMask?.Light ?? true)
            {
                sb.AppendItem(item.Light.FormKey, "Light");
            }
            if (printMask?.Unknown1 ?? true)
            {
                sb.AppendItem(item.Unknown1, "Unknown1");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.BeamReactivationDelayAfterFiringSeconds ?? true)
            {
                sb.AppendItem(item.BeamReactivationDelayAfterFiringSeconds, "BeamReactivationDelayAfterFiringSeconds");
            }
            if (printMask?.BeamArtObject ?? true)
            {
                sb.AppendItem(item.BeamArtObject.FormKey, "BeamArtObject");
            }
            if (printMask?.DotArtObject ?? true)
            {
                sb.AppendItem(item.DotArtObject.FormKey, "DotArtObject");
            }
            if (printMask?.Unknown3 ?? true)
            {
                sb.AppendItem(item.Unknown3, "Unknown3");
            }
            if (printMask?.Unknown4 ?? true)
            {
                sb.AppendItem(item.Unknown4, "Unknown4");
            }
            if (printMask?.ShowBeamAtHip ?? true)
            {
                sb.AppendItem(item.ShowBeamAtHip, "ShowBeamAtHip");
            }
            if (printMask?.Unknown5 ?? true)
            {
                sb.AppendItem(item.Unknown5, "Unknown5");
            }
        }
        
        public static AimOpticalSightMarker_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new AimOpticalSightMarker_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AimOpticalSightMarker_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAimOpticalSightMarkerGetter? lhs,
            IAimOpticalSightMarkerGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.HideBeamByDefault) ?? true))
            {
                if (lhs.HideBeamByDefault != rhs.HideBeamByDefault) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.UnknownOldField) ?? true))
            {
                if (lhs.UnknownOldField != rhs.UnknownOldField) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.NodeName) ?? true))
            {
                if (!string.Equals(lhs.NodeName, rhs.NodeName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.BeamReactivationDelayAfterEquipOrReloadSeconds) ?? true))
            {
                if (!lhs.BeamReactivationDelayAfterEquipOrReloadSeconds.EqualsWithin(rhs.BeamReactivationDelayAfterEquipOrReloadSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.BeamDeactivationDelayAfterReloadSeconds) ?? true))
            {
                if (!lhs.BeamDeactivationDelayAfterReloadSeconds.EqualsWithin(rhs.BeamDeactivationDelayAfterReloadSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Light) ?? true))
            {
                if (!lhs.Light.Equals(rhs.Light)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Unknown1) ?? true))
            {
                if (!lhs.Unknown1.EqualsWithin(rhs.Unknown1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Unknown2) ?? true))
            {
                if (!lhs.Unknown2.EqualsWithin(rhs.Unknown2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.BeamReactivationDelayAfterFiringSeconds) ?? true))
            {
                if (!lhs.BeamReactivationDelayAfterFiringSeconds.EqualsWithin(rhs.BeamReactivationDelayAfterFiringSeconds)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.BeamArtObject) ?? true))
            {
                if (!lhs.BeamArtObject.Equals(rhs.BeamArtObject)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.DotArtObject) ?? true))
            {
                if (!lhs.DotArtObject.Equals(rhs.DotArtObject)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Unknown3) ?? true))
            {
                if (!lhs.Unknown3.EqualsWithin(rhs.Unknown3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Unknown4) ?? true))
            {
                if (lhs.Unknown4 != rhs.Unknown4) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.ShowBeamAtHip) ?? true))
            {
                if (lhs.ShowBeamAtHip != rhs.ShowBeamAtHip) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Unknown5) ?? true))
            {
                if (lhs.Unknown5 != rhs.Unknown5) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAimOpticalSightMarkerGetter?)lhs,
                rhs: rhs as IAimOpticalSightMarkerGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAimOpticalSightMarkerGetter?)lhs,
                rhs: rhs as IAimOpticalSightMarkerGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IAimOpticalSightMarkerGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.HideBeamByDefault);
            hash.Add(item.UnknownOldField);
            hash.Add(item.NodeName);
            hash.Add(item.BeamReactivationDelayAfterEquipOrReloadSeconds);
            hash.Add(item.BeamDeactivationDelayAfterReloadSeconds);
            hash.Add(item.Light);
            hash.Add(item.Unknown1);
            hash.Add(item.Unknown2);
            hash.Add(item.BeamReactivationDelayAfterFiringSeconds);
            hash.Add(item.BeamArtObject);
            hash.Add(item.DotArtObject);
            hash.Add(item.Unknown3);
            hash.Add(item.Unknown4);
            hash.Add(item.ShowBeamAtHip);
            hash.Add(item.Unknown5);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IAimOpticalSightMarkerGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAimOpticalSightMarkerGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AimOpticalSightMarker.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAimOpticalSightMarkerGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Light);
            yield return FormLinkInformation.Factory(obj.BeamArtObject);
            yield return FormLinkInformation.Factory(obj.DotArtObject);
            yield break;
        }
        
        #region Duplicate
        public AimOpticalSightMarker Duplicate(
            IAimOpticalSightMarkerGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new AimOpticalSightMarker(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAimOpticalSightMarkerGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAimOpticalSightMarkerGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class AimOpticalSightMarkerSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly AimOpticalSightMarkerSetterTranslationCommon Instance = new AimOpticalSightMarkerSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAimOpticalSightMarkerInternal item,
            IAimOpticalSightMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IAimOpticalSightMarker item,
            IAimOpticalSightMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.HideBeamByDefault) ?? true))
            {
                item.HideBeamByDefault = rhs.HideBeamByDefault;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.UnknownOldField) ?? true))
            {
                item.UnknownOldField = rhs.UnknownOldField;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.NodeName) ?? true))
            {
                item.NodeName = rhs.NodeName;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.BeamReactivationDelayAfterEquipOrReloadSeconds) ?? true))
            {
                item.BeamReactivationDelayAfterEquipOrReloadSeconds = rhs.BeamReactivationDelayAfterEquipOrReloadSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.BeamDeactivationDelayAfterReloadSeconds) ?? true))
            {
                item.BeamDeactivationDelayAfterReloadSeconds = rhs.BeamDeactivationDelayAfterReloadSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Light) ?? true))
            {
                item.Light.SetTo(rhs.Light.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Unknown1) ?? true))
            {
                item.Unknown1 = rhs.Unknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.BeamReactivationDelayAfterFiringSeconds) ?? true))
            {
                item.BeamReactivationDelayAfterFiringSeconds = rhs.BeamReactivationDelayAfterFiringSeconds;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.BeamArtObject) ?? true))
            {
                item.BeamArtObject.SetTo(rhs.BeamArtObject.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.DotArtObject) ?? true))
            {
                item.DotArtObject.SetTo(rhs.DotArtObject.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Unknown4) ?? true))
            {
                item.Unknown4 = rhs.Unknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.ShowBeamAtHip) ?? true))
            {
                item.ShowBeamAtHip = rhs.ShowBeamAtHip;
            }
            if ((copyMask?.GetShouldTranslate((int)AimOpticalSightMarker_FieldIndex.Unknown5) ?? true))
            {
                item.Unknown5 = rhs.Unknown5;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IAimOpticalSightMarker item,
            IAimOpticalSightMarkerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimOpticalSightMarkerInternal)item,
                rhs: (IAimOpticalSightMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimOpticalSightMarker)item,
                rhs: (IAimOpticalSightMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimOpticalSightMarkerInternal)item,
                rhs: (IAimOpticalSightMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAimOpticalSightMarker)item,
                rhs: (IAimOpticalSightMarkerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AimOpticalSightMarker DeepCopy(
            IAimOpticalSightMarkerGetter item,
            AimOpticalSightMarker.TranslationMask? copyMask = null)
        {
            AimOpticalSightMarker ret = (AimOpticalSightMarker)((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).GetNew();
            ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AimOpticalSightMarker DeepCopy(
            IAimOpticalSightMarkerGetter item,
            out AimOpticalSightMarker.ErrorMask errorMask,
            AimOpticalSightMarker.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AimOpticalSightMarker ret = (AimOpticalSightMarker)((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).GetNew();
            ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AimOpticalSightMarker.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AimOpticalSightMarker DeepCopy(
            IAimOpticalSightMarkerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AimOpticalSightMarker ret = (AimOpticalSightMarker)((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)item).CommonInstance()!).GetNew();
            ((AimOpticalSightMarkerSetterTranslationCommon)((IAimOpticalSightMarkerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class AimOpticalSightMarker
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AimOpticalSightMarker_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AimOpticalSightMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AimOpticalSightMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AimOpticalSightMarkerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AimOpticalSightMarkerSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class AimOpticalSightMarkerBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly AimOpticalSightMarkerBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IAimOpticalSightMarkerGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.ANAM)))
            {
                writer.Write(item.HideBeamByDefault);
                if (writer.MetaData.FormVersion!.Value < 522)
                {
                    writer.Write(item.UnknownOldField);
                }
                StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.NodeName,
                    binaryType: StringBinaryType.PrependLengthWithNullIfContent);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BeamReactivationDelayAfterEquipOrReloadSeconds);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BeamDeactivationDelayAfterReloadSeconds);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Light);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Unknown1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Unknown2);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BeamReactivationDelayAfterFiringSeconds);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BeamArtObject);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DotArtObject);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Unknown3);
                writer.Write(item.Unknown4);
                writer.Write(item.ShowBeamAtHip);
                writer.Write(item.Unknown5);
            }
        }

        public void Write(
            MutagenWriter writer,
            IAimOpticalSightMarkerGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.AOPS,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAimOpticalSightMarkerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAimOpticalSightMarkerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAimOpticalSightMarkerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AimOpticalSightMarkerBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly AimOpticalSightMarkerBinaryCreateTranslation Instance = new AimOpticalSightMarkerBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.AOPS;
        public static ParseResult FillBinaryRecordTypes(
            IAimOpticalSightMarkerInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.HideBeamByDefault = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 4) return null;
                    if (frame.MetaData.FormVersion!.Value < 522)
                    {
                        item.UnknownOldField = dataFrame.ReadUInt32();
                    }
                    item.NodeName = StringBinaryTranslation.Instance.Parse(
                        reader: dataFrame,
                        stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                        parseWhole: true);
                    if (dataFrame.Remaining < 4) return null;
                    item.BeamReactivationDelayAfterEquipOrReloadSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BeamDeactivationDelayAfterReloadSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Light.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.Unknown1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Unknown2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BeamReactivationDelayAfterFiringSeconds = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BeamArtObject.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.DotArtObject.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.Unknown3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.Unknown4 = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.ShowBeamAtHip = dataFrame.ReadBoolean();
                    if (dataFrame.Remaining < 1) return null;
                    item.Unknown5 = dataFrame.ReadBoolean();
                    return (int)AimOpticalSightMarker_FieldIndex.Unknown5;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class AimOpticalSightMarkerBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class AimOpticalSightMarkerBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IAimOpticalSightMarkerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AimOpticalSightMarker_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AimOpticalSightMarker_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AimOpticalSightMarkerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AimOpticalSightMarkerSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AimOpticalSightMarkerCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AimOpticalSightMarkerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AimOpticalSightMarkerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IAimOpticalSightMarker);


        private RangeInt32? _ANAMLocation;
        #region HideBeamByDefault
        private int _HideBeamByDefaultLocation => _ANAMLocation!.Value.Min;
        private bool _HideBeamByDefault_IsSet => _ANAMLocation.HasValue;
        public Boolean HideBeamByDefault => _HideBeamByDefault_IsSet ? _recordData.Slice(_HideBeamByDefaultLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region UnknownOldField
        private int _UnknownOldFieldLocation => _ANAMLocation!.Value.Min + 0x1;
        private bool _UnknownOldField_IsSet => _ANAMLocation.HasValue && _package.FormVersion!.FormVersion!.Value < 522;
        public UInt32 UnknownOldField => _UnknownOldField_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_UnknownOldFieldLocation, 4)) : default(UInt32);
        int UnknownOldFieldVersioningOffset => _package.FormVersion!.FormVersion!.Value >= 522 ? -4 : 0;
        #endregion
        #region NodeName
        private int _NodeNameLocation => _ANAMLocation!.Value.Min + UnknownOldFieldVersioningOffset + 0x5;
        private bool _NodeName_IsSet => _ANAMLocation.HasValue;
        public String NodeName => _NodeName_IsSet ? BinaryStringUtility.ParsePrependedString(_recordData.Slice(_NodeNameLocation), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        protected int NodeNameEndingPos;
        #endregion
        #region BeamReactivationDelayAfterEquipOrReloadSeconds
        private int _BeamReactivationDelayAfterEquipOrReloadSecondsLocation => NodeNameEndingPos;
        private bool _BeamReactivationDelayAfterEquipOrReloadSeconds_IsSet => _ANAMLocation.HasValue;
        public Single BeamReactivationDelayAfterEquipOrReloadSeconds => _BeamReactivationDelayAfterEquipOrReloadSeconds_IsSet ? _recordData.Slice(_BeamReactivationDelayAfterEquipOrReloadSecondsLocation, 4).Float() : default(Single);
        #endregion
        #region BeamDeactivationDelayAfterReloadSeconds
        private int _BeamDeactivationDelayAfterReloadSecondsLocation => NodeNameEndingPos + 0x4;
        private bool _BeamDeactivationDelayAfterReloadSeconds_IsSet => _ANAMLocation.HasValue;
        public Single BeamDeactivationDelayAfterReloadSeconds => _BeamDeactivationDelayAfterReloadSeconds_IsSet ? _recordData.Slice(_BeamDeactivationDelayAfterReloadSecondsLocation, 4).Float() : default(Single);
        #endregion
        #region Light
        private int _LightLocation => NodeNameEndingPos + 0x8;
        private bool _Light_IsSet => _ANAMLocation.HasValue;
        public IFormLinkGetter<ILightGetter> Light => _Light_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ILightGetter>(_package, _recordData.Span.Slice(_LightLocation, 0x4), isSet: _Light_IsSet) : FormLink<ILightGetter>.Null;
        #endregion
        #region Unknown1
        private int _Unknown1Location => NodeNameEndingPos + 0xC;
        private bool _Unknown1_IsSet => _ANAMLocation.HasValue;
        public Single Unknown1 => _Unknown1_IsSet ? _recordData.Slice(_Unknown1Location, 4).Float() : default(Single);
        #endregion
        #region Unknown2
        private int _Unknown2Location => NodeNameEndingPos + 0x10;
        private bool _Unknown2_IsSet => _ANAMLocation.HasValue;
        public Single Unknown2 => _Unknown2_IsSet ? _recordData.Slice(_Unknown2Location, 4).Float() : default(Single);
        #endregion
        #region BeamReactivationDelayAfterFiringSeconds
        private int _BeamReactivationDelayAfterFiringSecondsLocation => NodeNameEndingPos + 0x14;
        private bool _BeamReactivationDelayAfterFiringSeconds_IsSet => _ANAMLocation.HasValue;
        public Single BeamReactivationDelayAfterFiringSeconds => _BeamReactivationDelayAfterFiringSeconds_IsSet ? _recordData.Slice(_BeamReactivationDelayAfterFiringSecondsLocation, 4).Float() : default(Single);
        #endregion
        #region BeamArtObject
        private int _BeamArtObjectLocation => NodeNameEndingPos + 0x18;
        private bool _BeamArtObject_IsSet => _ANAMLocation.HasValue;
        public IFormLinkGetter<IArtObjectGetter> BeamArtObject => _BeamArtObject_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IArtObjectGetter>(_package, _recordData.Span.Slice(_BeamArtObjectLocation, 0x4), isSet: _BeamArtObject_IsSet) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region DotArtObject
        private int _DotArtObjectLocation => NodeNameEndingPos + 0x1C;
        private bool _DotArtObject_IsSet => _ANAMLocation.HasValue;
        public IFormLinkGetter<IArtObjectGetter> DotArtObject => _DotArtObject_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IArtObjectGetter>(_package, _recordData.Span.Slice(_DotArtObjectLocation, 0x4), isSet: _DotArtObject_IsSet) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region Unknown3
        private int _Unknown3Location => NodeNameEndingPos + 0x20;
        private bool _Unknown3_IsSet => _ANAMLocation.HasValue;
        public Single Unknown3 => _Unknown3_IsSet ? _recordData.Slice(_Unknown3Location, 4).Float() : default(Single);
        #endregion
        #region Unknown4
        private int _Unknown4Location => NodeNameEndingPos + 0x24;
        private bool _Unknown4_IsSet => _ANAMLocation.HasValue;
        public Boolean Unknown4 => _Unknown4_IsSet ? _recordData.Slice(_Unknown4Location, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region ShowBeamAtHip
        private int _ShowBeamAtHipLocation => NodeNameEndingPos + 0x25;
        private bool _ShowBeamAtHip_IsSet => _ANAMLocation.HasValue;
        public Boolean ShowBeamAtHip => _ShowBeamAtHip_IsSet ? _recordData.Slice(_ShowBeamAtHipLocation, 1)[0] >= 1 : default(Boolean);
        #endregion
        #region Unknown5
        private int _Unknown5Location => NodeNameEndingPos + 0x26;
        private bool _Unknown5_IsSet => _ANAMLocation.HasValue;
        public Boolean Unknown5 => _Unknown5_IsSet ? _recordData.Slice(_Unknown5Location, 1)[0] >= 1 : default(Boolean);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AimOpticalSightMarkerBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IAimOpticalSightMarkerGetter AimOpticalSightMarkerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new AimOpticalSightMarkerBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            ret.NodeNameEndingPos = ret._ANAMLocation!.Value.Min + ret.UnknownOldFieldVersioningOffset + 0x5 + BinaryPrimitives.ReadInt32LittleEndian(ret._recordData.Slice(ret._ANAMLocation!.Value.Min + ret.UnknownOldFieldVersioningOffset + 0x5)) + 4;
            return ret;
        }

        public static IAimOpticalSightMarkerGetter AimOpticalSightMarkerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AimOpticalSightMarkerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ANAM:
                {
                    _ANAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)AimOpticalSightMarker_FieldIndex.Unknown5;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AimOpticalSightMarkerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<AimOpticalSightMarker>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAimOpticalSightMarkerGetter rhs) return false;
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAimOpticalSightMarkerGetter? obj)
        {
            return ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AimOpticalSightMarkerCommon)((IAimOpticalSightMarkerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

