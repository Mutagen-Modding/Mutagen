/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class CrimeValues :
        ICrimeValues,
        IEquatable<ICrimeValuesGetter>,
        ILoquiObjectSetter<CrimeValues>
    {
        #region Ctor
        public CrimeValues()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public CrimeValues.VersioningBreaks Versioning { get; set; } = default(CrimeValues.VersioningBreaks);
        #endregion
        #region Arrest
        public Boolean Arrest { get; set; } = default(Boolean);
        #endregion
        #region AttackOnSight
        public Boolean AttackOnSight { get; set; } = default(Boolean);
        #endregion
        #region Murder
        public UInt16 Murder { get; set; } = default(UInt16);
        #endregion
        #region Assault
        public UInt16 Assault { get; set; } = default(UInt16);
        #endregion
        #region Trespass
        public UInt16 Trespass { get; set; } = default(UInt16);
        #endregion
        #region Pickpocket
        public UInt16 Pickpocket { get; set; } = default(UInt16);
        #endregion
        #region Unknown
        public UInt16 Unknown { get; set; } = default(UInt16);
        #endregion
        #region StealMultiplier
        public Single StealMultiplier { get; set; } = default(Single);
        #endregion
        #region Escape
        public UInt16 Escape { get; set; } = default(UInt16);
        #endregion
        #region Piracy
        public UInt16 Piracy { get; set; } = default(UInt16);
        #endregion
        #region SmuggleMultiplier
        public UInt32 SmuggleMultiplier { get; set; } = default(UInt32);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CrimeValuesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICrimeValuesGetter rhs) return false;
            return ((CrimeValuesCommon)((ICrimeValuesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICrimeValuesGetter? obj)
        {
            return ((CrimeValuesCommon)((ICrimeValuesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CrimeValuesCommon)((ICrimeValuesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.Arrest = initialValue;
                this.AttackOnSight = initialValue;
                this.Murder = initialValue;
                this.Assault = initialValue;
                this.Trespass = initialValue;
                this.Pickpocket = initialValue;
                this.Unknown = initialValue;
                this.StealMultiplier = initialValue;
                this.Escape = initialValue;
                this.Piracy = initialValue;
                this.SmuggleMultiplier = initialValue;
            }

            public Mask(
                TItem Versioning,
                TItem Arrest,
                TItem AttackOnSight,
                TItem Murder,
                TItem Assault,
                TItem Trespass,
                TItem Pickpocket,
                TItem Unknown,
                TItem StealMultiplier,
                TItem Escape,
                TItem Piracy,
                TItem SmuggleMultiplier)
            {
                this.Versioning = Versioning;
                this.Arrest = Arrest;
                this.AttackOnSight = AttackOnSight;
                this.Murder = Murder;
                this.Assault = Assault;
                this.Trespass = Trespass;
                this.Pickpocket = Pickpocket;
                this.Unknown = Unknown;
                this.StealMultiplier = StealMultiplier;
                this.Escape = Escape;
                this.Piracy = Piracy;
                this.SmuggleMultiplier = SmuggleMultiplier;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public TItem Arrest;
            public TItem AttackOnSight;
            public TItem Murder;
            public TItem Assault;
            public TItem Trespass;
            public TItem Pickpocket;
            public TItem Unknown;
            public TItem StealMultiplier;
            public TItem Escape;
            public TItem Piracy;
            public TItem SmuggleMultiplier;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.Arrest, rhs.Arrest)) return false;
                if (!object.Equals(this.AttackOnSight, rhs.AttackOnSight)) return false;
                if (!object.Equals(this.Murder, rhs.Murder)) return false;
                if (!object.Equals(this.Assault, rhs.Assault)) return false;
                if (!object.Equals(this.Trespass, rhs.Trespass)) return false;
                if (!object.Equals(this.Pickpocket, rhs.Pickpocket)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.StealMultiplier, rhs.StealMultiplier)) return false;
                if (!object.Equals(this.Escape, rhs.Escape)) return false;
                if (!object.Equals(this.Piracy, rhs.Piracy)) return false;
                if (!object.Equals(this.SmuggleMultiplier, rhs.SmuggleMultiplier)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.Arrest);
                hash.Add(this.AttackOnSight);
                hash.Add(this.Murder);
                hash.Add(this.Assault);
                hash.Add(this.Trespass);
                hash.Add(this.Pickpocket);
                hash.Add(this.Unknown);
                hash.Add(this.StealMultiplier);
                hash.Add(this.Escape);
                hash.Add(this.Piracy);
                hash.Add(this.SmuggleMultiplier);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (!eval(this.Arrest)) return false;
                if (!eval(this.AttackOnSight)) return false;
                if (!eval(this.Murder)) return false;
                if (!eval(this.Assault)) return false;
                if (!eval(this.Trespass)) return false;
                if (!eval(this.Pickpocket)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.StealMultiplier)) return false;
                if (!eval(this.Escape)) return false;
                if (!eval(this.Piracy)) return false;
                if (!eval(this.SmuggleMultiplier)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (eval(this.Arrest)) return true;
                if (eval(this.AttackOnSight)) return true;
                if (eval(this.Murder)) return true;
                if (eval(this.Assault)) return true;
                if (eval(this.Trespass)) return true;
                if (eval(this.Pickpocket)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.StealMultiplier)) return true;
                if (eval(this.Escape)) return true;
                if (eval(this.Piracy)) return true;
                if (eval(this.SmuggleMultiplier)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CrimeValues.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                obj.Arrest = eval(this.Arrest);
                obj.AttackOnSight = eval(this.AttackOnSight);
                obj.Murder = eval(this.Murder);
                obj.Assault = eval(this.Assault);
                obj.Trespass = eval(this.Trespass);
                obj.Pickpocket = eval(this.Pickpocket);
                obj.Unknown = eval(this.Unknown);
                obj.StealMultiplier = eval(this.StealMultiplier);
                obj.Escape = eval(this.Escape);
                obj.Piracy = eval(this.Piracy);
                obj.SmuggleMultiplier = eval(this.SmuggleMultiplier);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CrimeValues.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CrimeValues.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CrimeValues.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Versioning ?? true)
                    {
                        sb.AppendItem(Versioning, "Versioning");
                    }
                    if (printMask?.Arrest ?? true)
                    {
                        sb.AppendItem(Arrest, "Arrest");
                    }
                    if (printMask?.AttackOnSight ?? true)
                    {
                        sb.AppendItem(AttackOnSight, "AttackOnSight");
                    }
                    if (printMask?.Murder ?? true)
                    {
                        sb.AppendItem(Murder, "Murder");
                    }
                    if (printMask?.Assault ?? true)
                    {
                        sb.AppendItem(Assault, "Assault");
                    }
                    if (printMask?.Trespass ?? true)
                    {
                        sb.AppendItem(Trespass, "Trespass");
                    }
                    if (printMask?.Pickpocket ?? true)
                    {
                        sb.AppendItem(Pickpocket, "Pickpocket");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.StealMultiplier ?? true)
                    {
                        sb.AppendItem(StealMultiplier, "StealMultiplier");
                    }
                    if (printMask?.Escape ?? true)
                    {
                        sb.AppendItem(Escape, "Escape");
                    }
                    if (printMask?.Piracy ?? true)
                    {
                        sb.AppendItem(Piracy, "Piracy");
                    }
                    if (printMask?.SmuggleMultiplier ?? true)
                    {
                        sb.AppendItem(SmuggleMultiplier, "SmuggleMultiplier");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public Exception? Arrest;
            public Exception? AttackOnSight;
            public Exception? Murder;
            public Exception? Assault;
            public Exception? Trespass;
            public Exception? Pickpocket;
            public Exception? Unknown;
            public Exception? StealMultiplier;
            public Exception? Escape;
            public Exception? Piracy;
            public Exception? SmuggleMultiplier;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CrimeValues_FieldIndex enu = (CrimeValues_FieldIndex)index;
                switch (enu)
                {
                    case CrimeValues_FieldIndex.Versioning:
                        return Versioning;
                    case CrimeValues_FieldIndex.Arrest:
                        return Arrest;
                    case CrimeValues_FieldIndex.AttackOnSight:
                        return AttackOnSight;
                    case CrimeValues_FieldIndex.Murder:
                        return Murder;
                    case CrimeValues_FieldIndex.Assault:
                        return Assault;
                    case CrimeValues_FieldIndex.Trespass:
                        return Trespass;
                    case CrimeValues_FieldIndex.Pickpocket:
                        return Pickpocket;
                    case CrimeValues_FieldIndex.Unknown:
                        return Unknown;
                    case CrimeValues_FieldIndex.StealMultiplier:
                        return StealMultiplier;
                    case CrimeValues_FieldIndex.Escape:
                        return Escape;
                    case CrimeValues_FieldIndex.Piracy:
                        return Piracy;
                    case CrimeValues_FieldIndex.SmuggleMultiplier:
                        return SmuggleMultiplier;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CrimeValues_FieldIndex enu = (CrimeValues_FieldIndex)index;
                switch (enu)
                {
                    case CrimeValues_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case CrimeValues_FieldIndex.Arrest:
                        this.Arrest = ex;
                        break;
                    case CrimeValues_FieldIndex.AttackOnSight:
                        this.AttackOnSight = ex;
                        break;
                    case CrimeValues_FieldIndex.Murder:
                        this.Murder = ex;
                        break;
                    case CrimeValues_FieldIndex.Assault:
                        this.Assault = ex;
                        break;
                    case CrimeValues_FieldIndex.Trespass:
                        this.Trespass = ex;
                        break;
                    case CrimeValues_FieldIndex.Pickpocket:
                        this.Pickpocket = ex;
                        break;
                    case CrimeValues_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case CrimeValues_FieldIndex.StealMultiplier:
                        this.StealMultiplier = ex;
                        break;
                    case CrimeValues_FieldIndex.Escape:
                        this.Escape = ex;
                        break;
                    case CrimeValues_FieldIndex.Piracy:
                        this.Piracy = ex;
                        break;
                    case CrimeValues_FieldIndex.SmuggleMultiplier:
                        this.SmuggleMultiplier = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CrimeValues_FieldIndex enu = (CrimeValues_FieldIndex)index;
                switch (enu)
                {
                    case CrimeValues_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Arrest:
                        this.Arrest = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.AttackOnSight:
                        this.AttackOnSight = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Murder:
                        this.Murder = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Assault:
                        this.Assault = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Trespass:
                        this.Trespass = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Pickpocket:
                        this.Pickpocket = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.StealMultiplier:
                        this.StealMultiplier = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Escape:
                        this.Escape = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.Piracy:
                        this.Piracy = (Exception?)obj;
                        break;
                    case CrimeValues_FieldIndex.SmuggleMultiplier:
                        this.SmuggleMultiplier = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (Arrest != null) return true;
                if (AttackOnSight != null) return true;
                if (Murder != null) return true;
                if (Assault != null) return true;
                if (Trespass != null) return true;
                if (Pickpocket != null) return true;
                if (Unknown != null) return true;
                if (StealMultiplier != null) return true;
                if (Escape != null) return true;
                if (Piracy != null) return true;
                if (SmuggleMultiplier != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Versioning, "Versioning");
                }
                {
                    sb.AppendItem(Arrest, "Arrest");
                }
                {
                    sb.AppendItem(AttackOnSight, "AttackOnSight");
                }
                {
                    sb.AppendItem(Murder, "Murder");
                }
                {
                    sb.AppendItem(Assault, "Assault");
                }
                {
                    sb.AppendItem(Trespass, "Trespass");
                }
                {
                    sb.AppendItem(Pickpocket, "Pickpocket");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(StealMultiplier, "StealMultiplier");
                }
                {
                    sb.AppendItem(Escape, "Escape");
                }
                {
                    sb.AppendItem(Piracy, "Piracy");
                }
                {
                    sb.AppendItem(SmuggleMultiplier, "SmuggleMultiplier");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.Arrest = this.Arrest.Combine(rhs.Arrest);
                ret.AttackOnSight = this.AttackOnSight.Combine(rhs.AttackOnSight);
                ret.Murder = this.Murder.Combine(rhs.Murder);
                ret.Assault = this.Assault.Combine(rhs.Assault);
                ret.Trespass = this.Trespass.Combine(rhs.Trespass);
                ret.Pickpocket = this.Pickpocket.Combine(rhs.Pickpocket);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.StealMultiplier = this.StealMultiplier.Combine(rhs.StealMultiplier);
                ret.Escape = this.Escape.Combine(rhs.Escape);
                ret.Piracy = this.Piracy.Combine(rhs.Piracy);
                ret.SmuggleMultiplier = this.SmuggleMultiplier.Combine(rhs.SmuggleMultiplier);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool Arrest;
            public bool AttackOnSight;
            public bool Murder;
            public bool Assault;
            public bool Trespass;
            public bool Pickpocket;
            public bool Unknown;
            public bool StealMultiplier;
            public bool Escape;
            public bool Piracy;
            public bool SmuggleMultiplier;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.Arrest = defaultOn;
                this.AttackOnSight = defaultOn;
                this.Murder = defaultOn;
                this.Assault = defaultOn;
                this.Trespass = defaultOn;
                this.Pickpocket = defaultOn;
                this.Unknown = defaultOn;
                this.StealMultiplier = defaultOn;
                this.Escape = defaultOn;
                this.Piracy = defaultOn;
                this.SmuggleMultiplier = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((Arrest, null));
                ret.Add((AttackOnSight, null));
                ret.Add((Murder, null));
                ret.Add((Assault, null));
                ret.Add((Trespass, null));
                ret.Add((Pickpocket, null));
                ret.Add((Unknown, null));
                ret.Add((StealMultiplier, null));
                ret.Add((Escape, null));
                ret.Add((Piracy, null));
                ret.Add((SmuggleMultiplier, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CrimeValuesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CrimeValuesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CrimeValues CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CrimeValues();
            ((CrimeValuesSetterCommon)((ICrimeValuesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CrimeValues item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CrimeValuesSetterCommon)((ICrimeValuesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CrimeValues GetNew()
        {
            return new CrimeValues();
        }

    }
    #endregion

    #region Interface
    public partial interface ICrimeValues :
        ICrimeValuesGetter,
        ILoquiObjectSetter<ICrimeValues>
    {
        new CrimeValues.VersioningBreaks Versioning { get; set; }
        new Boolean Arrest { get; set; }
        new Boolean AttackOnSight { get; set; }
        new UInt16 Murder { get; set; }
        new UInt16 Assault { get; set; }
        new UInt16 Trespass { get; set; }
        new UInt16 Pickpocket { get; set; }
        new UInt16 Unknown { get; set; }
        new Single StealMultiplier { get; set; }
        new UInt16 Escape { get; set; }
        new UInt16 Piracy { get; set; }
        new UInt32 SmuggleMultiplier { get; set; }
    }

    public partial interface ICrimeValuesGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ICrimeValuesGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CrimeValues_Registration.Instance;
        CrimeValues.VersioningBreaks Versioning { get; }
        Boolean Arrest { get; }
        Boolean AttackOnSight { get; }
        UInt16 Murder { get; }
        UInt16 Assault { get; }
        UInt16 Trespass { get; }
        UInt16 Pickpocket { get; }
        UInt16 Unknown { get; }
        Single StealMultiplier { get; }
        UInt16 Escape { get; }
        UInt16 Piracy { get; }
        UInt32 SmuggleMultiplier { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CrimeValuesMixIn
    {
        public static void Clear(this ICrimeValues item)
        {
            ((CrimeValuesSetterCommon)((ICrimeValuesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CrimeValues.Mask<bool> GetEqualsMask(
            this ICrimeValuesGetter item,
            ICrimeValuesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICrimeValuesGetter item,
            string? name = null,
            CrimeValues.Mask<bool>? printMask = null)
        {
            return ((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICrimeValuesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CrimeValues.Mask<bool>? printMask = null)
        {
            ((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICrimeValuesGetter item,
            ICrimeValuesGetter rhs,
            CrimeValues.TranslationMask? equalsMask = null)
        {
            return ((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICrimeValues lhs,
            ICrimeValuesGetter rhs)
        {
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICrimeValues lhs,
            ICrimeValuesGetter rhs,
            CrimeValues.TranslationMask? copyMask = null)
        {
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICrimeValues lhs,
            ICrimeValuesGetter rhs,
            out CrimeValues.ErrorMask errorMask,
            CrimeValues.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CrimeValues.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICrimeValues lhs,
            ICrimeValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CrimeValues DeepCopy(
            this ICrimeValuesGetter item,
            CrimeValues.TranslationMask? copyMask = null)
        {
            return ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CrimeValues DeepCopy(
            this ICrimeValuesGetter item,
            out CrimeValues.ErrorMask errorMask,
            CrimeValues.TranslationMask? copyMask = null)
        {
            return ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CrimeValues DeepCopy(
            this ICrimeValuesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICrimeValues item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CrimeValuesSetterCommon)((ICrimeValuesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum CrimeValues_FieldIndex
    {
        Versioning = 0,
        Arrest = 1,
        AttackOnSight = 2,
        Murder = 3,
        Assault = 4,
        Trespass = 5,
        Pickpocket = 6,
        Unknown = 7,
        StealMultiplier = 8,
        Escape = 9,
        Piracy = 10,
        SmuggleMultiplier = 11,
    }
    #endregion

    #region Registration
    internal partial class CrimeValues_Registration : ILoquiRegistration
    {
        public static readonly CrimeValues_Registration Instance = new CrimeValues_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(CrimeValues.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CrimeValues.ErrorMask);

        public static readonly Type ClassType = typeof(CrimeValues);

        public static readonly Type GetterType = typeof(ICrimeValuesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICrimeValues);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.CrimeValues";

        public const string Name = "CrimeValues";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CRVA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.CRVA);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CrimeValuesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CrimeValuesSetterCommon
    {
        public static readonly CrimeValuesSetterCommon Instance = new CrimeValuesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICrimeValues item)
        {
            ClearPartial();
            item.Versioning = default(CrimeValues.VersioningBreaks);
            item.Arrest = default(Boolean);
            item.AttackOnSight = default(Boolean);
            item.Murder = default(UInt16);
            item.Assault = default(UInt16);
            item.Trespass = default(UInt16);
            item.Pickpocket = default(UInt16);
            item.Unknown = default(UInt16);
            item.StealMultiplier = default(Single);
            item.Escape = default(UInt16);
            item.Piracy = default(UInt16);
            item.SmuggleMultiplier = default(UInt32);
        }
        
        #region Mutagen
        public void RemapLinks(ICrimeValues obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICrimeValues item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.CRVA),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CrimeValuesBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class CrimeValuesCommon
    {
        public static readonly CrimeValuesCommon Instance = new CrimeValuesCommon();

        public CrimeValues.Mask<bool> GetEqualsMask(
            ICrimeValuesGetter item,
            ICrimeValuesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CrimeValues.Mask<bool>(false);
            ((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICrimeValuesGetter item,
            ICrimeValuesGetter rhs,
            CrimeValues.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.Arrest = item.Arrest == rhs.Arrest;
            ret.AttackOnSight = item.AttackOnSight == rhs.AttackOnSight;
            ret.Murder = item.Murder == rhs.Murder;
            ret.Assault = item.Assault == rhs.Assault;
            ret.Trespass = item.Trespass == rhs.Trespass;
            ret.Pickpocket = item.Pickpocket == rhs.Pickpocket;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.StealMultiplier = item.StealMultiplier.EqualsWithin(rhs.StealMultiplier);
            ret.Escape = item.Escape == rhs.Escape;
            ret.Piracy = item.Piracy == rhs.Piracy;
            ret.SmuggleMultiplier = item.SmuggleMultiplier == rhs.SmuggleMultiplier;
        }
        
        public string Print(
            ICrimeValuesGetter item,
            string? name = null,
            CrimeValues.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICrimeValuesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CrimeValues.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CrimeValues =>");
            }
            else
            {
                sb.AppendLine($"{name} (CrimeValues) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICrimeValuesGetter item,
            StructuredStringBuilder sb,
            CrimeValues.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                sb.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.Arrest ?? true)
            {
                sb.AppendItem(item.Arrest, "Arrest");
            }
            if (printMask?.AttackOnSight ?? true)
            {
                sb.AppendItem(item.AttackOnSight, "AttackOnSight");
            }
            if (printMask?.Murder ?? true)
            {
                sb.AppendItem(item.Murder, "Murder");
            }
            if (printMask?.Assault ?? true)
            {
                sb.AppendItem(item.Assault, "Assault");
            }
            if (printMask?.Trespass ?? true)
            {
                sb.AppendItem(item.Trespass, "Trespass");
            }
            if (printMask?.Pickpocket ?? true)
            {
                sb.AppendItem(item.Pickpocket, "Pickpocket");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.StealMultiplier ?? true)
            {
                sb.AppendItem(item.StealMultiplier, "StealMultiplier");
            }
            if (printMask?.Escape ?? true)
            {
                sb.AppendItem(item.Escape, "Escape");
            }
            if (printMask?.Piracy ?? true)
            {
                sb.AppendItem(item.Piracy, "Piracy");
            }
            if (printMask?.SmuggleMultiplier ?? true)
            {
                sb.AppendItem(item.SmuggleMultiplier, "SmuggleMultiplier");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICrimeValuesGetter? lhs,
            ICrimeValuesGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Versioning) ?? true))
            {
                if (lhs.Versioning != rhs.Versioning) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Arrest) ?? true))
            {
                if (lhs.Arrest != rhs.Arrest) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.AttackOnSight) ?? true))
            {
                if (lhs.AttackOnSight != rhs.AttackOnSight) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Murder) ?? true))
            {
                if (lhs.Murder != rhs.Murder) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Assault) ?? true))
            {
                if (lhs.Assault != rhs.Assault) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Trespass) ?? true))
            {
                if (lhs.Trespass != rhs.Trespass) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Pickpocket) ?? true))
            {
                if (lhs.Pickpocket != rhs.Pickpocket) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.StealMultiplier) ?? true))
            {
                if (!lhs.StealMultiplier.EqualsWithin(rhs.StealMultiplier)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Escape) ?? true))
            {
                if (lhs.Escape != rhs.Escape) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Piracy) ?? true))
            {
                if (lhs.Piracy != rhs.Piracy) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.SmuggleMultiplier) ?? true))
            {
                if (lhs.SmuggleMultiplier != rhs.SmuggleMultiplier) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICrimeValuesGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.Arrest);
            hash.Add(item.AttackOnSight);
            hash.Add(item.Murder);
            hash.Add(item.Assault);
            hash.Add(item.Trespass);
            hash.Add(item.Pickpocket);
            hash.Add(item.Unknown);
            hash.Add(item.StealMultiplier);
            hash.Add(item.Escape);
            hash.Add(item.Piracy);
            hash.Add(item.SmuggleMultiplier);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CrimeValues.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICrimeValuesGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class CrimeValuesSetterTranslationCommon
    {
        public static readonly CrimeValuesSetterTranslationCommon Instance = new CrimeValuesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICrimeValues item,
            ICrimeValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Arrest) ?? true))
            {
                item.Arrest = rhs.Arrest;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.AttackOnSight) ?? true))
            {
                item.AttackOnSight = rhs.AttackOnSight;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Murder) ?? true))
            {
                item.Murder = rhs.Murder;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Assault) ?? true))
            {
                item.Assault = rhs.Assault;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Trespass) ?? true))
            {
                item.Trespass = rhs.Trespass;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Pickpocket) ?? true))
            {
                item.Pickpocket = rhs.Pickpocket;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.StealMultiplier) ?? true))
            {
                item.StealMultiplier = rhs.StealMultiplier;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Escape) ?? true))
            {
                item.Escape = rhs.Escape;
            }
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.Piracy) ?? true))
            {
                item.Piracy = rhs.Piracy;
            }
            if (rhs.Versioning.HasFlag(CrimeValues.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)CrimeValues_FieldIndex.SmuggleMultiplier) ?? true))
            {
                item.SmuggleMultiplier = rhs.SmuggleMultiplier;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICrimeValues item,
            ICrimeValuesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public CrimeValues DeepCopy(
            ICrimeValuesGetter item,
            CrimeValues.TranslationMask? copyMask = null)
        {
            CrimeValues ret = (CrimeValues)((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).GetNew();
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CrimeValues DeepCopy(
            ICrimeValuesGetter item,
            out CrimeValues.ErrorMask errorMask,
            CrimeValues.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CrimeValues ret = (CrimeValues)((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).GetNew();
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CrimeValues.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CrimeValues DeepCopy(
            ICrimeValuesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CrimeValues ret = (CrimeValues)((CrimeValuesCommon)((ICrimeValuesGetter)item).CommonInstance()!).GetNew();
            ((CrimeValuesSetterTranslationCommon)((ICrimeValuesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class CrimeValues
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CrimeValues_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CrimeValues_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CrimeValuesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CrimeValuesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CrimeValuesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICrimeValuesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICrimeValuesGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICrimeValuesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class CrimeValuesBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly CrimeValuesBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ICrimeValuesGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Arrest);
            writer.Write(item.AttackOnSight);
            writer.Write(item.Murder);
            writer.Write(item.Assault);
            writer.Write(item.Trespass);
            writer.Write(item.Pickpocket);
            writer.Write(item.Unknown);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StealMultiplier);
            writer.Write(item.Escape);
            writer.Write(item.Piracy);
            if (!item.Versioning.HasFlag(CrimeValues.VersioningBreaks.Break0))
            {
                writer.Write(item.SmuggleMultiplier);
            }
        }

        public void Write(
            MutagenWriter writer,
            ICrimeValuesGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.CRVA),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICrimeValuesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CrimeValuesBinaryCreateTranslation
    {
        public static readonly CrimeValuesBinaryCreateTranslation Instance = new CrimeValuesBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICrimeValues item,
            MutagenFrame frame)
        {
            item.Arrest = frame.ReadBoolean();
            item.AttackOnSight = frame.ReadBoolean();
            item.Murder = frame.ReadUInt16();
            item.Assault = frame.ReadUInt16();
            item.Trespass = frame.ReadUInt16();
            item.Pickpocket = frame.ReadUInt16();
            item.Unknown = frame.ReadUInt16();
            item.StealMultiplier = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Escape = frame.ReadUInt16();
            item.Piracy = frame.ReadUInt16();
            if (frame.Complete)
            {
                item.Versioning |= CrimeValues.VersioningBreaks.Break0;
                return;
            }
            item.SmuggleMultiplier = frame.ReadUInt32();
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class CrimeValuesBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICrimeValuesGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CrimeValuesBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class CrimeValuesBinaryOverlay :
        PluginBinaryOverlay,
        ICrimeValuesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CrimeValues_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CrimeValues_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CrimeValuesCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CrimeValuesSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICrimeValuesGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICrimeValuesGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICrimeValuesGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CrimeValuesBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CrimeValuesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public CrimeValues.VersioningBreaks Versioning { get; private set; }
        public Boolean Arrest => _structData.Slice(0x0, 0x1)[0] >= 1;
        public Boolean AttackOnSight => _structData.Slice(0x1, 0x1)[0] >= 1;
        public UInt16 Murder => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x2, 0x2));
        public UInt16 Assault => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x4, 0x2));
        public UInt16 Trespass => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x6, 0x2));
        public UInt16 Pickpocket => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x8, 0x2));
        public UInt16 Unknown => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0xA, 0x2));
        public Single StealMultiplier => _structData.Slice(0xC, 0x4).Float();
        public UInt16 Escape => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x10, 0x2));
        public UInt16 Piracy => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x12, 0x2));
        public UInt32 SmuggleMultiplier => _structData.Length <= 0x14 ? default : BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x14, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CrimeValuesBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICrimeValuesGetter CrimeValuesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x18,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new CrimeValuesBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            if (ret._structData.Length <= 0x14)
            {
                ret.Versioning |= CrimeValues.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ICrimeValuesGetter CrimeValuesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CrimeValuesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CrimeValuesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICrimeValuesGetter rhs) return false;
            return ((CrimeValuesCommon)((ICrimeValuesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICrimeValuesGetter? obj)
        {
            return ((CrimeValuesCommon)((ICrimeValuesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CrimeValuesCommon)((ICrimeValuesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

