/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BoneModifierPoseDeformerData :
        ABoneModifierData,
        IBoneModifierPoseDeformerData,
        IEquatable<IBoneModifierPoseDeformerDataGetter>,
        ILoquiObjectSetter<BoneModifierPoseDeformerData>
    {
        #region Ctor
        public BoneModifierPoseDeformerData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Vector
        public P3Float Vector { get; set; } = default(P3Float);
        #endregion
        #region Position
        public P3Float Position { get; set; } = default(P3Float);
        #endregion
        #region Angle
        public P3Float Angle { get; set; } = default(P3Float);
        #endregion
        #region Scale
        public P3Float Scale { get; set; } = default(P3Float);
        #endregion
        #region InnerRadius
        public Single InnerRadius { get; set; } = default(Single);
        #endregion
        #region OuterRadius
        public Single OuterRadius { get; set; } = default(Single);
        #endregion
        #region Axis
        public Axis Axis { get; set; } = default(Axis);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BoneModifierPoseDeformerDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBoneModifierPoseDeformerDataGetter rhs) return false;
            return ((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBoneModifierPoseDeformerDataGetter? obj)
        {
            return ((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ABoneModifierData.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Vector = initialValue;
                this.Position = initialValue;
                this.Angle = initialValue;
                this.Scale = initialValue;
                this.InnerRadius = initialValue;
                this.OuterRadius = initialValue;
                this.Axis = initialValue;
            }

            public Mask(
                TItem Driver,
                TItem Target,
                TItem MaxAnimationDistance,
                TItem Vector,
                TItem Position,
                TItem Angle,
                TItem Scale,
                TItem InnerRadius,
                TItem OuterRadius,
                TItem Axis)
            : base(
                Driver: Driver,
                Target: Target,
                MaxAnimationDistance: MaxAnimationDistance)
            {
                this.Vector = Vector;
                this.Position = Position;
                this.Angle = Angle;
                this.Scale = Scale;
                this.InnerRadius = InnerRadius;
                this.OuterRadius = OuterRadius;
                this.Axis = Axis;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Vector;
            public TItem Position;
            public TItem Angle;
            public TItem Scale;
            public TItem InnerRadius;
            public TItem OuterRadius;
            public TItem Axis;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Vector, rhs.Vector)) return false;
                if (!object.Equals(this.Position, rhs.Position)) return false;
                if (!object.Equals(this.Angle, rhs.Angle)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.InnerRadius, rhs.InnerRadius)) return false;
                if (!object.Equals(this.OuterRadius, rhs.OuterRadius)) return false;
                if (!object.Equals(this.Axis, rhs.Axis)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Vector);
                hash.Add(this.Position);
                hash.Add(this.Angle);
                hash.Add(this.Scale);
                hash.Add(this.InnerRadius);
                hash.Add(this.OuterRadius);
                hash.Add(this.Axis);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Vector)) return false;
                if (!eval(this.Position)) return false;
                if (!eval(this.Angle)) return false;
                if (!eval(this.Scale)) return false;
                if (!eval(this.InnerRadius)) return false;
                if (!eval(this.OuterRadius)) return false;
                if (!eval(this.Axis)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Vector)) return true;
                if (eval(this.Position)) return true;
                if (eval(this.Angle)) return true;
                if (eval(this.Scale)) return true;
                if (eval(this.InnerRadius)) return true;
                if (eval(this.OuterRadius)) return true;
                if (eval(this.Axis)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BoneModifierPoseDeformerData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Vector = eval(this.Vector);
                obj.Position = eval(this.Position);
                obj.Angle = eval(this.Angle);
                obj.Scale = eval(this.Scale);
                obj.InnerRadius = eval(this.InnerRadius);
                obj.OuterRadius = eval(this.OuterRadius);
                obj.Axis = eval(this.Axis);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BoneModifierPoseDeformerData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BoneModifierPoseDeformerData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BoneModifierPoseDeformerData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Vector ?? true)
                    {
                        sb.AppendItem(Vector, "Vector");
                    }
                    if (printMask?.Position ?? true)
                    {
                        sb.AppendItem(Position, "Position");
                    }
                    if (printMask?.Angle ?? true)
                    {
                        sb.AppendItem(Angle, "Angle");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        sb.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.InnerRadius ?? true)
                    {
                        sb.AppendItem(InnerRadius, "InnerRadius");
                    }
                    if (printMask?.OuterRadius ?? true)
                    {
                        sb.AppendItem(OuterRadius, "OuterRadius");
                    }
                    if (printMask?.Axis ?? true)
                    {
                        sb.AppendItem(Axis, "Axis");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ABoneModifierData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Vector;
            public Exception? Position;
            public Exception? Angle;
            public Exception? Scale;
            public Exception? InnerRadius;
            public Exception? OuterRadius;
            public Exception? Axis;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                BoneModifierPoseDeformerData_FieldIndex enu = (BoneModifierPoseDeformerData_FieldIndex)index;
                switch (enu)
                {
                    case BoneModifierPoseDeformerData_FieldIndex.Vector:
                        return Vector;
                    case BoneModifierPoseDeformerData_FieldIndex.Position:
                        return Position;
                    case BoneModifierPoseDeformerData_FieldIndex.Angle:
                        return Angle;
                    case BoneModifierPoseDeformerData_FieldIndex.Scale:
                        return Scale;
                    case BoneModifierPoseDeformerData_FieldIndex.InnerRadius:
                        return InnerRadius;
                    case BoneModifierPoseDeformerData_FieldIndex.OuterRadius:
                        return OuterRadius;
                    case BoneModifierPoseDeformerData_FieldIndex.Axis:
                        return Axis;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                BoneModifierPoseDeformerData_FieldIndex enu = (BoneModifierPoseDeformerData_FieldIndex)index;
                switch (enu)
                {
                    case BoneModifierPoseDeformerData_FieldIndex.Vector:
                        this.Vector = ex;
                        break;
                    case BoneModifierPoseDeformerData_FieldIndex.Position:
                        this.Position = ex;
                        break;
                    case BoneModifierPoseDeformerData_FieldIndex.Angle:
                        this.Angle = ex;
                        break;
                    case BoneModifierPoseDeformerData_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case BoneModifierPoseDeformerData_FieldIndex.InnerRadius:
                        this.InnerRadius = ex;
                        break;
                    case BoneModifierPoseDeformerData_FieldIndex.OuterRadius:
                        this.OuterRadius = ex;
                        break;
                    case BoneModifierPoseDeformerData_FieldIndex.Axis:
                        this.Axis = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                BoneModifierPoseDeformerData_FieldIndex enu = (BoneModifierPoseDeformerData_FieldIndex)index;
                switch (enu)
                {
                    case BoneModifierPoseDeformerData_FieldIndex.Vector:
                        this.Vector = (Exception?)obj;
                        break;
                    case BoneModifierPoseDeformerData_FieldIndex.Position:
                        this.Position = (Exception?)obj;
                        break;
                    case BoneModifierPoseDeformerData_FieldIndex.Angle:
                        this.Angle = (Exception?)obj;
                        break;
                    case BoneModifierPoseDeformerData_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case BoneModifierPoseDeformerData_FieldIndex.InnerRadius:
                        this.InnerRadius = (Exception?)obj;
                        break;
                    case BoneModifierPoseDeformerData_FieldIndex.OuterRadius:
                        this.OuterRadius = (Exception?)obj;
                        break;
                    case BoneModifierPoseDeformerData_FieldIndex.Axis:
                        this.Axis = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Vector != null) return true;
                if (Position != null) return true;
                if (Angle != null) return true;
                if (Scale != null) return true;
                if (InnerRadius != null) return true;
                if (OuterRadius != null) return true;
                if (Axis != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Vector, "Vector");
                }
                {
                    sb.AppendItem(Position, "Position");
                }
                {
                    sb.AppendItem(Angle, "Angle");
                }
                {
                    sb.AppendItem(Scale, "Scale");
                }
                {
                    sb.AppendItem(InnerRadius, "InnerRadius");
                }
                {
                    sb.AppendItem(OuterRadius, "OuterRadius");
                }
                {
                    sb.AppendItem(Axis, "Axis");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Vector = this.Vector.Combine(rhs.Vector);
                ret.Position = this.Position.Combine(rhs.Position);
                ret.Angle = this.Angle.Combine(rhs.Angle);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.InnerRadius = this.InnerRadius.Combine(rhs.InnerRadius);
                ret.OuterRadius = this.OuterRadius.Combine(rhs.OuterRadius);
                ret.Axis = this.Axis.Combine(rhs.Axis);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ABoneModifierData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Vector;
            public bool Position;
            public bool Angle;
            public bool Scale;
            public bool InnerRadius;
            public bool OuterRadius;
            public bool Axis;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Vector = defaultOn;
                this.Position = defaultOn;
                this.Angle = defaultOn;
                this.Scale = defaultOn;
                this.InnerRadius = defaultOn;
                this.OuterRadius = defaultOn;
                this.Axis = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Vector, null));
                ret.Add((Position, null));
                ret.Add((Angle, null));
                ret.Add((Scale, null));
                ret.Add((InnerRadius, null));
                ret.Add((OuterRadius, null));
                ret.Add((Axis, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BoneModifierPoseDeformerDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BoneModifierPoseDeformerDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static BoneModifierPoseDeformerData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BoneModifierPoseDeformerData();
            ((BoneModifierPoseDeformerDataSetterCommon)((IBoneModifierPoseDeformerDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BoneModifierPoseDeformerData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BoneModifierPoseDeformerDataSetterCommon)((IBoneModifierPoseDeformerDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new BoneModifierPoseDeformerData GetNew()
        {
            return new BoneModifierPoseDeformerData();
        }

    }
    #endregion

    #region Interface
    public partial interface IBoneModifierPoseDeformerData :
        IABoneModifierData,
        IBoneModifierPoseDeformerDataGetter,
        ILoquiObjectSetter<IBoneModifierPoseDeformerData>
    {
        new P3Float Vector { get; set; }
        new P3Float Position { get; set; }
        new P3Float Angle { get; set; }
        new P3Float Scale { get; set; }
        new Single InnerRadius { get; set; }
        new Single OuterRadius { get; set; }
        new Axis Axis { get; set; }
    }

    public partial interface IBoneModifierPoseDeformerDataGetter :
        IABoneModifierDataGetter,
        IBinaryItem,
        ILoquiObject<IBoneModifierPoseDeformerDataGetter>
    {
        static new ILoquiRegistration StaticRegistration => BoneModifierPoseDeformerData_Registration.Instance;
        P3Float Vector { get; }
        P3Float Position { get; }
        P3Float Angle { get; }
        P3Float Scale { get; }
        Single InnerRadius { get; }
        Single OuterRadius { get; }
        Axis Axis { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BoneModifierPoseDeformerDataMixIn
    {
        public static void Clear(this IBoneModifierPoseDeformerData item)
        {
            ((BoneModifierPoseDeformerDataSetterCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BoneModifierPoseDeformerData.Mask<bool> GetEqualsMask(
            this IBoneModifierPoseDeformerDataGetter item,
            IBoneModifierPoseDeformerDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBoneModifierPoseDeformerDataGetter item,
            string? name = null,
            BoneModifierPoseDeformerData.Mask<bool>? printMask = null)
        {
            return ((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBoneModifierPoseDeformerDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BoneModifierPoseDeformerData.Mask<bool>? printMask = null)
        {
            ((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBoneModifierPoseDeformerDataGetter item,
            IBoneModifierPoseDeformerDataGetter rhs,
            BoneModifierPoseDeformerData.TranslationMask? equalsMask = null)
        {
            return ((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBoneModifierPoseDeformerData lhs,
            IBoneModifierPoseDeformerDataGetter rhs,
            out BoneModifierPoseDeformerData.ErrorMask errorMask,
            BoneModifierPoseDeformerData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BoneModifierPoseDeformerDataSetterTranslationCommon)((IBoneModifierPoseDeformerDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BoneModifierPoseDeformerData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBoneModifierPoseDeformerData lhs,
            IBoneModifierPoseDeformerDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BoneModifierPoseDeformerDataSetterTranslationCommon)((IBoneModifierPoseDeformerDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BoneModifierPoseDeformerData DeepCopy(
            this IBoneModifierPoseDeformerDataGetter item,
            BoneModifierPoseDeformerData.TranslationMask? copyMask = null)
        {
            return ((BoneModifierPoseDeformerDataSetterTranslationCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BoneModifierPoseDeformerData DeepCopy(
            this IBoneModifierPoseDeformerDataGetter item,
            out BoneModifierPoseDeformerData.ErrorMask errorMask,
            BoneModifierPoseDeformerData.TranslationMask? copyMask = null)
        {
            return ((BoneModifierPoseDeformerDataSetterTranslationCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BoneModifierPoseDeformerData DeepCopy(
            this IBoneModifierPoseDeformerDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BoneModifierPoseDeformerDataSetterTranslationCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBoneModifierPoseDeformerData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BoneModifierPoseDeformerDataSetterCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BoneModifierPoseDeformerData_FieldIndex
    {
        Driver = 0,
        Target = 1,
        MaxAnimationDistance = 2,
        Vector = 3,
        Position = 4,
        Angle = 5,
        Scale = 6,
        InnerRadius = 7,
        OuterRadius = 8,
        Axis = 9,
    }
    #endregion

    #region Registration
    internal partial class BoneModifierPoseDeformerData_Registration : ILoquiRegistration
    {
        public static readonly BoneModifierPoseDeformerData_Registration Instance = new BoneModifierPoseDeformerData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(BoneModifierPoseDeformerData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BoneModifierPoseDeformerData.ErrorMask);

        public static readonly Type ClassType = typeof(BoneModifierPoseDeformerData);

        public static readonly Type GetterType = typeof(IBoneModifierPoseDeformerDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBoneModifierPoseDeformerData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BoneModifierPoseDeformerData";

        public const string Name = "BoneModifierPoseDeformerData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(BoneModifierPoseDeformerDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BoneModifierPoseDeformerDataSetterCommon : ABoneModifierDataSetterCommon
    {
        public new static readonly BoneModifierPoseDeformerDataSetterCommon Instance = new BoneModifierPoseDeformerDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBoneModifierPoseDeformerData item)
        {
            ClearPartial();
            item.Vector = default(P3Float);
            item.Position = default(P3Float);
            item.Angle = default(P3Float);
            item.Scale = default(P3Float);
            item.InnerRadius = default(Single);
            item.OuterRadius = default(Single);
            item.Axis = default(Axis);
            base.Clear(item);
        }
        
        public override void Clear(IABoneModifierData item)
        {
            Clear(item: (IBoneModifierPoseDeformerData)item);
        }
        
        #region Mutagen
        public void RemapLinks(IBoneModifierPoseDeformerData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBoneModifierPoseDeformerData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: BoneModifierPoseDeformerDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IABoneModifierData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (BoneModifierPoseDeformerData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class BoneModifierPoseDeformerDataCommon : ABoneModifierDataCommon
    {
        public new static readonly BoneModifierPoseDeformerDataCommon Instance = new BoneModifierPoseDeformerDataCommon();

        public BoneModifierPoseDeformerData.Mask<bool> GetEqualsMask(
            IBoneModifierPoseDeformerDataGetter item,
            IBoneModifierPoseDeformerDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BoneModifierPoseDeformerData.Mask<bool>(false);
            ((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBoneModifierPoseDeformerDataGetter item,
            IBoneModifierPoseDeformerDataGetter rhs,
            BoneModifierPoseDeformerData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Vector = item.Vector.Equals(rhs.Vector);
            ret.Position = item.Position.Equals(rhs.Position);
            ret.Angle = item.Angle.Equals(rhs.Angle);
            ret.Scale = item.Scale.Equals(rhs.Scale);
            ret.InnerRadius = item.InnerRadius.EqualsWithin(rhs.InnerRadius);
            ret.OuterRadius = item.OuterRadius.EqualsWithin(rhs.OuterRadius);
            ret.Axis = item.Axis == rhs.Axis;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IBoneModifierPoseDeformerDataGetter item,
            string? name = null,
            BoneModifierPoseDeformerData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBoneModifierPoseDeformerDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BoneModifierPoseDeformerData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BoneModifierPoseDeformerData =>");
            }
            else
            {
                sb.AppendLine($"{name} (BoneModifierPoseDeformerData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBoneModifierPoseDeformerDataGetter item,
            StructuredStringBuilder sb,
            BoneModifierPoseDeformerData.Mask<bool>? printMask = null)
        {
            ABoneModifierDataCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Vector ?? true)
            {
                sb.AppendItem(item.Vector, "Vector");
            }
            if (printMask?.Position ?? true)
            {
                sb.AppendItem(item.Position, "Position");
            }
            if (printMask?.Angle ?? true)
            {
                sb.AppendItem(item.Angle, "Angle");
            }
            if (printMask?.Scale ?? true)
            {
                sb.AppendItem(item.Scale, "Scale");
            }
            if (printMask?.InnerRadius ?? true)
            {
                sb.AppendItem(item.InnerRadius, "InnerRadius");
            }
            if (printMask?.OuterRadius ?? true)
            {
                sb.AppendItem(item.OuterRadius, "OuterRadius");
            }
            if (printMask?.Axis ?? true)
            {
                sb.AppendItem(item.Axis, "Axis");
            }
        }
        
        public static BoneModifierPoseDeformerData_FieldIndex ConvertFieldIndex(ABoneModifierData_FieldIndex index)
        {
            switch (index)
            {
                case ABoneModifierData_FieldIndex.Driver:
                    return (BoneModifierPoseDeformerData_FieldIndex)((int)index);
                case ABoneModifierData_FieldIndex.Target:
                    return (BoneModifierPoseDeformerData_FieldIndex)((int)index);
                case ABoneModifierData_FieldIndex.MaxAnimationDistance:
                    return (BoneModifierPoseDeformerData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBoneModifierPoseDeformerDataGetter? lhs,
            IBoneModifierPoseDeformerDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IABoneModifierDataGetter)lhs, (IABoneModifierDataGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.Vector) ?? true))
            {
                if (!lhs.Vector.Equals(rhs.Vector)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.Position) ?? true))
            {
                if (!lhs.Position.Equals(rhs.Position)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.Angle) ?? true))
            {
                if (!lhs.Angle.Equals(rhs.Angle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.Scale) ?? true))
            {
                if (!lhs.Scale.Equals(rhs.Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.InnerRadius) ?? true))
            {
                if (!lhs.InnerRadius.EqualsWithin(rhs.InnerRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.OuterRadius) ?? true))
            {
                if (!lhs.OuterRadius.EqualsWithin(rhs.OuterRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.Axis) ?? true))
            {
                if (lhs.Axis != rhs.Axis) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IABoneModifierDataGetter? lhs,
            IABoneModifierDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IBoneModifierPoseDeformerDataGetter?)lhs,
                rhs: rhs as IBoneModifierPoseDeformerDataGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IBoneModifierPoseDeformerDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Vector);
            hash.Add(item.Position);
            hash.Add(item.Angle);
            hash.Add(item.Scale);
            hash.Add(item.InnerRadius);
            hash.Add(item.OuterRadius);
            hash.Add(item.Axis);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IABoneModifierDataGetter item)
        {
            return GetHashCode(item: (IBoneModifierPoseDeformerDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return BoneModifierPoseDeformerData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBoneModifierPoseDeformerDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BoneModifierPoseDeformerDataSetterTranslationCommon : ABoneModifierDataSetterTranslationCommon
    {
        public new static readonly BoneModifierPoseDeformerDataSetterTranslationCommon Instance = new BoneModifierPoseDeformerDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBoneModifierPoseDeformerData item,
            IBoneModifierPoseDeformerDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IABoneModifierData)item,
                (IABoneModifierDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.Vector) ?? true))
            {
                item.Vector = rhs.Vector;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.Position) ?? true))
            {
                item.Position = rhs.Position;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.Angle) ?? true))
            {
                item.Angle = rhs.Angle;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.InnerRadius) ?? true))
            {
                item.InnerRadius = rhs.InnerRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.OuterRadius) ?? true))
            {
                item.OuterRadius = rhs.OuterRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)BoneModifierPoseDeformerData_FieldIndex.Axis) ?? true))
            {
                item.Axis = rhs.Axis;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBoneModifierPoseDeformerData item,
            IBoneModifierPoseDeformerDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IABoneModifierData item,
            IABoneModifierDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IBoneModifierPoseDeformerData)item,
                rhs: (IBoneModifierPoseDeformerDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public BoneModifierPoseDeformerData DeepCopy(
            IBoneModifierPoseDeformerDataGetter item,
            BoneModifierPoseDeformerData.TranslationMask? copyMask = null)
        {
            BoneModifierPoseDeformerData ret = (BoneModifierPoseDeformerData)((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonInstance()!).GetNew();
            ((BoneModifierPoseDeformerDataSetterTranslationCommon)((IBoneModifierPoseDeformerDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BoneModifierPoseDeformerData DeepCopy(
            IBoneModifierPoseDeformerDataGetter item,
            out BoneModifierPoseDeformerData.ErrorMask errorMask,
            BoneModifierPoseDeformerData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BoneModifierPoseDeformerData ret = (BoneModifierPoseDeformerData)((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonInstance()!).GetNew();
            ((BoneModifierPoseDeformerDataSetterTranslationCommon)((IBoneModifierPoseDeformerDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BoneModifierPoseDeformerData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BoneModifierPoseDeformerData DeepCopy(
            IBoneModifierPoseDeformerDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BoneModifierPoseDeformerData ret = (BoneModifierPoseDeformerData)((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)item).CommonInstance()!).GetNew();
            ((BoneModifierPoseDeformerDataSetterTranslationCommon)((IBoneModifierPoseDeformerDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BoneModifierPoseDeformerData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BoneModifierPoseDeformerData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => BoneModifierPoseDeformerData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BoneModifierPoseDeformerDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return BoneModifierPoseDeformerDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BoneModifierPoseDeformerDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BoneModifierPoseDeformerDataBinaryWriteTranslation :
        ABoneModifierDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly BoneModifierPoseDeformerDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IBoneModifierPoseDeformerDataGetter item,
            MutagenWriter writer)
        {
            ABoneModifierDataBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Vector);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Position);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Angle);
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Scale);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.InnerRadius);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.OuterRadius);
            EnumBinaryTranslation<Axis, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Axis,
                length: 1);
        }

        public void Write(
            MutagenWriter writer,
            IBoneModifierPoseDeformerDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBoneModifierPoseDeformerDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IABoneModifierDataGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IBoneModifierPoseDeformerDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BoneModifierPoseDeformerDataBinaryCreateTranslation : ABoneModifierDataBinaryCreateTranslation
    {
        public new static readonly BoneModifierPoseDeformerDataBinaryCreateTranslation Instance = new BoneModifierPoseDeformerDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IBoneModifierPoseDeformerData item,
            MutagenFrame frame)
        {
            ABoneModifierDataBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.Vector = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Position = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Angle = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Scale = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.InnerRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.OuterRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Axis = EnumBinaryTranslation<Axis, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 1);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BoneModifierPoseDeformerDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BoneModifierPoseDeformerDataBinaryOverlay :
        ABoneModifierDataBinaryOverlay,
        IBoneModifierPoseDeformerDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BoneModifierPoseDeformerData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => BoneModifierPoseDeformerData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => BoneModifierPoseDeformerDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => BoneModifierPoseDeformerDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => BoneModifierPoseDeformerDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BoneModifierPoseDeformerDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public P3Float Vector => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(TargetEndingPos + 0x4, 0xC));
        public P3Float Position => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(TargetEndingPos + 0x10, 0xC));
        public P3Float Angle => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(TargetEndingPos + 0x1C, 0xC));
        public P3Float Scale => P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_structData.Slice(TargetEndingPos + 0x28, 0xC));
        public Single InnerRadius => _structData.Slice(TargetEndingPos + 0x34, 0x4).Float();
        public Single OuterRadius => _structData.Slice(TargetEndingPos + 0x38, 0x4).Float();
        public Axis Axis => (Axis)_structData.Span.Slice(TargetEndingPos + 0x3C, 0x1)[0];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BoneModifierPoseDeformerDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void BoneModifierPoseDeformerDataParseEndingPositions(
            BoneModifierPoseDeformerDataBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ABoneModifierDataParseEndingPositions(
                ret: ret,
                package: package);
        }

        public static IBoneModifierPoseDeformerDataGetter BoneModifierPoseDeformerDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BoneModifierPoseDeformerDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            BoneModifierPoseDeformerDataParseEndingPositions(ret, package);
            stream.Position += ret.TargetEndingPos + 0x3D;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IBoneModifierPoseDeformerDataGetter BoneModifierPoseDeformerDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BoneModifierPoseDeformerDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BoneModifierPoseDeformerDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBoneModifierPoseDeformerDataGetter rhs) return false;
            return ((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBoneModifierPoseDeformerDataGetter? obj)
        {
            return ((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BoneModifierPoseDeformerDataCommon)((IBoneModifierPoseDeformerDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

