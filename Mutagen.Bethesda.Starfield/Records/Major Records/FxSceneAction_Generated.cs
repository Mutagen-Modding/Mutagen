/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class FxSceneAction :
        ASceneAction,
        IEquatable<IFxSceneActionGetter>,
        IFxSceneAction,
        ILoquiObjectSetter<FxSceneAction>
    {
        #region Ctor
        public FxSceneAction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region REPL
        private readonly IFormLink<IImageSpaceAdapterGetter> _REPL = new FormLink<IImageSpaceAdapterGetter>();
        public IFormLink<IImageSpaceAdapterGetter> REPL
        {
            get => _REPL;
            set => _REPL.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImageSpaceAdapterGetter> IFxSceneActionGetter.REPL => this.REPL;
        #endregion
        #region HNAM
        public Single HNAM { get; set; } = default(Single);
        #endregion
        #region VCLR
        public Single VCLR { get; set; } = default(Single);
        #endregion
        #region BTXT
        public Int32 BTXT { get; set; } = default(Int32);
        #endregion
        #region FLMV
        public Int32 FLMV { get; set; } = default(Int32);
        #endregion
        #region WED0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _WED0;
        public SoundReference? WED0
        {
            get => _WED0;
            set => _WED0 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IFxSceneActionGetter.WED0 => this.WED0;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IFxSceneActionGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region BIPL
        private readonly IFormLink<IPlacedObjectGetter> _BIPL = new FormLink<IPlacedObjectGetter>();
        public IFormLink<IPlacedObjectGetter> BIPL
        {
            get => _BIPL;
            set => _BIPL.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IPlacedObjectGetter> IFxSceneActionGetter.BIPL => this.BIPL;
        #endregion
        #region LVLO
        public Int32? LVLO { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IFxSceneActionGetter.LVLO => this.LVLO;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FxSceneActionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFxSceneActionGetter rhs) return false;
            return ((FxSceneActionCommon)((IFxSceneActionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFxSceneActionGetter? obj)
        {
            return ((FxSceneActionCommon)((IFxSceneActionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FxSceneActionCommon)((IFxSceneActionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ASceneAction.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.REPL = initialValue;
                this.HNAM = initialValue;
                this.VCLR = initialValue;
                this.BTXT = initialValue;
                this.FLMV = initialValue;
                this.WED0 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.BIPL = initialValue;
                this.LVLO = initialValue;
            }

            public Mask(
                TItem Name,
                TItem SceneNotes,
                TItem AliasID,
                TItem Index,
                TItem Flags,
                TItem StartPhase,
                TItem EndPhase,
                TItem REPL,
                TItem HNAM,
                TItem VCLR,
                TItem BTXT,
                TItem FLMV,
                TItem WED0,
                TItem Conditions,
                TItem BIPL,
                TItem LVLO)
            : base(
                Name: Name,
                SceneNotes: SceneNotes,
                AliasID: AliasID,
                Index: Index,
                Flags: Flags,
                StartPhase: StartPhase,
                EndPhase: EndPhase)
            {
                this.REPL = REPL;
                this.HNAM = HNAM;
                this.VCLR = VCLR;
                this.BTXT = BTXT;
                this.FLMV = FLMV;
                this.WED0 = new MaskItem<TItem, SoundReference.Mask<TItem>?>(WED0, new SoundReference.Mask<TItem>(WED0));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.BIPL = BIPL;
                this.LVLO = LVLO;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem REPL;
            public TItem HNAM;
            public TItem VCLR;
            public TItem BTXT;
            public TItem FLMV;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? WED0 { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem BIPL;
            public TItem LVLO;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.REPL, rhs.REPL)) return false;
                if (!object.Equals(this.HNAM, rhs.HNAM)) return false;
                if (!object.Equals(this.VCLR, rhs.VCLR)) return false;
                if (!object.Equals(this.BTXT, rhs.BTXT)) return false;
                if (!object.Equals(this.FLMV, rhs.FLMV)) return false;
                if (!object.Equals(this.WED0, rhs.WED0)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.BIPL, rhs.BIPL)) return false;
                if (!object.Equals(this.LVLO, rhs.LVLO)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.REPL);
                hash.Add(this.HNAM);
                hash.Add(this.VCLR);
                hash.Add(this.BTXT);
                hash.Add(this.FLMV);
                hash.Add(this.WED0);
                hash.Add(this.Conditions);
                hash.Add(this.BIPL);
                hash.Add(this.LVLO);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.REPL)) return false;
                if (!eval(this.HNAM)) return false;
                if (!eval(this.VCLR)) return false;
                if (!eval(this.BTXT)) return false;
                if (!eval(this.FLMV)) return false;
                if (WED0 != null)
                {
                    if (!eval(this.WED0.Overall)) return false;
                    if (this.WED0.Specific != null && !this.WED0.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.BIPL)) return false;
                if (!eval(this.LVLO)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.REPL)) return true;
                if (eval(this.HNAM)) return true;
                if (eval(this.VCLR)) return true;
                if (eval(this.BTXT)) return true;
                if (eval(this.FLMV)) return true;
                if (WED0 != null)
                {
                    if (eval(this.WED0.Overall)) return true;
                    if (this.WED0.Specific != null && this.WED0.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.BIPL)) return true;
                if (eval(this.LVLO)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FxSceneAction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.REPL = eval(this.REPL);
                obj.HNAM = eval(this.HNAM);
                obj.VCLR = eval(this.VCLR);
                obj.BTXT = eval(this.BTXT);
                obj.FLMV = eval(this.FLMV);
                obj.WED0 = this.WED0 == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.WED0.Overall), this.WED0.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BIPL = eval(this.BIPL);
                obj.LVLO = eval(this.LVLO);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(FxSceneAction.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, FxSceneAction.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(FxSceneAction.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.REPL ?? true)
                    {
                        sb.AppendItem(REPL, "REPL");
                    }
                    if (printMask?.HNAM ?? true)
                    {
                        sb.AppendItem(HNAM, "HNAM");
                    }
                    if (printMask?.VCLR ?? true)
                    {
                        sb.AppendItem(VCLR, "VCLR");
                    }
                    if (printMask?.BTXT ?? true)
                    {
                        sb.AppendItem(BTXT, "BTXT");
                    }
                    if (printMask?.FLMV ?? true)
                    {
                        sb.AppendItem(FLMV, "FLMV");
                    }
                    if (printMask?.WED0?.Overall ?? true)
                    {
                        WED0?.Print(sb);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.BIPL ?? true)
                    {
                        sb.AppendItem(BIPL, "BIPL");
                    }
                    if (printMask?.LVLO ?? true)
                    {
                        sb.AppendItem(LVLO, "LVLO");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ASceneAction.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? REPL;
            public Exception? HNAM;
            public Exception? VCLR;
            public Exception? BTXT;
            public Exception? FLMV;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? WED0;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? BIPL;
            public Exception? LVLO;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                FxSceneAction_FieldIndex enu = (FxSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case FxSceneAction_FieldIndex.REPL:
                        return REPL;
                    case FxSceneAction_FieldIndex.HNAM:
                        return HNAM;
                    case FxSceneAction_FieldIndex.VCLR:
                        return VCLR;
                    case FxSceneAction_FieldIndex.BTXT:
                        return BTXT;
                    case FxSceneAction_FieldIndex.FLMV:
                        return FLMV;
                    case FxSceneAction_FieldIndex.WED0:
                        return WED0;
                    case FxSceneAction_FieldIndex.Conditions:
                        return Conditions;
                    case FxSceneAction_FieldIndex.BIPL:
                        return BIPL;
                    case FxSceneAction_FieldIndex.LVLO:
                        return LVLO;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                FxSceneAction_FieldIndex enu = (FxSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case FxSceneAction_FieldIndex.REPL:
                        this.REPL = ex;
                        break;
                    case FxSceneAction_FieldIndex.HNAM:
                        this.HNAM = ex;
                        break;
                    case FxSceneAction_FieldIndex.VCLR:
                        this.VCLR = ex;
                        break;
                    case FxSceneAction_FieldIndex.BTXT:
                        this.BTXT = ex;
                        break;
                    case FxSceneAction_FieldIndex.FLMV:
                        this.FLMV = ex;
                        break;
                    case FxSceneAction_FieldIndex.WED0:
                        this.WED0 = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case FxSceneAction_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case FxSceneAction_FieldIndex.BIPL:
                        this.BIPL = ex;
                        break;
                    case FxSceneAction_FieldIndex.LVLO:
                        this.LVLO = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                FxSceneAction_FieldIndex enu = (FxSceneAction_FieldIndex)index;
                switch (enu)
                {
                    case FxSceneAction_FieldIndex.REPL:
                        this.REPL = (Exception?)obj;
                        break;
                    case FxSceneAction_FieldIndex.HNAM:
                        this.HNAM = (Exception?)obj;
                        break;
                    case FxSceneAction_FieldIndex.VCLR:
                        this.VCLR = (Exception?)obj;
                        break;
                    case FxSceneAction_FieldIndex.BTXT:
                        this.BTXT = (Exception?)obj;
                        break;
                    case FxSceneAction_FieldIndex.FLMV:
                        this.FLMV = (Exception?)obj;
                        break;
                    case FxSceneAction_FieldIndex.WED0:
                        this.WED0 = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case FxSceneAction_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case FxSceneAction_FieldIndex.BIPL:
                        this.BIPL = (Exception?)obj;
                        break;
                    case FxSceneAction_FieldIndex.LVLO:
                        this.LVLO = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (REPL != null) return true;
                if (HNAM != null) return true;
                if (VCLR != null) return true;
                if (BTXT != null) return true;
                if (FLMV != null) return true;
                if (WED0 != null) return true;
                if (Conditions != null) return true;
                if (BIPL != null) return true;
                if (LVLO != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(REPL, "REPL");
                }
                {
                    sb.AppendItem(HNAM, "HNAM");
                }
                {
                    sb.AppendItem(VCLR, "VCLR");
                }
                {
                    sb.AppendItem(BTXT, "BTXT");
                }
                {
                    sb.AppendItem(FLMV, "FLMV");
                }
                WED0?.Print(sb);
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(BIPL, "BIPL");
                }
                {
                    sb.AppendItem(LVLO, "LVLO");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.REPL = this.REPL.Combine(rhs.REPL);
                ret.HNAM = this.HNAM.Combine(rhs.HNAM);
                ret.VCLR = this.VCLR.Combine(rhs.VCLR);
                ret.BTXT = this.BTXT.Combine(rhs.BTXT);
                ret.FLMV = this.FLMV.Combine(rhs.FLMV);
                ret.WED0 = this.WED0.Combine(rhs.WED0, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.BIPL = this.BIPL.Combine(rhs.BIPL);
                ret.LVLO = this.LVLO.Combine(rhs.LVLO);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ASceneAction.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool REPL;
            public bool HNAM;
            public bool VCLR;
            public bool BTXT;
            public bool FLMV;
            public SoundReference.TranslationMask? WED0;
            public Condition.TranslationMask? Conditions;
            public bool BIPL;
            public bool LVLO;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.REPL = defaultOn;
                this.HNAM = defaultOn;
                this.VCLR = defaultOn;
                this.BTXT = defaultOn;
                this.FLMV = defaultOn;
                this.BIPL = defaultOn;
                this.LVLO = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((REPL, null));
                ret.Add((HNAM, null));
                ret.Add((VCLR, null));
                ret.Add((BTXT, null));
                ret.Add((FLMV, null));
                ret.Add((WED0 != null ? WED0.OnOverall : DefaultOn, WED0?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((BIPL, null));
                ret.Add((LVLO, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FxSceneActionCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FxSceneActionSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FxSceneActionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FxSceneActionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static FxSceneAction CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new FxSceneAction();
            ((FxSceneActionSetterCommon)((IFxSceneActionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out FxSceneAction item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((FxSceneActionSetterCommon)((IFxSceneActionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new FxSceneAction GetNew()
        {
            return new FxSceneAction();
        }

    }
    #endregion

    #region Interface
    public partial interface IFxSceneAction :
        IASceneAction,
        IFormLinkContainer,
        IFxSceneActionGetter,
        ILoquiObjectSetter<IFxSceneAction>,
        INamedRequired
    {
        new IFormLink<IImageSpaceAdapterGetter> REPL { get; set; }
        new Single HNAM { get; set; }
        new Single VCLR { get; set; }
        new Int32 BTXT { get; set; }
        new Int32 FLMV { get; set; }
        new SoundReference? WED0 { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new IFormLink<IPlacedObjectGetter> BIPL { get; set; }
        new Int32? LVLO { get; set; }
    }

    public partial interface IFxSceneActionGetter :
        IASceneActionGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IFxSceneActionGetter>,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => FxSceneAction_Registration.Instance;
        IFormLinkGetter<IImageSpaceAdapterGetter> REPL { get; }
        Single HNAM { get; }
        Single VCLR { get; }
        Int32 BTXT { get; }
        Int32 FLMV { get; }
        ISoundReferenceGetter? WED0 { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IFormLinkGetter<IPlacedObjectGetter> BIPL { get; }
        Int32? LVLO { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FxSceneActionMixIn
    {
        public static void Clear(this IFxSceneAction item)
        {
            ((FxSceneActionSetterCommon)((IFxSceneActionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FxSceneAction.Mask<bool> GetEqualsMask(
            this IFxSceneActionGetter item,
            IFxSceneActionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FxSceneActionCommon)((IFxSceneActionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFxSceneActionGetter item,
            string? name = null,
            FxSceneAction.Mask<bool>? printMask = null)
        {
            return ((FxSceneActionCommon)((IFxSceneActionGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFxSceneActionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FxSceneAction.Mask<bool>? printMask = null)
        {
            ((FxSceneActionCommon)((IFxSceneActionGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFxSceneActionGetter item,
            IFxSceneActionGetter rhs,
            FxSceneAction.TranslationMask? equalsMask = null)
        {
            return ((FxSceneActionCommon)((IFxSceneActionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFxSceneAction lhs,
            IFxSceneActionGetter rhs,
            out FxSceneAction.ErrorMask errorMask,
            FxSceneAction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FxSceneActionSetterTranslationCommon)((IFxSceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FxSceneAction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFxSceneAction lhs,
            IFxSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FxSceneActionSetterTranslationCommon)((IFxSceneActionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FxSceneAction DeepCopy(
            this IFxSceneActionGetter item,
            FxSceneAction.TranslationMask? copyMask = null)
        {
            return ((FxSceneActionSetterTranslationCommon)((IFxSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FxSceneAction DeepCopy(
            this IFxSceneActionGetter item,
            out FxSceneAction.ErrorMask errorMask,
            FxSceneAction.TranslationMask? copyMask = null)
        {
            return ((FxSceneActionSetterTranslationCommon)((IFxSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FxSceneAction DeepCopy(
            this IFxSceneActionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FxSceneActionSetterTranslationCommon)((IFxSceneActionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFxSceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((FxSceneActionSetterCommon)((IFxSceneActionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum FxSceneAction_FieldIndex
    {
        Name = 0,
        SceneNotes = 1,
        AliasID = 2,
        Index = 3,
        Flags = 4,
        StartPhase = 5,
        EndPhase = 6,
        REPL = 7,
        HNAM = 8,
        VCLR = 9,
        BTXT = 10,
        FLMV = 11,
        WED0 = 12,
        Conditions = 13,
        BIPL = 14,
        LVLO = 15,
    }
    #endregion

    #region Registration
    internal partial class FxSceneAction_Registration : ILoquiRegistration
    {
        public static readonly FxSceneAction_Registration Instance = new FxSceneAction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(FxSceneAction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FxSceneAction.ErrorMask);

        public static readonly Type ClassType = typeof(FxSceneAction);

        public static readonly Type GetterType = typeof(IFxSceneActionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFxSceneAction);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.FxSceneAction";

        public const string Name = "FxSceneAction";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAM0;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.NAM0);
            var all = RecordCollection.Factory(
                RecordTypes.NAM0,
                RecordTypes.REPL,
                RecordTypes.HNAM,
                RecordTypes.VCLR,
                RecordTypes.BTXT,
                RecordTypes.FLMV,
                RecordTypes.WED0,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.BIPL,
                RecordTypes.LVLO);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(FxSceneActionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FxSceneActionSetterCommon : ASceneActionSetterCommon
    {
        public new static readonly FxSceneActionSetterCommon Instance = new FxSceneActionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFxSceneAction item)
        {
            ClearPartial();
            item.REPL.Clear();
            item.HNAM = default(Single);
            item.VCLR = default(Single);
            item.BTXT = default(Int32);
            item.FLMV = default(Int32);
            item.WED0 = null;
            item.Conditions.Clear();
            item.BIPL.Clear();
            item.LVLO = default;
            base.Clear(item);
        }
        
        public override void Clear(IASceneAction item)
        {
            Clear(item: (IFxSceneAction)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFxSceneAction obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.REPL.Relink(mapping);
            obj.WED0?.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.BIPL.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFxSceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: FxSceneActionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IASceneAction item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (FxSceneAction)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class FxSceneActionCommon : ASceneActionCommon
    {
        public new static readonly FxSceneActionCommon Instance = new FxSceneActionCommon();

        public FxSceneAction.Mask<bool> GetEqualsMask(
            IFxSceneActionGetter item,
            IFxSceneActionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FxSceneAction.Mask<bool>(false);
            ((FxSceneActionCommon)((IFxSceneActionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFxSceneActionGetter item,
            IFxSceneActionGetter rhs,
            FxSceneAction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.REPL = item.REPL.Equals(rhs.REPL);
            ret.HNAM = item.HNAM.EqualsWithin(rhs.HNAM);
            ret.VCLR = item.VCLR.EqualsWithin(rhs.VCLR);
            ret.BTXT = item.BTXT == rhs.BTXT;
            ret.FLMV = item.FLMV == rhs.FLMV;
            ret.WED0 = EqualsMaskHelper.EqualsHelper(
                item.WED0,
                rhs.WED0,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BIPL = item.BIPL.Equals(rhs.BIPL);
            ret.LVLO = item.LVLO == rhs.LVLO;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IFxSceneActionGetter item,
            string? name = null,
            FxSceneAction.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFxSceneActionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FxSceneAction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"FxSceneAction =>");
            }
            else
            {
                sb.AppendLine($"{name} (FxSceneAction) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFxSceneActionGetter item,
            StructuredStringBuilder sb,
            FxSceneAction.Mask<bool>? printMask = null)
        {
            ASceneActionCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.REPL ?? true)
            {
                sb.AppendItem(item.REPL.FormKey, "REPL");
            }
            if (printMask?.HNAM ?? true)
            {
                sb.AppendItem(item.HNAM, "HNAM");
            }
            if (printMask?.VCLR ?? true)
            {
                sb.AppendItem(item.VCLR, "VCLR");
            }
            if (printMask?.BTXT ?? true)
            {
                sb.AppendItem(item.BTXT, "BTXT");
            }
            if (printMask?.FLMV ?? true)
            {
                sb.AppendItem(item.FLMV, "FLMV");
            }
            if ((printMask?.WED0?.Overall ?? true)
                && item.WED0 is {} WED0Item)
            {
                WED0Item?.Print(sb, "WED0");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.BIPL ?? true)
            {
                sb.AppendItem(item.BIPL.FormKey, "BIPL");
            }
            if ((printMask?.LVLO ?? true)
                && item.LVLO is {} LVLOItem)
            {
                sb.AppendItem(LVLOItem, "LVLO");
            }
        }
        
        public static FxSceneAction_FieldIndex ConvertFieldIndex(ASceneAction_FieldIndex index)
        {
            switch (index)
            {
                case ASceneAction_FieldIndex.Name:
                    return (FxSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.SceneNotes:
                    return (FxSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.AliasID:
                    return (FxSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.Index:
                    return (FxSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.Flags:
                    return (FxSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.StartPhase:
                    return (FxSceneAction_FieldIndex)((int)index);
                case ASceneAction_FieldIndex.EndPhase:
                    return (FxSceneAction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFxSceneActionGetter? lhs,
            IFxSceneActionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IASceneActionGetter)lhs, (IASceneActionGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.REPL) ?? true))
            {
                if (!lhs.REPL.Equals(rhs.REPL)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.HNAM) ?? true))
            {
                if (!lhs.HNAM.EqualsWithin(rhs.HNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.VCLR) ?? true))
            {
                if (!lhs.VCLR.EqualsWithin(rhs.VCLR)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.BTXT) ?? true))
            {
                if (lhs.BTXT != rhs.BTXT) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.FLMV) ?? true))
            {
                if (lhs.FLMV != rhs.FLMV) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.WED0) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WED0, rhs.WED0, out var lhsWED0, out var rhsWED0, out var isWED0Equal))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsWED0).CommonInstance()!).Equals(lhsWED0, rhsWED0, equalsMask?.GetSubCrystal((int)FxSceneAction_FieldIndex.WED0))) return false;
                }
                else if (!isWED0Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)FxSceneAction_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.BIPL) ?? true))
            {
                if (!lhs.BIPL.Equals(rhs.BIPL)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.LVLO) ?? true))
            {
                if (lhs.LVLO != rhs.LVLO) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IASceneActionGetter? lhs,
            IASceneActionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFxSceneActionGetter?)lhs,
                rhs: rhs as IFxSceneActionGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IFxSceneActionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.REPL);
            hash.Add(item.HNAM);
            hash.Add(item.VCLR);
            hash.Add(item.BTXT);
            hash.Add(item.FLMV);
            if (item.WED0 is {} WED0item)
            {
                hash.Add(WED0item);
            }
            hash.Add(item.Conditions);
            hash.Add(item.BIPL);
            if (item.LVLO is {} LVLOitem)
            {
                hash.Add(LVLOitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IASceneActionGetter item)
        {
            return GetHashCode(item: (IFxSceneActionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return FxSceneAction.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFxSceneActionGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.REPL);
            if (obj.WED0 is {} WED0Items)
            {
                foreach (var item in WED0Items.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield return FormLinkInformation.Factory(obj.BIPL);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class FxSceneActionSetterTranslationCommon : ASceneActionSetterTranslationCommon
    {
        public new static readonly FxSceneActionSetterTranslationCommon Instance = new FxSceneActionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFxSceneAction item,
            IFxSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IASceneAction)item,
                (IASceneActionGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.REPL) ?? true))
            {
                item.REPL.SetTo(rhs.REPL.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.HNAM) ?? true))
            {
                item.HNAM = rhs.HNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.VCLR) ?? true))
            {
                item.VCLR = rhs.VCLR;
            }
            if ((copyMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.BTXT) ?? true))
            {
                item.BTXT = rhs.BTXT;
            }
            if ((copyMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.FLMV) ?? true))
            {
                item.FLMV = rhs.FLMV;
            }
            if ((copyMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.WED0) ?? true))
            {
                errorMask?.PushIndex((int)FxSceneAction_FieldIndex.WED0);
                try
                {
                    if(rhs.WED0 is {} rhsWED0)
                    {
                        item.WED0 = rhsWED0.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)FxSceneAction_FieldIndex.WED0));
                    }
                    else
                    {
                        item.WED0 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)FxSceneAction_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.BIPL) ?? true))
            {
                item.BIPL.SetTo(rhs.BIPL.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)FxSceneAction_FieldIndex.LVLO) ?? true))
            {
                item.LVLO = rhs.LVLO;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFxSceneAction item,
            IFxSceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IASceneAction item,
            IASceneActionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFxSceneAction)item,
                rhs: (IFxSceneActionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public FxSceneAction DeepCopy(
            IFxSceneActionGetter item,
            FxSceneAction.TranslationMask? copyMask = null)
        {
            FxSceneAction ret = (FxSceneAction)((FxSceneActionCommon)((IFxSceneActionGetter)item).CommonInstance()!).GetNew();
            ((FxSceneActionSetterTranslationCommon)((IFxSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FxSceneAction DeepCopy(
            IFxSceneActionGetter item,
            out FxSceneAction.ErrorMask errorMask,
            FxSceneAction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FxSceneAction ret = (FxSceneAction)((FxSceneActionCommon)((IFxSceneActionGetter)item).CommonInstance()!).GetNew();
            ((FxSceneActionSetterTranslationCommon)((IFxSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FxSceneAction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FxSceneAction DeepCopy(
            IFxSceneActionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FxSceneAction ret = (FxSceneAction)((FxSceneActionCommon)((IFxSceneActionGetter)item).CommonInstance()!).GetNew();
            ((FxSceneActionSetterTranslationCommon)((IFxSceneActionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class FxSceneAction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FxSceneAction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => FxSceneAction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FxSceneActionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FxSceneActionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FxSceneActionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class FxSceneActionBinaryWriteTranslation :
        ASceneActionBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly FxSceneActionBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IFxSceneActionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            ASceneActionBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.REPL,
                header: translationParams.ConvertToCustom(RecordTypes.REPL));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HNAM,
                header: translationParams.ConvertToCustom(RecordTypes.HNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.VCLR,
                header: translationParams.ConvertToCustom(RecordTypes.VCLR));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BTXT,
                header: translationParams.ConvertToCustom(RecordTypes.BTXT));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FLMV,
                header: translationParams.ConvertToCustom(RecordTypes.FLMV));
            if (item.WED0 is {} WED0Item)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.WED0))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)WED0Item).BinaryWriteTranslator).Write(
                        item: WED0Item,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.BIPL,
                header: translationParams.ConvertToCustom(RecordTypes.BIPL));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.LVLO,
                header: translationParams.ConvertToCustom(RecordTypes.LVLO));
        }

        public void Write(
            MutagenWriter writer,
            IFxSceneActionGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFxSceneActionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IASceneActionGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFxSceneActionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FxSceneActionBinaryCreateTranslation : ASceneActionBinaryCreateTranslation
    {
        public new static readonly FxSceneActionBinaryCreateTranslation Instance = new FxSceneActionBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IFxSceneAction item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.REPL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.REPL.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)FxSceneAction_FieldIndex.REPL;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HNAM = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)FxSceneAction_FieldIndex.HNAM;
                }
                case RecordTypeInts.VCLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VCLR = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)FxSceneAction_FieldIndex.VCLR;
                }
                case RecordTypeInts.BTXT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BTXT = frame.ReadInt32();
                    return (int)FxSceneAction_FieldIndex.BTXT;
                }
                case RecordTypeInts.FLMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FLMV = frame.ReadInt32();
                    return (int)FxSceneAction_FieldIndex.FLMV;
                }
                case RecordTypeInts.WED0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.WED0 = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)FxSceneAction_FieldIndex.WED0;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)FxSceneAction_FieldIndex.Conditions;
                }
                case RecordTypeInts.BIPL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BIPL.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)FxSceneAction_FieldIndex.BIPL;
                }
                case RecordTypeInts.LVLO:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LVLO = frame.ReadInt32();
                    return (int)FxSceneAction_FieldIndex.LVLO;
                }
                default:
                    return ASceneActionBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class FxSceneActionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class FxSceneActionBinaryOverlay :
        ASceneActionBinaryOverlay,
        IFxSceneActionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FxSceneAction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => FxSceneAction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FxSceneActionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FxSceneActionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FxSceneActionCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FxSceneActionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FxSceneActionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region REPL
        private int? _REPLLocation;
        public IFormLinkGetter<IImageSpaceAdapterGetter> REPL => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IImageSpaceAdapterGetter>(_package, _recordData, _REPLLocation);
        #endregion
        #region HNAM
        private int? _HNAMLocation;
        public Single HNAM => _HNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HNAMLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region VCLR
        private int? _VCLRLocation;
        public Single VCLR => _VCLRLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _VCLRLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region BTXT
        private int? _BTXTLocation;
        public Int32 BTXT => _BTXTLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BTXTLocation.Value, _package.MetaData.Constants)) : default(Int32);
        #endregion
        #region FLMV
        private int? _FLMVLocation;
        public Int32 FLMV => _FLMVLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FLMVLocation.Value, _package.MetaData.Constants)) : default(Int32);
        #endregion
        public ISoundReferenceGetter? WED0 { get; private set; }
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = [];
        #region BIPL
        private int? _BIPLLocation;
        public IFormLinkGetter<IPlacedObjectGetter> BIPL => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedObjectGetter>(_package, _recordData, _BIPLLocation);
        #endregion
        #region LVLO
        private int? _LVLOLocation;
        public Int32? LVLO => _LVLOLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LVLOLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FxSceneActionBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IFxSceneActionGetter FxSceneActionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new FxSceneActionBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IFxSceneActionGetter FxSceneActionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return FxSceneActionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.REPL:
                {
                    _REPLLocation = (stream.Position - offset);
                    return (int)FxSceneAction_FieldIndex.REPL;
                }
                case RecordTypeInts.HNAM:
                {
                    _HNAMLocation = (stream.Position - offset);
                    return (int)FxSceneAction_FieldIndex.HNAM;
                }
                case RecordTypeInts.VCLR:
                {
                    _VCLRLocation = (stream.Position - offset);
                    return (int)FxSceneAction_FieldIndex.VCLR;
                }
                case RecordTypeInts.BTXT:
                {
                    _BTXTLocation = (stream.Position - offset);
                    return (int)FxSceneAction_FieldIndex.BTXT;
                }
                case RecordTypeInts.FLMV:
                {
                    _FLMVLocation = (stream.Position - offset);
                    return (int)FxSceneAction_FieldIndex.FLMV;
                }
                case RecordTypeInts.WED0:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.WED0 = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)FxSceneAction_FieldIndex.WED0;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)FxSceneAction_FieldIndex.Conditions;
                }
                case RecordTypeInts.BIPL:
                {
                    _BIPLLocation = (stream.Position - offset);
                    return (int)FxSceneAction_FieldIndex.BIPL;
                }
                case RecordTypeInts.LVLO:
                {
                    _LVLOLocation = (stream.Position - offset);
                    return (int)FxSceneAction_FieldIndex.LVLO;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FxSceneActionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFxSceneActionGetter rhs) return false;
            return ((FxSceneActionCommon)((IFxSceneActionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFxSceneActionGetter? obj)
        {
            return ((FxSceneActionCommon)((IFxSceneActionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FxSceneActionCommon)((IFxSceneActionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

