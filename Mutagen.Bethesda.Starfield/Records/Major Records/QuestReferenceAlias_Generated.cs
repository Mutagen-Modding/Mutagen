/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class QuestReferenceAlias :
        AQuestAlias,
        IEquatable<IQuestReferenceAliasGetter>,
        ILoquiObjectSetter<QuestReferenceAlias>,
        IQuestReferenceAlias
    {
        #region Ctor
        public QuestReferenceAlias()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ID
        public UInt32 ID { get; set; } = default(UInt32);
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedRequired
        /// </summary>
        public String Name { get; set; } = string.Empty;
        #endregion
        #region Flags
        public AQuestAlias.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AQuestAlias.Flag? IQuestReferenceAliasGetter.Flags => this.Flags;
        #endregion
        #region ALFG
        public UInt32? ALFG { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IQuestReferenceAliasGetter.ALFG => this.ALFG;
        #endregion
        #region LegendaryRank
        public Byte? LegendaryRank { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IQuestReferenceAliasGetter.LegendaryRank => this.LegendaryRank;
        #endregion
        #region AliasIDToForceIntoWhenFilled
        public Int32? AliasIDToForceIntoWhenFilled { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IQuestReferenceAliasGetter.AliasIDToForceIntoWhenFilled => this.AliasIDToForceIntoWhenFilled;
        #endregion
        #region ClosestToAlias
        public Int32? ClosestToAlias { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IQuestReferenceAliasGetter.ClosestToAlias => this.ClosestToAlias;
        #endregion
        #region ForcedReference
        private readonly IFormLinkNullable<IPlacedGetter> _ForcedReference = new FormLinkNullable<IPlacedGetter>();
        public IFormLinkNullable<IPlacedGetter> ForcedReference
        {
            get => _ForcedReference;
            set => _ForcedReference.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedGetter> IQuestReferenceAliasGetter.ForcedReference => this.ForcedReference;
        #endregion
        #region Location
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LocationAliasReference? _Location;
        public LocationAliasReference? Location
        {
            get => _Location;
            set => _Location = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILocationAliasReferenceGetter? IQuestReferenceAliasGetter.Location => this.Location;
        #endregion
        #region FindMatchingRefFromEvent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FindMatchingRefFromEvent? _FindMatchingRefFromEvent;
        public FindMatchingRefFromEvent? FindMatchingRefFromEvent
        {
            get => _FindMatchingRefFromEvent;
            set => _FindMatchingRefFromEvent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFindMatchingRefFromEventGetter? IQuestReferenceAliasGetter.FindMatchingRefFromEvent => this.FindMatchingRefFromEvent;
        #endregion
        #region CreateReferenceToObject
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CreateReferenceToObject? _CreateReferenceToObject;
        public CreateReferenceToObject? CreateReferenceToObject
        {
            get => _CreateReferenceToObject;
            set => _CreateReferenceToObject = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICreateReferenceToObjectGetter? IQuestReferenceAliasGetter.CreateReferenceToObject => this.CreateReferenceToObject;
        #endregion
        #region External
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExternalAliasReference? _External;
        public ExternalAliasReference? External
        {
            get => _External;
            set => _External = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IExternalAliasReferenceGetter? IQuestReferenceAliasGetter.External => this.External;
        #endregion
        #region UniqueActor
        private readonly IFormLinkNullable<INpcGetter> _UniqueActor = new FormLinkNullable<INpcGetter>();
        public IFormLinkNullable<INpcGetter> UniqueActor
        {
            get => _UniqueActor;
            set => _UniqueActor.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<INpcGetter> IQuestReferenceAliasGetter.UniqueActor => this.UniqueActor;
        #endregion
        #region UniqueBaseForm
        private readonly IFormLinkNullable<IGenericBaseFormGetter> _UniqueBaseForm = new FormLinkNullable<IGenericBaseFormGetter>();
        public IFormLinkNullable<IGenericBaseFormGetter> UniqueBaseForm
        {
            get => _UniqueBaseForm;
            set => _UniqueBaseForm.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGenericBaseFormGetter> IQuestReferenceAliasGetter.UniqueBaseForm => this.UniqueBaseForm;
        #endregion
        #region FindMatchingRefNearAlias
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FindMatchingRefNearAlias? _FindMatchingRefNearAlias;
        public FindMatchingRefNearAlias? FindMatchingRefNearAlias
        {
            get => _FindMatchingRefNearAlias;
            set => _FindMatchingRefNearAlias = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFindMatchingRefNearAliasGetter? IQuestReferenceAliasGetter.FindMatchingRefNearAlias => this.FindMatchingRefNearAlias;
        #endregion
        #region ReferenceCollectionAliasID
        public Int32? ReferenceCollectionAliasID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IQuestReferenceAliasGetter.ReferenceCollectionAliasID => this.ReferenceCollectionAliasID;
        #endregion
        #region CreateObjectTemplate
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CreateObjectTemplate? _CreateObjectTemplate;
        public CreateObjectTemplate? CreateObjectTemplate
        {
            get => _CreateObjectTemplate;
            set => _CreateObjectTemplate = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICreateObjectTemplateGetter? IQuestReferenceAliasGetter.CreateObjectTemplate => this.CreateObjectTemplate;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IQuestReferenceAliasGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IQuestReferenceAliasGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ContainerEntry>? _Items;
        public ExtendedList<ContainerEntry>? Items
        {
            get => this._Items;
            set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IContainerEntryGetter>? IQuestReferenceAliasGetter.Items => _Items;
        #endregion

        #endregion
        #region SpectatorOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _SpectatorOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> SpectatorOverridePackageList
        {
            get => _SpectatorOverridePackageList;
            set => _SpectatorOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IQuestReferenceAliasGetter.SpectatorOverridePackageList => this.SpectatorOverridePackageList;
        #endregion
        #region ObserveDeadBodyOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _ObserveDeadBodyOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList
        {
            get => _ObserveDeadBodyOverridePackageList;
            set => _ObserveDeadBodyOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IQuestReferenceAliasGetter.ObserveDeadBodyOverridePackageList => this.ObserveDeadBodyOverridePackageList;
        #endregion
        #region GuardWarnOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _GuardWarnOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> GuardWarnOverridePackageList
        {
            get => _GuardWarnOverridePackageList;
            set => _GuardWarnOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IQuestReferenceAliasGetter.GuardWarnOverridePackageList => this.GuardWarnOverridePackageList;
        #endregion
        #region CombatOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _CombatOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> CombatOverridePackageList
        {
            get => _CombatOverridePackageList;
            set => _CombatOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IQuestReferenceAliasGetter.CombatOverridePackageList => this.CombatOverridePackageList;
        #endregion
        #region LinkedAliases
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LinkedAlias>? _LinkedAliases;
        public ExtendedList<LinkedAlias>? LinkedAliases
        {
            get => this._LinkedAliases;
            set => this._LinkedAliases = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILinkedAliasGetter>? IQuestReferenceAliasGetter.LinkedAliases => _LinkedAliases;
        #endregion

        #endregion
        #region DisplayName
        private readonly IFormLinkNullable<IMessageGetter> _DisplayName = new FormLinkNullable<IMessageGetter>();
        public IFormLinkNullable<IMessageGetter> DisplayName
        {
            get => _DisplayName;
            set => _DisplayName.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMessageGetter> IQuestReferenceAliasGetter.DisplayName => this.DisplayName;
        #endregion
        #region DeathItem
        private readonly IFormLinkNullable<ILeveledItemGetter> _DeathItem = new FormLinkNullable<ILeveledItemGetter>();
        public IFormLinkNullable<ILeveledItemGetter> DeathItem
        {
            get => _DeathItem;
            set => _DeathItem.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILeveledItemGetter> IQuestReferenceAliasGetter.DeathItem => this.DeathItem;
        #endregion
        #region ForcedVoice
        private readonly IFormLinkNullable<IVoiceTypeGetter> _ForcedVoice = new FormLinkNullable<IVoiceTypeGetter>();
        public IFormLinkNullable<IVoiceTypeGetter> ForcedVoice
        {
            get => _ForcedVoice;
            set => _ForcedVoice.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IVoiceTypeGetter> IQuestReferenceAliasGetter.ForcedVoice => this.ForcedVoice;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISpellGetter>> _Spells = new ExtendedList<IFormLinkGetter<ISpellGetter>>();
        public ExtendedList<IFormLinkGetter<ISpellGetter>> Spells
        {
            get => this._Spells;
            init => this._Spells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISpellGetter>> IQuestReferenceAliasGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IFactionGetter>> _Factions = new ExtendedList<IFormLinkGetter<IFactionGetter>>();
        public ExtendedList<IFormLinkGetter<IFactionGetter>> Factions
        {
            get => this._Factions;
            init => this._Factions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IFactionGetter>> IQuestReferenceAliasGetter.Factions => _Factions;
        #endregion

        #endregion
        #region PackageData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPackageGetter>> _PackageData = new ExtendedList<IFormLinkGetter<IPackageGetter>>();
        public ExtendedList<IFormLinkGetter<IPackageGetter>> PackageData
        {
            get => this._PackageData;
            init => this._PackageData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPackageGetter>> IQuestReferenceAliasGetter.PackageData => _PackageData;
        #endregion

        #endregion
        #region ScriptComment
        public String? ScriptComment { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IQuestReferenceAliasGetter.ScriptComment => this.ScriptComment;
        #endregion
        #region VoiceTypes
        private readonly IFormLinkNullable<IAliasVoiceTypeGetter> _VoiceTypes = new FormLinkNullable<IAliasVoiceTypeGetter>();
        public IFormLinkNullable<IAliasVoiceTypeGetter> VoiceTypes
        {
            get => _VoiceTypes;
            set => _VoiceTypes.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAliasVoiceTypeGetter> IQuestReferenceAliasGetter.VoiceTypes => this.VoiceTypes;
        #endregion
        #region TerminalMenus
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ITerminalGetter>> _TerminalMenus = new ExtendedList<IFormLinkGetter<ITerminalGetter>>();
        public ExtendedList<IFormLinkGetter<ITerminalGetter>> TerminalMenus
        {
            get => this._TerminalMenus;
            init => this._TerminalMenus = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ITerminalGetter>> IQuestReferenceAliasGetter.TerminalMenus => _TerminalMenus;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestReferenceAliasMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IQuestReferenceAliasGetter rhs) return false;
            return ((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestReferenceAliasGetter? obj)
        {
            return ((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AQuestAlias.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ID = initialValue;
                this.Name = initialValue;
                this.Flags = initialValue;
                this.ALFG = initialValue;
                this.LegendaryRank = initialValue;
                this.AliasIDToForceIntoWhenFilled = initialValue;
                this.ClosestToAlias = initialValue;
                this.ForcedReference = initialValue;
                this.Location = new MaskItem<TItem, LocationAliasReference.Mask<TItem>?>(initialValue, new LocationAliasReference.Mask<TItem>(initialValue));
                this.FindMatchingRefFromEvent = new MaskItem<TItem, FindMatchingRefFromEvent.Mask<TItem>?>(initialValue, new FindMatchingRefFromEvent.Mask<TItem>(initialValue));
                this.CreateReferenceToObject = new MaskItem<TItem, CreateReferenceToObject.Mask<TItem>?>(initialValue, new CreateReferenceToObject.Mask<TItem>(initialValue));
                this.External = new MaskItem<TItem, ExternalAliasReference.Mask<TItem>?>(initialValue, new ExternalAliasReference.Mask<TItem>(initialValue));
                this.UniqueActor = initialValue;
                this.UniqueBaseForm = initialValue;
                this.FindMatchingRefNearAlias = new MaskItem<TItem, FindMatchingRefNearAlias.Mask<TItem>?>(initialValue, new FindMatchingRefNearAlias.Mask<TItem>(initialValue));
                this.ReferenceCollectionAliasID = initialValue;
                this.CreateObjectTemplate = new MaskItem<TItem, CreateObjectTemplate.Mask<TItem>?>(initialValue, new CreateObjectTemplate.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.SpectatorOverridePackageList = initialValue;
                this.ObserveDeadBodyOverridePackageList = initialValue;
                this.GuardWarnOverridePackageList = initialValue;
                this.CombatOverridePackageList = initialValue;
                this.LinkedAliases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedAlias.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LinkedAlias.Mask<TItem>?>>());
                this.DisplayName = initialValue;
                this.DeathItem = initialValue;
                this.ForcedVoice = initialValue;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Factions = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.PackageData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ScriptComment = initialValue;
                this.VoiceTypes = initialValue;
                this.TerminalMenus = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem ID,
                TItem Name,
                TItem Flags,
                TItem ALFG,
                TItem LegendaryRank,
                TItem AliasIDToForceIntoWhenFilled,
                TItem ClosestToAlias,
                TItem ForcedReference,
                TItem Location,
                TItem FindMatchingRefFromEvent,
                TItem CreateReferenceToObject,
                TItem External,
                TItem UniqueActor,
                TItem UniqueBaseForm,
                TItem FindMatchingRefNearAlias,
                TItem ReferenceCollectionAliasID,
                TItem CreateObjectTemplate,
                TItem Conditions,
                TItem Keywords,
                TItem Items,
                TItem SpectatorOverridePackageList,
                TItem ObserveDeadBodyOverridePackageList,
                TItem GuardWarnOverridePackageList,
                TItem CombatOverridePackageList,
                TItem LinkedAliases,
                TItem DisplayName,
                TItem DeathItem,
                TItem ForcedVoice,
                TItem Spells,
                TItem Factions,
                TItem PackageData,
                TItem ScriptComment,
                TItem VoiceTypes,
                TItem TerminalMenus)
            : base()
            {
                this.ID = ID;
                this.Name = Name;
                this.Flags = Flags;
                this.ALFG = ALFG;
                this.LegendaryRank = LegendaryRank;
                this.AliasIDToForceIntoWhenFilled = AliasIDToForceIntoWhenFilled;
                this.ClosestToAlias = ClosestToAlias;
                this.ForcedReference = ForcedReference;
                this.Location = new MaskItem<TItem, LocationAliasReference.Mask<TItem>?>(Location, new LocationAliasReference.Mask<TItem>(Location));
                this.FindMatchingRefFromEvent = new MaskItem<TItem, FindMatchingRefFromEvent.Mask<TItem>?>(FindMatchingRefFromEvent, new FindMatchingRefFromEvent.Mask<TItem>(FindMatchingRefFromEvent));
                this.CreateReferenceToObject = new MaskItem<TItem, CreateReferenceToObject.Mask<TItem>?>(CreateReferenceToObject, new CreateReferenceToObject.Mask<TItem>(CreateReferenceToObject));
                this.External = new MaskItem<TItem, ExternalAliasReference.Mask<TItem>?>(External, new ExternalAliasReference.Mask<TItem>(External));
                this.UniqueActor = UniqueActor;
                this.UniqueBaseForm = UniqueBaseForm;
                this.FindMatchingRefNearAlias = new MaskItem<TItem, FindMatchingRefNearAlias.Mask<TItem>?>(FindMatchingRefNearAlias, new FindMatchingRefNearAlias.Mask<TItem>(FindMatchingRefNearAlias));
                this.ReferenceCollectionAliasID = ReferenceCollectionAliasID;
                this.CreateObjectTemplate = new MaskItem<TItem, CreateObjectTemplate.Mask<TItem>?>(CreateObjectTemplate, new CreateObjectTemplate.Mask<TItem>(CreateObjectTemplate));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.SpectatorOverridePackageList = SpectatorOverridePackageList;
                this.ObserveDeadBodyOverridePackageList = ObserveDeadBodyOverridePackageList;
                this.GuardWarnOverridePackageList = GuardWarnOverridePackageList;
                this.CombatOverridePackageList = CombatOverridePackageList;
                this.LinkedAliases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedAlias.Mask<TItem>?>>?>(LinkedAliases, Enumerable.Empty<MaskItemIndexed<TItem, LinkedAlias.Mask<TItem>?>>());
                this.DisplayName = DisplayName;
                this.DeathItem = DeathItem;
                this.ForcedVoice = ForcedVoice;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Spells, Enumerable.Empty<(int Index, TItem Value)>());
                this.Factions = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Factions, Enumerable.Empty<(int Index, TItem Value)>());
                this.PackageData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(PackageData, Enumerable.Empty<(int Index, TItem Value)>());
                this.ScriptComment = ScriptComment;
                this.VoiceTypes = VoiceTypes;
                this.TerminalMenus = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(TerminalMenus, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ID;
            public TItem Name;
            public TItem Flags;
            public TItem ALFG;
            public TItem LegendaryRank;
            public TItem AliasIDToForceIntoWhenFilled;
            public TItem ClosestToAlias;
            public TItem ForcedReference;
            public MaskItem<TItem, LocationAliasReference.Mask<TItem>?>? Location { get; set; }
            public MaskItem<TItem, FindMatchingRefFromEvent.Mask<TItem>?>? FindMatchingRefFromEvent { get; set; }
            public MaskItem<TItem, CreateReferenceToObject.Mask<TItem>?>? CreateReferenceToObject { get; set; }
            public MaskItem<TItem, ExternalAliasReference.Mask<TItem>?>? External { get; set; }
            public TItem UniqueActor;
            public TItem UniqueBaseForm;
            public MaskItem<TItem, FindMatchingRefNearAlias.Mask<TItem>?>? FindMatchingRefNearAlias { get; set; }
            public TItem ReferenceCollectionAliasID;
            public MaskItem<TItem, CreateObjectTemplate.Mask<TItem>?>? CreateObjectTemplate { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>? Items;
            public TItem SpectatorOverridePackageList;
            public TItem ObserveDeadBodyOverridePackageList;
            public TItem GuardWarnOverridePackageList;
            public TItem CombatOverridePackageList;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedAlias.Mask<TItem>?>>?>? LinkedAliases;
            public TItem DisplayName;
            public TItem DeathItem;
            public TItem ForcedVoice;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Spells;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Factions;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? PackageData;
            public TItem ScriptComment;
            public TItem VoiceTypes;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? TerminalMenus;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ID, rhs.ID)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.ALFG, rhs.ALFG)) return false;
                if (!object.Equals(this.LegendaryRank, rhs.LegendaryRank)) return false;
                if (!object.Equals(this.AliasIDToForceIntoWhenFilled, rhs.AliasIDToForceIntoWhenFilled)) return false;
                if (!object.Equals(this.ClosestToAlias, rhs.ClosestToAlias)) return false;
                if (!object.Equals(this.ForcedReference, rhs.ForcedReference)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.FindMatchingRefFromEvent, rhs.FindMatchingRefFromEvent)) return false;
                if (!object.Equals(this.CreateReferenceToObject, rhs.CreateReferenceToObject)) return false;
                if (!object.Equals(this.External, rhs.External)) return false;
                if (!object.Equals(this.UniqueActor, rhs.UniqueActor)) return false;
                if (!object.Equals(this.UniqueBaseForm, rhs.UniqueBaseForm)) return false;
                if (!object.Equals(this.FindMatchingRefNearAlias, rhs.FindMatchingRefNearAlias)) return false;
                if (!object.Equals(this.ReferenceCollectionAliasID, rhs.ReferenceCollectionAliasID)) return false;
                if (!object.Equals(this.CreateObjectTemplate, rhs.CreateObjectTemplate)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.SpectatorOverridePackageList, rhs.SpectatorOverridePackageList)) return false;
                if (!object.Equals(this.ObserveDeadBodyOverridePackageList, rhs.ObserveDeadBodyOverridePackageList)) return false;
                if (!object.Equals(this.GuardWarnOverridePackageList, rhs.GuardWarnOverridePackageList)) return false;
                if (!object.Equals(this.CombatOverridePackageList, rhs.CombatOverridePackageList)) return false;
                if (!object.Equals(this.LinkedAliases, rhs.LinkedAliases)) return false;
                if (!object.Equals(this.DisplayName, rhs.DisplayName)) return false;
                if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
                if (!object.Equals(this.ForcedVoice, rhs.ForcedVoice)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.PackageData, rhs.PackageData)) return false;
                if (!object.Equals(this.ScriptComment, rhs.ScriptComment)) return false;
                if (!object.Equals(this.VoiceTypes, rhs.VoiceTypes)) return false;
                if (!object.Equals(this.TerminalMenus, rhs.TerminalMenus)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ID);
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.ALFG);
                hash.Add(this.LegendaryRank);
                hash.Add(this.AliasIDToForceIntoWhenFilled);
                hash.Add(this.ClosestToAlias);
                hash.Add(this.ForcedReference);
                hash.Add(this.Location);
                hash.Add(this.FindMatchingRefFromEvent);
                hash.Add(this.CreateReferenceToObject);
                hash.Add(this.External);
                hash.Add(this.UniqueActor);
                hash.Add(this.UniqueBaseForm);
                hash.Add(this.FindMatchingRefNearAlias);
                hash.Add(this.ReferenceCollectionAliasID);
                hash.Add(this.CreateObjectTemplate);
                hash.Add(this.Conditions);
                hash.Add(this.Keywords);
                hash.Add(this.Items);
                hash.Add(this.SpectatorOverridePackageList);
                hash.Add(this.ObserveDeadBodyOverridePackageList);
                hash.Add(this.GuardWarnOverridePackageList);
                hash.Add(this.CombatOverridePackageList);
                hash.Add(this.LinkedAliases);
                hash.Add(this.DisplayName);
                hash.Add(this.DeathItem);
                hash.Add(this.ForcedVoice);
                hash.Add(this.Spells);
                hash.Add(this.Factions);
                hash.Add(this.PackageData);
                hash.Add(this.ScriptComment);
                hash.Add(this.VoiceTypes);
                hash.Add(this.TerminalMenus);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.ID)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.ALFG)) return false;
                if (!eval(this.LegendaryRank)) return false;
                if (!eval(this.AliasIDToForceIntoWhenFilled)) return false;
                if (!eval(this.ClosestToAlias)) return false;
                if (!eval(this.ForcedReference)) return false;
                if (Location != null)
                {
                    if (!eval(this.Location.Overall)) return false;
                    if (this.Location.Specific != null && !this.Location.Specific.All(eval)) return false;
                }
                if (FindMatchingRefFromEvent != null)
                {
                    if (!eval(this.FindMatchingRefFromEvent.Overall)) return false;
                    if (this.FindMatchingRefFromEvent.Specific != null && !this.FindMatchingRefFromEvent.Specific.All(eval)) return false;
                }
                if (CreateReferenceToObject != null)
                {
                    if (!eval(this.CreateReferenceToObject.Overall)) return false;
                    if (this.CreateReferenceToObject.Specific != null && !this.CreateReferenceToObject.Specific.All(eval)) return false;
                }
                if (External != null)
                {
                    if (!eval(this.External.Overall)) return false;
                    if (this.External.Specific != null && !this.External.Specific.All(eval)) return false;
                }
                if (!eval(this.UniqueActor)) return false;
                if (!eval(this.UniqueBaseForm)) return false;
                if (FindMatchingRefNearAlias != null)
                {
                    if (!eval(this.FindMatchingRefNearAlias.Overall)) return false;
                    if (this.FindMatchingRefNearAlias.Specific != null && !this.FindMatchingRefNearAlias.Specific.All(eval)) return false;
                }
                if (!eval(this.ReferenceCollectionAliasID)) return false;
                if (CreateObjectTemplate != null)
                {
                    if (!eval(this.CreateObjectTemplate.Overall)) return false;
                    if (this.CreateObjectTemplate.Specific != null && !this.CreateObjectTemplate.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SpectatorOverridePackageList)) return false;
                if (!eval(this.ObserveDeadBodyOverridePackageList)) return false;
                if (!eval(this.GuardWarnOverridePackageList)) return false;
                if (!eval(this.CombatOverridePackageList)) return false;
                if (this.LinkedAliases != null)
                {
                    if (!eval(this.LinkedAliases.Overall)) return false;
                    if (this.LinkedAliases.Specific != null)
                    {
                        foreach (var item in this.LinkedAliases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DisplayName)) return false;
                if (!eval(this.DeathItem)) return false;
                if (!eval(this.ForcedVoice)) return false;
                if (this.Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.PackageData != null)
                {
                    if (!eval(this.PackageData.Overall)) return false;
                    if (this.PackageData.Specific != null)
                    {
                        foreach (var item in this.PackageData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ScriptComment)) return false;
                if (!eval(this.VoiceTypes)) return false;
                if (this.TerminalMenus != null)
                {
                    if (!eval(this.TerminalMenus.Overall)) return false;
                    if (this.TerminalMenus.Specific != null)
                    {
                        foreach (var item in this.TerminalMenus.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.ID)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.ALFG)) return true;
                if (eval(this.LegendaryRank)) return true;
                if (eval(this.AliasIDToForceIntoWhenFilled)) return true;
                if (eval(this.ClosestToAlias)) return true;
                if (eval(this.ForcedReference)) return true;
                if (Location != null)
                {
                    if (eval(this.Location.Overall)) return true;
                    if (this.Location.Specific != null && this.Location.Specific.Any(eval)) return true;
                }
                if (FindMatchingRefFromEvent != null)
                {
                    if (eval(this.FindMatchingRefFromEvent.Overall)) return true;
                    if (this.FindMatchingRefFromEvent.Specific != null && this.FindMatchingRefFromEvent.Specific.Any(eval)) return true;
                }
                if (CreateReferenceToObject != null)
                {
                    if (eval(this.CreateReferenceToObject.Overall)) return true;
                    if (this.CreateReferenceToObject.Specific != null && this.CreateReferenceToObject.Specific.Any(eval)) return true;
                }
                if (External != null)
                {
                    if (eval(this.External.Overall)) return true;
                    if (this.External.Specific != null && this.External.Specific.Any(eval)) return true;
                }
                if (eval(this.UniqueActor)) return true;
                if (eval(this.UniqueBaseForm)) return true;
                if (FindMatchingRefNearAlias != null)
                {
                    if (eval(this.FindMatchingRefNearAlias.Overall)) return true;
                    if (this.FindMatchingRefNearAlias.Specific != null && this.FindMatchingRefNearAlias.Specific.Any(eval)) return true;
                }
                if (eval(this.ReferenceCollectionAliasID)) return true;
                if (CreateObjectTemplate != null)
                {
                    if (eval(this.CreateObjectTemplate.Overall)) return true;
                    if (this.CreateObjectTemplate.Specific != null && this.CreateObjectTemplate.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SpectatorOverridePackageList)) return true;
                if (eval(this.ObserveDeadBodyOverridePackageList)) return true;
                if (eval(this.GuardWarnOverridePackageList)) return true;
                if (eval(this.CombatOverridePackageList)) return true;
                if (this.LinkedAliases != null)
                {
                    if (eval(this.LinkedAliases.Overall)) return true;
                    if (this.LinkedAliases.Specific != null)
                    {
                        foreach (var item in this.LinkedAliases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DisplayName)) return true;
                if (eval(this.DeathItem)) return true;
                if (eval(this.ForcedVoice)) return true;
                if (this.Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.PackageData != null)
                {
                    if (eval(this.PackageData.Overall)) return true;
                    if (this.PackageData.Specific != null)
                    {
                        foreach (var item in this.PackageData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ScriptComment)) return true;
                if (eval(this.VoiceTypes)) return true;
                if (this.TerminalMenus != null)
                {
                    if (eval(this.TerminalMenus.Overall)) return true;
                    if (this.TerminalMenus.Specific != null)
                    {
                        foreach (var item in this.TerminalMenus.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new QuestReferenceAlias.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ID = eval(this.ID);
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.ALFG = eval(this.ALFG);
                obj.LegendaryRank = eval(this.LegendaryRank);
                obj.AliasIDToForceIntoWhenFilled = eval(this.AliasIDToForceIntoWhenFilled);
                obj.ClosestToAlias = eval(this.ClosestToAlias);
                obj.ForcedReference = eval(this.ForcedReference);
                obj.Location = this.Location == null ? null : new MaskItem<R, LocationAliasReference.Mask<R>?>(eval(this.Location.Overall), this.Location.Specific?.Translate(eval));
                obj.FindMatchingRefFromEvent = this.FindMatchingRefFromEvent == null ? null : new MaskItem<R, FindMatchingRefFromEvent.Mask<R>?>(eval(this.FindMatchingRefFromEvent.Overall), this.FindMatchingRefFromEvent.Specific?.Translate(eval));
                obj.CreateReferenceToObject = this.CreateReferenceToObject == null ? null : new MaskItem<R, CreateReferenceToObject.Mask<R>?>(eval(this.CreateReferenceToObject.Overall), this.CreateReferenceToObject.Specific?.Translate(eval));
                obj.External = this.External == null ? null : new MaskItem<R, ExternalAliasReference.Mask<R>?>(eval(this.External.Overall), this.External.Specific?.Translate(eval));
                obj.UniqueActor = eval(this.UniqueActor);
                obj.UniqueBaseForm = eval(this.UniqueBaseForm);
                obj.FindMatchingRefNearAlias = this.FindMatchingRefNearAlias == null ? null : new MaskItem<R, FindMatchingRefNearAlias.Mask<R>?>(eval(this.FindMatchingRefNearAlias.Overall), this.FindMatchingRefNearAlias.Specific?.Translate(eval));
                obj.ReferenceCollectionAliasID = eval(this.ReferenceCollectionAliasID);
                obj.CreateObjectTemplate = this.CreateObjectTemplate == null ? null : new MaskItem<R, CreateObjectTemplate.Mask<R>?>(eval(this.CreateObjectTemplate.Overall), this.CreateObjectTemplate.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific)
                        {
                            MaskItemIndexed<R, ContainerEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ContainerEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SpectatorOverridePackageList = eval(this.SpectatorOverridePackageList);
                obj.ObserveDeadBodyOverridePackageList = eval(this.ObserveDeadBodyOverridePackageList);
                obj.GuardWarnOverridePackageList = eval(this.GuardWarnOverridePackageList);
                obj.CombatOverridePackageList = eval(this.CombatOverridePackageList);
                if (LinkedAliases != null)
                {
                    obj.LinkedAliases = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LinkedAlias.Mask<R>?>>?>(eval(this.LinkedAliases.Overall), Enumerable.Empty<MaskItemIndexed<R, LinkedAlias.Mask<R>?>>());
                    if (LinkedAliases.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LinkedAlias.Mask<R>?>>();
                        obj.LinkedAliases.Specific = l;
                        foreach (var item in LinkedAliases.Specific)
                        {
                            MaskItemIndexed<R, LinkedAlias.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LinkedAlias.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DisplayName = eval(this.DisplayName);
                obj.DeathItem = eval(this.DeathItem);
                obj.ForcedVoice = eval(this.ForcedVoice);
                if (Spells != null)
                {
                    obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Spells.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Spells.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Spells.Specific = l;
                        foreach (var item in Spells.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Factions != null)
                {
                    obj.Factions = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Factions.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Factions.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Factions.Specific = l;
                        foreach (var item in Factions.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (PackageData != null)
                {
                    obj.PackageData = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.PackageData.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (PackageData.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.PackageData.Specific = l;
                        foreach (var item in PackageData.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ScriptComment = eval(this.ScriptComment);
                obj.VoiceTypes = eval(this.VoiceTypes);
                if (TerminalMenus != null)
                {
                    obj.TerminalMenus = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.TerminalMenus.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (TerminalMenus.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.TerminalMenus.Specific = l;
                        foreach (var item in TerminalMenus.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(QuestReferenceAlias.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, QuestReferenceAlias.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(QuestReferenceAlias.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ID ?? true)
                    {
                        sb.AppendItem(ID, "ID");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.ALFG ?? true)
                    {
                        sb.AppendItem(ALFG, "ALFG");
                    }
                    if (printMask?.LegendaryRank ?? true)
                    {
                        sb.AppendItem(LegendaryRank, "LegendaryRank");
                    }
                    if (printMask?.AliasIDToForceIntoWhenFilled ?? true)
                    {
                        sb.AppendItem(AliasIDToForceIntoWhenFilled, "AliasIDToForceIntoWhenFilled");
                    }
                    if (printMask?.ClosestToAlias ?? true)
                    {
                        sb.AppendItem(ClosestToAlias, "ClosestToAlias");
                    }
                    if (printMask?.ForcedReference ?? true)
                    {
                        sb.AppendItem(ForcedReference, "ForcedReference");
                    }
                    if (printMask?.Location?.Overall ?? true)
                    {
                        Location?.Print(sb);
                    }
                    if (printMask?.FindMatchingRefFromEvent?.Overall ?? true)
                    {
                        FindMatchingRefFromEvent?.Print(sb);
                    }
                    if (printMask?.CreateReferenceToObject?.Overall ?? true)
                    {
                        CreateReferenceToObject?.Print(sb);
                    }
                    if (printMask?.External?.Overall ?? true)
                    {
                        External?.Print(sb);
                    }
                    if (printMask?.UniqueActor ?? true)
                    {
                        sb.AppendItem(UniqueActor, "UniqueActor");
                    }
                    if (printMask?.UniqueBaseForm ?? true)
                    {
                        sb.AppendItem(UniqueBaseForm, "UniqueBaseForm");
                    }
                    if (printMask?.FindMatchingRefNearAlias?.Overall ?? true)
                    {
                        FindMatchingRefNearAlias?.Print(sb);
                    }
                    if (printMask?.ReferenceCollectionAliasID ?? true)
                    {
                        sb.AppendItem(ReferenceCollectionAliasID, "ReferenceCollectionAliasID");
                    }
                    if (printMask?.CreateObjectTemplate?.Overall ?? true)
                    {
                        CreateObjectTemplate?.Print(sb);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items is {} ItemsItem)
                    {
                        sb.AppendLine("Items =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SpectatorOverridePackageList ?? true)
                    {
                        sb.AppendItem(SpectatorOverridePackageList, "SpectatorOverridePackageList");
                    }
                    if (printMask?.ObserveDeadBodyOverridePackageList ?? true)
                    {
                        sb.AppendItem(ObserveDeadBodyOverridePackageList, "ObserveDeadBodyOverridePackageList");
                    }
                    if (printMask?.GuardWarnOverridePackageList ?? true)
                    {
                        sb.AppendItem(GuardWarnOverridePackageList, "GuardWarnOverridePackageList");
                    }
                    if (printMask?.CombatOverridePackageList ?? true)
                    {
                        sb.AppendItem(CombatOverridePackageList, "CombatOverridePackageList");
                    }
                    if ((printMask?.LinkedAliases?.Overall ?? true)
                        && LinkedAliases is {} LinkedAliasesItem)
                    {
                        sb.AppendLine("LinkedAliases =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LinkedAliasesItem.Overall);
                            if (LinkedAliasesItem.Specific != null)
                            {
                                foreach (var subItem in LinkedAliasesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.DisplayName ?? true)
                    {
                        sb.AppendItem(DisplayName, "DisplayName");
                    }
                    if (printMask?.DeathItem ?? true)
                    {
                        sb.AppendItem(DeathItem, "DeathItem");
                    }
                    if (printMask?.ForcedVoice ?? true)
                    {
                        sb.AppendItem(ForcedVoice, "ForcedVoice");
                    }
                    if ((printMask?.Spells?.Overall ?? true)
                        && Spells is {} SpellsItem)
                    {
                        sb.AppendLine("Spells =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SpellsItem.Overall);
                            if (SpellsItem.Specific != null)
                            {
                                foreach (var subItem in SpellsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Factions?.Overall ?? true)
                        && Factions is {} FactionsItem)
                    {
                        sb.AppendLine("Factions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FactionsItem.Overall);
                            if (FactionsItem.Specific != null)
                            {
                                foreach (var subItem in FactionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.PackageData?.Overall ?? true)
                        && PackageData is {} PackageDataItem)
                    {
                        sb.AppendLine("PackageData =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PackageDataItem.Overall);
                            if (PackageDataItem.Specific != null)
                            {
                                foreach (var subItem in PackageDataItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ScriptComment ?? true)
                    {
                        sb.AppendItem(ScriptComment, "ScriptComment");
                    }
                    if (printMask?.VoiceTypes ?? true)
                    {
                        sb.AppendItem(VoiceTypes, "VoiceTypes");
                    }
                    if ((printMask?.TerminalMenus?.Overall ?? true)
                        && TerminalMenus is {} TerminalMenusItem)
                    {
                        sb.AppendLine("TerminalMenus =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TerminalMenusItem.Overall);
                            if (TerminalMenusItem.Specific != null)
                            {
                                foreach (var subItem in TerminalMenusItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AQuestAlias.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ID;
            public Exception? Name;
            public Exception? Flags;
            public Exception? ALFG;
            public Exception? LegendaryRank;
            public Exception? AliasIDToForceIntoWhenFilled;
            public Exception? ClosestToAlias;
            public Exception? ForcedReference;
            public MaskItem<Exception?, LocationAliasReference.ErrorMask?>? Location;
            public MaskItem<Exception?, FindMatchingRefFromEvent.ErrorMask?>? FindMatchingRefFromEvent;
            public MaskItem<Exception?, CreateReferenceToObject.ErrorMask?>? CreateReferenceToObject;
            public MaskItem<Exception?, ExternalAliasReference.ErrorMask?>? External;
            public Exception? UniqueActor;
            public Exception? UniqueBaseForm;
            public MaskItem<Exception?, FindMatchingRefNearAlias.ErrorMask?>? FindMatchingRefNearAlias;
            public Exception? ReferenceCollectionAliasID;
            public MaskItem<Exception?, CreateObjectTemplate.ErrorMask?>? CreateObjectTemplate;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>? Items;
            public Exception? SpectatorOverridePackageList;
            public Exception? ObserveDeadBodyOverridePackageList;
            public Exception? GuardWarnOverridePackageList;
            public Exception? CombatOverridePackageList;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedAlias.ErrorMask?>>?>? LinkedAliases;
            public Exception? DisplayName;
            public Exception? DeathItem;
            public Exception? ForcedVoice;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Spells;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Factions;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? PackageData;
            public Exception? ScriptComment;
            public Exception? VoiceTypes;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? TerminalMenus;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                QuestReferenceAlias_FieldIndex enu = (QuestReferenceAlias_FieldIndex)index;
                switch (enu)
                {
                    case QuestReferenceAlias_FieldIndex.ID:
                        return ID;
                    case QuestReferenceAlias_FieldIndex.Name:
                        return Name;
                    case QuestReferenceAlias_FieldIndex.Flags:
                        return Flags;
                    case QuestReferenceAlias_FieldIndex.ALFG:
                        return ALFG;
                    case QuestReferenceAlias_FieldIndex.LegendaryRank:
                        return LegendaryRank;
                    case QuestReferenceAlias_FieldIndex.AliasIDToForceIntoWhenFilled:
                        return AliasIDToForceIntoWhenFilled;
                    case QuestReferenceAlias_FieldIndex.ClosestToAlias:
                        return ClosestToAlias;
                    case QuestReferenceAlias_FieldIndex.ForcedReference:
                        return ForcedReference;
                    case QuestReferenceAlias_FieldIndex.Location:
                        return Location;
                    case QuestReferenceAlias_FieldIndex.FindMatchingRefFromEvent:
                        return FindMatchingRefFromEvent;
                    case QuestReferenceAlias_FieldIndex.CreateReferenceToObject:
                        return CreateReferenceToObject;
                    case QuestReferenceAlias_FieldIndex.External:
                        return External;
                    case QuestReferenceAlias_FieldIndex.UniqueActor:
                        return UniqueActor;
                    case QuestReferenceAlias_FieldIndex.UniqueBaseForm:
                        return UniqueBaseForm;
                    case QuestReferenceAlias_FieldIndex.FindMatchingRefNearAlias:
                        return FindMatchingRefNearAlias;
                    case QuestReferenceAlias_FieldIndex.ReferenceCollectionAliasID:
                        return ReferenceCollectionAliasID;
                    case QuestReferenceAlias_FieldIndex.CreateObjectTemplate:
                        return CreateObjectTemplate;
                    case QuestReferenceAlias_FieldIndex.Conditions:
                        return Conditions;
                    case QuestReferenceAlias_FieldIndex.Keywords:
                        return Keywords;
                    case QuestReferenceAlias_FieldIndex.Items:
                        return Items;
                    case QuestReferenceAlias_FieldIndex.SpectatorOverridePackageList:
                        return SpectatorOverridePackageList;
                    case QuestReferenceAlias_FieldIndex.ObserveDeadBodyOverridePackageList:
                        return ObserveDeadBodyOverridePackageList;
                    case QuestReferenceAlias_FieldIndex.GuardWarnOverridePackageList:
                        return GuardWarnOverridePackageList;
                    case QuestReferenceAlias_FieldIndex.CombatOverridePackageList:
                        return CombatOverridePackageList;
                    case QuestReferenceAlias_FieldIndex.LinkedAliases:
                        return LinkedAliases;
                    case QuestReferenceAlias_FieldIndex.DisplayName:
                        return DisplayName;
                    case QuestReferenceAlias_FieldIndex.DeathItem:
                        return DeathItem;
                    case QuestReferenceAlias_FieldIndex.ForcedVoice:
                        return ForcedVoice;
                    case QuestReferenceAlias_FieldIndex.Spells:
                        return Spells;
                    case QuestReferenceAlias_FieldIndex.Factions:
                        return Factions;
                    case QuestReferenceAlias_FieldIndex.PackageData:
                        return PackageData;
                    case QuestReferenceAlias_FieldIndex.ScriptComment:
                        return ScriptComment;
                    case QuestReferenceAlias_FieldIndex.VoiceTypes:
                        return VoiceTypes;
                    case QuestReferenceAlias_FieldIndex.TerminalMenus:
                        return TerminalMenus;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                QuestReferenceAlias_FieldIndex enu = (QuestReferenceAlias_FieldIndex)index;
                switch (enu)
                {
                    case QuestReferenceAlias_FieldIndex.ID:
                        this.ID = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.ALFG:
                        this.ALFG = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.LegendaryRank:
                        this.LegendaryRank = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.AliasIDToForceIntoWhenFilled:
                        this.AliasIDToForceIntoWhenFilled = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.ClosestToAlias:
                        this.ClosestToAlias = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.ForcedReference:
                        this.ForcedReference = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.Location:
                        this.Location = new MaskItem<Exception?, LocationAliasReference.ErrorMask?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.FindMatchingRefFromEvent:
                        this.FindMatchingRefFromEvent = new MaskItem<Exception?, FindMatchingRefFromEvent.ErrorMask?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.CreateReferenceToObject:
                        this.CreateReferenceToObject = new MaskItem<Exception?, CreateReferenceToObject.ErrorMask?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.External:
                        this.External = new MaskItem<Exception?, ExternalAliasReference.ErrorMask?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.UniqueActor:
                        this.UniqueActor = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.UniqueBaseForm:
                        this.UniqueBaseForm = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.FindMatchingRefNearAlias:
                        this.FindMatchingRefNearAlias = new MaskItem<Exception?, FindMatchingRefNearAlias.ErrorMask?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.ReferenceCollectionAliasID:
                        this.ReferenceCollectionAliasID = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.CreateObjectTemplate:
                        this.CreateObjectTemplate = new MaskItem<Exception?, CreateObjectTemplate.ErrorMask?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.SpectatorOverridePackageList:
                        this.SpectatorOverridePackageList = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.ObserveDeadBodyOverridePackageList:
                        this.ObserveDeadBodyOverridePackageList = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.GuardWarnOverridePackageList:
                        this.GuardWarnOverridePackageList = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.CombatOverridePackageList:
                        this.CombatOverridePackageList = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.LinkedAliases:
                        this.LinkedAliases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedAlias.ErrorMask?>>?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.DisplayName:
                        this.DisplayName = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.DeathItem:
                        this.DeathItem = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.ForcedVoice:
                        this.ForcedVoice = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.PackageData:
                        this.PackageData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case QuestReferenceAlias_FieldIndex.ScriptComment:
                        this.ScriptComment = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.VoiceTypes:
                        this.VoiceTypes = ex;
                        break;
                    case QuestReferenceAlias_FieldIndex.TerminalMenus:
                        this.TerminalMenus = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                QuestReferenceAlias_FieldIndex enu = (QuestReferenceAlias_FieldIndex)index;
                switch (enu)
                {
                    case QuestReferenceAlias_FieldIndex.ID:
                        this.ID = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.ALFG:
                        this.ALFG = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.LegendaryRank:
                        this.LegendaryRank = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.AliasIDToForceIntoWhenFilled:
                        this.AliasIDToForceIntoWhenFilled = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.ClosestToAlias:
                        this.ClosestToAlias = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.ForcedReference:
                        this.ForcedReference = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.Location:
                        this.Location = (MaskItem<Exception?, LocationAliasReference.ErrorMask?>?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.FindMatchingRefFromEvent:
                        this.FindMatchingRefFromEvent = (MaskItem<Exception?, FindMatchingRefFromEvent.ErrorMask?>?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.CreateReferenceToObject:
                        this.CreateReferenceToObject = (MaskItem<Exception?, CreateReferenceToObject.ErrorMask?>?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.External:
                        this.External = (MaskItem<Exception?, ExternalAliasReference.ErrorMask?>?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.UniqueActor:
                        this.UniqueActor = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.UniqueBaseForm:
                        this.UniqueBaseForm = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.FindMatchingRefNearAlias:
                        this.FindMatchingRefNearAlias = (MaskItem<Exception?, FindMatchingRefNearAlias.ErrorMask?>?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.ReferenceCollectionAliasID:
                        this.ReferenceCollectionAliasID = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.CreateObjectTemplate:
                        this.CreateObjectTemplate = (MaskItem<Exception?, CreateObjectTemplate.ErrorMask?>?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.SpectatorOverridePackageList:
                        this.SpectatorOverridePackageList = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.ObserveDeadBodyOverridePackageList:
                        this.ObserveDeadBodyOverridePackageList = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.GuardWarnOverridePackageList:
                        this.GuardWarnOverridePackageList = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.CombatOverridePackageList:
                        this.CombatOverridePackageList = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.LinkedAliases:
                        this.LinkedAliases = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedAlias.ErrorMask?>>?>)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.DisplayName:
                        this.DisplayName = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.DeathItem:
                        this.DeathItem = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.ForcedVoice:
                        this.ForcedVoice = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.PackageData:
                        this.PackageData = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.ScriptComment:
                        this.ScriptComment = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.VoiceTypes:
                        this.VoiceTypes = (Exception?)obj;
                        break;
                    case QuestReferenceAlias_FieldIndex.TerminalMenus:
                        this.TerminalMenus = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ID != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (ALFG != null) return true;
                if (LegendaryRank != null) return true;
                if (AliasIDToForceIntoWhenFilled != null) return true;
                if (ClosestToAlias != null) return true;
                if (ForcedReference != null) return true;
                if (Location != null) return true;
                if (FindMatchingRefFromEvent != null) return true;
                if (CreateReferenceToObject != null) return true;
                if (External != null) return true;
                if (UniqueActor != null) return true;
                if (UniqueBaseForm != null) return true;
                if (FindMatchingRefNearAlias != null) return true;
                if (ReferenceCollectionAliasID != null) return true;
                if (CreateObjectTemplate != null) return true;
                if (Conditions != null) return true;
                if (Keywords != null) return true;
                if (Items != null) return true;
                if (SpectatorOverridePackageList != null) return true;
                if (ObserveDeadBodyOverridePackageList != null) return true;
                if (GuardWarnOverridePackageList != null) return true;
                if (CombatOverridePackageList != null) return true;
                if (LinkedAliases != null) return true;
                if (DisplayName != null) return true;
                if (DeathItem != null) return true;
                if (ForcedVoice != null) return true;
                if (Spells != null) return true;
                if (Factions != null) return true;
                if (PackageData != null) return true;
                if (ScriptComment != null) return true;
                if (VoiceTypes != null) return true;
                if (TerminalMenus != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(ID, "ID");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(ALFG, "ALFG");
                }
                {
                    sb.AppendItem(LegendaryRank, "LegendaryRank");
                }
                {
                    sb.AppendItem(AliasIDToForceIntoWhenFilled, "AliasIDToForceIntoWhenFilled");
                }
                {
                    sb.AppendItem(ClosestToAlias, "ClosestToAlias");
                }
                {
                    sb.AppendItem(ForcedReference, "ForcedReference");
                }
                Location?.Print(sb);
                FindMatchingRefFromEvent?.Print(sb);
                CreateReferenceToObject?.Print(sb);
                External?.Print(sb);
                {
                    sb.AppendItem(UniqueActor, "UniqueActor");
                }
                {
                    sb.AppendItem(UniqueBaseForm, "UniqueBaseForm");
                }
                FindMatchingRefNearAlias?.Print(sb);
                {
                    sb.AppendItem(ReferenceCollectionAliasID, "ReferenceCollectionAliasID");
                }
                CreateObjectTemplate?.Print(sb);
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Items is {} ItemsItem)
                {
                    sb.AppendLine("Items =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(SpectatorOverridePackageList, "SpectatorOverridePackageList");
                }
                {
                    sb.AppendItem(ObserveDeadBodyOverridePackageList, "ObserveDeadBodyOverridePackageList");
                }
                {
                    sb.AppendItem(GuardWarnOverridePackageList, "GuardWarnOverridePackageList");
                }
                {
                    sb.AppendItem(CombatOverridePackageList, "CombatOverridePackageList");
                }
                if (LinkedAliases is {} LinkedAliasesItem)
                {
                    sb.AppendLine("LinkedAliases =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LinkedAliasesItem.Overall);
                        if (LinkedAliasesItem.Specific != null)
                        {
                            foreach (var subItem in LinkedAliasesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(DisplayName, "DisplayName");
                }
                {
                    sb.AppendItem(DeathItem, "DeathItem");
                }
                {
                    sb.AppendItem(ForcedVoice, "ForcedVoice");
                }
                if (Spells is {} SpellsItem)
                {
                    sb.AppendLine("Spells =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SpellsItem.Overall);
                        if (SpellsItem.Specific != null)
                        {
                            foreach (var subItem in SpellsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Factions is {} FactionsItem)
                {
                    sb.AppendLine("Factions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FactionsItem.Overall);
                        if (FactionsItem.Specific != null)
                        {
                            foreach (var subItem in FactionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (PackageData is {} PackageDataItem)
                {
                    sb.AppendLine("PackageData =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PackageDataItem.Overall);
                        if (PackageDataItem.Specific != null)
                        {
                            foreach (var subItem in PackageDataItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ScriptComment, "ScriptComment");
                }
                {
                    sb.AppendItem(VoiceTypes, "VoiceTypes");
                }
                if (TerminalMenus is {} TerminalMenusItem)
                {
                    sb.AppendLine("TerminalMenus =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TerminalMenusItem.Overall);
                        if (TerminalMenusItem.Specific != null)
                        {
                            foreach (var subItem in TerminalMenusItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ID = this.ID.Combine(rhs.ID);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.ALFG = this.ALFG.Combine(rhs.ALFG);
                ret.LegendaryRank = this.LegendaryRank.Combine(rhs.LegendaryRank);
                ret.AliasIDToForceIntoWhenFilled = this.AliasIDToForceIntoWhenFilled.Combine(rhs.AliasIDToForceIntoWhenFilled);
                ret.ClosestToAlias = this.ClosestToAlias.Combine(rhs.ClosestToAlias);
                ret.ForcedReference = this.ForcedReference.Combine(rhs.ForcedReference);
                ret.Location = this.Location.Combine(rhs.Location, (l, r) => l.Combine(r));
                ret.FindMatchingRefFromEvent = this.FindMatchingRefFromEvent.Combine(rhs.FindMatchingRefFromEvent, (l, r) => l.Combine(r));
                ret.CreateReferenceToObject = this.CreateReferenceToObject.Combine(rhs.CreateReferenceToObject, (l, r) => l.Combine(r));
                ret.External = this.External.Combine(rhs.External, (l, r) => l.Combine(r));
                ret.UniqueActor = this.UniqueActor.Combine(rhs.UniqueActor);
                ret.UniqueBaseForm = this.UniqueBaseForm.Combine(rhs.UniqueBaseForm);
                ret.FindMatchingRefNearAlias = this.FindMatchingRefNearAlias.Combine(rhs.FindMatchingRefNearAlias, (l, r) => l.Combine(r));
                ret.ReferenceCollectionAliasID = this.ReferenceCollectionAliasID.Combine(rhs.ReferenceCollectionAliasID);
                ret.CreateObjectTemplate = this.CreateObjectTemplate.Combine(rhs.CreateObjectTemplate, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), Noggog.ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.SpectatorOverridePackageList = this.SpectatorOverridePackageList.Combine(rhs.SpectatorOverridePackageList);
                ret.ObserveDeadBodyOverridePackageList = this.ObserveDeadBodyOverridePackageList.Combine(rhs.ObserveDeadBodyOverridePackageList);
                ret.GuardWarnOverridePackageList = this.GuardWarnOverridePackageList.Combine(rhs.GuardWarnOverridePackageList);
                ret.CombatOverridePackageList = this.CombatOverridePackageList.Combine(rhs.CombatOverridePackageList);
                ret.LinkedAliases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedAlias.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LinkedAliases?.Overall, rhs.LinkedAliases?.Overall), Noggog.ExceptionExt.Combine(this.LinkedAliases?.Specific, rhs.LinkedAliases?.Specific));
                ret.DisplayName = this.DisplayName.Combine(rhs.DisplayName);
                ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
                ret.ForcedVoice = this.ForcedVoice.Combine(rhs.ForcedVoice);
                ret.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Spells?.Overall, rhs.Spells?.Overall), Noggog.ExceptionExt.Combine(this.Spells?.Specific, rhs.Spells?.Specific));
                ret.Factions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), Noggog.ExceptionExt.Combine(this.Factions?.Specific, rhs.Factions?.Specific));
                ret.PackageData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.PackageData?.Overall, rhs.PackageData?.Overall), Noggog.ExceptionExt.Combine(this.PackageData?.Specific, rhs.PackageData?.Specific));
                ret.ScriptComment = this.ScriptComment.Combine(rhs.ScriptComment);
                ret.VoiceTypes = this.VoiceTypes.Combine(rhs.VoiceTypes);
                ret.TerminalMenus = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.TerminalMenus?.Overall, rhs.TerminalMenus?.Overall), Noggog.ExceptionExt.Combine(this.TerminalMenus?.Specific, rhs.TerminalMenus?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AQuestAlias.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ID;
            public bool Name;
            public bool Flags;
            public bool ALFG;
            public bool LegendaryRank;
            public bool AliasIDToForceIntoWhenFilled;
            public bool ClosestToAlias;
            public bool ForcedReference;
            public LocationAliasReference.TranslationMask? Location;
            public FindMatchingRefFromEvent.TranslationMask? FindMatchingRefFromEvent;
            public CreateReferenceToObject.TranslationMask? CreateReferenceToObject;
            public ExternalAliasReference.TranslationMask? External;
            public bool UniqueActor;
            public bool UniqueBaseForm;
            public FindMatchingRefNearAlias.TranslationMask? FindMatchingRefNearAlias;
            public bool ReferenceCollectionAliasID;
            public CreateObjectTemplate.TranslationMask? CreateObjectTemplate;
            public Condition.TranslationMask? Conditions;
            public bool Keywords;
            public ContainerEntry.TranslationMask? Items;
            public bool SpectatorOverridePackageList;
            public bool ObserveDeadBodyOverridePackageList;
            public bool GuardWarnOverridePackageList;
            public bool CombatOverridePackageList;
            public LinkedAlias.TranslationMask? LinkedAliases;
            public bool DisplayName;
            public bool DeathItem;
            public bool ForcedVoice;
            public bool Spells;
            public bool Factions;
            public bool PackageData;
            public bool ScriptComment;
            public bool VoiceTypes;
            public bool TerminalMenus;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ID = defaultOn;
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.ALFG = defaultOn;
                this.LegendaryRank = defaultOn;
                this.AliasIDToForceIntoWhenFilled = defaultOn;
                this.ClosestToAlias = defaultOn;
                this.ForcedReference = defaultOn;
                this.UniqueActor = defaultOn;
                this.UniqueBaseForm = defaultOn;
                this.ReferenceCollectionAliasID = defaultOn;
                this.Keywords = defaultOn;
                this.SpectatorOverridePackageList = defaultOn;
                this.ObserveDeadBodyOverridePackageList = defaultOn;
                this.GuardWarnOverridePackageList = defaultOn;
                this.CombatOverridePackageList = defaultOn;
                this.DisplayName = defaultOn;
                this.DeathItem = defaultOn;
                this.ForcedVoice = defaultOn;
                this.Spells = defaultOn;
                this.Factions = defaultOn;
                this.PackageData = defaultOn;
                this.ScriptComment = defaultOn;
                this.VoiceTypes = defaultOn;
                this.TerminalMenus = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ID, null));
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((ALFG, null));
                ret.Add((LegendaryRank, null));
                ret.Add((AliasIDToForceIntoWhenFilled, null));
                ret.Add((ClosestToAlias, null));
                ret.Add((ForcedReference, null));
                ret.Add((Location != null ? Location.OnOverall : DefaultOn, Location?.GetCrystal()));
                ret.Add((FindMatchingRefFromEvent != null ? FindMatchingRefFromEvent.OnOverall : DefaultOn, FindMatchingRefFromEvent?.GetCrystal()));
                ret.Add((CreateReferenceToObject != null ? CreateReferenceToObject.OnOverall : DefaultOn, CreateReferenceToObject?.GetCrystal()));
                ret.Add((External != null ? External.OnOverall : DefaultOn, External?.GetCrystal()));
                ret.Add((UniqueActor, null));
                ret.Add((UniqueBaseForm, null));
                ret.Add((FindMatchingRefNearAlias != null ? FindMatchingRefNearAlias.OnOverall : DefaultOn, FindMatchingRefNearAlias?.GetCrystal()));
                ret.Add((ReferenceCollectionAliasID, null));
                ret.Add((CreateObjectTemplate != null ? CreateObjectTemplate.OnOverall : DefaultOn, CreateObjectTemplate?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
                ret.Add((SpectatorOverridePackageList, null));
                ret.Add((ObserveDeadBodyOverridePackageList, null));
                ret.Add((GuardWarnOverridePackageList, null));
                ret.Add((CombatOverridePackageList, null));
                ret.Add((LinkedAliases == null ? DefaultOn : !LinkedAliases.GetCrystal().CopyNothing, LinkedAliases?.GetCrystal()));
                ret.Add((DisplayName, null));
                ret.Add((DeathItem, null));
                ret.Add((ForcedVoice, null));
                ret.Add((Spells, null));
                ret.Add((Factions, null));
                ret.Add((PackageData, null));
                ret.Add((ScriptComment, null));
                ret.Add((VoiceTypes, null));
                ret.Add((TerminalMenus, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestReferenceAliasCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestReferenceAliasSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestReferenceAliasBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestReferenceAliasBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static QuestReferenceAlias CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new QuestReferenceAlias();
            ((QuestReferenceAliasSetterCommon)((IQuestReferenceAliasGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out QuestReferenceAlias item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((QuestReferenceAliasSetterCommon)((IQuestReferenceAliasGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new QuestReferenceAlias GetNew()
        {
            return new QuestReferenceAlias();
        }

    }
    #endregion

    #region Interface
    public partial interface IQuestReferenceAlias :
        IAQuestAlias,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IQuestReferenceAlias>,
        INamedRequired,
        IQuestReferenceAliasGetter
    {
        new UInt32 ID { get; set; }
        /// <summary>
        /// Aspects: INamedRequired
        /// </summary>
        new String Name { get; set; }
        new AQuestAlias.Flag? Flags { get; set; }
        new UInt32? ALFG { get; set; }
        new Byte? LegendaryRank { get; set; }
        new Int32? AliasIDToForceIntoWhenFilled { get; set; }
        new Int32? ClosestToAlias { get; set; }
        new IFormLinkNullable<IPlacedGetter> ForcedReference { get; set; }
        new LocationAliasReference? Location { get; set; }
        new FindMatchingRefFromEvent? FindMatchingRefFromEvent { get; set; }
        new CreateReferenceToObject? CreateReferenceToObject { get; set; }
        new ExternalAliasReference? External { get; set; }
        new IFormLinkNullable<INpcGetter> UniqueActor { get; set; }
        new IFormLinkNullable<IGenericBaseFormGetter> UniqueBaseForm { get; set; }
        new FindMatchingRefNearAlias? FindMatchingRefNearAlias { get; set; }
        new Int32? ReferenceCollectionAliasID { get; set; }
        new CreateObjectTemplate? CreateObjectTemplate { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<ContainerEntry>? Items { get; set; }
        new IFormLinkNullable<IFormListGetter> SpectatorOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> GuardWarnOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> CombatOverridePackageList { get; set; }
        new ExtendedList<LinkedAlias>? LinkedAliases { get; set; }
        new IFormLinkNullable<IMessageGetter> DisplayName { get; set; }
        new IFormLinkNullable<ILeveledItemGetter> DeathItem { get; set; }
        new IFormLinkNullable<IVoiceTypeGetter> ForcedVoice { get; set; }
        new ExtendedList<IFormLinkGetter<ISpellGetter>> Spells { get; }
        new ExtendedList<IFormLinkGetter<IFactionGetter>> Factions { get; }
        new ExtendedList<IFormLinkGetter<IPackageGetter>> PackageData { get; }
        new String? ScriptComment { get; set; }
        new IFormLinkNullable<IAliasVoiceTypeGetter> VoiceTypes { get; set; }
        new ExtendedList<IFormLinkGetter<ITerminalGetter>> TerminalMenus { get; }
    }

    public partial interface IQuestReferenceAliasGetter :
        IAQuestAliasGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IQuestReferenceAliasGetter>,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => QuestReferenceAlias_Registration.Instance;
        UInt32 ID { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedRequiredGetter
        /// </summary>
        String Name { get; }
        #endregion
        AQuestAlias.Flag? Flags { get; }
        UInt32? ALFG { get; }
        Byte? LegendaryRank { get; }
        Int32? AliasIDToForceIntoWhenFilled { get; }
        Int32? ClosestToAlias { get; }
        IFormLinkNullableGetter<IPlacedGetter> ForcedReference { get; }
        ILocationAliasReferenceGetter? Location { get; }
        IFindMatchingRefFromEventGetter? FindMatchingRefFromEvent { get; }
        ICreateReferenceToObjectGetter? CreateReferenceToObject { get; }
        IExternalAliasReferenceGetter? External { get; }
        IFormLinkNullableGetter<INpcGetter> UniqueActor { get; }
        IFormLinkNullableGetter<IGenericBaseFormGetter> UniqueBaseForm { get; }
        IFindMatchingRefNearAliasGetter? FindMatchingRefNearAlias { get; }
        Int32? ReferenceCollectionAliasID { get; }
        ICreateObjectTemplateGetter? CreateObjectTemplate { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IReadOnlyList<IContainerEntryGetter>? Items { get; }
        IFormLinkNullableGetter<IFormListGetter> SpectatorOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> ObserveDeadBodyOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> GuardWarnOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> CombatOverridePackageList { get; }
        IReadOnlyList<ILinkedAliasGetter>? LinkedAliases { get; }
        IFormLinkNullableGetter<IMessageGetter> DisplayName { get; }
        IFormLinkNullableGetter<ILeveledItemGetter> DeathItem { get; }
        IFormLinkNullableGetter<IVoiceTypeGetter> ForcedVoice { get; }
        IReadOnlyList<IFormLinkGetter<ISpellGetter>> Spells { get; }
        IReadOnlyList<IFormLinkGetter<IFactionGetter>> Factions { get; }
        IReadOnlyList<IFormLinkGetter<IPackageGetter>> PackageData { get; }
        String? ScriptComment { get; }
        IFormLinkNullableGetter<IAliasVoiceTypeGetter> VoiceTypes { get; }
        IReadOnlyList<IFormLinkGetter<ITerminalGetter>> TerminalMenus { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class QuestReferenceAliasMixIn
    {
        public static void Clear(this IQuestReferenceAlias item)
        {
            ((QuestReferenceAliasSetterCommon)((IQuestReferenceAliasGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static QuestReferenceAlias.Mask<bool> GetEqualsMask(
            this IQuestReferenceAliasGetter item,
            IQuestReferenceAliasGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IQuestReferenceAliasGetter item,
            string? name = null,
            QuestReferenceAlias.Mask<bool>? printMask = null)
        {
            return ((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IQuestReferenceAliasGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            QuestReferenceAlias.Mask<bool>? printMask = null)
        {
            ((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IQuestReferenceAliasGetter item,
            IQuestReferenceAliasGetter rhs,
            QuestReferenceAlias.TranslationMask? equalsMask = null)
        {
            return ((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IQuestReferenceAlias lhs,
            IQuestReferenceAliasGetter rhs,
            out QuestReferenceAlias.ErrorMask errorMask,
            QuestReferenceAlias.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((QuestReferenceAliasSetterTranslationCommon)((IQuestReferenceAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = QuestReferenceAlias.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IQuestReferenceAlias lhs,
            IQuestReferenceAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((QuestReferenceAliasSetterTranslationCommon)((IQuestReferenceAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static QuestReferenceAlias DeepCopy(
            this IQuestReferenceAliasGetter item,
            QuestReferenceAlias.TranslationMask? copyMask = null)
        {
            return ((QuestReferenceAliasSetterTranslationCommon)((IQuestReferenceAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static QuestReferenceAlias DeepCopy(
            this IQuestReferenceAliasGetter item,
            out QuestReferenceAlias.ErrorMask errorMask,
            QuestReferenceAlias.TranslationMask? copyMask = null)
        {
            return ((QuestReferenceAliasSetterTranslationCommon)((IQuestReferenceAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static QuestReferenceAlias DeepCopy(
            this IQuestReferenceAliasGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((QuestReferenceAliasSetterTranslationCommon)((IQuestReferenceAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IQuestReferenceAlias item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((QuestReferenceAliasSetterCommon)((IQuestReferenceAliasGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum QuestReferenceAlias_FieldIndex
    {
        ID = 0,
        Name = 1,
        Flags = 2,
        ALFG = 3,
        LegendaryRank = 4,
        AliasIDToForceIntoWhenFilled = 5,
        ClosestToAlias = 6,
        ForcedReference = 7,
        Location = 8,
        FindMatchingRefFromEvent = 9,
        CreateReferenceToObject = 10,
        External = 11,
        UniqueActor = 12,
        UniqueBaseForm = 13,
        FindMatchingRefNearAlias = 14,
        ReferenceCollectionAliasID = 15,
        CreateObjectTemplate = 16,
        Conditions = 17,
        Keywords = 18,
        Items = 19,
        SpectatorOverridePackageList = 20,
        ObserveDeadBodyOverridePackageList = 21,
        GuardWarnOverridePackageList = 22,
        CombatOverridePackageList = 23,
        LinkedAliases = 24,
        DisplayName = 25,
        DeathItem = 26,
        ForcedVoice = 27,
        Spells = 28,
        Factions = 29,
        PackageData = 30,
        ScriptComment = 31,
        VoiceTypes = 32,
        TerminalMenus = 33,
    }
    #endregion

    #region Registration
    internal partial class QuestReferenceAlias_Registration : ILoquiRegistration
    {
        public static readonly QuestReferenceAlias_Registration Instance = new QuestReferenceAlias_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 34;

        public const ushort FieldCount = 34;

        public static readonly Type MaskType = typeof(QuestReferenceAlias.Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestReferenceAlias.ErrorMask);

        public static readonly Type ClassType = typeof(QuestReferenceAlias);

        public static readonly Type GetterType = typeof(IQuestReferenceAliasGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuestReferenceAlias);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.QuestReferenceAlias";

        public const string Name = "QuestReferenceAlias";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ALST;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ALST);
            var all = RecordCollection.Factory(
                RecordTypes.ALST,
                RecordTypes.ALID,
                RecordTypes.FNAM,
                RecordTypes.ALFG,
                RecordTypes.ALLR,
                RecordTypes.ALFI,
                RecordTypes.ALCC,
                RecordTypes.ALFR,
                RecordTypes.ALFA,
                RecordTypes.KNAM,
                RecordTypes.ALRT,
                RecordTypes.ALFE,
                RecordTypes.ALFD,
                RecordTypes.ALCO,
                RecordTypes.ALEQ,
                RecordTypes.ALEA,
                RecordTypes.ALUA,
                RecordTypes.ALUB,
                RecordTypes.ALNA,
                RecordTypes.ALNT,
                RecordTypes.ALNR,
                RecordTypes.ALCS,
                RecordTypes.ALCM,
                RecordTypes.ALCA,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.CNTO,
                RecordTypes.COCT,
                RecordTypes.COED,
                RecordTypes.SPOR,
                RecordTypes.OCOR,
                RecordTypes.GWOR,
                RecordTypes.ECOR,
                RecordTypes.ALLA,
                RecordTypes.ALDN,
                RecordTypes.ALDI,
                RecordTypes.ALFV,
                RecordTypes.ALSP,
                RecordTypes.ALFC,
                RecordTypes.ALPC,
                RecordTypes.SCCM,
                RecordTypes.VTCK,
                RecordTypes.ALTM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(QuestReferenceAliasBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class QuestReferenceAliasSetterCommon : AQuestAliasSetterCommon
    {
        public new static readonly QuestReferenceAliasSetterCommon Instance = new QuestReferenceAliasSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IQuestReferenceAlias item)
        {
            ClearPartial();
            item.ID = default(UInt32);
            item.Name = string.Empty;
            item.Flags = default;
            item.ALFG = default;
            item.LegendaryRank = default;
            item.AliasIDToForceIntoWhenFilled = default;
            item.ClosestToAlias = default;
            item.ForcedReference.Clear();
            item.Location = null;
            item.FindMatchingRefFromEvent = null;
            item.CreateReferenceToObject = null;
            item.External = null;
            item.UniqueActor.Clear();
            item.UniqueBaseForm.Clear();
            item.FindMatchingRefNearAlias = null;
            item.ReferenceCollectionAliasID = default;
            item.CreateObjectTemplate = null;
            item.Conditions.Clear();
            item.Keywords = null;
            item.Items = null;
            item.SpectatorOverridePackageList.Clear();
            item.ObserveDeadBodyOverridePackageList.Clear();
            item.GuardWarnOverridePackageList.Clear();
            item.CombatOverridePackageList.Clear();
            item.LinkedAliases = null;
            item.DisplayName.Clear();
            item.DeathItem.Clear();
            item.ForcedVoice.Clear();
            item.Spells.Clear();
            item.Factions.Clear();
            item.PackageData.Clear();
            item.ScriptComment = default;
            item.VoiceTypes.Clear();
            item.TerminalMenus.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAQuestAlias item)
        {
            Clear(item: (IQuestReferenceAlias)item);
        }
        
        #region Mutagen
        public void RemapLinks(IQuestReferenceAlias obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.ForcedReference.Relink(mapping);
            obj.Location?.RemapLinks(mapping);
            obj.CreateReferenceToObject?.RemapLinks(mapping);
            obj.External?.RemapLinks(mapping);
            obj.UniqueActor.Relink(mapping);
            obj.UniqueBaseForm.Relink(mapping);
            obj.FindMatchingRefNearAlias?.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Items?.RemapLinks(mapping);
            obj.SpectatorOverridePackageList.Relink(mapping);
            obj.ObserveDeadBodyOverridePackageList.Relink(mapping);
            obj.GuardWarnOverridePackageList.Relink(mapping);
            obj.CombatOverridePackageList.Relink(mapping);
            obj.LinkedAliases?.RemapLinks(mapping);
            obj.DisplayName.Relink(mapping);
            obj.DeathItem.Relink(mapping);
            obj.ForcedVoice.Relink(mapping);
            obj.Spells.RemapLinks(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.PackageData.RemapLinks(mapping);
            obj.VoiceTypes.Relink(mapping);
            obj.TerminalMenus.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IQuestReferenceAlias item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: QuestReferenceAliasBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAQuestAlias item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (QuestReferenceAlias)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class QuestReferenceAliasCommon : AQuestAliasCommon
    {
        public new static readonly QuestReferenceAliasCommon Instance = new QuestReferenceAliasCommon();

        public QuestReferenceAlias.Mask<bool> GetEqualsMask(
            IQuestReferenceAliasGetter item,
            IQuestReferenceAliasGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new QuestReferenceAlias.Mask<bool>(false);
            ((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestReferenceAliasGetter item,
            IQuestReferenceAliasGetter rhs,
            QuestReferenceAlias.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ID = item.ID == rhs.ID;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.ALFG = item.ALFG == rhs.ALFG;
            ret.LegendaryRank = item.LegendaryRank == rhs.LegendaryRank;
            ret.AliasIDToForceIntoWhenFilled = item.AliasIDToForceIntoWhenFilled == rhs.AliasIDToForceIntoWhenFilled;
            ret.ClosestToAlias = item.ClosestToAlias == rhs.ClosestToAlias;
            ret.ForcedReference = item.ForcedReference.Equals(rhs.ForcedReference);
            ret.Location = EqualsMaskHelper.EqualsHelper(
                item.Location,
                rhs.Location,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FindMatchingRefFromEvent = EqualsMaskHelper.EqualsHelper(
                item.FindMatchingRefFromEvent,
                rhs.FindMatchingRefFromEvent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.CreateReferenceToObject = EqualsMaskHelper.EqualsHelper(
                item.CreateReferenceToObject,
                rhs.CreateReferenceToObject,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.External = EqualsMaskHelper.EqualsHelper(
                item.External,
                rhs.External,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.UniqueActor = item.UniqueActor.Equals(rhs.UniqueActor);
            ret.UniqueBaseForm = item.UniqueBaseForm.Equals(rhs.UniqueBaseForm);
            ret.FindMatchingRefNearAlias = EqualsMaskHelper.EqualsHelper(
                item.FindMatchingRefNearAlias,
                rhs.FindMatchingRefNearAlias,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ReferenceCollectionAliasID = item.ReferenceCollectionAliasID == rhs.ReferenceCollectionAliasID;
            ret.CreateObjectTemplate = EqualsMaskHelper.EqualsHelper(
                item.CreateObjectTemplate,
                rhs.CreateObjectTemplate,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SpectatorOverridePackageList = item.SpectatorOverridePackageList.Equals(rhs.SpectatorOverridePackageList);
            ret.ObserveDeadBodyOverridePackageList = item.ObserveDeadBodyOverridePackageList.Equals(rhs.ObserveDeadBodyOverridePackageList);
            ret.GuardWarnOverridePackageList = item.GuardWarnOverridePackageList.Equals(rhs.GuardWarnOverridePackageList);
            ret.CombatOverridePackageList = item.CombatOverridePackageList.Equals(rhs.CombatOverridePackageList);
            ret.LinkedAliases = item.LinkedAliases.CollectionEqualsHelper(
                rhs.LinkedAliases,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DisplayName = item.DisplayName.Equals(rhs.DisplayName);
            ret.DeathItem = item.DeathItem.Equals(rhs.DeathItem);
            ret.ForcedVoice = item.ForcedVoice.Equals(rhs.ForcedVoice);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (l, r) => object.Equals(l, r),
                include);
            ret.PackageData = item.PackageData.CollectionEqualsHelper(
                rhs.PackageData,
                (l, r) => object.Equals(l, r),
                include);
            ret.ScriptComment = string.Equals(item.ScriptComment, rhs.ScriptComment);
            ret.VoiceTypes = item.VoiceTypes.Equals(rhs.VoiceTypes);
            ret.TerminalMenus = item.TerminalMenus.CollectionEqualsHelper(
                rhs.TerminalMenus,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IQuestReferenceAliasGetter item,
            string? name = null,
            QuestReferenceAlias.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IQuestReferenceAliasGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            QuestReferenceAlias.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"QuestReferenceAlias =>");
            }
            else
            {
                sb.AppendLine($"{name} (QuestReferenceAlias) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IQuestReferenceAliasGetter item,
            StructuredStringBuilder sb,
            QuestReferenceAlias.Mask<bool>? printMask = null)
        {
            AQuestAliasCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ID ?? true)
            {
                sb.AppendItem(item.ID, "ID");
            }
            if (printMask?.Name ?? true)
            {
                sb.AppendItem(item.Name, "Name");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.ALFG ?? true)
                && item.ALFG is {} ALFGItem)
            {
                sb.AppendItem(ALFGItem, "ALFG");
            }
            if ((printMask?.LegendaryRank ?? true)
                && item.LegendaryRank is {} LegendaryRankItem)
            {
                sb.AppendItem(LegendaryRankItem, "LegendaryRank");
            }
            if ((printMask?.AliasIDToForceIntoWhenFilled ?? true)
                && item.AliasIDToForceIntoWhenFilled is {} AliasIDToForceIntoWhenFilledItem)
            {
                sb.AppendItem(AliasIDToForceIntoWhenFilledItem, "AliasIDToForceIntoWhenFilled");
            }
            if ((printMask?.ClosestToAlias ?? true)
                && item.ClosestToAlias is {} ClosestToAliasItem)
            {
                sb.AppendItem(ClosestToAliasItem, "ClosestToAlias");
            }
            if (printMask?.ForcedReference ?? true)
            {
                sb.AppendItem(item.ForcedReference.FormKeyNullable, "ForcedReference");
            }
            if ((printMask?.Location?.Overall ?? true)
                && item.Location is {} LocationItem)
            {
                LocationItem?.Print(sb, "Location");
            }
            if ((printMask?.FindMatchingRefFromEvent?.Overall ?? true)
                && item.FindMatchingRefFromEvent is {} FindMatchingRefFromEventItem)
            {
                FindMatchingRefFromEventItem?.Print(sb, "FindMatchingRefFromEvent");
            }
            if ((printMask?.CreateReferenceToObject?.Overall ?? true)
                && item.CreateReferenceToObject is {} CreateReferenceToObjectItem)
            {
                CreateReferenceToObjectItem?.Print(sb, "CreateReferenceToObject");
            }
            if ((printMask?.External?.Overall ?? true)
                && item.External is {} ExternalItem)
            {
                ExternalItem?.Print(sb, "External");
            }
            if (printMask?.UniqueActor ?? true)
            {
                sb.AppendItem(item.UniqueActor.FormKeyNullable, "UniqueActor");
            }
            if (printMask?.UniqueBaseForm ?? true)
            {
                sb.AppendItem(item.UniqueBaseForm.FormKeyNullable, "UniqueBaseForm");
            }
            if ((printMask?.FindMatchingRefNearAlias?.Overall ?? true)
                && item.FindMatchingRefNearAlias is {} FindMatchingRefNearAliasItem)
            {
                FindMatchingRefNearAliasItem?.Print(sb, "FindMatchingRefNearAlias");
            }
            if ((printMask?.ReferenceCollectionAliasID ?? true)
                && item.ReferenceCollectionAliasID is {} ReferenceCollectionAliasIDItem)
            {
                sb.AppendItem(ReferenceCollectionAliasIDItem, "ReferenceCollectionAliasID");
            }
            if ((printMask?.CreateObjectTemplate?.Overall ?? true)
                && item.CreateObjectTemplate is {} CreateObjectTemplateItem)
            {
                CreateObjectTemplateItem?.Print(sb, "CreateObjectTemplate");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Items?.Overall ?? true)
                && item.Items is {} ItemsItem)
            {
                sb.AppendLine("Items =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ItemsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.SpectatorOverridePackageList ?? true)
            {
                sb.AppendItem(item.SpectatorOverridePackageList.FormKeyNullable, "SpectatorOverridePackageList");
            }
            if (printMask?.ObserveDeadBodyOverridePackageList ?? true)
            {
                sb.AppendItem(item.ObserveDeadBodyOverridePackageList.FormKeyNullable, "ObserveDeadBodyOverridePackageList");
            }
            if (printMask?.GuardWarnOverridePackageList ?? true)
            {
                sb.AppendItem(item.GuardWarnOverridePackageList.FormKeyNullable, "GuardWarnOverridePackageList");
            }
            if (printMask?.CombatOverridePackageList ?? true)
            {
                sb.AppendItem(item.CombatOverridePackageList.FormKeyNullable, "CombatOverridePackageList");
            }
            if ((printMask?.LinkedAliases?.Overall ?? true)
                && item.LinkedAliases is {} LinkedAliasesItem)
            {
                sb.AppendLine("LinkedAliases =>");
                using (sb.Brace())
                {
                    foreach (var subItem in LinkedAliasesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.DisplayName ?? true)
            {
                sb.AppendItem(item.DisplayName.FormKeyNullable, "DisplayName");
            }
            if (printMask?.DeathItem ?? true)
            {
                sb.AppendItem(item.DeathItem.FormKeyNullable, "DeathItem");
            }
            if (printMask?.ForcedVoice ?? true)
            {
                sb.AppendItem(item.ForcedVoice.FormKeyNullable, "ForcedVoice");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                sb.AppendLine("Spells =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Spells)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                sb.AppendLine("Factions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Factions)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.PackageData?.Overall ?? true)
            {
                sb.AppendLine("PackageData =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.PackageData)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.ScriptComment ?? true)
                && item.ScriptComment is {} ScriptCommentItem)
            {
                sb.AppendItem(ScriptCommentItem, "ScriptComment");
            }
            if (printMask?.VoiceTypes ?? true)
            {
                sb.AppendItem(item.VoiceTypes.FormKeyNullable, "VoiceTypes");
            }
            if (printMask?.TerminalMenus?.Overall ?? true)
            {
                sb.AppendLine("TerminalMenus =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.TerminalMenus)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
        }
        
        public static QuestReferenceAlias_FieldIndex ConvertFieldIndex(AQuestAlias_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestReferenceAliasGetter? lhs,
            IQuestReferenceAliasGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAQuestAliasGetter)lhs, (IAQuestAliasGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ID) ?? true))
            {
                if (lhs.ID != rhs.ID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ALFG) ?? true))
            {
                if (lhs.ALFG != rhs.ALFG) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.LegendaryRank) ?? true))
            {
                if (lhs.LegendaryRank != rhs.LegendaryRank) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.AliasIDToForceIntoWhenFilled) ?? true))
            {
                if (lhs.AliasIDToForceIntoWhenFilled != rhs.AliasIDToForceIntoWhenFilled) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ClosestToAlias) ?? true))
            {
                if (lhs.ClosestToAlias != rhs.ClosestToAlias) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ForcedReference) ?? true))
            {
                if (!lhs.ForcedReference.Equals(rhs.ForcedReference)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Location) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Location, rhs.Location, out var lhsLocation, out var rhsLocation, out var isLocationEqual))
                {
                    if (!((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)lhsLocation).CommonInstance()!).Equals(lhsLocation, rhsLocation, equalsMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.Location))) return false;
                }
                else if (!isLocationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.FindMatchingRefFromEvent) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FindMatchingRefFromEvent, rhs.FindMatchingRefFromEvent, out var lhsFindMatchingRefFromEvent, out var rhsFindMatchingRefFromEvent, out var isFindMatchingRefFromEventEqual))
                {
                    if (!((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)lhsFindMatchingRefFromEvent).CommonInstance()!).Equals(lhsFindMatchingRefFromEvent, rhsFindMatchingRefFromEvent, equalsMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.FindMatchingRefFromEvent))) return false;
                }
                else if (!isFindMatchingRefFromEventEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.CreateReferenceToObject) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CreateReferenceToObject, rhs.CreateReferenceToObject, out var lhsCreateReferenceToObject, out var rhsCreateReferenceToObject, out var isCreateReferenceToObjectEqual))
                {
                    if (!((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)lhsCreateReferenceToObject).CommonInstance()!).Equals(lhsCreateReferenceToObject, rhsCreateReferenceToObject, equalsMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.CreateReferenceToObject))) return false;
                }
                else if (!isCreateReferenceToObjectEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.External) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.External, rhs.External, out var lhsExternal, out var rhsExternal, out var isExternalEqual))
                {
                    if (!((ExternalAliasReferenceCommon)((IExternalAliasReferenceGetter)lhsExternal).CommonInstance()!).Equals(lhsExternal, rhsExternal, equalsMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.External))) return false;
                }
                else if (!isExternalEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.UniqueActor) ?? true))
            {
                if (!lhs.UniqueActor.Equals(rhs.UniqueActor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.UniqueBaseForm) ?? true))
            {
                if (!lhs.UniqueBaseForm.Equals(rhs.UniqueBaseForm)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.FindMatchingRefNearAlias) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FindMatchingRefNearAlias, rhs.FindMatchingRefNearAlias, out var lhsFindMatchingRefNearAlias, out var rhsFindMatchingRefNearAlias, out var isFindMatchingRefNearAliasEqual))
                {
                    if (!((FindMatchingRefNearAliasCommon)((IFindMatchingRefNearAliasGetter)lhsFindMatchingRefNearAlias).CommonInstance()!).Equals(lhsFindMatchingRefNearAlias, rhsFindMatchingRefNearAlias, equalsMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.FindMatchingRefNearAlias))) return false;
                }
                else if (!isFindMatchingRefNearAliasEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ReferenceCollectionAliasID) ?? true))
            {
                if (lhs.ReferenceCollectionAliasID != rhs.ReferenceCollectionAliasID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.CreateObjectTemplate) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CreateObjectTemplate, rhs.CreateObjectTemplate, out var lhsCreateObjectTemplate, out var rhsCreateObjectTemplate, out var isCreateObjectTemplateEqual))
                {
                    if (!((CreateObjectTemplateCommon)((ICreateObjectTemplateGetter)lhsCreateObjectTemplate).CommonInstance()!).Equals(lhsCreateObjectTemplate, rhsCreateObjectTemplate, equalsMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.CreateObjectTemplate))) return false;
                }
                else if (!isCreateObjectTemplateEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Items) ?? true))
            {
                if (!lhs.Items.SequenceEqualNullable(rhs.Items, (l, r) => ((ContainerEntryCommon)((IContainerEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.Items)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.SpectatorOverridePackageList) ?? true))
            {
                if (!lhs.SpectatorOverridePackageList.Equals(rhs.SpectatorOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ObserveDeadBodyOverridePackageList) ?? true))
            {
                if (!lhs.ObserveDeadBodyOverridePackageList.Equals(rhs.ObserveDeadBodyOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.GuardWarnOverridePackageList) ?? true))
            {
                if (!lhs.GuardWarnOverridePackageList.Equals(rhs.GuardWarnOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.CombatOverridePackageList) ?? true))
            {
                if (!lhs.CombatOverridePackageList.Equals(rhs.CombatOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.LinkedAliases) ?? true))
            {
                if (!lhs.LinkedAliases.SequenceEqualNullable(rhs.LinkedAliases, (l, r) => ((LinkedAliasCommon)((ILinkedAliasGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.LinkedAliases)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.DisplayName) ?? true))
            {
                if (!lhs.DisplayName.Equals(rhs.DisplayName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.DeathItem) ?? true))
            {
                if (!lhs.DeathItem.Equals(rhs.DeathItem)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ForcedVoice) ?? true))
            {
                if (!lhs.ForcedVoice.Equals(rhs.ForcedVoice)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Spells) ?? true))
            {
                if (!lhs.Spells.SequenceEqualNullable(rhs.Spells)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Factions) ?? true))
            {
                if (!lhs.Factions.SequenceEqualNullable(rhs.Factions)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.PackageData) ?? true))
            {
                if (!lhs.PackageData.SequenceEqualNullable(rhs.PackageData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ScriptComment) ?? true))
            {
                if (!string.Equals(lhs.ScriptComment, rhs.ScriptComment)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.VoiceTypes) ?? true))
            {
                if (!lhs.VoiceTypes.Equals(rhs.VoiceTypes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.TerminalMenus) ?? true))
            {
                if (!lhs.TerminalMenus.SequenceEqualNullable(rhs.TerminalMenus)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAQuestAliasGetter? lhs,
            IAQuestAliasGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IQuestReferenceAliasGetter?)lhs,
                rhs: rhs as IQuestReferenceAliasGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IQuestReferenceAliasGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ID);
            hash.Add(item.Name);
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.ALFG is {} ALFGitem)
            {
                hash.Add(ALFGitem);
            }
            if (item.LegendaryRank is {} LegendaryRankitem)
            {
                hash.Add(LegendaryRankitem);
            }
            if (item.AliasIDToForceIntoWhenFilled is {} AliasIDToForceIntoWhenFilleditem)
            {
                hash.Add(AliasIDToForceIntoWhenFilleditem);
            }
            if (item.ClosestToAlias is {} ClosestToAliasitem)
            {
                hash.Add(ClosestToAliasitem);
            }
            hash.Add(item.ForcedReference);
            if (item.Location is {} Locationitem)
            {
                hash.Add(Locationitem);
            }
            if (item.FindMatchingRefFromEvent is {} FindMatchingRefFromEventitem)
            {
                hash.Add(FindMatchingRefFromEventitem);
            }
            if (item.CreateReferenceToObject is {} CreateReferenceToObjectitem)
            {
                hash.Add(CreateReferenceToObjectitem);
            }
            if (item.External is {} Externalitem)
            {
                hash.Add(Externalitem);
            }
            hash.Add(item.UniqueActor);
            hash.Add(item.UniqueBaseForm);
            if (item.FindMatchingRefNearAlias is {} FindMatchingRefNearAliasitem)
            {
                hash.Add(FindMatchingRefNearAliasitem);
            }
            if (item.ReferenceCollectionAliasID is {} ReferenceCollectionAliasIDitem)
            {
                hash.Add(ReferenceCollectionAliasIDitem);
            }
            if (item.CreateObjectTemplate is {} CreateObjectTemplateitem)
            {
                hash.Add(CreateObjectTemplateitem);
            }
            hash.Add(item.Conditions);
            hash.Add(item.Keywords);
            hash.Add(item.Items);
            hash.Add(item.SpectatorOverridePackageList);
            hash.Add(item.ObserveDeadBodyOverridePackageList);
            hash.Add(item.GuardWarnOverridePackageList);
            hash.Add(item.CombatOverridePackageList);
            hash.Add(item.LinkedAliases);
            hash.Add(item.DisplayName);
            hash.Add(item.DeathItem);
            hash.Add(item.ForcedVoice);
            hash.Add(item.Spells);
            hash.Add(item.Factions);
            hash.Add(item.PackageData);
            if (item.ScriptComment is {} ScriptCommentitem)
            {
                hash.Add(ScriptCommentitem);
            }
            hash.Add(item.VoiceTypes);
            hash.Add(item.TerminalMenus);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAQuestAliasGetter item)
        {
            return GetHashCode(item: (IQuestReferenceAliasGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return QuestReferenceAlias.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IQuestReferenceAliasGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.ForcedReference, out var ForcedReferenceInfo))
            {
                yield return ForcedReferenceInfo;
            }
            if (obj.Location is {} LocationItems)
            {
                foreach (var item in LocationItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.CreateReferenceToObject is {} CreateReferenceToObjectItems)
            {
                foreach (var item in CreateReferenceToObjectItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.External is {} ExternalItems)
            {
                foreach (var item in ExternalItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.UniqueActor, out var UniqueActorInfo))
            {
                yield return UniqueActorInfo;
            }
            if (FormLinkInformation.TryFactory(obj.UniqueBaseForm, out var UniqueBaseFormInfo))
            {
                yield return UniqueBaseFormInfo;
            }
            if (obj.FindMatchingRefNearAlias is {} FindMatchingRefNearAliasItems)
            {
                foreach (var item in FindMatchingRefNearAliasItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Items is {} ItemsItem)
            {
                foreach (var item in ItemsItem.WhereCastable<IContainerEntryGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.SpectatorOverridePackageList, out var SpectatorOverridePackageListInfo))
            {
                yield return SpectatorOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ObserveDeadBodyOverridePackageList, out var ObserveDeadBodyOverridePackageListInfo))
            {
                yield return ObserveDeadBodyOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.GuardWarnOverridePackageList, out var GuardWarnOverridePackageListInfo))
            {
                yield return GuardWarnOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CombatOverridePackageList, out var CombatOverridePackageListInfo))
            {
                yield return CombatOverridePackageListInfo;
            }
            if (obj.LinkedAliases is {} LinkedAliasesItem)
            {
                foreach (var item in LinkedAliasesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.DisplayName, out var DisplayNameInfo))
            {
                yield return DisplayNameInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DeathItem, out var DeathItemInfo))
            {
                yield return DeathItemInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ForcedVoice, out var ForcedVoiceInfo))
            {
                yield return ForcedVoiceInfo;
            }
            foreach (var item in obj.Spells)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Factions)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.PackageData)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.VoiceTypes, out var VoiceTypesInfo))
            {
                yield return VoiceTypesInfo;
            }
            foreach (var item in obj.TerminalMenus)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class QuestReferenceAliasSetterTranslationCommon : AQuestAliasSetterTranslationCommon
    {
        public new static readonly QuestReferenceAliasSetterTranslationCommon Instance = new QuestReferenceAliasSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IQuestReferenceAlias item,
            IQuestReferenceAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAQuestAlias)item,
                (IAQuestAliasGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ID) ?? true))
            {
                item.ID = rhs.ID;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ALFG) ?? true))
            {
                item.ALFG = rhs.ALFG;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.LegendaryRank) ?? true))
            {
                item.LegendaryRank = rhs.LegendaryRank;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.AliasIDToForceIntoWhenFilled) ?? true))
            {
                item.AliasIDToForceIntoWhenFilled = rhs.AliasIDToForceIntoWhenFilled;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ClosestToAlias) ?? true))
            {
                item.ClosestToAlias = rhs.ClosestToAlias;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ForcedReference) ?? true))
            {
                item.ForcedReference.SetTo(rhs.ForcedReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Location) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.Location);
                try
                {
                    if(rhs.Location is {} rhsLocation)
                    {
                        item.Location = rhsLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.Location));
                    }
                    else
                    {
                        item.Location = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.FindMatchingRefFromEvent) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.FindMatchingRefFromEvent);
                try
                {
                    if(rhs.FindMatchingRefFromEvent is {} rhsFindMatchingRefFromEvent)
                    {
                        item.FindMatchingRefFromEvent = rhsFindMatchingRefFromEvent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.FindMatchingRefFromEvent));
                    }
                    else
                    {
                        item.FindMatchingRefFromEvent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.CreateReferenceToObject) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.CreateReferenceToObject);
                try
                {
                    if(rhs.CreateReferenceToObject is {} rhsCreateReferenceToObject)
                    {
                        item.CreateReferenceToObject = rhsCreateReferenceToObject.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.CreateReferenceToObject));
                    }
                    else
                    {
                        item.CreateReferenceToObject = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.External) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.External);
                try
                {
                    if(rhs.External is {} rhsExternal)
                    {
                        item.External = rhsExternal.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.External));
                    }
                    else
                    {
                        item.External = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.UniqueActor) ?? true))
            {
                item.UniqueActor.SetTo(rhs.UniqueActor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.UniqueBaseForm) ?? true))
            {
                item.UniqueBaseForm.SetTo(rhs.UniqueBaseForm.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.FindMatchingRefNearAlias) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.FindMatchingRefNearAlias);
                try
                {
                    if(rhs.FindMatchingRefNearAlias is {} rhsFindMatchingRefNearAlias)
                    {
                        item.FindMatchingRefNearAlias = rhsFindMatchingRefNearAlias.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.FindMatchingRefNearAlias));
                    }
                    else
                    {
                        item.FindMatchingRefNearAlias = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ReferenceCollectionAliasID) ?? true))
            {
                item.ReferenceCollectionAliasID = rhs.ReferenceCollectionAliasID;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.CreateObjectTemplate) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.CreateObjectTemplate);
                try
                {
                    if(rhs.CreateObjectTemplate is {} rhsCreateObjectTemplate)
                    {
                        item.CreateObjectTemplate = rhsCreateObjectTemplate.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestReferenceAlias_FieldIndex.CreateObjectTemplate));
                    }
                    else
                    {
                        item.CreateObjectTemplate = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.Items);
                try
                {
                    if ((rhs.Items != null))
                    {
                        item.Items = 
                            rhs.Items
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ContainerEntry>();
                    }
                    else
                    {
                        item.Items = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.SpectatorOverridePackageList) ?? true))
            {
                item.SpectatorOverridePackageList.SetTo(rhs.SpectatorOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ObserveDeadBodyOverridePackageList) ?? true))
            {
                item.ObserveDeadBodyOverridePackageList.SetTo(rhs.ObserveDeadBodyOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.GuardWarnOverridePackageList) ?? true))
            {
                item.GuardWarnOverridePackageList.SetTo(rhs.GuardWarnOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.CombatOverridePackageList) ?? true))
            {
                item.CombatOverridePackageList.SetTo(rhs.CombatOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.LinkedAliases) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.LinkedAliases);
                try
                {
                    if ((rhs.LinkedAliases != null))
                    {
                        item.LinkedAliases = 
                            rhs.LinkedAliases
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LinkedAlias>();
                    }
                    else
                    {
                        item.LinkedAliases = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.DisplayName) ?? true))
            {
                item.DisplayName.SetTo(rhs.DisplayName.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.DeathItem) ?? true))
            {
                item.DeathItem.SetTo(rhs.DeathItem.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ForcedVoice) ?? true))
            {
                item.ForcedVoice.SetTo(rhs.ForcedVoice.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.Spells);
                try
                {
                    item.Spells.SetTo(
                        rhs.Spells
                            .Select(b => (IFormLinkGetter<ISpellGetter>)new FormLink<ISpellGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.Factions);
                try
                {
                    item.Factions.SetTo(
                        rhs.Factions
                            .Select(b => (IFormLinkGetter<IFactionGetter>)new FormLink<IFactionGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.PackageData) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.PackageData);
                try
                {
                    item.PackageData.SetTo(
                        rhs.PackageData
                            .Select(b => (IFormLinkGetter<IPackageGetter>)new FormLink<IPackageGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.ScriptComment) ?? true))
            {
                item.ScriptComment = rhs.ScriptComment;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.VoiceTypes) ?? true))
            {
                item.VoiceTypes.SetTo(rhs.VoiceTypes.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestReferenceAlias_FieldIndex.TerminalMenus) ?? true))
            {
                errorMask?.PushIndex((int)QuestReferenceAlias_FieldIndex.TerminalMenus);
                try
                {
                    item.TerminalMenus.SetTo(
                        rhs.TerminalMenus
                            .Select(b => (IFormLinkGetter<ITerminalGetter>)new FormLink<ITerminalGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IQuestReferenceAlias item,
            IQuestReferenceAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IAQuestAlias item,
            IAQuestAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuestReferenceAlias)item,
                rhs: (IQuestReferenceAliasGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public QuestReferenceAlias DeepCopy(
            IQuestReferenceAliasGetter item,
            QuestReferenceAlias.TranslationMask? copyMask = null)
        {
            QuestReferenceAlias ret = (QuestReferenceAlias)((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)item).CommonInstance()!).GetNew();
            ((QuestReferenceAliasSetterTranslationCommon)((IQuestReferenceAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public QuestReferenceAlias DeepCopy(
            IQuestReferenceAliasGetter item,
            out QuestReferenceAlias.ErrorMask errorMask,
            QuestReferenceAlias.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            QuestReferenceAlias ret = (QuestReferenceAlias)((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)item).CommonInstance()!).GetNew();
            ((QuestReferenceAliasSetterTranslationCommon)((IQuestReferenceAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = QuestReferenceAlias.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public QuestReferenceAlias DeepCopy(
            IQuestReferenceAliasGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            QuestReferenceAlias ret = (QuestReferenceAlias)((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)item).CommonInstance()!).GetNew();
            ((QuestReferenceAliasSetterTranslationCommon)((IQuestReferenceAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class QuestReferenceAlias
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestReferenceAlias_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => QuestReferenceAlias_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestReferenceAliasCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return QuestReferenceAliasSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestReferenceAliasSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class QuestReferenceAliasBinaryWriteTranslation :
        AQuestAliasBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly QuestReferenceAliasBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IQuestReferenceAliasGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ID,
                header: translationParams.ConvertToCustom(RecordTypes.ALST));
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.ALID),
                binaryType: StringBinaryType.NullTerminate);
            EnumBinaryTranslation<AQuestAlias.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ALFG,
                header: translationParams.ConvertToCustom(RecordTypes.ALFG));
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.LegendaryRank,
                header: translationParams.ConvertToCustom(RecordTypes.ALLR));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.AliasIDToForceIntoWhenFilled,
                header: translationParams.ConvertToCustom(RecordTypes.ALFI));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ClosestToAlias,
                header: translationParams.ConvertToCustom(RecordTypes.ALCC));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ForcedReference,
                header: translationParams.ConvertToCustom(RecordTypes.ALFR));
            if (item.Location is {} LocationItem)
            {
                ((LocationAliasReferenceBinaryWriteTranslation)((IBinaryItem)LocationItem).BinaryWriteTranslator).Write(
                    item: LocationItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.FindMatchingRefFromEvent is {} FindMatchingRefFromEventItem)
            {
                ((FindMatchingRefFromEventBinaryWriteTranslation)((IBinaryItem)FindMatchingRefFromEventItem).BinaryWriteTranslator).Write(
                    item: FindMatchingRefFromEventItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.CreateReferenceToObject is {} CreateReferenceToObjectItem)
            {
                ((CreateReferenceToObjectBinaryWriteTranslation)((IBinaryItem)CreateReferenceToObjectItem).BinaryWriteTranslator).Write(
                    item: CreateReferenceToObjectItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.External is {} ExternalItem)
            {
                ((ExternalAliasReferenceBinaryWriteTranslation)((IBinaryItem)ExternalItem).BinaryWriteTranslator).Write(
                    item: ExternalItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UniqueActor,
                header: translationParams.ConvertToCustom(RecordTypes.ALUA));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UniqueBaseForm,
                header: translationParams.ConvertToCustom(RecordTypes.ALUB));
            if (item.FindMatchingRefNearAlias is {} FindMatchingRefNearAliasItem)
            {
                ((FindMatchingRefNearAliasBinaryWriteTranslation)((IBinaryItem)FindMatchingRefNearAliasItem).BinaryWriteTranslator).Write(
                    item: FindMatchingRefNearAliasItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ReferenceCollectionAliasID,
                header: translationParams.ConvertToCustom(RecordTypes.ALCS));
            if (item.CreateObjectTemplate is {} CreateObjectTemplateItem)
            {
                ((CreateObjectTemplateBinaryWriteTranslation)((IBinaryItem)CreateObjectTemplateItem).BinaryWriteTranslator).Write(
                    item: CreateObjectTemplateItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IContainerEntryGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Items,
                counterType: RecordTypes.COCT,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IContainerEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ContainerEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpectatorOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.SPOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObserveDeadBodyOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.OCOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GuardWarnOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.GWOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.ECOR));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILinkedAliasGetter>.Instance.Write(
                writer: writer,
                items: item.LinkedAliases,
                recordType: translationParams.ConvertToCustom(RecordTypes.ALLA),
                transl: (MutagenWriter subWriter, ILinkedAliasGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LinkedAliasBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DisplayName,
                header: translationParams.ConvertToCustom(RecordTypes.ALDN));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DeathItem,
                header: translationParams.ConvertToCustom(RecordTypes.ALDI));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ForcedVoice,
                header: translationParams.ConvertToCustom(RecordTypes.ALFV));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellGetter>>.Instance.Write(
                writer: writer,
                items: item.Spells,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.ALSP));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IFactionGetter>>.Instance.Write(
                writer: writer,
                items: item.Factions,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IFactionGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.ALFC));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPackageGetter>>.Instance.Write(
                writer: writer,
                items: item.PackageData,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPackageGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.ALPC));
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ScriptComment,
                header: translationParams.ConvertToCustom(RecordTypes.SCCM),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VoiceTypes,
                header: translationParams.ConvertToCustom(RecordTypes.VTCK));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ITerminalGetter>>.Instance.Write(
                writer: writer,
                items: item.TerminalMenus,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ITerminalGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.ALTM));
                });
        }

        public void Write(
            MutagenWriter writer,
            IQuestReferenceAliasGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IQuestReferenceAliasGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAQuestAliasGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IQuestReferenceAliasGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class QuestReferenceAliasBinaryCreateTranslation : AQuestAliasBinaryCreateTranslation
    {
        public new static readonly QuestReferenceAliasBinaryCreateTranslation Instance = new QuestReferenceAliasBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IQuestReferenceAlias item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ALST:
                {
                    if (lastParsed.ShortCircuit((int)QuestReferenceAlias_FieldIndex.ID, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ID = frame.ReadUInt32();
                    return (int)QuestReferenceAlias_FieldIndex.ID;
                }
                case RecordTypeInts.ALID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)QuestReferenceAlias_FieldIndex.Name;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<AQuestAlias.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)QuestReferenceAlias_FieldIndex.Flags;
                }
                case RecordTypeInts.ALFG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ALFG = frame.ReadUInt32();
                    return (int)QuestReferenceAlias_FieldIndex.ALFG;
                }
                case RecordTypeInts.ALLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LegendaryRank = frame.ReadUInt8();
                    return (int)QuestReferenceAlias_FieldIndex.LegendaryRank;
                }
                case RecordTypeInts.ALFI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AliasIDToForceIntoWhenFilled = frame.ReadInt32();
                    return (int)QuestReferenceAlias_FieldIndex.AliasIDToForceIntoWhenFilled;
                }
                case RecordTypeInts.ALCC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ClosestToAlias = frame.ReadInt32();
                    return (int)QuestReferenceAlias_FieldIndex.ClosestToAlias;
                }
                case RecordTypeInts.ALFR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ForcedReference.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestReferenceAlias_FieldIndex.ForcedReference;
                }
                case RecordTypeInts.ALFA:
                case RecordTypeInts.KNAM:
                case RecordTypeInts.ALRT:
                {
                    item.Location = Mutagen.Bethesda.Starfield.LocationAliasReference.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestReferenceAlias_FieldIndex.Location;
                }
                case RecordTypeInts.ALFE:
                case RecordTypeInts.ALFD:
                {
                    item.FindMatchingRefFromEvent = Mutagen.Bethesda.Starfield.FindMatchingRefFromEvent.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestReferenceAlias_FieldIndex.FindMatchingRefFromEvent;
                }
                case RecordTypeInts.ALCO:
                {
                    item.CreateReferenceToObject = Mutagen.Bethesda.Starfield.CreateReferenceToObject.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestReferenceAlias_FieldIndex.CreateReferenceToObject;
                }
                case RecordTypeInts.ALEQ:
                case RecordTypeInts.ALEA:
                {
                    item.External = Mutagen.Bethesda.Starfield.ExternalAliasReference.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestReferenceAlias_FieldIndex.External;
                }
                case RecordTypeInts.ALUA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UniqueActor.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestReferenceAlias_FieldIndex.UniqueActor;
                }
                case RecordTypeInts.ALUB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UniqueBaseForm.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestReferenceAlias_FieldIndex.UniqueBaseForm;
                }
                case RecordTypeInts.ALNA:
                case RecordTypeInts.ALNT:
                case RecordTypeInts.ALNR:
                {
                    item.FindMatchingRefNearAlias = Mutagen.Bethesda.Starfield.FindMatchingRefNearAlias.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestReferenceAlias_FieldIndex.FindMatchingRefNearAlias;
                }
                case RecordTypeInts.ALCS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ReferenceCollectionAliasID = frame.ReadInt32();
                    return (int)QuestReferenceAlias_FieldIndex.ReferenceCollectionAliasID;
                }
                case RecordTypeInts.ALCM:
                case RecordTypeInts.ALCA:
                {
                    item.CreateObjectTemplate = Mutagen.Bethesda.Starfield.CreateObjectTemplate.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestReferenceAlias_FieldIndex.CreateObjectTemplate;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)QuestReferenceAlias_FieldIndex.Conditions;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)QuestReferenceAlias_FieldIndex.Keywords;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    item.Items = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ContainerEntry>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.COCT,
                            triggeringRecord: ContainerEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ContainerEntry.TryCreateFromBinary)
                        .CastExtendedList<ContainerEntry>();
                    return (int)QuestReferenceAlias_FieldIndex.Items;
                }
                case RecordTypeInts.SPOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpectatorOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestReferenceAlias_FieldIndex.SpectatorOverridePackageList;
                }
                case RecordTypeInts.OCOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObserveDeadBodyOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestReferenceAlias_FieldIndex.ObserveDeadBodyOverridePackageList;
                }
                case RecordTypeInts.GWOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GuardWarnOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestReferenceAlias_FieldIndex.GuardWarnOverridePackageList;
                }
                case RecordTypeInts.ECOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestReferenceAlias_FieldIndex.CombatOverridePackageList;
                }
                case RecordTypeInts.ALLA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LinkedAliases = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LinkedAlias>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LinkedAlias.TryCreateFromBinary)
                        .CastExtendedList<LinkedAlias>();
                    return (int)QuestReferenceAlias_FieldIndex.LinkedAliases;
                }
                case RecordTypeInts.ALDN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DisplayName.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestReferenceAlias_FieldIndex.DisplayName;
                }
                case RecordTypeInts.ALDI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DeathItem.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestReferenceAlias_FieldIndex.DeathItem;
                }
                case RecordTypeInts.ALFV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ForcedVoice.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestReferenceAlias_FieldIndex.ForcedVoice;
                }
                case RecordTypeInts.ALSP:
                {
                    item.Spells.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.ALSP),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)QuestReferenceAlias_FieldIndex.Spells;
                }
                case RecordTypeInts.ALFC:
                {
                    item.Factions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IFactionGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.ALFC),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)QuestReferenceAlias_FieldIndex.Factions;
                }
                case RecordTypeInts.ALPC:
                {
                    item.PackageData.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPackageGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.ALPC),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)QuestReferenceAlias_FieldIndex.PackageData;
                }
                case RecordTypeInts.SCCM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ScriptComment = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)QuestReferenceAlias_FieldIndex.ScriptComment;
                }
                case RecordTypeInts.VTCK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VoiceTypes.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestReferenceAlias_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.ALTM:
                {
                    item.TerminalMenus.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ITerminalGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.ALTM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)QuestReferenceAlias_FieldIndex.TerminalMenus;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class QuestReferenceAliasBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class QuestReferenceAliasBinaryOverlay :
        AQuestAliasBinaryOverlay,
        IQuestReferenceAliasGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestReferenceAlias_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => QuestReferenceAlias_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestReferenceAliasCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestReferenceAliasSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestReferenceAliasCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestReferenceAliasBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestReferenceAliasBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region ID
        private int? _IDLocation;
        public UInt32 ID => _IDLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IDLocation.Value, _package.MetaData.Constants)) : default(UInt32);
        #endregion
        #region Name
        private int? _NameLocation;
        public String Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public AQuestAlias.Flag? Flags => _FlagsLocation.HasValue ? (AQuestAlias.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(AQuestAlias.Flag?);
        #endregion
        #region ALFG
        private int? _ALFGLocation;
        public UInt32? ALFG => _ALFGLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ALFGLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region LegendaryRank
        private int? _LegendaryRankLocation;
        public Byte? LegendaryRank => _LegendaryRankLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _LegendaryRankLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region AliasIDToForceIntoWhenFilled
        private int? _AliasIDToForceIntoWhenFilledLocation;
        public Int32? AliasIDToForceIntoWhenFilled => _AliasIDToForceIntoWhenFilledLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AliasIDToForceIntoWhenFilledLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region ClosestToAlias
        private int? _ClosestToAliasLocation;
        public Int32? ClosestToAlias => _ClosestToAliasLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ClosestToAliasLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region ForcedReference
        private int? _ForcedReferenceLocation;
        public IFormLinkNullableGetter<IPlacedGetter> ForcedReference => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedGetter>(_package, _recordData, _ForcedReferenceLocation);
        #endregion
        public ILocationAliasReferenceGetter? Location { get; private set; }
        public IFindMatchingRefFromEventGetter? FindMatchingRefFromEvent { get; private set; }
        public ICreateReferenceToObjectGetter? CreateReferenceToObject { get; private set; }
        public IExternalAliasReferenceGetter? External { get; private set; }
        #region UniqueActor
        private int? _UniqueActorLocation;
        public IFormLinkNullableGetter<INpcGetter> UniqueActor => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<INpcGetter>(_package, _recordData, _UniqueActorLocation);
        #endregion
        #region UniqueBaseForm
        private int? _UniqueBaseFormLocation;
        public IFormLinkNullableGetter<IGenericBaseFormGetter> UniqueBaseForm => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGenericBaseFormGetter>(_package, _recordData, _UniqueBaseFormLocation);
        #endregion
        public IFindMatchingRefNearAliasGetter? FindMatchingRefNearAlias { get; private set; }
        #region ReferenceCollectionAliasID
        private int? _ReferenceCollectionAliasIDLocation;
        public Int32? ReferenceCollectionAliasID => _ReferenceCollectionAliasIDLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ReferenceCollectionAliasIDLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        public ICreateObjectTemplateGetter? CreateObjectTemplate { get; private set; }
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = [];
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IContainerEntryGetter>? Items { get; private set; }
        #region SpectatorOverridePackageList
        private int? _SpectatorOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> SpectatorOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _SpectatorOverridePackageListLocation);
        #endregion
        #region ObserveDeadBodyOverridePackageList
        private int? _ObserveDeadBodyOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> ObserveDeadBodyOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _ObserveDeadBodyOverridePackageListLocation);
        #endregion
        #region GuardWarnOverridePackageList
        private int? _GuardWarnOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> GuardWarnOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _GuardWarnOverridePackageListLocation);
        #endregion
        #region CombatOverridePackageList
        private int? _CombatOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> CombatOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _CombatOverridePackageListLocation);
        #endregion
        public IReadOnlyList<ILinkedAliasGetter>? LinkedAliases { get; private set; }
        #region DisplayName
        private int? _DisplayNameLocation;
        public IFormLinkNullableGetter<IMessageGetter> DisplayName => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMessageGetter>(_package, _recordData, _DisplayNameLocation);
        #endregion
        #region DeathItem
        private int? _DeathItemLocation;
        public IFormLinkNullableGetter<ILeveledItemGetter> DeathItem => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILeveledItemGetter>(_package, _recordData, _DeathItemLocation);
        #endregion
        #region ForcedVoice
        private int? _ForcedVoiceLocation;
        public IFormLinkNullableGetter<IVoiceTypeGetter> ForcedVoice => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IVoiceTypeGetter>(_package, _recordData, _ForcedVoiceLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<ISpellGetter>> Spells { get; private set; } = [];
        public IReadOnlyList<IFormLinkGetter<IFactionGetter>> Factions { get; private set; } = [];
        public IReadOnlyList<IFormLinkGetter<IPackageGetter>> PackageData { get; private set; } = [];
        #region ScriptComment
        private int? _ScriptCommentLocation;
        public String? ScriptComment => _ScriptCommentLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScriptCommentLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region VoiceTypes
        private int? _VoiceTypesLocation;
        public IFormLinkNullableGetter<IAliasVoiceTypeGetter> VoiceTypes => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IAliasVoiceTypeGetter>(_package, _recordData, _VoiceTypesLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<ITerminalGetter>> TerminalMenus { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected QuestReferenceAliasBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IQuestReferenceAliasGetter QuestReferenceAliasFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new QuestReferenceAliasBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IQuestReferenceAliasGetter QuestReferenceAliasFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return QuestReferenceAliasFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ALST:
                {
                    if (lastParsed.ShortCircuit((int)QuestReferenceAlias_FieldIndex.ID, translationParams)) return ParseResult.Stop;
                    _IDLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.ID;
                }
                case RecordTypeInts.ALID:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.Name;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.Flags;
                }
                case RecordTypeInts.ALFG:
                {
                    _ALFGLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.ALFG;
                }
                case RecordTypeInts.ALLR:
                {
                    _LegendaryRankLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.LegendaryRank;
                }
                case RecordTypeInts.ALFI:
                {
                    _AliasIDToForceIntoWhenFilledLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.AliasIDToForceIntoWhenFilled;
                }
                case RecordTypeInts.ALCC:
                {
                    _ClosestToAliasLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.ClosestToAlias;
                }
                case RecordTypeInts.ALFR:
                {
                    _ForcedReferenceLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.ForcedReference;
                }
                case RecordTypeInts.ALFA:
                case RecordTypeInts.KNAM:
                case RecordTypeInts.ALRT:
                {
                    this.Location = LocationAliasReferenceBinaryOverlay.LocationAliasReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestReferenceAlias_FieldIndex.Location;
                }
                case RecordTypeInts.ALFE:
                case RecordTypeInts.ALFD:
                {
                    this.FindMatchingRefFromEvent = FindMatchingRefFromEventBinaryOverlay.FindMatchingRefFromEventFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestReferenceAlias_FieldIndex.FindMatchingRefFromEvent;
                }
                case RecordTypeInts.ALCO:
                {
                    this.CreateReferenceToObject = CreateReferenceToObjectBinaryOverlay.CreateReferenceToObjectFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestReferenceAlias_FieldIndex.CreateReferenceToObject;
                }
                case RecordTypeInts.ALEQ:
                case RecordTypeInts.ALEA:
                {
                    this.External = ExternalAliasReferenceBinaryOverlay.ExternalAliasReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestReferenceAlias_FieldIndex.External;
                }
                case RecordTypeInts.ALUA:
                {
                    _UniqueActorLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.UniqueActor;
                }
                case RecordTypeInts.ALUB:
                {
                    _UniqueBaseFormLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.UniqueBaseForm;
                }
                case RecordTypeInts.ALNA:
                case RecordTypeInts.ALNT:
                case RecordTypeInts.ALNR:
                {
                    this.FindMatchingRefNearAlias = FindMatchingRefNearAliasBinaryOverlay.FindMatchingRefNearAliasFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestReferenceAlias_FieldIndex.FindMatchingRefNearAlias;
                }
                case RecordTypeInts.ALCS:
                {
                    _ReferenceCollectionAliasIDLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.ReferenceCollectionAliasID;
                }
                case RecordTypeInts.ALCM:
                case RecordTypeInts.ALCA:
                {
                    this.CreateObjectTemplate = CreateObjectTemplateBinaryOverlay.CreateObjectTemplateFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestReferenceAlias_FieldIndex.CreateObjectTemplate;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)QuestReferenceAlias_FieldIndex.Conditions;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)QuestReferenceAlias_FieldIndex.Keywords;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    this.Items = BinaryOverlayList.FactoryByCountPerItem<IContainerEntryGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: ContainerEntry_Registration.TriggerSpecs,
                        countType: RecordTypes.COCT,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ContainerEntryBinaryOverlay.ContainerEntryFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)QuestReferenceAlias_FieldIndex.Items;
                }
                case RecordTypeInts.SPOR:
                {
                    _SpectatorOverridePackageListLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.SpectatorOverridePackageList;
                }
                case RecordTypeInts.OCOR:
                {
                    _ObserveDeadBodyOverridePackageListLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.ObserveDeadBodyOverridePackageList;
                }
                case RecordTypeInts.GWOR:
                {
                    _GuardWarnOverridePackageListLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.GuardWarnOverridePackageList;
                }
                case RecordTypeInts.ECOR:
                {
                    _CombatOverridePackageListLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.CombatOverridePackageList;
                }
                case RecordTypeInts.ALLA:
                {
                    this.LinkedAliases = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILinkedAliasGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 8,
                        getter: (s, p) => LinkedAliasBinaryOverlay.LinkedAliasFactory(s, p));
                    return (int)QuestReferenceAlias_FieldIndex.LinkedAliases;
                }
                case RecordTypeInts.ALDN:
                {
                    _DisplayNameLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.DisplayName;
                }
                case RecordTypeInts.ALDI:
                {
                    _DeathItemLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.DeathItem;
                }
                case RecordTypeInts.ALFV:
                {
                    _ForcedVoiceLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.ForcedVoice;
                }
                case RecordTypeInts.ALSP:
                {
                    this.Spells = BinaryOverlayList.FactoryByArray<IFormLinkGetter<ISpellGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.ALSP,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)QuestReferenceAlias_FieldIndex.Spells;
                }
                case RecordTypeInts.ALFC:
                {
                    this.Factions = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IFactionGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IFactionGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.ALFC,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)QuestReferenceAlias_FieldIndex.Factions;
                }
                case RecordTypeInts.ALPC:
                {
                    this.PackageData = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IPackageGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPackageGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.ALPC,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)QuestReferenceAlias_FieldIndex.PackageData;
                }
                case RecordTypeInts.SCCM:
                {
                    _ScriptCommentLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.ScriptComment;
                }
                case RecordTypeInts.VTCK:
                {
                    _VoiceTypesLocation = (stream.Position - offset);
                    return (int)QuestReferenceAlias_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.ALTM:
                {
                    this.TerminalMenus = BinaryOverlayList.FactoryByArray<IFormLinkGetter<ITerminalGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ITerminalGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.ALTM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)QuestReferenceAlias_FieldIndex.TerminalMenus;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestReferenceAliasMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IQuestReferenceAliasGetter rhs) return false;
            return ((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestReferenceAliasGetter? obj)
        {
            return ((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestReferenceAliasCommon)((IQuestReferenceAliasGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

