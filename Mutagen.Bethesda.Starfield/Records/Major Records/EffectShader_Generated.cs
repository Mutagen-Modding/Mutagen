/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class EffectShader :
        StarfieldMajorRecord,
        IEffectShaderInternal,
        IEquatable<IEffectShaderGetter>,
        ILoquiObjectSetter<EffectShader>
    {
        #region Ctor
        protected EffectShader()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IEffectShaderGetter.Components => _Components;
        #endregion

        #endregion
        #region EffectSequence
        private readonly IFormLinkNullable<IEffectSequenceGetter> _EffectSequence = new FormLinkNullable<IEffectSequenceGetter>();
        public IFormLinkNullable<IEffectSequenceGetter> EffectSequence
        {
            get => _EffectSequence;
            set => _EffectSequence.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEffectSequenceGetter> IEffectShaderGetter.EffectSequence => this.EffectSequence;
        #endregion
        #region EdgeEffectFallOff
        public Single EdgeEffectFallOff { get; set; } = default(Single);
        #endregion
        #region EdgeEffectColor
        public Color EdgeEffectColor { get; set; } = default(Color);
        #endregion
        #region EdgeEffectAlphaFadeInTime
        public Single EdgeEffectAlphaFadeInTime { get; set; } = default(Single);
        #endregion
        #region EdgeEffectFullAlphaTime
        public Single EdgeEffectFullAlphaTime { get; set; } = default(Single);
        #endregion
        #region EdgeEffectAlphaFadeOutTime
        public Single EdgeEffectAlphaFadeOutTime { get; set; } = default(Single);
        #endregion
        #region EdgeEffectPersistentAlphaRatio
        public Percent EdgeEffectPersistentAlphaRatio { get; set; } = default(Percent);
        #endregion
        #region EdgeEffectAlphaPulseAmplitude
        public Single EdgeEffectAlphaPulseAmplitude { get; set; } = default(Single);
        #endregion
        #region EdgeEffectAlphaPulseFrequency
        public Single EdgeEffectAlphaPulseFrequency { get; set; } = default(Single);
        #endregion
        #region EdgeEffectFullAlphaRatio
        public Percent EdgeEffectFullAlphaRatio { get; set; } = default(Percent);
        #endregion
        #region HolesAlphaTestAnimationStartTime
        public Single HolesAlphaTestAnimationStartTime { get; set; } = default(Single);
        #endregion
        #region HolesAlphaTestAnimationStopTime
        public Single HolesAlphaTestAnimationStopTime { get; set; } = default(Single);
        #endregion
        #region HolesAlphaTestAnimationStartValue
        public Single HolesAlphaTestAnimationStartValue { get; set; } = default(Single);
        #endregion
        #region HolesAlphaTestAnimationStopValue
        public Single HolesAlphaTestAnimationStopValue { get; set; } = default(Single);
        #endregion
        #region Sounds
        public SoundReference Sounds { get; set; } = new SoundReference();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter IEffectShaderGetter.Sounds => Sounds;
        #endregion
        #region BoneDepth
        public SByte BoneDepth { get; set; } = default(SByte);
        #endregion
        #region Flags
        public EffectShader.Flag Flags { get; set; } = default(EffectShader.Flag);
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IEffectShaderGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            EffectShaderMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.EffectSequence = initialValue;
                this.EdgeEffectFallOff = initialValue;
                this.EdgeEffectColor = initialValue;
                this.EdgeEffectAlphaFadeInTime = initialValue;
                this.EdgeEffectFullAlphaTime = initialValue;
                this.EdgeEffectAlphaFadeOutTime = initialValue;
                this.EdgeEffectPersistentAlphaRatio = initialValue;
                this.EdgeEffectAlphaPulseAmplitude = initialValue;
                this.EdgeEffectAlphaPulseFrequency = initialValue;
                this.EdgeEffectFullAlphaRatio = initialValue;
                this.HolesAlphaTestAnimationStartTime = initialValue;
                this.HolesAlphaTestAnimationStopTime = initialValue;
                this.HolesAlphaTestAnimationStartValue = initialValue;
                this.HolesAlphaTestAnimationStopValue = initialValue;
                this.Sounds = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.BoneDepth = initialValue;
                this.Flags = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem EffectSequence,
                TItem EdgeEffectFallOff,
                TItem EdgeEffectColor,
                TItem EdgeEffectAlphaFadeInTime,
                TItem EdgeEffectFullAlphaTime,
                TItem EdgeEffectAlphaFadeOutTime,
                TItem EdgeEffectPersistentAlphaRatio,
                TItem EdgeEffectAlphaPulseAmplitude,
                TItem EdgeEffectAlphaPulseFrequency,
                TItem EdgeEffectFullAlphaRatio,
                TItem HolesAlphaTestAnimationStartTime,
                TItem HolesAlphaTestAnimationStopTime,
                TItem HolesAlphaTestAnimationStartValue,
                TItem HolesAlphaTestAnimationStopValue,
                TItem Sounds,
                TItem BoneDepth,
                TItem Flags,
                TItem Model)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.EffectSequence = EffectSequence;
                this.EdgeEffectFallOff = EdgeEffectFallOff;
                this.EdgeEffectColor = EdgeEffectColor;
                this.EdgeEffectAlphaFadeInTime = EdgeEffectAlphaFadeInTime;
                this.EdgeEffectFullAlphaTime = EdgeEffectFullAlphaTime;
                this.EdgeEffectAlphaFadeOutTime = EdgeEffectAlphaFadeOutTime;
                this.EdgeEffectPersistentAlphaRatio = EdgeEffectPersistentAlphaRatio;
                this.EdgeEffectAlphaPulseAmplitude = EdgeEffectAlphaPulseAmplitude;
                this.EdgeEffectAlphaPulseFrequency = EdgeEffectAlphaPulseFrequency;
                this.EdgeEffectFullAlphaRatio = EdgeEffectFullAlphaRatio;
                this.HolesAlphaTestAnimationStartTime = HolesAlphaTestAnimationStartTime;
                this.HolesAlphaTestAnimationStopTime = HolesAlphaTestAnimationStopTime;
                this.HolesAlphaTestAnimationStartValue = HolesAlphaTestAnimationStartValue;
                this.HolesAlphaTestAnimationStopValue = HolesAlphaTestAnimationStopValue;
                this.Sounds = new MaskItem<TItem, SoundReference.Mask<TItem>?>(Sounds, new SoundReference.Mask<TItem>(Sounds));
                this.BoneDepth = BoneDepth;
                this.Flags = Flags;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem EffectSequence;
            public TItem EdgeEffectFallOff;
            public TItem EdgeEffectColor;
            public TItem EdgeEffectAlphaFadeInTime;
            public TItem EdgeEffectFullAlphaTime;
            public TItem EdgeEffectAlphaFadeOutTime;
            public TItem EdgeEffectPersistentAlphaRatio;
            public TItem EdgeEffectAlphaPulseAmplitude;
            public TItem EdgeEffectAlphaPulseFrequency;
            public TItem EdgeEffectFullAlphaRatio;
            public TItem HolesAlphaTestAnimationStartTime;
            public TItem HolesAlphaTestAnimationStopTime;
            public TItem HolesAlphaTestAnimationStartValue;
            public TItem HolesAlphaTestAnimationStopValue;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? Sounds { get; set; }
            public TItem BoneDepth;
            public TItem Flags;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.EffectSequence, rhs.EffectSequence)) return false;
                if (!object.Equals(this.EdgeEffectFallOff, rhs.EdgeEffectFallOff)) return false;
                if (!object.Equals(this.EdgeEffectColor, rhs.EdgeEffectColor)) return false;
                if (!object.Equals(this.EdgeEffectAlphaFadeInTime, rhs.EdgeEffectAlphaFadeInTime)) return false;
                if (!object.Equals(this.EdgeEffectFullAlphaTime, rhs.EdgeEffectFullAlphaTime)) return false;
                if (!object.Equals(this.EdgeEffectAlphaFadeOutTime, rhs.EdgeEffectAlphaFadeOutTime)) return false;
                if (!object.Equals(this.EdgeEffectPersistentAlphaRatio, rhs.EdgeEffectPersistentAlphaRatio)) return false;
                if (!object.Equals(this.EdgeEffectAlphaPulseAmplitude, rhs.EdgeEffectAlphaPulseAmplitude)) return false;
                if (!object.Equals(this.EdgeEffectAlphaPulseFrequency, rhs.EdgeEffectAlphaPulseFrequency)) return false;
                if (!object.Equals(this.EdgeEffectFullAlphaRatio, rhs.EdgeEffectFullAlphaRatio)) return false;
                if (!object.Equals(this.HolesAlphaTestAnimationStartTime, rhs.HolesAlphaTestAnimationStartTime)) return false;
                if (!object.Equals(this.HolesAlphaTestAnimationStopTime, rhs.HolesAlphaTestAnimationStopTime)) return false;
                if (!object.Equals(this.HolesAlphaTestAnimationStartValue, rhs.HolesAlphaTestAnimationStartValue)) return false;
                if (!object.Equals(this.HolesAlphaTestAnimationStopValue, rhs.HolesAlphaTestAnimationStopValue)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                if (!object.Equals(this.BoneDepth, rhs.BoneDepth)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.EffectSequence);
                hash.Add(this.EdgeEffectFallOff);
                hash.Add(this.EdgeEffectColor);
                hash.Add(this.EdgeEffectAlphaFadeInTime);
                hash.Add(this.EdgeEffectFullAlphaTime);
                hash.Add(this.EdgeEffectAlphaFadeOutTime);
                hash.Add(this.EdgeEffectPersistentAlphaRatio);
                hash.Add(this.EdgeEffectAlphaPulseAmplitude);
                hash.Add(this.EdgeEffectAlphaPulseFrequency);
                hash.Add(this.EdgeEffectFullAlphaRatio);
                hash.Add(this.HolesAlphaTestAnimationStartTime);
                hash.Add(this.HolesAlphaTestAnimationStopTime);
                hash.Add(this.HolesAlphaTestAnimationStartValue);
                hash.Add(this.HolesAlphaTestAnimationStopValue);
                hash.Add(this.Sounds);
                hash.Add(this.BoneDepth);
                hash.Add(this.Flags);
                hash.Add(this.Model);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.EffectSequence)) return false;
                if (!eval(this.EdgeEffectFallOff)) return false;
                if (!eval(this.EdgeEffectColor)) return false;
                if (!eval(this.EdgeEffectAlphaFadeInTime)) return false;
                if (!eval(this.EdgeEffectFullAlphaTime)) return false;
                if (!eval(this.EdgeEffectAlphaFadeOutTime)) return false;
                if (!eval(this.EdgeEffectPersistentAlphaRatio)) return false;
                if (!eval(this.EdgeEffectAlphaPulseAmplitude)) return false;
                if (!eval(this.EdgeEffectAlphaPulseFrequency)) return false;
                if (!eval(this.EdgeEffectFullAlphaRatio)) return false;
                if (!eval(this.HolesAlphaTestAnimationStartTime)) return false;
                if (!eval(this.HolesAlphaTestAnimationStopTime)) return false;
                if (!eval(this.HolesAlphaTestAnimationStartValue)) return false;
                if (!eval(this.HolesAlphaTestAnimationStopValue)) return false;
                if (Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null && !this.Sounds.Specific.All(eval)) return false;
                }
                if (!eval(this.BoneDepth)) return false;
                if (!eval(this.Flags)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.EffectSequence)) return true;
                if (eval(this.EdgeEffectFallOff)) return true;
                if (eval(this.EdgeEffectColor)) return true;
                if (eval(this.EdgeEffectAlphaFadeInTime)) return true;
                if (eval(this.EdgeEffectFullAlphaTime)) return true;
                if (eval(this.EdgeEffectAlphaFadeOutTime)) return true;
                if (eval(this.EdgeEffectPersistentAlphaRatio)) return true;
                if (eval(this.EdgeEffectAlphaPulseAmplitude)) return true;
                if (eval(this.EdgeEffectAlphaPulseFrequency)) return true;
                if (eval(this.EdgeEffectFullAlphaRatio)) return true;
                if (eval(this.HolesAlphaTestAnimationStartTime)) return true;
                if (eval(this.HolesAlphaTestAnimationStopTime)) return true;
                if (eval(this.HolesAlphaTestAnimationStartValue)) return true;
                if (eval(this.HolesAlphaTestAnimationStopValue)) return true;
                if (Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null && this.Sounds.Specific.Any(eval)) return true;
                }
                if (eval(this.BoneDepth)) return true;
                if (eval(this.Flags)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new EffectShader.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.EffectSequence = eval(this.EffectSequence);
                obj.EdgeEffectFallOff = eval(this.EdgeEffectFallOff);
                obj.EdgeEffectColor = eval(this.EdgeEffectColor);
                obj.EdgeEffectAlphaFadeInTime = eval(this.EdgeEffectAlphaFadeInTime);
                obj.EdgeEffectFullAlphaTime = eval(this.EdgeEffectFullAlphaTime);
                obj.EdgeEffectAlphaFadeOutTime = eval(this.EdgeEffectAlphaFadeOutTime);
                obj.EdgeEffectPersistentAlphaRatio = eval(this.EdgeEffectPersistentAlphaRatio);
                obj.EdgeEffectAlphaPulseAmplitude = eval(this.EdgeEffectAlphaPulseAmplitude);
                obj.EdgeEffectAlphaPulseFrequency = eval(this.EdgeEffectAlphaPulseFrequency);
                obj.EdgeEffectFullAlphaRatio = eval(this.EdgeEffectFullAlphaRatio);
                obj.HolesAlphaTestAnimationStartTime = eval(this.HolesAlphaTestAnimationStartTime);
                obj.HolesAlphaTestAnimationStopTime = eval(this.HolesAlphaTestAnimationStopTime);
                obj.HolesAlphaTestAnimationStartValue = eval(this.HolesAlphaTestAnimationStartValue);
                obj.HolesAlphaTestAnimationStopValue = eval(this.HolesAlphaTestAnimationStopValue);
                obj.Sounds = this.Sounds == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.Sounds.Overall), this.Sounds.Specific?.Translate(eval));
                obj.BoneDepth = eval(this.BoneDepth);
                obj.Flags = eval(this.Flags);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(EffectShader.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, EffectShader.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(EffectShader.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.EffectSequence ?? true)
                    {
                        sb.AppendItem(EffectSequence, "EffectSequence");
                    }
                    if (printMask?.EdgeEffectFallOff ?? true)
                    {
                        sb.AppendItem(EdgeEffectFallOff, "EdgeEffectFallOff");
                    }
                    if (printMask?.EdgeEffectColor ?? true)
                    {
                        sb.AppendItem(EdgeEffectColor, "EdgeEffectColor");
                    }
                    if (printMask?.EdgeEffectAlphaFadeInTime ?? true)
                    {
                        sb.AppendItem(EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
                    }
                    if (printMask?.EdgeEffectFullAlphaTime ?? true)
                    {
                        sb.AppendItem(EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
                    }
                    if (printMask?.EdgeEffectAlphaFadeOutTime ?? true)
                    {
                        sb.AppendItem(EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
                    }
                    if (printMask?.EdgeEffectPersistentAlphaRatio ?? true)
                    {
                        sb.AppendItem(EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
                    }
                    if (printMask?.EdgeEffectAlphaPulseAmplitude ?? true)
                    {
                        sb.AppendItem(EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
                    }
                    if (printMask?.EdgeEffectAlphaPulseFrequency ?? true)
                    {
                        sb.AppendItem(EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
                    }
                    if (printMask?.EdgeEffectFullAlphaRatio ?? true)
                    {
                        sb.AppendItem(EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
                    }
                    if (printMask?.HolesAlphaTestAnimationStartTime ?? true)
                    {
                        sb.AppendItem(HolesAlphaTestAnimationStartTime, "HolesAlphaTestAnimationStartTime");
                    }
                    if (printMask?.HolesAlphaTestAnimationStopTime ?? true)
                    {
                        sb.AppendItem(HolesAlphaTestAnimationStopTime, "HolesAlphaTestAnimationStopTime");
                    }
                    if (printMask?.HolesAlphaTestAnimationStartValue ?? true)
                    {
                        sb.AppendItem(HolesAlphaTestAnimationStartValue, "HolesAlphaTestAnimationStartValue");
                    }
                    if (printMask?.HolesAlphaTestAnimationStopValue ?? true)
                    {
                        sb.AppendItem(HolesAlphaTestAnimationStopValue, "HolesAlphaTestAnimationStopValue");
                    }
                    if (printMask?.Sounds?.Overall ?? true)
                    {
                        Sounds?.Print(sb);
                    }
                    if (printMask?.BoneDepth ?? true)
                    {
                        sb.AppendItem(BoneDepth, "BoneDepth");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? EffectSequence;
            public Exception? EdgeEffectFallOff;
            public Exception? EdgeEffectColor;
            public Exception? EdgeEffectAlphaFadeInTime;
            public Exception? EdgeEffectFullAlphaTime;
            public Exception? EdgeEffectAlphaFadeOutTime;
            public Exception? EdgeEffectPersistentAlphaRatio;
            public Exception? EdgeEffectAlphaPulseAmplitude;
            public Exception? EdgeEffectAlphaPulseFrequency;
            public Exception? EdgeEffectFullAlphaRatio;
            public Exception? HolesAlphaTestAnimationStartTime;
            public Exception? HolesAlphaTestAnimationStopTime;
            public Exception? HolesAlphaTestAnimationStartValue;
            public Exception? HolesAlphaTestAnimationStopValue;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? Sounds;
            public Exception? BoneDepth;
            public Exception? Flags;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
                switch (enu)
                {
                    case EffectShader_FieldIndex.Components:
                        return Components;
                    case EffectShader_FieldIndex.EffectSequence:
                        return EffectSequence;
                    case EffectShader_FieldIndex.EdgeEffectFallOff:
                        return EdgeEffectFallOff;
                    case EffectShader_FieldIndex.EdgeEffectColor:
                        return EdgeEffectColor;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                        return EdgeEffectAlphaFadeInTime;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                        return EdgeEffectFullAlphaTime;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        return EdgeEffectAlphaFadeOutTime;
                    case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        return EdgeEffectPersistentAlphaRatio;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        return EdgeEffectAlphaPulseAmplitude;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        return EdgeEffectAlphaPulseFrequency;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                        return EdgeEffectFullAlphaRatio;
                    case EffectShader_FieldIndex.HolesAlphaTestAnimationStartTime:
                        return HolesAlphaTestAnimationStartTime;
                    case EffectShader_FieldIndex.HolesAlphaTestAnimationStopTime:
                        return HolesAlphaTestAnimationStopTime;
                    case EffectShader_FieldIndex.HolesAlphaTestAnimationStartValue:
                        return HolesAlphaTestAnimationStartValue;
                    case EffectShader_FieldIndex.HolesAlphaTestAnimationStopValue:
                        return HolesAlphaTestAnimationStopValue;
                    case EffectShader_FieldIndex.Sounds:
                        return Sounds;
                    case EffectShader_FieldIndex.BoneDepth:
                        return BoneDepth;
                    case EffectShader_FieldIndex.Flags:
                        return Flags;
                    case EffectShader_FieldIndex.Model:
                        return Model;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
                switch (enu)
                {
                    case EffectShader_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case EffectShader_FieldIndex.EffectSequence:
                        this.EffectSequence = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFallOff:
                        this.EdgeEffectFallOff = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectColor:
                        this.EdgeEffectColor = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                        this.EdgeEffectAlphaFadeInTime = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                        this.EdgeEffectFullAlphaTime = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        this.EdgeEffectAlphaFadeOutTime = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        this.EdgeEffectPersistentAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        this.EdgeEffectAlphaPulseAmplitude = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        this.EdgeEffectAlphaPulseFrequency = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                        this.EdgeEffectFullAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.HolesAlphaTestAnimationStartTime:
                        this.HolesAlphaTestAnimationStartTime = ex;
                        break;
                    case EffectShader_FieldIndex.HolesAlphaTestAnimationStopTime:
                        this.HolesAlphaTestAnimationStopTime = ex;
                        break;
                    case EffectShader_FieldIndex.HolesAlphaTestAnimationStartValue:
                        this.HolesAlphaTestAnimationStartValue = ex;
                        break;
                    case EffectShader_FieldIndex.HolesAlphaTestAnimationStopValue:
                        this.HolesAlphaTestAnimationStopValue = ex;
                        break;
                    case EffectShader_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case EffectShader_FieldIndex.BoneDepth:
                        this.BoneDepth = ex;
                        break;
                    case EffectShader_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case EffectShader_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
                switch (enu)
                {
                    case EffectShader_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case EffectShader_FieldIndex.EffectSequence:
                        this.EffectSequence = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFallOff:
                        this.EdgeEffectFallOff = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectColor:
                        this.EdgeEffectColor = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                        this.EdgeEffectAlphaFadeInTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                        this.EdgeEffectFullAlphaTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        this.EdgeEffectAlphaFadeOutTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        this.EdgeEffectPersistentAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        this.EdgeEffectAlphaPulseAmplitude = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        this.EdgeEffectAlphaPulseFrequency = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                        this.EdgeEffectFullAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesAlphaTestAnimationStartTime:
                        this.HolesAlphaTestAnimationStartTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesAlphaTestAnimationStopTime:
                        this.HolesAlphaTestAnimationStopTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesAlphaTestAnimationStartValue:
                        this.HolesAlphaTestAnimationStartValue = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesAlphaTestAnimationStopValue:
                        this.HolesAlphaTestAnimationStopValue = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case EffectShader_FieldIndex.BoneDepth:
                        this.BoneDepth = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (EffectSequence != null) return true;
                if (EdgeEffectFallOff != null) return true;
                if (EdgeEffectColor != null) return true;
                if (EdgeEffectAlphaFadeInTime != null) return true;
                if (EdgeEffectFullAlphaTime != null) return true;
                if (EdgeEffectAlphaFadeOutTime != null) return true;
                if (EdgeEffectPersistentAlphaRatio != null) return true;
                if (EdgeEffectAlphaPulseAmplitude != null) return true;
                if (EdgeEffectAlphaPulseFrequency != null) return true;
                if (EdgeEffectFullAlphaRatio != null) return true;
                if (HolesAlphaTestAnimationStartTime != null) return true;
                if (HolesAlphaTestAnimationStopTime != null) return true;
                if (HolesAlphaTestAnimationStartValue != null) return true;
                if (HolesAlphaTestAnimationStopValue != null) return true;
                if (Sounds != null) return true;
                if (BoneDepth != null) return true;
                if (Flags != null) return true;
                if (Model != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(EffectSequence, "EffectSequence");
                }
                {
                    sb.AppendItem(EdgeEffectFallOff, "EdgeEffectFallOff");
                }
                {
                    sb.AppendItem(EdgeEffectColor, "EdgeEffectColor");
                }
                {
                    sb.AppendItem(EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
                }
                {
                    sb.AppendItem(EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
                }
                {
                    sb.AppendItem(EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
                }
                {
                    sb.AppendItem(EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
                }
                {
                    sb.AppendItem(EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
                }
                {
                    sb.AppendItem(EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
                }
                {
                    sb.AppendItem(EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
                }
                {
                    sb.AppendItem(HolesAlphaTestAnimationStartTime, "HolesAlphaTestAnimationStartTime");
                }
                {
                    sb.AppendItem(HolesAlphaTestAnimationStopTime, "HolesAlphaTestAnimationStopTime");
                }
                {
                    sb.AppendItem(HolesAlphaTestAnimationStartValue, "HolesAlphaTestAnimationStartValue");
                }
                {
                    sb.AppendItem(HolesAlphaTestAnimationStopValue, "HolesAlphaTestAnimationStopValue");
                }
                Sounds?.Print(sb);
                {
                    sb.AppendItem(BoneDepth, "BoneDepth");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                Model?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.EffectSequence = this.EffectSequence.Combine(rhs.EffectSequence);
                ret.EdgeEffectFallOff = this.EdgeEffectFallOff.Combine(rhs.EdgeEffectFallOff);
                ret.EdgeEffectColor = this.EdgeEffectColor.Combine(rhs.EdgeEffectColor);
                ret.EdgeEffectAlphaFadeInTime = this.EdgeEffectAlphaFadeInTime.Combine(rhs.EdgeEffectAlphaFadeInTime);
                ret.EdgeEffectFullAlphaTime = this.EdgeEffectFullAlphaTime.Combine(rhs.EdgeEffectFullAlphaTime);
                ret.EdgeEffectAlphaFadeOutTime = this.EdgeEffectAlphaFadeOutTime.Combine(rhs.EdgeEffectAlphaFadeOutTime);
                ret.EdgeEffectPersistentAlphaRatio = this.EdgeEffectPersistentAlphaRatio.Combine(rhs.EdgeEffectPersistentAlphaRatio);
                ret.EdgeEffectAlphaPulseAmplitude = this.EdgeEffectAlphaPulseAmplitude.Combine(rhs.EdgeEffectAlphaPulseAmplitude);
                ret.EdgeEffectAlphaPulseFrequency = this.EdgeEffectAlphaPulseFrequency.Combine(rhs.EdgeEffectAlphaPulseFrequency);
                ret.EdgeEffectFullAlphaRatio = this.EdgeEffectFullAlphaRatio.Combine(rhs.EdgeEffectFullAlphaRatio);
                ret.HolesAlphaTestAnimationStartTime = this.HolesAlphaTestAnimationStartTime.Combine(rhs.HolesAlphaTestAnimationStartTime);
                ret.HolesAlphaTestAnimationStopTime = this.HolesAlphaTestAnimationStopTime.Combine(rhs.HolesAlphaTestAnimationStopTime);
                ret.HolesAlphaTestAnimationStartValue = this.HolesAlphaTestAnimationStartValue.Combine(rhs.HolesAlphaTestAnimationStartValue);
                ret.HolesAlphaTestAnimationStopValue = this.HolesAlphaTestAnimationStopValue.Combine(rhs.HolesAlphaTestAnimationStopValue);
                ret.Sounds = this.Sounds.Combine(rhs.Sounds, (l, r) => l.Combine(r));
                ret.BoneDepth = this.BoneDepth.Combine(rhs.BoneDepth);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool EffectSequence;
            public bool EdgeEffectFallOff;
            public bool EdgeEffectColor;
            public bool EdgeEffectAlphaFadeInTime;
            public bool EdgeEffectFullAlphaTime;
            public bool EdgeEffectAlphaFadeOutTime;
            public bool EdgeEffectPersistentAlphaRatio;
            public bool EdgeEffectAlphaPulseAmplitude;
            public bool EdgeEffectAlphaPulseFrequency;
            public bool EdgeEffectFullAlphaRatio;
            public bool HolesAlphaTestAnimationStartTime;
            public bool HolesAlphaTestAnimationStopTime;
            public bool HolesAlphaTestAnimationStartValue;
            public bool HolesAlphaTestAnimationStopValue;
            public SoundReference.TranslationMask? Sounds;
            public bool BoneDepth;
            public bool Flags;
            public Model.TranslationMask? Model;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.EffectSequence = defaultOn;
                this.EdgeEffectFallOff = defaultOn;
                this.EdgeEffectColor = defaultOn;
                this.EdgeEffectAlphaFadeInTime = defaultOn;
                this.EdgeEffectFullAlphaTime = defaultOn;
                this.EdgeEffectAlphaFadeOutTime = defaultOn;
                this.EdgeEffectPersistentAlphaRatio = defaultOn;
                this.EdgeEffectAlphaPulseAmplitude = defaultOn;
                this.EdgeEffectAlphaPulseFrequency = defaultOn;
                this.EdgeEffectFullAlphaRatio = defaultOn;
                this.HolesAlphaTestAnimationStartTime = defaultOn;
                this.HolesAlphaTestAnimationStopTime = defaultOn;
                this.HolesAlphaTestAnimationStartValue = defaultOn;
                this.HolesAlphaTestAnimationStopValue = defaultOn;
                this.BoneDepth = defaultOn;
                this.Flags = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((EffectSequence, null));
                ret.Add((EdgeEffectFallOff, null));
                ret.Add((EdgeEffectColor, null));
                ret.Add((EdgeEffectAlphaFadeInTime, null));
                ret.Add((EdgeEffectFullAlphaTime, null));
                ret.Add((EdgeEffectAlphaFadeOutTime, null));
                ret.Add((EdgeEffectPersistentAlphaRatio, null));
                ret.Add((EdgeEffectAlphaPulseAmplitude, null));
                ret.Add((EdgeEffectAlphaPulseFrequency, null));
                ret.Add((EdgeEffectFullAlphaRatio, null));
                ret.Add((HolesAlphaTestAnimationStartTime, null));
                ret.Add((HolesAlphaTestAnimationStopTime, null));
                ret.Add((HolesAlphaTestAnimationStartValue, null));
                ret.Add((HolesAlphaTestAnimationStopValue, null));
                ret.Add((Sounds != null ? Sounds.OnOverall : DefaultOn, Sounds?.GetCrystal()));
                ret.Add((BoneDepth, null));
                ret.Add((Flags, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = EffectShader_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => EffectShaderCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => EffectShaderSetterCommon.Instance.RemapLinks(this, mapping);
        public EffectShader(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private EffectShader(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal EffectShader(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public EffectShader(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public EffectShader(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<EffectShader>.ToString(this);
        }

        protected override Type LinkType => typeof(IEffectShader);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => EffectShaderCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => EffectShaderSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => EffectShaderSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => EffectShaderSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IEffectShaderGetter rhs) return false;
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IEffectShaderGetter? obj)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => EffectShaderBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((EffectShaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static EffectShader CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new EffectShader();
            ((EffectShaderSetterCommon)((IEffectShaderGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out EffectShader item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new EffectShader GetNew()
        {
            return new EffectShader();
        }

    }
    #endregion

    #region Interface
    public partial interface IEffectShader :
        IAssetLinkContainer,
        IEffectShaderGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IEffectShaderInternal>,
        IModeled,
        IStarfieldMajorRecordInternal
    {
        new ExtendedList<AComponent> Components { get; }
        new IFormLinkNullable<IEffectSequenceGetter> EffectSequence { get; set; }
        new Single EdgeEffectFallOff { get; set; }
        new Color EdgeEffectColor { get; set; }
        new Single EdgeEffectAlphaFadeInTime { get; set; }
        new Single EdgeEffectFullAlphaTime { get; set; }
        new Single EdgeEffectAlphaFadeOutTime { get; set; }
        new Percent EdgeEffectPersistentAlphaRatio { get; set; }
        new Single EdgeEffectAlphaPulseAmplitude { get; set; }
        new Single EdgeEffectAlphaPulseFrequency { get; set; }
        new Percent EdgeEffectFullAlphaRatio { get; set; }
        new Single HolesAlphaTestAnimationStartTime { get; set; }
        new Single HolesAlphaTestAnimationStopTime { get; set; }
        new Single HolesAlphaTestAnimationStartValue { get; set; }
        new Single HolesAlphaTestAnimationStopValue { get; set; }
        new SoundReference Sounds { get; set; }
        new SByte BoneDepth { get; set; }
        new EffectShader.Flag Flags { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
    }

    public partial interface IEffectShaderInternal :
        IStarfieldMajorRecordInternal,
        IEffectShader,
        IEffectShaderGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.EFSH)]
    public partial interface IEffectShaderGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IEffectShaderGetter>,
        IMapsToGetter<IEffectShaderGetter>,
        IModeledGetter
    {
        static new ILoquiRegistration StaticRegistration => EffectShader_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        IFormLinkNullableGetter<IEffectSequenceGetter> EffectSequence { get; }
        Single EdgeEffectFallOff { get; }
        Color EdgeEffectColor { get; }
        Single EdgeEffectAlphaFadeInTime { get; }
        Single EdgeEffectFullAlphaTime { get; }
        Single EdgeEffectAlphaFadeOutTime { get; }
        Percent EdgeEffectPersistentAlphaRatio { get; }
        Single EdgeEffectAlphaPulseAmplitude { get; }
        Single EdgeEffectAlphaPulseFrequency { get; }
        Percent EdgeEffectFullAlphaRatio { get; }
        Single HolesAlphaTestAnimationStartTime { get; }
        Single HolesAlphaTestAnimationStopTime { get; }
        Single HolesAlphaTestAnimationStartValue { get; }
        Single HolesAlphaTestAnimationStopValue { get; }
        ISoundReferenceGetter Sounds { get; }
        SByte BoneDepth { get; }
        EffectShader.Flag Flags { get; }
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class EffectShaderMixIn
    {
        public static void Clear(this IEffectShaderInternal item)
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static EffectShader.Mask<bool> GetEqualsMask(
            this IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IEffectShaderGetter item,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IEffectShaderGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EffectShader.TranslationMask? equalsMask = null)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IEffectShaderInternal lhs,
            IEffectShaderGetter rhs,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = EffectShader.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IEffectShaderInternal lhs,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static EffectShader DeepCopy(
            this IEffectShaderGetter item,
            EffectShader.TranslationMask? copyMask = null)
        {
            return ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static EffectShader DeepCopy(
            this IEffectShaderGetter item,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? copyMask = null)
        {
            return ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static EffectShader DeepCopy(
            this IEffectShaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static EffectShader Duplicate(
            this IEffectShaderGetter item,
            FormKey formKey,
            EffectShader.TranslationMask? copyMask = null)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static EffectShader Duplicate(
            this IEffectShaderGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IEffectShaderInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum EffectShader_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        EffectSequence = 8,
        EdgeEffectFallOff = 9,
        EdgeEffectColor = 10,
        EdgeEffectAlphaFadeInTime = 11,
        EdgeEffectFullAlphaTime = 12,
        EdgeEffectAlphaFadeOutTime = 13,
        EdgeEffectPersistentAlphaRatio = 14,
        EdgeEffectAlphaPulseAmplitude = 15,
        EdgeEffectAlphaPulseFrequency = 16,
        EdgeEffectFullAlphaRatio = 17,
        HolesAlphaTestAnimationStartTime = 18,
        HolesAlphaTestAnimationStopTime = 19,
        HolesAlphaTestAnimationStartValue = 20,
        HolesAlphaTestAnimationStopValue = 21,
        Sounds = 22,
        BoneDepth = 23,
        Flags = 24,
        Model = 25,
    }
    #endregion

    #region Registration
    internal partial class EffectShader_Registration : ILoquiRegistration
    {
        public static readonly EffectShader_Registration Instance = new EffectShader_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 19;

        public const ushort FieldCount = 26;

        public static readonly Type MaskType = typeof(EffectShader.Mask<>);

        public static readonly Type ErrorMaskType = typeof(EffectShader.ErrorMask);

        public static readonly Type ClassType = typeof(EffectShader);

        public static readonly Type GetterType = typeof(IEffectShaderGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IEffectShader);

        public static readonly Type? InternalSetterType = typeof(IEffectShaderInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.EffectShader";

        public const string Name = "EffectShader";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.EFSH;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.EFSH);
            var all = RecordCollection.Factory(
                RecordTypes.EFSH,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.ENAM,
                RecordTypes.DATA,
                RecordTypes.DNAM,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(EffectShaderBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class EffectShaderSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly EffectShaderSetterCommon Instance = new EffectShaderSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IEffectShaderInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.EffectSequence.Clear();
            item.EdgeEffectFallOff = default(Single);
            item.EdgeEffectColor = default(Color);
            item.EdgeEffectAlphaFadeInTime = default(Single);
            item.EdgeEffectFullAlphaTime = default(Single);
            item.EdgeEffectAlphaFadeOutTime = default(Single);
            item.EdgeEffectPersistentAlphaRatio = default(Percent);
            item.EdgeEffectAlphaPulseAmplitude = default(Single);
            item.EdgeEffectAlphaPulseFrequency = default(Single);
            item.EdgeEffectFullAlphaRatio = default(Percent);
            item.HolesAlphaTestAnimationStartTime = default(Single);
            item.HolesAlphaTestAnimationStopTime = default(Single);
            item.HolesAlphaTestAnimationStartValue = default(Single);
            item.HolesAlphaTestAnimationStopValue = default(Single);
            item.Sounds.Clear();
            item.BoneDepth = default(SByte);
            item.Flags = default(EffectShader.Flag);
            item.Model = null;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IEffectShaderInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IEffectShaderInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IEffectShader obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.EffectSequence.Relink(mapping);
            obj.Sounds.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IEffectShader obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IEffectShader obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IEffectShaderInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IEffectShaderInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: EffectShaderBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: EffectShaderBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (EffectShader)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (EffectShader)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class EffectShaderCommon : StarfieldMajorRecordCommon
    {
        public new static readonly EffectShaderCommon Instance = new EffectShaderCommon();

        public EffectShader.Mask<bool> GetEqualsMask(
            IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new EffectShader.Mask<bool>(false);
            ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EffectShader.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.EffectSequence = item.EffectSequence.Equals(rhs.EffectSequence);
            ret.EdgeEffectFallOff = item.EdgeEffectFallOff.EqualsWithin(rhs.EdgeEffectFallOff);
            ret.EdgeEffectColor = item.EdgeEffectColor.ColorOnlyEquals(rhs.EdgeEffectColor);
            ret.EdgeEffectAlphaFadeInTime = item.EdgeEffectAlphaFadeInTime.EqualsWithin(rhs.EdgeEffectAlphaFadeInTime);
            ret.EdgeEffectFullAlphaTime = item.EdgeEffectFullAlphaTime.EqualsWithin(rhs.EdgeEffectFullAlphaTime);
            ret.EdgeEffectAlphaFadeOutTime = item.EdgeEffectAlphaFadeOutTime.EqualsWithin(rhs.EdgeEffectAlphaFadeOutTime);
            ret.EdgeEffectPersistentAlphaRatio = item.EdgeEffectPersistentAlphaRatio.Equals(rhs.EdgeEffectPersistentAlphaRatio);
            ret.EdgeEffectAlphaPulseAmplitude = item.EdgeEffectAlphaPulseAmplitude.EqualsWithin(rhs.EdgeEffectAlphaPulseAmplitude);
            ret.EdgeEffectAlphaPulseFrequency = item.EdgeEffectAlphaPulseFrequency.EqualsWithin(rhs.EdgeEffectAlphaPulseFrequency);
            ret.EdgeEffectFullAlphaRatio = item.EdgeEffectFullAlphaRatio.Equals(rhs.EdgeEffectFullAlphaRatio);
            ret.HolesAlphaTestAnimationStartTime = item.HolesAlphaTestAnimationStartTime.EqualsWithin(rhs.HolesAlphaTestAnimationStartTime);
            ret.HolesAlphaTestAnimationStopTime = item.HolesAlphaTestAnimationStopTime.EqualsWithin(rhs.HolesAlphaTestAnimationStopTime);
            ret.HolesAlphaTestAnimationStartValue = item.HolesAlphaTestAnimationStartValue.EqualsWithin(rhs.HolesAlphaTestAnimationStartValue);
            ret.HolesAlphaTestAnimationStopValue = item.HolesAlphaTestAnimationStopValue.EqualsWithin(rhs.HolesAlphaTestAnimationStopValue);
            ret.Sounds = MaskItemExt.Factory(item.Sounds.GetEqualsMask(rhs.Sounds, include), include);
            ret.BoneDepth = item.BoneDepth == rhs.BoneDepth;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IEffectShaderGetter item,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IEffectShaderGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"EffectShader =>");
            }
            else
            {
                sb.AppendLine($"{name} (EffectShader) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IEffectShaderGetter item,
            StructuredStringBuilder sb,
            EffectShader.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.EffectSequence ?? true)
            {
                sb.AppendItem(item.EffectSequence.FormKeyNullable, "EffectSequence");
            }
            if (printMask?.EdgeEffectFallOff ?? true)
            {
                sb.AppendItem(item.EdgeEffectFallOff, "EdgeEffectFallOff");
            }
            if (printMask?.EdgeEffectColor ?? true)
            {
                sb.AppendItem(item.EdgeEffectColor, "EdgeEffectColor");
            }
            if (printMask?.EdgeEffectAlphaFadeInTime ?? true)
            {
                sb.AppendItem(item.EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
            }
            if (printMask?.EdgeEffectFullAlphaTime ?? true)
            {
                sb.AppendItem(item.EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
            }
            if (printMask?.EdgeEffectAlphaFadeOutTime ?? true)
            {
                sb.AppendItem(item.EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
            }
            if (printMask?.EdgeEffectPersistentAlphaRatio ?? true)
            {
                sb.AppendItem(item.EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
            }
            if (printMask?.EdgeEffectAlphaPulseAmplitude ?? true)
            {
                sb.AppendItem(item.EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
            }
            if (printMask?.EdgeEffectAlphaPulseFrequency ?? true)
            {
                sb.AppendItem(item.EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
            }
            if (printMask?.EdgeEffectFullAlphaRatio ?? true)
            {
                sb.AppendItem(item.EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
            }
            if (printMask?.HolesAlphaTestAnimationStartTime ?? true)
            {
                sb.AppendItem(item.HolesAlphaTestAnimationStartTime, "HolesAlphaTestAnimationStartTime");
            }
            if (printMask?.HolesAlphaTestAnimationStopTime ?? true)
            {
                sb.AppendItem(item.HolesAlphaTestAnimationStopTime, "HolesAlphaTestAnimationStopTime");
            }
            if (printMask?.HolesAlphaTestAnimationStartValue ?? true)
            {
                sb.AppendItem(item.HolesAlphaTestAnimationStartValue, "HolesAlphaTestAnimationStartValue");
            }
            if (printMask?.HolesAlphaTestAnimationStopValue ?? true)
            {
                sb.AppendItem(item.HolesAlphaTestAnimationStopValue, "HolesAlphaTestAnimationStopValue");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                item.Sounds?.Print(sb, "Sounds");
            }
            if (printMask?.BoneDepth ?? true)
            {
                sb.AppendItem(item.BoneDepth, "BoneDepth");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
        }
        
        public static EffectShader_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (EffectShader_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (EffectShader_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (EffectShader_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (EffectShader_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (EffectShader_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (EffectShader_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (EffectShader_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new EffectShader_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (EffectShader_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IEffectShaderGetter? lhs,
            IEffectShaderGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)EffectShader_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EffectSequence) ?? true))
            {
                if (!lhs.EffectSequence.Equals(rhs.EffectSequence)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFallOff) ?? true))
            {
                if (!lhs.EdgeEffectFallOff.EqualsWithin(rhs.EdgeEffectFallOff)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectColor) ?? true))
            {
                if (!lhs.EdgeEffectColor.ColorOnlyEquals(rhs.EdgeEffectColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime) ?? true))
            {
                if (!lhs.EdgeEffectAlphaFadeInTime.EqualsWithin(rhs.EdgeEffectAlphaFadeInTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime) ?? true))
            {
                if (!lhs.EdgeEffectFullAlphaTime.EqualsWithin(rhs.EdgeEffectFullAlphaTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime) ?? true))
            {
                if (!lhs.EdgeEffectAlphaFadeOutTime.EqualsWithin(rhs.EdgeEffectAlphaFadeOutTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio) ?? true))
            {
                if (!lhs.EdgeEffectPersistentAlphaRatio.Equals(rhs.EdgeEffectPersistentAlphaRatio)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude) ?? true))
            {
                if (!lhs.EdgeEffectAlphaPulseAmplitude.EqualsWithin(rhs.EdgeEffectAlphaPulseAmplitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency) ?? true))
            {
                if (!lhs.EdgeEffectAlphaPulseFrequency.EqualsWithin(rhs.EdgeEffectAlphaPulseFrequency)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio) ?? true))
            {
                if (!lhs.EdgeEffectFullAlphaRatio.Equals(rhs.EdgeEffectFullAlphaRatio)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAlphaTestAnimationStartTime) ?? true))
            {
                if (!lhs.HolesAlphaTestAnimationStartTime.EqualsWithin(rhs.HolesAlphaTestAnimationStartTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAlphaTestAnimationStopTime) ?? true))
            {
                if (!lhs.HolesAlphaTestAnimationStopTime.EqualsWithin(rhs.HolesAlphaTestAnimationStopTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAlphaTestAnimationStartValue) ?? true))
            {
                if (!lhs.HolesAlphaTestAnimationStartValue.EqualsWithin(rhs.HolesAlphaTestAnimationStartValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAlphaTestAnimationStopValue) ?? true))
            {
                if (!lhs.HolesAlphaTestAnimationStopValue.EqualsWithin(rhs.HolesAlphaTestAnimationStopValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Sounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Sounds, rhs.Sounds, out var lhsSounds, out var rhsSounds, out var isSoundsEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsSounds).CommonInstance()!).Equals(lhsSounds, rhsSounds, equalsMask?.GetSubCrystal((int)EffectShader_FieldIndex.Sounds))) return false;
                }
                else if (!isSoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.BoneDepth) ?? true))
            {
                if (lhs.BoneDepth != rhs.BoneDepth) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)EffectShader_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IEffectShaderGetter?)lhs,
                rhs: rhs as IEffectShaderGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IEffectShaderGetter?)lhs,
                rhs: rhs as IEffectShaderGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IEffectShaderGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            hash.Add(item.EffectSequence);
            hash.Add(item.EdgeEffectFallOff);
            hash.Add(item.EdgeEffectColor);
            hash.Add(item.EdgeEffectAlphaFadeInTime);
            hash.Add(item.EdgeEffectFullAlphaTime);
            hash.Add(item.EdgeEffectAlphaFadeOutTime);
            hash.Add(item.EdgeEffectPersistentAlphaRatio);
            hash.Add(item.EdgeEffectAlphaPulseAmplitude);
            hash.Add(item.EdgeEffectAlphaPulseFrequency);
            hash.Add(item.EdgeEffectFullAlphaRatio);
            hash.Add(item.HolesAlphaTestAnimationStartTime);
            hash.Add(item.HolesAlphaTestAnimationStopTime);
            hash.Add(item.HolesAlphaTestAnimationStartValue);
            hash.Add(item.HolesAlphaTestAnimationStopValue);
            hash.Add(item.Sounds);
            hash.Add(item.BoneDepth);
            hash.Add(item.Flags);
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IEffectShaderGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IEffectShaderGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return EffectShader.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IEffectShaderGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.EffectSequence, out var EffectSequenceInfo))
            {
                yield return EffectSequenceInfo;
            }
            foreach (var item in obj.Sounds.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IEffectShaderGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public EffectShader Duplicate(
            IEffectShaderGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new EffectShader(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IEffectShaderGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IEffectShaderGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class EffectShaderSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly EffectShaderSetterTranslationCommon Instance = new EffectShaderSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IEffectShaderInternal item,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IEffectShader item,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EffectSequence) ?? true))
            {
                item.EffectSequence.SetTo(rhs.EffectSequence.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFallOff) ?? true))
            {
                item.EdgeEffectFallOff = rhs.EdgeEffectFallOff;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectColor) ?? true))
            {
                item.EdgeEffectColor = rhs.EdgeEffectColor;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime) ?? true))
            {
                item.EdgeEffectAlphaFadeInTime = rhs.EdgeEffectAlphaFadeInTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime) ?? true))
            {
                item.EdgeEffectFullAlphaTime = rhs.EdgeEffectFullAlphaTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime) ?? true))
            {
                item.EdgeEffectAlphaFadeOutTime = rhs.EdgeEffectAlphaFadeOutTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio) ?? true))
            {
                item.EdgeEffectPersistentAlphaRatio = rhs.EdgeEffectPersistentAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude) ?? true))
            {
                item.EdgeEffectAlphaPulseAmplitude = rhs.EdgeEffectAlphaPulseAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency) ?? true))
            {
                item.EdgeEffectAlphaPulseFrequency = rhs.EdgeEffectAlphaPulseFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio) ?? true))
            {
                item.EdgeEffectFullAlphaRatio = rhs.EdgeEffectFullAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAlphaTestAnimationStartTime) ?? true))
            {
                item.HolesAlphaTestAnimationStartTime = rhs.HolesAlphaTestAnimationStartTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAlphaTestAnimationStopTime) ?? true))
            {
                item.HolesAlphaTestAnimationStopTime = rhs.HolesAlphaTestAnimationStopTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAlphaTestAnimationStartValue) ?? true))
            {
                item.HolesAlphaTestAnimationStartValue = rhs.HolesAlphaTestAnimationStartValue;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesAlphaTestAnimationStopValue) ?? true))
            {
                item.HolesAlphaTestAnimationStopValue = rhs.HolesAlphaTestAnimationStopValue;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.Sounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Sounds) ?? true))
                    {
                        item.Sounds = rhs.Sounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)EffectShader_FieldIndex.Sounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.BoneDepth) ?? true))
            {
                item.BoneDepth = rhs.BoneDepth;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)EffectShader_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)EffectShader_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IEffectShader item,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IEffectShaderInternal)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IEffectShader)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IEffectShaderInternal)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IEffectShader)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public EffectShader DeepCopy(
            IEffectShaderGetter item,
            EffectShader.TranslationMask? copyMask = null)
        {
            EffectShader ret = (EffectShader)((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetNew();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public EffectShader DeepCopy(
            IEffectShaderGetter item,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            EffectShader ret = (EffectShader)((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetNew();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = EffectShader.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public EffectShader DeepCopy(
            IEffectShaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            EffectShader ret = (EffectShader)((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetNew();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class EffectShader
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectShader_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => EffectShader_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => EffectShaderCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return EffectShaderSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => EffectShaderSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class EffectShaderBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly EffectShaderBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IEffectShaderGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EffectSequence,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            using (HeaderExport.Subrecord(writer, RecordTypes.DATA)) { }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DNAM)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectFallOff);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectColor);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectAlphaFadeInTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectFullAlphaTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectAlphaFadeOutTime);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.EdgeEffectPersistentAlphaRatio,
                    integerType: FloatIntegerType.UInt);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectAlphaPulseAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectAlphaPulseFrequency);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.EdgeEffectFullAlphaRatio,
                    integerType: FloatIntegerType.UInt);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HolesAlphaTestAnimationStartTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HolesAlphaTestAnimationStopTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HolesAlphaTestAnimationStartValue);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HolesAlphaTestAnimationStopValue);
                var SoundsItem = item.Sounds;
                ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)SoundsItem).BinaryWriteTranslator).Write(
                    item: SoundsItem,
                    writer: writer,
                    translationParams: translationParams);
                writer.Write(item.BoneDepth);
                EnumBinaryTranslation<EffectShader.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
            }
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            IEffectShaderGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.EFSH,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IEffectShaderGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IEffectShaderGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IEffectShaderGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class EffectShaderBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly EffectShaderBinaryCreateTranslation Instance = new EffectShaderBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.EFSH;
        public static ParseResult FillBinaryRecordTypes(
            IEffectShaderInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)EffectShader_FieldIndex.Components;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EffectSequence.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)EffectShader_FieldIndex.EffectSequence;
                }
                case RecordTypeInts.DATA:
                {
                    frame.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectFallOff = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectColor = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectAlphaFadeInTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectFullAlphaTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectAlphaFadeOutTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectPersistentAlphaRatio = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectAlphaPulseAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectAlphaPulseFrequency = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectFullAlphaRatio = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UInt);
                    if (dataFrame.Remaining < 4) return null;
                    item.HolesAlphaTestAnimationStartTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HolesAlphaTestAnimationStopTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HolesAlphaTestAnimationStartValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HolesAlphaTestAnimationStopValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.Sounds = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.BoneDepth = dataFrame.ReadInt8();
                    if (dataFrame.Remaining < 4) return null;
                    item.Flags = EnumBinaryTranslation<EffectShader.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    return (int)EffectShader_FieldIndex.Flags;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)EffectShader_FieldIndex.Model;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class EffectShaderBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class EffectShaderBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IEffectShaderGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectShader_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => EffectShader_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => EffectShaderCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => EffectShaderSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => EffectShaderCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => EffectShaderCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => EffectShaderBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((EffectShaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IEffectShader);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = [];
        #region EffectSequence
        private int? _EffectSequenceLocation;
        public IFormLinkNullableGetter<IEffectSequenceGetter> EffectSequence => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEffectSequenceGetter>(_package, _recordData, _EffectSequenceLocation);
        #endregion
        private RangeInt32? _DNAMLocation;
        #region EdgeEffectFallOff
        private int _EdgeEffectFallOffLocation => _DNAMLocation!.Value.Min;
        private bool _EdgeEffectFallOff_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectFallOff => _EdgeEffectFallOff_IsSet ? _recordData.Slice(_EdgeEffectFallOffLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectColor
        private int _EdgeEffectColorLocation => _DNAMLocation!.Value.Min + 0x4;
        private bool _EdgeEffectColor_IsSet => _DNAMLocation.HasValue;
        public Color EdgeEffectColor => _EdgeEffectColor_IsSet ? _recordData.Slice(_EdgeEffectColorLocation, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region EdgeEffectAlphaFadeInTime
        private int _EdgeEffectAlphaFadeInTimeLocation => _DNAMLocation!.Value.Min + 0x8;
        private bool _EdgeEffectAlphaFadeInTime_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectAlphaFadeInTime => _EdgeEffectAlphaFadeInTime_IsSet ? _recordData.Slice(_EdgeEffectAlphaFadeInTimeLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectFullAlphaTime
        private int _EdgeEffectFullAlphaTimeLocation => _DNAMLocation!.Value.Min + 0xC;
        private bool _EdgeEffectFullAlphaTime_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectFullAlphaTime => _EdgeEffectFullAlphaTime_IsSet ? _recordData.Slice(_EdgeEffectFullAlphaTimeLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectAlphaFadeOutTime
        private int _EdgeEffectAlphaFadeOutTimeLocation => _DNAMLocation!.Value.Min + 0x10;
        private bool _EdgeEffectAlphaFadeOutTime_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectAlphaFadeOutTime => _EdgeEffectAlphaFadeOutTime_IsSet ? _recordData.Slice(_EdgeEffectAlphaFadeOutTimeLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectPersistentAlphaRatio
        private int _EdgeEffectPersistentAlphaRatioLocation => _DNAMLocation!.Value.Min + 0x14;
        private bool _EdgeEffectPersistentAlphaRatio_IsSet => _DNAMLocation.HasValue;
        public Percent EdgeEffectPersistentAlphaRatio => _EdgeEffectPersistentAlphaRatio_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_EdgeEffectPersistentAlphaRatioLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region EdgeEffectAlphaPulseAmplitude
        private int _EdgeEffectAlphaPulseAmplitudeLocation => _DNAMLocation!.Value.Min + 0x18;
        private bool _EdgeEffectAlphaPulseAmplitude_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectAlphaPulseAmplitude => _EdgeEffectAlphaPulseAmplitude_IsSet ? _recordData.Slice(_EdgeEffectAlphaPulseAmplitudeLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectAlphaPulseFrequency
        private int _EdgeEffectAlphaPulseFrequencyLocation => _DNAMLocation!.Value.Min + 0x1C;
        private bool _EdgeEffectAlphaPulseFrequency_IsSet => _DNAMLocation.HasValue;
        public Single EdgeEffectAlphaPulseFrequency => _EdgeEffectAlphaPulseFrequency_IsSet ? _recordData.Slice(_EdgeEffectAlphaPulseFrequencyLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectFullAlphaRatio
        private int _EdgeEffectFullAlphaRatioLocation => _DNAMLocation!.Value.Min + 0x20;
        private bool _EdgeEffectFullAlphaRatio_IsSet => _DNAMLocation.HasValue;
        public Percent EdgeEffectFullAlphaRatio => _EdgeEffectFullAlphaRatio_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_EdgeEffectFullAlphaRatioLocation, 4), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region HolesAlphaTestAnimationStartTime
        private int _HolesAlphaTestAnimationStartTimeLocation => _DNAMLocation!.Value.Min + 0x24;
        private bool _HolesAlphaTestAnimationStartTime_IsSet => _DNAMLocation.HasValue;
        public Single HolesAlphaTestAnimationStartTime => _HolesAlphaTestAnimationStartTime_IsSet ? _recordData.Slice(_HolesAlphaTestAnimationStartTimeLocation, 4).Float() : default(Single);
        #endregion
        #region HolesAlphaTestAnimationStopTime
        private int _HolesAlphaTestAnimationStopTimeLocation => _DNAMLocation!.Value.Min + 0x28;
        private bool _HolesAlphaTestAnimationStopTime_IsSet => _DNAMLocation.HasValue;
        public Single HolesAlphaTestAnimationStopTime => _HolesAlphaTestAnimationStopTime_IsSet ? _recordData.Slice(_HolesAlphaTestAnimationStopTimeLocation, 4).Float() : default(Single);
        #endregion
        #region HolesAlphaTestAnimationStartValue
        private int _HolesAlphaTestAnimationStartValueLocation => _DNAMLocation!.Value.Min + 0x2C;
        private bool _HolesAlphaTestAnimationStartValue_IsSet => _DNAMLocation.HasValue;
        public Single HolesAlphaTestAnimationStartValue => _HolesAlphaTestAnimationStartValue_IsSet ? _recordData.Slice(_HolesAlphaTestAnimationStartValueLocation, 4).Float() : default(Single);
        #endregion
        #region HolesAlphaTestAnimationStopValue
        private int _HolesAlphaTestAnimationStopValueLocation => _DNAMLocation!.Value.Min + 0x30;
        private bool _HolesAlphaTestAnimationStopValue_IsSet => _DNAMLocation.HasValue;
        public Single HolesAlphaTestAnimationStopValue => _HolesAlphaTestAnimationStopValue_IsSet ? _recordData.Slice(_HolesAlphaTestAnimationStopValueLocation, 4).Float() : default(Single);
        #endregion
        #region Sounds
        private int _SoundsLocation => _DNAMLocation!.Value.Min + 0x34;
        private bool _Sounds_IsSet => _DNAMLocation.HasValue;
        private ISoundReferenceGetter? _Sounds => _Sounds_IsSet ? SoundReferenceBinaryOverlay.SoundReferenceFactory(_recordData.Slice(_SoundsLocation), _package) : default;
        public ISoundReferenceGetter Sounds => _Sounds ?? new SoundReference();
        #endregion
        #region BoneDepth
        private int _BoneDepthLocation => _DNAMLocation!.Value.Min + 0x5C;
        private bool _BoneDepth_IsSet => _DNAMLocation.HasValue;
        public SByte BoneDepth => _BoneDepth_IsSet ? (sbyte)_recordData.Slice(_BoneDepthLocation, 1)[0] : default(SByte);
        #endregion
        #region Flags
        private int _FlagsLocation => _DNAMLocation!.Value.Min + 0x5D;
        private bool _Flags_IsSet => _DNAMLocation.HasValue;
        public EffectShader.Flag Flags => _Flags_IsSet ? (EffectShader.Flag)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        public IModelGetter? Model { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected EffectShaderBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IEffectShaderGetter EffectShaderFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new EffectShaderBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IEffectShaderGetter EffectShaderFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return EffectShaderFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)EffectShader_FieldIndex.Components;
                }
                case RecordTypeInts.ENAM:
                {
                    _EffectSequenceLocation = (stream.Position - offset);
                    return (int)EffectShader_FieldIndex.EffectSequence;
                }
                case RecordTypeInts.DATA:
                {
                    stream.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)EffectShader_FieldIndex.Flags;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)EffectShader_FieldIndex.Model;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            EffectShaderMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<EffectShader>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IEffectShaderGetter rhs) return false;
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IEffectShaderGetter? obj)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

