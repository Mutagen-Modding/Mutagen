/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class GenericBaseForm :
        StarfieldMajorRecord,
        IEquatable<IGenericBaseFormGetter>,
        IGenericBaseFormInternal,
        ILoquiObjectSetter<GenericBaseForm>
    {
        #region Ctor
        protected GenericBaseForm()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IGenericBaseFormGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IGenericBaseFormGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IGenericBaseFormGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region ODTY
        public Single? ODTY { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IGenericBaseFormGetter.ODTY => this.ODTY;
        #endregion
        #region ODRT
        public Single? ODRT { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IGenericBaseFormGetter.ODRT => this.ODRT;
        #endregion
        #region ObjectPlacementDefaults
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectPlacementDefaults? _ObjectPlacementDefaults;
        public ObjectPlacementDefaults? ObjectPlacementDefaults
        {
            get => _ObjectPlacementDefaults;
            set => _ObjectPlacementDefaults = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectPlacementDefaultsGetter? IGenericBaseFormGetter.ObjectPlacementDefaults => this.ObjectPlacementDefaults;
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IGenericBaseFormGetter.Components => _Components;
        #endregion

        #endregion
        #region Filter
        public String? Filter { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IGenericBaseFormGetter.Filter => this.Filter;
        #endregion
        #region Template
        private readonly IFormLinkNullable<IGenericBaseFormTemplateGetter> _Template = new FormLinkNullable<IGenericBaseFormTemplateGetter>();
        public IFormLinkNullable<IGenericBaseFormTemplateGetter> Template
        {
            get => _Template;
            set => _Template.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGenericBaseFormTemplateGetter> IGenericBaseFormGetter.Template => this.Template;
        #endregion
        #region STRVs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String> _STRVs = new ExtendedList<String>();
        public ExtendedList<String> STRVs
        {
            get => this._STRVs;
            init => this._STRVs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String> IGenericBaseFormGetter.STRVs => _STRVs;
        #endregion

        #endregion
        #region ObjectTemplates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectTemplate<AObjectModification.NoneProperty>>? _ObjectTemplates;
        public ExtendedList<ObjectTemplate<AObjectModification.NoneProperty>>? ObjectTemplates
        {
            get => this._ObjectTemplates;
            set => this._ObjectTemplates = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectTemplateGetter<AObjectModification.NoneProperty>>? IGenericBaseFormGetter.ObjectTemplates => _ObjectTemplates;
        #endregion

        #endregion
        #region NavmeshGeometry
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NavmeshGeometry? _NavmeshGeometry;
        public NavmeshGeometry? NavmeshGeometry
        {
            get => _NavmeshGeometry;
            set => _NavmeshGeometry = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INavmeshGeometryGetter? IGenericBaseFormGetter.NavmeshGeometry => this.NavmeshGeometry;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GenericBaseFormMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.ODTY = initialValue;
                this.ODRT = initialValue;
                this.ObjectPlacementDefaults = new MaskItem<TItem, ObjectPlacementDefaults.Mask<TItem>?>(initialValue, new ObjectPlacementDefaults.Mask<TItem>(initialValue));
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Filter = initialValue;
                this.Template = initialValue;
                this.STRVs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ObjectTemplates = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>());
                this.NavmeshGeometry = new MaskItem<TItem, NavmeshGeometry.Mask<TItem>?>(initialValue, new NavmeshGeometry.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Name,
                TItem ODTY,
                TItem ODRT,
                TItem ObjectPlacementDefaults,
                TItem Components,
                TItem Filter,
                TItem Template,
                TItem STRVs,
                TItem ObjectTemplates,
                TItem NavmeshGeometry)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.ODTY = ODTY;
                this.ODRT = ODRT;
                this.ObjectPlacementDefaults = new MaskItem<TItem, ObjectPlacementDefaults.Mask<TItem>?>(ObjectPlacementDefaults, new ObjectPlacementDefaults.Mask<TItem>(ObjectPlacementDefaults));
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Filter = Filter;
                this.Template = Template;
                this.STRVs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(STRVs, Enumerable.Empty<(int Index, TItem Value)>());
                this.ObjectTemplates = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>?>(ObjectTemplates, Enumerable.Empty<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>());
                this.NavmeshGeometry = new MaskItem<TItem, NavmeshGeometry.Mask<TItem>?>(NavmeshGeometry, new NavmeshGeometry.Mask<TItem>(NavmeshGeometry));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public TItem ODTY;
            public TItem ODRT;
            public MaskItem<TItem, ObjectPlacementDefaults.Mask<TItem>?>? ObjectPlacementDefaults { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Filter;
            public TItem Template;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? STRVs;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectTemplate.Mask<TItem>?>>?>? ObjectTemplates;
            public MaskItem<TItem, NavmeshGeometry.Mask<TItem>?>? NavmeshGeometry { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.ODTY, rhs.ODTY)) return false;
                if (!object.Equals(this.ODRT, rhs.ODRT)) return false;
                if (!object.Equals(this.ObjectPlacementDefaults, rhs.ObjectPlacementDefaults)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Filter, rhs.Filter)) return false;
                if (!object.Equals(this.Template, rhs.Template)) return false;
                if (!object.Equals(this.STRVs, rhs.STRVs)) return false;
                if (!object.Equals(this.ObjectTemplates, rhs.ObjectTemplates)) return false;
                if (!object.Equals(this.NavmeshGeometry, rhs.NavmeshGeometry)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.ODTY);
                hash.Add(this.ODRT);
                hash.Add(this.ObjectPlacementDefaults);
                hash.Add(this.Components);
                hash.Add(this.Filter);
                hash.Add(this.Template);
                hash.Add(this.STRVs);
                hash.Add(this.ObjectTemplates);
                hash.Add(this.NavmeshGeometry);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.ODTY)) return false;
                if (!eval(this.ODRT)) return false;
                if (ObjectPlacementDefaults != null)
                {
                    if (!eval(this.ObjectPlacementDefaults.Overall)) return false;
                    if (this.ObjectPlacementDefaults.Specific != null && !this.ObjectPlacementDefaults.Specific.All(eval)) return false;
                }
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Filter)) return false;
                if (!eval(this.Template)) return false;
                if (this.STRVs != null)
                {
                    if (!eval(this.STRVs.Overall)) return false;
                    if (this.STRVs.Specific != null)
                    {
                        foreach (var item in this.STRVs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ObjectTemplates != null)
                {
                    if (!eval(this.ObjectTemplates.Overall)) return false;
                    if (this.ObjectTemplates.Specific != null)
                    {
                        foreach (var item in this.ObjectTemplates.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (NavmeshGeometry != null)
                {
                    if (!eval(this.NavmeshGeometry.Overall)) return false;
                    if (this.NavmeshGeometry.Specific != null && !this.NavmeshGeometry.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.ODTY)) return true;
                if (eval(this.ODRT)) return true;
                if (ObjectPlacementDefaults != null)
                {
                    if (eval(this.ObjectPlacementDefaults.Overall)) return true;
                    if (this.ObjectPlacementDefaults.Specific != null && this.ObjectPlacementDefaults.Specific.Any(eval)) return true;
                }
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Filter)) return true;
                if (eval(this.Template)) return true;
                if (this.STRVs != null)
                {
                    if (eval(this.STRVs.Overall)) return true;
                    if (this.STRVs.Specific != null)
                    {
                        foreach (var item in this.STRVs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ObjectTemplates != null)
                {
                    if (eval(this.ObjectTemplates.Overall)) return true;
                    if (this.ObjectTemplates.Specific != null)
                    {
                        foreach (var item in this.ObjectTemplates.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (NavmeshGeometry != null)
                {
                    if (eval(this.NavmeshGeometry.Overall)) return true;
                    if (this.NavmeshGeometry.Specific != null && this.NavmeshGeometry.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GenericBaseForm.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.ODTY = eval(this.ODTY);
                obj.ODRT = eval(this.ODRT);
                obj.ObjectPlacementDefaults = this.ObjectPlacementDefaults == null ? null : new MaskItem<R, ObjectPlacementDefaults.Mask<R>?>(eval(this.ObjectPlacementDefaults.Overall), this.ObjectPlacementDefaults.Specific?.Translate(eval));
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Filter = eval(this.Filter);
                obj.Template = eval(this.Template);
                if (STRVs != null)
                {
                    obj.STRVs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.STRVs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (STRVs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.STRVs.Specific = l;
                        foreach (var item in STRVs.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (ObjectTemplates != null)
                {
                    obj.ObjectTemplates = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectTemplate.Mask<R>?>>?>(eval(this.ObjectTemplates.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectTemplate.Mask<R>?>>());
                    if (ObjectTemplates.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectTemplate.Mask<R>?>>();
                        obj.ObjectTemplates.Specific = l;
                        foreach (var item in ObjectTemplates.Specific)
                        {
                            MaskItemIndexed<R, ObjectTemplate.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectTemplate.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.NavmeshGeometry = this.NavmeshGeometry == null ? null : new MaskItem<R, NavmeshGeometry.Mask<R>?>(eval(this.NavmeshGeometry.Overall), this.NavmeshGeometry.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(GenericBaseForm.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, GenericBaseForm.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(GenericBaseForm.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.ODTY ?? true)
                    {
                        sb.AppendItem(ODTY, "ODTY");
                    }
                    if (printMask?.ODRT ?? true)
                    {
                        sb.AppendItem(ODRT, "ODRT");
                    }
                    if (printMask?.ObjectPlacementDefaults?.Overall ?? true)
                    {
                        ObjectPlacementDefaults?.Print(sb);
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Filter ?? true)
                    {
                        sb.AppendItem(Filter, "Filter");
                    }
                    if (printMask?.Template ?? true)
                    {
                        sb.AppendItem(Template, "Template");
                    }
                    if ((printMask?.STRVs?.Overall ?? true)
                        && STRVs is {} STRVsItem)
                    {
                        sb.AppendLine("STRVs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(STRVsItem.Overall);
                            if (STRVsItem.Specific != null)
                            {
                                foreach (var subItem in STRVsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ObjectTemplates?.Overall ?? true)
                        && ObjectTemplates is {} ObjectTemplatesItem)
                    {
                        sb.AppendLine("ObjectTemplates =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ObjectTemplatesItem.Overall);
                            if (ObjectTemplatesItem.Specific != null)
                            {
                                foreach (var subItem in ObjectTemplatesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.NavmeshGeometry?.Overall ?? true)
                    {
                        NavmeshGeometry?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public Exception? ODTY;
            public Exception? ODRT;
            public MaskItem<Exception?, ObjectPlacementDefaults.ErrorMask?>? ObjectPlacementDefaults;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Filter;
            public Exception? Template;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? STRVs;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>? ObjectTemplates;
            public MaskItem<Exception?, NavmeshGeometry.ErrorMask?>? NavmeshGeometry;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                GenericBaseForm_FieldIndex enu = (GenericBaseForm_FieldIndex)index;
                switch (enu)
                {
                    case GenericBaseForm_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case GenericBaseForm_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case GenericBaseForm_FieldIndex.Name:
                        return Name;
                    case GenericBaseForm_FieldIndex.ODTY:
                        return ODTY;
                    case GenericBaseForm_FieldIndex.ODRT:
                        return ODRT;
                    case GenericBaseForm_FieldIndex.ObjectPlacementDefaults:
                        return ObjectPlacementDefaults;
                    case GenericBaseForm_FieldIndex.Components:
                        return Components;
                    case GenericBaseForm_FieldIndex.Filter:
                        return Filter;
                    case GenericBaseForm_FieldIndex.Template:
                        return Template;
                    case GenericBaseForm_FieldIndex.STRVs:
                        return STRVs;
                    case GenericBaseForm_FieldIndex.ObjectTemplates:
                        return ObjectTemplates;
                    case GenericBaseForm_FieldIndex.NavmeshGeometry:
                        return NavmeshGeometry;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                GenericBaseForm_FieldIndex enu = (GenericBaseForm_FieldIndex)index;
                switch (enu)
                {
                    case GenericBaseForm_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case GenericBaseForm_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case GenericBaseForm_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case GenericBaseForm_FieldIndex.ODTY:
                        this.ODTY = ex;
                        break;
                    case GenericBaseForm_FieldIndex.ODRT:
                        this.ODRT = ex;
                        break;
                    case GenericBaseForm_FieldIndex.ObjectPlacementDefaults:
                        this.ObjectPlacementDefaults = new MaskItem<Exception?, ObjectPlacementDefaults.ErrorMask?>(ex, null);
                        break;
                    case GenericBaseForm_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case GenericBaseForm_FieldIndex.Filter:
                        this.Filter = ex;
                        break;
                    case GenericBaseForm_FieldIndex.Template:
                        this.Template = ex;
                        break;
                    case GenericBaseForm_FieldIndex.STRVs:
                        this.STRVs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case GenericBaseForm_FieldIndex.ObjectTemplates:
                        this.ObjectTemplates = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>(ex, null);
                        break;
                    case GenericBaseForm_FieldIndex.NavmeshGeometry:
                        this.NavmeshGeometry = new MaskItem<Exception?, NavmeshGeometry.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                GenericBaseForm_FieldIndex enu = (GenericBaseForm_FieldIndex)index;
                switch (enu)
                {
                    case GenericBaseForm_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case GenericBaseForm_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case GenericBaseForm_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case GenericBaseForm_FieldIndex.ODTY:
                        this.ODTY = (Exception?)obj;
                        break;
                    case GenericBaseForm_FieldIndex.ODRT:
                        this.ODRT = (Exception?)obj;
                        break;
                    case GenericBaseForm_FieldIndex.ObjectPlacementDefaults:
                        this.ObjectPlacementDefaults = (MaskItem<Exception?, ObjectPlacementDefaults.ErrorMask?>?)obj;
                        break;
                    case GenericBaseForm_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case GenericBaseForm_FieldIndex.Filter:
                        this.Filter = (Exception?)obj;
                        break;
                    case GenericBaseForm_FieldIndex.Template:
                        this.Template = (Exception?)obj;
                        break;
                    case GenericBaseForm_FieldIndex.STRVs:
                        this.STRVs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case GenericBaseForm_FieldIndex.ObjectTemplates:
                        this.ObjectTemplates = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>)obj;
                        break;
                    case GenericBaseForm_FieldIndex.NavmeshGeometry:
                        this.NavmeshGeometry = (MaskItem<Exception?, NavmeshGeometry.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (ODTY != null) return true;
                if (ODRT != null) return true;
                if (ObjectPlacementDefaults != null) return true;
                if (Components != null) return true;
                if (Filter != null) return true;
                if (Template != null) return true;
                if (STRVs != null) return true;
                if (ObjectTemplates != null) return true;
                if (NavmeshGeometry != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(ODTY, "ODTY");
                }
                {
                    sb.AppendItem(ODRT, "ODRT");
                }
                ObjectPlacementDefaults?.Print(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Filter, "Filter");
                }
                {
                    sb.AppendItem(Template, "Template");
                }
                if (STRVs is {} STRVsItem)
                {
                    sb.AppendLine("STRVs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(STRVsItem.Overall);
                        if (STRVsItem.Specific != null)
                        {
                            foreach (var subItem in STRVsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (ObjectTemplates is {} ObjectTemplatesItem)
                {
                    sb.AppendLine("ObjectTemplates =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ObjectTemplatesItem.Overall);
                        if (ObjectTemplatesItem.Specific != null)
                        {
                            foreach (var subItem in ObjectTemplatesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                NavmeshGeometry?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.ODTY = this.ODTY.Combine(rhs.ODTY);
                ret.ODRT = this.ODRT.Combine(rhs.ODRT);
                ret.ObjectPlacementDefaults = this.ObjectPlacementDefaults.Combine(rhs.ObjectPlacementDefaults, (l, r) => l.Combine(r));
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Filter = this.Filter.Combine(rhs.Filter);
                ret.Template = this.Template.Combine(rhs.Template);
                ret.STRVs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.STRVs?.Overall, rhs.STRVs?.Overall), Noggog.ExceptionExt.Combine(this.STRVs?.Specific, rhs.STRVs?.Specific));
                ret.ObjectTemplates = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectTemplate.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ObjectTemplates?.Overall, rhs.ObjectTemplates?.Overall), Noggog.ExceptionExt.Combine(this.ObjectTemplates?.Specific, rhs.ObjectTemplates?.Specific));
                ret.NavmeshGeometry = this.NavmeshGeometry.Combine(rhs.NavmeshGeometry, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public bool ODTY;
            public bool ODRT;
            public ObjectPlacementDefaults.TranslationMask? ObjectPlacementDefaults;
            public AComponent.TranslationMask? Components;
            public bool Filter;
            public bool Template;
            public bool STRVs;
            public ObjectTemplate.TranslationMask? ObjectTemplates;
            public NavmeshGeometry.TranslationMask? NavmeshGeometry;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.ODTY = defaultOn;
                this.ODRT = defaultOn;
                this.Filter = defaultOn;
                this.Template = defaultOn;
                this.STRVs = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((ODTY, null));
                ret.Add((ODRT, null));
                ret.Add((ObjectPlacementDefaults != null ? ObjectPlacementDefaults.OnOverall : DefaultOn, ObjectPlacementDefaults?.GetCrystal()));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Filter, null));
                ret.Add((Template, null));
                ret.Add((STRVs, null));
                ret.Add((ObjectTemplates == null ? DefaultOn : !ObjectTemplates.GetCrystal().CopyNothing, ObjectTemplates?.GetCrystal()));
                ret.Add((NavmeshGeometry != null ? NavmeshGeometry.OnOverall : DefaultOn, NavmeshGeometry?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = GenericBaseForm_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GenericBaseFormCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => GenericBaseFormSetterCommon.Instance.RemapLinks(this, mapping);
        public GenericBaseForm(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private GenericBaseForm(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal GenericBaseForm(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public GenericBaseForm(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public GenericBaseForm(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<GenericBaseForm>.ToString(this);
        }

        protected override Type LinkType => typeof(IGenericBaseForm);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => GenericBaseFormCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => GenericBaseFormSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => GenericBaseFormSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => GenericBaseFormSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IGenericBaseFormGetter rhs) return false;
            return ((GenericBaseFormCommon)((IGenericBaseFormGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGenericBaseFormGetter? obj)
        {
            return ((GenericBaseFormCommon)((IGenericBaseFormGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GenericBaseFormCommon)((IGenericBaseFormGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GenericBaseFormBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GenericBaseFormBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static GenericBaseForm CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new GenericBaseForm();
            ((GenericBaseFormSetterCommon)((IGenericBaseFormGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out GenericBaseForm item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((GenericBaseFormSetterCommon)((IGenericBaseFormGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new GenericBaseForm GetNew()
        {
            return new GenericBaseForm();
        }

    }
    #endregion

    #region Interface
    public partial interface IGenericBaseForm :
        IAssetLinkContainer,
        IBaseObject,
        IConstructibleObjectTarget,
        IExternalBaseTemplate,
        IFormLinkContainer,
        IGenericBaseFormGetter,
        IHaveVirtualMachineAdapter,
        ILeveledBaseFormTarget,
        ILoquiObjectSetter<IGenericBaseFormInternal>,
        INamed,
        INamedRequired,
        IObjectBounded,
        IScripted,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new Single? ODTY { get; set; }
        new Single? ODRT { get; set; }
        new ObjectPlacementDefaults? ObjectPlacementDefaults { get; set; }
        new ExtendedList<AComponent> Components { get; }
        new String? Filter { get; set; }
        new IFormLinkNullable<IGenericBaseFormTemplateGetter> Template { get; set; }
        new ExtendedList<String> STRVs { get; }
        new ExtendedList<ObjectTemplate<AObjectModification.NoneProperty>>? ObjectTemplates { get; set; }
        new NavmeshGeometry? NavmeshGeometry { get; set; }
    }

    public partial interface IGenericBaseFormInternal :
        IStarfieldMajorRecordInternal,
        IGenericBaseForm,
        IGenericBaseFormGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.GBFM)]
    public partial interface IGenericBaseFormGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IConstructibleObjectTargetGetter,
        IExternalBaseTemplateGetter,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        ILeveledBaseFormTargetGetter,
        ILoquiObject<IGenericBaseFormGetter>,
        IMapsToGetter<IGenericBaseFormGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IScriptedGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => GenericBaseForm_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        Single? ODTY { get; }
        Single? ODRT { get; }
        IObjectPlacementDefaultsGetter? ObjectPlacementDefaults { get; }
        IReadOnlyList<IAComponentGetter> Components { get; }
        String? Filter { get; }
        IFormLinkNullableGetter<IGenericBaseFormTemplateGetter> Template { get; }
        IReadOnlyList<String> STRVs { get; }
        IReadOnlyList<IObjectTemplateGetter<AObjectModification.NoneProperty>>? ObjectTemplates { get; }
        INavmeshGeometryGetter? NavmeshGeometry { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GenericBaseFormMixIn
    {
        public static void Clear(this IGenericBaseFormInternal item)
        {
            ((GenericBaseFormSetterCommon)((IGenericBaseFormGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GenericBaseForm.Mask<bool> GetEqualsMask(
            this IGenericBaseFormGetter item,
            IGenericBaseFormGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GenericBaseFormCommon)((IGenericBaseFormGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IGenericBaseFormGetter item,
            string? name = null,
            GenericBaseForm.Mask<bool>? printMask = null)
        {
            return ((GenericBaseFormCommon)((IGenericBaseFormGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IGenericBaseFormGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GenericBaseForm.Mask<bool>? printMask = null)
        {
            ((GenericBaseFormCommon)((IGenericBaseFormGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGenericBaseFormGetter item,
            IGenericBaseFormGetter rhs,
            GenericBaseForm.TranslationMask? equalsMask = null)
        {
            return ((GenericBaseFormCommon)((IGenericBaseFormGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGenericBaseFormInternal lhs,
            IGenericBaseFormGetter rhs,
            out GenericBaseForm.ErrorMask errorMask,
            GenericBaseForm.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GenericBaseFormSetterTranslationCommon)((IGenericBaseFormGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = GenericBaseForm.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGenericBaseFormInternal lhs,
            IGenericBaseFormGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GenericBaseFormSetterTranslationCommon)((IGenericBaseFormGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static GenericBaseForm DeepCopy(
            this IGenericBaseFormGetter item,
            GenericBaseForm.TranslationMask? copyMask = null)
        {
            return ((GenericBaseFormSetterTranslationCommon)((IGenericBaseFormGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GenericBaseForm DeepCopy(
            this IGenericBaseFormGetter item,
            out GenericBaseForm.ErrorMask errorMask,
            GenericBaseForm.TranslationMask? copyMask = null)
        {
            return ((GenericBaseFormSetterTranslationCommon)((IGenericBaseFormGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GenericBaseForm DeepCopy(
            this IGenericBaseFormGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GenericBaseFormSetterTranslationCommon)((IGenericBaseFormGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static GenericBaseForm Duplicate(
            this IGenericBaseFormGetter item,
            FormKey formKey,
            GenericBaseForm.TranslationMask? copyMask = null)
        {
            return ((GenericBaseFormCommon)((IGenericBaseFormGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static GenericBaseForm Duplicate(
            this IGenericBaseFormGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((GenericBaseFormCommon)((IGenericBaseFormGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGenericBaseFormInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((GenericBaseFormSetterCommon)((IGenericBaseFormGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum GenericBaseForm_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        Name = 9,
        ODTY = 10,
        ODRT = 11,
        ObjectPlacementDefaults = 12,
        Components = 13,
        Filter = 14,
        Template = 15,
        STRVs = 16,
        ObjectTemplates = 17,
        NavmeshGeometry = 18,
    }
    #endregion

    #region Registration
    internal partial class GenericBaseForm_Registration : ILoquiRegistration
    {
        public static readonly GenericBaseForm_Registration Instance = new GenericBaseForm_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 19;

        public static readonly Type MaskType = typeof(GenericBaseForm.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GenericBaseForm.ErrorMask);

        public static readonly Type ClassType = typeof(GenericBaseForm);

        public static readonly Type GetterType = typeof(IGenericBaseFormGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGenericBaseForm);

        public static readonly Type? InternalSetterType = typeof(IGenericBaseFormInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.GenericBaseForm";

        public const string Name = "GenericBaseForm";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.GBFM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.GBFM);
            var all = RecordCollection.Factory(
                RecordTypes.GBFM,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.FULL,
                RecordTypes.ODTY,
                RecordTypes.ODRT,
                RecordTypes.OPDS,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.FLTR,
                RecordTypes.ANAM,
                RecordTypes.STRV,
                RecordTypes.OBTF,
                RecordTypes.OBTS,
                RecordTypes.OBTE,
                RecordTypes.STOP,
                RecordTypes.NVNM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(GenericBaseFormBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class GenericBaseFormSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly GenericBaseFormSetterCommon Instance = new GenericBaseFormSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGenericBaseFormInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Name = default;
            item.ODTY = default;
            item.ODRT = default;
            item.ObjectPlacementDefaults = null;
            item.Components.Clear();
            item.Filter = default;
            item.Template.Clear();
            item.STRVs.Clear();
            item.ObjectTemplates = null;
            item.NavmeshGeometry = null;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IGenericBaseFormInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IGenericBaseFormInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IGenericBaseForm obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Components.RemapLinks(mapping);
            obj.Template.Relink(mapping);
            obj.ObjectTemplates?.RemapLinks(mapping);
            obj.NavmeshGeometry?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IGenericBaseForm obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IGenericBaseForm obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGenericBaseFormInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IGenericBaseFormInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: GenericBaseFormBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: GenericBaseFormBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (GenericBaseForm)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (GenericBaseForm)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class GenericBaseFormCommon : StarfieldMajorRecordCommon
    {
        public new static readonly GenericBaseFormCommon Instance = new GenericBaseFormCommon();

        public GenericBaseForm.Mask<bool> GetEqualsMask(
            IGenericBaseFormGetter item,
            IGenericBaseFormGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GenericBaseForm.Mask<bool>(false);
            ((GenericBaseFormCommon)((IGenericBaseFormGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGenericBaseFormGetter item,
            IGenericBaseFormGetter rhs,
            GenericBaseForm.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.ODTY = item.ODTY.EqualsWithin(rhs.ODTY);
            ret.ODRT = item.ODRT.EqualsWithin(rhs.ODRT);
            ret.ObjectPlacementDefaults = EqualsMaskHelper.EqualsHelper(
                item.ObjectPlacementDefaults,
                rhs.ObjectPlacementDefaults,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Filter = string.Equals(item.Filter, rhs.Filter);
            ret.Template = item.Template.Equals(rhs.Template);
            ret.STRVs = item.STRVs.CollectionEqualsHelper(
                rhs.STRVs,
                (l, r) => string.Equals(l, r),
                include);
            ret.ObjectTemplates = item.ObjectTemplates.CollectionEqualsHelper(
                rhs.ObjectTemplates,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.NavmeshGeometry = EqualsMaskHelper.EqualsHelper(
                item.NavmeshGeometry,
                rhs.NavmeshGeometry,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IGenericBaseFormGetter item,
            string? name = null,
            GenericBaseForm.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IGenericBaseFormGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GenericBaseForm.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"GenericBaseForm =>");
            }
            else
            {
                sb.AppendLine($"{name} (GenericBaseForm) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IGenericBaseFormGetter item,
            StructuredStringBuilder sb,
            GenericBaseForm.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.ODTY ?? true)
                && item.ODTY is {} ODTYItem)
            {
                sb.AppendItem(ODTYItem, "ODTY");
            }
            if ((printMask?.ODRT ?? true)
                && item.ODRT is {} ODRTItem)
            {
                sb.AppendItem(ODRTItem, "ODRT");
            }
            if ((printMask?.ObjectPlacementDefaults?.Overall ?? true)
                && item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsItem)
            {
                ObjectPlacementDefaultsItem?.Print(sb, "ObjectPlacementDefaults");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Filter ?? true)
                && item.Filter is {} FilterItem)
            {
                sb.AppendItem(FilterItem, "Filter");
            }
            if (printMask?.Template ?? true)
            {
                sb.AppendItem(item.Template.FormKeyNullable, "Template");
            }
            if (printMask?.STRVs?.Overall ?? true)
            {
                sb.AppendLine("STRVs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.STRVs)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if ((printMask?.ObjectTemplates?.Overall ?? true)
                && item.ObjectTemplates is {} ObjectTemplatesItem)
            {
                sb.AppendLine("ObjectTemplates =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ObjectTemplatesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.NavmeshGeometry?.Overall ?? true)
                && item.NavmeshGeometry is {} NavmeshGeometryItem)
            {
                NavmeshGeometryItem?.Print(sb, "NavmeshGeometry");
            }
        }
        
        public static GenericBaseForm_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GenericBaseForm_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (GenericBaseForm_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (GenericBaseForm_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (GenericBaseForm_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (GenericBaseForm_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (GenericBaseForm_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (GenericBaseForm_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new GenericBaseForm_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (GenericBaseForm_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (GenericBaseForm_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (GenericBaseForm_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (GenericBaseForm_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGenericBaseFormGetter? lhs,
            IGenericBaseFormGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)GenericBaseForm_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)GenericBaseForm_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.ODTY) ?? true))
            {
                if (!lhs.ODTY.EqualsWithin(rhs.ODTY)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.ODRT) ?? true))
            {
                if (!lhs.ODRT.EqualsWithin(rhs.ODRT)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.ObjectPlacementDefaults) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectPlacementDefaults, rhs.ObjectPlacementDefaults, out var lhsObjectPlacementDefaults, out var rhsObjectPlacementDefaults, out var isObjectPlacementDefaultsEqual))
                {
                    if (!((ObjectPlacementDefaultsCommon)((IObjectPlacementDefaultsGetter)lhsObjectPlacementDefaults).CommonInstance()!).Equals(lhsObjectPlacementDefaults, rhsObjectPlacementDefaults, equalsMask?.GetSubCrystal((int)GenericBaseForm_FieldIndex.ObjectPlacementDefaults))) return false;
                }
                else if (!isObjectPlacementDefaultsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)GenericBaseForm_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.Filter) ?? true))
            {
                if (!string.Equals(lhs.Filter, rhs.Filter)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.Template) ?? true))
            {
                if (!lhs.Template.Equals(rhs.Template)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.STRVs) ?? true))
            {
                if (!lhs.STRVs.SequenceEqualNullable(rhs.STRVs)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.ObjectTemplates) ?? true))
            {
                if (!lhs.ObjectTemplates.SequenceEqualNullable(rhs.ObjectTemplates, (l, r) => ((ObjectTemplateCommon<AObjectModification.NoneProperty>)((IObjectTemplateGetter<AObjectModification.NoneProperty>)l).CommonInstance(typeof(AObjectModification.NoneProperty))!).Equals(l, r, equalsMask?.GetSubCrystal((int)GenericBaseForm_FieldIndex.ObjectTemplates)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.NavmeshGeometry) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.NavmeshGeometry, rhs.NavmeshGeometry, out var lhsNavmeshGeometry, out var rhsNavmeshGeometry, out var isNavmeshGeometryEqual))
                {
                    if (!((NavmeshGeometryCommon)((INavmeshGeometryGetter)lhsNavmeshGeometry).CommonInstance()!).Equals(lhsNavmeshGeometry, rhsNavmeshGeometry, equalsMask?.GetSubCrystal((int)GenericBaseForm_FieldIndex.NavmeshGeometry))) return false;
                }
                else if (!isNavmeshGeometryEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGenericBaseFormGetter?)lhs,
                rhs: rhs as IGenericBaseFormGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGenericBaseFormGetter?)lhs,
                rhs: rhs as IGenericBaseFormGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IGenericBaseFormGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.ODTY is {} ODTYitem)
            {
                hash.Add(ODTYitem);
            }
            if (item.ODRT is {} ODRTitem)
            {
                hash.Add(ODRTitem);
            }
            if (item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsitem)
            {
                hash.Add(ObjectPlacementDefaultsitem);
            }
            hash.Add(item.Components);
            if (item.Filter is {} Filteritem)
            {
                hash.Add(Filteritem);
            }
            hash.Add(item.Template);
            hash.Add(item.STRVs);
            hash.Add(item.ObjectTemplates);
            if (item.NavmeshGeometry is {} NavmeshGeometryitem)
            {
                hash.Add(NavmeshGeometryitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IGenericBaseFormGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IGenericBaseFormGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return GenericBaseForm.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IGenericBaseFormGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Template, out var TemplateInfo))
            {
                yield return TemplateInfo;
            }
            if (obj.ObjectTemplates is {} ObjectTemplatesItem)
            {
                foreach (var item in ObjectTemplatesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.NavmeshGeometry is IFormLinkContainerGetter NavmeshGeometrylinkCont)
            {
                foreach (var item in NavmeshGeometrylinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IGenericBaseFormGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public GenericBaseForm Duplicate(
            IGenericBaseFormGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new GenericBaseForm(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGenericBaseFormGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IGenericBaseFormGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class GenericBaseFormSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly GenericBaseFormSetterTranslationCommon Instance = new GenericBaseFormSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGenericBaseFormInternal item,
            IGenericBaseFormGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IGenericBaseForm item,
            IGenericBaseFormGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)GenericBaseForm_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)GenericBaseForm_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)GenericBaseForm_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)GenericBaseForm_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.ODTY) ?? true))
            {
                item.ODTY = rhs.ODTY;
            }
            if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.ODRT) ?? true))
            {
                item.ODRT = rhs.ODRT;
            }
            if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.ObjectPlacementDefaults) ?? true))
            {
                errorMask?.PushIndex((int)GenericBaseForm_FieldIndex.ObjectPlacementDefaults);
                try
                {
                    if(rhs.ObjectPlacementDefaults is {} rhsObjectPlacementDefaults)
                    {
                        item.ObjectPlacementDefaults = rhsObjectPlacementDefaults.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)GenericBaseForm_FieldIndex.ObjectPlacementDefaults));
                    }
                    else
                    {
                        item.ObjectPlacementDefaults = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)GenericBaseForm_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.Filter) ?? true))
            {
                item.Filter = rhs.Filter;
            }
            if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.Template) ?? true))
            {
                item.Template.SetTo(rhs.Template.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.STRVs) ?? true))
            {
                errorMask?.PushIndex((int)GenericBaseForm_FieldIndex.STRVs);
                try
                {
                    item.STRVs.SetTo(rhs.STRVs);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.ObjectTemplates) ?? true))
            {
                errorMask?.PushIndex((int)GenericBaseForm_FieldIndex.ObjectTemplates);
                try
                {
                    if ((rhs.ObjectTemplates != null))
                    {
                        item.ObjectTemplates = 
                            rhs.ObjectTemplates
                            .Select(r =>
                            {
                                return r.DeepCopy<AObjectModification.NoneProperty>(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectTemplate<AObjectModification.NoneProperty>>();
                    }
                    else
                    {
                        item.ObjectTemplates = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)GenericBaseForm_FieldIndex.NavmeshGeometry) ?? true))
            {
                errorMask?.PushIndex((int)GenericBaseForm_FieldIndex.NavmeshGeometry);
                try
                {
                    if(rhs.NavmeshGeometry is {} rhsNavmeshGeometry)
                    {
                        item.NavmeshGeometry = rhsNavmeshGeometry.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)GenericBaseForm_FieldIndex.NavmeshGeometry));
                    }
                    else
                    {
                        item.NavmeshGeometry = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IGenericBaseForm item,
            IGenericBaseFormGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGenericBaseFormInternal)item,
                rhs: (IGenericBaseFormGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGenericBaseForm)item,
                rhs: (IGenericBaseFormGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGenericBaseFormInternal)item,
                rhs: (IGenericBaseFormGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGenericBaseForm)item,
                rhs: (IGenericBaseFormGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public GenericBaseForm DeepCopy(
            IGenericBaseFormGetter item,
            GenericBaseForm.TranslationMask? copyMask = null)
        {
            GenericBaseForm ret = (GenericBaseForm)((GenericBaseFormCommon)((IGenericBaseFormGetter)item).CommonInstance()!).GetNew();
            ((GenericBaseFormSetterTranslationCommon)((IGenericBaseFormGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public GenericBaseForm DeepCopy(
            IGenericBaseFormGetter item,
            out GenericBaseForm.ErrorMask errorMask,
            GenericBaseForm.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GenericBaseForm ret = (GenericBaseForm)((GenericBaseFormCommon)((IGenericBaseFormGetter)item).CommonInstance()!).GetNew();
            ((GenericBaseFormSetterTranslationCommon)((IGenericBaseFormGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = GenericBaseForm.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public GenericBaseForm DeepCopy(
            IGenericBaseFormGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GenericBaseForm ret = (GenericBaseForm)((GenericBaseFormCommon)((IGenericBaseFormGetter)item).CommonInstance()!).GetNew();
            ((GenericBaseFormSetterTranslationCommon)((IGenericBaseFormGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class GenericBaseForm
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GenericBaseForm_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GenericBaseForm_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GenericBaseFormCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GenericBaseFormSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GenericBaseFormSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class GenericBaseFormBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly GenericBaseFormBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IGenericBaseFormGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ODTY,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ODRT,
                header: translationParams.ConvertToCustom(RecordTypes.ODRT));
            if (item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsItem)
            {
                ((ObjectPlacementDefaultsBinaryWriteTranslation)((IBinaryItem)ObjectPlacementDefaultsItem).BinaryWriteTranslator).Write(
                    item: ObjectPlacementDefaultsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Filter,
                header: translationParams.ConvertToCustom(RecordTypes.FLTR),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Template,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.WritePerItem(
                writer: writer,
                items: item.STRVs,
                recordType: translationParams.ConvertToCustom(RecordTypes.STRV),
                transl: StringBinaryTranslation.Instance.Write);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectTemplateGetter<AObjectModification.NoneProperty>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.ObjectTemplates,
                counterType: RecordTypes.OBTE,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IObjectTemplateGetter<AObjectModification.NoneProperty> subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ObjectTemplateBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write<AObjectModification.NoneProperty>(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            using (HeaderExport.Subrecord(writer, RecordTypes.STOP)) { }
            using (HeaderExport.Subrecord(writer, RecordTypes.STOP)) { }
            if (item.NavmeshGeometry is {} NavmeshGeometryItem)
            {
                ((NavmeshGeometryBinaryWriteTranslation)((IBinaryItem)NavmeshGeometryItem).BinaryWriteTranslator).Write(
                    item: NavmeshGeometryItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
        }

        public void Write(
            MutagenWriter writer,
            IGenericBaseFormGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.GBFM,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IGenericBaseFormGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGenericBaseFormGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGenericBaseFormGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class GenericBaseFormBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly GenericBaseFormBinaryCreateTranslation Instance = new GenericBaseFormBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.GBFM;
        public static ParseResult FillBinaryRecordTypes(
            IGenericBaseFormInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Starfield.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)GenericBaseForm_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)GenericBaseForm_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)GenericBaseForm_FieldIndex.ObjectBounds)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.Name = StringBinaryTranslation.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            eager: true,
                            source: StringsSource.Normal,
                            stringBinaryType: StringBinaryType.NullTerminate,
                            parseWhole: true);
                        return new ParseResult((int)GenericBaseForm_FieldIndex.Name, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)GenericBaseForm_FieldIndex.STRVs)
                    {
                        item.ObjectTemplates = 
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectTemplate<AObjectModification.NoneProperty>>.Instance.ParsePerItem(
                                reader: frame,
                                countLengthLength: 4,
                                countRecord: RecordTypes.OBTE,
                                triggeringRecord: ObjectTemplate_Registration.TriggerSpecs,
                                translationParams: translationParams,
                                transl: ObjectTemplate<AObjectModification.NoneProperty>.TryCreateFromBinary)
                            .CastExtendedList<ObjectTemplate<AObjectModification.NoneProperty>>();
                        return new ParseResult((int)GenericBaseForm_FieldIndex.ObjectTemplates, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                                item.Name = StringBinaryTranslation.Instance.Parse(
                                    reader: frame.SpawnWithLength(contentLength),
                                    eager: true,
                                    source: StringsSource.Normal,
                                    stringBinaryType: StringBinaryType.NullTerminate,
                                    parseWhole: true);
                                return new ParseResult((int)GenericBaseForm_FieldIndex.Name, nextRecordType);
                            case 1:
                                item.ObjectTemplates = 
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectTemplate<AObjectModification.NoneProperty>>.Instance.ParsePerItem(
                                        reader: frame,
                                        countLengthLength: 4,
                                        countRecord: RecordTypes.OBTE,
                                        triggeringRecord: ObjectTemplate_Registration.TriggerSpecs,
                                        translationParams: translationParams,
                                        transl: ObjectTemplate<AObjectModification.NoneProperty>.TryCreateFromBinary)
                                    .CastExtendedList<ObjectTemplate<AObjectModification.NoneProperty>>();
                                return new ParseResult((int)GenericBaseForm_FieldIndex.ObjectTemplates, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ODTY = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)GenericBaseForm_FieldIndex.ODTY;
                }
                case RecordTypeInts.ODRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ODRT = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)GenericBaseForm_FieldIndex.ODRT;
                }
                case RecordTypeInts.OPDS:
                {
                    item.ObjectPlacementDefaults = Mutagen.Bethesda.Starfield.ObjectPlacementDefaults.CreateFromBinary(frame: frame);
                    return (int)GenericBaseForm_FieldIndex.ObjectPlacementDefaults;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)GenericBaseForm_FieldIndex.Components;
                }
                case RecordTypeInts.FLTR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Filter = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)GenericBaseForm_FieldIndex.Filter;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Template.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)GenericBaseForm_FieldIndex.Template;
                }
                case RecordTypeInts.STRV:
                {
                    item.STRVs.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.STRV),
                            transl: StringBinaryTranslation.Instance.Parse));
                    return (int)GenericBaseForm_FieldIndex.STRVs;
                }
                case RecordTypeInts.OBTF:
                case RecordTypeInts.OBTS:
                case RecordTypeInts.OBTE:
                {
                    item.ObjectTemplates = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectTemplate<AObjectModification.NoneProperty>>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.OBTE,
                            triggeringRecord: ObjectTemplate_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ObjectTemplate<AObjectModification.NoneProperty>.TryCreateFromBinary)
                        .CastExtendedList<ObjectTemplate<AObjectModification.NoneProperty>>();
                    return (int)GenericBaseForm_FieldIndex.ObjectTemplates;
                }
                case RecordTypeInts.STOP:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)GenericBaseForm_FieldIndex.ObjectTemplates)
                    {
                        frame.ReadSubrecord();
                        return new ParseResult(default(int?), nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)GenericBaseForm_FieldIndex.ObjectTemplates)
                    {
                        frame.ReadSubrecord();
                        return new ParseResult(default(int?), nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                frame.ReadSubrecord();
                                return new ParseResult(default(int?), nextRecordType);
                            case 1:
                                frame.ReadSubrecord();
                                return new ParseResult(default(int?), nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.NVNM:
                {
                    item.NavmeshGeometry = Mutagen.Bethesda.Starfield.NavmeshGeometry.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)GenericBaseForm_FieldIndex.NavmeshGeometry;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class GenericBaseFormBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class GenericBaseFormBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IGenericBaseFormGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GenericBaseForm_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GenericBaseForm_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GenericBaseFormCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GenericBaseFormSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GenericBaseFormCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => GenericBaseFormCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GenericBaseFormBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GenericBaseFormBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IGenericBaseForm);


        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region ODTY
        private int? _ODTYLocation;
        public Single? ODTY => _ODTYLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ODTYLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region ODRT
        private int? _ODRTLocation;
        public Single? ODRT => _ODRTLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ODRTLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region ObjectPlacementDefaults
        private RangeInt32? _ObjectPlacementDefaultsLocation;
        public IObjectPlacementDefaultsGetter? ObjectPlacementDefaults => _ObjectPlacementDefaultsLocation.HasValue ? ObjectPlacementDefaultsBinaryOverlay.ObjectPlacementDefaultsFactory(_recordData.Slice(_ObjectPlacementDefaultsLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Filter
        private int? _FilterLocation;
        public String? Filter => _FilterLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FilterLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Template
        private int? _TemplateLocation;
        public IFormLinkNullableGetter<IGenericBaseFormTemplateGetter> Template => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGenericBaseFormTemplateGetter>(_package, _recordData, _TemplateLocation);
        #endregion
        public IReadOnlyList<String> STRVs { get; private set; } = Array.Empty<String>();
        public IReadOnlyList<IObjectTemplateGetter<AObjectModification.NoneProperty>>? ObjectTemplates { get; private set; }
        #region NavmeshGeometry
        private int? _NavmeshGeometryLengthOverride;
        private RangeInt32? _NavmeshGeometryLocation;
        public INavmeshGeometryGetter? NavmeshGeometry => _NavmeshGeometryLocation.HasValue ? NavmeshGeometryBinaryOverlay.NavmeshGeometryFactory(_recordData.Slice(_NavmeshGeometryLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_NavmeshGeometryLengthOverride)) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected GenericBaseFormBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IGenericBaseFormGetter GenericBaseFormFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new GenericBaseFormBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IGenericBaseFormGetter GenericBaseFormFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return GenericBaseFormFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)GenericBaseForm_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)GenericBaseForm_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)GenericBaseForm_FieldIndex.ObjectBounds)
                    {
                        _NameLocation = (stream.Position - offset);
                        return new ParseResult((int)GenericBaseForm_FieldIndex.Name, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)GenericBaseForm_FieldIndex.STRVs)
                    {
                        this.ObjectTemplates = BinaryOverlayList.FactoryByCountPerItem<IObjectTemplateGetter<AObjectModification.NoneProperty>>(
                            stream: stream,
                            package: _package,
                            countLength: 4,
                            trigger: ObjectTemplate_Registration.TriggerSpecs,
                            countType: RecordTypes.OBTE,
                            translationParams: translationParams,
                            getter: (s, p, recConv) => ObjectTemplateBinaryOverlay<AObjectModification.NoneProperty>.ObjectTemplateFactory(new OverlayStream(s, p), p, recConv),
                            skipHeader: false);
                        return new ParseResult((int)GenericBaseForm_FieldIndex.ObjectTemplates, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                _NameLocation = (stream.Position - offset);
                                return new ParseResult((int)GenericBaseForm_FieldIndex.Name, type);
                            }
                            case 1:
                            {
                                this.ObjectTemplates = BinaryOverlayList.FactoryByCountPerItem<IObjectTemplateGetter<AObjectModification.NoneProperty>>(
                                    stream: stream,
                                    package: _package,
                                    countLength: 4,
                                    trigger: ObjectTemplate_Registration.TriggerSpecs,
                                    countType: RecordTypes.OBTE,
                                    translationParams: translationParams,
                                    getter: (s, p, recConv) => ObjectTemplateBinaryOverlay<AObjectModification.NoneProperty>.ObjectTemplateFactory(new OverlayStream(s, p), p, recConv),
                                    skipHeader: false);
                                return new ParseResult((int)GenericBaseForm_FieldIndex.ObjectTemplates, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.ODTY:
                {
                    _ODTYLocation = (stream.Position - offset);
                    return (int)GenericBaseForm_FieldIndex.ODTY;
                }
                case RecordTypeInts.ODRT:
                {
                    _ODRTLocation = (stream.Position - offset);
                    return (int)GenericBaseForm_FieldIndex.ODRT;
                }
                case RecordTypeInts.OPDS:
                {
                    _ObjectPlacementDefaultsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)GenericBaseForm_FieldIndex.ObjectPlacementDefaults;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)GenericBaseForm_FieldIndex.Components;
                }
                case RecordTypeInts.FLTR:
                {
                    _FilterLocation = (stream.Position - offset);
                    return (int)GenericBaseForm_FieldIndex.Filter;
                }
                case RecordTypeInts.ANAM:
                {
                    _TemplateLocation = (stream.Position - offset);
                    return (int)GenericBaseForm_FieldIndex.Template;
                }
                case RecordTypeInts.STRV:
                {
                    this.STRVs = BinaryOverlayList.FactoryByArray<String>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ProcessWholeToZString(p.MetaData.Constants.Subrecord(s).Content, encoding: p.MetaData.Encodings.NonTranslated),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.STRV,
                            skipHeader: false,
                            translationParams: translationParams));
                    return (int)GenericBaseForm_FieldIndex.STRVs;
                }
                case RecordTypeInts.OBTF:
                case RecordTypeInts.OBTS:
                case RecordTypeInts.OBTE:
                {
                    this.ObjectTemplates = BinaryOverlayList.FactoryByCountPerItem<IObjectTemplateGetter<AObjectModification.NoneProperty>>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: ObjectTemplate_Registration.TriggerSpecs,
                        countType: RecordTypes.OBTE,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ObjectTemplateBinaryOverlay<AObjectModification.NoneProperty>.ObjectTemplateFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)GenericBaseForm_FieldIndex.ObjectTemplates;
                }
                case RecordTypeInts.STOP:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)GenericBaseForm_FieldIndex.ObjectTemplates)
                    {
                        stream.ReadSubrecord();
                        return new ParseResult(default(int?), type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)GenericBaseForm_FieldIndex.ObjectTemplates)
                    {
                        stream.ReadSubrecord();
                        return new ParseResult(default(int?), type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                stream.ReadSubrecord();
                                return new ParseResult(default(int?), type);
                            }
                            case 1:
                            {
                                stream.ReadSubrecord();
                                return new ParseResult(default(int?), type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.NVNM:
                {
                    _NavmeshGeometryLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _NavmeshGeometryLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)GenericBaseForm_FieldIndex.NavmeshGeometry;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GenericBaseFormMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<GenericBaseForm>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IGenericBaseFormGetter rhs) return false;
            return ((GenericBaseFormCommon)((IGenericBaseFormGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGenericBaseFormGetter? obj)
        {
            return ((GenericBaseFormCommon)((IGenericBaseFormGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GenericBaseFormCommon)((IGenericBaseFormGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

