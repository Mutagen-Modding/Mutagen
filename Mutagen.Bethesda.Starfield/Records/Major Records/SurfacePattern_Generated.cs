/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class SurfacePattern :
        StarfieldMajorRecord,
        IEquatable<ISurfacePatternGetter>,
        ILoquiObjectSetter<SurfacePattern>,
        ISurfacePatternInternal
    {
        #region Ctor
        protected SurfacePattern()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> ISurfacePatternGetter.Components => _Components;
        #endregion

        #endregion
        #region SurfacePatternStyle
        private readonly IFormLink<ISurfacePatternStyleGetter> _SurfacePatternStyle = new FormLink<ISurfacePatternStyleGetter>();
        public IFormLink<ISurfacePatternStyleGetter> SurfacePatternStyle
        {
            get => _SurfacePatternStyle;
            set => _SurfacePatternStyle.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISurfacePatternStyleGetter> ISurfacePatternGetter.SurfacePatternStyle => this.SurfacePatternStyle;
        #endregion
        #region Blocks
        public static readonly P2Int BlocksFixedSize = new P2Int(16, 16);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? _Blocks;
        public IArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? Blocks
        {
            get => this._Blocks;
            set => this._Blocks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? ISurfacePatternGetter.Blocks => _Blocks;
        #endregion

        #endregion
        #region MasterBlocks
        public static readonly P2Int MasterBlocksFixedSize = new P2Int(16, 16);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? _MasterBlocks;
        public IArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? MasterBlocks
        {
            get => this._MasterBlocks;
            set => this._MasterBlocks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? ISurfacePatternGetter.MasterBlocks => _MasterBlocks;
        #endregion

        #endregion
        #region MasterBlockRotations
        public static readonly P2Int MasterBlockRotationsFixedSize = new P2Int(16, 16);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IArray2d<SByte>? _MasterBlockRotations;
        public IArray2d<SByte>? MasterBlockRotations
        {
            get => this._MasterBlockRotations;
            set => this._MasterBlockRotations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyArray2d<SByte>? ISurfacePatternGetter.MasterBlockRotations => _MasterBlockRotations;
        #endregion

        #endregion
        #region OverrideBlocks
        public static readonly P2Int OverrideBlocksFixedSize = new P2Int(16, 16);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? _OverrideBlocks;
        public IArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? OverrideBlocks
        {
            get => this._OverrideBlocks;
            set => this._OverrideBlocks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? ISurfacePatternGetter.OverrideBlocks => _OverrideBlocks;
        #endregion

        #endregion
        #region OverrideBlockRotations
        public static readonly P2Int OverrideBlockRotationsFixedSize = new P2Int(16, 16);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IArray2d<SByte>? _OverrideBlockRotations;
        public IArray2d<SByte>? OverrideBlockRotations
        {
            get => this._OverrideBlockRotations;
            set => this._OverrideBlockRotations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyArray2d<SByte>? ISurfacePatternGetter.OverrideBlockRotations => _OverrideBlockRotations;
        #endregion

        #endregion
        #region Worldspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IWorldspaceGetter>>? _Worldspaces;
        public ExtendedList<IFormLinkGetter<IWorldspaceGetter>>? Worldspaces
        {
            get => this._Worldspaces;
            set => this._Worldspaces = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IWorldspaceGetter>>? ISurfacePatternGetter.Worldspaces => _Worldspaces;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SurfacePatternMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.SurfacePatternStyle = initialValue;
                this.Blocks = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.MasterBlocks = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.MasterBlockRotations = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.OverrideBlocks = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.OverrideBlockRotations = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.Worldspaces = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem SurfacePatternStyle,
                TItem Blocks,
                TItem MasterBlocks,
                TItem MasterBlockRotations,
                TItem OverrideBlocks,
                TItem OverrideBlockRotations,
                TItem Worldspaces)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.SurfacePatternStyle = SurfacePatternStyle;
                this.Blocks = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(Blocks, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.MasterBlocks = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(MasterBlocks, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.MasterBlockRotations = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(MasterBlockRotations, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.OverrideBlocks = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(OverrideBlocks, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.OverrideBlockRotations = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(OverrideBlockRotations, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.Worldspaces = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Worldspaces, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem SurfacePatternStyle;
            public MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>? Blocks;
            public MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>? MasterBlocks;
            public MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>? MasterBlockRotations;
            public MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>? OverrideBlocks;
            public MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>? OverrideBlockRotations;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Worldspaces;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.SurfacePatternStyle, rhs.SurfacePatternStyle)) return false;
                if (!object.Equals(this.Blocks, rhs.Blocks)) return false;
                if (!object.Equals(this.MasterBlocks, rhs.MasterBlocks)) return false;
                if (!object.Equals(this.MasterBlockRotations, rhs.MasterBlockRotations)) return false;
                if (!object.Equals(this.OverrideBlocks, rhs.OverrideBlocks)) return false;
                if (!object.Equals(this.OverrideBlockRotations, rhs.OverrideBlockRotations)) return false;
                if (!object.Equals(this.Worldspaces, rhs.Worldspaces)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.SurfacePatternStyle);
                hash.Add(this.Blocks);
                hash.Add(this.MasterBlocks);
                hash.Add(this.MasterBlockRotations);
                hash.Add(this.OverrideBlocks);
                hash.Add(this.OverrideBlockRotations);
                hash.Add(this.Worldspaces);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SurfacePatternStyle)) return false;
                if (this.Blocks != null)
                {
                    if (!eval(this.Blocks.Overall)) return false;
                    if (this.Blocks.Specific != null)
                    {
                        foreach (var item in this.Blocks.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MasterBlocks != null)
                {
                    if (!eval(this.MasterBlocks.Overall)) return false;
                    if (this.MasterBlocks.Specific != null)
                    {
                        foreach (var item in this.MasterBlocks.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MasterBlockRotations != null)
                {
                    if (!eval(this.MasterBlockRotations.Overall)) return false;
                    if (this.MasterBlockRotations.Specific != null)
                    {
                        foreach (var item in this.MasterBlockRotations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.OverrideBlocks != null)
                {
                    if (!eval(this.OverrideBlocks.Overall)) return false;
                    if (this.OverrideBlocks.Specific != null)
                    {
                        foreach (var item in this.OverrideBlocks.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.OverrideBlockRotations != null)
                {
                    if (!eval(this.OverrideBlockRotations.Overall)) return false;
                    if (this.OverrideBlockRotations.Specific != null)
                    {
                        foreach (var item in this.OverrideBlockRotations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Worldspaces != null)
                {
                    if (!eval(this.Worldspaces.Overall)) return false;
                    if (this.Worldspaces.Specific != null)
                    {
                        foreach (var item in this.Worldspaces.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SurfacePatternStyle)) return true;
                if (this.Blocks != null)
                {
                    if (eval(this.Blocks.Overall)) return true;
                    if (this.Blocks.Specific != null)
                    {
                        foreach (var item in this.Blocks.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MasterBlocks != null)
                {
                    if (eval(this.MasterBlocks.Overall)) return true;
                    if (this.MasterBlocks.Specific != null)
                    {
                        foreach (var item in this.MasterBlocks.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MasterBlockRotations != null)
                {
                    if (eval(this.MasterBlockRotations.Overall)) return true;
                    if (this.MasterBlockRotations.Specific != null)
                    {
                        foreach (var item in this.MasterBlockRotations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.OverrideBlocks != null)
                {
                    if (eval(this.OverrideBlocks.Overall)) return true;
                    if (this.OverrideBlocks.Specific != null)
                    {
                        foreach (var item in this.OverrideBlocks.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.OverrideBlockRotations != null)
                {
                    if (eval(this.OverrideBlockRotations.Overall)) return true;
                    if (this.OverrideBlockRotations.Specific != null)
                    {
                        foreach (var item in this.OverrideBlockRotations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Worldspaces != null)
                {
                    if (eval(this.Worldspaces.Overall)) return true;
                    if (this.Worldspaces.Specific != null)
                    {
                        foreach (var item in this.Worldspaces.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SurfacePattern.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SurfacePatternStyle = eval(this.SurfacePatternStyle);
                if (Blocks != null)
                {
                    obj.Blocks = new MaskItem<R, IEnumerable<(P2Int Index, R Value)>?>(eval(this.Blocks.Overall), Enumerable.Empty<(P2Int Index, R Value)>());
                    if (Blocks.Specific != null)
                    {
                        var l = new List<(P2Int Index, R Item)>();
                        obj.Blocks.Specific = l;
                        foreach (var item in Blocks.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (MasterBlocks != null)
                {
                    obj.MasterBlocks = new MaskItem<R, IEnumerable<(P2Int Index, R Value)>?>(eval(this.MasterBlocks.Overall), Enumerable.Empty<(P2Int Index, R Value)>());
                    if (MasterBlocks.Specific != null)
                    {
                        var l = new List<(P2Int Index, R Item)>();
                        obj.MasterBlocks.Specific = l;
                        foreach (var item in MasterBlocks.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (MasterBlockRotations != null)
                {
                    obj.MasterBlockRotations = new MaskItem<R, IEnumerable<(P2Int Index, R Value)>?>(eval(this.MasterBlockRotations.Overall), Enumerable.Empty<(P2Int Index, R Value)>());
                    if (MasterBlockRotations.Specific != null)
                    {
                        var l = new List<(P2Int Index, R Item)>();
                        obj.MasterBlockRotations.Specific = l;
                        foreach (var item in MasterBlockRotations.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (OverrideBlocks != null)
                {
                    obj.OverrideBlocks = new MaskItem<R, IEnumerable<(P2Int Index, R Value)>?>(eval(this.OverrideBlocks.Overall), Enumerable.Empty<(P2Int Index, R Value)>());
                    if (OverrideBlocks.Specific != null)
                    {
                        var l = new List<(P2Int Index, R Item)>();
                        obj.OverrideBlocks.Specific = l;
                        foreach (var item in OverrideBlocks.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (OverrideBlockRotations != null)
                {
                    obj.OverrideBlockRotations = new MaskItem<R, IEnumerable<(P2Int Index, R Value)>?>(eval(this.OverrideBlockRotations.Overall), Enumerable.Empty<(P2Int Index, R Value)>());
                    if (OverrideBlockRotations.Specific != null)
                    {
                        var l = new List<(P2Int Index, R Item)>();
                        obj.OverrideBlockRotations.Specific = l;
                        foreach (var item in OverrideBlockRotations.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Worldspaces != null)
                {
                    obj.Worldspaces = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Worldspaces.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Worldspaces.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Worldspaces.Specific = l;
                        foreach (var item in Worldspaces.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SurfacePattern.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SurfacePattern.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SurfacePattern.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SurfacePatternStyle ?? true)
                    {
                        sb.AppendItem(SurfacePatternStyle, "SurfacePatternStyle");
                    }
                    if ((printMask?.Blocks?.Overall ?? true)
                        && Blocks is {} BlocksItem)
                    {
                        sb.AppendLine("Blocks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(BlocksItem.Overall);
                            if (BlocksItem.Specific != null)
                            {
                                foreach (var subItem in BlocksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MasterBlocks?.Overall ?? true)
                        && MasterBlocks is {} MasterBlocksItem)
                    {
                        sb.AppendLine("MasterBlocks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MasterBlocksItem.Overall);
                            if (MasterBlocksItem.Specific != null)
                            {
                                foreach (var subItem in MasterBlocksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MasterBlockRotations?.Overall ?? true)
                        && MasterBlockRotations is {} MasterBlockRotationsItem)
                    {
                        sb.AppendLine("MasterBlockRotations =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MasterBlockRotationsItem.Overall);
                            if (MasterBlockRotationsItem.Specific != null)
                            {
                                foreach (var subItem in MasterBlockRotationsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.OverrideBlocks?.Overall ?? true)
                        && OverrideBlocks is {} OverrideBlocksItem)
                    {
                        sb.AppendLine("OverrideBlocks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(OverrideBlocksItem.Overall);
                            if (OverrideBlocksItem.Specific != null)
                            {
                                foreach (var subItem in OverrideBlocksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.OverrideBlockRotations?.Overall ?? true)
                        && OverrideBlockRotations is {} OverrideBlockRotationsItem)
                    {
                        sb.AppendLine("OverrideBlockRotations =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(OverrideBlockRotationsItem.Overall);
                            if (OverrideBlockRotationsItem.Specific != null)
                            {
                                foreach (var subItem in OverrideBlockRotationsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Worldspaces?.Overall ?? true)
                        && Worldspaces is {} WorldspacesItem)
                    {
                        sb.AppendLine("Worldspaces =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(WorldspacesItem.Overall);
                            if (WorldspacesItem.Specific != null)
                            {
                                foreach (var subItem in WorldspacesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? SurfacePatternStyle;
            public MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>? Blocks;
            public MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>? MasterBlocks;
            public MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>? MasterBlockRotations;
            public MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>? OverrideBlocks;
            public MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>? OverrideBlockRotations;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Worldspaces;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SurfacePattern_FieldIndex enu = (SurfacePattern_FieldIndex)index;
                switch (enu)
                {
                    case SurfacePattern_FieldIndex.Components:
                        return Components;
                    case SurfacePattern_FieldIndex.SurfacePatternStyle:
                        return SurfacePatternStyle;
                    case SurfacePattern_FieldIndex.Blocks:
                        return Blocks;
                    case SurfacePattern_FieldIndex.MasterBlocks:
                        return MasterBlocks;
                    case SurfacePattern_FieldIndex.MasterBlockRotations:
                        return MasterBlockRotations;
                    case SurfacePattern_FieldIndex.OverrideBlocks:
                        return OverrideBlocks;
                    case SurfacePattern_FieldIndex.OverrideBlockRotations:
                        return OverrideBlockRotations;
                    case SurfacePattern_FieldIndex.Worldspaces:
                        return Worldspaces;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SurfacePattern_FieldIndex enu = (SurfacePattern_FieldIndex)index;
                switch (enu)
                {
                    case SurfacePattern_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case SurfacePattern_FieldIndex.SurfacePatternStyle:
                        this.SurfacePatternStyle = ex;
                        break;
                    case SurfacePattern_FieldIndex.Blocks:
                        this.Blocks = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(ex, null);
                        break;
                    case SurfacePattern_FieldIndex.MasterBlocks:
                        this.MasterBlocks = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(ex, null);
                        break;
                    case SurfacePattern_FieldIndex.MasterBlockRotations:
                        this.MasterBlockRotations = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(ex, null);
                        break;
                    case SurfacePattern_FieldIndex.OverrideBlocks:
                        this.OverrideBlocks = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(ex, null);
                        break;
                    case SurfacePattern_FieldIndex.OverrideBlockRotations:
                        this.OverrideBlockRotations = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(ex, null);
                        break;
                    case SurfacePattern_FieldIndex.Worldspaces:
                        this.Worldspaces = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SurfacePattern_FieldIndex enu = (SurfacePattern_FieldIndex)index;
                switch (enu)
                {
                    case SurfacePattern_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case SurfacePattern_FieldIndex.SurfacePatternStyle:
                        this.SurfacePatternStyle = (Exception?)obj;
                        break;
                    case SurfacePattern_FieldIndex.Blocks:
                        this.Blocks = (MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>)obj;
                        break;
                    case SurfacePattern_FieldIndex.MasterBlocks:
                        this.MasterBlocks = (MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>)obj;
                        break;
                    case SurfacePattern_FieldIndex.MasterBlockRotations:
                        this.MasterBlockRotations = (MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>)obj;
                        break;
                    case SurfacePattern_FieldIndex.OverrideBlocks:
                        this.OverrideBlocks = (MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>)obj;
                        break;
                    case SurfacePattern_FieldIndex.OverrideBlockRotations:
                        this.OverrideBlockRotations = (MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>)obj;
                        break;
                    case SurfacePattern_FieldIndex.Worldspaces:
                        this.Worldspaces = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (SurfacePatternStyle != null) return true;
                if (Blocks != null) return true;
                if (MasterBlocks != null) return true;
                if (MasterBlockRotations != null) return true;
                if (OverrideBlocks != null) return true;
                if (OverrideBlockRotations != null) return true;
                if (Worldspaces != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(SurfacePatternStyle, "SurfacePatternStyle");
                }
                if (Blocks is {} BlocksItem)
                {
                    sb.AppendLine("Blocks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(BlocksItem.Overall);
                        if (BlocksItem.Specific != null)
                        {
                            foreach (var subItem in BlocksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (MasterBlocks is {} MasterBlocksItem)
                {
                    sb.AppendLine("MasterBlocks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MasterBlocksItem.Overall);
                        if (MasterBlocksItem.Specific != null)
                        {
                            foreach (var subItem in MasterBlocksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (MasterBlockRotations is {} MasterBlockRotationsItem)
                {
                    sb.AppendLine("MasterBlockRotations =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MasterBlockRotationsItem.Overall);
                        if (MasterBlockRotationsItem.Specific != null)
                        {
                            foreach (var subItem in MasterBlockRotationsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (OverrideBlocks is {} OverrideBlocksItem)
                {
                    sb.AppendLine("OverrideBlocks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(OverrideBlocksItem.Overall);
                        if (OverrideBlocksItem.Specific != null)
                        {
                            foreach (var subItem in OverrideBlocksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (OverrideBlockRotations is {} OverrideBlockRotationsItem)
                {
                    sb.AppendLine("OverrideBlockRotations =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(OverrideBlockRotationsItem.Overall);
                        if (OverrideBlockRotationsItem.Specific != null)
                        {
                            foreach (var subItem in OverrideBlockRotationsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Worldspaces is {} WorldspacesItem)
                {
                    sb.AppendLine("Worldspaces =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(WorldspacesItem.Overall);
                        if (WorldspacesItem.Specific != null)
                        {
                            foreach (var subItem in WorldspacesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.SurfacePatternStyle = this.SurfacePatternStyle.Combine(rhs.SurfacePatternStyle);
                ret.Blocks = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Blocks?.Overall, rhs.Blocks?.Overall), Noggog.ExceptionExt.Combine(this.Blocks?.Specific, rhs.Blocks?.Specific));
                ret.MasterBlocks = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.MasterBlocks?.Overall, rhs.MasterBlocks?.Overall), Noggog.ExceptionExt.Combine(this.MasterBlocks?.Specific, rhs.MasterBlocks?.Specific));
                ret.MasterBlockRotations = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.MasterBlockRotations?.Overall, rhs.MasterBlockRotations?.Overall), Noggog.ExceptionExt.Combine(this.MasterBlockRotations?.Specific, rhs.MasterBlockRotations?.Specific));
                ret.OverrideBlocks = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.OverrideBlocks?.Overall, rhs.OverrideBlocks?.Overall), Noggog.ExceptionExt.Combine(this.OverrideBlocks?.Specific, rhs.OverrideBlocks?.Specific));
                ret.OverrideBlockRotations = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.OverrideBlockRotations?.Overall, rhs.OverrideBlockRotations?.Overall), Noggog.ExceptionExt.Combine(this.OverrideBlockRotations?.Specific, rhs.OverrideBlockRotations?.Specific));
                ret.Worldspaces = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Worldspaces?.Overall, rhs.Worldspaces?.Overall), Noggog.ExceptionExt.Combine(this.Worldspaces?.Specific, rhs.Worldspaces?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool SurfacePatternStyle;
            public bool Blocks;
            public bool MasterBlocks;
            public bool MasterBlockRotations;
            public bool OverrideBlocks;
            public bool OverrideBlockRotations;
            public bool Worldspaces;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.SurfacePatternStyle = defaultOn;
                this.Blocks = defaultOn;
                this.MasterBlocks = defaultOn;
                this.MasterBlockRotations = defaultOn;
                this.OverrideBlocks = defaultOn;
                this.OverrideBlockRotations = defaultOn;
                this.Worldspaces = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((SurfacePatternStyle, null));
                ret.Add((Blocks, null));
                ret.Add((MasterBlocks, null));
                ret.Add((MasterBlockRotations, null));
                ret.Add((OverrideBlocks, null));
                ret.Add((OverrideBlockRotations, null));
                ret.Add((Worldspaces, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SurfacePattern_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SurfacePatternCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SurfacePatternSetterCommon.Instance.RemapLinks(this, mapping);
        public SurfacePattern(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private SurfacePattern(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal SurfacePattern(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SurfacePattern(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public SurfacePattern(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<SurfacePattern>.ToString(this);
        }

        protected override Type LinkType => typeof(ISurfacePattern);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SurfacePatternCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => SurfacePatternSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => SurfacePatternSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => SurfacePatternSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISurfacePatternGetter rhs) return false;
            return ((SurfacePatternCommon)((ISurfacePatternGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISurfacePatternGetter? obj)
        {
            return ((SurfacePatternCommon)((ISurfacePatternGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SurfacePatternCommon)((ISurfacePatternGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SurfacePatternBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SurfacePatternBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SurfacePattern CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SurfacePattern();
            ((SurfacePatternSetterCommon)((ISurfacePatternGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SurfacePattern item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SurfacePatternSetterCommon)((ISurfacePatternGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SurfacePattern GetNew()
        {
            return new SurfacePattern();
        }

    }
    #endregion

    #region Interface
    public partial interface ISurfacePattern :
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<ISurfacePatternInternal>,
        IStarfieldMajorRecordInternal,
        ISurfacePatternGetter
    {
        new ExtendedList<AComponent> Components { get; }
        new IFormLink<ISurfacePatternStyleGetter> SurfacePatternStyle { get; set; }
        new IArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? Blocks { get; set; }
        new IArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? MasterBlocks { get; set; }
        new IArray2d<SByte>? MasterBlockRotations { get; set; }
        new IArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? OverrideBlocks { get; set; }
        new IArray2d<SByte>? OverrideBlockRotations { get; set; }
        new ExtendedList<IFormLinkGetter<IWorldspaceGetter>>? Worldspaces { get; set; }
    }

    public partial interface ISurfacePatternInternal :
        IStarfieldMajorRecordInternal,
        ISurfacePattern,
        ISurfacePatternGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.SFPT)]
    public partial interface ISurfacePatternGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISurfacePatternGetter>,
        IMapsToGetter<ISurfacePatternGetter>
    {
        static new ILoquiRegistration StaticRegistration => SurfacePattern_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        IFormLinkGetter<ISurfacePatternStyleGetter> SurfacePatternStyle { get; }
        IReadOnlyArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? Blocks { get; }
        IReadOnlyArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? MasterBlocks { get; }
        IReadOnlyArray2d<SByte>? MasterBlockRotations { get; }
        IReadOnlyArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? OverrideBlocks { get; }
        IReadOnlyArray2d<SByte>? OverrideBlockRotations { get; }
        IReadOnlyList<IFormLinkGetter<IWorldspaceGetter>>? Worldspaces { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SurfacePatternMixIn
    {
        public static void Clear(this ISurfacePatternInternal item)
        {
            ((SurfacePatternSetterCommon)((ISurfacePatternGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SurfacePattern.Mask<bool> GetEqualsMask(
            this ISurfacePatternGetter item,
            ISurfacePatternGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SurfacePatternCommon)((ISurfacePatternGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISurfacePatternGetter item,
            string? name = null,
            SurfacePattern.Mask<bool>? printMask = null)
        {
            return ((SurfacePatternCommon)((ISurfacePatternGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISurfacePatternGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SurfacePattern.Mask<bool>? printMask = null)
        {
            ((SurfacePatternCommon)((ISurfacePatternGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISurfacePatternGetter item,
            ISurfacePatternGetter rhs,
            SurfacePattern.TranslationMask? equalsMask = null)
        {
            return ((SurfacePatternCommon)((ISurfacePatternGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISurfacePatternInternal lhs,
            ISurfacePatternGetter rhs,
            out SurfacePattern.ErrorMask errorMask,
            SurfacePattern.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SurfacePatternSetterTranslationCommon)((ISurfacePatternGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SurfacePattern.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISurfacePatternInternal lhs,
            ISurfacePatternGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SurfacePatternSetterTranslationCommon)((ISurfacePatternGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SurfacePattern DeepCopy(
            this ISurfacePatternGetter item,
            SurfacePattern.TranslationMask? copyMask = null)
        {
            return ((SurfacePatternSetterTranslationCommon)((ISurfacePatternGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SurfacePattern DeepCopy(
            this ISurfacePatternGetter item,
            out SurfacePattern.ErrorMask errorMask,
            SurfacePattern.TranslationMask? copyMask = null)
        {
            return ((SurfacePatternSetterTranslationCommon)((ISurfacePatternGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SurfacePattern DeepCopy(
            this ISurfacePatternGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SurfacePatternSetterTranslationCommon)((ISurfacePatternGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SurfacePattern Duplicate(
            this ISurfacePatternGetter item,
            FormKey formKey,
            SurfacePattern.TranslationMask? copyMask = null)
        {
            return ((SurfacePatternCommon)((ISurfacePatternGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static SurfacePattern Duplicate(
            this ISurfacePatternGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SurfacePatternCommon)((ISurfacePatternGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISurfacePatternInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SurfacePatternSetterCommon)((ISurfacePatternGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum SurfacePattern_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        SurfacePatternStyle = 8,
        Blocks = 9,
        MasterBlocks = 10,
        MasterBlockRotations = 11,
        OverrideBlocks = 12,
        OverrideBlockRotations = 13,
        Worldspaces = 14,
    }
    #endregion

    #region Registration
    internal partial class SurfacePattern_Registration : ILoquiRegistration
    {
        public static readonly SurfacePattern_Registration Instance = new SurfacePattern_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(SurfacePattern.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SurfacePattern.ErrorMask);

        public static readonly Type ClassType = typeof(SurfacePattern);

        public static readonly Type GetterType = typeof(ISurfacePatternGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISurfacePattern);

        public static readonly Type? InternalSetterType = typeof(ISurfacePatternInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.SurfacePattern";

        public const string Name = "SurfacePattern";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SFPT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SFPT);
            var all = RecordCollection.Factory(
                RecordTypes.SFPT,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.CNAM,
                RecordTypes.BNAM,
                RecordTypes.FNAM,
                RecordTypes.GNAM,
                RecordTypes.EFRM,
                RecordTypes.EORI,
                RecordTypes.DNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SurfacePatternBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SurfacePatternSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly SurfacePatternSetterCommon Instance = new SurfacePatternSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISurfacePatternInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.SurfacePatternStyle.Clear();
            item.Blocks = null;
            item.MasterBlocks = null;
            item.MasterBlockRotations = null;
            item.OverrideBlocks = null;
            item.OverrideBlockRotations = null;
            item.Worldspaces = null;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ISurfacePatternInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISurfacePatternInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISurfacePattern obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.SurfacePatternStyle.Relink(mapping);
            obj.Blocks?.RemapLinks(mapping);
            obj.MasterBlocks?.RemapLinks(mapping);
            obj.OverrideBlocks?.RemapLinks(mapping);
            obj.Worldspaces?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ISurfacePattern obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ISurfacePattern obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISurfacePatternInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISurfacePatternInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SurfacePatternBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SurfacePatternBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SurfacePattern)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SurfacePattern)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SurfacePatternCommon : StarfieldMajorRecordCommon
    {
        public new static readonly SurfacePatternCommon Instance = new SurfacePatternCommon();

        public SurfacePattern.Mask<bool> GetEqualsMask(
            ISurfacePatternGetter item,
            ISurfacePatternGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SurfacePattern.Mask<bool>(false);
            ((SurfacePatternCommon)((ISurfacePatternGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISurfacePatternGetter item,
            ISurfacePatternGetter rhs,
            SurfacePattern.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SurfacePatternStyle = item.SurfacePatternStyle.Equals(rhs.SurfacePatternStyle);
            ret.Blocks = item.Blocks.Array2dEqualsHelper(
                rhs.Blocks,
                (l, r) => object.Equals(l, r),
                include);
            ret.MasterBlocks = item.MasterBlocks.Array2dEqualsHelper(
                rhs.MasterBlocks,
                (l, r) => object.Equals(l, r),
                include);
            ret.MasterBlockRotations = item.MasterBlockRotations.Array2dEqualsHelper(
                rhs.MasterBlockRotations,
                (l, r) => l == r,
                include);
            ret.OverrideBlocks = item.OverrideBlocks.Array2dEqualsHelper(
                rhs.OverrideBlocks,
                (l, r) => object.Equals(l, r),
                include);
            ret.OverrideBlockRotations = item.OverrideBlockRotations.Array2dEqualsHelper(
                rhs.OverrideBlockRotations,
                (l, r) => l == r,
                include);
            ret.Worldspaces = item.Worldspaces.CollectionEqualsHelper(
                rhs.Worldspaces,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISurfacePatternGetter item,
            string? name = null,
            SurfacePattern.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISurfacePatternGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SurfacePattern.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SurfacePattern =>");
            }
            else
            {
                sb.AppendLine($"{name} (SurfacePattern) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISurfacePatternGetter item,
            StructuredStringBuilder sb,
            SurfacePattern.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.SurfacePatternStyle ?? true)
            {
                sb.AppendItem(item.SurfacePatternStyle.FormKey, "SurfacePatternStyle");
            }
            if ((printMask?.Blocks?.Overall ?? true)
                && item.Blocks is {} BlocksItem)
            {
                sb.AppendLine("Blocks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in BlocksItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.MasterBlocks?.Overall ?? true)
                && item.MasterBlocks is {} MasterBlocksItem)
            {
                sb.AppendLine("MasterBlocks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MasterBlocksItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.MasterBlockRotations?.Overall ?? true)
                && item.MasterBlockRotations is {} MasterBlockRotationsItem)
            {
                sb.AppendLine("MasterBlockRotations =>");
                using (sb.Brace())
                {
                    foreach (var subItem in MasterBlockRotationsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value);
                        }
                    }
                }
            }
            if ((printMask?.OverrideBlocks?.Overall ?? true)
                && item.OverrideBlocks is {} OverrideBlocksItem)
            {
                sb.AppendLine("OverrideBlocks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in OverrideBlocksItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.OverrideBlockRotations?.Overall ?? true)
                && item.OverrideBlockRotations is {} OverrideBlockRotationsItem)
            {
                sb.AppendLine("OverrideBlockRotations =>");
                using (sb.Brace())
                {
                    foreach (var subItem in OverrideBlockRotationsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value);
                        }
                    }
                }
            }
            if ((printMask?.Worldspaces?.Overall ?? true)
                && item.Worldspaces is {} WorldspacesItem)
            {
                sb.AppendLine("Worldspaces =>");
                using (sb.Brace())
                {
                    foreach (var subItem in WorldspacesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
        }
        
        public static SurfacePattern_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SurfacePattern_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (SurfacePattern_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (SurfacePattern_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (SurfacePattern_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (SurfacePattern_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (SurfacePattern_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (SurfacePattern_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new SurfacePattern_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SurfacePattern_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SurfacePattern_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SurfacePattern_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SurfacePattern_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISurfacePatternGetter? lhs,
            ISurfacePatternGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SurfacePattern_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.SurfacePatternStyle) ?? true))
            {
                if (!lhs.SurfacePatternStyle.Equals(rhs.SurfacePatternStyle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.Blocks) ?? true))
            {
                if (!lhs.Blocks.SequenceEqualNullable(rhs.Blocks)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.MasterBlocks) ?? true))
            {
                if (!lhs.MasterBlocks.SequenceEqualNullable(rhs.MasterBlocks)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.MasterBlockRotations) ?? true))
            {
                if (!lhs.MasterBlockRotations.SequenceEqualNullable(rhs.MasterBlockRotations)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.OverrideBlocks) ?? true))
            {
                if (!lhs.OverrideBlocks.SequenceEqualNullable(rhs.OverrideBlocks)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.OverrideBlockRotations) ?? true))
            {
                if (!lhs.OverrideBlockRotations.SequenceEqualNullable(rhs.OverrideBlockRotations)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.Worldspaces) ?? true))
            {
                if (!lhs.Worldspaces.SequenceEqualNullable(rhs.Worldspaces)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISurfacePatternGetter?)lhs,
                rhs: rhs as ISurfacePatternGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISurfacePatternGetter?)lhs,
                rhs: rhs as ISurfacePatternGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISurfacePatternGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            hash.Add(item.SurfacePatternStyle);
            hash.Add(item.Blocks);
            hash.Add(item.MasterBlocks);
            hash.Add(item.MasterBlockRotations);
            hash.Add(item.OverrideBlocks);
            hash.Add(item.OverrideBlockRotations);
            hash.Add(item.Worldspaces);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ISurfacePatternGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISurfacePatternGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SurfacePattern.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISurfacePatternGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield return FormLinkInformation.Factory(obj.SurfacePatternStyle);
            if (obj.Blocks is {} BlocksItem)
            {
                foreach (var item in BlocksItem)
                {
                    yield return FormLinkInformation.Factory(item.Value);
                }
            }
            if (obj.MasterBlocks is {} MasterBlocksItem)
            {
                foreach (var item in MasterBlocksItem)
                {
                    yield return FormLinkInformation.Factory(item.Value);
                }
            }
            if (obj.OverrideBlocks is {} OverrideBlocksItem)
            {
                foreach (var item in OverrideBlocksItem)
                {
                    yield return FormLinkInformation.Factory(item.Value);
                }
            }
            if (obj.Worldspaces is {} WorldspacesItem)
            {
                foreach (var item in WorldspacesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ISurfacePatternGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public SurfacePattern Duplicate(
            ISurfacePatternGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SurfacePattern(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISurfacePatternGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISurfacePatternGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SurfacePatternSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly SurfacePatternSetterTranslationCommon Instance = new SurfacePatternSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISurfacePatternInternal item,
            ISurfacePatternGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISurfacePattern item,
            ISurfacePatternGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)SurfacePattern_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.SurfacePatternStyle) ?? true))
            {
                item.SurfacePatternStyle.SetTo(rhs.SurfacePatternStyle.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.Blocks) ?? true))
            {
                errorMask?.PushIndex((int)SurfacePattern_FieldIndex.Blocks);
                try
                {
                    if ((rhs.Blocks != null))
                    {
                        item.Blocks = 
                            Array2dCopyHelper.DeepCopy(rhs.Blocks, b => (IFormLinkGetter<ISurfaceBlockGetter>)new FormLink<ISurfaceBlockGetter>(b.Value.FormKey));
                    }
                    else
                    {
                        item.Blocks = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.MasterBlocks) ?? true))
            {
                errorMask?.PushIndex((int)SurfacePattern_FieldIndex.MasterBlocks);
                try
                {
                    if ((rhs.MasterBlocks != null))
                    {
                        item.MasterBlocks = 
                            Array2dCopyHelper.DeepCopy(rhs.MasterBlocks, b => (IFormLinkGetter<ISurfaceBlockGetter>)new FormLink<ISurfaceBlockGetter>(b.Value.FormKey));
                    }
                    else
                    {
                        item.MasterBlocks = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.MasterBlockRotations) ?? true))
            {
                errorMask?.PushIndex((int)SurfacePattern_FieldIndex.MasterBlockRotations);
                try
                {
                    if ((rhs.MasterBlockRotations != null))
                    {
                        item.MasterBlockRotations = 
                            rhs.MasterBlockRotations.ShallowClone();
                    }
                    else
                    {
                        item.MasterBlockRotations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.OverrideBlocks) ?? true))
            {
                errorMask?.PushIndex((int)SurfacePattern_FieldIndex.OverrideBlocks);
                try
                {
                    if ((rhs.OverrideBlocks != null))
                    {
                        item.OverrideBlocks = 
                            Array2dCopyHelper.DeepCopy(rhs.OverrideBlocks, b => (IFormLinkGetter<ISurfaceBlockGetter>)new FormLink<ISurfaceBlockGetter>(b.Value.FormKey));
                    }
                    else
                    {
                        item.OverrideBlocks = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.OverrideBlockRotations) ?? true))
            {
                errorMask?.PushIndex((int)SurfacePattern_FieldIndex.OverrideBlockRotations);
                try
                {
                    if ((rhs.OverrideBlockRotations != null))
                    {
                        item.OverrideBlockRotations = 
                            rhs.OverrideBlockRotations.ShallowClone();
                    }
                    else
                    {
                        item.OverrideBlockRotations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfacePattern_FieldIndex.Worldspaces) ?? true))
            {
                errorMask?.PushIndex((int)SurfacePattern_FieldIndex.Worldspaces);
                try
                {
                    if ((rhs.Worldspaces != null))
                    {
                        item.Worldspaces = 
                            rhs.Worldspaces
                                .Select(b => (IFormLinkGetter<IWorldspaceGetter>)new FormLink<IWorldspaceGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IWorldspaceGetter>>();
                    }
                    else
                    {
                        item.Worldspaces = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISurfacePattern item,
            ISurfacePatternGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISurfacePatternInternal)item,
                rhs: (ISurfacePatternGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISurfacePattern)item,
                rhs: (ISurfacePatternGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISurfacePatternInternal)item,
                rhs: (ISurfacePatternGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISurfacePattern)item,
                rhs: (ISurfacePatternGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SurfacePattern DeepCopy(
            ISurfacePatternGetter item,
            SurfacePattern.TranslationMask? copyMask = null)
        {
            SurfacePattern ret = (SurfacePattern)((SurfacePatternCommon)((ISurfacePatternGetter)item).CommonInstance()!).GetNew();
            ((SurfacePatternSetterTranslationCommon)((ISurfacePatternGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SurfacePattern DeepCopy(
            ISurfacePatternGetter item,
            out SurfacePattern.ErrorMask errorMask,
            SurfacePattern.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SurfacePattern ret = (SurfacePattern)((SurfacePatternCommon)((ISurfacePatternGetter)item).CommonInstance()!).GetNew();
            ((SurfacePatternSetterTranslationCommon)((ISurfacePatternGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SurfacePattern.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SurfacePattern DeepCopy(
            ISurfacePatternGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SurfacePattern ret = (SurfacePattern)((SurfacePatternCommon)((ISurfacePatternGetter)item).CommonInstance()!).GetNew();
            ((SurfacePatternSetterTranslationCommon)((ISurfacePatternGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class SurfacePattern
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SurfacePattern_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SurfacePattern_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SurfacePatternCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SurfacePatternSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SurfacePatternSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SurfacePatternBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SurfacePatternBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISurfacePatternGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.SurfacePatternStyle,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<IFormLinkGetter<ISurfaceBlockGetter>>.Instance.Write(
                writer: writer,
                items: item.Blocks,
                recordType: translationParams.ConvertToCustom(RecordTypes.BNAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISurfaceBlockGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<IFormLinkGetter<ISurfaceBlockGetter>>.Instance.Write(
                writer: writer,
                items: item.MasterBlocks,
                recordType: translationParams.ConvertToCustom(RecordTypes.FNAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISurfaceBlockGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<SByte>.Instance.Write(
                writer: writer,
                items: item.MasterBlockRotations,
                recordType: translationParams.ConvertToCustom(RecordTypes.GNAM),
                transl: SByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<IFormLinkGetter<ISurfaceBlockGetter>>.Instance.Write(
                writer: writer,
                items: item.OverrideBlocks,
                recordType: translationParams.ConvertToCustom(RecordTypes.EFRM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISurfaceBlockGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<SByte>.Instance.Write(
                writer: writer,
                items: item.OverrideBlockRotations,
                recordType: translationParams.ConvertToCustom(RecordTypes.EORI),
                transl: SByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IWorldspaceGetter>>.Instance.Write(
                writer: writer,
                items: item.Worldspaces,
                recordType: translationParams.ConvertToCustom(RecordTypes.DNAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IWorldspaceGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
        }

        public void Write(
            MutagenWriter writer,
            ISurfacePatternGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SFPT,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISurfacePatternGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISurfacePatternGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISurfacePatternGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SurfacePatternBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly SurfacePatternBinaryCreateTranslation Instance = new SurfacePatternBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SFPT;
        public static ParseResult FillBinaryRecordTypes(
            ISurfacePatternInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)SurfacePattern_FieldIndex.Components;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SurfacePatternStyle.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SurfacePattern_FieldIndex.SurfacePatternStyle;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Blocks = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<IFormLinkGetter<ISurfaceBlockGetter>>.Instance.Parse(
                            reader: frame,
                            size: SurfacePattern.BlocksFixedSize,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        ;
                    return (int)SurfacePattern_FieldIndex.Blocks;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MasterBlocks = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<IFormLinkGetter<ISurfaceBlockGetter>>.Instance.Parse(
                            reader: frame,
                            size: SurfacePattern.MasterBlocksFixedSize,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        ;
                    return (int)SurfacePattern_FieldIndex.MasterBlocks;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MasterBlockRotations = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<SByte>.Instance.Parse(
                            reader: frame,
                            size: SurfacePattern.MasterBlockRotationsFixedSize,
                            transl: SByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse)
                        ;
                    return (int)SurfacePattern_FieldIndex.MasterBlockRotations;
                }
                case RecordTypeInts.EFRM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OverrideBlocks = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<IFormLinkGetter<ISurfaceBlockGetter>>.Instance.Parse(
                            reader: frame,
                            size: SurfacePattern.OverrideBlocksFixedSize,
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        ;
                    return (int)SurfacePattern_FieldIndex.OverrideBlocks;
                }
                case RecordTypeInts.EORI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OverrideBlockRotations = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<SByte>.Instance.Parse(
                            reader: frame,
                            size: SurfacePattern.OverrideBlockRotationsFixedSize,
                            transl: SByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse)
                        ;
                    return (int)SurfacePattern_FieldIndex.OverrideBlockRotations;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Worldspaces = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IWorldspaceGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IWorldspaceGetter>>();
                    return (int)SurfacePattern_FieldIndex.Worldspaces;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SurfacePatternBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SurfacePatternBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ISurfacePatternGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SurfacePattern_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SurfacePattern_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SurfacePatternCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SurfacePatternSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SurfacePatternCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SurfacePatternCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SurfacePatternBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SurfacePatternBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISurfacePattern);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region SurfacePatternStyle
        private int? _SurfacePatternStyleLocation;
        public IFormLinkGetter<ISurfacePatternStyleGetter> SurfacePatternStyle => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISurfacePatternStyleGetter>(_package, _recordData, _SurfacePatternStyleLocation);
        #endregion
        public IReadOnlyArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? Blocks { get; private set; }
        public IReadOnlyArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? MasterBlocks { get; private set; }
        public IReadOnlyArray2d<SByte>? MasterBlockRotations { get; private set; }
        public IReadOnlyArray2d<IFormLinkGetter<ISurfaceBlockGetter>>? OverrideBlocks { get; private set; }
        public IReadOnlyArray2d<SByte>? OverrideBlockRotations { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IWorldspaceGetter>>? Worldspaces { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SurfacePatternBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISurfacePatternGetter SurfacePatternFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SurfacePatternBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISurfacePatternGetter SurfacePatternFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SurfacePatternFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)SurfacePattern_FieldIndex.Components;
                }
                case RecordTypeInts.CNAM:
                {
                    _SurfacePatternStyleLocation = (stream.Position - offset);
                    return (int)SurfacePattern_FieldIndex.SurfacePatternStyle;
                }
                case RecordTypeInts.BNAM:
                {
                    var subMeta = stream.ReadSubrecordHeader();
                    this.Blocks = BinaryOverlayArray2d.Factory<IFormLinkGetter<ISurfaceBlockGetter>>(
                        mem: stream.RemainingMemory.Slice(0, subMeta.ContentLength),
                        package: _package,
                        itemLength: 4,
                        size: SurfacePattern.BlocksFixedSize,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISurfaceBlockGetter>(p, s));
                    return (int)SurfacePattern_FieldIndex.Blocks;
                }
                case RecordTypeInts.FNAM:
                {
                    var subMeta = stream.ReadSubrecordHeader();
                    this.MasterBlocks = BinaryOverlayArray2d.Factory<IFormLinkGetter<ISurfaceBlockGetter>>(
                        mem: stream.RemainingMemory.Slice(0, subMeta.ContentLength),
                        package: _package,
                        itemLength: 4,
                        size: SurfacePattern.MasterBlocksFixedSize,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISurfaceBlockGetter>(p, s));
                    return (int)SurfacePattern_FieldIndex.MasterBlocks;
                }
                case RecordTypeInts.GNAM:
                {
                    var subMeta = stream.ReadSubrecordHeader();
                    this.MasterBlockRotations = BinaryOverlayArray2d.Factory<SByte>(
                        mem: stream.RemainingMemory.Slice(0, subMeta.ContentLength),
                        package: _package,
                        itemLength: 1,
                        size: SurfacePattern.MasterBlockRotationsFixedSize,
                        getter: (s, p) => (sbyte)s[0]);
                    return (int)SurfacePattern_FieldIndex.MasterBlockRotations;
                }
                case RecordTypeInts.EFRM:
                {
                    var subMeta = stream.ReadSubrecordHeader();
                    this.OverrideBlocks = BinaryOverlayArray2d.Factory<IFormLinkGetter<ISurfaceBlockGetter>>(
                        mem: stream.RemainingMemory.Slice(0, subMeta.ContentLength),
                        package: _package,
                        itemLength: 4,
                        size: SurfacePattern.OverrideBlocksFixedSize,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISurfaceBlockGetter>(p, s));
                    return (int)SurfacePattern_FieldIndex.OverrideBlocks;
                }
                case RecordTypeInts.EORI:
                {
                    var subMeta = stream.ReadSubrecordHeader();
                    this.OverrideBlockRotations = BinaryOverlayArray2d.Factory<SByte>(
                        mem: stream.RemainingMemory.Slice(0, subMeta.ContentLength),
                        package: _package,
                        itemLength: 1,
                        size: SurfacePattern.OverrideBlockRotationsFixedSize,
                        getter: (s, p) => (sbyte)s[0]);
                    return (int)SurfacePattern_FieldIndex.OverrideBlockRotations;
                }
                case RecordTypeInts.DNAM:
                {
                    this.Worldspaces = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IWorldspaceGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IWorldspaceGetter>(p, s));
                    return (int)SurfacePattern_FieldIndex.Worldspaces;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SurfacePatternMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<SurfacePattern>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISurfacePatternGetter rhs) return false;
            return ((SurfacePatternCommon)((ISurfacePatternGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISurfacePatternGetter? obj)
        {
            return ((SurfacePatternCommon)((ISurfacePatternGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SurfacePatternCommon)((ISurfacePatternGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

