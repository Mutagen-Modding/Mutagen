/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class QuestLogEntry :
        IEquatable<IQuestLogEntryGetter>,
        ILoquiObjectSetter<QuestLogEntry>,
        IQuestLogEntry
    {
        #region Ctor
        public QuestLogEntry()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public QuestLogEntry.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuestLogEntry.Flag? IQuestLogEntryGetter.Flags => this.Flags;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IQuestLogEntryGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Note
        public String? Note { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IQuestLogEntryGetter.Note => this.Note;
        #endregion
        #region ScriptFlagComment
        public String? ScriptFlagComment { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IQuestLogEntryGetter.ScriptFlagComment => this.ScriptFlagComment;
        #endregion
        #region Entry
        public TranslatedString? Entry { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IQuestLogEntryGetter.Entry => this.Entry;
        #endregion
        #region StageCompleteDatas
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestStageCompleteData> _StageCompleteDatas = new ExtendedList<QuestStageCompleteData>();
        public ExtendedList<QuestStageCompleteData> StageCompleteDatas
        {
            get => this._StageCompleteDatas;
            init => this._StageCompleteDatas = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestStageCompleteDataGetter> IQuestLogEntryGetter.StageCompleteDatas => _StageCompleteDatas;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestLogEntryMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IQuestLogEntryGetter rhs) return false;
            return ((QuestLogEntryCommon)((IQuestLogEntryGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestLogEntryGetter? obj)
        {
            return ((QuestLogEntryCommon)((IQuestLogEntryGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestLogEntryCommon)((IQuestLogEntryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Flags = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Note = initialValue;
                this.ScriptFlagComment = initialValue;
                this.Entry = initialValue;
                this.StageCompleteDatas = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestStageCompleteData.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestStageCompleteData.Mask<TItem>?>>());
            }

            public Mask(
                TItem Flags,
                TItem Conditions,
                TItem Note,
                TItem ScriptFlagComment,
                TItem Entry,
                TItem StageCompleteDatas)
            {
                this.Flags = Flags;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Note = Note;
                this.ScriptFlagComment = ScriptFlagComment;
                this.Entry = Entry;
                this.StageCompleteDatas = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestStageCompleteData.Mask<TItem>?>>?>(StageCompleteDatas, Enumerable.Empty<MaskItemIndexed<TItem, QuestStageCompleteData.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem Note;
            public TItem ScriptFlagComment;
            public TItem Entry;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestStageCompleteData.Mask<TItem>?>>?>? StageCompleteDatas;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Note, rhs.Note)) return false;
                if (!object.Equals(this.ScriptFlagComment, rhs.ScriptFlagComment)) return false;
                if (!object.Equals(this.Entry, rhs.Entry)) return false;
                if (!object.Equals(this.StageCompleteDatas, rhs.StageCompleteDatas)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.Conditions);
                hash.Add(this.Note);
                hash.Add(this.ScriptFlagComment);
                hash.Add(this.Entry);
                hash.Add(this.StageCompleteDatas);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Flags)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Note)) return false;
                if (!eval(this.ScriptFlagComment)) return false;
                if (!eval(this.Entry)) return false;
                if (this.StageCompleteDatas != null)
                {
                    if (!eval(this.StageCompleteDatas.Overall)) return false;
                    if (this.StageCompleteDatas.Specific != null)
                    {
                        foreach (var item in this.StageCompleteDatas.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Flags)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Note)) return true;
                if (eval(this.ScriptFlagComment)) return true;
                if (eval(this.Entry)) return true;
                if (this.StageCompleteDatas != null)
                {
                    if (eval(this.StageCompleteDatas.Overall)) return true;
                    if (this.StageCompleteDatas.Specific != null)
                    {
                        foreach (var item in this.StageCompleteDatas.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new QuestLogEntry.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Flags = eval(this.Flags);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Note = eval(this.Note);
                obj.ScriptFlagComment = eval(this.ScriptFlagComment);
                obj.Entry = eval(this.Entry);
                if (StageCompleteDatas != null)
                {
                    obj.StageCompleteDatas = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestStageCompleteData.Mask<R>?>>?>(eval(this.StageCompleteDatas.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestStageCompleteData.Mask<R>?>>());
                    if (StageCompleteDatas.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestStageCompleteData.Mask<R>?>>();
                        obj.StageCompleteDatas.Specific = l;
                        foreach (var item in StageCompleteDatas.Specific)
                        {
                            MaskItemIndexed<R, QuestStageCompleteData.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, QuestStageCompleteData.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(QuestLogEntry.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, QuestLogEntry.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(QuestLogEntry.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Note ?? true)
                    {
                        sb.AppendItem(Note, "Note");
                    }
                    if (printMask?.ScriptFlagComment ?? true)
                    {
                        sb.AppendItem(ScriptFlagComment, "ScriptFlagComment");
                    }
                    if (printMask?.Entry ?? true)
                    {
                        sb.AppendItem(Entry, "Entry");
                    }
                    if ((printMask?.StageCompleteDatas?.Overall ?? true)
                        && StageCompleteDatas is {} StageCompleteDatasItem)
                    {
                        sb.AppendLine("StageCompleteDatas =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(StageCompleteDatasItem.Overall);
                            if (StageCompleteDatasItem.Specific != null)
                            {
                                foreach (var subItem in StageCompleteDatasItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? Note;
            public Exception? ScriptFlagComment;
            public Exception? Entry;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStageCompleteData.ErrorMask?>>?>? StageCompleteDatas;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                QuestLogEntry_FieldIndex enu = (QuestLogEntry_FieldIndex)index;
                switch (enu)
                {
                    case QuestLogEntry_FieldIndex.Flags:
                        return Flags;
                    case QuestLogEntry_FieldIndex.Conditions:
                        return Conditions;
                    case QuestLogEntry_FieldIndex.Note:
                        return Note;
                    case QuestLogEntry_FieldIndex.ScriptFlagComment:
                        return ScriptFlagComment;
                    case QuestLogEntry_FieldIndex.Entry:
                        return Entry;
                    case QuestLogEntry_FieldIndex.StageCompleteDatas:
                        return StageCompleteDatas;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                QuestLogEntry_FieldIndex enu = (QuestLogEntry_FieldIndex)index;
                switch (enu)
                {
                    case QuestLogEntry_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case QuestLogEntry_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case QuestLogEntry_FieldIndex.Note:
                        this.Note = ex;
                        break;
                    case QuestLogEntry_FieldIndex.ScriptFlagComment:
                        this.ScriptFlagComment = ex;
                        break;
                    case QuestLogEntry_FieldIndex.Entry:
                        this.Entry = ex;
                        break;
                    case QuestLogEntry_FieldIndex.StageCompleteDatas:
                        this.StageCompleteDatas = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStageCompleteData.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                QuestLogEntry_FieldIndex enu = (QuestLogEntry_FieldIndex)index;
                switch (enu)
                {
                    case QuestLogEntry_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case QuestLogEntry_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case QuestLogEntry_FieldIndex.Note:
                        this.Note = (Exception?)obj;
                        break;
                    case QuestLogEntry_FieldIndex.ScriptFlagComment:
                        this.ScriptFlagComment = (Exception?)obj;
                        break;
                    case QuestLogEntry_FieldIndex.Entry:
                        this.Entry = (Exception?)obj;
                        break;
                    case QuestLogEntry_FieldIndex.StageCompleteDatas:
                        this.StageCompleteDatas = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStageCompleteData.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (Conditions != null) return true;
                if (Note != null) return true;
                if (ScriptFlagComment != null) return true;
                if (Entry != null) return true;
                if (StageCompleteDatas != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Flags, "Flags");
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Note, "Note");
                }
                {
                    sb.AppendItem(ScriptFlagComment, "ScriptFlagComment");
                }
                {
                    sb.AppendItem(Entry, "Entry");
                }
                if (StageCompleteDatas is {} StageCompleteDatasItem)
                {
                    sb.AppendLine("StageCompleteDatas =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(StageCompleteDatasItem.Overall);
                        if (StageCompleteDatasItem.Specific != null)
                        {
                            foreach (var subItem in StageCompleteDatasItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Note = this.Note.Combine(rhs.Note);
                ret.ScriptFlagComment = this.ScriptFlagComment.Combine(rhs.ScriptFlagComment);
                ret.Entry = this.Entry.Combine(rhs.Entry);
                ret.StageCompleteDatas = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStageCompleteData.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.StageCompleteDatas?.Overall, rhs.StageCompleteDatas?.Overall), Noggog.ExceptionExt.Combine(this.StageCompleteDatas?.Specific, rhs.StageCompleteDatas?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Flags;
            public Condition.TranslationMask? Conditions;
            public bool Note;
            public bool ScriptFlagComment;
            public bool Entry;
            public QuestStageCompleteData.TranslationMask? StageCompleteDatas;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Flags = defaultOn;
                this.Note = defaultOn;
                this.ScriptFlagComment = defaultOn;
                this.Entry = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Flags, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Note, null));
                ret.Add((ScriptFlagComment, null));
                ret.Add((Entry, null));
                ret.Add((StageCompleteDatas == null ? DefaultOn : !StageCompleteDatas.GetCrystal().CopyNothing, StageCompleteDatas?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestLogEntryCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestLogEntrySetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => QuestLogEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestLogEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static QuestLogEntry CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new QuestLogEntry();
            ((QuestLogEntrySetterCommon)((IQuestLogEntryGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out QuestLogEntry item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((QuestLogEntrySetterCommon)((IQuestLogEntryGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static QuestLogEntry GetNew()
        {
            return new QuestLogEntry();
        }

    }
    #endregion

    #region Interface
    public partial interface IQuestLogEntry :
        IFormLinkContainer,
        ILoquiObjectSetter<IQuestLogEntry>,
        IQuestLogEntryGetter
    {
        new QuestLogEntry.Flag? Flags { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new String? Note { get; set; }
        new String? ScriptFlagComment { get; set; }
        new TranslatedString? Entry { get; set; }
        new ExtendedList<QuestStageCompleteData> StageCompleteDatas { get; }
    }

    public partial interface IQuestLogEntryGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IQuestLogEntryGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => QuestLogEntry_Registration.Instance;
        QuestLogEntry.Flag? Flags { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        String? Note { get; }
        String? ScriptFlagComment { get; }
        ITranslatedStringGetter? Entry { get; }
        IReadOnlyList<IQuestStageCompleteDataGetter> StageCompleteDatas { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class QuestLogEntryMixIn
    {
        public static void Clear(this IQuestLogEntry item)
        {
            ((QuestLogEntrySetterCommon)((IQuestLogEntryGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static QuestLogEntry.Mask<bool> GetEqualsMask(
            this IQuestLogEntryGetter item,
            IQuestLogEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestLogEntryCommon)((IQuestLogEntryGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IQuestLogEntryGetter item,
            string? name = null,
            QuestLogEntry.Mask<bool>? printMask = null)
        {
            return ((QuestLogEntryCommon)((IQuestLogEntryGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IQuestLogEntryGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            QuestLogEntry.Mask<bool>? printMask = null)
        {
            ((QuestLogEntryCommon)((IQuestLogEntryGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IQuestLogEntryGetter item,
            IQuestLogEntryGetter rhs,
            QuestLogEntry.TranslationMask? equalsMask = null)
        {
            return ((QuestLogEntryCommon)((IQuestLogEntryGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IQuestLogEntry lhs,
            IQuestLogEntryGetter rhs)
        {
            ((QuestLogEntrySetterTranslationCommon)((IQuestLogEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IQuestLogEntry lhs,
            IQuestLogEntryGetter rhs,
            QuestLogEntry.TranslationMask? copyMask = null)
        {
            ((QuestLogEntrySetterTranslationCommon)((IQuestLogEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IQuestLogEntry lhs,
            IQuestLogEntryGetter rhs,
            out QuestLogEntry.ErrorMask errorMask,
            QuestLogEntry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((QuestLogEntrySetterTranslationCommon)((IQuestLogEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = QuestLogEntry.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IQuestLogEntry lhs,
            IQuestLogEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((QuestLogEntrySetterTranslationCommon)((IQuestLogEntryGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static QuestLogEntry DeepCopy(
            this IQuestLogEntryGetter item,
            QuestLogEntry.TranslationMask? copyMask = null)
        {
            return ((QuestLogEntrySetterTranslationCommon)((IQuestLogEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static QuestLogEntry DeepCopy(
            this IQuestLogEntryGetter item,
            out QuestLogEntry.ErrorMask errorMask,
            QuestLogEntry.TranslationMask? copyMask = null)
        {
            return ((QuestLogEntrySetterTranslationCommon)((IQuestLogEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static QuestLogEntry DeepCopy(
            this IQuestLogEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((QuestLogEntrySetterTranslationCommon)((IQuestLogEntryGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IQuestLogEntry item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((QuestLogEntrySetterCommon)((IQuestLogEntryGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum QuestLogEntry_FieldIndex
    {
        Flags = 0,
        Conditions = 1,
        Note = 2,
        ScriptFlagComment = 3,
        Entry = 4,
        StageCompleteDatas = 5,
    }
    #endregion

    #region Registration
    internal partial class QuestLogEntry_Registration : ILoquiRegistration
    {
        public static readonly QuestLogEntry_Registration Instance = new QuestLogEntry_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(QuestLogEntry.Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestLogEntry.ErrorMask);

        public static readonly Type ClassType = typeof(QuestLogEntry);

        public static readonly Type GetterType = typeof(IQuestLogEntryGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuestLogEntry);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.QuestLogEntry";

        public const string Name = "QuestLogEntry";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(
                RecordTypes.QSDT,
                RecordTypes.CTDA,
                RecordTypes.NAM2,
                RecordTypes.SCFC,
                RecordTypes.CNAM,
                RecordTypes.QSRD,
                RecordTypes.NAM1,
                RecordTypes.QRXP,
                RecordTypes.QRCR,
                RecordTypes.QRRD);
            var all = RecordCollection.Factory(
                RecordTypes.QSDT,
                RecordTypes.CTDA,
                RecordTypes.NAM2,
                RecordTypes.SCFC,
                RecordTypes.CNAM,
                RecordTypes.QSRD,
                RecordTypes.NAM1,
                RecordTypes.QRXP,
                RecordTypes.QRCR,
                RecordTypes.QRRD,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(QuestLogEntryBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class QuestLogEntrySetterCommon
    {
        public static readonly QuestLogEntrySetterCommon Instance = new QuestLogEntrySetterCommon();

        partial void ClearPartial();
        
        public void Clear(IQuestLogEntry item)
        {
            ClearPartial();
            item.Flags = default;
            item.Conditions.Clear();
            item.Note = default;
            item.ScriptFlagComment = default;
            item.Entry = default;
            item.StageCompleteDatas.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IQuestLogEntry obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Conditions.RemapLinks(mapping);
            obj.StageCompleteDatas.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IQuestLogEntry item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: QuestLogEntryBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class QuestLogEntryCommon
    {
        public static readonly QuestLogEntryCommon Instance = new QuestLogEntryCommon();

        public QuestLogEntry.Mask<bool> GetEqualsMask(
            IQuestLogEntryGetter item,
            IQuestLogEntryGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new QuestLogEntry.Mask<bool>(false);
            ((QuestLogEntryCommon)((IQuestLogEntryGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestLogEntryGetter item,
            IQuestLogEntryGetter rhs,
            QuestLogEntry.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Flags = item.Flags == rhs.Flags;
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Note = string.Equals(item.Note, rhs.Note);
            ret.ScriptFlagComment = string.Equals(item.ScriptFlagComment, rhs.ScriptFlagComment);
            ret.Entry = object.Equals(item.Entry, rhs.Entry);
            ret.StageCompleteDatas = item.StageCompleteDatas.CollectionEqualsHelper(
                rhs.StageCompleteDatas,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            IQuestLogEntryGetter item,
            string? name = null,
            QuestLogEntry.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IQuestLogEntryGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            QuestLogEntry.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"QuestLogEntry =>");
            }
            else
            {
                sb.AppendLine($"{name} (QuestLogEntry) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IQuestLogEntryGetter item,
            StructuredStringBuilder sb,
            QuestLogEntry.Mask<bool>? printMask = null)
        {
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Note ?? true)
                && item.Note is {} NoteItem)
            {
                sb.AppendItem(NoteItem, "Note");
            }
            if ((printMask?.ScriptFlagComment ?? true)
                && item.ScriptFlagComment is {} ScriptFlagCommentItem)
            {
                sb.AppendItem(ScriptFlagCommentItem, "ScriptFlagComment");
            }
            if ((printMask?.Entry ?? true)
                && item.Entry is {} EntryItem)
            {
                sb.AppendItem(EntryItem, "Entry");
            }
            if (printMask?.StageCompleteDatas?.Overall ?? true)
            {
                sb.AppendLine("StageCompleteDatas =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.StageCompleteDatas)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestLogEntryGetter? lhs,
            IQuestLogEntryGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)QuestLogEntry_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLogEntry_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)QuestLogEntry_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLogEntry_FieldIndex.Note) ?? true))
            {
                if (!string.Equals(lhs.Note, rhs.Note)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLogEntry_FieldIndex.ScriptFlagComment) ?? true))
            {
                if (!string.Equals(lhs.ScriptFlagComment, rhs.ScriptFlagComment)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLogEntry_FieldIndex.Entry) ?? true))
            {
                if (!object.Equals(lhs.Entry, rhs.Entry)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestLogEntry_FieldIndex.StageCompleteDatas) ?? true))
            {
                if (!lhs.StageCompleteDatas.SequenceEqual(rhs.StageCompleteDatas, (l, r) => ((QuestStageCompleteDataCommon)((IQuestStageCompleteDataGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)QuestLogEntry_FieldIndex.StageCompleteDatas)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IQuestLogEntryGetter item)
        {
            var hash = new HashCode();
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.Conditions);
            if (item.Note is {} Noteitem)
            {
                hash.Add(Noteitem);
            }
            if (item.ScriptFlagComment is {} ScriptFlagCommentitem)
            {
                hash.Add(ScriptFlagCommentitem);
            }
            if (item.Entry is {} Entryitem)
            {
                hash.Add(Entryitem);
            }
            hash.Add(item.StageCompleteDatas);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return QuestLogEntry.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IQuestLogEntryGetter obj)
        {
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.StageCompleteDatas.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class QuestLogEntrySetterTranslationCommon
    {
        public static readonly QuestLogEntrySetterTranslationCommon Instance = new QuestLogEntrySetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IQuestLogEntry item,
            IQuestLogEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)QuestLogEntry_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLogEntry_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)QuestLogEntry_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLogEntry_FieldIndex.Note) ?? true))
            {
                item.Note = rhs.Note;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLogEntry_FieldIndex.ScriptFlagComment) ?? true))
            {
                item.ScriptFlagComment = rhs.ScriptFlagComment;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLogEntry_FieldIndex.Entry) ?? true))
            {
                item.Entry = rhs.Entry?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)QuestLogEntry_FieldIndex.StageCompleteDatas) ?? true))
            {
                errorMask?.PushIndex((int)QuestLogEntry_FieldIndex.StageCompleteDatas);
                try
                {
                    item.StageCompleteDatas.SetTo(
                        rhs.StageCompleteDatas
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IQuestLogEntry item,
            IQuestLogEntryGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public QuestLogEntry DeepCopy(
            IQuestLogEntryGetter item,
            QuestLogEntry.TranslationMask? copyMask = null)
        {
            QuestLogEntry ret = (QuestLogEntry)((QuestLogEntryCommon)((IQuestLogEntryGetter)item).CommonInstance()!).GetNew();
            ((QuestLogEntrySetterTranslationCommon)((IQuestLogEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public QuestLogEntry DeepCopy(
            IQuestLogEntryGetter item,
            out QuestLogEntry.ErrorMask errorMask,
            QuestLogEntry.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            QuestLogEntry ret = (QuestLogEntry)((QuestLogEntryCommon)((IQuestLogEntryGetter)item).CommonInstance()!).GetNew();
            ((QuestLogEntrySetterTranslationCommon)((IQuestLogEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = QuestLogEntry.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public QuestLogEntry DeepCopy(
            IQuestLogEntryGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            QuestLogEntry ret = (QuestLogEntry)((QuestLogEntryCommon)((IQuestLogEntryGetter)item).CommonInstance()!).GetNew();
            ((QuestLogEntrySetterTranslationCommon)((IQuestLogEntryGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class QuestLogEntry
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestLogEntry_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => QuestLogEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => QuestLogEntryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return QuestLogEntrySetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => QuestLogEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IQuestLogEntryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IQuestLogEntryGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IQuestLogEntryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class QuestLogEntryBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly QuestLogEntryBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IQuestLogEntryGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            EnumBinaryTranslation<QuestLogEntry.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.QSDT));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Note,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ScriptFlagComment,
                header: translationParams.ConvertToCustom(RecordTypes.SCFC),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Entry,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IQuestStageCompleteDataGetter>.Instance.Write(
                writer: writer,
                items: item.StageCompleteDatas,
                transl: (MutagenWriter subWriter, IQuestStageCompleteDataGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((QuestStageCompleteDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IQuestLogEntryGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IQuestLogEntryGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class QuestLogEntryBinaryCreateTranslation
    {
        public static readonly QuestLogEntryBinaryCreateTranslation Instance = new QuestLogEntryBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IQuestLogEntry item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.QSDT:
                {
                    if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.Flags, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<QuestLogEntry.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)QuestLogEntry_FieldIndex.Flags;
                }
                case RecordTypeInts.CTDA:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)QuestLogEntry_FieldIndex.Flags)
                    {
                        if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.Conditions, translationParams)) return ParseResult.Stop;
                        item.Conditions.SetTo(
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                                reader: frame,
                                triggeringRecord: Condition_Registration.TriggerSpecs,
                                translationParams: translationParams,
                                transl: Condition.TryCreateFromBinary));
                        return new ParseResult((int)QuestLogEntry_FieldIndex.Conditions, nextRecordType);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)QuestLogEntry_FieldIndex.Entry)
                    {
                        if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.StageCompleteDatas, translationParams)) return ParseResult.Stop;
                        item.StageCompleteDatas.SetTo(
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<QuestStageCompleteData>.Instance.Parse(
                                reader: frame,
                                triggeringRecord: QuestStageCompleteData_Registration.TriggerSpecs,
                                translationParams: translationParams,
                                transl: QuestStageCompleteData.TryCreateFromBinary));
                        return new ParseResult((int)QuestLogEntry_FieldIndex.StageCompleteDatas, nextRecordType);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(nextRecordType) ?? 0)
                        {
                            case 0:
                                if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.Conditions, translationParams)) return ParseResult.Stop;
                                item.Conditions.SetTo(
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                                        reader: frame,
                                        triggeringRecord: Condition_Registration.TriggerSpecs,
                                        translationParams: translationParams,
                                        transl: Condition.TryCreateFromBinary));
                                return new ParseResult((int)QuestLogEntry_FieldIndex.Conditions, nextRecordType);
                            case 1:
                                if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.StageCompleteDatas, translationParams)) return ParseResult.Stop;
                                item.StageCompleteDatas.SetTo(
                                    Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<QuestStageCompleteData>.Instance.Parse(
                                        reader: frame,
                                        triggeringRecord: QuestStageCompleteData_Registration.TriggerSpecs,
                                        translationParams: translationParams,
                                        transl: QuestStageCompleteData.TryCreateFromBinary));
                                return new ParseResult((int)QuestLogEntry_FieldIndex.StageCompleteDatas, nextRecordType);
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.NAM2:
                {
                    if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.Note, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Note = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)QuestLogEntry_FieldIndex.Note;
                }
                case RecordTypeInts.SCFC:
                {
                    if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.ScriptFlagComment, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ScriptFlagComment = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)QuestLogEntry_FieldIndex.ScriptFlagComment;
                }
                case RecordTypeInts.CNAM:
                {
                    if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.Entry, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Entry = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)QuestLogEntry_FieldIndex.Entry;
                }
                case RecordTypeInts.QSRD:
                case RecordTypeInts.NAM1:
                case RecordTypeInts.QRXP:
                case RecordTypeInts.QRCR:
                case RecordTypeInts.QRRD:
                {
                    if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.StageCompleteDatas, translationParams)) return ParseResult.Stop;
                    item.StageCompleteDatas.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<QuestStageCompleteData>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: QuestStageCompleteData_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: QuestStageCompleteData.TryCreateFromBinary));
                    return (int)QuestLogEntry_FieldIndex.StageCompleteDatas;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class QuestLogEntryBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IQuestLogEntryGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestLogEntryBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class QuestLogEntryBinaryOverlay :
        PluginBinaryOverlay,
        IQuestLogEntryGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestLogEntry_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => QuestLogEntry_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => QuestLogEntryCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => QuestLogEntrySetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IQuestLogEntryGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IQuestLogEntryGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IQuestLogEntryGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestLogEntryCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => QuestLogEntryBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestLogEntryBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Flags
        private int? _FlagsLocation;
        public QuestLogEntry.Flag? Flags => _FlagsLocation.HasValue ? (QuestLogEntry.Flag)HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(QuestLogEntry.Flag?);
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = [];
        #region Note
        private int? _NoteLocation;
        public String? Note => _NoteLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NoteLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region ScriptFlagComment
        private int? _ScriptFlagCommentLocation;
        public String? ScriptFlagComment => _ScriptFlagCommentLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScriptFlagCommentLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Entry
        private int? _EntryLocation;
        public ITranslatedStringGetter? Entry => _EntryLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EntryLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IQuestStageCompleteDataGetter> StageCompleteDatas { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected QuestLogEntryBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IQuestLogEntryGetter QuestLogEntryFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new QuestLogEntryBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IQuestLogEntryGetter QuestLogEntryFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return QuestLogEntryFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.QSDT:
                {
                    if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.Flags, translationParams)) return ParseResult.Stop;
                    _FlagsLocation = (stream.Position - offset);
                    return (int)QuestLogEntry_FieldIndex.Flags;
                }
                case RecordTypeInts.CTDA:
                {
                    if (!lastParsed.ParsedIndex.HasValue
                        || lastParsed.ParsedIndex.Value <= (int)QuestLogEntry_FieldIndex.Flags)
                    {
                        if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.Conditions, translationParams)) return ParseResult.Stop;
                        this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                            mem: stream.RemainingMemory,
                            package: _package,
                            translationParams: translationParams,
                            getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                            locs: ParseRecordLocations(
                                stream: stream,
                                trigger: Condition_Registration.TriggerSpecs,
                                triggersAlwaysAreNewRecords: true,
                                constants: _package.MetaData.Constants.SubConstants,
                                skipHeader: false));
                        return new ParseResult((int)QuestLogEntry_FieldIndex.Conditions, type);
                    }
                    else if (lastParsed.ParsedIndex.Value <= (int)QuestLogEntry_FieldIndex.Entry)
                    {
                        if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.StageCompleteDatas, translationParams)) return ParseResult.Stop;
                        this.StageCompleteDatas = this.ParseRepeatedTypelessSubrecord<IQuestStageCompleteDataGetter>(
                            stream: stream,
                            translationParams: translationParams,
                            trigger: QuestStageCompleteData_Registration.TriggerSpecs,
                            factory: QuestStageCompleteDataBinaryOverlay.QuestStageCompleteDataFactory);
                        return new ParseResult((int)QuestLogEntry_FieldIndex.StageCompleteDatas, type);
                    }
                    else
                    {
                        switch (recordParseCount?.GetOrAdd(type) ?? 0)
                        {
                            case 0:
                            {
                                if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.Conditions, translationParams)) return ParseResult.Stop;
                                this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                                    mem: stream.RemainingMemory,
                                    package: _package,
                                    translationParams: translationParams,
                                    getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                                    locs: ParseRecordLocations(
                                        stream: stream,
                                        trigger: Condition_Registration.TriggerSpecs,
                                        triggersAlwaysAreNewRecords: true,
                                        constants: _package.MetaData.Constants.SubConstants,
                                        skipHeader: false));
                                return new ParseResult((int)QuestLogEntry_FieldIndex.Conditions, type);
                            }
                            case 1:
                            {
                                if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.StageCompleteDatas, translationParams)) return ParseResult.Stop;
                                this.StageCompleteDatas = this.ParseRepeatedTypelessSubrecord<IQuestStageCompleteDataGetter>(
                                    stream: stream,
                                    translationParams: translationParams,
                                    trigger: QuestStageCompleteData_Registration.TriggerSpecs,
                                    factory: QuestStageCompleteDataBinaryOverlay.QuestStageCompleteDataFactory);
                                return new ParseResult((int)QuestLogEntry_FieldIndex.StageCompleteDatas, type);
                            }
                            default:
                                throw new NotImplementedException();
                        }
                    }
                }
                case RecordTypeInts.NAM2:
                {
                    if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.Note, translationParams)) return ParseResult.Stop;
                    _NoteLocation = (stream.Position - offset);
                    return (int)QuestLogEntry_FieldIndex.Note;
                }
                case RecordTypeInts.SCFC:
                {
                    if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.ScriptFlagComment, translationParams)) return ParseResult.Stop;
                    _ScriptFlagCommentLocation = (stream.Position - offset);
                    return (int)QuestLogEntry_FieldIndex.ScriptFlagComment;
                }
                case RecordTypeInts.CNAM:
                {
                    if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.Entry, translationParams)) return ParseResult.Stop;
                    _EntryLocation = (stream.Position - offset);
                    return (int)QuestLogEntry_FieldIndex.Entry;
                }
                case RecordTypeInts.QSRD:
                case RecordTypeInts.NAM1:
                case RecordTypeInts.QRXP:
                case RecordTypeInts.QRCR:
                case RecordTypeInts.QRRD:
                {
                    if (lastParsed.ShortCircuit((int)QuestLogEntry_FieldIndex.StageCompleteDatas, translationParams)) return ParseResult.Stop;
                    this.StageCompleteDatas = this.ParseRepeatedTypelessSubrecord<IQuestStageCompleteDataGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: QuestStageCompleteData_Registration.TriggerSpecs,
                        factory: QuestStageCompleteDataBinaryOverlay.QuestStageCompleteDataFactory);
                    return (int)QuestLogEntry_FieldIndex.StageCompleteDatas;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestLogEntryMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IQuestLogEntryGetter rhs) return false;
            return ((QuestLogEntryCommon)((IQuestLogEntryGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestLogEntryGetter? obj)
        {
            return ((QuestLogEntryCommon)((IQuestLogEntryGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestLogEntryCommon)((IQuestLogEntryGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

