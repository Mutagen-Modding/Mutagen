/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Container :
        StarfieldMajorRecord,
        IContainerInternal,
        IEquatable<IContainerGetter>,
        ILoquiObjectSetter<Container>
    {
        #region Ctor
        protected Container()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IContainerGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IContainerGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region DirtinessScale
        public Percent DirtinessScale { get; set; } = default(Percent);
        #endregion
        #region ObjectPlacementDefaults
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ObjectPlacementDefaults? _ObjectPlacementDefaults;
        public ObjectPlacementDefaults? ObjectPlacementDefaults
        {
            get => _ObjectPlacementDefaults;
            set => _ObjectPlacementDefaults = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectPlacementDefaultsGetter? IContainerGetter.ObjectPlacementDefaults => this.ObjectPlacementDefaults;
        #endregion
        #region XALG
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XALG;
        public MemorySlice<Byte>? XALG
        {
            get => this._XALG;
            set => this._XALG = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IContainerGetter.XALG => this.XALG;
        #endregion
        #region Transforms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Transforms? _Transforms;
        public Transforms? Transforms
        {
            get => _Transforms;
            set => _Transforms = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITransformsGetter? IContainerGetter.Transforms => this.Transforms;
        #endregion
        #region SnapTemplate
        private readonly IFormLinkNullable<ISnapTemplateGetter> _SnapTemplate = new FormLinkNullable<ISnapTemplateGetter>();
        public IFormLinkNullable<ISnapTemplateGetter> SnapTemplate
        {
            get => _SnapTemplate;
            set => _SnapTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISnapTemplateGetter> IContainerGetter.SnapTemplate => this.SnapTemplate;
        #endregion
        #region SnapBehavior
        private readonly IFormLinkNullable<ISnapTemplateGetter> _SnapBehavior = new FormLinkNullable<ISnapTemplateGetter>();
        public IFormLinkNullable<ISnapTemplateGetter> SnapBehavior
        {
            get => _SnapBehavior;
            set => _SnapBehavior.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISnapTemplateGetter> IContainerGetter.SnapBehavior => this.SnapBehavior;
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IContainerGetter.Components => _Components;
        #endregion

        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IContainerGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IContainerGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ContainerEntry>? _Items;
        public ExtendedList<ContainerEntry>? Items
        {
            get => this._Items;
            set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IContainerEntryGetter>? IContainerGetter.Items => _Items;
        #endregion

        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IContainerGetter.Destructible => this.Destructible;
        #endregion
        #region Flags
        public Container.Flag Flags { get; set; } = default(Container.Flag);
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IContainerGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region ForcedLocations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? _ForcedLocations;
        public ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ForcedLocations
        {
            get => this._ForcedLocations;
            set => this._ForcedLocations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? IContainerGetter.ForcedLocations => _ForcedLocations;
        #endregion

        #endregion
        #region NativeTerminal
        private readonly IFormLinkNullable<ITerminalMenuGetter> _NativeTerminal = new FormLinkNullable<ITerminalMenuGetter>();
        public IFormLinkNullable<ITerminalMenuGetter> NativeTerminal
        {
            get => _NativeTerminal;
            set => _NativeTerminal.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITerminalMenuGetter> IContainerGetter.NativeTerminal => this.NativeTerminal;
        #endregion
        #region Properties
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ObjectProperty>? _Properties;
        public ExtendedList<ObjectProperty>? Properties
        {
            get => this._Properties;
            set => this._Properties = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IObjectPropertyGetter>? IContainerGetter.Properties => _Properties;
        #endregion

        #endregion
        #region AttachParentSlots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _AttachParentSlots;
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots
        {
            get => this._AttachParentSlots;
            set => this._AttachParentSlots = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IContainerGetter.AttachParentSlots => _AttachParentSlots;
        #endregion

        #endregion
        #region OpenSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _OpenSound;
        public SoundReference? OpenSound
        {
            get => _OpenSound;
            set => _OpenSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IContainerGetter.OpenSound => this.OpenSound;
        #endregion
        #region CloseSound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundReference? _CloseSound;
        public SoundReference? CloseSound
        {
            get => _CloseSound;
            set => _CloseSound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundReferenceGetter? IContainerGetter.CloseSound => this.CloseSound;
        #endregion
        #region DisplayFilter
        private readonly IFormLinkNullable<IFormListGetter> _DisplayFilter = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> DisplayFilter
        {
            get => _DisplayFilter;
            set => _DisplayFilter.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IContainerGetter.DisplayFilter => this.DisplayFilter;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ContainerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.DirtinessScale = initialValue;
                this.ObjectPlacementDefaults = new MaskItem<TItem, ObjectPlacementDefaults.Mask<TItem>?>(initialValue, new ObjectPlacementDefaults.Mask<TItem>(initialValue));
                this.XALG = initialValue;
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(initialValue, new Transforms.Mask<TItem>(initialValue));
                this.SnapTemplate = initialValue;
                this.SnapBehavior = initialValue;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ForcedLocations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.NativeTerminal = initialValue;
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.AttachParentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.OpenSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.CloseSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(initialValue, new SoundReference.Mask<TItem>(initialValue));
                this.DisplayFilter = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem DirtinessScale,
                TItem ObjectPlacementDefaults,
                TItem XALG,
                TItem Transforms,
                TItem SnapTemplate,
                TItem SnapBehavior,
                TItem Components,
                TItem Name,
                TItem Model,
                TItem Items,
                TItem Destructible,
                TItem Flags,
                TItem Keywords,
                TItem ForcedLocations,
                TItem NativeTerminal,
                TItem Properties,
                TItem AttachParentSlots,
                TItem OpenSound,
                TItem CloseSound,
                TItem DisplayFilter)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.DirtinessScale = DirtinessScale;
                this.ObjectPlacementDefaults = new MaskItem<TItem, ObjectPlacementDefaults.Mask<TItem>?>(ObjectPlacementDefaults, new ObjectPlacementDefaults.Mask<TItem>(ObjectPlacementDefaults));
                this.XALG = XALG;
                this.Transforms = new MaskItem<TItem, Transforms.Mask<TItem>?>(Transforms, new Transforms.Mask<TItem>(Transforms));
                this.SnapTemplate = SnapTemplate;
                this.SnapBehavior = SnapBehavior;
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Flags = Flags;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.ForcedLocations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ForcedLocations, Enumerable.Empty<(int Index, TItem Value)>());
                this.NativeTerminal = NativeTerminal;
                this.Properties = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>(Properties, Enumerable.Empty<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>());
                this.AttachParentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AttachParentSlots, Enumerable.Empty<(int Index, TItem Value)>());
                this.OpenSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(OpenSound, new SoundReference.Mask<TItem>(OpenSound));
                this.CloseSound = new MaskItem<TItem, SoundReference.Mask<TItem>?>(CloseSound, new SoundReference.Mask<TItem>(CloseSound));
                this.DisplayFilter = DisplayFilter;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem DirtinessScale;
            public MaskItem<TItem, ObjectPlacementDefaults.Mask<TItem>?>? ObjectPlacementDefaults { get; set; }
            public TItem XALG;
            public MaskItem<TItem, Transforms.Mask<TItem>?>? Transforms { get; set; }
            public TItem SnapTemplate;
            public TItem SnapBehavior;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>? Items;
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ForcedLocations;
            public TItem NativeTerminal;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ObjectProperty.Mask<TItem>?>>?>? Properties;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AttachParentSlots;
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? OpenSound { get; set; }
            public MaskItem<TItem, SoundReference.Mask<TItem>?>? CloseSound { get; set; }
            public TItem DisplayFilter;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.DirtinessScale, rhs.DirtinessScale)) return false;
                if (!object.Equals(this.ObjectPlacementDefaults, rhs.ObjectPlacementDefaults)) return false;
                if (!object.Equals(this.XALG, rhs.XALG)) return false;
                if (!object.Equals(this.Transforms, rhs.Transforms)) return false;
                if (!object.Equals(this.SnapTemplate, rhs.SnapTemplate)) return false;
                if (!object.Equals(this.SnapBehavior, rhs.SnapBehavior)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.ForcedLocations, rhs.ForcedLocations)) return false;
                if (!object.Equals(this.NativeTerminal, rhs.NativeTerminal)) return false;
                if (!object.Equals(this.Properties, rhs.Properties)) return false;
                if (!object.Equals(this.AttachParentSlots, rhs.AttachParentSlots)) return false;
                if (!object.Equals(this.OpenSound, rhs.OpenSound)) return false;
                if (!object.Equals(this.CloseSound, rhs.CloseSound)) return false;
                if (!object.Equals(this.DisplayFilter, rhs.DisplayFilter)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.DirtinessScale);
                hash.Add(this.ObjectPlacementDefaults);
                hash.Add(this.XALG);
                hash.Add(this.Transforms);
                hash.Add(this.SnapTemplate);
                hash.Add(this.SnapBehavior);
                hash.Add(this.Components);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Items);
                hash.Add(this.Destructible);
                hash.Add(this.Flags);
                hash.Add(this.Keywords);
                hash.Add(this.ForcedLocations);
                hash.Add(this.NativeTerminal);
                hash.Add(this.Properties);
                hash.Add(this.AttachParentSlots);
                hash.Add(this.OpenSound);
                hash.Add(this.CloseSound);
                hash.Add(this.DisplayFilter);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.DirtinessScale)) return false;
                if (ObjectPlacementDefaults != null)
                {
                    if (!eval(this.ObjectPlacementDefaults.Overall)) return false;
                    if (this.ObjectPlacementDefaults.Specific != null && !this.ObjectPlacementDefaults.Specific.All(eval)) return false;
                }
                if (!eval(this.XALG)) return false;
                if (Transforms != null)
                {
                    if (!eval(this.Transforms.Overall)) return false;
                    if (this.Transforms.Specific != null && !this.Transforms.Specific.All(eval)) return false;
                }
                if (!eval(this.SnapTemplate)) return false;
                if (!eval(this.SnapBehavior)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ForcedLocations != null)
                {
                    if (!eval(this.ForcedLocations.Overall)) return false;
                    if (this.ForcedLocations.Specific != null)
                    {
                        foreach (var item in this.ForcedLocations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.NativeTerminal)) return false;
                if (this.Properties != null)
                {
                    if (!eval(this.Properties.Overall)) return false;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.AttachParentSlots != null)
                {
                    if (!eval(this.AttachParentSlots.Overall)) return false;
                    if (this.AttachParentSlots.Specific != null)
                    {
                        foreach (var item in this.AttachParentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (OpenSound != null)
                {
                    if (!eval(this.OpenSound.Overall)) return false;
                    if (this.OpenSound.Specific != null && !this.OpenSound.Specific.All(eval)) return false;
                }
                if (CloseSound != null)
                {
                    if (!eval(this.CloseSound.Overall)) return false;
                    if (this.CloseSound.Specific != null && !this.CloseSound.Specific.All(eval)) return false;
                }
                if (!eval(this.DisplayFilter)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.DirtinessScale)) return true;
                if (ObjectPlacementDefaults != null)
                {
                    if (eval(this.ObjectPlacementDefaults.Overall)) return true;
                    if (this.ObjectPlacementDefaults.Specific != null && this.ObjectPlacementDefaults.Specific.Any(eval)) return true;
                }
                if (eval(this.XALG)) return true;
                if (Transforms != null)
                {
                    if (eval(this.Transforms.Overall)) return true;
                    if (this.Transforms.Specific != null && this.Transforms.Specific.Any(eval)) return true;
                }
                if (eval(this.SnapTemplate)) return true;
                if (eval(this.SnapBehavior)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ForcedLocations != null)
                {
                    if (eval(this.ForcedLocations.Overall)) return true;
                    if (this.ForcedLocations.Specific != null)
                    {
                        foreach (var item in this.ForcedLocations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.NativeTerminal)) return true;
                if (this.Properties != null)
                {
                    if (eval(this.Properties.Overall)) return true;
                    if (this.Properties.Specific != null)
                    {
                        foreach (var item in this.Properties.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.AttachParentSlots != null)
                {
                    if (eval(this.AttachParentSlots.Overall)) return true;
                    if (this.AttachParentSlots.Specific != null)
                    {
                        foreach (var item in this.AttachParentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (OpenSound != null)
                {
                    if (eval(this.OpenSound.Overall)) return true;
                    if (this.OpenSound.Specific != null && this.OpenSound.Specific.Any(eval)) return true;
                }
                if (CloseSound != null)
                {
                    if (eval(this.CloseSound.Overall)) return true;
                    if (this.CloseSound.Specific != null && this.CloseSound.Specific.Any(eval)) return true;
                }
                if (eval(this.DisplayFilter)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Container.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.DirtinessScale = eval(this.DirtinessScale);
                obj.ObjectPlacementDefaults = this.ObjectPlacementDefaults == null ? null : new MaskItem<R, ObjectPlacementDefaults.Mask<R>?>(eval(this.ObjectPlacementDefaults.Overall), this.ObjectPlacementDefaults.Specific?.Translate(eval));
                obj.XALG = eval(this.XALG);
                obj.Transforms = this.Transforms == null ? null : new MaskItem<R, Transforms.Mask<R>?>(eval(this.Transforms.Overall), this.Transforms.Specific?.Translate(eval));
                obj.SnapTemplate = eval(this.SnapTemplate);
                obj.SnapBehavior = eval(this.SnapBehavior);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific)
                        {
                            MaskItemIndexed<R, ContainerEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ContainerEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (ForcedLocations != null)
                {
                    obj.ForcedLocations = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ForcedLocations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ForcedLocations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ForcedLocations.Specific = l;
                        foreach (var item in ForcedLocations.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.NativeTerminal = eval(this.NativeTerminal);
                if (Properties != null)
                {
                    obj.Properties = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>?>(eval(this.Properties.Overall), Enumerable.Empty<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>());
                    if (Properties.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ObjectProperty.Mask<R>?>>();
                        obj.Properties.Specific = l;
                        foreach (var item in Properties.Specific)
                        {
                            MaskItemIndexed<R, ObjectProperty.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ObjectProperty.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (AttachParentSlots != null)
                {
                    obj.AttachParentSlots = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AttachParentSlots.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AttachParentSlots.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AttachParentSlots.Specific = l;
                        foreach (var item in AttachParentSlots.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.OpenSound = this.OpenSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.OpenSound.Overall), this.OpenSound.Specific?.Translate(eval));
                obj.CloseSound = this.CloseSound == null ? null : new MaskItem<R, SoundReference.Mask<R>?>(eval(this.CloseSound.Overall), this.CloseSound.Specific?.Translate(eval));
                obj.DisplayFilter = eval(this.DisplayFilter);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Container.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Container.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Container.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.DirtinessScale ?? true)
                    {
                        sb.AppendItem(DirtinessScale, "DirtinessScale");
                    }
                    if (printMask?.ObjectPlacementDefaults?.Overall ?? true)
                    {
                        ObjectPlacementDefaults?.Print(sb);
                    }
                    if (printMask?.XALG ?? true)
                    {
                        sb.AppendItem(XALG, "XALG");
                    }
                    if (printMask?.Transforms?.Overall ?? true)
                    {
                        Transforms?.Print(sb);
                    }
                    if (printMask?.SnapTemplate ?? true)
                    {
                        sb.AppendItem(SnapTemplate, "SnapTemplate");
                    }
                    if (printMask?.SnapBehavior ?? true)
                    {
                        sb.AppendItem(SnapBehavior, "SnapBehavior");
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items is {} ItemsItem)
                    {
                        sb.AppendLine("Items =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.Print(sb);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ForcedLocations?.Overall ?? true)
                        && ForcedLocations is {} ForcedLocationsItem)
                    {
                        sb.AppendLine("ForcedLocations =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ForcedLocationsItem.Overall);
                            if (ForcedLocationsItem.Specific != null)
                            {
                                foreach (var subItem in ForcedLocationsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.NativeTerminal ?? true)
                    {
                        sb.AppendItem(NativeTerminal, "NativeTerminal");
                    }
                    if ((printMask?.Properties?.Overall ?? true)
                        && Properties is {} PropertiesItem)
                    {
                        sb.AppendLine("Properties =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PropertiesItem.Overall);
                            if (PropertiesItem.Specific != null)
                            {
                                foreach (var subItem in PropertiesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.AttachParentSlots?.Overall ?? true)
                        && AttachParentSlots is {} AttachParentSlotsItem)
                    {
                        sb.AppendLine("AttachParentSlots =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AttachParentSlotsItem.Overall);
                            if (AttachParentSlotsItem.Specific != null)
                            {
                                foreach (var subItem in AttachParentSlotsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.OpenSound?.Overall ?? true)
                    {
                        OpenSound?.Print(sb);
                    }
                    if (printMask?.CloseSound?.Overall ?? true)
                    {
                        CloseSound?.Print(sb);
                    }
                    if (printMask?.DisplayFilter ?? true)
                    {
                        sb.AppendItem(DisplayFilter, "DisplayFilter");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? DirtinessScale;
            public MaskItem<Exception?, ObjectPlacementDefaults.ErrorMask?>? ObjectPlacementDefaults;
            public Exception? XALG;
            public MaskItem<Exception?, Transforms.ErrorMask?>? Transforms;
            public Exception? SnapTemplate;
            public Exception? SnapBehavior;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>? Items;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ForcedLocations;
            public Exception? NativeTerminal;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>? Properties;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AttachParentSlots;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? OpenSound;
            public MaskItem<Exception?, SoundReference.ErrorMask?>? CloseSound;
            public Exception? DisplayFilter;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Container_FieldIndex enu = (Container_FieldIndex)index;
                switch (enu)
                {
                    case Container_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Container_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Container_FieldIndex.DirtinessScale:
                        return DirtinessScale;
                    case Container_FieldIndex.ObjectPlacementDefaults:
                        return ObjectPlacementDefaults;
                    case Container_FieldIndex.XALG:
                        return XALG;
                    case Container_FieldIndex.Transforms:
                        return Transforms;
                    case Container_FieldIndex.SnapTemplate:
                        return SnapTemplate;
                    case Container_FieldIndex.SnapBehavior:
                        return SnapBehavior;
                    case Container_FieldIndex.Components:
                        return Components;
                    case Container_FieldIndex.Name:
                        return Name;
                    case Container_FieldIndex.Model:
                        return Model;
                    case Container_FieldIndex.Items:
                        return Items;
                    case Container_FieldIndex.Destructible:
                        return Destructible;
                    case Container_FieldIndex.Flags:
                        return Flags;
                    case Container_FieldIndex.Keywords:
                        return Keywords;
                    case Container_FieldIndex.ForcedLocations:
                        return ForcedLocations;
                    case Container_FieldIndex.NativeTerminal:
                        return NativeTerminal;
                    case Container_FieldIndex.Properties:
                        return Properties;
                    case Container_FieldIndex.AttachParentSlots:
                        return AttachParentSlots;
                    case Container_FieldIndex.OpenSound:
                        return OpenSound;
                    case Container_FieldIndex.CloseSound:
                        return CloseSound;
                    case Container_FieldIndex.DisplayFilter:
                        return DisplayFilter;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Container_FieldIndex enu = (Container_FieldIndex)index;
                switch (enu)
                {
                    case Container_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Container_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Container_FieldIndex.DirtinessScale:
                        this.DirtinessScale = ex;
                        break;
                    case Container_FieldIndex.ObjectPlacementDefaults:
                        this.ObjectPlacementDefaults = new MaskItem<Exception?, ObjectPlacementDefaults.ErrorMask?>(ex, null);
                        break;
                    case Container_FieldIndex.XALG:
                        this.XALG = ex;
                        break;
                    case Container_FieldIndex.Transforms:
                        this.Transforms = new MaskItem<Exception?, Transforms.ErrorMask?>(ex, null);
                        break;
                    case Container_FieldIndex.SnapTemplate:
                        this.SnapTemplate = ex;
                        break;
                    case Container_FieldIndex.SnapBehavior:
                        this.SnapBehavior = ex;
                        break;
                    case Container_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Container_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Container_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Container_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case Container_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Container_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Container_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Container_FieldIndex.ForcedLocations:
                        this.ForcedLocations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Container_FieldIndex.NativeTerminal:
                        this.NativeTerminal = ex;
                        break;
                    case Container_FieldIndex.Properties:
                        this.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(ex, null);
                        break;
                    case Container_FieldIndex.AttachParentSlots:
                        this.AttachParentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Container_FieldIndex.OpenSound:
                        this.OpenSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Container_FieldIndex.CloseSound:
                        this.CloseSound = new MaskItem<Exception?, SoundReference.ErrorMask?>(ex, null);
                        break;
                    case Container_FieldIndex.DisplayFilter:
                        this.DisplayFilter = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Container_FieldIndex enu = (Container_FieldIndex)index;
                switch (enu)
                {
                    case Container_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Container_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Container_FieldIndex.DirtinessScale:
                        this.DirtinessScale = (Exception?)obj;
                        break;
                    case Container_FieldIndex.ObjectPlacementDefaults:
                        this.ObjectPlacementDefaults = (MaskItem<Exception?, ObjectPlacementDefaults.ErrorMask?>?)obj;
                        break;
                    case Container_FieldIndex.XALG:
                        this.XALG = (Exception?)obj;
                        break;
                    case Container_FieldIndex.Transforms:
                        this.Transforms = (MaskItem<Exception?, Transforms.ErrorMask?>?)obj;
                        break;
                    case Container_FieldIndex.SnapTemplate:
                        this.SnapTemplate = (Exception?)obj;
                        break;
                    case Container_FieldIndex.SnapBehavior:
                        this.SnapBehavior = (Exception?)obj;
                        break;
                    case Container_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Container_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Container_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Container_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>)obj;
                        break;
                    case Container_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Container_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Container_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Container_FieldIndex.ForcedLocations:
                        this.ForcedLocations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Container_FieldIndex.NativeTerminal:
                        this.NativeTerminal = (Exception?)obj;
                        break;
                    case Container_FieldIndex.Properties:
                        this.Properties = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>)obj;
                        break;
                    case Container_FieldIndex.AttachParentSlots:
                        this.AttachParentSlots = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Container_FieldIndex.OpenSound:
                        this.OpenSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Container_FieldIndex.CloseSound:
                        this.CloseSound = (MaskItem<Exception?, SoundReference.ErrorMask?>?)obj;
                        break;
                    case Container_FieldIndex.DisplayFilter:
                        this.DisplayFilter = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (DirtinessScale != null) return true;
                if (ObjectPlacementDefaults != null) return true;
                if (XALG != null) return true;
                if (Transforms != null) return true;
                if (SnapTemplate != null) return true;
                if (SnapBehavior != null) return true;
                if (Components != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Items != null) return true;
                if (Destructible != null) return true;
                if (Flags != null) return true;
                if (Keywords != null) return true;
                if (ForcedLocations != null) return true;
                if (NativeTerminal != null) return true;
                if (Properties != null) return true;
                if (AttachParentSlots != null) return true;
                if (OpenSound != null) return true;
                if (CloseSound != null) return true;
                if (DisplayFilter != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(DirtinessScale, "DirtinessScale");
                }
                ObjectPlacementDefaults?.Print(sb);
                {
                    sb.AppendItem(XALG, "XALG");
                }
                Transforms?.Print(sb);
                {
                    sb.AppendItem(SnapTemplate, "SnapTemplate");
                }
                {
                    sb.AppendItem(SnapBehavior, "SnapBehavior");
                }
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                Model?.Print(sb);
                if (Items is {} ItemsItem)
                {
                    sb.AppendLine("Items =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                Destructible?.Print(sb);
                {
                    sb.AppendItem(Flags, "Flags");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (ForcedLocations is {} ForcedLocationsItem)
                {
                    sb.AppendLine("ForcedLocations =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ForcedLocationsItem.Overall);
                        if (ForcedLocationsItem.Specific != null)
                        {
                            foreach (var subItem in ForcedLocationsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(NativeTerminal, "NativeTerminal");
                }
                if (Properties is {} PropertiesItem)
                {
                    sb.AppendLine("Properties =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PropertiesItem.Overall);
                        if (PropertiesItem.Specific != null)
                        {
                            foreach (var subItem in PropertiesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (AttachParentSlots is {} AttachParentSlotsItem)
                {
                    sb.AppendLine("AttachParentSlots =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AttachParentSlotsItem.Overall);
                        if (AttachParentSlotsItem.Specific != null)
                        {
                            foreach (var subItem in AttachParentSlotsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                OpenSound?.Print(sb);
                CloseSound?.Print(sb);
                {
                    sb.AppendItem(DisplayFilter, "DisplayFilter");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.DirtinessScale = this.DirtinessScale.Combine(rhs.DirtinessScale);
                ret.ObjectPlacementDefaults = this.ObjectPlacementDefaults.Combine(rhs.ObjectPlacementDefaults, (l, r) => l.Combine(r));
                ret.XALG = this.XALG.Combine(rhs.XALG);
                ret.Transforms = this.Transforms.Combine(rhs.Transforms, (l, r) => l.Combine(r));
                ret.SnapTemplate = this.SnapTemplate.Combine(rhs.SnapTemplate);
                ret.SnapBehavior = this.SnapBehavior.Combine(rhs.SnapBehavior);
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), Noggog.ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.ForcedLocations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ForcedLocations?.Overall, rhs.ForcedLocations?.Overall), Noggog.ExceptionExt.Combine(this.ForcedLocations?.Specific, rhs.ForcedLocations?.Specific));
                ret.NativeTerminal = this.NativeTerminal.Combine(rhs.NativeTerminal);
                ret.Properties = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ObjectProperty.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Properties?.Overall, rhs.Properties?.Overall), Noggog.ExceptionExt.Combine(this.Properties?.Specific, rhs.Properties?.Specific));
                ret.AttachParentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.AttachParentSlots?.Overall, rhs.AttachParentSlots?.Overall), Noggog.ExceptionExt.Combine(this.AttachParentSlots?.Specific, rhs.AttachParentSlots?.Specific));
                ret.OpenSound = this.OpenSound.Combine(rhs.OpenSound, (l, r) => l.Combine(r));
                ret.CloseSound = this.CloseSound.Combine(rhs.CloseSound, (l, r) => l.Combine(r));
                ret.DisplayFilter = this.DisplayFilter.Combine(rhs.DisplayFilter);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool DirtinessScale;
            public ObjectPlacementDefaults.TranslationMask? ObjectPlacementDefaults;
            public bool XALG;
            public Transforms.TranslationMask? Transforms;
            public bool SnapTemplate;
            public bool SnapBehavior;
            public AComponent.TranslationMask? Components;
            public bool Name;
            public Model.TranslationMask? Model;
            public ContainerEntry.TranslationMask? Items;
            public Destructible.TranslationMask? Destructible;
            public bool Flags;
            public bool Keywords;
            public bool ForcedLocations;
            public bool NativeTerminal;
            public ObjectProperty.TranslationMask? Properties;
            public bool AttachParentSlots;
            public SoundReference.TranslationMask? OpenSound;
            public SoundReference.TranslationMask? CloseSound;
            public bool DisplayFilter;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DirtinessScale = defaultOn;
                this.XALG = defaultOn;
                this.SnapTemplate = defaultOn;
                this.SnapBehavior = defaultOn;
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.Keywords = defaultOn;
                this.ForcedLocations = defaultOn;
                this.NativeTerminal = defaultOn;
                this.AttachParentSlots = defaultOn;
                this.DisplayFilter = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((DirtinessScale, null));
                ret.Add((ObjectPlacementDefaults != null ? ObjectPlacementDefaults.OnOverall : DefaultOn, ObjectPlacementDefaults?.GetCrystal()));
                ret.Add((XALG, null));
                ret.Add((Transforms != null ? Transforms.OnOverall : DefaultOn, Transforms?.GetCrystal()));
                ret.Add((SnapTemplate, null));
                ret.Add((SnapBehavior, null));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((Keywords, null));
                ret.Add((ForcedLocations, null));
                ret.Add((NativeTerminal, null));
                ret.Add((Properties == null ? DefaultOn : !Properties.GetCrystal().CopyNothing, Properties?.GetCrystal()));
                ret.Add((AttachParentSlots, null));
                ret.Add((OpenSound != null ? OpenSound.OnOverall : DefaultOn, OpenSound?.GetCrystal()));
                ret.Add((CloseSound != null ? CloseSound.OnOverall : DefaultOn, CloseSound?.GetCrystal()));
                ret.Add((DisplayFilter, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Container_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ContainerCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ContainerSetterCommon.Instance.RemapLinks(this, mapping);
        public Container(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Container(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Container(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Container(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Container(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Container>.ToString(this);
        }

        protected override Type LinkType => typeof(IContainer);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ContainerCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => ContainerSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => ContainerSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => ContainerSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IContainerGetter rhs) return false;
            return ((ContainerCommon)((IContainerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IContainerGetter? obj)
        {
            return ((ContainerCommon)((IContainerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ContainerCommon)((IContainerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ContainerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ContainerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Container CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Container();
            ((ContainerSetterCommon)((IContainerGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Container item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ContainerSetterCommon)((IContainerGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Container GetNew()
        {
            return new Container();
        }

    }
    #endregion

    #region Interface
    public partial interface IContainer :
        IAssetLinkContainer,
        IBaseObject,
        IConstructibleObjectTarget,
        IContainerGetter,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        IItem,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IContainerInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IScripted,
        IStarfieldMajorRecordInternal,
        IStaticTarget,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new Percent DirtinessScale { get; set; }
        new ObjectPlacementDefaults? ObjectPlacementDefaults { get; set; }
        new MemorySlice<Byte>? XALG { get; set; }
        new Transforms? Transforms { get; set; }
        new IFormLinkNullable<ISnapTemplateGetter> SnapTemplate { get; set; }
        new IFormLinkNullable<ISnapTemplateGetter> SnapBehavior { get; set; }
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new ExtendedList<ContainerEntry>? Items { get; set; }
        new Destructible? Destructible { get; set; }
        new Container.Flag Flags { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ForcedLocations { get; set; }
        new IFormLinkNullable<ITerminalMenuGetter> NativeTerminal { get; set; }
        new ExtendedList<ObjectProperty>? Properties { get; set; }
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; set; }
        new SoundReference? OpenSound { get; set; }
        new SoundReference? CloseSound { get; set; }
        new IFormLinkNullable<IFormListGetter> DisplayFilter { get; set; }
        #region Mutagen
        new Container.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IContainerInternal :
        IStarfieldMajorRecordInternal,
        IContainer,
        IContainerGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.CONT)]
    public partial interface IContainerGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBaseObjectGetter,
        IBinaryItem,
        IConstructibleObjectTargetGetter,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        IItemGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IContainerGetter>,
        IMapsToGetter<IContainerGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IScriptedGetter,
        IStaticTargetGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Container_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        Percent DirtinessScale { get; }
        IObjectPlacementDefaultsGetter? ObjectPlacementDefaults { get; }
        ReadOnlyMemorySlice<Byte>? XALG { get; }
        ITransformsGetter? Transforms { get; }
        IFormLinkNullableGetter<ISnapTemplateGetter> SnapTemplate { get; }
        IFormLinkNullableGetter<ISnapTemplateGetter> SnapBehavior { get; }
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IReadOnlyList<IContainerEntryGetter>? Items { get; }
        IDestructibleGetter? Destructible { get; }
        Container.Flag Flags { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ForcedLocations { get; }
        IFormLinkNullableGetter<ITerminalMenuGetter> NativeTerminal { get; }
        IReadOnlyList<IObjectPropertyGetter>? Properties { get; }
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; }
        ISoundReferenceGetter? OpenSound { get; }
        ISoundReferenceGetter? CloseSound { get; }
        IFormLinkNullableGetter<IFormListGetter> DisplayFilter { get; }

        #region Mutagen
        Container.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class ContainerMixIn
    {
        public static void Clear(this IContainerInternal item)
        {
            ((ContainerSetterCommon)((IContainerGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Container.Mask<bool> GetEqualsMask(
            this IContainerGetter item,
            IContainerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IContainerGetter item,
            string? name = null,
            Container.Mask<bool>? printMask = null)
        {
            return ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IContainerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Container.Mask<bool>? printMask = null)
        {
            ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IContainerGetter item,
            IContainerGetter rhs,
            Container.TranslationMask? equalsMask = null)
        {
            return ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IContainerInternal lhs,
            IContainerGetter rhs,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ContainerSetterTranslationCommon)((IContainerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Container.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IContainerInternal lhs,
            IContainerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ContainerSetterTranslationCommon)((IContainerGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Container DeepCopy(
            this IContainerGetter item,
            Container.TranslationMask? copyMask = null)
        {
            return ((ContainerSetterTranslationCommon)((IContainerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Container DeepCopy(
            this IContainerGetter item,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? copyMask = null)
        {
            return ((ContainerSetterTranslationCommon)((IContainerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Container DeepCopy(
            this IContainerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ContainerSetterTranslationCommon)((IContainerGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Container Duplicate(
            this IContainerGetter item,
            FormKey formKey,
            Container.TranslationMask? copyMask = null)
        {
            return ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Container Duplicate(
            this IContainerGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IContainerInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ContainerSetterCommon)((IContainerGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Container_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        DirtinessScale = 9,
        ObjectPlacementDefaults = 10,
        XALG = 11,
        Transforms = 12,
        SnapTemplate = 13,
        SnapBehavior = 14,
        Components = 15,
        Name = 16,
        Model = 17,
        Items = 18,
        Destructible = 19,
        Flags = 20,
        Keywords = 21,
        ForcedLocations = 22,
        NativeTerminal = 23,
        Properties = 24,
        AttachParentSlots = 25,
        OpenSound = 26,
        CloseSound = 27,
        DisplayFilter = 28,
    }
    #endregion

    #region Registration
    internal partial class Container_Registration : ILoquiRegistration
    {
        public static readonly Container_Registration Instance = new Container_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 22;

        public const ushort FieldCount = 29;

        public static readonly Type MaskType = typeof(Container.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Container.ErrorMask);

        public static readonly Type ClassType = typeof(Container);

        public static readonly Type GetterType = typeof(IContainerGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IContainer);

        public static readonly Type? InternalSetterType = typeof(IContainerInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Container";

        public const string Name = "Container";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CONT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.CONT);
            var all = RecordCollection.Factory(
                RecordTypes.CONT,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.ODTY,
                RecordTypes.OPDS,
                RecordTypes.XALG,
                RecordTypes.PTT2,
                RecordTypes.SNTP,
                RecordTypes.SNBH,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.MODT,
                RecordTypes.MOLM,
                RecordTypes.DMDC,
                RecordTypes.BLMS,
                RecordTypes.FLLD,
                RecordTypes.XFLG,
                RecordTypes.MODC,
                RecordTypes.MODF,
                RecordTypes.CNTO,
                RecordTypes.COCT,
                RecordTypes.COED,
                RecordTypes.DEST,
                RecordTypes.DAMC,
                RecordTypes.DSDL,
                RecordTypes.DSTD,
                RecordTypes.DATA,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.FTYP,
                RecordTypes.NTRM,
                RecordTypes.PRPS,
                RecordTypes.APPR,
                RecordTypes.STOP,
                RecordTypes.WED0,
                RecordTypes.WED1,
                RecordTypes.ONAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ContainerBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ContainerSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly ContainerSetterCommon Instance = new ContainerSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IContainerInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.DirtinessScale = default(Percent);
            item.ObjectPlacementDefaults = null;
            item.XALG = default;
            item.Transforms = null;
            item.SnapTemplate.Clear();
            item.SnapBehavior.Clear();
            item.Components.Clear();
            item.Name = default;
            item.Model = null;
            item.Items = null;
            item.Destructible = null;
            item.Flags = default(Container.Flag);
            item.Keywords = null;
            item.ForcedLocations = null;
            item.NativeTerminal.Clear();
            item.Properties = null;
            item.AttachParentSlots = null;
            item.OpenSound = null;
            item.CloseSound = null;
            item.DisplayFilter.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IContainerInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IContainerInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IContainer obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Transforms?.RemapLinks(mapping);
            obj.SnapTemplate.Relink(mapping);
            obj.SnapBehavior.Relink(mapping);
            obj.Components.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Items?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.ForcedLocations?.RemapLinks(mapping);
            obj.NativeTerminal.Relink(mapping);
            obj.Properties?.RemapLinks(mapping);
            obj.AttachParentSlots?.RemapLinks(mapping);
            obj.OpenSound?.RemapLinks(mapping);
            obj.CloseSound?.RemapLinks(mapping);
            obj.DisplayFilter.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IContainer obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IContainer obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Destructible?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IContainerInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IContainerInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ContainerBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ContainerBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Container)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Container)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ContainerCommon : StarfieldMajorRecordCommon
    {
        public new static readonly ContainerCommon Instance = new ContainerCommon();

        public Container.Mask<bool> GetEqualsMask(
            IContainerGetter item,
            IContainerGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Container.Mask<bool>(false);
            ((ContainerCommon)((IContainerGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IContainerGetter item,
            IContainerGetter rhs,
            Container.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.DirtinessScale = item.DirtinessScale.Equals(rhs.DirtinessScale);
            ret.ObjectPlacementDefaults = EqualsMaskHelper.EqualsHelper(
                item.ObjectPlacementDefaults,
                rhs.ObjectPlacementDefaults,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.XALG = MemorySliceExt.SequenceEqual(item.XALG, rhs.XALG);
            ret.Transforms = EqualsMaskHelper.EqualsHelper(
                item.Transforms,
                rhs.Transforms,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SnapTemplate = item.SnapTemplate.Equals(rhs.SnapTemplate);
            ret.SnapBehavior = item.SnapBehavior.Equals(rhs.SnapBehavior);
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.ForcedLocations = item.ForcedLocations.CollectionEqualsHelper(
                rhs.ForcedLocations,
                (l, r) => object.Equals(l, r),
                include);
            ret.NativeTerminal = item.NativeTerminal.Equals(rhs.NativeTerminal);
            ret.Properties = item.Properties.CollectionEqualsHelper(
                rhs.Properties,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AttachParentSlots = item.AttachParentSlots.CollectionEqualsHelper(
                rhs.AttachParentSlots,
                (l, r) => object.Equals(l, r),
                include);
            ret.OpenSound = EqualsMaskHelper.EqualsHelper(
                item.OpenSound,
                rhs.OpenSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.CloseSound = EqualsMaskHelper.EqualsHelper(
                item.CloseSound,
                rhs.CloseSound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DisplayFilter = item.DisplayFilter.Equals(rhs.DisplayFilter);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IContainerGetter item,
            string? name = null,
            Container.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IContainerGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Container.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Container =>");
            }
            else
            {
                sb.AppendLine($"{name} (Container) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IContainerGetter item,
            StructuredStringBuilder sb,
            Container.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if (printMask?.DirtinessScale ?? true)
            {
                sb.AppendItem(item.DirtinessScale, "DirtinessScale");
            }
            if ((printMask?.ObjectPlacementDefaults?.Overall ?? true)
                && item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsItem)
            {
                ObjectPlacementDefaultsItem?.Print(sb, "ObjectPlacementDefaults");
            }
            if ((printMask?.XALG ?? true)
                && item.XALG is {} XALGItem)
            {
                sb.AppendLine($"XALG => {SpanExt.ToHexString(XALGItem)}");
            }
            if ((printMask?.Transforms?.Overall ?? true)
                && item.Transforms is {} TransformsItem)
            {
                TransformsItem?.Print(sb, "Transforms");
            }
            if (printMask?.SnapTemplate ?? true)
            {
                sb.AppendItem(item.SnapTemplate.FormKeyNullable, "SnapTemplate");
            }
            if (printMask?.SnapBehavior ?? true)
            {
                sb.AppendItem(item.SnapBehavior.FormKeyNullable, "SnapBehavior");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.Items?.Overall ?? true)
                && item.Items is {} ItemsItem)
            {
                sb.AppendLine("Items =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ItemsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible is {} DestructibleItem)
            {
                DestructibleItem?.Print(sb, "Destructible");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.ForcedLocations?.Overall ?? true)
                && item.ForcedLocations is {} ForcedLocationsItem)
            {
                sb.AppendLine("ForcedLocations =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ForcedLocationsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.NativeTerminal ?? true)
            {
                sb.AppendItem(item.NativeTerminal.FormKeyNullable, "NativeTerminal");
            }
            if ((printMask?.Properties?.Overall ?? true)
                && item.Properties is {} PropertiesItem)
            {
                sb.AppendLine("Properties =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PropertiesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.AttachParentSlots?.Overall ?? true)
                && item.AttachParentSlots is {} AttachParentSlotsItem)
            {
                sb.AppendLine("AttachParentSlots =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AttachParentSlotsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.OpenSound?.Overall ?? true)
                && item.OpenSound is {} OpenSoundItem)
            {
                OpenSoundItem?.Print(sb, "OpenSound");
            }
            if ((printMask?.CloseSound?.Overall ?? true)
                && item.CloseSound is {} CloseSoundItem)
            {
                CloseSoundItem?.Print(sb, "CloseSound");
            }
            if (printMask?.DisplayFilter ?? true)
            {
                sb.AppendItem(item.DisplayFilter.FormKeyNullable, "DisplayFilter");
            }
        }
        
        public static Container_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Container_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Container_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Container_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Container_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Container_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Container_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Container_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Container_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Container_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Container_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IContainerGetter? lhs,
            IContainerGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Container_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Container_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.DirtinessScale) ?? true))
            {
                if (!lhs.DirtinessScale.Equals(rhs.DirtinessScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.ObjectPlacementDefaults) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectPlacementDefaults, rhs.ObjectPlacementDefaults, out var lhsObjectPlacementDefaults, out var rhsObjectPlacementDefaults, out var isObjectPlacementDefaultsEqual))
                {
                    if (!((ObjectPlacementDefaultsCommon)((IObjectPlacementDefaultsGetter)lhsObjectPlacementDefaults).CommonInstance()!).Equals(lhsObjectPlacementDefaults, rhsObjectPlacementDefaults, equalsMask?.GetSubCrystal((int)Container_FieldIndex.ObjectPlacementDefaults))) return false;
                }
                else if (!isObjectPlacementDefaultsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.XALG) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.XALG, rhs.XALG)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.Transforms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Transforms, rhs.Transforms, out var lhsTransforms, out var rhsTransforms, out var isTransformsEqual))
                {
                    if (!((TransformsCommon)((ITransformsGetter)lhsTransforms).CommonInstance()!).Equals(lhsTransforms, rhsTransforms, equalsMask?.GetSubCrystal((int)Container_FieldIndex.Transforms))) return false;
                }
                else if (!isTransformsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.SnapTemplate) ?? true))
            {
                if (!lhs.SnapTemplate.Equals(rhs.SnapTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.SnapBehavior) ?? true))
            {
                if (!lhs.SnapBehavior.Equals(rhs.SnapBehavior)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Container_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Container_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.Items) ?? true))
            {
                if (!lhs.Items.SequenceEqualNullable(rhs.Items, (l, r) => ((ContainerEntryCommon)((IContainerEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Container_FieldIndex.Items)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.Destructible) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Destructible, rhs.Destructible, out var lhsDestructible, out var rhsDestructible, out var isDestructibleEqual))
                {
                    if (!((DestructibleCommon)((IDestructibleGetter)lhsDestructible).CommonInstance()!).Equals(lhsDestructible, rhsDestructible, equalsMask?.GetSubCrystal((int)Container_FieldIndex.Destructible))) return false;
                }
                else if (!isDestructibleEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.ForcedLocations) ?? true))
            {
                if (!lhs.ForcedLocations.SequenceEqualNullable(rhs.ForcedLocations)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.NativeTerminal) ?? true))
            {
                if (!lhs.NativeTerminal.Equals(rhs.NativeTerminal)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.Properties) ?? true))
            {
                if (!lhs.Properties.SequenceEqualNullable(rhs.Properties, (l, r) => ((ObjectPropertyCommon)((IObjectPropertyGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Container_FieldIndex.Properties)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.AttachParentSlots) ?? true))
            {
                if (!lhs.AttachParentSlots.SequenceEqualNullable(rhs.AttachParentSlots)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.OpenSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.OpenSound, rhs.OpenSound, out var lhsOpenSound, out var rhsOpenSound, out var isOpenSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsOpenSound).CommonInstance()!).Equals(lhsOpenSound, rhsOpenSound, equalsMask?.GetSubCrystal((int)Container_FieldIndex.OpenSound))) return false;
                }
                else if (!isOpenSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.CloseSound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CloseSound, rhs.CloseSound, out var lhsCloseSound, out var rhsCloseSound, out var isCloseSoundEqual))
                {
                    if (!((SoundReferenceCommon)((ISoundReferenceGetter)lhsCloseSound).CommonInstance()!).Equals(lhsCloseSound, rhsCloseSound, equalsMask?.GetSubCrystal((int)Container_FieldIndex.CloseSound))) return false;
                }
                else if (!isCloseSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Container_FieldIndex.DisplayFilter) ?? true))
            {
                if (!lhs.DisplayFilter.Equals(rhs.DisplayFilter)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IContainerGetter?)lhs,
                rhs: rhs as IContainerGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IContainerGetter?)lhs,
                rhs: rhs as IContainerGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IContainerGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            hash.Add(item.DirtinessScale);
            if (item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsitem)
            {
                hash.Add(ObjectPlacementDefaultsitem);
            }
            if (item.XALG is {} XALGItem)
            {
                hash.Add(XALGItem);
            }
            if (item.Transforms is {} Transformsitem)
            {
                hash.Add(Transformsitem);
            }
            hash.Add(item.SnapTemplate);
            hash.Add(item.SnapBehavior);
            hash.Add(item.Components);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Items);
            if (item.Destructible is {} Destructibleitem)
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.Flags);
            hash.Add(item.Keywords);
            hash.Add(item.ForcedLocations);
            hash.Add(item.NativeTerminal);
            hash.Add(item.Properties);
            hash.Add(item.AttachParentSlots);
            if (item.OpenSound is {} OpenSounditem)
            {
                hash.Add(OpenSounditem);
            }
            if (item.CloseSound is {} CloseSounditem)
            {
                hash.Add(CloseSounditem);
            }
            hash.Add(item.DisplayFilter);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IContainerGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IContainerGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Container.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IContainerGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Transforms is {} TransformsItems)
            {
                foreach (var item in TransformsItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.SnapTemplate, out var SnapTemplateInfo))
            {
                yield return SnapTemplateInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SnapBehavior, out var SnapBehaviorInfo))
            {
                yield return SnapBehaviorInfo;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Items is {} ItemsItem)
            {
                foreach (var item in ItemsItem.WhereCastable<IContainerEntryGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ForcedLocations is {} ForcedLocationsItem)
            {
                foreach (var item in ForcedLocationsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.NativeTerminal, out var NativeTerminalInfo))
            {
                yield return NativeTerminalInfo;
            }
            if (obj.Properties is {} PropertiesItem)
            {
                foreach (var item in PropertiesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.AttachParentSlots is {} AttachParentSlotsItem)
            {
                foreach (var item in AttachParentSlotsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.OpenSound is {} OpenSoundItems)
            {
                foreach (var item in OpenSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.CloseSound is {} CloseSoundItems)
            {
                foreach (var item in CloseSoundItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.DisplayFilter, out var DisplayFilterInfo))
            {
                yield return DisplayFilterInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IContainerGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Container Duplicate(
            IContainerGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Container(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IContainerGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IContainerGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ContainerSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly ContainerSetterTranslationCommon Instance = new ContainerSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IContainerInternal item,
            IContainerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IContainer item,
            IContainerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Container_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Container_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.DirtinessScale) ?? true))
            {
                item.DirtinessScale = rhs.DirtinessScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.ObjectPlacementDefaults) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.ObjectPlacementDefaults);
                try
                {
                    if(rhs.ObjectPlacementDefaults is {} rhsObjectPlacementDefaults)
                    {
                        item.ObjectPlacementDefaults = rhsObjectPlacementDefaults.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Container_FieldIndex.ObjectPlacementDefaults));
                    }
                    else
                    {
                        item.ObjectPlacementDefaults = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.XALG) ?? true))
            {
                if(rhs.XALG is {} XALGrhs)
                {
                    item.XALG = XALGrhs.ToArray();
                }
                else
                {
                    item.XALG = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Transforms) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Transforms);
                try
                {
                    if(rhs.Transforms is {} rhsTransforms)
                    {
                        item.Transforms = rhsTransforms.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Container_FieldIndex.Transforms));
                    }
                    else
                    {
                        item.Transforms = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.SnapTemplate) ?? true))
            {
                item.SnapTemplate.SetTo(rhs.SnapTemplate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.SnapBehavior) ?? true))
            {
                item.SnapBehavior.SetTo(rhs.SnapBehavior.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Container_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Items);
                try
                {
                    if ((rhs.Items != null))
                    {
                        item.Items = 
                            rhs.Items
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ContainerEntry>();
                    }
                    else
                    {
                        item.Items = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible is {} rhsDestructible)
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Container_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.ForcedLocations) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.ForcedLocations);
                try
                {
                    if ((rhs.ForcedLocations != null))
                    {
                        item.ForcedLocations = 
                            rhs.ForcedLocations
                                .Select(b => (IFormLinkGetter<ILocationReferenceTypeGetter>)new FormLink<ILocationReferenceTypeGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>();
                    }
                    else
                    {
                        item.ForcedLocations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.NativeTerminal) ?? true))
            {
                item.NativeTerminal.SetTo(rhs.NativeTerminal.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.Properties) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.Properties);
                try
                {
                    if ((rhs.Properties != null))
                    {
                        item.Properties = 
                            rhs.Properties
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ObjectProperty>();
                    }
                    else
                    {
                        item.Properties = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.AttachParentSlots) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.AttachParentSlots);
                try
                {
                    if ((rhs.AttachParentSlots != null))
                    {
                        item.AttachParentSlots = 
                            rhs.AttachParentSlots
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.AttachParentSlots = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.OpenSound) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.OpenSound);
                try
                {
                    if(rhs.OpenSound is {} rhsOpenSound)
                    {
                        item.OpenSound = rhsOpenSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Container_FieldIndex.OpenSound));
                    }
                    else
                    {
                        item.OpenSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.CloseSound) ?? true))
            {
                errorMask?.PushIndex((int)Container_FieldIndex.CloseSound);
                try
                {
                    if(rhs.CloseSound is {} rhsCloseSound)
                    {
                        item.CloseSound = rhsCloseSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Container_FieldIndex.CloseSound));
                    }
                    else
                    {
                        item.CloseSound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Container_FieldIndex.DisplayFilter) ?? true))
            {
                item.DisplayFilter.SetTo(rhs.DisplayFilter.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IContainer item,
            IContainerGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IContainerInternal)item,
                rhs: (IContainerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IContainer)item,
                rhs: (IContainerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IContainerInternal)item,
                rhs: (IContainerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IContainer)item,
                rhs: (IContainerGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Container DeepCopy(
            IContainerGetter item,
            Container.TranslationMask? copyMask = null)
        {
            Container ret = (Container)((ContainerCommon)((IContainerGetter)item).CommonInstance()!).GetNew();
            ((ContainerSetterTranslationCommon)((IContainerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Container DeepCopy(
            IContainerGetter item,
            out Container.ErrorMask errorMask,
            Container.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Container ret = (Container)((ContainerCommon)((IContainerGetter)item).CommonInstance()!).GetNew();
            ((ContainerSetterTranslationCommon)((IContainerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Container.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Container DeepCopy(
            IContainerGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Container ret = (Container)((ContainerCommon)((IContainerGetter)item).CommonInstance()!).GetNew();
            ((ContainerSetterTranslationCommon)((IContainerGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Container
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Container_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Container_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ContainerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ContainerSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ContainerSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class ContainerBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ContainerBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IContainerGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            PercentBinaryTranslation.Write(
                writer: writer,
                item: item.DirtinessScale,
                integerType: FloatIntegerType.UInt,
                header: translationParams.ConvertToCustom(RecordTypes.ODTY));
            if (item.ObjectPlacementDefaults is {} ObjectPlacementDefaultsItem)
            {
                ((ObjectPlacementDefaultsBinaryWriteTranslation)((IBinaryItem)ObjectPlacementDefaultsItem).BinaryWriteTranslator).Write(
                    item: ObjectPlacementDefaultsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.XALG,
                header: translationParams.ConvertToCustom(RecordTypes.XALG));
            if (item.Transforms is {} TransformsItem)
            {
                ((TransformsBinaryWriteTranslation)((IBinaryItem)TransformsItem).BinaryWriteTranslator).Write(
                    item: TransformsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SnapTemplate,
                header: translationParams.ConvertToCustom(RecordTypes.SNTP));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SnapBehavior,
                header: translationParams.ConvertToCustom(RecordTypes.SNBH));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IContainerEntryGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Items,
                counterType: RecordTypes.COCT,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IContainerEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ContainerEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.Destructible is {} DestructibleItem)
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                EnumBinaryTranslation<Container.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILocationReferenceTypeGetter>>.Instance.Write(
                writer: writer,
                items: item.ForcedLocations,
                recordType: translationParams.ConvertToCustom(RecordTypes.FTYP),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ILocationReferenceTypeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NativeTerminal,
                header: translationParams.ConvertToCustom(RecordTypes.NTRM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IObjectPropertyGetter>.Instance.Write(
                writer: writer,
                items: item.Properties,
                recordType: translationParams.ConvertToCustom(RecordTypes.PRPS),
                transl: (MutagenWriter subWriter, IObjectPropertyGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ObjectPropertyBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.AttachParentSlots,
                recordType: translationParams.ConvertToCustom(RecordTypes.APPR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            using (HeaderExport.Subrecord(writer, RecordTypes.STOP)) { }
            if (item.OpenSound is {} OpenSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.WED0))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)OpenSoundItem).BinaryWriteTranslator).Write(
                        item: OpenSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.CloseSound is {} CloseSoundItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.WED1))
                {
                    ((SoundReferenceBinaryWriteTranslation)((IBinaryItem)CloseSoundItem).BinaryWriteTranslator).Write(
                        item: CloseSoundItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DisplayFilter,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
        }

        public void Write(
            MutagenWriter writer,
            IContainerGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.CONT,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IContainerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IContainerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IContainerGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ContainerBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly ContainerBinaryCreateTranslation Instance = new ContainerBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CONT;
        public static ParseResult FillBinaryRecordTypes(
            IContainerInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Starfield.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Container_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Starfield.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Container_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DirtinessScale = PercentBinaryTranslation.Parse(
                        reader: frame,
                        integerType: FloatIntegerType.UInt);
                    return (int)Container_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.OPDS:
                {
                    item.ObjectPlacementDefaults = Mutagen.Bethesda.Starfield.ObjectPlacementDefaults.CreateFromBinary(frame: frame);
                    return (int)Container_FieldIndex.ObjectPlacementDefaults;
                }
                case RecordTypeInts.XALG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XALG = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Container_FieldIndex.XALG;
                }
                case RecordTypeInts.PTT2:
                {
                    item.Transforms = Mutagen.Bethesda.Starfield.Transforms.CreateFromBinary(frame: frame);
                    return (int)Container_FieldIndex.Transforms;
                }
                case RecordTypeInts.SNTP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SnapTemplate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Container_FieldIndex.SnapTemplate;
                }
                case RecordTypeInts.SNBH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SnapBehavior.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Container_FieldIndex.SnapBehavior;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Container_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Container_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    item.Model = Mutagen.Bethesda.Starfield.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Container_FieldIndex.Model;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    item.Items = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ContainerEntry>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.COCT,
                            triggeringRecord: ContainerEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ContainerEntry.TryCreateFromBinary)
                        .CastExtendedList<ContainerEntry>();
                    return (int)Container_FieldIndex.Items;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSDL:
                case RecordTypeInts.DSTD:
                {
                    item.Destructible = Mutagen.Bethesda.Starfield.Destructible.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Container_FieldIndex.Destructible;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.Flags = EnumBinaryTranslation<Container.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    return (int)Container_FieldIndex.Flags;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Container_FieldIndex.Keywords;
                }
                case RecordTypeInts.FTYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ForcedLocations = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILocationReferenceTypeGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>();
                    return (int)Container_FieldIndex.ForcedLocations;
                }
                case RecordTypeInts.NTRM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NativeTerminal.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Container_FieldIndex.NativeTerminal;
                }
                case RecordTypeInts.PRPS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Properties = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ObjectProperty>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: ObjectProperty.TryCreateFromBinary)
                        .CastExtendedList<ObjectProperty>();
                    return (int)Container_FieldIndex.Properties;
                }
                case RecordTypeInts.APPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttachParentSlots = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Container_FieldIndex.AttachParentSlots;
                }
                case RecordTypeInts.STOP:
                {
                    frame.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.WED0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.OpenSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Container_FieldIndex.OpenSound;
                }
                case RecordTypeInts.WED1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.CloseSound = Mutagen.Bethesda.Starfield.SoundReference.CreateFromBinary(frame: frame);
                    return (int)Container_FieldIndex.CloseSound;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DisplayFilter.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Container_FieldIndex.DisplayFilter;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class ContainerBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class ContainerBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IContainerGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Container_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Container_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ContainerCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ContainerSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ContainerCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ContainerCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ContainerBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ContainerBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IContainer);

        public Container.MajorFlag MajorFlags => (Container.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region DirtinessScale
        private int? _DirtinessScaleLocation;
        public Percent DirtinessScale => _DirtinessScaleLocation.HasValue ? PercentBinaryTranslation.GetPercent(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DirtinessScaleLocation.Value, _package.MetaData.Constants), FloatIntegerType.UInt) : default(Percent);
        #endregion
        #region ObjectPlacementDefaults
        private RangeInt32? _ObjectPlacementDefaultsLocation;
        public IObjectPlacementDefaultsGetter? ObjectPlacementDefaults => _ObjectPlacementDefaultsLocation.HasValue ? ObjectPlacementDefaultsBinaryOverlay.ObjectPlacementDefaultsFactory(_recordData.Slice(_ObjectPlacementDefaultsLocation!.Value.Min), _package) : default;
        #endregion
        #region XALG
        private int? _XALGLocation;
        public ReadOnlyMemorySlice<Byte>? XALG => _XALGLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _XALGLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Transforms
        private RangeInt32? _TransformsLocation;
        public ITransformsGetter? Transforms => _TransformsLocation.HasValue ? TransformsBinaryOverlay.TransformsFactory(_recordData.Slice(_TransformsLocation!.Value.Min), _package) : default;
        #endregion
        #region SnapTemplate
        private int? _SnapTemplateLocation;
        public IFormLinkNullableGetter<ISnapTemplateGetter> SnapTemplate => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISnapTemplateGetter>(_package, _recordData, _SnapTemplateLocation);
        #endregion
        #region SnapBehavior
        private int? _SnapBehaviorLocation;
        public IFormLinkNullableGetter<ISnapTemplateGetter> SnapBehavior => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISnapTemplateGetter>(_package, _recordData, _SnapBehaviorLocation);
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        public IReadOnlyList<IContainerEntryGetter>? Items { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        private RangeInt32? _DATALocation;
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value.Min;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Container.Flag Flags => _Flags_IsSet ? (Container.Flag)_recordData.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? ForcedLocations { get; private set; }
        #region NativeTerminal
        private int? _NativeTerminalLocation;
        public IFormLinkNullableGetter<ITerminalMenuGetter> NativeTerminal => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITerminalMenuGetter>(_package, _recordData, _NativeTerminalLocation);
        #endregion
        public IReadOnlyList<IObjectPropertyGetter>? Properties { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? AttachParentSlots { get; private set; }
        public ISoundReferenceGetter? OpenSound { get; private set; }
        public ISoundReferenceGetter? CloseSound { get; private set; }
        #region DisplayFilter
        private int? _DisplayFilterLocation;
        public IFormLinkNullableGetter<IFormListGetter> DisplayFilter => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _DisplayFilterLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ContainerBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IContainerGetter ContainerFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ContainerBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IContainerGetter ContainerFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ContainerFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Container_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Container_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ODTY:
                {
                    _DirtinessScaleLocation = (stream.Position - offset);
                    return (int)Container_FieldIndex.DirtinessScale;
                }
                case RecordTypeInts.OPDS:
                {
                    _ObjectPlacementDefaultsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Container_FieldIndex.ObjectPlacementDefaults;
                }
                case RecordTypeInts.XALG:
                {
                    _XALGLocation = (stream.Position - offset);
                    return (int)Container_FieldIndex.XALG;
                }
                case RecordTypeInts.PTT2:
                {
                    _TransformsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Container_FieldIndex.Transforms;
                }
                case RecordTypeInts.SNTP:
                {
                    _SnapTemplateLocation = (stream.Position - offset);
                    return (int)Container_FieldIndex.SnapTemplate;
                }
                case RecordTypeInts.SNBH:
                {
                    _SnapBehaviorLocation = (stream.Position - offset);
                    return (int)Container_FieldIndex.SnapBehavior;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Container_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Container_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                case RecordTypeInts.MODT:
                case RecordTypeInts.MOLM:
                case RecordTypeInts.DMDC:
                case RecordTypeInts.BLMS:
                case RecordTypeInts.FLLD:
                case RecordTypeInts.XFLG:
                case RecordTypeInts.MODC:
                case RecordTypeInts.MODF:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Container_FieldIndex.Model;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    this.Items = BinaryOverlayList.FactoryByCountPerItem<IContainerEntryGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: ContainerEntry_Registration.TriggerSpecs,
                        countType: RecordTypes.COCT,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ContainerEntryBinaryOverlay.ContainerEntryFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)Container_FieldIndex.Items;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DAMC:
                case RecordTypeInts.DSDL:
                case RecordTypeInts.DSTD:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Container_FieldIndex.Destructible;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Container_FieldIndex.Flags;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Container_FieldIndex.Keywords;
                }
                case RecordTypeInts.FTYP:
                {
                    this.ForcedLocations = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<ILocationReferenceTypeGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ILocationReferenceTypeGetter>(p, s));
                    return (int)Container_FieldIndex.ForcedLocations;
                }
                case RecordTypeInts.NTRM:
                {
                    _NativeTerminalLocation = (stream.Position - offset);
                    return (int)Container_FieldIndex.NativeTerminal;
                }
                case RecordTypeInts.PRPS:
                {
                    this.Properties = BinaryOverlayList.FactoryByStartIndexWithTrigger<IObjectPropertyGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => ObjectPropertyBinaryOverlay.ObjectPropertyFactory(s, p));
                    return (int)Container_FieldIndex.Properties;
                }
                case RecordTypeInts.APPR:
                {
                    this.AttachParentSlots = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Container_FieldIndex.AttachParentSlots;
                }
                case RecordTypeInts.STOP:
                {
                    stream.ReadSubrecord();
                    return default(int?);
                }
                case RecordTypeInts.WED0:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.OpenSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Container_FieldIndex.OpenSound;
                }
                case RecordTypeInts.WED1:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.CloseSound = SoundReferenceBinaryOverlay.SoundReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Container_FieldIndex.CloseSound;
                }
                case RecordTypeInts.ONAM:
                {
                    _DisplayFilterLocation = (stream.Position - offset);
                    return (int)Container_FieldIndex.DisplayFilter;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ContainerMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Container>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IContainerGetter rhs) return false;
            return ((ContainerCommon)((IContainerGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IContainerGetter? obj)
        {
            return ((ContainerCommon)((IContainerGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ContainerCommon)((IContainerGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

