/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BiomeBTPSItem :
        IBiomeBTPSItem,
        IEquatable<IBiomeBTPSItemGetter>,
        ILoquiObjectSetter<BiomeBTPSItem>
    {
        #region Ctor
        public BiomeBTPSItem()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NoiseOffsetU
        public Single NoiseOffsetU { get; set; } = default(Single);
        #endregion
        #region NoiseOffsetV
        public Single NoiseOffsetV { get; set; } = default(Single);
        #endregion
        #region NoiseScaleU
        public Single NoiseScaleU { get; set; } = default(Single);
        #endregion
        #region NoiseScaleV
        public Single NoiseScaleV { get; set; } = default(Single);
        #endregion
        #region NoiseContrast
        public Single NoiseContrast { get; set; } = default(Single);
        #endregion
        #region AltTextureCoverage
        public Single AltTextureCoverage { get; set; } = default(Single);
        #endregion
        #region AlternateDataContributionMin
        public Single AlternateDataContributionMin { get; set; } = default(Single);
        #endregion
        #region AlternateDataContributionMax
        public Single AlternateDataContributionMax { get; set; } = default(Single);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeBTPSItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeBTPSItemGetter rhs) return false;
            return ((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeBTPSItemGetter? obj)
        {
            return ((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NoiseOffsetU = initialValue;
                this.NoiseOffsetV = initialValue;
                this.NoiseScaleU = initialValue;
                this.NoiseScaleV = initialValue;
                this.NoiseContrast = initialValue;
                this.AltTextureCoverage = initialValue;
                this.AlternateDataContributionMin = initialValue;
                this.AlternateDataContributionMax = initialValue;
            }

            public Mask(
                TItem NoiseOffsetU,
                TItem NoiseOffsetV,
                TItem NoiseScaleU,
                TItem NoiseScaleV,
                TItem NoiseContrast,
                TItem AltTextureCoverage,
                TItem AlternateDataContributionMin,
                TItem AlternateDataContributionMax)
            {
                this.NoiseOffsetU = NoiseOffsetU;
                this.NoiseOffsetV = NoiseOffsetV;
                this.NoiseScaleU = NoiseScaleU;
                this.NoiseScaleV = NoiseScaleV;
                this.NoiseContrast = NoiseContrast;
                this.AltTextureCoverage = AltTextureCoverage;
                this.AlternateDataContributionMin = AlternateDataContributionMin;
                this.AlternateDataContributionMax = AlternateDataContributionMax;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem NoiseOffsetU;
            public TItem NoiseOffsetV;
            public TItem NoiseScaleU;
            public TItem NoiseScaleV;
            public TItem NoiseContrast;
            public TItem AltTextureCoverage;
            public TItem AlternateDataContributionMin;
            public TItem AlternateDataContributionMax;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NoiseOffsetU, rhs.NoiseOffsetU)) return false;
                if (!object.Equals(this.NoiseOffsetV, rhs.NoiseOffsetV)) return false;
                if (!object.Equals(this.NoiseScaleU, rhs.NoiseScaleU)) return false;
                if (!object.Equals(this.NoiseScaleV, rhs.NoiseScaleV)) return false;
                if (!object.Equals(this.NoiseContrast, rhs.NoiseContrast)) return false;
                if (!object.Equals(this.AltTextureCoverage, rhs.AltTextureCoverage)) return false;
                if (!object.Equals(this.AlternateDataContributionMin, rhs.AlternateDataContributionMin)) return false;
                if (!object.Equals(this.AlternateDataContributionMax, rhs.AlternateDataContributionMax)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NoiseOffsetU);
                hash.Add(this.NoiseOffsetV);
                hash.Add(this.NoiseScaleU);
                hash.Add(this.NoiseScaleV);
                hash.Add(this.NoiseContrast);
                hash.Add(this.AltTextureCoverage);
                hash.Add(this.AlternateDataContributionMin);
                hash.Add(this.AlternateDataContributionMax);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.NoiseOffsetU)) return false;
                if (!eval(this.NoiseOffsetV)) return false;
                if (!eval(this.NoiseScaleU)) return false;
                if (!eval(this.NoiseScaleV)) return false;
                if (!eval(this.NoiseContrast)) return false;
                if (!eval(this.AltTextureCoverage)) return false;
                if (!eval(this.AlternateDataContributionMin)) return false;
                if (!eval(this.AlternateDataContributionMax)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.NoiseOffsetU)) return true;
                if (eval(this.NoiseOffsetV)) return true;
                if (eval(this.NoiseScaleU)) return true;
                if (eval(this.NoiseScaleV)) return true;
                if (eval(this.NoiseContrast)) return true;
                if (eval(this.AltTextureCoverage)) return true;
                if (eval(this.AlternateDataContributionMin)) return true;
                if (eval(this.AlternateDataContributionMax)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BiomeBTPSItem.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.NoiseOffsetU = eval(this.NoiseOffsetU);
                obj.NoiseOffsetV = eval(this.NoiseOffsetV);
                obj.NoiseScaleU = eval(this.NoiseScaleU);
                obj.NoiseScaleV = eval(this.NoiseScaleV);
                obj.NoiseContrast = eval(this.NoiseContrast);
                obj.AltTextureCoverage = eval(this.AltTextureCoverage);
                obj.AlternateDataContributionMin = eval(this.AlternateDataContributionMin);
                obj.AlternateDataContributionMax = eval(this.AlternateDataContributionMax);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BiomeBTPSItem.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BiomeBTPSItem.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BiomeBTPSItem.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.NoiseOffsetU ?? true)
                    {
                        sb.AppendItem(NoiseOffsetU, "NoiseOffsetU");
                    }
                    if (printMask?.NoiseOffsetV ?? true)
                    {
                        sb.AppendItem(NoiseOffsetV, "NoiseOffsetV");
                    }
                    if (printMask?.NoiseScaleU ?? true)
                    {
                        sb.AppendItem(NoiseScaleU, "NoiseScaleU");
                    }
                    if (printMask?.NoiseScaleV ?? true)
                    {
                        sb.AppendItem(NoiseScaleV, "NoiseScaleV");
                    }
                    if (printMask?.NoiseContrast ?? true)
                    {
                        sb.AppendItem(NoiseContrast, "NoiseContrast");
                    }
                    if (printMask?.AltTextureCoverage ?? true)
                    {
                        sb.AppendItem(AltTextureCoverage, "AltTextureCoverage");
                    }
                    if (printMask?.AlternateDataContributionMin ?? true)
                    {
                        sb.AppendItem(AlternateDataContributionMin, "AlternateDataContributionMin");
                    }
                    if (printMask?.AlternateDataContributionMax ?? true)
                    {
                        sb.AppendItem(AlternateDataContributionMax, "AlternateDataContributionMax");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? NoiseOffsetU;
            public Exception? NoiseOffsetV;
            public Exception? NoiseScaleU;
            public Exception? NoiseScaleV;
            public Exception? NoiseContrast;
            public Exception? AltTextureCoverage;
            public Exception? AlternateDataContributionMin;
            public Exception? AlternateDataContributionMax;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BiomeBTPSItem_FieldIndex enu = (BiomeBTPSItem_FieldIndex)index;
                switch (enu)
                {
                    case BiomeBTPSItem_FieldIndex.NoiseOffsetU:
                        return NoiseOffsetU;
                    case BiomeBTPSItem_FieldIndex.NoiseOffsetV:
                        return NoiseOffsetV;
                    case BiomeBTPSItem_FieldIndex.NoiseScaleU:
                        return NoiseScaleU;
                    case BiomeBTPSItem_FieldIndex.NoiseScaleV:
                        return NoiseScaleV;
                    case BiomeBTPSItem_FieldIndex.NoiseContrast:
                        return NoiseContrast;
                    case BiomeBTPSItem_FieldIndex.AltTextureCoverage:
                        return AltTextureCoverage;
                    case BiomeBTPSItem_FieldIndex.AlternateDataContributionMin:
                        return AlternateDataContributionMin;
                    case BiomeBTPSItem_FieldIndex.AlternateDataContributionMax:
                        return AlternateDataContributionMax;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BiomeBTPSItem_FieldIndex enu = (BiomeBTPSItem_FieldIndex)index;
                switch (enu)
                {
                    case BiomeBTPSItem_FieldIndex.NoiseOffsetU:
                        this.NoiseOffsetU = ex;
                        break;
                    case BiomeBTPSItem_FieldIndex.NoiseOffsetV:
                        this.NoiseOffsetV = ex;
                        break;
                    case BiomeBTPSItem_FieldIndex.NoiseScaleU:
                        this.NoiseScaleU = ex;
                        break;
                    case BiomeBTPSItem_FieldIndex.NoiseScaleV:
                        this.NoiseScaleV = ex;
                        break;
                    case BiomeBTPSItem_FieldIndex.NoiseContrast:
                        this.NoiseContrast = ex;
                        break;
                    case BiomeBTPSItem_FieldIndex.AltTextureCoverage:
                        this.AltTextureCoverage = ex;
                        break;
                    case BiomeBTPSItem_FieldIndex.AlternateDataContributionMin:
                        this.AlternateDataContributionMin = ex;
                        break;
                    case BiomeBTPSItem_FieldIndex.AlternateDataContributionMax:
                        this.AlternateDataContributionMax = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BiomeBTPSItem_FieldIndex enu = (BiomeBTPSItem_FieldIndex)index;
                switch (enu)
                {
                    case BiomeBTPSItem_FieldIndex.NoiseOffsetU:
                        this.NoiseOffsetU = (Exception?)obj;
                        break;
                    case BiomeBTPSItem_FieldIndex.NoiseOffsetV:
                        this.NoiseOffsetV = (Exception?)obj;
                        break;
                    case BiomeBTPSItem_FieldIndex.NoiseScaleU:
                        this.NoiseScaleU = (Exception?)obj;
                        break;
                    case BiomeBTPSItem_FieldIndex.NoiseScaleV:
                        this.NoiseScaleV = (Exception?)obj;
                        break;
                    case BiomeBTPSItem_FieldIndex.NoiseContrast:
                        this.NoiseContrast = (Exception?)obj;
                        break;
                    case BiomeBTPSItem_FieldIndex.AltTextureCoverage:
                        this.AltTextureCoverage = (Exception?)obj;
                        break;
                    case BiomeBTPSItem_FieldIndex.AlternateDataContributionMin:
                        this.AlternateDataContributionMin = (Exception?)obj;
                        break;
                    case BiomeBTPSItem_FieldIndex.AlternateDataContributionMax:
                        this.AlternateDataContributionMax = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (NoiseOffsetU != null) return true;
                if (NoiseOffsetV != null) return true;
                if (NoiseScaleU != null) return true;
                if (NoiseScaleV != null) return true;
                if (NoiseContrast != null) return true;
                if (AltTextureCoverage != null) return true;
                if (AlternateDataContributionMin != null) return true;
                if (AlternateDataContributionMax != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(NoiseOffsetU, "NoiseOffsetU");
                }
                {
                    sb.AppendItem(NoiseOffsetV, "NoiseOffsetV");
                }
                {
                    sb.AppendItem(NoiseScaleU, "NoiseScaleU");
                }
                {
                    sb.AppendItem(NoiseScaleV, "NoiseScaleV");
                }
                {
                    sb.AppendItem(NoiseContrast, "NoiseContrast");
                }
                {
                    sb.AppendItem(AltTextureCoverage, "AltTextureCoverage");
                }
                {
                    sb.AppendItem(AlternateDataContributionMin, "AlternateDataContributionMin");
                }
                {
                    sb.AppendItem(AlternateDataContributionMax, "AlternateDataContributionMax");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NoiseOffsetU = this.NoiseOffsetU.Combine(rhs.NoiseOffsetU);
                ret.NoiseOffsetV = this.NoiseOffsetV.Combine(rhs.NoiseOffsetV);
                ret.NoiseScaleU = this.NoiseScaleU.Combine(rhs.NoiseScaleU);
                ret.NoiseScaleV = this.NoiseScaleV.Combine(rhs.NoiseScaleV);
                ret.NoiseContrast = this.NoiseContrast.Combine(rhs.NoiseContrast);
                ret.AltTextureCoverage = this.AltTextureCoverage.Combine(rhs.AltTextureCoverage);
                ret.AlternateDataContributionMin = this.AlternateDataContributionMin.Combine(rhs.AlternateDataContributionMin);
                ret.AlternateDataContributionMax = this.AlternateDataContributionMax.Combine(rhs.AlternateDataContributionMax);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool NoiseOffsetU;
            public bool NoiseOffsetV;
            public bool NoiseScaleU;
            public bool NoiseScaleV;
            public bool NoiseContrast;
            public bool AltTextureCoverage;
            public bool AlternateDataContributionMin;
            public bool AlternateDataContributionMax;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.NoiseOffsetU = defaultOn;
                this.NoiseOffsetV = defaultOn;
                this.NoiseScaleU = defaultOn;
                this.NoiseScaleV = defaultOn;
                this.NoiseContrast = defaultOn;
                this.AltTextureCoverage = defaultOn;
                this.AlternateDataContributionMin = defaultOn;
                this.AlternateDataContributionMax = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NoiseOffsetU, null));
                ret.Add((NoiseOffsetV, null));
                ret.Add((NoiseScaleU, null));
                ret.Add((NoiseScaleV, null));
                ret.Add((NoiseContrast, null));
                ret.Add((AltTextureCoverage, null));
                ret.Add((AlternateDataContributionMin, null));
                ret.Add((AlternateDataContributionMax, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeBTPSItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeBTPSItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static BiomeBTPSItem CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BiomeBTPSItem();
            ((BiomeBTPSItemSetterCommon)((IBiomeBTPSItemGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BiomeBTPSItem item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BiomeBTPSItemSetterCommon)((IBiomeBTPSItemGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BiomeBTPSItem GetNew()
        {
            return new BiomeBTPSItem();
        }

    }
    #endregion

    #region Interface
    public partial interface IBiomeBTPSItem :
        IBiomeBTPSItemGetter,
        ILoquiObjectSetter<IBiomeBTPSItem>
    {
        new Single NoiseOffsetU { get; set; }
        new Single NoiseOffsetV { get; set; }
        new Single NoiseScaleU { get; set; }
        new Single NoiseScaleV { get; set; }
        new Single NoiseContrast { get; set; }
        new Single AltTextureCoverage { get; set; }
        new Single AlternateDataContributionMin { get; set; }
        new Single AlternateDataContributionMax { get; set; }
    }

    public partial interface IBiomeBTPSItemGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IBiomeBTPSItemGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => BiomeBTPSItem_Registration.Instance;
        Single NoiseOffsetU { get; }
        Single NoiseOffsetV { get; }
        Single NoiseScaleU { get; }
        Single NoiseScaleV { get; }
        Single NoiseContrast { get; }
        Single AltTextureCoverage { get; }
        Single AlternateDataContributionMin { get; }
        Single AlternateDataContributionMax { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BiomeBTPSItemMixIn
    {
        public static void Clear(this IBiomeBTPSItem item)
        {
            ((BiomeBTPSItemSetterCommon)((IBiomeBTPSItemGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BiomeBTPSItem.Mask<bool> GetEqualsMask(
            this IBiomeBTPSItemGetter item,
            IBiomeBTPSItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBiomeBTPSItemGetter item,
            string? name = null,
            BiomeBTPSItem.Mask<bool>? printMask = null)
        {
            return ((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBiomeBTPSItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeBTPSItem.Mask<bool>? printMask = null)
        {
            ((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBiomeBTPSItemGetter item,
            IBiomeBTPSItemGetter rhs,
            BiomeBTPSItem.TranslationMask? equalsMask = null)
        {
            return ((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBiomeBTPSItem lhs,
            IBiomeBTPSItemGetter rhs)
        {
            ((BiomeBTPSItemSetterTranslationCommon)((IBiomeBTPSItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeBTPSItem lhs,
            IBiomeBTPSItemGetter rhs,
            BiomeBTPSItem.TranslationMask? copyMask = null)
        {
            ((BiomeBTPSItemSetterTranslationCommon)((IBiomeBTPSItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeBTPSItem lhs,
            IBiomeBTPSItemGetter rhs,
            out BiomeBTPSItem.ErrorMask errorMask,
            BiomeBTPSItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BiomeBTPSItemSetterTranslationCommon)((IBiomeBTPSItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BiomeBTPSItem.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBiomeBTPSItem lhs,
            IBiomeBTPSItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BiomeBTPSItemSetterTranslationCommon)((IBiomeBTPSItemGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BiomeBTPSItem DeepCopy(
            this IBiomeBTPSItemGetter item,
            BiomeBTPSItem.TranslationMask? copyMask = null)
        {
            return ((BiomeBTPSItemSetterTranslationCommon)((IBiomeBTPSItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BiomeBTPSItem DeepCopy(
            this IBiomeBTPSItemGetter item,
            out BiomeBTPSItem.ErrorMask errorMask,
            BiomeBTPSItem.TranslationMask? copyMask = null)
        {
            return ((BiomeBTPSItemSetterTranslationCommon)((IBiomeBTPSItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BiomeBTPSItem DeepCopy(
            this IBiomeBTPSItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BiomeBTPSItemSetterTranslationCommon)((IBiomeBTPSItemGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBiomeBTPSItem item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BiomeBTPSItemSetterCommon)((IBiomeBTPSItemGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BiomeBTPSItem_FieldIndex
    {
        NoiseOffsetU = 0,
        NoiseOffsetV = 1,
        NoiseScaleU = 2,
        NoiseScaleV = 3,
        NoiseContrast = 4,
        AltTextureCoverage = 5,
        AlternateDataContributionMin = 6,
        AlternateDataContributionMax = 7,
    }
    #endregion

    #region Registration
    internal partial class BiomeBTPSItem_Registration : ILoquiRegistration
    {
        public static readonly BiomeBTPSItem_Registration Instance = new BiomeBTPSItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(BiomeBTPSItem.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BiomeBTPSItem.ErrorMask);

        public static readonly Type ClassType = typeof(BiomeBTPSItem);

        public static readonly Type GetterType = typeof(IBiomeBTPSItemGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBiomeBTPSItem);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BiomeBTPSItem";

        public const string Name = "BiomeBTPSItem";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(BiomeBTPSItemBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BiomeBTPSItemSetterCommon
    {
        public static readonly BiomeBTPSItemSetterCommon Instance = new BiomeBTPSItemSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBiomeBTPSItem item)
        {
            ClearPartial();
            item.NoiseOffsetU = default(Single);
            item.NoiseOffsetV = default(Single);
            item.NoiseScaleU = default(Single);
            item.NoiseScaleV = default(Single);
            item.NoiseContrast = default(Single);
            item.AltTextureCoverage = default(Single);
            item.AlternateDataContributionMin = default(Single);
            item.AlternateDataContributionMax = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(IBiomeBTPSItem obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBiomeBTPSItem item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: BiomeBTPSItemBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class BiomeBTPSItemCommon
    {
        public static readonly BiomeBTPSItemCommon Instance = new BiomeBTPSItemCommon();

        public BiomeBTPSItem.Mask<bool> GetEqualsMask(
            IBiomeBTPSItemGetter item,
            IBiomeBTPSItemGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BiomeBTPSItem.Mask<bool>(false);
            ((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBiomeBTPSItemGetter item,
            IBiomeBTPSItemGetter rhs,
            BiomeBTPSItem.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.NoiseOffsetU = item.NoiseOffsetU.EqualsWithin(rhs.NoiseOffsetU);
            ret.NoiseOffsetV = item.NoiseOffsetV.EqualsWithin(rhs.NoiseOffsetV);
            ret.NoiseScaleU = item.NoiseScaleU.EqualsWithin(rhs.NoiseScaleU);
            ret.NoiseScaleV = item.NoiseScaleV.EqualsWithin(rhs.NoiseScaleV);
            ret.NoiseContrast = item.NoiseContrast.EqualsWithin(rhs.NoiseContrast);
            ret.AltTextureCoverage = item.AltTextureCoverage.EqualsWithin(rhs.AltTextureCoverage);
            ret.AlternateDataContributionMin = item.AlternateDataContributionMin.EqualsWithin(rhs.AlternateDataContributionMin);
            ret.AlternateDataContributionMax = item.AlternateDataContributionMax.EqualsWithin(rhs.AlternateDataContributionMax);
        }
        
        public string Print(
            IBiomeBTPSItemGetter item,
            string? name = null,
            BiomeBTPSItem.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBiomeBTPSItemGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeBTPSItem.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BiomeBTPSItem =>");
            }
            else
            {
                sb.AppendLine($"{name} (BiomeBTPSItem) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBiomeBTPSItemGetter item,
            StructuredStringBuilder sb,
            BiomeBTPSItem.Mask<bool>? printMask = null)
        {
            if (printMask?.NoiseOffsetU ?? true)
            {
                sb.AppendItem(item.NoiseOffsetU, "NoiseOffsetU");
            }
            if (printMask?.NoiseOffsetV ?? true)
            {
                sb.AppendItem(item.NoiseOffsetV, "NoiseOffsetV");
            }
            if (printMask?.NoiseScaleU ?? true)
            {
                sb.AppendItem(item.NoiseScaleU, "NoiseScaleU");
            }
            if (printMask?.NoiseScaleV ?? true)
            {
                sb.AppendItem(item.NoiseScaleV, "NoiseScaleV");
            }
            if (printMask?.NoiseContrast ?? true)
            {
                sb.AppendItem(item.NoiseContrast, "NoiseContrast");
            }
            if (printMask?.AltTextureCoverage ?? true)
            {
                sb.AppendItem(item.AltTextureCoverage, "AltTextureCoverage");
            }
            if (printMask?.AlternateDataContributionMin ?? true)
            {
                sb.AppendItem(item.AlternateDataContributionMin, "AlternateDataContributionMin");
            }
            if (printMask?.AlternateDataContributionMax ?? true)
            {
                sb.AppendItem(item.AlternateDataContributionMax, "AlternateDataContributionMax");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBiomeBTPSItemGetter? lhs,
            IBiomeBTPSItemGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.NoiseOffsetU) ?? true))
            {
                if (!lhs.NoiseOffsetU.EqualsWithin(rhs.NoiseOffsetU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.NoiseOffsetV) ?? true))
            {
                if (!lhs.NoiseOffsetV.EqualsWithin(rhs.NoiseOffsetV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.NoiseScaleU) ?? true))
            {
                if (!lhs.NoiseScaleU.EqualsWithin(rhs.NoiseScaleU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.NoiseScaleV) ?? true))
            {
                if (!lhs.NoiseScaleV.EqualsWithin(rhs.NoiseScaleV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.NoiseContrast) ?? true))
            {
                if (!lhs.NoiseContrast.EqualsWithin(rhs.NoiseContrast)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.AltTextureCoverage) ?? true))
            {
                if (!lhs.AltTextureCoverage.EqualsWithin(rhs.AltTextureCoverage)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.AlternateDataContributionMin) ?? true))
            {
                if (!lhs.AlternateDataContributionMin.EqualsWithin(rhs.AlternateDataContributionMin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.AlternateDataContributionMax) ?? true))
            {
                if (!lhs.AlternateDataContributionMax.EqualsWithin(rhs.AlternateDataContributionMax)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBiomeBTPSItemGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.NoiseOffsetU);
            hash.Add(item.NoiseOffsetV);
            hash.Add(item.NoiseScaleU);
            hash.Add(item.NoiseScaleV);
            hash.Add(item.NoiseContrast);
            hash.Add(item.AltTextureCoverage);
            hash.Add(item.AlternateDataContributionMin);
            hash.Add(item.AlternateDataContributionMax);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BiomeBTPSItem.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBiomeBTPSItemGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BiomeBTPSItemSetterTranslationCommon
    {
        public static readonly BiomeBTPSItemSetterTranslationCommon Instance = new BiomeBTPSItemSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBiomeBTPSItem item,
            IBiomeBTPSItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.NoiseOffsetU) ?? true))
            {
                item.NoiseOffsetU = rhs.NoiseOffsetU;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.NoiseOffsetV) ?? true))
            {
                item.NoiseOffsetV = rhs.NoiseOffsetV;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.NoiseScaleU) ?? true))
            {
                item.NoiseScaleU = rhs.NoiseScaleU;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.NoiseScaleV) ?? true))
            {
                item.NoiseScaleV = rhs.NoiseScaleV;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.NoiseContrast) ?? true))
            {
                item.NoiseContrast = rhs.NoiseContrast;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.AltTextureCoverage) ?? true))
            {
                item.AltTextureCoverage = rhs.AltTextureCoverage;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.AlternateDataContributionMin) ?? true))
            {
                item.AlternateDataContributionMin = rhs.AlternateDataContributionMin;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeBTPSItem_FieldIndex.AlternateDataContributionMax) ?? true))
            {
                item.AlternateDataContributionMax = rhs.AlternateDataContributionMax;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBiomeBTPSItem item,
            IBiomeBTPSItemGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public BiomeBTPSItem DeepCopy(
            IBiomeBTPSItemGetter item,
            BiomeBTPSItem.TranslationMask? copyMask = null)
        {
            BiomeBTPSItem ret = (BiomeBTPSItem)((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)item).CommonInstance()!).GetNew();
            ((BiomeBTPSItemSetterTranslationCommon)((IBiomeBTPSItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BiomeBTPSItem DeepCopy(
            IBiomeBTPSItemGetter item,
            out BiomeBTPSItem.ErrorMask errorMask,
            BiomeBTPSItem.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BiomeBTPSItem ret = (BiomeBTPSItem)((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)item).CommonInstance()!).GetNew();
            ((BiomeBTPSItemSetterTranslationCommon)((IBiomeBTPSItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BiomeBTPSItem.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BiomeBTPSItem DeepCopy(
            IBiomeBTPSItemGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BiomeBTPSItem ret = (BiomeBTPSItem)((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)item).CommonInstance()!).GetNew();
            ((BiomeBTPSItemSetterTranslationCommon)((IBiomeBTPSItemGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeBTPSItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeBTPSItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeBTPSItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeBTPSItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BiomeBTPSItemSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeBTPSItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeBTPSItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBiomeBTPSItemGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBiomeBTPSItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeBTPSItemBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly BiomeBTPSItemBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IBiomeBTPSItemGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NoiseOffsetU);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NoiseOffsetV);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NoiseScaleU);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NoiseScaleV);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NoiseContrast);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AltTextureCoverage);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AlternateDataContributionMin);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AlternateDataContributionMax);
        }

        public void Write(
            MutagenWriter writer,
            IBiomeBTPSItemGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBiomeBTPSItemGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BiomeBTPSItemBinaryCreateTranslation
    {
        public static readonly BiomeBTPSItemBinaryCreateTranslation Instance = new BiomeBTPSItemBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IBiomeBTPSItem item,
            MutagenFrame frame)
        {
            item.NoiseOffsetU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.NoiseOffsetV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.NoiseScaleU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.NoiseScaleV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.NoiseContrast = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AltTextureCoverage = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AlternateDataContributionMin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AlternateDataContributionMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BiomeBTPSItemBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBiomeBTPSItemGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeBTPSItemBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BiomeBTPSItemBinaryOverlay :
        PluginBinaryOverlay,
        IBiomeBTPSItemGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeBTPSItem_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeBTPSItem_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeBTPSItemCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeBTPSItemSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeBTPSItemGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBiomeBTPSItemGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBiomeBTPSItemGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeBTPSItemBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeBTPSItemBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single NoiseOffsetU => _structData.Slice(0x0, 0x4).Float();
        public Single NoiseOffsetV => _structData.Slice(0x4, 0x4).Float();
        public Single NoiseScaleU => _structData.Slice(0x8, 0x4).Float();
        public Single NoiseScaleV => _structData.Slice(0xC, 0x4).Float();
        public Single NoiseContrast => _structData.Slice(0x10, 0x4).Float();
        public Single AltTextureCoverage => _structData.Slice(0x14, 0x4).Float();
        public Single AlternateDataContributionMin => _structData.Slice(0x18, 0x4).Float();
        public Single AlternateDataContributionMax => _structData.Slice(0x1C, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BiomeBTPSItemBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBiomeBTPSItemGetter BiomeBTPSItemFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x20,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new BiomeBTPSItemBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x20;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IBiomeBTPSItemGetter BiomeBTPSItemFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BiomeBTPSItemFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeBTPSItemMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeBTPSItemGetter rhs) return false;
            return ((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeBTPSItemGetter? obj)
        {
            return ((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeBTPSItemCommon)((IBiomeBTPSItemGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

