/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Faction :
        StarfieldMajorRecord,
        IEquatable<IFactionGetter>,
        IFactionInternal,
        ILoquiObjectSetter<Faction>
    {
        #region Ctor
        protected Faction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IFactionGetter.Components => _Components;
        #endregion

        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IFactionGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Relations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Relation> _Relations = new ExtendedList<Relation>();
        public ExtendedList<Relation> Relations
        {
            get => this._Relations;
            init => this._Relations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRelationGetter> IFactionGetter.Relations => _Relations;
        #endregion

        #endregion
        #region Keyword
        private readonly IFormLinkNullable<IKeywordGetter> _Keyword = new FormLinkNullable<IKeywordGetter>();
        public IFormLinkNullable<IKeywordGetter> Keyword
        {
            get => _Keyword;
            set => _Keyword.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IKeywordGetter> IFactionGetter.Keyword => this.Keyword;
        #endregion
        #region Flags
        public Faction.FactionFlag Flags { get; set; } = default(Faction.FactionFlag);
        #endregion
        #region SharedCrimeFactionList
        private readonly IFormLinkNullable<IFormListGetter> _SharedCrimeFactionList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> SharedCrimeFactionList
        {
            get => _SharedCrimeFactionList;
            set => _SharedCrimeFactionList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IFactionGetter.SharedCrimeFactionList => this.SharedCrimeFactionList;
        #endregion
        #region CrimeValues
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CrimeValues? _CrimeValues;
        public CrimeValues? CrimeValues
        {
            get => _CrimeValues;
            set => _CrimeValues = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICrimeValuesGetter? IFactionGetter.CrimeValues => this.CrimeValues;
        #endregion
        #region VendorBuySellList
        private readonly IFormLinkNullable<IFormListGetter> _VendorBuySellList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> VendorBuySellList
        {
            get => _VendorBuySellList;
            set => _VendorBuySellList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IFactionGetter.VendorBuySellList => this.VendorBuySellList;
        #endregion
        #region MerchantContainer
        private readonly IFormLinkNullable<IPlacedObjectGetter> _MerchantContainer = new FormLinkNullable<IPlacedObjectGetter>();
        public IFormLinkNullable<IPlacedObjectGetter> MerchantContainer
        {
            get => _MerchantContainer;
            set => _MerchantContainer.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IFactionGetter.MerchantContainer => this.MerchantContainer;
        #endregion
        #region PRIS
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _PRIS;
        public MemorySlice<Byte>? PRIS
        {
            get => this._PRIS;
            set => this._PRIS = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFactionGetter.PRIS => this.PRIS;
        #endregion
        #region VendorValues
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VendorValues? _VendorValues;
        public VendorValues? VendorValues
        {
            get => _VendorValues;
            set => _VendorValues = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVendorValuesGetter? IFactionGetter.VendorValues => this.VendorValues;
        #endregion
        #region VendorLocation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LocationTargetRadius? _VendorLocation;
        public LocationTargetRadius? VendorLocation
        {
            get => _VendorLocation;
            set => _VendorLocation = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILocationTargetRadiusGetter? IFactionGetter.VendorLocation => this.VendorLocation;
        #endregion
        #region VoiceType
        private readonly IFormLinkNullable<IVoiceTypeOrListGetter> _VoiceType = new FormLinkNullable<IVoiceTypeOrListGetter>();
        public IFormLinkNullable<IVoiceTypeOrListGetter> VoiceType
        {
            get => _VoiceType;
            set => _VoiceType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IVoiceTypeOrListGetter> IFactionGetter.VoiceType => this.VoiceType;
        #endregion
        #region HERD
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _HERD;
        public MemorySlice<Byte>? HERD
        {
            get => this._HERD;
            set => this._HERD = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFactionGetter.HERD => this.HERD;
        #endregion
        #region CRGP
        public Boolean CRGP { get; set; } = default(Boolean);
        #endregion
        #region GRPH
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _GRPH;
        public MemorySlice<Byte>? GRPH
        {
            get => this._GRPH;
            set => this._GRPH = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFactionGetter.GRPH => this.GRPH;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FactionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = initialValue;
                this.Relations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>());
                this.Keyword = initialValue;
                this.Flags = initialValue;
                this.SharedCrimeFactionList = initialValue;
                this.CrimeValues = new MaskItem<TItem, CrimeValues.Mask<TItem>?>(initialValue, new CrimeValues.Mask<TItem>(initialValue));
                this.VendorBuySellList = initialValue;
                this.MerchantContainer = initialValue;
                this.PRIS = initialValue;
                this.VendorValues = new MaskItem<TItem, VendorValues.Mask<TItem>?>(initialValue, new VendorValues.Mask<TItem>(initialValue));
                this.VendorLocation = new MaskItem<TItem, LocationTargetRadius.Mask<TItem>?>(initialValue, new LocationTargetRadius.Mask<TItem>(initialValue));
                this.VoiceType = initialValue;
                this.HERD = initialValue;
                this.CRGP = initialValue;
                this.GRPH = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Name,
                TItem Relations,
                TItem Keyword,
                TItem Flags,
                TItem SharedCrimeFactionList,
                TItem CrimeValues,
                TItem VendorBuySellList,
                TItem MerchantContainer,
                TItem PRIS,
                TItem VendorValues,
                TItem VendorLocation,
                TItem VoiceType,
                TItem HERD,
                TItem CRGP,
                TItem GRPH)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = Name;
                this.Relations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>?>(Relations, Enumerable.Empty<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>());
                this.Keyword = Keyword;
                this.Flags = Flags;
                this.SharedCrimeFactionList = SharedCrimeFactionList;
                this.CrimeValues = new MaskItem<TItem, CrimeValues.Mask<TItem>?>(CrimeValues, new CrimeValues.Mask<TItem>(CrimeValues));
                this.VendorBuySellList = VendorBuySellList;
                this.MerchantContainer = MerchantContainer;
                this.PRIS = PRIS;
                this.VendorValues = new MaskItem<TItem, VendorValues.Mask<TItem>?>(VendorValues, new VendorValues.Mask<TItem>(VendorValues));
                this.VendorLocation = new MaskItem<TItem, LocationTargetRadius.Mask<TItem>?>(VendorLocation, new LocationTargetRadius.Mask<TItem>(VendorLocation));
                this.VoiceType = VoiceType;
                this.HERD = HERD;
                this.CRGP = CRGP;
                this.GRPH = GRPH;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Name;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>?>? Relations;
            public TItem Keyword;
            public TItem Flags;
            public TItem SharedCrimeFactionList;
            public MaskItem<TItem, CrimeValues.Mask<TItem>?>? CrimeValues { get; set; }
            public TItem VendorBuySellList;
            public TItem MerchantContainer;
            public TItem PRIS;
            public MaskItem<TItem, VendorValues.Mask<TItem>?>? VendorValues { get; set; }
            public MaskItem<TItem, LocationTargetRadius.Mask<TItem>?>? VendorLocation { get; set; }
            public TItem VoiceType;
            public TItem HERD;
            public TItem CRGP;
            public TItem GRPH;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Relations, rhs.Relations)) return false;
                if (!object.Equals(this.Keyword, rhs.Keyword)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.SharedCrimeFactionList, rhs.SharedCrimeFactionList)) return false;
                if (!object.Equals(this.CrimeValues, rhs.CrimeValues)) return false;
                if (!object.Equals(this.VendorBuySellList, rhs.VendorBuySellList)) return false;
                if (!object.Equals(this.MerchantContainer, rhs.MerchantContainer)) return false;
                if (!object.Equals(this.PRIS, rhs.PRIS)) return false;
                if (!object.Equals(this.VendorValues, rhs.VendorValues)) return false;
                if (!object.Equals(this.VendorLocation, rhs.VendorLocation)) return false;
                if (!object.Equals(this.VoiceType, rhs.VoiceType)) return false;
                if (!object.Equals(this.HERD, rhs.HERD)) return false;
                if (!object.Equals(this.CRGP, rhs.CRGP)) return false;
                if (!object.Equals(this.GRPH, rhs.GRPH)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.Name);
                hash.Add(this.Relations);
                hash.Add(this.Keyword);
                hash.Add(this.Flags);
                hash.Add(this.SharedCrimeFactionList);
                hash.Add(this.CrimeValues);
                hash.Add(this.VendorBuySellList);
                hash.Add(this.MerchantContainer);
                hash.Add(this.PRIS);
                hash.Add(this.VendorValues);
                hash.Add(this.VendorLocation);
                hash.Add(this.VoiceType);
                hash.Add(this.HERD);
                hash.Add(this.CRGP);
                hash.Add(this.GRPH);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Name)) return false;
                if (this.Relations != null)
                {
                    if (!eval(this.Relations.Overall)) return false;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Keyword)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.SharedCrimeFactionList)) return false;
                if (CrimeValues != null)
                {
                    if (!eval(this.CrimeValues.Overall)) return false;
                    if (this.CrimeValues.Specific != null && !this.CrimeValues.Specific.All(eval)) return false;
                }
                if (!eval(this.VendorBuySellList)) return false;
                if (!eval(this.MerchantContainer)) return false;
                if (!eval(this.PRIS)) return false;
                if (VendorValues != null)
                {
                    if (!eval(this.VendorValues.Overall)) return false;
                    if (this.VendorValues.Specific != null && !this.VendorValues.Specific.All(eval)) return false;
                }
                if (VendorLocation != null)
                {
                    if (!eval(this.VendorLocation.Overall)) return false;
                    if (this.VendorLocation.Specific != null && !this.VendorLocation.Specific.All(eval)) return false;
                }
                if (!eval(this.VoiceType)) return false;
                if (!eval(this.HERD)) return false;
                if (!eval(this.CRGP)) return false;
                if (!eval(this.GRPH)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Name)) return true;
                if (this.Relations != null)
                {
                    if (eval(this.Relations.Overall)) return true;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Keyword)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.SharedCrimeFactionList)) return true;
                if (CrimeValues != null)
                {
                    if (eval(this.CrimeValues.Overall)) return true;
                    if (this.CrimeValues.Specific != null && this.CrimeValues.Specific.Any(eval)) return true;
                }
                if (eval(this.VendorBuySellList)) return true;
                if (eval(this.MerchantContainer)) return true;
                if (eval(this.PRIS)) return true;
                if (VendorValues != null)
                {
                    if (eval(this.VendorValues.Overall)) return true;
                    if (this.VendorValues.Specific != null && this.VendorValues.Specific.Any(eval)) return true;
                }
                if (VendorLocation != null)
                {
                    if (eval(this.VendorLocation.Overall)) return true;
                    if (this.VendorLocation.Specific != null && this.VendorLocation.Specific.Any(eval)) return true;
                }
                if (eval(this.VoiceType)) return true;
                if (eval(this.HERD)) return true;
                if (eval(this.CRGP)) return true;
                if (eval(this.GRPH)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Faction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Name = eval(this.Name);
                if (Relations != null)
                {
                    obj.Relations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Relation.Mask<R>?>>?>(eval(this.Relations.Overall), Enumerable.Empty<MaskItemIndexed<R, Relation.Mask<R>?>>());
                    if (Relations.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Relation.Mask<R>?>>();
                        obj.Relations.Specific = l;
                        foreach (var item in Relations.Specific)
                        {
                            MaskItemIndexed<R, Relation.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Relation.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Keyword = eval(this.Keyword);
                obj.Flags = eval(this.Flags);
                obj.SharedCrimeFactionList = eval(this.SharedCrimeFactionList);
                obj.CrimeValues = this.CrimeValues == null ? null : new MaskItem<R, CrimeValues.Mask<R>?>(eval(this.CrimeValues.Overall), this.CrimeValues.Specific?.Translate(eval));
                obj.VendorBuySellList = eval(this.VendorBuySellList);
                obj.MerchantContainer = eval(this.MerchantContainer);
                obj.PRIS = eval(this.PRIS);
                obj.VendorValues = this.VendorValues == null ? null : new MaskItem<R, VendorValues.Mask<R>?>(eval(this.VendorValues.Overall), this.VendorValues.Specific?.Translate(eval));
                obj.VendorLocation = this.VendorLocation == null ? null : new MaskItem<R, LocationTargetRadius.Mask<R>?>(eval(this.VendorLocation.Overall), this.VendorLocation.Specific?.Translate(eval));
                obj.VoiceType = eval(this.VoiceType);
                obj.HERD = eval(this.HERD);
                obj.CRGP = eval(this.CRGP);
                obj.GRPH = eval(this.GRPH);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Faction.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Faction.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Faction.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Relations?.Overall ?? true)
                        && Relations is {} RelationsItem)
                    {
                        sb.AppendLine("Relations =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RelationsItem.Overall);
                            if (RelationsItem.Specific != null)
                            {
                                foreach (var subItem in RelationsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Keyword ?? true)
                    {
                        sb.AppendItem(Keyword, "Keyword");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.SharedCrimeFactionList ?? true)
                    {
                        sb.AppendItem(SharedCrimeFactionList, "SharedCrimeFactionList");
                    }
                    if (printMask?.CrimeValues?.Overall ?? true)
                    {
                        CrimeValues?.Print(sb);
                    }
                    if (printMask?.VendorBuySellList ?? true)
                    {
                        sb.AppendItem(VendorBuySellList, "VendorBuySellList");
                    }
                    if (printMask?.MerchantContainer ?? true)
                    {
                        sb.AppendItem(MerchantContainer, "MerchantContainer");
                    }
                    if (printMask?.PRIS ?? true)
                    {
                        sb.AppendItem(PRIS, "PRIS");
                    }
                    if (printMask?.VendorValues?.Overall ?? true)
                    {
                        VendorValues?.Print(sb);
                    }
                    if (printMask?.VendorLocation?.Overall ?? true)
                    {
                        VendorLocation?.Print(sb);
                    }
                    if (printMask?.VoiceType ?? true)
                    {
                        sb.AppendItem(VoiceType, "VoiceType");
                    }
                    if (printMask?.HERD ?? true)
                    {
                        sb.AppendItem(HERD, "HERD");
                    }
                    if (printMask?.CRGP ?? true)
                    {
                        sb.AppendItem(CRGP, "CRGP");
                    }
                    if (printMask?.GRPH ?? true)
                    {
                        sb.AppendItem(GRPH, "GRPH");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>? Relations;
            public Exception? Keyword;
            public Exception? Flags;
            public Exception? SharedCrimeFactionList;
            public MaskItem<Exception?, CrimeValues.ErrorMask?>? CrimeValues;
            public Exception? VendorBuySellList;
            public Exception? MerchantContainer;
            public Exception? PRIS;
            public MaskItem<Exception?, VendorValues.ErrorMask?>? VendorValues;
            public MaskItem<Exception?, LocationTargetRadius.ErrorMask?>? VendorLocation;
            public Exception? VoiceType;
            public Exception? HERD;
            public Exception? CRGP;
            public Exception? GRPH;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Components:
                        return Components;
                    case Faction_FieldIndex.Name:
                        return Name;
                    case Faction_FieldIndex.Relations:
                        return Relations;
                    case Faction_FieldIndex.Keyword:
                        return Keyword;
                    case Faction_FieldIndex.Flags:
                        return Flags;
                    case Faction_FieldIndex.SharedCrimeFactionList:
                        return SharedCrimeFactionList;
                    case Faction_FieldIndex.CrimeValues:
                        return CrimeValues;
                    case Faction_FieldIndex.VendorBuySellList:
                        return VendorBuySellList;
                    case Faction_FieldIndex.MerchantContainer:
                        return MerchantContainer;
                    case Faction_FieldIndex.PRIS:
                        return PRIS;
                    case Faction_FieldIndex.VendorValues:
                        return VendorValues;
                    case Faction_FieldIndex.VendorLocation:
                        return VendorLocation;
                    case Faction_FieldIndex.VoiceType:
                        return VoiceType;
                    case Faction_FieldIndex.HERD:
                        return HERD;
                    case Faction_FieldIndex.CRGP:
                        return CRGP;
                    case Faction_FieldIndex.GRPH:
                        return GRPH;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Faction_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Faction_FieldIndex.Relations:
                        this.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>(ex, null);
                        break;
                    case Faction_FieldIndex.Keyword:
                        this.Keyword = ex;
                        break;
                    case Faction_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Faction_FieldIndex.SharedCrimeFactionList:
                        this.SharedCrimeFactionList = ex;
                        break;
                    case Faction_FieldIndex.CrimeValues:
                        this.CrimeValues = new MaskItem<Exception?, CrimeValues.ErrorMask?>(ex, null);
                        break;
                    case Faction_FieldIndex.VendorBuySellList:
                        this.VendorBuySellList = ex;
                        break;
                    case Faction_FieldIndex.MerchantContainer:
                        this.MerchantContainer = ex;
                        break;
                    case Faction_FieldIndex.PRIS:
                        this.PRIS = ex;
                        break;
                    case Faction_FieldIndex.VendorValues:
                        this.VendorValues = new MaskItem<Exception?, VendorValues.ErrorMask?>(ex, null);
                        break;
                    case Faction_FieldIndex.VendorLocation:
                        this.VendorLocation = new MaskItem<Exception?, LocationTargetRadius.ErrorMask?>(ex, null);
                        break;
                    case Faction_FieldIndex.VoiceType:
                        this.VoiceType = ex;
                        break;
                    case Faction_FieldIndex.HERD:
                        this.HERD = ex;
                        break;
                    case Faction_FieldIndex.CRGP:
                        this.CRGP = ex;
                        break;
                    case Faction_FieldIndex.GRPH:
                        this.GRPH = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Faction_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.Relations:
                        this.Relations = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>)obj;
                        break;
                    case Faction_FieldIndex.Keyword:
                        this.Keyword = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.SharedCrimeFactionList:
                        this.SharedCrimeFactionList = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.CrimeValues:
                        this.CrimeValues = (MaskItem<Exception?, CrimeValues.ErrorMask?>?)obj;
                        break;
                    case Faction_FieldIndex.VendorBuySellList:
                        this.VendorBuySellList = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.MerchantContainer:
                        this.MerchantContainer = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.PRIS:
                        this.PRIS = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.VendorValues:
                        this.VendorValues = (MaskItem<Exception?, VendorValues.ErrorMask?>?)obj;
                        break;
                    case Faction_FieldIndex.VendorLocation:
                        this.VendorLocation = (MaskItem<Exception?, LocationTargetRadius.ErrorMask?>?)obj;
                        break;
                    case Faction_FieldIndex.VoiceType:
                        this.VoiceType = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.HERD:
                        this.HERD = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.CRGP:
                        this.CRGP = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.GRPH:
                        this.GRPH = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (Name != null) return true;
                if (Relations != null) return true;
                if (Keyword != null) return true;
                if (Flags != null) return true;
                if (SharedCrimeFactionList != null) return true;
                if (CrimeValues != null) return true;
                if (VendorBuySellList != null) return true;
                if (MerchantContainer != null) return true;
                if (PRIS != null) return true;
                if (VendorValues != null) return true;
                if (VendorLocation != null) return true;
                if (VoiceType != null) return true;
                if (HERD != null) return true;
                if (CRGP != null) return true;
                if (GRPH != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                if (Relations is {} RelationsItem)
                {
                    sb.AppendLine("Relations =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RelationsItem.Overall);
                        if (RelationsItem.Specific != null)
                        {
                            foreach (var subItem in RelationsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Keyword, "Keyword");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(SharedCrimeFactionList, "SharedCrimeFactionList");
                }
                CrimeValues?.Print(sb);
                {
                    sb.AppendItem(VendorBuySellList, "VendorBuySellList");
                }
                {
                    sb.AppendItem(MerchantContainer, "MerchantContainer");
                }
                {
                    sb.AppendItem(PRIS, "PRIS");
                }
                VendorValues?.Print(sb);
                VendorLocation?.Print(sb);
                {
                    sb.AppendItem(VoiceType, "VoiceType");
                }
                {
                    sb.AppendItem(HERD, "HERD");
                }
                {
                    sb.AppendItem(CRGP, "CRGP");
                }
                {
                    sb.AppendItem(GRPH, "GRPH");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Relations?.Overall, rhs.Relations?.Overall), Noggog.ExceptionExt.Combine(this.Relations?.Specific, rhs.Relations?.Specific));
                ret.Keyword = this.Keyword.Combine(rhs.Keyword);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.SharedCrimeFactionList = this.SharedCrimeFactionList.Combine(rhs.SharedCrimeFactionList);
                ret.CrimeValues = this.CrimeValues.Combine(rhs.CrimeValues, (l, r) => l.Combine(r));
                ret.VendorBuySellList = this.VendorBuySellList.Combine(rhs.VendorBuySellList);
                ret.MerchantContainer = this.MerchantContainer.Combine(rhs.MerchantContainer);
                ret.PRIS = this.PRIS.Combine(rhs.PRIS);
                ret.VendorValues = this.VendorValues.Combine(rhs.VendorValues, (l, r) => l.Combine(r));
                ret.VendorLocation = this.VendorLocation.Combine(rhs.VendorLocation, (l, r) => l.Combine(r));
                ret.VoiceType = this.VoiceType.Combine(rhs.VoiceType);
                ret.HERD = this.HERD.Combine(rhs.HERD);
                ret.CRGP = this.CRGP.Combine(rhs.CRGP);
                ret.GRPH = this.GRPH.Combine(rhs.GRPH);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool Name;
            public Relation.TranslationMask? Relations;
            public bool Keyword;
            public bool Flags;
            public bool SharedCrimeFactionList;
            public CrimeValues.TranslationMask? CrimeValues;
            public bool VendorBuySellList;
            public bool MerchantContainer;
            public bool PRIS;
            public VendorValues.TranslationMask? VendorValues;
            public LocationTargetRadius.TranslationMask? VendorLocation;
            public bool VoiceType;
            public bool HERD;
            public bool CRGP;
            public bool GRPH;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Keyword = defaultOn;
                this.Flags = defaultOn;
                this.SharedCrimeFactionList = defaultOn;
                this.VendorBuySellList = defaultOn;
                this.MerchantContainer = defaultOn;
                this.PRIS = defaultOn;
                this.VoiceType = defaultOn;
                this.HERD = defaultOn;
                this.CRGP = defaultOn;
                this.GRPH = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Relations == null ? DefaultOn : !Relations.GetCrystal().CopyNothing, Relations?.GetCrystal()));
                ret.Add((Keyword, null));
                ret.Add((Flags, null));
                ret.Add((SharedCrimeFactionList, null));
                ret.Add((CrimeValues != null ? CrimeValues.OnOverall : DefaultOn, CrimeValues?.GetCrystal()));
                ret.Add((VendorBuySellList, null));
                ret.Add((MerchantContainer, null));
                ret.Add((PRIS, null));
                ret.Add((VendorValues != null ? VendorValues.OnOverall : DefaultOn, VendorValues?.GetCrystal()));
                ret.Add((VendorLocation != null ? VendorLocation.OnOverall : DefaultOn, VendorLocation?.GetCrystal()));
                ret.Add((VoiceType, null));
                ret.Add((HERD, null));
                ret.Add((CRGP, null));
                ret.Add((GRPH, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Faction_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FactionCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FactionSetterCommon.Instance.RemapLinks(this, mapping);
        public Faction(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Faction(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Faction(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Faction(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Faction(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Faction>.ToString(this);
        }

        protected override Type LinkType => typeof(IFaction);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => FactionCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => FactionSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => FactionSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => FactionSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFactionGetter rhs) return false;
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFactionGetter? obj)
        {
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FactionCommon)((IFactionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FactionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FactionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Faction CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Faction();
            ((FactionSetterCommon)((IFactionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Faction item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((FactionSetterCommon)((IFactionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Faction GetNew()
        {
            return new Faction();
        }

    }
    #endregion

    #region Interface
    public partial interface IFaction :
        IAliasVoiceType,
        IAssetLinkContainer,
        IFactionGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IFactionInternal>,
        INamed,
        INamedRequired,
        IObjectId,
        IOwner,
        IRelatable,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new ExtendedList<Relation> Relations { get; }
        new IFormLinkNullable<IKeywordGetter> Keyword { get; set; }
        new Faction.FactionFlag Flags { get; set; }
        new IFormLinkNullable<IFormListGetter> SharedCrimeFactionList { get; set; }
        new CrimeValues? CrimeValues { get; set; }
        new IFormLinkNullable<IFormListGetter> VendorBuySellList { get; set; }
        new IFormLinkNullable<IPlacedObjectGetter> MerchantContainer { get; set; }
        new MemorySlice<Byte>? PRIS { get; set; }
        new VendorValues? VendorValues { get; set; }
        new LocationTargetRadius? VendorLocation { get; set; }
        new IFormLinkNullable<IVoiceTypeOrListGetter> VoiceType { get; set; }
        new MemorySlice<Byte>? HERD { get; set; }
        new Boolean CRGP { get; set; }
        new MemorySlice<Byte>? GRPH { get; set; }
    }

    public partial interface IFactionInternal :
        IStarfieldMajorRecordInternal,
        IFaction,
        IFactionGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.FACT)]
    public partial interface IFactionGetter :
        IStarfieldMajorRecordGetter,
        IAliasVoiceTypeGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IFactionGetter>,
        IMapsToGetter<IFactionGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IObjectIdGetter,
        IOwnerGetter,
        IRelatableGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Faction_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        IReadOnlyList<IRelationGetter> Relations { get; }
        IFormLinkNullableGetter<IKeywordGetter> Keyword { get; }
        Faction.FactionFlag Flags { get; }
        IFormLinkNullableGetter<IFormListGetter> SharedCrimeFactionList { get; }
        ICrimeValuesGetter? CrimeValues { get; }
        IFormLinkNullableGetter<IFormListGetter> VendorBuySellList { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> MerchantContainer { get; }
        ReadOnlyMemorySlice<Byte>? PRIS { get; }
        IVendorValuesGetter? VendorValues { get; }
        ILocationTargetRadiusGetter? VendorLocation { get; }
        IFormLinkNullableGetter<IVoiceTypeOrListGetter> VoiceType { get; }
        ReadOnlyMemorySlice<Byte>? HERD { get; }
        Boolean CRGP { get; }
        ReadOnlyMemorySlice<Byte>? GRPH { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FactionMixIn
    {
        public static void Clear(this IFactionInternal item)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Faction.Mask<bool> GetEqualsMask(
            this IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFactionGetter item,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFactionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFactionGetter item,
            IFactionGetter rhs,
            Faction.TranslationMask? equalsMask = null)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FactionSetterTranslationCommon)((IFactionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FactionSetterTranslationCommon)((IFactionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Faction Duplicate(
            this IFactionGetter item,
            FormKey formKey,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Faction Duplicate(
            this IFactionGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFactionInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Faction_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Name = 8,
        Relations = 9,
        Keyword = 10,
        Flags = 11,
        SharedCrimeFactionList = 12,
        CrimeValues = 13,
        VendorBuySellList = 14,
        MerchantContainer = 15,
        PRIS = 16,
        VendorValues = 17,
        VendorLocation = 18,
        VoiceType = 19,
        HERD = 20,
        CRGP = 21,
        GRPH = 22,
    }
    #endregion

    #region Registration
    internal partial class Faction_Registration : ILoquiRegistration
    {
        public static readonly Faction_Registration Instance = new Faction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 16;

        public const ushort FieldCount = 23;

        public static readonly Type MaskType = typeof(Faction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Faction.ErrorMask);

        public static readonly Type ClassType = typeof(Faction);

        public static readonly Type GetterType = typeof(IFactionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFaction);

        public static readonly Type? InternalSetterType = typeof(IFactionInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Faction";

        public const string Name = "Faction";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.FACT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.FACT);
            var all = RecordCollection.Factory(
                RecordTypes.FACT,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.FULL,
                RecordTypes.XNAM,
                RecordTypes.DNAM,
                RecordTypes.DATA,
                RecordTypes.CRGR,
                RecordTypes.CRVA,
                RecordTypes.VEND,
                RecordTypes.VENC,
                RecordTypes.PRIS,
                RecordTypes.VENV,
                RecordTypes.PLVD,
                RecordTypes.VTCK,
                RecordTypes.HERD,
                RecordTypes.CRHR,
                RecordTypes.CRGP,
                RecordTypes.GRPH);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(FactionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FactionSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly FactionSetterCommon Instance = new FactionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFactionInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.Name = default;
            item.Relations.Clear();
            item.Keyword.Clear();
            item.Flags = default(Faction.FactionFlag);
            item.SharedCrimeFactionList.Clear();
            item.CrimeValues = null;
            item.VendorBuySellList.Clear();
            item.MerchantContainer.Clear();
            item.PRIS = default;
            item.VendorValues = null;
            item.VendorLocation = null;
            item.VoiceType.Clear();
            item.HERD = default;
            item.CRGP = default(Boolean);
            item.GRPH = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IFactionInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFactionInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFaction obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.Relations.RemapLinks(mapping);
            obj.Keyword.Relink(mapping);
            obj.SharedCrimeFactionList.Relink(mapping);
            obj.VendorBuySellList.Relink(mapping);
            obj.MerchantContainer.Relink(mapping);
            obj.VendorLocation?.RemapLinks(mapping);
            obj.VoiceType.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IFaction obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IFaction obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFactionInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IFactionInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: FactionBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: FactionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Faction)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Faction)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class FactionCommon : StarfieldMajorRecordCommon
    {
        public new static readonly FactionCommon Instance = new FactionCommon();

        public Faction.Mask<bool> GetEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Faction.Mask<bool>(false);
            ((FactionCommon)((IFactionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            Faction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Relations = item.Relations.CollectionEqualsHelper(
                rhs.Relations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Keyword = item.Keyword.Equals(rhs.Keyword);
            ret.Flags = item.Flags == rhs.Flags;
            ret.SharedCrimeFactionList = item.SharedCrimeFactionList.Equals(rhs.SharedCrimeFactionList);
            ret.CrimeValues = EqualsMaskHelper.EqualsHelper(
                item.CrimeValues,
                rhs.CrimeValues,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.VendorBuySellList = item.VendorBuySellList.Equals(rhs.VendorBuySellList);
            ret.MerchantContainer = item.MerchantContainer.Equals(rhs.MerchantContainer);
            ret.PRIS = MemorySliceExt.SequenceEqual(item.PRIS, rhs.PRIS);
            ret.VendorValues = EqualsMaskHelper.EqualsHelper(
                item.VendorValues,
                rhs.VendorValues,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.VendorLocation = EqualsMaskHelper.EqualsHelper(
                item.VendorLocation,
                rhs.VendorLocation,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.VoiceType = item.VoiceType.Equals(rhs.VoiceType);
            ret.HERD = MemorySliceExt.SequenceEqual(item.HERD, rhs.HERD);
            ret.CRGP = item.CRGP == rhs.CRGP;
            ret.GRPH = MemorySliceExt.SequenceEqual(item.GRPH, rhs.GRPH);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IFactionGetter item,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFactionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Faction =>");
            }
            else
            {
                sb.AppendLine($"{name} (Faction) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFactionGetter item,
            StructuredStringBuilder sb,
            Faction.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.Relations?.Overall ?? true)
            {
                sb.AppendLine("Relations =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Relations)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Keyword ?? true)
            {
                sb.AppendItem(item.Keyword.FormKeyNullable, "Keyword");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.SharedCrimeFactionList ?? true)
            {
                sb.AppendItem(item.SharedCrimeFactionList.FormKeyNullable, "SharedCrimeFactionList");
            }
            if ((printMask?.CrimeValues?.Overall ?? true)
                && item.CrimeValues is {} CrimeValuesItem)
            {
                CrimeValuesItem?.Print(sb, "CrimeValues");
            }
            if (printMask?.VendorBuySellList ?? true)
            {
                sb.AppendItem(item.VendorBuySellList.FormKeyNullable, "VendorBuySellList");
            }
            if (printMask?.MerchantContainer ?? true)
            {
                sb.AppendItem(item.MerchantContainer.FormKeyNullable, "MerchantContainer");
            }
            if ((printMask?.PRIS ?? true)
                && item.PRIS is {} PRISItem)
            {
                sb.AppendLine($"PRIS => {SpanExt.ToHexString(PRISItem)}");
            }
            if ((printMask?.VendorValues?.Overall ?? true)
                && item.VendorValues is {} VendorValuesItem)
            {
                VendorValuesItem?.Print(sb, "VendorValues");
            }
            if ((printMask?.VendorLocation?.Overall ?? true)
                && item.VendorLocation is {} VendorLocationItem)
            {
                VendorLocationItem?.Print(sb, "VendorLocation");
            }
            if (printMask?.VoiceType ?? true)
            {
                sb.AppendItem(item.VoiceType.FormKeyNullable, "VoiceType");
            }
            if ((printMask?.HERD ?? true)
                && item.HERD is {} HERDItem)
            {
                sb.AppendLine($"HERD => {SpanExt.ToHexString(HERDItem)}");
            }
            if (printMask?.CRGP ?? true)
            {
                sb.AppendItem(item.CRGP, "CRGP");
            }
            if ((printMask?.GRPH ?? true)
                && item.GRPH is {} GRPHItem)
            {
                sb.AppendLine($"GRPH => {SpanExt.ToHexString(GRPHItem)}");
            }
        }
        
        public static Faction_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Faction_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Faction_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Faction_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Faction_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Faction_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFactionGetter? lhs,
            IFactionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Faction_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.Relations) ?? true))
            {
                if (!lhs.Relations.SequenceEqual(rhs.Relations, (l, r) => ((RelationCommon)((IRelationGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Faction_FieldIndex.Relations)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.Keyword) ?? true))
            {
                if (!lhs.Keyword.Equals(rhs.Keyword)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.SharedCrimeFactionList) ?? true))
            {
                if (!lhs.SharedCrimeFactionList.Equals(rhs.SharedCrimeFactionList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.CrimeValues) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CrimeValues, rhs.CrimeValues, out var lhsCrimeValues, out var rhsCrimeValues, out var isCrimeValuesEqual))
                {
                    if (!((CrimeValuesCommon)((ICrimeValuesGetter)lhsCrimeValues).CommonInstance()!).Equals(lhsCrimeValues, rhsCrimeValues, equalsMask?.GetSubCrystal((int)Faction_FieldIndex.CrimeValues))) return false;
                }
                else if (!isCrimeValuesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorBuySellList) ?? true))
            {
                if (!lhs.VendorBuySellList.Equals(rhs.VendorBuySellList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.MerchantContainer) ?? true))
            {
                if (!lhs.MerchantContainer.Equals(rhs.MerchantContainer)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.PRIS) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.PRIS, rhs.PRIS)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorValues) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VendorValues, rhs.VendorValues, out var lhsVendorValues, out var rhsVendorValues, out var isVendorValuesEqual))
                {
                    if (!((VendorValuesCommon)((IVendorValuesGetter)lhsVendorValues).CommonInstance()!).Equals(lhsVendorValues, rhsVendorValues, equalsMask?.GetSubCrystal((int)Faction_FieldIndex.VendorValues))) return false;
                }
                else if (!isVendorValuesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorLocation) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VendorLocation, rhs.VendorLocation, out var lhsVendorLocation, out var rhsVendorLocation, out var isVendorLocationEqual))
                {
                    if (!((LocationTargetRadiusCommon)((ILocationTargetRadiusGetter)lhsVendorLocation).CommonInstance()!).Equals(lhsVendorLocation, rhsVendorLocation, equalsMask?.GetSubCrystal((int)Faction_FieldIndex.VendorLocation))) return false;
                }
                else if (!isVendorLocationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.VoiceType) ?? true))
            {
                if (!lhs.VoiceType.Equals(rhs.VoiceType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.HERD) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.HERD, rhs.HERD)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.CRGP) ?? true))
            {
                if (lhs.CRGP != rhs.CRGP) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.GRPH) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.GRPH, rhs.GRPH)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFactionGetter?)lhs,
                rhs: rhs as IFactionGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFactionGetter?)lhs,
                rhs: rhs as IFactionGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IFactionGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Relations);
            hash.Add(item.Keyword);
            hash.Add(item.Flags);
            hash.Add(item.SharedCrimeFactionList);
            if (item.CrimeValues is {} CrimeValuesitem)
            {
                hash.Add(CrimeValuesitem);
            }
            hash.Add(item.VendorBuySellList);
            hash.Add(item.MerchantContainer);
            if (item.PRIS is {} PRISItem)
            {
                hash.Add(PRISItem);
            }
            if (item.VendorValues is {} VendorValuesitem)
            {
                hash.Add(VendorValuesitem);
            }
            if (item.VendorLocation is {} VendorLocationitem)
            {
                hash.Add(VendorLocationitem);
            }
            hash.Add(item.VoiceType);
            if (item.HERD is {} HERDItem)
            {
                hash.Add(HERDItem);
            }
            hash.Add(item.CRGP);
            if (item.GRPH is {} GRPHItem)
            {
                hash.Add(GRPHItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IFactionGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFactionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Faction.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFactionGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Relations.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Keyword, out var KeywordInfo))
            {
                yield return KeywordInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SharedCrimeFactionList, out var SharedCrimeFactionListInfo))
            {
                yield return SharedCrimeFactionListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.VendorBuySellList, out var VendorBuySellListInfo))
            {
                yield return VendorBuySellListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MerchantContainer, out var MerchantContainerInfo))
            {
                yield return MerchantContainerInfo;
            }
            if (obj.VendorLocation is IFormLinkContainerGetter VendorLocationlinkCont)
            {
                foreach (var item in VendorLocationlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.VoiceType, out var VoiceTypeInfo))
            {
                yield return VoiceTypeInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IFactionGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Faction Duplicate(
            IFactionGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Faction(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFactionGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFactionGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class FactionSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly FactionSetterTranslationCommon Instance = new FactionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFactionInternal item,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IFaction item,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Relations) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Relations);
                try
                {
                    item.Relations.SetTo(
                        rhs.Relations
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Keyword) ?? true))
            {
                item.Keyword.SetTo(rhs.Keyword.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.SharedCrimeFactionList) ?? true))
            {
                item.SharedCrimeFactionList.SetTo(rhs.SharedCrimeFactionList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.CrimeValues) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.CrimeValues);
                try
                {
                    if(rhs.CrimeValues is {} rhsCrimeValues)
                    {
                        item.CrimeValues = rhsCrimeValues.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Faction_FieldIndex.CrimeValues));
                    }
                    else
                    {
                        item.CrimeValues = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorBuySellList) ?? true))
            {
                item.VendorBuySellList.SetTo(rhs.VendorBuySellList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.MerchantContainer) ?? true))
            {
                item.MerchantContainer.SetTo(rhs.MerchantContainer.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.PRIS) ?? true))
            {
                if(rhs.PRIS is {} PRISrhs)
                {
                    item.PRIS = PRISrhs.ToArray();
                }
                else
                {
                    item.PRIS = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorValues) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.VendorValues);
                try
                {
                    if(rhs.VendorValues is {} rhsVendorValues)
                    {
                        item.VendorValues = rhsVendorValues.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Faction_FieldIndex.VendorValues));
                    }
                    else
                    {
                        item.VendorValues = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VendorLocation) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.VendorLocation);
                try
                {
                    if(rhs.VendorLocation is {} rhsVendorLocation)
                    {
                        item.VendorLocation = rhsVendorLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Faction_FieldIndex.VendorLocation));
                    }
                    else
                    {
                        item.VendorLocation = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.VoiceType) ?? true))
            {
                item.VoiceType.SetTo(rhs.VoiceType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.HERD) ?? true))
            {
                if(rhs.HERD is {} HERDrhs)
                {
                    item.HERD = HERDrhs.ToArray();
                }
                else
                {
                    item.HERD = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.CRGP) ?? true))
            {
                item.CRGP = rhs.CRGP;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.GRPH) ?? true))
            {
                if(rhs.GRPH is {} GRPHrhs)
                {
                    item.GRPH = GRPHrhs.ToArray();
                }
                else
                {
                    item.GRPH = default;
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFaction item,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFactionInternal)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFaction)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFactionInternal)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFaction)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Faction DeepCopy(
            IFactionGetter item,
            Faction.TranslationMask? copyMask = null)
        {
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ((FactionSetterTranslationCommon)((IFactionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Faction DeepCopy(
            IFactionGetter item,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ((FactionSetterTranslationCommon)((IFactionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Faction DeepCopy(
            IFactionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ((FactionSetterTranslationCommon)((IFactionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Faction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Faction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FactionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FactionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FactionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class FactionBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly FactionBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IFactionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IRelationGetter>.Instance.Write(
                writer: writer,
                items: item.Relations,
                transl: (MutagenWriter subWriter, IRelationGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((RelationBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Keyword,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            EnumBinaryTranslation<Faction.FactionFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SharedCrimeFactionList,
                header: translationParams.ConvertToCustom(RecordTypes.CRGR));
            if (item.CrimeValues is {} CrimeValuesItem)
            {
                ((CrimeValuesBinaryWriteTranslation)((IBinaryItem)CrimeValuesItem).BinaryWriteTranslator).Write(
                    item: CrimeValuesItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VendorBuySellList,
                header: translationParams.ConvertToCustom(RecordTypes.VEND));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MerchantContainer,
                header: translationParams.ConvertToCustom(RecordTypes.VENC));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PRIS,
                header: translationParams.ConvertToCustom(RecordTypes.PRIS));
            if (item.VendorValues is {} VendorValuesItem)
            {
                ((VendorValuesBinaryWriteTranslation)((IBinaryItem)VendorValuesItem).BinaryWriteTranslator).Write(
                    item: VendorValuesItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.VendorLocation is {} VendorLocationItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.PLVD))
                {
                    ((LocationTargetRadiusBinaryWriteTranslation)((IBinaryItem)VendorLocationItem).BinaryWriteTranslator).Write(
                        item: VendorLocationItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VoiceType,
                header: translationParams.ConvertToCustom(RecordTypes.VTCK));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HERD,
                header: translationParams.ConvertToCustom(RecordTypes.HERD),
                markerType: RecordTypes.CRHR);
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.CRGP,
                header: translationParams.ConvertToCustom(RecordTypes.CRGP));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.GRPH,
                header: translationParams.ConvertToCustom(RecordTypes.GRPH));
        }

        public void Write(
            MutagenWriter writer,
            IFactionGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.FACT,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFactionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFactionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFactionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FactionBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly FactionBinaryCreateTranslation Instance = new FactionBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.FACT;
        public static ParseResult FillBinaryRecordTypes(
            IFactionInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Faction_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Faction_FieldIndex.Name;
                }
                case RecordTypeInts.XNAM:
                {
                    item.Relations.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Relation>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Relation_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Relation.TryCreateFromBinary));
                    return (int)Faction_FieldIndex.Relations;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Keyword.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Faction_FieldIndex.Keyword;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Faction.FactionFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Faction_FieldIndex.Flags;
                }
                case RecordTypeInts.CRGR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SharedCrimeFactionList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Faction_FieldIndex.SharedCrimeFactionList;
                }
                case RecordTypeInts.CRVA:
                {
                    item.CrimeValues = Mutagen.Bethesda.Starfield.CrimeValues.CreateFromBinary(frame: frame);
                    return (int)Faction_FieldIndex.CrimeValues;
                }
                case RecordTypeInts.VEND:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VendorBuySellList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Faction_FieldIndex.VendorBuySellList;
                }
                case RecordTypeInts.VENC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MerchantContainer.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Faction_FieldIndex.MerchantContainer;
                }
                case RecordTypeInts.PRIS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PRIS = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Faction_FieldIndex.PRIS;
                }
                case RecordTypeInts.VENV:
                {
                    item.VendorValues = Mutagen.Bethesda.Starfield.VendorValues.CreateFromBinary(frame: frame);
                    return (int)Faction_FieldIndex.VendorValues;
                }
                case RecordTypeInts.PLVD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.VendorLocation = Mutagen.Bethesda.Starfield.LocationTargetRadius.CreateFromBinary(frame: frame);
                    return (int)Faction_FieldIndex.VendorLocation;
                }
                case RecordTypeInts.VTCK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VoiceType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Faction_FieldIndex.VoiceType;
                }
                case RecordTypeInts.CRHR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength;
                    var nextRec = frame.GetSubrecord();
                    if (nextRec.RecordType != RecordTypes.HERD) throw new ArgumentException("Marker was read but not followed by expected subrecord.");
                    contentLength = nextRec.ContentLength;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HERD = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Faction_FieldIndex.HERD;
                }
                case RecordTypeInts.CRGP:
                {
                    item.CRGP = true;
                    return (int)Faction_FieldIndex.CRGP;
                }
                case RecordTypeInts.GRPH:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GRPH = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Faction_FieldIndex.GRPH;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class FactionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class FactionBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IFactionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Faction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FactionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FactionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FactionCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => FactionCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FactionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FactionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IFaction);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IReadOnlyList<IRelationGetter> Relations { get; private set; } = Array.Empty<IRelationGetter>();
        #region Keyword
        private int? _KeywordLocation;
        public IFormLinkNullableGetter<IKeywordGetter> Keyword => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IKeywordGetter>(_package, _recordData, _KeywordLocation);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Faction.FactionFlag Flags => _FlagsLocation.HasValue ? (Faction.FactionFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(Faction.FactionFlag);
        #endregion
        #region SharedCrimeFactionList
        private int? _SharedCrimeFactionListLocation;
        public IFormLinkNullableGetter<IFormListGetter> SharedCrimeFactionList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _SharedCrimeFactionListLocation);
        #endregion
        #region CrimeValues
        private RangeInt32? _CrimeValuesLocation;
        public ICrimeValuesGetter? CrimeValues => _CrimeValuesLocation.HasValue ? CrimeValuesBinaryOverlay.CrimeValuesFactory(_recordData.Slice(_CrimeValuesLocation!.Value.Min), _package) : default;
        #endregion
        #region VendorBuySellList
        private int? _VendorBuySellListLocation;
        public IFormLinkNullableGetter<IFormListGetter> VendorBuySellList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _VendorBuySellListLocation);
        #endregion
        #region MerchantContainer
        private int? _MerchantContainerLocation;
        public IFormLinkNullableGetter<IPlacedObjectGetter> MerchantContainer => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedObjectGetter>(_package, _recordData, _MerchantContainerLocation);
        #endregion
        #region PRIS
        private int? _PRISLocation;
        public ReadOnlyMemorySlice<Byte>? PRIS => _PRISLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _PRISLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region VendorValues
        private RangeInt32? _VendorValuesLocation;
        public IVendorValuesGetter? VendorValues => _VendorValuesLocation.HasValue ? VendorValuesBinaryOverlay.VendorValuesFactory(_recordData.Slice(_VendorValuesLocation!.Value.Min), _package) : default;
        #endregion
        public ILocationTargetRadiusGetter? VendorLocation { get; private set; }
        #region VoiceType
        private int? _VoiceTypeLocation;
        public IFormLinkNullableGetter<IVoiceTypeOrListGetter> VoiceType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IVoiceTypeOrListGetter>(_package, _recordData, _VoiceTypeLocation);
        #endregion
        #region HERD
        private int? _HERDLocation;
        public ReadOnlyMemorySlice<Byte>? HERD => _HERDLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HERDLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region CRGP
        private int? _CRGPLocation;
        public Boolean CRGP => _CRGPLocation.HasValue ? true : default(Boolean);
        #endregion
        #region GRPH
        private int? _GRPHLocation;
        public ReadOnlyMemorySlice<Byte>? GRPH => _GRPHLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _GRPHLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FactionBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IFactionGetter FactionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new FactionBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IFactionGetter FactionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return FactionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Faction_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.Name;
                }
                case RecordTypeInts.XNAM:
                {
                    this.Relations = BinaryOverlayList.FactoryByArray<IRelationGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => RelationBinaryOverlay.RelationFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Relation_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Faction_FieldIndex.Relations;
                }
                case RecordTypeInts.DNAM:
                {
                    _KeywordLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.Keyword;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.Flags;
                }
                case RecordTypeInts.CRGR:
                {
                    _SharedCrimeFactionListLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.SharedCrimeFactionList;
                }
                case RecordTypeInts.CRVA:
                {
                    _CrimeValuesLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Faction_FieldIndex.CrimeValues;
                }
                case RecordTypeInts.VEND:
                {
                    _VendorBuySellListLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.VendorBuySellList;
                }
                case RecordTypeInts.VENC:
                {
                    _MerchantContainerLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.MerchantContainer;
                }
                case RecordTypeInts.PRIS:
                {
                    _PRISLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.PRIS;
                }
                case RecordTypeInts.VENV:
                {
                    _VendorValuesLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Faction_FieldIndex.VendorValues;
                }
                case RecordTypeInts.PLVD:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.VendorLocation = LocationTargetRadiusBinaryOverlay.LocationTargetRadiusFactory(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Faction_FieldIndex.VendorLocation;
                }
                case RecordTypeInts.VTCK:
                {
                    _VoiceTypeLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.VoiceType;
                }
                case RecordTypeInts.CRHR:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    _HERDLocation = (stream.Position - offset);
                    stream.ReadSubrecord();
                    return (int)Faction_FieldIndex.HERD;
                }
                case RecordTypeInts.CRGP:
                {
                    _CRGPLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.CRGP;
                }
                case RecordTypeInts.GRPH:
                {
                    _GRPHLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.GRPH;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FactionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Faction>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFactionGetter rhs) return false;
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFactionGetter? obj)
        {
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FactionCommon)((IFactionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

