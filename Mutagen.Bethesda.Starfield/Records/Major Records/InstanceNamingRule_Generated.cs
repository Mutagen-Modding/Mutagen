/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class InstanceNamingRule<T> :
        IEquatable<IInstanceNamingRuleGetter<T>>,
        IInstanceNamingRule<T>,
        ILoquiObjectSetter<InstanceNamingRule<T>>
        where T : struct, Enum
    {
        #region Ctor
        public InstanceNamingRule()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Text
        public TranslatedString? Text { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IInstanceNamingRuleGetter<T>.Text => this.Text;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IInstanceNamingRuleGetter<T>.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Property
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private InstanceNamingRuleProperty<T>? _Property;
        public InstanceNamingRuleProperty<T>? Property
        {
            get => _Property;
            set => _Property = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IInstanceNamingRulePropertyGetter<T>? IInstanceNamingRuleGetter<T>.Property => this.Property;
        #endregion
        #region Index
        public UInt16? Index { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IInstanceNamingRuleGetter<T>.Index => this.Index;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            InstanceNamingRuleMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IInstanceNamingRuleGetter<T> rhs) return false;
            return ((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IInstanceNamingRuleGetter<T>? obj)
        {
            return ((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)this).CommonInstance(typeof(T))!).GetHashCode(this);

        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => InstanceNamingRuleCommon<T>.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => InstanceNamingRuleSetterCommon<T>.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => InstanceNamingRuleBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((InstanceNamingRuleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static InstanceNamingRule<T> CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new InstanceNamingRule<T>();
            ((InstanceNamingRuleSetterCommon<T>)((IInstanceNamingRuleGetter<T>)ret).CommonSetterInstance(typeof(T))!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out InstanceNamingRule<T> item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((InstanceNamingRuleSetterCommon<T>)((IInstanceNamingRuleGetter<T>)this).CommonSetterInstance(typeof(T))!).Clear(this);
        }

        internal static InstanceNamingRule<T> GetNew()
        {
            return new InstanceNamingRule<T>();
        }

    }
    #endregion

    #region Interface
    public partial interface IInstanceNamingRule<T> :
        IFormLinkContainer,
        IInstanceNamingRuleGetter<T>,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IInstanceNamingRule<T>>
        where T : struct, Enum
    {
        new TranslatedString? Text { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new InstanceNamingRuleProperty<T>? Property { get; set; }
        new UInt16? Index { get; set; }
    }

    public partial interface IInstanceNamingRuleGetter<out T> :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IInstanceNamingRuleGetter<T>>
        where T : struct, Enum
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance(Type type0);
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance(Type type0);
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => InstanceNamingRule_Registration.Instance;
        ITranslatedStringGetter? Text { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IInstanceNamingRulePropertyGetter<T>? Property { get; }
        UInt16? Index { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class InstanceNamingRuleMixIn
    {
        public static void Clear<T>(this IInstanceNamingRule<T> item)
            where T : struct, Enum
        {
            ((InstanceNamingRuleSetterCommon<T>)((IInstanceNamingRuleGetter<T>)item).CommonSetterInstance(typeof(T))!).Clear(item: item);
        }

        public static InstanceNamingRule.Mask<bool> GetEqualsMask<T>(
            this IInstanceNamingRuleGetter<T> item,
            IInstanceNamingRuleGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where T : struct, Enum
        {
            return ((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)item).CommonInstance(typeof(T))!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print<T>(
            this IInstanceNamingRuleGetter<T> item,
            string? name = null,
            InstanceNamingRule.Mask<bool>? printMask = null)
            where T : struct, Enum
        {
            return ((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)item).CommonInstance(typeof(T))!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print<T>(
            this IInstanceNamingRuleGetter<T> item,
            StructuredStringBuilder sb,
            string? name = null,
            InstanceNamingRule.Mask<bool>? printMask = null)
            where T : struct, Enum
        {
            ((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)item).CommonInstance(typeof(T))!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals<T>(
            this IInstanceNamingRuleGetter<T> item,
            IInstanceNamingRuleGetter<T> rhs)
            where T : struct, Enum
        {
            return ((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)item).CommonInstance(typeof(T))!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: null);
        }

        public static bool Equals<T>(
            this IInstanceNamingRuleGetter<T> item,
            IInstanceNamingRuleGetter<T> rhs,
            InstanceNamingRule.TranslationMask equalsMask)
            where T : struct, Enum
        {
            return ((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)item).CommonInstance(typeof(T))!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask.GetCrystal());
        }

        public static void DeepCopyIn<T>(
            this IInstanceNamingRule<T> lhs,
            IInstanceNamingRuleGetter<T> rhs)
            where T : struct, Enum
        {
            ((InstanceNamingRuleSetterTranslationCommon)((IInstanceNamingRuleGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn<T>(
            this IInstanceNamingRule<T> lhs,
            IInstanceNamingRuleGetter<T> rhs,
            InstanceNamingRule.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            ((InstanceNamingRuleSetterTranslationCommon)((IInstanceNamingRuleGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn<T>(
            this IInstanceNamingRule<T> lhs,
            IInstanceNamingRuleGetter<T> rhs,
            out InstanceNamingRule.ErrorMask errorMask,
            InstanceNamingRule.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((InstanceNamingRuleSetterTranslationCommon)((IInstanceNamingRuleGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = InstanceNamingRule.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn<T>(
            this IInstanceNamingRule<T> lhs,
            IInstanceNamingRuleGetter<T> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
            where T : struct, Enum
        {
            ((InstanceNamingRuleSetterTranslationCommon)((IInstanceNamingRuleGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static InstanceNamingRule<T> DeepCopy<T>(
            this IInstanceNamingRuleGetter<T> item,
            InstanceNamingRule.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            return ((InstanceNamingRuleSetterTranslationCommon)((IInstanceNamingRuleGetter<T>)item).CommonSetterTranslationInstance()!).DeepCopy<T>(
                item: item,
                copyMask: copyMask);
        }

        public static InstanceNamingRule<T> DeepCopy<T>(
            this IInstanceNamingRuleGetter<T> item,
            out InstanceNamingRule.ErrorMask errorMask,
            InstanceNamingRule.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            return ((InstanceNamingRuleSetterTranslationCommon)((IInstanceNamingRuleGetter<T>)item).CommonSetterTranslationInstance()!).DeepCopy<T>(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static InstanceNamingRule<T> DeepCopy<T>(
            this IInstanceNamingRuleGetter<T> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : struct, Enum
        {
            return ((InstanceNamingRuleSetterTranslationCommon)((IInstanceNamingRuleGetter<T>)item).CommonSetterTranslationInstance()!).DeepCopy<T>(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary<T>(
            this IInstanceNamingRule<T> item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
            where T : struct, Enum
        {
            ((InstanceNamingRuleSetterCommon<T>)((IInstanceNamingRuleGetter<T>)item).CommonSetterInstance(typeof(T))!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum InstanceNamingRule_FieldIndex
    {
        Text = 0,
        Keywords = 1,
        Property = 2,
        Index = 3,
    }
    #endregion

    #region Registration
    internal partial class InstanceNamingRule_Registration : ILoquiRegistration
    {
        public static readonly InstanceNamingRule_Registration Instance = new InstanceNamingRule_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(InstanceNamingRule.Mask<>);

        public static readonly Type ErrorMaskType = typeof(InstanceNamingRule.ErrorMask);

        public static readonly Type ClassType = typeof(InstanceNamingRule<>);

        public static readonly Type GetterType = typeof(IInstanceNamingRuleGetter<>);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IInstanceNamingRule<>);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.InstanceNamingRule";

        public const string Name = "InstanceNamingRule";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 1;

        public static readonly Type? GenericRegistrationType = typeof(InstanceNamingRule_Registration<>);

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.WNAM,
                RecordTypes.KSIZ,
                RecordTypes.KWDA,
                RecordTypes.XNAM,
                RecordTypes.YNAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(InstanceNamingRuleBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }

    internal class InstanceNamingRule_Registration<T> : InstanceNamingRule_Registration
        where T : struct, Enum
    {
        public static readonly InstanceNamingRule_Registration<T> GenericInstance = new InstanceNamingRule_Registration<T>();

    }
    #endregion

    #region Common
    internal partial class InstanceNamingRuleSetterCommon<T>
        where T : struct, Enum
    {
        public static readonly InstanceNamingRuleSetterCommon<T> Instance = new InstanceNamingRuleSetterCommon<T>();

        partial void ClearPartial();
        
        public void Clear(IInstanceNamingRule<T> item)
        {
            ClearPartial();
            item.Text = default;
            item.Keywords = null;
            item.Property = null;
            item.Index = default;
        }
        
        #region Mutagen
        public void RemapLinks(IInstanceNamingRule<T> obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Keywords?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IInstanceNamingRule<T> item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: InstanceNamingRuleBinaryCreateTranslation<T>.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class InstanceNamingRuleCommon<T>
        where T : struct, Enum
    {
        public static readonly InstanceNamingRuleCommon<T> Instance = new InstanceNamingRuleCommon<T>();

        public InstanceNamingRule.Mask<bool> GetEqualsMask(
            IInstanceNamingRuleGetter<T> item,
            IInstanceNamingRuleGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new InstanceNamingRule.Mask<bool>(false);
            ((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)item).CommonInstance(typeof(T))!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IInstanceNamingRuleGetter<T> item,
            IInstanceNamingRuleGetter<T> rhs,
            InstanceNamingRule.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Text = object.Equals(item.Text, rhs.Text);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Property = EqualsMaskHelper.EqualsHelper(
                item.Property,
                rhs.Property,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Index = item.Index == rhs.Index;
        }
        
        public string Print(
            IInstanceNamingRuleGetter<T> item,
            string? name = null,
            InstanceNamingRule.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IInstanceNamingRuleGetter<T> item,
            StructuredStringBuilder sb,
            string? name = null,
            InstanceNamingRule.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"InstanceNamingRule<{typeof(T).Name}> =>");
            }
            else
            {
                sb.AppendLine($"{name} (InstanceNamingRule<{typeof(T).Name}>) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IInstanceNamingRuleGetter<T> item,
            StructuredStringBuilder sb,
            InstanceNamingRule.Mask<bool>? printMask = null)
        {
            if ((printMask?.Text ?? true)
                && item.Text is {} TextItem)
            {
                sb.AppendItem(TextItem, "Text");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Property?.Overall ?? true)
                && item.Property is {} PropertyItem)
            {
                PropertyItem?.Print(sb, "Property");
            }
            if ((printMask?.Index ?? true)
                && item.Index is {} IndexItem)
            {
                sb.AppendItem(IndexItem, "Index");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IInstanceNamingRuleGetter<T>? lhs,
            IInstanceNamingRuleGetter<T>? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)InstanceNamingRule_FieldIndex.Text) ?? true))
            {
                if (!object.Equals(lhs.Text, rhs.Text)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)InstanceNamingRule_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)InstanceNamingRule_FieldIndex.Property) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Property, rhs.Property, out var lhsProperty, out var rhsProperty, out var isPropertyEqual))
                {
                    if (!object.Equals(lhsProperty, rhsProperty)) return false;
                }
                else if (!isPropertyEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)InstanceNamingRule_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IInstanceNamingRuleGetter<T> item)
        {
            var hash = new HashCode();
            if (item.Text is {} Textitem)
            {
                hash.Add(Textitem);
            }
            hash.Add(item.Keywords);
            if (item.Property is {} Propertyitem)
            {
                hash.Add(Propertyitem);
            }
            if (item.Index is {} Indexitem)
            {
                hash.Add(Indexitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew<T_Setter>()
            where T_Setter : struct, Enum
        {
            return InstanceNamingRule<T_Setter>.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IInstanceNamingRuleGetter<T> obj)
        {
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class InstanceNamingRuleSetterTranslationCommon
    {
        public static readonly InstanceNamingRuleSetterTranslationCommon Instance = new InstanceNamingRuleSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn<T>(
            IInstanceNamingRule<T> item,
            IInstanceNamingRuleGetter<T> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
            where T : struct, Enum
        {
            if ((copyMask?.GetShouldTranslate((int)InstanceNamingRule_FieldIndex.Text) ?? true))
            {
                item.Text = rhs.Text?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)InstanceNamingRule_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)InstanceNamingRule_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)InstanceNamingRule_FieldIndex.Property) ?? true))
            {
                errorMask?.PushIndex((int)InstanceNamingRule_FieldIndex.Property);
                try
                {
                    if(rhs.Property is {} rhsProperty)
                    {
                        item.Property = rhsProperty.DeepCopy<T>(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)InstanceNamingRule_FieldIndex.Property));
                    }
                    else
                    {
                        item.Property = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)InstanceNamingRule_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            DeepCopyInCustom<T>(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom<T>(
            IInstanceNamingRule<T> item,
            IInstanceNamingRuleGetter<T> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
            where T : struct, Enum;
        #endregion
        
        public InstanceNamingRule<T> DeepCopy<T>(
            IInstanceNamingRuleGetter<T> item,
            InstanceNamingRule.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            InstanceNamingRule<T> ret = (InstanceNamingRule<T>)((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((InstanceNamingRuleSetterTranslationCommon)((IInstanceNamingRuleGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public InstanceNamingRule<T> DeepCopy<T>(
            IInstanceNamingRuleGetter<T> item,
            out InstanceNamingRule.ErrorMask errorMask,
            InstanceNamingRule.TranslationMask? copyMask = null)
            where T : struct, Enum
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            InstanceNamingRule<T> ret = (InstanceNamingRule<T>)((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((InstanceNamingRuleSetterTranslationCommon)((IInstanceNamingRuleGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = InstanceNamingRule.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public InstanceNamingRule<T> DeepCopy<T>(
            IInstanceNamingRuleGetter<T> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : struct, Enum
        {
            InstanceNamingRule<T> ret = (InstanceNamingRule<T>)((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((InstanceNamingRuleSetterTranslationCommon)((IInstanceNamingRuleGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class InstanceNamingRule<T>
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => InstanceNamingRule_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => InstanceNamingRule_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance(Type type0) => GenericCommonInstanceGetter.Get(InstanceNamingRuleCommon<T>.Instance, typeof(T), type0);
        [DebuggerStepThrough]
        protected object CommonSetterInstance(Type type0)
        {
            return GenericCommonInstanceGetter.Get(InstanceNamingRuleSetterCommon<T>.Instance, typeof(T), type0);
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => InstanceNamingRuleSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IInstanceNamingRuleGetter<T>.CommonInstance(Type type0) => this.CommonInstance(type0);
        [DebuggerStepThrough]
        object IInstanceNamingRuleGetter<T>.CommonSetterInstance(Type type0) => this.CommonSetterInstance(type0);
        [DebuggerStepThrough]
        object IInstanceNamingRuleGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class InstanceNamingRuleBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly InstanceNamingRuleBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes<T>(
            IInstanceNamingRuleGetter<T> item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
            where T : struct, Enum
        {
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Text,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.Property is {} PropertyItem)
            {
                ((InstanceNamingRulePropertyBinaryWriteTranslation)((IBinaryItem)PropertyItem).BinaryWriteTranslator).Write<T>(
                    item: PropertyItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: translationParams.ConvertToCustom(RecordTypes.YNAM));
        }

        public void Write<T>(
            MutagenWriter writer,
            IInstanceNamingRuleGetter<T> item,
            TypedWriteParams translationParams)
            where T : struct, Enum
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            throw new NotImplementedException();
        }

    }

    internal partial class InstanceNamingRuleBinaryCreateTranslation<T>
        where T : struct, Enum
    {
        public static readonly InstanceNamingRuleBinaryCreateTranslation<T> Instance = new InstanceNamingRuleBinaryCreateTranslation<T>();

        public static ParseResult FillBinaryRecordTypes(
            IInstanceNamingRule<T> item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.WNAM:
                {
                    if (lastParsed.ShortCircuit((int)InstanceNamingRule_FieldIndex.Text, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Text = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)InstanceNamingRule_FieldIndex.Text;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    if (lastParsed.ShortCircuit((int)InstanceNamingRule_FieldIndex.Keywords, translationParams)) return ParseResult.Stop;
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)InstanceNamingRule_FieldIndex.Keywords;
                }
                case RecordTypeInts.XNAM:
                {
                    if (lastParsed.ShortCircuit((int)InstanceNamingRule_FieldIndex.Property, translationParams)) return ParseResult.Stop;
                    item.Property = Mutagen.Bethesda.Starfield.InstanceNamingRuleProperty<T>.CreateFromBinary(frame: frame);
                    return (int)InstanceNamingRule_FieldIndex.Property;
                }
                case RecordTypeInts.YNAM:
                {
                    if (lastParsed.ShortCircuit((int)InstanceNamingRule_FieldIndex.Index, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt16();
                    return (int)InstanceNamingRule_FieldIndex.Index;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class InstanceNamingRuleBinaryTranslationMixIn
    {
        public static void WriteToBinary<T>(
            this IInstanceNamingRuleGetter<T> item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
            where T : struct, Enum
        {
            ((InstanceNamingRuleBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class InstanceNamingRuleBinaryOverlay<T> :
        PluginBinaryOverlay,
        IInstanceNamingRuleGetter<T>
        where T : struct, Enum
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => InstanceNamingRule_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => InstanceNamingRule_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance(Type type0) => GenericCommonInstanceGetter.Get(InstanceNamingRuleCommon<T>.Instance, typeof(T), type0);
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => InstanceNamingRuleSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IInstanceNamingRuleGetter<T>.CommonInstance(Type type0) => this.CommonInstance(type0);
        [DebuggerStepThrough]
        object? IInstanceNamingRuleGetter<T>.CommonSetterInstance(Type type0) => null;
        [DebuggerStepThrough]
        object IInstanceNamingRuleGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => InstanceNamingRuleCommon<T>.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => InstanceNamingRuleBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((InstanceNamingRuleBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Text
        private int? _TextLocation;
        public ITranslatedStringGetter? Text => _TextLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region Property
        private RangeInt32? _PropertyLocation;
        public IInstanceNamingRulePropertyGetter<T>? Property => _PropertyLocation.HasValue ? InstanceNamingRulePropertyBinaryOverlay<T>.InstanceNamingRulePropertyFactory(_recordData.Slice(_PropertyLocation!.Value.Min), _package) : default;
        #endregion
        #region Index
        private int? _IndexLocation;
        public UInt16? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected InstanceNamingRuleBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IInstanceNamingRuleGetter<T> InstanceNamingRuleFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new InstanceNamingRuleBinaryOverlay<T>(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IInstanceNamingRuleGetter<T> InstanceNamingRuleFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return InstanceNamingRuleFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.WNAM:
                {
                    if (lastParsed.ShortCircuit((int)InstanceNamingRule_FieldIndex.Text, translationParams)) return ParseResult.Stop;
                    _TextLocation = (stream.Position - offset);
                    return (int)InstanceNamingRule_FieldIndex.Text;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    if (lastParsed.ShortCircuit((int)InstanceNamingRule_FieldIndex.Keywords, translationParams)) return ParseResult.Stop;
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)InstanceNamingRule_FieldIndex.Keywords;
                }
                case RecordTypeInts.XNAM:
                {
                    if (lastParsed.ShortCircuit((int)InstanceNamingRule_FieldIndex.Property, translationParams)) return ParseResult.Stop;
                    _PropertyLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)InstanceNamingRule_FieldIndex.Property;
                }
                case RecordTypeInts.YNAM:
                {
                    if (lastParsed.ShortCircuit((int)InstanceNamingRule_FieldIndex.Index, translationParams)) return ParseResult.Stop;
                    _IndexLocation = (stream.Position - offset);
                    return (int)InstanceNamingRule_FieldIndex.Index;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            InstanceNamingRuleMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IInstanceNamingRuleGetter<T> rhs) return false;
            return ((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IInstanceNamingRuleGetter<T>? obj)
        {
            return ((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((InstanceNamingRuleCommon<T>)((IInstanceNamingRuleGetter<T>)this).CommonInstance(typeof(T))!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

namespace Mutagen.Bethesda.Starfield
{
    public static class InstanceNamingRule
    {
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Text = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Property = new MaskItem<TItem, InstanceNamingRuleProperty.Mask<TItem>?>(initialValue, new InstanceNamingRuleProperty.Mask<TItem>(initialValue));
                this.Index = initialValue;
            }
        
            public Mask(
                TItem Text,
                TItem Keywords,
                TItem Property,
                TItem Index)
            {
                this.Text = Text;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Property = new MaskItem<TItem, InstanceNamingRuleProperty.Mask<TItem>?>(Property, new InstanceNamingRuleProperty.Mask<TItem>(Property));
                this.Index = Index;
            }
        
            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618
        
            #endregion
        
            #region Members
            public TItem Text;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, InstanceNamingRuleProperty.Mask<TItem>?>? Property { get; set; }
            public TItem Index;
            #endregion
        
            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }
        
            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Text, rhs.Text)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Property, rhs.Property)) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Text);
                hash.Add(this.Keywords);
                hash.Add(this.Property);
                hash.Add(this.Index);
                return hash.ToHashCode();
            }
        
            #endregion
        
            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Text)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Property != null)
                {
                    if (!eval(this.Property.Overall)) return false;
                    if (this.Property.Specific != null && !this.Property.Specific.All(eval)) return false;
                }
                if (!eval(this.Index)) return false;
                return true;
            }
            #endregion
        
            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Text)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Property != null)
                {
                    if (eval(this.Property.Overall)) return true;
                    if (this.Property.Specific != null && this.Property.Specific.Any(eval)) return true;
                }
                if (eval(this.Index)) return true;
                return false;
            }
            #endregion
        
            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new InstanceNamingRule.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }
        
            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Text = eval(this.Text);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Property = this.Property == null ? null : new MaskItem<R, InstanceNamingRuleProperty.Mask<R>?>(eval(this.Property.Overall), this.Property.Specific?.Translate(eval));
                obj.Index = eval(this.Index);
            }
            #endregion
        
            #region To String
            public override string ToString() => this.Print();
        
            public string Print(InstanceNamingRule.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }
        
            public void Print(StructuredStringBuilder sb, InstanceNamingRule.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(InstanceNamingRule.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Text ?? true)
                    {
                        sb.AppendItem(Text, "Text");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Property?.Overall ?? true)
                    {
                        Property?.Print(sb);
                    }
                    if (printMask?.Index ?? true)
                    {
                        sb.AppendItem(Index, "Index");
                    }
                }
            }
            #endregion
        
        }
        
        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Text;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, InstanceNamingRuleProperty.ErrorMask?>? Property;
            public Exception? Index;
            #endregion
        
            #region IErrorMask
            public object? GetNthMask(int index)
            {
                InstanceNamingRule_FieldIndex enu = (InstanceNamingRule_FieldIndex)index;
                switch (enu)
                {
                    case InstanceNamingRule_FieldIndex.Text:
                        return Text;
                    case InstanceNamingRule_FieldIndex.Keywords:
                        return Keywords;
                    case InstanceNamingRule_FieldIndex.Property:
                        return Property;
                    case InstanceNamingRule_FieldIndex.Index:
                        return Index;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthException(int index, Exception ex)
            {
                InstanceNamingRule_FieldIndex enu = (InstanceNamingRule_FieldIndex)index;
                switch (enu)
                {
                    case InstanceNamingRule_FieldIndex.Text:
                        this.Text = ex;
                        break;
                    case InstanceNamingRule_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case InstanceNamingRule_FieldIndex.Property:
                        this.Property = new MaskItem<Exception?, InstanceNamingRuleProperty.ErrorMask?>(ex, null);
                        break;
                    case InstanceNamingRule_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthMask(int index, object obj)
            {
                InstanceNamingRule_FieldIndex enu = (InstanceNamingRule_FieldIndex)index;
                switch (enu)
                {
                    case InstanceNamingRule_FieldIndex.Text:
                        this.Text = (Exception?)obj;
                        break;
                    case InstanceNamingRule_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case InstanceNamingRule_FieldIndex.Property:
                        this.Property = (MaskItem<Exception?, InstanceNamingRuleProperty.ErrorMask?>?)obj;
                        break;
                    case InstanceNamingRule_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Text != null) return true;
                if (Keywords != null) return true;
                if (Property != null) return true;
                if (Index != null) return true;
                return false;
            }
            #endregion
        
            #region To String
            public override string ToString() => this.Print();
        
            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Text, "Text");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                Property?.Print(sb);
                {
                    sb.AppendItem(Index, "Index");
                }
            }
            #endregion
        
            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Text = this.Text.Combine(rhs.Text);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Property = this.Property.Combine(rhs.Property, (l, r) => l.Combine(r));
                ret.Index = this.Index.Combine(rhs.Index);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion
        
            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion
        
        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Text;
            public bool Keywords;
            public InstanceNamingRuleProperty.TranslationMask? Property;
            public bool Index;
            #endregion
        
            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Text = defaultOn;
                this.Keywords = defaultOn;
                this.Index = defaultOn;
            }
        
            #endregion
        
            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }
        
            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Text, null));
                ret.Add((Keywords, null));
                ret.Add((Property != null ? Property.OnOverall : DefaultOn, Property?.GetCrystal()));
                ret.Add((Index, null));
            }
        
            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }
        
        }
    }
}
