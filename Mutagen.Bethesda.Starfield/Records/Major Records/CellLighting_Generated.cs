/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class CellLighting :
        ICellLighting,
        IEquatable<ICellLightingGetter>,
        ILoquiObjectSetter<CellLighting>
    {
        #region Ctor
        public CellLighting()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AmbientColor
        public Color AmbientColor { get; set; } = default(Color);
        #endregion
        #region DirectionalColor
        public Color DirectionalColor { get; set; } = default(Color);
        #endregion
        #region FogNearColor
        public Color FogNearColor { get; set; } = default(Color);
        #endregion
        #region FogNear
        public Single FogNear { get; set; } = default(Single);
        #endregion
        #region FogFar
        public Single FogFar { get; set; } = default(Single);
        #endregion
        #region DirectionalRotationXY
        public Int32 DirectionalRotationXY { get; set; } = default(Int32);
        #endregion
        #region DirectionalRotationZ
        public Int32 DirectionalRotationZ { get; set; } = default(Int32);
        #endregion
        #region DirectionalFade
        public Single DirectionalFade { get; set; } = default(Single);
        #endregion
        #region FogClipDistance
        public Single FogClipDistance { get; set; } = default(Single);
        #endregion
        #region FogPower
        public Single FogPower { get; set; } = default(Single);
        #endregion
        #region FogFarColor
        public Color FogFarColor { get; set; } = default(Color);
        #endregion
        #region FogMax
        public Single FogMax { get; set; } = default(Single);
        #endregion
        #region LightFadeBegin
        public Single LightFadeBegin { get; set; } = default(Single);
        #endregion
        #region LightFadeEnd
        public Single LightFadeEnd { get; set; } = default(Single);
        #endregion
        #region Unknown1
        public Int32 Unknown1 { get; set; } = default(Int32);
        #endregion
        #region NearHeightMid
        public Single NearHeightMid { get; set; } = default(Single);
        #endregion
        #region NearHeightRange
        public Single NearHeightRange { get; set; } = default(Single);
        #endregion
        #region ForColorHighNear
        public Color ForColorHighNear { get; set; } = default(Color);
        #endregion
        #region ForColorHighFar
        public Color ForColorHighFar { get; set; } = default(Color);
        #endregion
        #region HighDensityScale
        public Single HighDensityScale { get; set; } = default(Single);
        #endregion
        #region FogNearScale
        public Single FogNearScale { get; set; } = default(Single);
        #endregion
        #region FogFarScale
        public Single FogFarScale { get; set; } = default(Single);
        #endregion
        #region FogHighNearScale
        public Single FogHighNearScale { get; set; } = default(Single);
        #endregion
        #region FogHighFarScale
        public Single FogHighFarScale { get; set; } = default(Single);
        #endregion
        #region FarHeightMid
        public Single FarHeightMid { get; set; } = default(Single);
        #endregion
        #region FarHeightRange
        public Single FarHeightRange { get; set; } = default(Single);
        #endregion
        #region InteriorType
        public Cell.InteriorType InteriorType { get; set; } = default(Cell.InteriorType);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CellLightingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICellLightingGetter rhs) return false;
            return ((CellLightingCommon)((ICellLightingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICellLightingGetter? obj)
        {
            return ((CellLightingCommon)((ICellLightingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CellLightingCommon)((ICellLightingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.AmbientColor = initialValue;
                this.DirectionalColor = initialValue;
                this.FogNearColor = initialValue;
                this.FogNear = initialValue;
                this.FogFar = initialValue;
                this.DirectionalRotationXY = initialValue;
                this.DirectionalRotationZ = initialValue;
                this.DirectionalFade = initialValue;
                this.FogClipDistance = initialValue;
                this.FogPower = initialValue;
                this.FogFarColor = initialValue;
                this.FogMax = initialValue;
                this.LightFadeBegin = initialValue;
                this.LightFadeEnd = initialValue;
                this.Unknown1 = initialValue;
                this.NearHeightMid = initialValue;
                this.NearHeightRange = initialValue;
                this.ForColorHighNear = initialValue;
                this.ForColorHighFar = initialValue;
                this.HighDensityScale = initialValue;
                this.FogNearScale = initialValue;
                this.FogFarScale = initialValue;
                this.FogHighNearScale = initialValue;
                this.FogHighFarScale = initialValue;
                this.FarHeightMid = initialValue;
                this.FarHeightRange = initialValue;
                this.InteriorType = initialValue;
            }

            public Mask(
                TItem AmbientColor,
                TItem DirectionalColor,
                TItem FogNearColor,
                TItem FogNear,
                TItem FogFar,
                TItem DirectionalRotationXY,
                TItem DirectionalRotationZ,
                TItem DirectionalFade,
                TItem FogClipDistance,
                TItem FogPower,
                TItem FogFarColor,
                TItem FogMax,
                TItem LightFadeBegin,
                TItem LightFadeEnd,
                TItem Unknown1,
                TItem NearHeightMid,
                TItem NearHeightRange,
                TItem ForColorHighNear,
                TItem ForColorHighFar,
                TItem HighDensityScale,
                TItem FogNearScale,
                TItem FogFarScale,
                TItem FogHighNearScale,
                TItem FogHighFarScale,
                TItem FarHeightMid,
                TItem FarHeightRange,
                TItem InteriorType)
            {
                this.AmbientColor = AmbientColor;
                this.DirectionalColor = DirectionalColor;
                this.FogNearColor = FogNearColor;
                this.FogNear = FogNear;
                this.FogFar = FogFar;
                this.DirectionalRotationXY = DirectionalRotationXY;
                this.DirectionalRotationZ = DirectionalRotationZ;
                this.DirectionalFade = DirectionalFade;
                this.FogClipDistance = FogClipDistance;
                this.FogPower = FogPower;
                this.FogFarColor = FogFarColor;
                this.FogMax = FogMax;
                this.LightFadeBegin = LightFadeBegin;
                this.LightFadeEnd = LightFadeEnd;
                this.Unknown1 = Unknown1;
                this.NearHeightMid = NearHeightMid;
                this.NearHeightRange = NearHeightRange;
                this.ForColorHighNear = ForColorHighNear;
                this.ForColorHighFar = ForColorHighFar;
                this.HighDensityScale = HighDensityScale;
                this.FogNearScale = FogNearScale;
                this.FogFarScale = FogFarScale;
                this.FogHighNearScale = FogHighNearScale;
                this.FogHighFarScale = FogHighFarScale;
                this.FarHeightMid = FarHeightMid;
                this.FarHeightRange = FarHeightRange;
                this.InteriorType = InteriorType;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem AmbientColor;
            public TItem DirectionalColor;
            public TItem FogNearColor;
            public TItem FogNear;
            public TItem FogFar;
            public TItem DirectionalRotationXY;
            public TItem DirectionalRotationZ;
            public TItem DirectionalFade;
            public TItem FogClipDistance;
            public TItem FogPower;
            public TItem FogFarColor;
            public TItem FogMax;
            public TItem LightFadeBegin;
            public TItem LightFadeEnd;
            public TItem Unknown1;
            public TItem NearHeightMid;
            public TItem NearHeightRange;
            public TItem ForColorHighNear;
            public TItem ForColorHighFar;
            public TItem HighDensityScale;
            public TItem FogNearScale;
            public TItem FogFarScale;
            public TItem FogHighNearScale;
            public TItem FogHighFarScale;
            public TItem FarHeightMid;
            public TItem FarHeightRange;
            public TItem InteriorType;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.AmbientColor, rhs.AmbientColor)) return false;
                if (!object.Equals(this.DirectionalColor, rhs.DirectionalColor)) return false;
                if (!object.Equals(this.FogNearColor, rhs.FogNearColor)) return false;
                if (!object.Equals(this.FogNear, rhs.FogNear)) return false;
                if (!object.Equals(this.FogFar, rhs.FogFar)) return false;
                if (!object.Equals(this.DirectionalRotationXY, rhs.DirectionalRotationXY)) return false;
                if (!object.Equals(this.DirectionalRotationZ, rhs.DirectionalRotationZ)) return false;
                if (!object.Equals(this.DirectionalFade, rhs.DirectionalFade)) return false;
                if (!object.Equals(this.FogClipDistance, rhs.FogClipDistance)) return false;
                if (!object.Equals(this.FogPower, rhs.FogPower)) return false;
                if (!object.Equals(this.FogFarColor, rhs.FogFarColor)) return false;
                if (!object.Equals(this.FogMax, rhs.FogMax)) return false;
                if (!object.Equals(this.LightFadeBegin, rhs.LightFadeBegin)) return false;
                if (!object.Equals(this.LightFadeEnd, rhs.LightFadeEnd)) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                if (!object.Equals(this.NearHeightMid, rhs.NearHeightMid)) return false;
                if (!object.Equals(this.NearHeightRange, rhs.NearHeightRange)) return false;
                if (!object.Equals(this.ForColorHighNear, rhs.ForColorHighNear)) return false;
                if (!object.Equals(this.ForColorHighFar, rhs.ForColorHighFar)) return false;
                if (!object.Equals(this.HighDensityScale, rhs.HighDensityScale)) return false;
                if (!object.Equals(this.FogNearScale, rhs.FogNearScale)) return false;
                if (!object.Equals(this.FogFarScale, rhs.FogFarScale)) return false;
                if (!object.Equals(this.FogHighNearScale, rhs.FogHighNearScale)) return false;
                if (!object.Equals(this.FogHighFarScale, rhs.FogHighFarScale)) return false;
                if (!object.Equals(this.FarHeightMid, rhs.FarHeightMid)) return false;
                if (!object.Equals(this.FarHeightRange, rhs.FarHeightRange)) return false;
                if (!object.Equals(this.InteriorType, rhs.InteriorType)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.AmbientColor);
                hash.Add(this.DirectionalColor);
                hash.Add(this.FogNearColor);
                hash.Add(this.FogNear);
                hash.Add(this.FogFar);
                hash.Add(this.DirectionalRotationXY);
                hash.Add(this.DirectionalRotationZ);
                hash.Add(this.DirectionalFade);
                hash.Add(this.FogClipDistance);
                hash.Add(this.FogPower);
                hash.Add(this.FogFarColor);
                hash.Add(this.FogMax);
                hash.Add(this.LightFadeBegin);
                hash.Add(this.LightFadeEnd);
                hash.Add(this.Unknown1);
                hash.Add(this.NearHeightMid);
                hash.Add(this.NearHeightRange);
                hash.Add(this.ForColorHighNear);
                hash.Add(this.ForColorHighFar);
                hash.Add(this.HighDensityScale);
                hash.Add(this.FogNearScale);
                hash.Add(this.FogFarScale);
                hash.Add(this.FogHighNearScale);
                hash.Add(this.FogHighFarScale);
                hash.Add(this.FarHeightMid);
                hash.Add(this.FarHeightRange);
                hash.Add(this.InteriorType);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.AmbientColor)) return false;
                if (!eval(this.DirectionalColor)) return false;
                if (!eval(this.FogNearColor)) return false;
                if (!eval(this.FogNear)) return false;
                if (!eval(this.FogFar)) return false;
                if (!eval(this.DirectionalRotationXY)) return false;
                if (!eval(this.DirectionalRotationZ)) return false;
                if (!eval(this.DirectionalFade)) return false;
                if (!eval(this.FogClipDistance)) return false;
                if (!eval(this.FogPower)) return false;
                if (!eval(this.FogFarColor)) return false;
                if (!eval(this.FogMax)) return false;
                if (!eval(this.LightFadeBegin)) return false;
                if (!eval(this.LightFadeEnd)) return false;
                if (!eval(this.Unknown1)) return false;
                if (!eval(this.NearHeightMid)) return false;
                if (!eval(this.NearHeightRange)) return false;
                if (!eval(this.ForColorHighNear)) return false;
                if (!eval(this.ForColorHighFar)) return false;
                if (!eval(this.HighDensityScale)) return false;
                if (!eval(this.FogNearScale)) return false;
                if (!eval(this.FogFarScale)) return false;
                if (!eval(this.FogHighNearScale)) return false;
                if (!eval(this.FogHighFarScale)) return false;
                if (!eval(this.FarHeightMid)) return false;
                if (!eval(this.FarHeightRange)) return false;
                if (!eval(this.InteriorType)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.AmbientColor)) return true;
                if (eval(this.DirectionalColor)) return true;
                if (eval(this.FogNearColor)) return true;
                if (eval(this.FogNear)) return true;
                if (eval(this.FogFar)) return true;
                if (eval(this.DirectionalRotationXY)) return true;
                if (eval(this.DirectionalRotationZ)) return true;
                if (eval(this.DirectionalFade)) return true;
                if (eval(this.FogClipDistance)) return true;
                if (eval(this.FogPower)) return true;
                if (eval(this.FogFarColor)) return true;
                if (eval(this.FogMax)) return true;
                if (eval(this.LightFadeBegin)) return true;
                if (eval(this.LightFadeEnd)) return true;
                if (eval(this.Unknown1)) return true;
                if (eval(this.NearHeightMid)) return true;
                if (eval(this.NearHeightRange)) return true;
                if (eval(this.ForColorHighNear)) return true;
                if (eval(this.ForColorHighFar)) return true;
                if (eval(this.HighDensityScale)) return true;
                if (eval(this.FogNearScale)) return true;
                if (eval(this.FogFarScale)) return true;
                if (eval(this.FogHighNearScale)) return true;
                if (eval(this.FogHighFarScale)) return true;
                if (eval(this.FarHeightMid)) return true;
                if (eval(this.FarHeightRange)) return true;
                if (eval(this.InteriorType)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CellLighting.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.AmbientColor = eval(this.AmbientColor);
                obj.DirectionalColor = eval(this.DirectionalColor);
                obj.FogNearColor = eval(this.FogNearColor);
                obj.FogNear = eval(this.FogNear);
                obj.FogFar = eval(this.FogFar);
                obj.DirectionalRotationXY = eval(this.DirectionalRotationXY);
                obj.DirectionalRotationZ = eval(this.DirectionalRotationZ);
                obj.DirectionalFade = eval(this.DirectionalFade);
                obj.FogClipDistance = eval(this.FogClipDistance);
                obj.FogPower = eval(this.FogPower);
                obj.FogFarColor = eval(this.FogFarColor);
                obj.FogMax = eval(this.FogMax);
                obj.LightFadeBegin = eval(this.LightFadeBegin);
                obj.LightFadeEnd = eval(this.LightFadeEnd);
                obj.Unknown1 = eval(this.Unknown1);
                obj.NearHeightMid = eval(this.NearHeightMid);
                obj.NearHeightRange = eval(this.NearHeightRange);
                obj.ForColorHighNear = eval(this.ForColorHighNear);
                obj.ForColorHighFar = eval(this.ForColorHighFar);
                obj.HighDensityScale = eval(this.HighDensityScale);
                obj.FogNearScale = eval(this.FogNearScale);
                obj.FogFarScale = eval(this.FogFarScale);
                obj.FogHighNearScale = eval(this.FogHighNearScale);
                obj.FogHighFarScale = eval(this.FogHighFarScale);
                obj.FarHeightMid = eval(this.FarHeightMid);
                obj.FarHeightRange = eval(this.FarHeightRange);
                obj.InteriorType = eval(this.InteriorType);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CellLighting.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CellLighting.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CellLighting.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.AmbientColor ?? true)
                    {
                        sb.AppendItem(AmbientColor, "AmbientColor");
                    }
                    if (printMask?.DirectionalColor ?? true)
                    {
                        sb.AppendItem(DirectionalColor, "DirectionalColor");
                    }
                    if (printMask?.FogNearColor ?? true)
                    {
                        sb.AppendItem(FogNearColor, "FogNearColor");
                    }
                    if (printMask?.FogNear ?? true)
                    {
                        sb.AppendItem(FogNear, "FogNear");
                    }
                    if (printMask?.FogFar ?? true)
                    {
                        sb.AppendItem(FogFar, "FogFar");
                    }
                    if (printMask?.DirectionalRotationXY ?? true)
                    {
                        sb.AppendItem(DirectionalRotationXY, "DirectionalRotationXY");
                    }
                    if (printMask?.DirectionalRotationZ ?? true)
                    {
                        sb.AppendItem(DirectionalRotationZ, "DirectionalRotationZ");
                    }
                    if (printMask?.DirectionalFade ?? true)
                    {
                        sb.AppendItem(DirectionalFade, "DirectionalFade");
                    }
                    if (printMask?.FogClipDistance ?? true)
                    {
                        sb.AppendItem(FogClipDistance, "FogClipDistance");
                    }
                    if (printMask?.FogPower ?? true)
                    {
                        sb.AppendItem(FogPower, "FogPower");
                    }
                    if (printMask?.FogFarColor ?? true)
                    {
                        sb.AppendItem(FogFarColor, "FogFarColor");
                    }
                    if (printMask?.FogMax ?? true)
                    {
                        sb.AppendItem(FogMax, "FogMax");
                    }
                    if (printMask?.LightFadeBegin ?? true)
                    {
                        sb.AppendItem(LightFadeBegin, "LightFadeBegin");
                    }
                    if (printMask?.LightFadeEnd ?? true)
                    {
                        sb.AppendItem(LightFadeEnd, "LightFadeEnd");
                    }
                    if (printMask?.Unknown1 ?? true)
                    {
                        sb.AppendItem(Unknown1, "Unknown1");
                    }
                    if (printMask?.NearHeightMid ?? true)
                    {
                        sb.AppendItem(NearHeightMid, "NearHeightMid");
                    }
                    if (printMask?.NearHeightRange ?? true)
                    {
                        sb.AppendItem(NearHeightRange, "NearHeightRange");
                    }
                    if (printMask?.ForColorHighNear ?? true)
                    {
                        sb.AppendItem(ForColorHighNear, "ForColorHighNear");
                    }
                    if (printMask?.ForColorHighFar ?? true)
                    {
                        sb.AppendItem(ForColorHighFar, "ForColorHighFar");
                    }
                    if (printMask?.HighDensityScale ?? true)
                    {
                        sb.AppendItem(HighDensityScale, "HighDensityScale");
                    }
                    if (printMask?.FogNearScale ?? true)
                    {
                        sb.AppendItem(FogNearScale, "FogNearScale");
                    }
                    if (printMask?.FogFarScale ?? true)
                    {
                        sb.AppendItem(FogFarScale, "FogFarScale");
                    }
                    if (printMask?.FogHighNearScale ?? true)
                    {
                        sb.AppendItem(FogHighNearScale, "FogHighNearScale");
                    }
                    if (printMask?.FogHighFarScale ?? true)
                    {
                        sb.AppendItem(FogHighFarScale, "FogHighFarScale");
                    }
                    if (printMask?.FarHeightMid ?? true)
                    {
                        sb.AppendItem(FarHeightMid, "FarHeightMid");
                    }
                    if (printMask?.FarHeightRange ?? true)
                    {
                        sb.AppendItem(FarHeightRange, "FarHeightRange");
                    }
                    if (printMask?.InteriorType ?? true)
                    {
                        sb.AppendItem(InteriorType, "InteriorType");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? AmbientColor;
            public Exception? DirectionalColor;
            public Exception? FogNearColor;
            public Exception? FogNear;
            public Exception? FogFar;
            public Exception? DirectionalRotationXY;
            public Exception? DirectionalRotationZ;
            public Exception? DirectionalFade;
            public Exception? FogClipDistance;
            public Exception? FogPower;
            public Exception? FogFarColor;
            public Exception? FogMax;
            public Exception? LightFadeBegin;
            public Exception? LightFadeEnd;
            public Exception? Unknown1;
            public Exception? NearHeightMid;
            public Exception? NearHeightRange;
            public Exception? ForColorHighNear;
            public Exception? ForColorHighFar;
            public Exception? HighDensityScale;
            public Exception? FogNearScale;
            public Exception? FogFarScale;
            public Exception? FogHighNearScale;
            public Exception? FogHighFarScale;
            public Exception? FarHeightMid;
            public Exception? FarHeightRange;
            public Exception? InteriorType;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
                switch (enu)
                {
                    case CellLighting_FieldIndex.AmbientColor:
                        return AmbientColor;
                    case CellLighting_FieldIndex.DirectionalColor:
                        return DirectionalColor;
                    case CellLighting_FieldIndex.FogNearColor:
                        return FogNearColor;
                    case CellLighting_FieldIndex.FogNear:
                        return FogNear;
                    case CellLighting_FieldIndex.FogFar:
                        return FogFar;
                    case CellLighting_FieldIndex.DirectionalRotationXY:
                        return DirectionalRotationXY;
                    case CellLighting_FieldIndex.DirectionalRotationZ:
                        return DirectionalRotationZ;
                    case CellLighting_FieldIndex.DirectionalFade:
                        return DirectionalFade;
                    case CellLighting_FieldIndex.FogClipDistance:
                        return FogClipDistance;
                    case CellLighting_FieldIndex.FogPower:
                        return FogPower;
                    case CellLighting_FieldIndex.FogFarColor:
                        return FogFarColor;
                    case CellLighting_FieldIndex.FogMax:
                        return FogMax;
                    case CellLighting_FieldIndex.LightFadeBegin:
                        return LightFadeBegin;
                    case CellLighting_FieldIndex.LightFadeEnd:
                        return LightFadeEnd;
                    case CellLighting_FieldIndex.Unknown1:
                        return Unknown1;
                    case CellLighting_FieldIndex.NearHeightMid:
                        return NearHeightMid;
                    case CellLighting_FieldIndex.NearHeightRange:
                        return NearHeightRange;
                    case CellLighting_FieldIndex.ForColorHighNear:
                        return ForColorHighNear;
                    case CellLighting_FieldIndex.ForColorHighFar:
                        return ForColorHighFar;
                    case CellLighting_FieldIndex.HighDensityScale:
                        return HighDensityScale;
                    case CellLighting_FieldIndex.FogNearScale:
                        return FogNearScale;
                    case CellLighting_FieldIndex.FogFarScale:
                        return FogFarScale;
                    case CellLighting_FieldIndex.FogHighNearScale:
                        return FogHighNearScale;
                    case CellLighting_FieldIndex.FogHighFarScale:
                        return FogHighFarScale;
                    case CellLighting_FieldIndex.FarHeightMid:
                        return FarHeightMid;
                    case CellLighting_FieldIndex.FarHeightRange:
                        return FarHeightRange;
                    case CellLighting_FieldIndex.InteriorType:
                        return InteriorType;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
                switch (enu)
                {
                    case CellLighting_FieldIndex.AmbientColor:
                        this.AmbientColor = ex;
                        break;
                    case CellLighting_FieldIndex.DirectionalColor:
                        this.DirectionalColor = ex;
                        break;
                    case CellLighting_FieldIndex.FogNearColor:
                        this.FogNearColor = ex;
                        break;
                    case CellLighting_FieldIndex.FogNear:
                        this.FogNear = ex;
                        break;
                    case CellLighting_FieldIndex.FogFar:
                        this.FogFar = ex;
                        break;
                    case CellLighting_FieldIndex.DirectionalRotationXY:
                        this.DirectionalRotationXY = ex;
                        break;
                    case CellLighting_FieldIndex.DirectionalRotationZ:
                        this.DirectionalRotationZ = ex;
                        break;
                    case CellLighting_FieldIndex.DirectionalFade:
                        this.DirectionalFade = ex;
                        break;
                    case CellLighting_FieldIndex.FogClipDistance:
                        this.FogClipDistance = ex;
                        break;
                    case CellLighting_FieldIndex.FogPower:
                        this.FogPower = ex;
                        break;
                    case CellLighting_FieldIndex.FogFarColor:
                        this.FogFarColor = ex;
                        break;
                    case CellLighting_FieldIndex.FogMax:
                        this.FogMax = ex;
                        break;
                    case CellLighting_FieldIndex.LightFadeBegin:
                        this.LightFadeBegin = ex;
                        break;
                    case CellLighting_FieldIndex.LightFadeEnd:
                        this.LightFadeEnd = ex;
                        break;
                    case CellLighting_FieldIndex.Unknown1:
                        this.Unknown1 = ex;
                        break;
                    case CellLighting_FieldIndex.NearHeightMid:
                        this.NearHeightMid = ex;
                        break;
                    case CellLighting_FieldIndex.NearHeightRange:
                        this.NearHeightRange = ex;
                        break;
                    case CellLighting_FieldIndex.ForColorHighNear:
                        this.ForColorHighNear = ex;
                        break;
                    case CellLighting_FieldIndex.ForColorHighFar:
                        this.ForColorHighFar = ex;
                        break;
                    case CellLighting_FieldIndex.HighDensityScale:
                        this.HighDensityScale = ex;
                        break;
                    case CellLighting_FieldIndex.FogNearScale:
                        this.FogNearScale = ex;
                        break;
                    case CellLighting_FieldIndex.FogFarScale:
                        this.FogFarScale = ex;
                        break;
                    case CellLighting_FieldIndex.FogHighNearScale:
                        this.FogHighNearScale = ex;
                        break;
                    case CellLighting_FieldIndex.FogHighFarScale:
                        this.FogHighFarScale = ex;
                        break;
                    case CellLighting_FieldIndex.FarHeightMid:
                        this.FarHeightMid = ex;
                        break;
                    case CellLighting_FieldIndex.FarHeightRange:
                        this.FarHeightRange = ex;
                        break;
                    case CellLighting_FieldIndex.InteriorType:
                        this.InteriorType = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CellLighting_FieldIndex enu = (CellLighting_FieldIndex)index;
                switch (enu)
                {
                    case CellLighting_FieldIndex.AmbientColor:
                        this.AmbientColor = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.DirectionalColor:
                        this.DirectionalColor = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogNearColor:
                        this.FogNearColor = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogNear:
                        this.FogNear = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogFar:
                        this.FogFar = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.DirectionalRotationXY:
                        this.DirectionalRotationXY = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.DirectionalRotationZ:
                        this.DirectionalRotationZ = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.DirectionalFade:
                        this.DirectionalFade = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogClipDistance:
                        this.FogClipDistance = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogPower:
                        this.FogPower = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogFarColor:
                        this.FogFarColor = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogMax:
                        this.FogMax = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.LightFadeBegin:
                        this.LightFadeBegin = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.LightFadeEnd:
                        this.LightFadeEnd = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.Unknown1:
                        this.Unknown1 = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.NearHeightMid:
                        this.NearHeightMid = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.NearHeightRange:
                        this.NearHeightRange = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.ForColorHighNear:
                        this.ForColorHighNear = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.ForColorHighFar:
                        this.ForColorHighFar = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.HighDensityScale:
                        this.HighDensityScale = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogNearScale:
                        this.FogNearScale = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogFarScale:
                        this.FogFarScale = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogHighNearScale:
                        this.FogHighNearScale = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FogHighFarScale:
                        this.FogHighFarScale = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FarHeightMid:
                        this.FarHeightMid = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.FarHeightRange:
                        this.FarHeightRange = (Exception?)obj;
                        break;
                    case CellLighting_FieldIndex.InteriorType:
                        this.InteriorType = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (AmbientColor != null) return true;
                if (DirectionalColor != null) return true;
                if (FogNearColor != null) return true;
                if (FogNear != null) return true;
                if (FogFar != null) return true;
                if (DirectionalRotationXY != null) return true;
                if (DirectionalRotationZ != null) return true;
                if (DirectionalFade != null) return true;
                if (FogClipDistance != null) return true;
                if (FogPower != null) return true;
                if (FogFarColor != null) return true;
                if (FogMax != null) return true;
                if (LightFadeBegin != null) return true;
                if (LightFadeEnd != null) return true;
                if (Unknown1 != null) return true;
                if (NearHeightMid != null) return true;
                if (NearHeightRange != null) return true;
                if (ForColorHighNear != null) return true;
                if (ForColorHighFar != null) return true;
                if (HighDensityScale != null) return true;
                if (FogNearScale != null) return true;
                if (FogFarScale != null) return true;
                if (FogHighNearScale != null) return true;
                if (FogHighFarScale != null) return true;
                if (FarHeightMid != null) return true;
                if (FarHeightRange != null) return true;
                if (InteriorType != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(AmbientColor, "AmbientColor");
                }
                {
                    sb.AppendItem(DirectionalColor, "DirectionalColor");
                }
                {
                    sb.AppendItem(FogNearColor, "FogNearColor");
                }
                {
                    sb.AppendItem(FogNear, "FogNear");
                }
                {
                    sb.AppendItem(FogFar, "FogFar");
                }
                {
                    sb.AppendItem(DirectionalRotationXY, "DirectionalRotationXY");
                }
                {
                    sb.AppendItem(DirectionalRotationZ, "DirectionalRotationZ");
                }
                {
                    sb.AppendItem(DirectionalFade, "DirectionalFade");
                }
                {
                    sb.AppendItem(FogClipDistance, "FogClipDistance");
                }
                {
                    sb.AppendItem(FogPower, "FogPower");
                }
                {
                    sb.AppendItem(FogFarColor, "FogFarColor");
                }
                {
                    sb.AppendItem(FogMax, "FogMax");
                }
                {
                    sb.AppendItem(LightFadeBegin, "LightFadeBegin");
                }
                {
                    sb.AppendItem(LightFadeEnd, "LightFadeEnd");
                }
                {
                    sb.AppendItem(Unknown1, "Unknown1");
                }
                {
                    sb.AppendItem(NearHeightMid, "NearHeightMid");
                }
                {
                    sb.AppendItem(NearHeightRange, "NearHeightRange");
                }
                {
                    sb.AppendItem(ForColorHighNear, "ForColorHighNear");
                }
                {
                    sb.AppendItem(ForColorHighFar, "ForColorHighFar");
                }
                {
                    sb.AppendItem(HighDensityScale, "HighDensityScale");
                }
                {
                    sb.AppendItem(FogNearScale, "FogNearScale");
                }
                {
                    sb.AppendItem(FogFarScale, "FogFarScale");
                }
                {
                    sb.AppendItem(FogHighNearScale, "FogHighNearScale");
                }
                {
                    sb.AppendItem(FogHighFarScale, "FogHighFarScale");
                }
                {
                    sb.AppendItem(FarHeightMid, "FarHeightMid");
                }
                {
                    sb.AppendItem(FarHeightRange, "FarHeightRange");
                }
                {
                    sb.AppendItem(InteriorType, "InteriorType");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.AmbientColor = this.AmbientColor.Combine(rhs.AmbientColor);
                ret.DirectionalColor = this.DirectionalColor.Combine(rhs.DirectionalColor);
                ret.FogNearColor = this.FogNearColor.Combine(rhs.FogNearColor);
                ret.FogNear = this.FogNear.Combine(rhs.FogNear);
                ret.FogFar = this.FogFar.Combine(rhs.FogFar);
                ret.DirectionalRotationXY = this.DirectionalRotationXY.Combine(rhs.DirectionalRotationXY);
                ret.DirectionalRotationZ = this.DirectionalRotationZ.Combine(rhs.DirectionalRotationZ);
                ret.DirectionalFade = this.DirectionalFade.Combine(rhs.DirectionalFade);
                ret.FogClipDistance = this.FogClipDistance.Combine(rhs.FogClipDistance);
                ret.FogPower = this.FogPower.Combine(rhs.FogPower);
                ret.FogFarColor = this.FogFarColor.Combine(rhs.FogFarColor);
                ret.FogMax = this.FogMax.Combine(rhs.FogMax);
                ret.LightFadeBegin = this.LightFadeBegin.Combine(rhs.LightFadeBegin);
                ret.LightFadeEnd = this.LightFadeEnd.Combine(rhs.LightFadeEnd);
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
                ret.NearHeightMid = this.NearHeightMid.Combine(rhs.NearHeightMid);
                ret.NearHeightRange = this.NearHeightRange.Combine(rhs.NearHeightRange);
                ret.ForColorHighNear = this.ForColorHighNear.Combine(rhs.ForColorHighNear);
                ret.ForColorHighFar = this.ForColorHighFar.Combine(rhs.ForColorHighFar);
                ret.HighDensityScale = this.HighDensityScale.Combine(rhs.HighDensityScale);
                ret.FogNearScale = this.FogNearScale.Combine(rhs.FogNearScale);
                ret.FogFarScale = this.FogFarScale.Combine(rhs.FogFarScale);
                ret.FogHighNearScale = this.FogHighNearScale.Combine(rhs.FogHighNearScale);
                ret.FogHighFarScale = this.FogHighFarScale.Combine(rhs.FogHighFarScale);
                ret.FarHeightMid = this.FarHeightMid.Combine(rhs.FarHeightMid);
                ret.FarHeightRange = this.FarHeightRange.Combine(rhs.FarHeightRange);
                ret.InteriorType = this.InteriorType.Combine(rhs.InteriorType);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool AmbientColor;
            public bool DirectionalColor;
            public bool FogNearColor;
            public bool FogNear;
            public bool FogFar;
            public bool DirectionalRotationXY;
            public bool DirectionalRotationZ;
            public bool DirectionalFade;
            public bool FogClipDistance;
            public bool FogPower;
            public bool FogFarColor;
            public bool FogMax;
            public bool LightFadeBegin;
            public bool LightFadeEnd;
            public bool Unknown1;
            public bool NearHeightMid;
            public bool NearHeightRange;
            public bool ForColorHighNear;
            public bool ForColorHighFar;
            public bool HighDensityScale;
            public bool FogNearScale;
            public bool FogFarScale;
            public bool FogHighNearScale;
            public bool FogHighFarScale;
            public bool FarHeightMid;
            public bool FarHeightRange;
            public bool InteriorType;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.AmbientColor = defaultOn;
                this.DirectionalColor = defaultOn;
                this.FogNearColor = defaultOn;
                this.FogNear = defaultOn;
                this.FogFar = defaultOn;
                this.DirectionalRotationXY = defaultOn;
                this.DirectionalRotationZ = defaultOn;
                this.DirectionalFade = defaultOn;
                this.FogClipDistance = defaultOn;
                this.FogPower = defaultOn;
                this.FogFarColor = defaultOn;
                this.FogMax = defaultOn;
                this.LightFadeBegin = defaultOn;
                this.LightFadeEnd = defaultOn;
                this.Unknown1 = defaultOn;
                this.NearHeightMid = defaultOn;
                this.NearHeightRange = defaultOn;
                this.ForColorHighNear = defaultOn;
                this.ForColorHighFar = defaultOn;
                this.HighDensityScale = defaultOn;
                this.FogNearScale = defaultOn;
                this.FogFarScale = defaultOn;
                this.FogHighNearScale = defaultOn;
                this.FogHighFarScale = defaultOn;
                this.FarHeightMid = defaultOn;
                this.FarHeightRange = defaultOn;
                this.InteriorType = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((AmbientColor, null));
                ret.Add((DirectionalColor, null));
                ret.Add((FogNearColor, null));
                ret.Add((FogNear, null));
                ret.Add((FogFar, null));
                ret.Add((DirectionalRotationXY, null));
                ret.Add((DirectionalRotationZ, null));
                ret.Add((DirectionalFade, null));
                ret.Add((FogClipDistance, null));
                ret.Add((FogPower, null));
                ret.Add((FogFarColor, null));
                ret.Add((FogMax, null));
                ret.Add((LightFadeBegin, null));
                ret.Add((LightFadeEnd, null));
                ret.Add((Unknown1, null));
                ret.Add((NearHeightMid, null));
                ret.Add((NearHeightRange, null));
                ret.Add((ForColorHighNear, null));
                ret.Add((ForColorHighFar, null));
                ret.Add((HighDensityScale, null));
                ret.Add((FogNearScale, null));
                ret.Add((FogFarScale, null));
                ret.Add((FogHighNearScale, null));
                ret.Add((FogHighFarScale, null));
                ret.Add((FarHeightMid, null));
                ret.Add((FarHeightRange, null));
                ret.Add((InteriorType, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CellLightingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CellLightingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CellLighting CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CellLighting();
            ((CellLightingSetterCommon)((ICellLightingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CellLighting item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CellLightingSetterCommon)((ICellLightingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CellLighting GetNew()
        {
            return new CellLighting();
        }

    }
    #endregion

    #region Interface
    public partial interface ICellLighting :
        ICellLightingGetter,
        ILoquiObjectSetter<ICellLighting>
    {
        new Color AmbientColor { get; set; }
        new Color DirectionalColor { get; set; }
        new Color FogNearColor { get; set; }
        new Single FogNear { get; set; }
        new Single FogFar { get; set; }
        new Int32 DirectionalRotationXY { get; set; }
        new Int32 DirectionalRotationZ { get; set; }
        new Single DirectionalFade { get; set; }
        new Single FogClipDistance { get; set; }
        new Single FogPower { get; set; }
        new Color FogFarColor { get; set; }
        new Single FogMax { get; set; }
        new Single LightFadeBegin { get; set; }
        new Single LightFadeEnd { get; set; }
        new Int32 Unknown1 { get; set; }
        new Single NearHeightMid { get; set; }
        new Single NearHeightRange { get; set; }
        new Color ForColorHighNear { get; set; }
        new Color ForColorHighFar { get; set; }
        new Single HighDensityScale { get; set; }
        new Single FogNearScale { get; set; }
        new Single FogFarScale { get; set; }
        new Single FogHighNearScale { get; set; }
        new Single FogHighFarScale { get; set; }
        new Single FarHeightMid { get; set; }
        new Single FarHeightRange { get; set; }
        new Cell.InteriorType InteriorType { get; set; }
    }

    public partial interface ICellLightingGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ICellLightingGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CellLighting_Registration.Instance;
        Color AmbientColor { get; }
        Color DirectionalColor { get; }
        Color FogNearColor { get; }
        Single FogNear { get; }
        Single FogFar { get; }
        Int32 DirectionalRotationXY { get; }
        Int32 DirectionalRotationZ { get; }
        Single DirectionalFade { get; }
        Single FogClipDistance { get; }
        Single FogPower { get; }
        Color FogFarColor { get; }
        Single FogMax { get; }
        Single LightFadeBegin { get; }
        Single LightFadeEnd { get; }
        Int32 Unknown1 { get; }
        Single NearHeightMid { get; }
        Single NearHeightRange { get; }
        Color ForColorHighNear { get; }
        Color ForColorHighFar { get; }
        Single HighDensityScale { get; }
        Single FogNearScale { get; }
        Single FogFarScale { get; }
        Single FogHighNearScale { get; }
        Single FogHighFarScale { get; }
        Single FarHeightMid { get; }
        Single FarHeightRange { get; }
        Cell.InteriorType InteriorType { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CellLightingMixIn
    {
        public static void Clear(this ICellLighting item)
        {
            ((CellLightingSetterCommon)((ICellLightingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CellLighting.Mask<bool> GetEqualsMask(
            this ICellLightingGetter item,
            ICellLightingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICellLightingGetter item,
            string? name = null,
            CellLighting.Mask<bool>? printMask = null)
        {
            return ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICellLightingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CellLighting.Mask<bool>? printMask = null)
        {
            ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICellLightingGetter item,
            ICellLightingGetter rhs,
            CellLighting.TranslationMask? equalsMask = null)
        {
            return ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICellLighting lhs,
            ICellLightingGetter rhs)
        {
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICellLighting lhs,
            ICellLightingGetter rhs,
            CellLighting.TranslationMask? copyMask = null)
        {
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICellLighting lhs,
            ICellLightingGetter rhs,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CellLighting.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICellLighting lhs,
            ICellLightingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CellLighting DeepCopy(
            this ICellLightingGetter item,
            CellLighting.TranslationMask? copyMask = null)
        {
            return ((CellLightingSetterTranslationCommon)((ICellLightingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CellLighting DeepCopy(
            this ICellLightingGetter item,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? copyMask = null)
        {
            return ((CellLightingSetterTranslationCommon)((ICellLightingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CellLighting DeepCopy(
            this ICellLightingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CellLightingSetterTranslationCommon)((ICellLightingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICellLighting item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CellLightingSetterCommon)((ICellLightingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum CellLighting_FieldIndex
    {
        AmbientColor = 0,
        DirectionalColor = 1,
        FogNearColor = 2,
        FogNear = 3,
        FogFar = 4,
        DirectionalRotationXY = 5,
        DirectionalRotationZ = 6,
        DirectionalFade = 7,
        FogClipDistance = 8,
        FogPower = 9,
        FogFarColor = 10,
        FogMax = 11,
        LightFadeBegin = 12,
        LightFadeEnd = 13,
        Unknown1 = 14,
        NearHeightMid = 15,
        NearHeightRange = 16,
        ForColorHighNear = 17,
        ForColorHighFar = 18,
        HighDensityScale = 19,
        FogNearScale = 20,
        FogFarScale = 21,
        FogHighNearScale = 22,
        FogHighFarScale = 23,
        FarHeightMid = 24,
        FarHeightRange = 25,
        InteriorType = 26,
    }
    #endregion

    #region Registration
    internal partial class CellLighting_Registration : ILoquiRegistration
    {
        public static readonly CellLighting_Registration Instance = new CellLighting_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 27;

        public const ushort FieldCount = 27;

        public static readonly Type MaskType = typeof(CellLighting.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CellLighting.ErrorMask);

        public static readonly Type ClassType = typeof(CellLighting);

        public static readonly Type GetterType = typeof(ICellLightingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICellLighting);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.CellLighting";

        public const string Name = "CellLighting";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.XCLL;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.XCLL);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CellLightingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CellLightingSetterCommon
    {
        public static readonly CellLightingSetterCommon Instance = new CellLightingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICellLighting item)
        {
            ClearPartial();
            item.AmbientColor = default(Color);
            item.DirectionalColor = default(Color);
            item.FogNearColor = default(Color);
            item.FogNear = default(Single);
            item.FogFar = default(Single);
            item.DirectionalRotationXY = default(Int32);
            item.DirectionalRotationZ = default(Int32);
            item.DirectionalFade = default(Single);
            item.FogClipDistance = default(Single);
            item.FogPower = default(Single);
            item.FogFarColor = default(Color);
            item.FogMax = default(Single);
            item.LightFadeBegin = default(Single);
            item.LightFadeEnd = default(Single);
            item.Unknown1 = default(Int32);
            item.NearHeightMid = default(Single);
            item.NearHeightRange = default(Single);
            item.ForColorHighNear = default(Color);
            item.ForColorHighFar = default(Color);
            item.HighDensityScale = default(Single);
            item.FogNearScale = default(Single);
            item.FogFarScale = default(Single);
            item.FogHighNearScale = default(Single);
            item.FogHighFarScale = default(Single);
            item.FarHeightMid = default(Single);
            item.FarHeightRange = default(Single);
            item.InteriorType = default(Cell.InteriorType);
        }
        
        #region Mutagen
        public void RemapLinks(ICellLighting obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICellLighting item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.XCLL),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CellLightingBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class CellLightingCommon
    {
        public static readonly CellLightingCommon Instance = new CellLightingCommon();

        public CellLighting.Mask<bool> GetEqualsMask(
            ICellLightingGetter item,
            ICellLightingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CellLighting.Mask<bool>(false);
            ((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICellLightingGetter item,
            ICellLightingGetter rhs,
            CellLighting.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.AmbientColor = item.AmbientColor.ColorOnlyEquals(rhs.AmbientColor);
            ret.DirectionalColor = item.DirectionalColor.ColorOnlyEquals(rhs.DirectionalColor);
            ret.FogNearColor = item.FogNearColor.ColorOnlyEquals(rhs.FogNearColor);
            ret.FogNear = item.FogNear.EqualsWithin(rhs.FogNear);
            ret.FogFar = item.FogFar.EqualsWithin(rhs.FogFar);
            ret.DirectionalRotationXY = item.DirectionalRotationXY == rhs.DirectionalRotationXY;
            ret.DirectionalRotationZ = item.DirectionalRotationZ == rhs.DirectionalRotationZ;
            ret.DirectionalFade = item.DirectionalFade.EqualsWithin(rhs.DirectionalFade);
            ret.FogClipDistance = item.FogClipDistance.EqualsWithin(rhs.FogClipDistance);
            ret.FogPower = item.FogPower.EqualsWithin(rhs.FogPower);
            ret.FogFarColor = item.FogFarColor.ColorOnlyEquals(rhs.FogFarColor);
            ret.FogMax = item.FogMax.EqualsWithin(rhs.FogMax);
            ret.LightFadeBegin = item.LightFadeBegin.EqualsWithin(rhs.LightFadeBegin);
            ret.LightFadeEnd = item.LightFadeEnd.EqualsWithin(rhs.LightFadeEnd);
            ret.Unknown1 = item.Unknown1 == rhs.Unknown1;
            ret.NearHeightMid = item.NearHeightMid.EqualsWithin(rhs.NearHeightMid);
            ret.NearHeightRange = item.NearHeightRange.EqualsWithin(rhs.NearHeightRange);
            ret.ForColorHighNear = item.ForColorHighNear.ColorOnlyEquals(rhs.ForColorHighNear);
            ret.ForColorHighFar = item.ForColorHighFar.ColorOnlyEquals(rhs.ForColorHighFar);
            ret.HighDensityScale = item.HighDensityScale.EqualsWithin(rhs.HighDensityScale);
            ret.FogNearScale = item.FogNearScale.EqualsWithin(rhs.FogNearScale);
            ret.FogFarScale = item.FogFarScale.EqualsWithin(rhs.FogFarScale);
            ret.FogHighNearScale = item.FogHighNearScale.EqualsWithin(rhs.FogHighNearScale);
            ret.FogHighFarScale = item.FogHighFarScale.EqualsWithin(rhs.FogHighFarScale);
            ret.FarHeightMid = item.FarHeightMid.EqualsWithin(rhs.FarHeightMid);
            ret.FarHeightRange = item.FarHeightRange.EqualsWithin(rhs.FarHeightRange);
            ret.InteriorType = item.InteriorType == rhs.InteriorType;
        }
        
        public string Print(
            ICellLightingGetter item,
            string? name = null,
            CellLighting.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICellLightingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CellLighting.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CellLighting =>");
            }
            else
            {
                sb.AppendLine($"{name} (CellLighting) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICellLightingGetter item,
            StructuredStringBuilder sb,
            CellLighting.Mask<bool>? printMask = null)
        {
            if (printMask?.AmbientColor ?? true)
            {
                sb.AppendItem(item.AmbientColor, "AmbientColor");
            }
            if (printMask?.DirectionalColor ?? true)
            {
                sb.AppendItem(item.DirectionalColor, "DirectionalColor");
            }
            if (printMask?.FogNearColor ?? true)
            {
                sb.AppendItem(item.FogNearColor, "FogNearColor");
            }
            if (printMask?.FogNear ?? true)
            {
                sb.AppendItem(item.FogNear, "FogNear");
            }
            if (printMask?.FogFar ?? true)
            {
                sb.AppendItem(item.FogFar, "FogFar");
            }
            if (printMask?.DirectionalRotationXY ?? true)
            {
                sb.AppendItem(item.DirectionalRotationXY, "DirectionalRotationXY");
            }
            if (printMask?.DirectionalRotationZ ?? true)
            {
                sb.AppendItem(item.DirectionalRotationZ, "DirectionalRotationZ");
            }
            if (printMask?.DirectionalFade ?? true)
            {
                sb.AppendItem(item.DirectionalFade, "DirectionalFade");
            }
            if (printMask?.FogClipDistance ?? true)
            {
                sb.AppendItem(item.FogClipDistance, "FogClipDistance");
            }
            if (printMask?.FogPower ?? true)
            {
                sb.AppendItem(item.FogPower, "FogPower");
            }
            if (printMask?.FogFarColor ?? true)
            {
                sb.AppendItem(item.FogFarColor, "FogFarColor");
            }
            if (printMask?.FogMax ?? true)
            {
                sb.AppendItem(item.FogMax, "FogMax");
            }
            if (printMask?.LightFadeBegin ?? true)
            {
                sb.AppendItem(item.LightFadeBegin, "LightFadeBegin");
            }
            if (printMask?.LightFadeEnd ?? true)
            {
                sb.AppendItem(item.LightFadeEnd, "LightFadeEnd");
            }
            if (printMask?.Unknown1 ?? true)
            {
                sb.AppendItem(item.Unknown1, "Unknown1");
            }
            if (printMask?.NearHeightMid ?? true)
            {
                sb.AppendItem(item.NearHeightMid, "NearHeightMid");
            }
            if (printMask?.NearHeightRange ?? true)
            {
                sb.AppendItem(item.NearHeightRange, "NearHeightRange");
            }
            if (printMask?.ForColorHighNear ?? true)
            {
                sb.AppendItem(item.ForColorHighNear, "ForColorHighNear");
            }
            if (printMask?.ForColorHighFar ?? true)
            {
                sb.AppendItem(item.ForColorHighFar, "ForColorHighFar");
            }
            if (printMask?.HighDensityScale ?? true)
            {
                sb.AppendItem(item.HighDensityScale, "HighDensityScale");
            }
            if (printMask?.FogNearScale ?? true)
            {
                sb.AppendItem(item.FogNearScale, "FogNearScale");
            }
            if (printMask?.FogFarScale ?? true)
            {
                sb.AppendItem(item.FogFarScale, "FogFarScale");
            }
            if (printMask?.FogHighNearScale ?? true)
            {
                sb.AppendItem(item.FogHighNearScale, "FogHighNearScale");
            }
            if (printMask?.FogHighFarScale ?? true)
            {
                sb.AppendItem(item.FogHighFarScale, "FogHighFarScale");
            }
            if (printMask?.FarHeightMid ?? true)
            {
                sb.AppendItem(item.FarHeightMid, "FarHeightMid");
            }
            if (printMask?.FarHeightRange ?? true)
            {
                sb.AppendItem(item.FarHeightRange, "FarHeightRange");
            }
            if (printMask?.InteriorType ?? true)
            {
                sb.AppendItem(item.InteriorType, "InteriorType");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICellLightingGetter? lhs,
            ICellLightingGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientColor) ?? true))
            {
                if (!lhs.AmbientColor.ColorOnlyEquals(rhs.AmbientColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalColor) ?? true))
            {
                if (!lhs.DirectionalColor.ColorOnlyEquals(rhs.DirectionalColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNearColor) ?? true))
            {
                if (!lhs.FogNearColor.ColorOnlyEquals(rhs.FogNearColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNear) ?? true))
            {
                if (!lhs.FogNear.EqualsWithin(rhs.FogNear)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFar) ?? true))
            {
                if (!lhs.FogFar.EqualsWithin(rhs.FogFar)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationXY) ?? true))
            {
                if (lhs.DirectionalRotationXY != rhs.DirectionalRotationXY) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationZ) ?? true))
            {
                if (lhs.DirectionalRotationZ != rhs.DirectionalRotationZ) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalFade) ?? true))
            {
                if (!lhs.DirectionalFade.EqualsWithin(rhs.DirectionalFade)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogClipDistance) ?? true))
            {
                if (!lhs.FogClipDistance.EqualsWithin(rhs.FogClipDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogPower) ?? true))
            {
                if (!lhs.FogPower.EqualsWithin(rhs.FogPower)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFarColor) ?? true))
            {
                if (!lhs.FogFarColor.ColorOnlyEquals(rhs.FogFarColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogMax) ?? true))
            {
                if (!lhs.FogMax.EqualsWithin(rhs.FogMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.LightFadeBegin) ?? true))
            {
                if (!lhs.LightFadeBegin.EqualsWithin(rhs.LightFadeBegin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.LightFadeEnd) ?? true))
            {
                if (!lhs.LightFadeEnd.EqualsWithin(rhs.LightFadeEnd)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.Unknown1) ?? true))
            {
                if (lhs.Unknown1 != rhs.Unknown1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.NearHeightMid) ?? true))
            {
                if (!lhs.NearHeightMid.EqualsWithin(rhs.NearHeightMid)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.NearHeightRange) ?? true))
            {
                if (!lhs.NearHeightRange.EqualsWithin(rhs.NearHeightRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.ForColorHighNear) ?? true))
            {
                if (!lhs.ForColorHighNear.ColorOnlyEquals(rhs.ForColorHighNear)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.ForColorHighFar) ?? true))
            {
                if (!lhs.ForColorHighFar.ColorOnlyEquals(rhs.ForColorHighFar)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.HighDensityScale) ?? true))
            {
                if (!lhs.HighDensityScale.EqualsWithin(rhs.HighDensityScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNearScale) ?? true))
            {
                if (!lhs.FogNearScale.EqualsWithin(rhs.FogNearScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFarScale) ?? true))
            {
                if (!lhs.FogFarScale.EqualsWithin(rhs.FogFarScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogHighNearScale) ?? true))
            {
                if (!lhs.FogHighNearScale.EqualsWithin(rhs.FogHighNearScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogHighFarScale) ?? true))
            {
                if (!lhs.FogHighFarScale.EqualsWithin(rhs.FogHighFarScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FarHeightMid) ?? true))
            {
                if (!lhs.FarHeightMid.EqualsWithin(rhs.FarHeightMid)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FarHeightRange) ?? true))
            {
                if (!lhs.FarHeightRange.EqualsWithin(rhs.FarHeightRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CellLighting_FieldIndex.InteriorType) ?? true))
            {
                if (lhs.InteriorType != rhs.InteriorType) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICellLightingGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.AmbientColor);
            hash.Add(item.DirectionalColor);
            hash.Add(item.FogNearColor);
            hash.Add(item.FogNear);
            hash.Add(item.FogFar);
            hash.Add(item.DirectionalRotationXY);
            hash.Add(item.DirectionalRotationZ);
            hash.Add(item.DirectionalFade);
            hash.Add(item.FogClipDistance);
            hash.Add(item.FogPower);
            hash.Add(item.FogFarColor);
            hash.Add(item.FogMax);
            hash.Add(item.LightFadeBegin);
            hash.Add(item.LightFadeEnd);
            hash.Add(item.Unknown1);
            hash.Add(item.NearHeightMid);
            hash.Add(item.NearHeightRange);
            hash.Add(item.ForColorHighNear);
            hash.Add(item.ForColorHighFar);
            hash.Add(item.HighDensityScale);
            hash.Add(item.FogNearScale);
            hash.Add(item.FogFarScale);
            hash.Add(item.FogHighNearScale);
            hash.Add(item.FogHighFarScale);
            hash.Add(item.FarHeightMid);
            hash.Add(item.FarHeightRange);
            hash.Add(item.InteriorType);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CellLighting.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICellLightingGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class CellLightingSetterTranslationCommon
    {
        public static readonly CellLightingSetterTranslationCommon Instance = new CellLightingSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICellLighting item,
            ICellLightingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.AmbientColor) ?? true))
            {
                item.AmbientColor = rhs.AmbientColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalColor) ?? true))
            {
                item.DirectionalColor = rhs.DirectionalColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNearColor) ?? true))
            {
                item.FogNearColor = rhs.FogNearColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNear) ?? true))
            {
                item.FogNear = rhs.FogNear;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFar) ?? true))
            {
                item.FogFar = rhs.FogFar;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationXY) ?? true))
            {
                item.DirectionalRotationXY = rhs.DirectionalRotationXY;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalRotationZ) ?? true))
            {
                item.DirectionalRotationZ = rhs.DirectionalRotationZ;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.DirectionalFade) ?? true))
            {
                item.DirectionalFade = rhs.DirectionalFade;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogClipDistance) ?? true))
            {
                item.FogClipDistance = rhs.FogClipDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogPower) ?? true))
            {
                item.FogPower = rhs.FogPower;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFarColor) ?? true))
            {
                item.FogFarColor = rhs.FogFarColor;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogMax) ?? true))
            {
                item.FogMax = rhs.FogMax;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.LightFadeBegin) ?? true))
            {
                item.LightFadeBegin = rhs.LightFadeBegin;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.LightFadeEnd) ?? true))
            {
                item.LightFadeEnd = rhs.LightFadeEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.Unknown1) ?? true))
            {
                item.Unknown1 = rhs.Unknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.NearHeightMid) ?? true))
            {
                item.NearHeightMid = rhs.NearHeightMid;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.NearHeightRange) ?? true))
            {
                item.NearHeightRange = rhs.NearHeightRange;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.ForColorHighNear) ?? true))
            {
                item.ForColorHighNear = rhs.ForColorHighNear;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.ForColorHighFar) ?? true))
            {
                item.ForColorHighFar = rhs.ForColorHighFar;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.HighDensityScale) ?? true))
            {
                item.HighDensityScale = rhs.HighDensityScale;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogNearScale) ?? true))
            {
                item.FogNearScale = rhs.FogNearScale;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogFarScale) ?? true))
            {
                item.FogFarScale = rhs.FogFarScale;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogHighNearScale) ?? true))
            {
                item.FogHighNearScale = rhs.FogHighNearScale;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FogHighFarScale) ?? true))
            {
                item.FogHighFarScale = rhs.FogHighFarScale;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FarHeightMid) ?? true))
            {
                item.FarHeightMid = rhs.FarHeightMid;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.FarHeightRange) ?? true))
            {
                item.FarHeightRange = rhs.FarHeightRange;
            }
            if ((copyMask?.GetShouldTranslate((int)CellLighting_FieldIndex.InteriorType) ?? true))
            {
                item.InteriorType = rhs.InteriorType;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICellLighting item,
            ICellLightingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public CellLighting DeepCopy(
            ICellLightingGetter item,
            CellLighting.TranslationMask? copyMask = null)
        {
            CellLighting ret = (CellLighting)((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).GetNew();
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CellLighting DeepCopy(
            ICellLightingGetter item,
            out CellLighting.ErrorMask errorMask,
            CellLighting.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CellLighting ret = (CellLighting)((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).GetNew();
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CellLighting.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CellLighting DeepCopy(
            ICellLightingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CellLighting ret = (CellLighting)((CellLightingCommon)((ICellLightingGetter)item).CommonInstance()!).GetNew();
            ((CellLightingSetterTranslationCommon)((ICellLightingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class CellLighting
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellLighting_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CellLighting_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CellLightingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CellLightingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CellLightingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class CellLightingBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly CellLightingBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ICellLightingGetter item,
            MutagenWriter writer)
        {
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.AmbientColor);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.DirectionalColor);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogNearColor);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FogNear);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FogFar);
            writer.Write(item.DirectionalRotationXY);
            writer.Write(item.DirectionalRotationZ);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DirectionalFade);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FogClipDistance);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FogPower);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FogFarColor);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FogMax);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LightFadeBegin);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LightFadeEnd);
            writer.Write(item.Unknown1);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NearHeightMid);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NearHeightRange);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ForColorHighNear);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ForColorHighFar);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HighDensityScale);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FogNearScale);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FogFarScale);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FogHighNearScale);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FogHighFarScale);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FarHeightMid);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FarHeightRange);
            EnumBinaryTranslation<Cell.InteriorType, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.InteriorType,
                length: 4);
        }

        public void Write(
            MutagenWriter writer,
            ICellLightingGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.XCLL),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICellLightingGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CellLightingBinaryCreateTranslation
    {
        public static readonly CellLightingBinaryCreateTranslation Instance = new CellLightingBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ICellLighting item,
            MutagenFrame frame)
        {
            item.AmbientColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.DirectionalColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.FogNearColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.FogNear = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FogFar = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.DirectionalRotationXY = frame.ReadInt32();
            item.DirectionalRotationZ = frame.ReadInt32();
            item.DirectionalFade = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FogClipDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FogPower = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FogFarColor = frame.ReadColor(ColorBinaryType.Alpha);
            item.FogMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.LightFadeBegin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.LightFadeEnd = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown1 = frame.ReadInt32();
            item.NearHeightMid = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.NearHeightRange = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ForColorHighNear = frame.ReadColor(ColorBinaryType.Alpha);
            item.ForColorHighFar = frame.ReadColor(ColorBinaryType.Alpha);
            item.HighDensityScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FogNearScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FogFarScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FogHighNearScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FogHighFarScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FarHeightMid = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.FarHeightRange = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.InteriorType = EnumBinaryTranslation<Cell.InteriorType, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class CellLightingBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICellLightingGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CellLightingBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class CellLightingBinaryOverlay :
        PluginBinaryOverlay,
        ICellLightingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CellLighting_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CellLighting_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CellLightingCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CellLightingSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICellLightingGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICellLightingGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CellLightingBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CellLightingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Color AmbientColor => _structData.Slice(0x0, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color DirectionalColor => _structData.Slice(0x4, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color FogNearColor => _structData.Slice(0x8, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Single FogNear => _structData.Slice(0xC, 0x4).Float();
        public Single FogFar => _structData.Slice(0x10, 0x4).Float();
        public Int32 DirectionalRotationXY => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x14, 0x4));
        public Int32 DirectionalRotationZ => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x18, 0x4));
        public Single DirectionalFade => _structData.Slice(0x1C, 0x4).Float();
        public Single FogClipDistance => _structData.Slice(0x20, 0x4).Float();
        public Single FogPower => _structData.Slice(0x24, 0x4).Float();
        public Color FogFarColor => _structData.Slice(0x28, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Single FogMax => _structData.Slice(0x2C, 0x4).Float();
        public Single LightFadeBegin => _structData.Slice(0x30, 0x4).Float();
        public Single LightFadeEnd => _structData.Slice(0x34, 0x4).Float();
        public Int32 Unknown1 => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x38, 0x4));
        public Single NearHeightMid => _structData.Slice(0x3C, 0x4).Float();
        public Single NearHeightRange => _structData.Slice(0x40, 0x4).Float();
        public Color ForColorHighNear => _structData.Slice(0x44, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Color ForColorHighFar => _structData.Slice(0x48, 0x4).ReadColor(ColorBinaryType.Alpha);
        public Single HighDensityScale => _structData.Slice(0x4C, 0x4).Float();
        public Single FogNearScale => _structData.Slice(0x50, 0x4).Float();
        public Single FogFarScale => _structData.Slice(0x54, 0x4).Float();
        public Single FogHighNearScale => _structData.Slice(0x58, 0x4).Float();
        public Single FogHighFarScale => _structData.Slice(0x5C, 0x4).Float();
        public Single FarHeightMid => _structData.Slice(0x60, 0x4).Float();
        public Single FarHeightRange => _structData.Slice(0x64, 0x4).Float();
        public Cell.InteriorType InteriorType => (Cell.InteriorType)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x68, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CellLightingBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICellLightingGetter CellLightingFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x6C,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new CellLightingBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x6C + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ICellLightingGetter CellLightingFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CellLightingFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CellLightingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICellLightingGetter rhs) return false;
            return ((CellLightingCommon)((ICellLightingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICellLightingGetter? obj)
        {
            return ((CellLightingCommon)((ICellLightingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CellLightingCommon)((ICellLightingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

