/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    /// <summary>
    /// Aspects: IKeywordCommon
    /// </summary>
    public partial class Keyword :
        StarfieldMajorRecord,
        IEquatable<IKeywordGetter>,
        IKeywordInternal,
        ILoquiObjectSetter<Keyword>
    {
        #region Ctor
        protected Keyword()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IKeywordGetter.Components => _Components;
        #endregion

        #endregion
        #region Color
        public Color? Color { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? IKeywordGetter.Color => this.Color;
        #endregion
        #region Notes
        public String? Notes { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IKeywordGetter.Notes => this.Notes;
        #endregion
        #region Type
        public Keyword.TypeEnum? Type { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Keyword.TypeEnum? IKeywordGetter.Type => this.Type;
        #endregion
        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FNAM;
        public MemorySlice<Byte>? FNAM
        {
            get => this._FNAM;
            set => this._FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IKeywordGetter.FNAM => this.FNAM;
        #endregion
        #region FlashLinkageName
        public String? FlashLinkageName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IKeywordGetter.FlashLinkageName => this.FlashLinkageName;
        #endregion
        #region AttractionRule
        private readonly IFormLinkNullable<IAttractionRuleGetter> _AttractionRule = new FormLinkNullable<IAttractionRuleGetter>();
        public IFormLinkNullable<IAttractionRuleGetter> AttractionRule
        {
            get => _AttractionRule;
            set => _AttractionRule.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAttractionRuleGetter> IKeywordGetter.AttractionRule => this.AttractionRule;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IKeywordGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            KeywordMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Color = initialValue;
                this.Notes = initialValue;
                this.Type = initialValue;
                this.FNAM = initialValue;
                this.FlashLinkageName = initialValue;
                this.AttractionRule = initialValue;
                this.Name = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem Color,
                TItem Notes,
                TItem Type,
                TItem FNAM,
                TItem FlashLinkageName,
                TItem AttractionRule,
                TItem Name)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Color = Color;
                this.Notes = Notes;
                this.Type = Type;
                this.FNAM = FNAM;
                this.FlashLinkageName = FlashLinkageName;
                this.AttractionRule = AttractionRule;
                this.Name = Name;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Color;
            public TItem Notes;
            public TItem Type;
            public TItem FNAM;
            public TItem FlashLinkageName;
            public TItem AttractionRule;
            public TItem Name;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                if (!object.Equals(this.Notes, rhs.Notes)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.FlashLinkageName, rhs.FlashLinkageName)) return false;
                if (!object.Equals(this.AttractionRule, rhs.AttractionRule)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.Color);
                hash.Add(this.Notes);
                hash.Add(this.Type);
                hash.Add(this.FNAM);
                hash.Add(this.FlashLinkageName);
                hash.Add(this.AttractionRule);
                hash.Add(this.Name);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Color)) return false;
                if (!eval(this.Notes)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.FNAM)) return false;
                if (!eval(this.FlashLinkageName)) return false;
                if (!eval(this.AttractionRule)) return false;
                if (!eval(this.Name)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Color)) return true;
                if (eval(this.Notes)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.FNAM)) return true;
                if (eval(this.FlashLinkageName)) return true;
                if (eval(this.AttractionRule)) return true;
                if (eval(this.Name)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Keyword.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Color = eval(this.Color);
                obj.Notes = eval(this.Notes);
                obj.Type = eval(this.Type);
                obj.FNAM = eval(this.FNAM);
                obj.FlashLinkageName = eval(this.FlashLinkageName);
                obj.AttractionRule = eval(this.AttractionRule);
                obj.Name = eval(this.Name);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Keyword.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Keyword.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Keyword.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Color ?? true)
                    {
                        sb.AppendItem(Color, "Color");
                    }
                    if (printMask?.Notes ?? true)
                    {
                        sb.AppendItem(Notes, "Notes");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        sb.AppendItem(FNAM, "FNAM");
                    }
                    if (printMask?.FlashLinkageName ?? true)
                    {
                        sb.AppendItem(FlashLinkageName, "FlashLinkageName");
                    }
                    if (printMask?.AttractionRule ?? true)
                    {
                        sb.AppendItem(AttractionRule, "AttractionRule");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Color;
            public Exception? Notes;
            public Exception? Type;
            public Exception? FNAM;
            public Exception? FlashLinkageName;
            public Exception? AttractionRule;
            public Exception? Name;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Keyword_FieldIndex enu = (Keyword_FieldIndex)index;
                switch (enu)
                {
                    case Keyword_FieldIndex.Components:
                        return Components;
                    case Keyword_FieldIndex.Color:
                        return Color;
                    case Keyword_FieldIndex.Notes:
                        return Notes;
                    case Keyword_FieldIndex.Type:
                        return Type;
                    case Keyword_FieldIndex.FNAM:
                        return FNAM;
                    case Keyword_FieldIndex.FlashLinkageName:
                        return FlashLinkageName;
                    case Keyword_FieldIndex.AttractionRule:
                        return AttractionRule;
                    case Keyword_FieldIndex.Name:
                        return Name;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Keyword_FieldIndex enu = (Keyword_FieldIndex)index;
                switch (enu)
                {
                    case Keyword_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case Keyword_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    case Keyword_FieldIndex.Notes:
                        this.Notes = ex;
                        break;
                    case Keyword_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Keyword_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case Keyword_FieldIndex.FlashLinkageName:
                        this.FlashLinkageName = ex;
                        break;
                    case Keyword_FieldIndex.AttractionRule:
                        this.AttractionRule = ex;
                        break;
                    case Keyword_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Keyword_FieldIndex enu = (Keyword_FieldIndex)index;
                switch (enu)
                {
                    case Keyword_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case Keyword_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    case Keyword_FieldIndex.Notes:
                        this.Notes = (Exception?)obj;
                        break;
                    case Keyword_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Keyword_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case Keyword_FieldIndex.FlashLinkageName:
                        this.FlashLinkageName = (Exception?)obj;
                        break;
                    case Keyword_FieldIndex.AttractionRule:
                        this.AttractionRule = (Exception?)obj;
                        break;
                    case Keyword_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (Color != null) return true;
                if (Notes != null) return true;
                if (Type != null) return true;
                if (FNAM != null) return true;
                if (FlashLinkageName != null) return true;
                if (AttractionRule != null) return true;
                if (Name != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Color, "Color");
                }
                {
                    sb.AppendItem(Notes, "Notes");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(FNAM, "FNAM");
                }
                {
                    sb.AppendItem(FlashLinkageName, "FlashLinkageName");
                }
                {
                    sb.AppendItem(AttractionRule, "AttractionRule");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Color = this.Color.Combine(rhs.Color);
                ret.Notes = this.Notes.Combine(rhs.Notes);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.FlashLinkageName = this.FlashLinkageName.Combine(rhs.FlashLinkageName);
                ret.AttractionRule = this.AttractionRule.Combine(rhs.AttractionRule);
                ret.Name = this.Name.Combine(rhs.Name);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool Color;
            public bool Notes;
            public bool Type;
            public bool FNAM;
            public bool FlashLinkageName;
            public bool AttractionRule;
            public bool Name;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Color = defaultOn;
                this.Notes = defaultOn;
                this.Type = defaultOn;
                this.FNAM = defaultOn;
                this.FlashLinkageName = defaultOn;
                this.AttractionRule = defaultOn;
                this.Name = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Color, null));
                ret.Add((Notes, null));
                ret.Add((Type, null));
                ret.Add((FNAM, null));
                ret.Add((FlashLinkageName, null));
                ret.Add((AttractionRule, null));
                ret.Add((Name, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Keyword_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => KeywordCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => KeywordSetterCommon.Instance.RemapLinks(this, mapping);
        public Keyword(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Keyword(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Keyword(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Keyword(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public Keyword(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Keyword>.ToString(this);
        }

        protected override Type LinkType => typeof(IKeyword);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => KeywordCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => KeywordSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => KeywordSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => KeywordSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IKeywordGetter rhs) return false;
            return ((KeywordCommon)((IKeywordGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IKeywordGetter? obj)
        {
            return ((KeywordCommon)((IKeywordGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((KeywordCommon)((IKeywordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => KeywordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((KeywordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Keyword CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Keyword();
            ((KeywordSetterCommon)((IKeywordGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Keyword item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((KeywordSetterCommon)((IKeywordGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Keyword GetNew()
        {
            return new Keyword();
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Aspects: IKeywordCommon
    /// </summary>
    public partial interface IKeyword :
        IAssetLinkContainer,
        IFormLinkContainer,
        IKeywordCommon,
        IKeywordGetter,
        IKeywordLinkedReference,
        ILoquiObjectSetter<IKeywordInternal>,
        INamed,
        INamedRequired,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new ExtendedList<AComponent> Components { get; }
        new Color? Color { get; set; }
        new String? Notes { get; set; }
        new Keyword.TypeEnum? Type { get; set; }
        new MemorySlice<Byte>? FNAM { get; set; }
        new String? FlashLinkageName { get; set; }
        new IFormLinkNullable<IAttractionRuleGetter> AttractionRule { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        #region Mutagen
        new Keyword.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IKeywordInternal :
        IStarfieldMajorRecordInternal,
        IKeyword,
        IKeywordGetter
    {
    }

    /// <summary>
    /// Aspects: IKeywordCommonGetter
    /// </summary>
    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.KYWD)]
    public partial interface IKeywordGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordCommonGetter,
        IKeywordLinkedReferenceGetter,
        ILoquiObject<IKeywordGetter>,
        IMapsToGetter<IKeywordGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Keyword_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        Color? Color { get; }
        String? Notes { get; }
        Keyword.TypeEnum? Type { get; }
        ReadOnlyMemorySlice<Byte>? FNAM { get; }
        String? FlashLinkageName { get; }
        IFormLinkNullableGetter<IAttractionRuleGetter> AttractionRule { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion

        #region Mutagen
        Keyword.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class KeywordMixIn
    {
        public static void Clear(this IKeywordInternal item)
        {
            ((KeywordSetterCommon)((IKeywordGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Keyword.Mask<bool> GetEqualsMask(
            this IKeywordGetter item,
            IKeywordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((KeywordCommon)((IKeywordGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IKeywordGetter item,
            string? name = null,
            Keyword.Mask<bool>? printMask = null)
        {
            return ((KeywordCommon)((IKeywordGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IKeywordGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Keyword.Mask<bool>? printMask = null)
        {
            ((KeywordCommon)((IKeywordGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IKeywordGetter item,
            IKeywordGetter rhs,
            Keyword.TranslationMask? equalsMask = null)
        {
            return ((KeywordCommon)((IKeywordGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IKeywordInternal lhs,
            IKeywordGetter rhs,
            out Keyword.ErrorMask errorMask,
            Keyword.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((KeywordSetterTranslationCommon)((IKeywordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Keyword.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IKeywordInternal lhs,
            IKeywordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((KeywordSetterTranslationCommon)((IKeywordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Keyword DeepCopy(
            this IKeywordGetter item,
            Keyword.TranslationMask? copyMask = null)
        {
            return ((KeywordSetterTranslationCommon)((IKeywordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Keyword DeepCopy(
            this IKeywordGetter item,
            out Keyword.ErrorMask errorMask,
            Keyword.TranslationMask? copyMask = null)
        {
            return ((KeywordSetterTranslationCommon)((IKeywordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Keyword DeepCopy(
            this IKeywordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((KeywordSetterTranslationCommon)((IKeywordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Keyword Duplicate(
            this IKeywordGetter item,
            FormKey formKey,
            Keyword.TranslationMask? copyMask = null)
        {
            return ((KeywordCommon)((IKeywordGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Keyword Duplicate(
            this IKeywordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((KeywordCommon)((IKeywordGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IKeywordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((KeywordSetterCommon)((IKeywordGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Keyword_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        Color = 8,
        Notes = 9,
        Type = 10,
        FNAM = 11,
        FlashLinkageName = 12,
        AttractionRule = 13,
        Name = 14,
    }
    #endregion

    #region Registration
    internal partial class Keyword_Registration : ILoquiRegistration
    {
        public static readonly Keyword_Registration Instance = new Keyword_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(Keyword.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Keyword.ErrorMask);

        public static readonly Type ClassType = typeof(Keyword);

        public static readonly Type GetterType = typeof(IKeywordGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IKeyword);

        public static readonly Type? InternalSetterType = typeof(IKeywordInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.Keyword";

        public const string Name = "Keyword";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.KYWD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.KYWD);
            var all = RecordCollection.Factory(
                RecordTypes.KYWD,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.CNAM,
                RecordTypes.DNAM,
                RecordTypes.TNAM,
                RecordTypes.FNAM,
                RecordTypes.ENAM,
                RecordTypes.DATA,
                RecordTypes.FULL);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(KeywordBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class KeywordSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly KeywordSetterCommon Instance = new KeywordSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IKeywordInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.Color = default;
            item.Notes = default;
            item.Type = default;
            item.FNAM = default;
            item.FlashLinkageName = default;
            item.AttractionRule.Clear();
            item.Name = default;
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IKeywordInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IKeywordInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IKeyword obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.AttractionRule.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IKeyword obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IKeyword obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IKeywordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IKeywordInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: KeywordBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: KeywordBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Keyword)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Keyword)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class KeywordCommon : StarfieldMajorRecordCommon
    {
        public new static readonly KeywordCommon Instance = new KeywordCommon();

        public Keyword.Mask<bool> GetEqualsMask(
            IKeywordGetter item,
            IKeywordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Keyword.Mask<bool>(false);
            ((KeywordCommon)((IKeywordGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IKeywordGetter item,
            IKeywordGetter rhs,
            Keyword.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            ret.Notes = string.Equals(item.Notes, rhs.Notes);
            ret.Type = item.Type == rhs.Type;
            ret.FNAM = MemorySliceExt.SequenceEqual(item.FNAM, rhs.FNAM);
            ret.FlashLinkageName = string.Equals(item.FlashLinkageName, rhs.FlashLinkageName);
            ret.AttractionRule = item.AttractionRule.Equals(rhs.AttractionRule);
            ret.Name = object.Equals(item.Name, rhs.Name);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IKeywordGetter item,
            string? name = null,
            Keyword.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IKeywordGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Keyword.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Keyword =>");
            }
            else
            {
                sb.AppendLine($"{name} (Keyword) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IKeywordGetter item,
            StructuredStringBuilder sb,
            Keyword.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Color ?? true)
                && item.Color is {} ColorItem)
            {
                sb.AppendItem(ColorItem, "Color");
            }
            if ((printMask?.Notes ?? true)
                && item.Notes is {} NotesItem)
            {
                sb.AppendItem(NotesItem, "Notes");
            }
            if ((printMask?.Type ?? true)
                && item.Type is {} TypeItem)
            {
                sb.AppendItem(TypeItem, "Type");
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM is {} FNAMItem)
            {
                sb.AppendLine($"FNAM => {SpanExt.ToHexString(FNAMItem)}");
            }
            if ((printMask?.FlashLinkageName ?? true)
                && item.FlashLinkageName is {} FlashLinkageNameItem)
            {
                sb.AppendItem(FlashLinkageNameItem, "FlashLinkageName");
            }
            if (printMask?.AttractionRule ?? true)
            {
                sb.AppendItem(item.AttractionRule.FormKeyNullable, "AttractionRule");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
        }
        
        public static Keyword_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Keyword_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (Keyword_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (Keyword_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (Keyword_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (Keyword_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (Keyword_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (Keyword_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Keyword_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Keyword_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Keyword_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Keyword_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Keyword_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IKeywordGetter? lhs,
            IKeywordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Keyword_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Keyword_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Keyword_FieldIndex.Color) ?? true))
            {
                if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Keyword_FieldIndex.Notes) ?? true))
            {
                if (!string.Equals(lhs.Notes, rhs.Notes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Keyword_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Keyword_FieldIndex.FNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FNAM, rhs.FNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Keyword_FieldIndex.FlashLinkageName) ?? true))
            {
                if (!string.Equals(lhs.FlashLinkageName, rhs.FlashLinkageName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Keyword_FieldIndex.AttractionRule) ?? true))
            {
                if (!lhs.AttractionRule.Equals(rhs.AttractionRule)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Keyword_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IKeywordGetter?)lhs,
                rhs: rhs as IKeywordGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IKeywordGetter?)lhs,
                rhs: rhs as IKeywordGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IKeywordGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            if (item.Color is {} Coloritem)
            {
                hash.Add(Coloritem);
            }
            if (item.Notes is {} Notesitem)
            {
                hash.Add(Notesitem);
            }
            if (item.Type is {} Typeitem)
            {
                hash.Add(Typeitem);
            }
            if (item.FNAM is {} FNAMItem)
            {
                hash.Add(FNAMItem);
            }
            if (item.FlashLinkageName is {} FlashLinkageNameitem)
            {
                hash.Add(FlashLinkageNameitem);
            }
            hash.Add(item.AttractionRule);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IKeywordGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IKeywordGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Keyword.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IKeywordGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.AttractionRule, out var AttractionRuleInfo))
            {
                yield return AttractionRuleInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IKeywordGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Keyword Duplicate(
            IKeywordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Keyword(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IKeywordGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IKeywordGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class KeywordSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly KeywordSetterTranslationCommon Instance = new KeywordSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IKeywordInternal item,
            IKeywordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IKeyword item,
            IKeywordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Keyword_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)Keyword_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Keyword_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            if ((copyMask?.GetShouldTranslate((int)Keyword_FieldIndex.Notes) ?? true))
            {
                item.Notes = rhs.Notes;
            }
            if ((copyMask?.GetShouldTranslate((int)Keyword_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Keyword_FieldIndex.FNAM) ?? true))
            {
                if(rhs.FNAM is {} FNAMrhs)
                {
                    item.FNAM = FNAMrhs.ToArray();
                }
                else
                {
                    item.FNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Keyword_FieldIndex.FlashLinkageName) ?? true))
            {
                item.FlashLinkageName = rhs.FlashLinkageName;
            }
            if ((copyMask?.GetShouldTranslate((int)Keyword_FieldIndex.AttractionRule) ?? true))
            {
                item.AttractionRule.SetTo(rhs.AttractionRule.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Keyword_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IKeyword item,
            IKeywordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IKeywordInternal)item,
                rhs: (IKeywordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IKeyword)item,
                rhs: (IKeywordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IKeywordInternal)item,
                rhs: (IKeywordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IKeyword)item,
                rhs: (IKeywordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Keyword DeepCopy(
            IKeywordGetter item,
            Keyword.TranslationMask? copyMask = null)
        {
            Keyword ret = (Keyword)((KeywordCommon)((IKeywordGetter)item).CommonInstance()!).GetNew();
            ((KeywordSetterTranslationCommon)((IKeywordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Keyword DeepCopy(
            IKeywordGetter item,
            out Keyword.ErrorMask errorMask,
            Keyword.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Keyword ret = (Keyword)((KeywordCommon)((IKeywordGetter)item).CommonInstance()!).GetNew();
            ((KeywordSetterTranslationCommon)((IKeywordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Keyword.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Keyword DeepCopy(
            IKeywordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Keyword ret = (Keyword)((KeywordCommon)((IKeywordGetter)item).CommonInstance()!).GetNew();
            ((KeywordSetterTranslationCommon)((IKeywordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Keyword
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Keyword_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Keyword_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => KeywordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return KeywordSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => KeywordSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class KeywordBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly KeywordBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IKeywordGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Color,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Notes,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate);
            EnumBinaryTranslation<Keyword.TypeEnum, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Type,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FNAM,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FlashLinkageName,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttractionRule,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
        }

        public void Write(
            MutagenWriter writer,
            IKeywordGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.KYWD,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IKeywordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IKeywordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IKeywordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class KeywordBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly KeywordBinaryCreateTranslation Instance = new KeywordBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.KYWD;
        public static ParseResult FillBinaryRecordTypes(
            IKeywordInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)Keyword_FieldIndex.Components;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Color = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)Keyword_FieldIndex.Color;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Notes = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Keyword_FieldIndex.Notes;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Type = EnumBinaryTranslation<Keyword.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Keyword_FieldIndex.Type;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Keyword_FieldIndex.FNAM;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FlashLinkageName = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Keyword_FieldIndex.FlashLinkageName;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttractionRule.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Keyword_FieldIndex.AttractionRule;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Keyword_FieldIndex.Name;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class KeywordBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class KeywordBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IKeywordGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Keyword_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Keyword_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => KeywordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => KeywordSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => KeywordCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => KeywordCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => KeywordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((KeywordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IKeyword);

        public Keyword.MajorFlag MajorFlags => (Keyword.MajorFlag)this.MajorRecordFlagsRaw;

        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = [];
        #region Color
        private int? _ColorLocation;
        public Color? Color => _ColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color?);
        #endregion
        #region Notes
        private int? _NotesLocation;
        public String? Notes => _NotesLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NotesLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Type
        private int? _TypeLocation;
        public Keyword.TypeEnum? Type => EnumBinaryTranslation<Keyword.TypeEnum, MutagenFrame, MutagenWriter>.Instance.ParseRecordNullable(_TypeLocation, _recordData, _package, 4);
        #endregion
        #region FNAM
        private int? _FNAMLocation;
        public ReadOnlyMemorySlice<Byte>? FNAM => _FNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FlashLinkageName
        private int? _FlashLinkageNameLocation;
        public String? FlashLinkageName => _FlashLinkageNameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlashLinkageNameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region AttractionRule
        private int? _AttractionRuleLocation;
        public IFormLinkNullableGetter<IAttractionRuleGetter> AttractionRule => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IAttractionRuleGetter>(_package, _recordData, _AttractionRuleLocation);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected KeywordBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IKeywordGetter KeywordFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new KeywordBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IKeywordGetter KeywordFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return KeywordFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)Keyword_FieldIndex.Components;
                }
                case RecordTypeInts.CNAM:
                {
                    _ColorLocation = (stream.Position - offset);
                    return (int)Keyword_FieldIndex.Color;
                }
                case RecordTypeInts.DNAM:
                {
                    _NotesLocation = (stream.Position - offset);
                    return (int)Keyword_FieldIndex.Notes;
                }
                case RecordTypeInts.TNAM:
                {
                    _TypeLocation = (stream.Position - offset);
                    return (int)Keyword_FieldIndex.Type;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return (int)Keyword_FieldIndex.FNAM;
                }
                case RecordTypeInts.ENAM:
                {
                    _FlashLinkageNameLocation = (stream.Position - offset);
                    return (int)Keyword_FieldIndex.FlashLinkageName;
                }
                case RecordTypeInts.DATA:
                {
                    _AttractionRuleLocation = (stream.Position - offset);
                    return (int)Keyword_FieldIndex.AttractionRule;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Keyword_FieldIndex.Name;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            KeywordMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Keyword>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IKeywordGetter rhs) return false;
            return ((KeywordCommon)((IKeywordGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IKeywordGetter? obj)
        {
            return ((KeywordCommon)((IKeywordGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((KeywordCommon)((IKeywordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

