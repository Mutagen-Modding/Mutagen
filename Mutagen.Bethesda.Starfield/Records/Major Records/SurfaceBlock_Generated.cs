/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class SurfaceBlock :
        StarfieldMajorRecord,
        IEquatable<ISurfaceBlockGetter>,
        ILoquiObjectSetter<SurfaceBlock>,
        ISurfaceBlockInternal
    {
        #region Ctor
        protected SurfaceBlock()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> ISurfaceBlockGetter.Components => _Components;
        #endregion

        #endregion
        #region ANAM
        public String? ANAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISurfaceBlockGetter.ANAM => this.ANAM;
        #endregion
        #region DNAM
        public SurfaceBlockIntItem DNAM { get; set; } = new SurfaceBlockIntItem();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISurfaceBlockIntItemGetter ISurfaceBlockGetter.DNAM => DNAM;
        #endregion
        #region ENAM
        public SurfaceBlockFloatItem ENAM { get; set; } = new SurfaceBlockFloatItem();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISurfaceBlockFloatItemGetter ISurfaceBlockGetter.ENAM => ENAM;
        #endregion
        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FNAM;
        public MemorySlice<Byte>? FNAM
        {
            get => this._FNAM;
            set => this._FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ISurfaceBlockGetter.FNAM => this.FNAM;
        #endregion
        #region GNAM
        public Byte? GNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? ISurfaceBlockGetter.GNAM => this.GNAM;
        #endregion
        #region HNAM
        public UInt16 HNAM { get; set; } = default(UInt16);
        #endregion
        #region INAM
        public Byte INAM { get; set; } = default(Byte);
        #endregion
        #region JNAM
        public Byte JNAM { get; set; } = default(Byte);
        #endregion
        #region KNAM
        public Byte KNAM { get; set; } = default(Byte);
        #endregion
        #region WHGT
        public Single WHGT { get; set; } = default(Single);
        #endregion
        #region NAM0
        public String? NAM0 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISurfaceBlockGetter.NAM0 => this.NAM0;
        #endregion
        #region NAM1
        public String? NAM1 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISurfaceBlockGetter.NAM1 => this.NAM1;
        #endregion
        #region NAM2
        public Int64? NAM2 { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int64? ISurfaceBlockGetter.NAM2 => this.NAM2;
        #endregion
        #region NAM3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SurfaceBlockIntItem? _NAM3;
        public SurfaceBlockIntItem? NAM3
        {
            get => _NAM3;
            set => _NAM3 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISurfaceBlockIntItemGetter? ISurfaceBlockGetter.NAM3 => this.NAM3;
        #endregion
        #region NAM4
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SurfaceBlockFloatItem? _NAM4;
        public SurfaceBlockFloatItem? NAM4
        {
            get => _NAM4;
            set => _NAM4 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISurfaceBlockFloatItemGetter? ISurfaceBlockGetter.NAM4 => this.NAM4;
        #endregion
        #region NAM5
        private readonly IFormLinkNullable<ISurfaceBlockGetter> _NAM5 = new FormLinkNullable<ISurfaceBlockGetter>();
        public IFormLinkNullable<ISurfaceBlockGetter> NAM5
        {
            get => _NAM5;
            set => _NAM5.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISurfaceBlockGetter> ISurfaceBlockGetter.NAM5 => this.NAM5;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SurfaceBlockMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.ANAM = initialValue;
                this.DNAM = new MaskItem<TItem, SurfaceBlockIntItem.Mask<TItem>?>(initialValue, new SurfaceBlockIntItem.Mask<TItem>(initialValue));
                this.ENAM = new MaskItem<TItem, SurfaceBlockFloatItem.Mask<TItem>?>(initialValue, new SurfaceBlockFloatItem.Mask<TItem>(initialValue));
                this.FNAM = initialValue;
                this.GNAM = initialValue;
                this.HNAM = initialValue;
                this.INAM = initialValue;
                this.JNAM = initialValue;
                this.KNAM = initialValue;
                this.WHGT = initialValue;
                this.NAM0 = initialValue;
                this.NAM1 = initialValue;
                this.NAM2 = initialValue;
                this.NAM3 = new MaskItem<TItem, SurfaceBlockIntItem.Mask<TItem>?>(initialValue, new SurfaceBlockIntItem.Mask<TItem>(initialValue));
                this.NAM4 = new MaskItem<TItem, SurfaceBlockFloatItem.Mask<TItem>?>(initialValue, new SurfaceBlockFloatItem.Mask<TItem>(initialValue));
                this.NAM5 = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem Components,
                TItem ANAM,
                TItem DNAM,
                TItem ENAM,
                TItem FNAM,
                TItem GNAM,
                TItem HNAM,
                TItem INAM,
                TItem JNAM,
                TItem KNAM,
                TItem WHGT,
                TItem NAM0,
                TItem NAM1,
                TItem NAM2,
                TItem NAM3,
                TItem NAM4,
                TItem NAM5)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.ANAM = ANAM;
                this.DNAM = new MaskItem<TItem, SurfaceBlockIntItem.Mask<TItem>?>(DNAM, new SurfaceBlockIntItem.Mask<TItem>(DNAM));
                this.ENAM = new MaskItem<TItem, SurfaceBlockFloatItem.Mask<TItem>?>(ENAM, new SurfaceBlockFloatItem.Mask<TItem>(ENAM));
                this.FNAM = FNAM;
                this.GNAM = GNAM;
                this.HNAM = HNAM;
                this.INAM = INAM;
                this.JNAM = JNAM;
                this.KNAM = KNAM;
                this.WHGT = WHGT;
                this.NAM0 = NAM0;
                this.NAM1 = NAM1;
                this.NAM2 = NAM2;
                this.NAM3 = new MaskItem<TItem, SurfaceBlockIntItem.Mask<TItem>?>(NAM3, new SurfaceBlockIntItem.Mask<TItem>(NAM3));
                this.NAM4 = new MaskItem<TItem, SurfaceBlockFloatItem.Mask<TItem>?>(NAM4, new SurfaceBlockFloatItem.Mask<TItem>(NAM4));
                this.NAM5 = NAM5;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem ANAM;
            public MaskItem<TItem, SurfaceBlockIntItem.Mask<TItem>?>? DNAM { get; set; }
            public MaskItem<TItem, SurfaceBlockFloatItem.Mask<TItem>?>? ENAM { get; set; }
            public TItem FNAM;
            public TItem GNAM;
            public TItem HNAM;
            public TItem INAM;
            public TItem JNAM;
            public TItem KNAM;
            public TItem WHGT;
            public TItem NAM0;
            public TItem NAM1;
            public TItem NAM2;
            public MaskItem<TItem, SurfaceBlockIntItem.Mask<TItem>?>? NAM3 { get; set; }
            public MaskItem<TItem, SurfaceBlockFloatItem.Mask<TItem>?>? NAM4 { get; set; }
            public TItem NAM5;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.ANAM, rhs.ANAM)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                if (!object.Equals(this.ENAM, rhs.ENAM)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.GNAM, rhs.GNAM)) return false;
                if (!object.Equals(this.HNAM, rhs.HNAM)) return false;
                if (!object.Equals(this.INAM, rhs.INAM)) return false;
                if (!object.Equals(this.JNAM, rhs.JNAM)) return false;
                if (!object.Equals(this.KNAM, rhs.KNAM)) return false;
                if (!object.Equals(this.WHGT, rhs.WHGT)) return false;
                if (!object.Equals(this.NAM0, rhs.NAM0)) return false;
                if (!object.Equals(this.NAM1, rhs.NAM1)) return false;
                if (!object.Equals(this.NAM2, rhs.NAM2)) return false;
                if (!object.Equals(this.NAM3, rhs.NAM3)) return false;
                if (!object.Equals(this.NAM4, rhs.NAM4)) return false;
                if (!object.Equals(this.NAM5, rhs.NAM5)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Components);
                hash.Add(this.ANAM);
                hash.Add(this.DNAM);
                hash.Add(this.ENAM);
                hash.Add(this.FNAM);
                hash.Add(this.GNAM);
                hash.Add(this.HNAM);
                hash.Add(this.INAM);
                hash.Add(this.JNAM);
                hash.Add(this.KNAM);
                hash.Add(this.WHGT);
                hash.Add(this.NAM0);
                hash.Add(this.NAM1);
                hash.Add(this.NAM2);
                hash.Add(this.NAM3);
                hash.Add(this.NAM4);
                hash.Add(this.NAM5);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ANAM)) return false;
                if (DNAM != null)
                {
                    if (!eval(this.DNAM.Overall)) return false;
                    if (this.DNAM.Specific != null && !this.DNAM.Specific.All(eval)) return false;
                }
                if (ENAM != null)
                {
                    if (!eval(this.ENAM.Overall)) return false;
                    if (this.ENAM.Specific != null && !this.ENAM.Specific.All(eval)) return false;
                }
                if (!eval(this.FNAM)) return false;
                if (!eval(this.GNAM)) return false;
                if (!eval(this.HNAM)) return false;
                if (!eval(this.INAM)) return false;
                if (!eval(this.JNAM)) return false;
                if (!eval(this.KNAM)) return false;
                if (!eval(this.WHGT)) return false;
                if (!eval(this.NAM0)) return false;
                if (!eval(this.NAM1)) return false;
                if (!eval(this.NAM2)) return false;
                if (NAM3 != null)
                {
                    if (!eval(this.NAM3.Overall)) return false;
                    if (this.NAM3.Specific != null && !this.NAM3.Specific.All(eval)) return false;
                }
                if (NAM4 != null)
                {
                    if (!eval(this.NAM4.Overall)) return false;
                    if (this.NAM4.Specific != null && !this.NAM4.Specific.All(eval)) return false;
                }
                if (!eval(this.NAM5)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ANAM)) return true;
                if (DNAM != null)
                {
                    if (eval(this.DNAM.Overall)) return true;
                    if (this.DNAM.Specific != null && this.DNAM.Specific.Any(eval)) return true;
                }
                if (ENAM != null)
                {
                    if (eval(this.ENAM.Overall)) return true;
                    if (this.ENAM.Specific != null && this.ENAM.Specific.Any(eval)) return true;
                }
                if (eval(this.FNAM)) return true;
                if (eval(this.GNAM)) return true;
                if (eval(this.HNAM)) return true;
                if (eval(this.INAM)) return true;
                if (eval(this.JNAM)) return true;
                if (eval(this.KNAM)) return true;
                if (eval(this.WHGT)) return true;
                if (eval(this.NAM0)) return true;
                if (eval(this.NAM1)) return true;
                if (eval(this.NAM2)) return true;
                if (NAM3 != null)
                {
                    if (eval(this.NAM3.Overall)) return true;
                    if (this.NAM3.Specific != null && this.NAM3.Specific.Any(eval)) return true;
                }
                if (NAM4 != null)
                {
                    if (eval(this.NAM4.Overall)) return true;
                    if (this.NAM4.Specific != null && this.NAM4.Specific.Any(eval)) return true;
                }
                if (eval(this.NAM5)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SurfaceBlock.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ANAM = eval(this.ANAM);
                obj.DNAM = this.DNAM == null ? null : new MaskItem<R, SurfaceBlockIntItem.Mask<R>?>(eval(this.DNAM.Overall), this.DNAM.Specific?.Translate(eval));
                obj.ENAM = this.ENAM == null ? null : new MaskItem<R, SurfaceBlockFloatItem.Mask<R>?>(eval(this.ENAM.Overall), this.ENAM.Specific?.Translate(eval));
                obj.FNAM = eval(this.FNAM);
                obj.GNAM = eval(this.GNAM);
                obj.HNAM = eval(this.HNAM);
                obj.INAM = eval(this.INAM);
                obj.JNAM = eval(this.JNAM);
                obj.KNAM = eval(this.KNAM);
                obj.WHGT = eval(this.WHGT);
                obj.NAM0 = eval(this.NAM0);
                obj.NAM1 = eval(this.NAM1);
                obj.NAM2 = eval(this.NAM2);
                obj.NAM3 = this.NAM3 == null ? null : new MaskItem<R, SurfaceBlockIntItem.Mask<R>?>(eval(this.NAM3.Overall), this.NAM3.Specific?.Translate(eval));
                obj.NAM4 = this.NAM4 == null ? null : new MaskItem<R, SurfaceBlockFloatItem.Mask<R>?>(eval(this.NAM4.Overall), this.NAM4.Specific?.Translate(eval));
                obj.NAM5 = eval(this.NAM5);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SurfaceBlock.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SurfaceBlock.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SurfaceBlock.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ANAM ?? true)
                    {
                        sb.AppendItem(ANAM, "ANAM");
                    }
                    if (printMask?.DNAM?.Overall ?? true)
                    {
                        DNAM?.Print(sb);
                    }
                    if (printMask?.ENAM?.Overall ?? true)
                    {
                        ENAM?.Print(sb);
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        sb.AppendItem(FNAM, "FNAM");
                    }
                    if (printMask?.GNAM ?? true)
                    {
                        sb.AppendItem(GNAM, "GNAM");
                    }
                    if (printMask?.HNAM ?? true)
                    {
                        sb.AppendItem(HNAM, "HNAM");
                    }
                    if (printMask?.INAM ?? true)
                    {
                        sb.AppendItem(INAM, "INAM");
                    }
                    if (printMask?.JNAM ?? true)
                    {
                        sb.AppendItem(JNAM, "JNAM");
                    }
                    if (printMask?.KNAM ?? true)
                    {
                        sb.AppendItem(KNAM, "KNAM");
                    }
                    if (printMask?.WHGT ?? true)
                    {
                        sb.AppendItem(WHGT, "WHGT");
                    }
                    if (printMask?.NAM0 ?? true)
                    {
                        sb.AppendItem(NAM0, "NAM0");
                    }
                    if (printMask?.NAM1 ?? true)
                    {
                        sb.AppendItem(NAM1, "NAM1");
                    }
                    if (printMask?.NAM2 ?? true)
                    {
                        sb.AppendItem(NAM2, "NAM2");
                    }
                    if (printMask?.NAM3?.Overall ?? true)
                    {
                        NAM3?.Print(sb);
                    }
                    if (printMask?.NAM4?.Overall ?? true)
                    {
                        NAM4?.Print(sb);
                    }
                    if (printMask?.NAM5 ?? true)
                    {
                        sb.AppendItem(NAM5, "NAM5");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? ANAM;
            public MaskItem<Exception?, SurfaceBlockIntItem.ErrorMask?>? DNAM;
            public MaskItem<Exception?, SurfaceBlockFloatItem.ErrorMask?>? ENAM;
            public Exception? FNAM;
            public Exception? GNAM;
            public Exception? HNAM;
            public Exception? INAM;
            public Exception? JNAM;
            public Exception? KNAM;
            public Exception? WHGT;
            public Exception? NAM0;
            public Exception? NAM1;
            public Exception? NAM2;
            public MaskItem<Exception?, SurfaceBlockIntItem.ErrorMask?>? NAM3;
            public MaskItem<Exception?, SurfaceBlockFloatItem.ErrorMask?>? NAM4;
            public Exception? NAM5;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SurfaceBlock_FieldIndex enu = (SurfaceBlock_FieldIndex)index;
                switch (enu)
                {
                    case SurfaceBlock_FieldIndex.Components:
                        return Components;
                    case SurfaceBlock_FieldIndex.ANAM:
                        return ANAM;
                    case SurfaceBlock_FieldIndex.DNAM:
                        return DNAM;
                    case SurfaceBlock_FieldIndex.ENAM:
                        return ENAM;
                    case SurfaceBlock_FieldIndex.FNAM:
                        return FNAM;
                    case SurfaceBlock_FieldIndex.GNAM:
                        return GNAM;
                    case SurfaceBlock_FieldIndex.HNAM:
                        return HNAM;
                    case SurfaceBlock_FieldIndex.INAM:
                        return INAM;
                    case SurfaceBlock_FieldIndex.JNAM:
                        return JNAM;
                    case SurfaceBlock_FieldIndex.KNAM:
                        return KNAM;
                    case SurfaceBlock_FieldIndex.WHGT:
                        return WHGT;
                    case SurfaceBlock_FieldIndex.NAM0:
                        return NAM0;
                    case SurfaceBlock_FieldIndex.NAM1:
                        return NAM1;
                    case SurfaceBlock_FieldIndex.NAM2:
                        return NAM2;
                    case SurfaceBlock_FieldIndex.NAM3:
                        return NAM3;
                    case SurfaceBlock_FieldIndex.NAM4:
                        return NAM4;
                    case SurfaceBlock_FieldIndex.NAM5:
                        return NAM5;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SurfaceBlock_FieldIndex enu = (SurfaceBlock_FieldIndex)index;
                switch (enu)
                {
                    case SurfaceBlock_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case SurfaceBlock_FieldIndex.ANAM:
                        this.ANAM = ex;
                        break;
                    case SurfaceBlock_FieldIndex.DNAM:
                        this.DNAM = new MaskItem<Exception?, SurfaceBlockIntItem.ErrorMask?>(ex, null);
                        break;
                    case SurfaceBlock_FieldIndex.ENAM:
                        this.ENAM = new MaskItem<Exception?, SurfaceBlockFloatItem.ErrorMask?>(ex, null);
                        break;
                    case SurfaceBlock_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case SurfaceBlock_FieldIndex.GNAM:
                        this.GNAM = ex;
                        break;
                    case SurfaceBlock_FieldIndex.HNAM:
                        this.HNAM = ex;
                        break;
                    case SurfaceBlock_FieldIndex.INAM:
                        this.INAM = ex;
                        break;
                    case SurfaceBlock_FieldIndex.JNAM:
                        this.JNAM = ex;
                        break;
                    case SurfaceBlock_FieldIndex.KNAM:
                        this.KNAM = ex;
                        break;
                    case SurfaceBlock_FieldIndex.WHGT:
                        this.WHGT = ex;
                        break;
                    case SurfaceBlock_FieldIndex.NAM0:
                        this.NAM0 = ex;
                        break;
                    case SurfaceBlock_FieldIndex.NAM1:
                        this.NAM1 = ex;
                        break;
                    case SurfaceBlock_FieldIndex.NAM2:
                        this.NAM2 = ex;
                        break;
                    case SurfaceBlock_FieldIndex.NAM3:
                        this.NAM3 = new MaskItem<Exception?, SurfaceBlockIntItem.ErrorMask?>(ex, null);
                        break;
                    case SurfaceBlock_FieldIndex.NAM4:
                        this.NAM4 = new MaskItem<Exception?, SurfaceBlockFloatItem.ErrorMask?>(ex, null);
                        break;
                    case SurfaceBlock_FieldIndex.NAM5:
                        this.NAM5 = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SurfaceBlock_FieldIndex enu = (SurfaceBlock_FieldIndex)index;
                switch (enu)
                {
                    case SurfaceBlock_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case SurfaceBlock_FieldIndex.ANAM:
                        this.ANAM = (Exception?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.DNAM:
                        this.DNAM = (MaskItem<Exception?, SurfaceBlockIntItem.ErrorMask?>?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.ENAM:
                        this.ENAM = (MaskItem<Exception?, SurfaceBlockFloatItem.ErrorMask?>?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.GNAM:
                        this.GNAM = (Exception?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.HNAM:
                        this.HNAM = (Exception?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.INAM:
                        this.INAM = (Exception?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.JNAM:
                        this.JNAM = (Exception?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.KNAM:
                        this.KNAM = (Exception?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.WHGT:
                        this.WHGT = (Exception?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.NAM0:
                        this.NAM0 = (Exception?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.NAM1:
                        this.NAM1 = (Exception?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.NAM2:
                        this.NAM2 = (Exception?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.NAM3:
                        this.NAM3 = (MaskItem<Exception?, SurfaceBlockIntItem.ErrorMask?>?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.NAM4:
                        this.NAM4 = (MaskItem<Exception?, SurfaceBlockFloatItem.ErrorMask?>?)obj;
                        break;
                    case SurfaceBlock_FieldIndex.NAM5:
                        this.NAM5 = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Components != null) return true;
                if (ANAM != null) return true;
                if (DNAM != null) return true;
                if (ENAM != null) return true;
                if (FNAM != null) return true;
                if (GNAM != null) return true;
                if (HNAM != null) return true;
                if (INAM != null) return true;
                if (JNAM != null) return true;
                if (KNAM != null) return true;
                if (WHGT != null) return true;
                if (NAM0 != null) return true;
                if (NAM1 != null) return true;
                if (NAM2 != null) return true;
                if (NAM3 != null) return true;
                if (NAM4 != null) return true;
                if (NAM5 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ANAM, "ANAM");
                }
                DNAM?.Print(sb);
                ENAM?.Print(sb);
                {
                    sb.AppendItem(FNAM, "FNAM");
                }
                {
                    sb.AppendItem(GNAM, "GNAM");
                }
                {
                    sb.AppendItem(HNAM, "HNAM");
                }
                {
                    sb.AppendItem(INAM, "INAM");
                }
                {
                    sb.AppendItem(JNAM, "JNAM");
                }
                {
                    sb.AppendItem(KNAM, "KNAM");
                }
                {
                    sb.AppendItem(WHGT, "WHGT");
                }
                {
                    sb.AppendItem(NAM0, "NAM0");
                }
                {
                    sb.AppendItem(NAM1, "NAM1");
                }
                {
                    sb.AppendItem(NAM2, "NAM2");
                }
                NAM3?.Print(sb);
                NAM4?.Print(sb);
                {
                    sb.AppendItem(NAM5, "NAM5");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.ANAM = this.ANAM.Combine(rhs.ANAM);
                ret.DNAM = this.DNAM.Combine(rhs.DNAM, (l, r) => l.Combine(r));
                ret.ENAM = this.ENAM.Combine(rhs.ENAM, (l, r) => l.Combine(r));
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.GNAM = this.GNAM.Combine(rhs.GNAM);
                ret.HNAM = this.HNAM.Combine(rhs.HNAM);
                ret.INAM = this.INAM.Combine(rhs.INAM);
                ret.JNAM = this.JNAM.Combine(rhs.JNAM);
                ret.KNAM = this.KNAM.Combine(rhs.KNAM);
                ret.WHGT = this.WHGT.Combine(rhs.WHGT);
                ret.NAM0 = this.NAM0.Combine(rhs.NAM0);
                ret.NAM1 = this.NAM1.Combine(rhs.NAM1);
                ret.NAM2 = this.NAM2.Combine(rhs.NAM2);
                ret.NAM3 = this.NAM3.Combine(rhs.NAM3, (l, r) => l.Combine(r));
                ret.NAM4 = this.NAM4.Combine(rhs.NAM4, (l, r) => l.Combine(r));
                ret.NAM5 = this.NAM5.Combine(rhs.NAM5);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public AComponent.TranslationMask? Components;
            public bool ANAM;
            public SurfaceBlockIntItem.TranslationMask? DNAM;
            public SurfaceBlockFloatItem.TranslationMask? ENAM;
            public bool FNAM;
            public bool GNAM;
            public bool HNAM;
            public bool INAM;
            public bool JNAM;
            public bool KNAM;
            public bool WHGT;
            public bool NAM0;
            public bool NAM1;
            public bool NAM2;
            public SurfaceBlockIntItem.TranslationMask? NAM3;
            public SurfaceBlockFloatItem.TranslationMask? NAM4;
            public bool NAM5;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ANAM = defaultOn;
                this.FNAM = defaultOn;
                this.GNAM = defaultOn;
                this.HNAM = defaultOn;
                this.INAM = defaultOn;
                this.JNAM = defaultOn;
                this.KNAM = defaultOn;
                this.WHGT = defaultOn;
                this.NAM0 = defaultOn;
                this.NAM1 = defaultOn;
                this.NAM2 = defaultOn;
                this.NAM5 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((ANAM, null));
                ret.Add((DNAM != null ? DNAM.OnOverall : DefaultOn, DNAM?.GetCrystal()));
                ret.Add((ENAM != null ? ENAM.OnOverall : DefaultOn, ENAM?.GetCrystal()));
                ret.Add((FNAM, null));
                ret.Add((GNAM, null));
                ret.Add((HNAM, null));
                ret.Add((INAM, null));
                ret.Add((JNAM, null));
                ret.Add((KNAM, null));
                ret.Add((WHGT, null));
                ret.Add((NAM0, null));
                ret.Add((NAM1, null));
                ret.Add((NAM2, null));
                ret.Add((NAM3 != null ? NAM3.OnOverall : DefaultOn, NAM3?.GetCrystal()));
                ret.Add((NAM4 != null ? NAM4.OnOverall : DefaultOn, NAM4?.GetCrystal()));
                ret.Add((NAM5, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SurfaceBlock_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SurfaceBlockCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SurfaceBlockSetterCommon.Instance.RemapLinks(this, mapping);
        public SurfaceBlock(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private SurfaceBlock(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal SurfaceBlock(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SurfaceBlock(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public SurfaceBlock(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<SurfaceBlock>.ToString(this);
        }

        protected override Type LinkType => typeof(ISurfaceBlock);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SurfaceBlockCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => SurfaceBlockSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => SurfaceBlockSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => SurfaceBlockSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISurfaceBlockGetter rhs) return false;
            return ((SurfaceBlockCommon)((ISurfaceBlockGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISurfaceBlockGetter? obj)
        {
            return ((SurfaceBlockCommon)((ISurfaceBlockGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SurfaceBlockCommon)((ISurfaceBlockGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SurfaceBlockBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SurfaceBlockBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SurfaceBlock CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SurfaceBlock();
            ((SurfaceBlockSetterCommon)((ISurfaceBlockGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SurfaceBlock item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SurfaceBlockSetterCommon)((ISurfaceBlockGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SurfaceBlock GetNew()
        {
            return new SurfaceBlock();
        }

    }
    #endregion

    #region Interface
    public partial interface ISurfaceBlock :
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<ISurfaceBlockInternal>,
        IStarfieldMajorRecordInternal,
        ISurfaceBlockGetter
    {
        new ExtendedList<AComponent> Components { get; }
        new String? ANAM { get; set; }
        new SurfaceBlockIntItem DNAM { get; set; }
        new SurfaceBlockFloatItem ENAM { get; set; }
        new MemorySlice<Byte>? FNAM { get; set; }
        new Byte? GNAM { get; set; }
        new UInt16 HNAM { get; set; }
        new Byte INAM { get; set; }
        new Byte JNAM { get; set; }
        new Byte KNAM { get; set; }
        new Single WHGT { get; set; }
        new String? NAM0 { get; set; }
        new String? NAM1 { get; set; }
        new Int64? NAM2 { get; set; }
        new SurfaceBlockIntItem? NAM3 { get; set; }
        new SurfaceBlockFloatItem? NAM4 { get; set; }
        new IFormLinkNullable<ISurfaceBlockGetter> NAM5 { get; set; }
    }

    public partial interface ISurfaceBlockInternal :
        IStarfieldMajorRecordInternal,
        ISurfaceBlock,
        ISurfaceBlockGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.SFBK)]
    public partial interface ISurfaceBlockGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISurfaceBlockGetter>,
        IMapsToGetter<ISurfaceBlockGetter>
    {
        static new ILoquiRegistration StaticRegistration => SurfaceBlock_Registration.Instance;
        IReadOnlyList<IAComponentGetter> Components { get; }
        String? ANAM { get; }
        ISurfaceBlockIntItemGetter DNAM { get; }
        ISurfaceBlockFloatItemGetter ENAM { get; }
        ReadOnlyMemorySlice<Byte>? FNAM { get; }
        Byte? GNAM { get; }
        UInt16 HNAM { get; }
        Byte INAM { get; }
        Byte JNAM { get; }
        Byte KNAM { get; }
        Single WHGT { get; }
        String? NAM0 { get; }
        String? NAM1 { get; }
        Int64? NAM2 { get; }
        ISurfaceBlockIntItemGetter? NAM3 { get; }
        ISurfaceBlockFloatItemGetter? NAM4 { get; }
        IFormLinkNullableGetter<ISurfaceBlockGetter> NAM5 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SurfaceBlockMixIn
    {
        public static void Clear(this ISurfaceBlockInternal item)
        {
            ((SurfaceBlockSetterCommon)((ISurfaceBlockGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SurfaceBlock.Mask<bool> GetEqualsMask(
            this ISurfaceBlockGetter item,
            ISurfaceBlockGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SurfaceBlockCommon)((ISurfaceBlockGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISurfaceBlockGetter item,
            string? name = null,
            SurfaceBlock.Mask<bool>? printMask = null)
        {
            return ((SurfaceBlockCommon)((ISurfaceBlockGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISurfaceBlockGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SurfaceBlock.Mask<bool>? printMask = null)
        {
            ((SurfaceBlockCommon)((ISurfaceBlockGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISurfaceBlockGetter item,
            ISurfaceBlockGetter rhs,
            SurfaceBlock.TranslationMask? equalsMask = null)
        {
            return ((SurfaceBlockCommon)((ISurfaceBlockGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISurfaceBlockInternal lhs,
            ISurfaceBlockGetter rhs,
            out SurfaceBlock.ErrorMask errorMask,
            SurfaceBlock.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SurfaceBlockSetterTranslationCommon)((ISurfaceBlockGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SurfaceBlock.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISurfaceBlockInternal lhs,
            ISurfaceBlockGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SurfaceBlockSetterTranslationCommon)((ISurfaceBlockGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SurfaceBlock DeepCopy(
            this ISurfaceBlockGetter item,
            SurfaceBlock.TranslationMask? copyMask = null)
        {
            return ((SurfaceBlockSetterTranslationCommon)((ISurfaceBlockGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SurfaceBlock DeepCopy(
            this ISurfaceBlockGetter item,
            out SurfaceBlock.ErrorMask errorMask,
            SurfaceBlock.TranslationMask? copyMask = null)
        {
            return ((SurfaceBlockSetterTranslationCommon)((ISurfaceBlockGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SurfaceBlock DeepCopy(
            this ISurfaceBlockGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SurfaceBlockSetterTranslationCommon)((ISurfaceBlockGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SurfaceBlock Duplicate(
            this ISurfaceBlockGetter item,
            FormKey formKey,
            SurfaceBlock.TranslationMask? copyMask = null)
        {
            return ((SurfaceBlockCommon)((ISurfaceBlockGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static SurfaceBlock Duplicate(
            this ISurfaceBlockGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SurfaceBlockCommon)((ISurfaceBlockGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISurfaceBlockInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SurfaceBlockSetterCommon)((ISurfaceBlockGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum SurfaceBlock_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        Components = 7,
        ANAM = 8,
        DNAM = 9,
        ENAM = 10,
        FNAM = 11,
        GNAM = 12,
        HNAM = 13,
        INAM = 14,
        JNAM = 15,
        KNAM = 16,
        WHGT = 17,
        NAM0 = 18,
        NAM1 = 19,
        NAM2 = 20,
        NAM3 = 21,
        NAM4 = 22,
        NAM5 = 23,
    }
    #endregion

    #region Registration
    internal partial class SurfaceBlock_Registration : ILoquiRegistration
    {
        public static readonly SurfaceBlock_Registration Instance = new SurfaceBlock_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 24;

        public static readonly Type MaskType = typeof(SurfaceBlock.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SurfaceBlock.ErrorMask);

        public static readonly Type ClassType = typeof(SurfaceBlock);

        public static readonly Type GetterType = typeof(ISurfaceBlockGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISurfaceBlock);

        public static readonly Type? InternalSetterType = typeof(ISurfaceBlockInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.SurfaceBlock";

        public const string Name = "SurfaceBlock";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SFBK;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SFBK);
            var all = RecordCollection.Factory(
                RecordTypes.SFBK,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.ANAM,
                RecordTypes.DNAM,
                RecordTypes.ENAM,
                RecordTypes.FNAM,
                RecordTypes.GNAM,
                RecordTypes.HNAM,
                RecordTypes.INAM,
                RecordTypes.JNAM,
                RecordTypes.KNAM,
                RecordTypes.WHGT,
                RecordTypes.NAM0,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.NAM4,
                RecordTypes.NAM5);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SurfaceBlockBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SurfaceBlockSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly SurfaceBlockSetterCommon Instance = new SurfaceBlockSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISurfaceBlockInternal item)
        {
            ClearPartial();
            item.Components.Clear();
            item.ANAM = default;
            item.DNAM.Clear();
            item.ENAM.Clear();
            item.FNAM = default;
            item.GNAM = default;
            item.HNAM = default(UInt16);
            item.INAM = default(Byte);
            item.JNAM = default(Byte);
            item.KNAM = default(Byte);
            item.WHGT = default(Single);
            item.NAM0 = default;
            item.NAM1 = default;
            item.NAM2 = default;
            item.NAM3 = null;
            item.NAM4 = null;
            item.NAM5.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (ISurfaceBlockInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISurfaceBlockInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISurfaceBlock obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Components.RemapLinks(mapping);
            obj.NAM5.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ISurfaceBlock obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ISurfaceBlock obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISurfaceBlockInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISurfaceBlockInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SurfaceBlockBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SurfaceBlockBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SurfaceBlock)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SurfaceBlock)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SurfaceBlockCommon : StarfieldMajorRecordCommon
    {
        public new static readonly SurfaceBlockCommon Instance = new SurfaceBlockCommon();

        public SurfaceBlock.Mask<bool> GetEqualsMask(
            ISurfaceBlockGetter item,
            ISurfaceBlockGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SurfaceBlock.Mask<bool>(false);
            ((SurfaceBlockCommon)((ISurfaceBlockGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISurfaceBlockGetter item,
            ISurfaceBlockGetter rhs,
            SurfaceBlock.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ANAM = string.Equals(item.ANAM, rhs.ANAM);
            ret.DNAM = MaskItemExt.Factory(item.DNAM.GetEqualsMask(rhs.DNAM, include), include);
            ret.ENAM = MaskItemExt.Factory(item.ENAM.GetEqualsMask(rhs.ENAM, include), include);
            ret.FNAM = MemorySliceExt.SequenceEqual(item.FNAM, rhs.FNAM);
            ret.GNAM = item.GNAM == rhs.GNAM;
            ret.HNAM = item.HNAM == rhs.HNAM;
            ret.INAM = item.INAM == rhs.INAM;
            ret.JNAM = item.JNAM == rhs.JNAM;
            ret.KNAM = item.KNAM == rhs.KNAM;
            ret.WHGT = item.WHGT.EqualsWithin(rhs.WHGT);
            ret.NAM0 = string.Equals(item.NAM0, rhs.NAM0);
            ret.NAM1 = string.Equals(item.NAM1, rhs.NAM1);
            ret.NAM2 = item.NAM2 == rhs.NAM2;
            ret.NAM3 = EqualsMaskHelper.EqualsHelper(
                item.NAM3,
                rhs.NAM3,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.NAM4 = EqualsMaskHelper.EqualsHelper(
                item.NAM4,
                rhs.NAM4,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.NAM5 = item.NAM5.Equals(rhs.NAM5);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISurfaceBlockGetter item,
            string? name = null,
            SurfaceBlock.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISurfaceBlockGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SurfaceBlock.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SurfaceBlock =>");
            }
            else
            {
                sb.AppendLine($"{name} (SurfaceBlock) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISurfaceBlockGetter item,
            StructuredStringBuilder sb,
            SurfaceBlock.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ANAM ?? true)
                && item.ANAM is {} ANAMItem)
            {
                sb.AppendItem(ANAMItem, "ANAM");
            }
            if (printMask?.DNAM?.Overall ?? true)
            {
                item.DNAM?.Print(sb, "DNAM");
            }
            if (printMask?.ENAM?.Overall ?? true)
            {
                item.ENAM?.Print(sb, "ENAM");
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM is {} FNAMItem)
            {
                sb.AppendLine($"FNAM => {SpanExt.ToHexString(FNAMItem)}");
            }
            if ((printMask?.GNAM ?? true)
                && item.GNAM is {} GNAMItem)
            {
                sb.AppendItem(GNAMItem, "GNAM");
            }
            if (printMask?.HNAM ?? true)
            {
                sb.AppendItem(item.HNAM, "HNAM");
            }
            if (printMask?.INAM ?? true)
            {
                sb.AppendItem(item.INAM, "INAM");
            }
            if (printMask?.JNAM ?? true)
            {
                sb.AppendItem(item.JNAM, "JNAM");
            }
            if (printMask?.KNAM ?? true)
            {
                sb.AppendItem(item.KNAM, "KNAM");
            }
            if (printMask?.WHGT ?? true)
            {
                sb.AppendItem(item.WHGT, "WHGT");
            }
            if ((printMask?.NAM0 ?? true)
                && item.NAM0 is {} NAM0Item)
            {
                sb.AppendItem(NAM0Item, "NAM0");
            }
            if ((printMask?.NAM1 ?? true)
                && item.NAM1 is {} NAM1Item)
            {
                sb.AppendItem(NAM1Item, "NAM1");
            }
            if ((printMask?.NAM2 ?? true)
                && item.NAM2 is {} NAM2Item)
            {
                sb.AppendItem(NAM2Item, "NAM2");
            }
            if ((printMask?.NAM3?.Overall ?? true)
                && item.NAM3 is {} NAM3Item)
            {
                NAM3Item?.Print(sb, "NAM3");
            }
            if ((printMask?.NAM4?.Overall ?? true)
                && item.NAM4 is {} NAM4Item)
            {
                NAM4Item?.Print(sb, "NAM4");
            }
            if (printMask?.NAM5 ?? true)
            {
                sb.AppendItem(item.NAM5.FormKeyNullable, "NAM5");
            }
        }
        
        public static SurfaceBlock_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SurfaceBlock_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (SurfaceBlock_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (SurfaceBlock_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (SurfaceBlock_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (SurfaceBlock_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (SurfaceBlock_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (SurfaceBlock_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new SurfaceBlock_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SurfaceBlock_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SurfaceBlock_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SurfaceBlock_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SurfaceBlock_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISurfaceBlockGetter? lhs,
            ISurfaceBlockGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SurfaceBlock_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.ANAM) ?? true))
            {
                if (!string.Equals(lhs.ANAM, rhs.ANAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.DNAM) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DNAM, rhs.DNAM, out var lhsDNAM, out var rhsDNAM, out var isDNAMEqual))
                {
                    if (!((SurfaceBlockIntItemCommon)((ISurfaceBlockIntItemGetter)lhsDNAM).CommonInstance()!).Equals(lhsDNAM, rhsDNAM, equalsMask?.GetSubCrystal((int)SurfaceBlock_FieldIndex.DNAM))) return false;
                }
                else if (!isDNAMEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.ENAM) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ENAM, rhs.ENAM, out var lhsENAM, out var rhsENAM, out var isENAMEqual))
                {
                    if (!((SurfaceBlockFloatItemCommon)((ISurfaceBlockFloatItemGetter)lhsENAM).CommonInstance()!).Equals(lhsENAM, rhsENAM, equalsMask?.GetSubCrystal((int)SurfaceBlock_FieldIndex.ENAM))) return false;
                }
                else if (!isENAMEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.FNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FNAM, rhs.FNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.GNAM) ?? true))
            {
                if (lhs.GNAM != rhs.GNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.HNAM) ?? true))
            {
                if (lhs.HNAM != rhs.HNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.INAM) ?? true))
            {
                if (lhs.INAM != rhs.INAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.JNAM) ?? true))
            {
                if (lhs.JNAM != rhs.JNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.KNAM) ?? true))
            {
                if (lhs.KNAM != rhs.KNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.WHGT) ?? true))
            {
                if (!lhs.WHGT.EqualsWithin(rhs.WHGT)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.NAM0) ?? true))
            {
                if (!string.Equals(lhs.NAM0, rhs.NAM0)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.NAM1) ?? true))
            {
                if (!string.Equals(lhs.NAM1, rhs.NAM1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.NAM2) ?? true))
            {
                if (lhs.NAM2 != rhs.NAM2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.NAM3) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.NAM3, rhs.NAM3, out var lhsNAM3, out var rhsNAM3, out var isNAM3Equal))
                {
                    if (!((SurfaceBlockIntItemCommon)((ISurfaceBlockIntItemGetter)lhsNAM3).CommonInstance()!).Equals(lhsNAM3, rhsNAM3, equalsMask?.GetSubCrystal((int)SurfaceBlock_FieldIndex.NAM3))) return false;
                }
                else if (!isNAM3Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.NAM4) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.NAM4, rhs.NAM4, out var lhsNAM4, out var rhsNAM4, out var isNAM4Equal))
                {
                    if (!((SurfaceBlockFloatItemCommon)((ISurfaceBlockFloatItemGetter)lhsNAM4).CommonInstance()!).Equals(lhsNAM4, rhsNAM4, equalsMask?.GetSubCrystal((int)SurfaceBlock_FieldIndex.NAM4))) return false;
                }
                else if (!isNAM4Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.NAM5) ?? true))
            {
                if (!lhs.NAM5.Equals(rhs.NAM5)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISurfaceBlockGetter?)lhs,
                rhs: rhs as ISurfaceBlockGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISurfaceBlockGetter?)lhs,
                rhs: rhs as ISurfaceBlockGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISurfaceBlockGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Components);
            if (item.ANAM is {} ANAMitem)
            {
                hash.Add(ANAMitem);
            }
            hash.Add(item.DNAM);
            hash.Add(item.ENAM);
            if (item.FNAM is {} FNAMItem)
            {
                hash.Add(FNAMItem);
            }
            if (item.GNAM is {} GNAMitem)
            {
                hash.Add(GNAMitem);
            }
            hash.Add(item.HNAM);
            hash.Add(item.INAM);
            hash.Add(item.JNAM);
            hash.Add(item.KNAM);
            hash.Add(item.WHGT);
            if (item.NAM0 is {} NAM0item)
            {
                hash.Add(NAM0item);
            }
            if (item.NAM1 is {} NAM1item)
            {
                hash.Add(NAM1item);
            }
            if (item.NAM2 is {} NAM2item)
            {
                hash.Add(NAM2item);
            }
            if (item.NAM3 is {} NAM3item)
            {
                hash.Add(NAM3item);
            }
            if (item.NAM4 is {} NAM4item)
            {
                hash.Add(NAM4item);
            }
            hash.Add(item.NAM5);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (ISurfaceBlockGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISurfaceBlockGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SurfaceBlock.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISurfaceBlockGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.NAM5, out var NAM5Info))
            {
                yield return NAM5Info;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ISurfaceBlockGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public SurfaceBlock Duplicate(
            ISurfaceBlockGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SurfaceBlock(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISurfaceBlockGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISurfaceBlockGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SurfaceBlockSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly SurfaceBlockSetterTranslationCommon Instance = new SurfaceBlockSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISurfaceBlockInternal item,
            ISurfaceBlockGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISurfaceBlock item,
            ISurfaceBlockGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)SurfaceBlock_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.ANAM) ?? true))
            {
                item.ANAM = rhs.ANAM;
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.DNAM) ?? true))
            {
                errorMask?.PushIndex((int)SurfaceBlock_FieldIndex.DNAM);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.DNAM) ?? true))
                    {
                        item.DNAM = rhs.DNAM.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)SurfaceBlock_FieldIndex.DNAM),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.ENAM) ?? true))
            {
                errorMask?.PushIndex((int)SurfaceBlock_FieldIndex.ENAM);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.ENAM) ?? true))
                    {
                        item.ENAM = rhs.ENAM.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)SurfaceBlock_FieldIndex.ENAM),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.FNAM) ?? true))
            {
                if(rhs.FNAM is {} FNAMrhs)
                {
                    item.FNAM = FNAMrhs.ToArray();
                }
                else
                {
                    item.FNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.GNAM) ?? true))
            {
                item.GNAM = rhs.GNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.HNAM) ?? true))
            {
                item.HNAM = rhs.HNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.INAM) ?? true))
            {
                item.INAM = rhs.INAM;
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.JNAM) ?? true))
            {
                item.JNAM = rhs.JNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.KNAM) ?? true))
            {
                item.KNAM = rhs.KNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.WHGT) ?? true))
            {
                item.WHGT = rhs.WHGT;
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.NAM0) ?? true))
            {
                item.NAM0 = rhs.NAM0;
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.NAM1) ?? true))
            {
                item.NAM1 = rhs.NAM1;
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.NAM2) ?? true))
            {
                item.NAM2 = rhs.NAM2;
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.NAM3) ?? true))
            {
                errorMask?.PushIndex((int)SurfaceBlock_FieldIndex.NAM3);
                try
                {
                    if(rhs.NAM3 is {} rhsNAM3)
                    {
                        item.NAM3 = rhsNAM3.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SurfaceBlock_FieldIndex.NAM3));
                    }
                    else
                    {
                        item.NAM3 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.NAM4) ?? true))
            {
                errorMask?.PushIndex((int)SurfaceBlock_FieldIndex.NAM4);
                try
                {
                    if(rhs.NAM4 is {} rhsNAM4)
                    {
                        item.NAM4 = rhsNAM4.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SurfaceBlock_FieldIndex.NAM4));
                    }
                    else
                    {
                        item.NAM4 = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SurfaceBlock_FieldIndex.NAM5) ?? true))
            {
                item.NAM5.SetTo(rhs.NAM5.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISurfaceBlock item,
            ISurfaceBlockGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISurfaceBlockInternal)item,
                rhs: (ISurfaceBlockGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISurfaceBlock)item,
                rhs: (ISurfaceBlockGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISurfaceBlockInternal)item,
                rhs: (ISurfaceBlockGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISurfaceBlock)item,
                rhs: (ISurfaceBlockGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SurfaceBlock DeepCopy(
            ISurfaceBlockGetter item,
            SurfaceBlock.TranslationMask? copyMask = null)
        {
            SurfaceBlock ret = (SurfaceBlock)((SurfaceBlockCommon)((ISurfaceBlockGetter)item).CommonInstance()!).GetNew();
            ((SurfaceBlockSetterTranslationCommon)((ISurfaceBlockGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SurfaceBlock DeepCopy(
            ISurfaceBlockGetter item,
            out SurfaceBlock.ErrorMask errorMask,
            SurfaceBlock.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SurfaceBlock ret = (SurfaceBlock)((SurfaceBlockCommon)((ISurfaceBlockGetter)item).CommonInstance()!).GetNew();
            ((SurfaceBlockSetterTranslationCommon)((ISurfaceBlockGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SurfaceBlock.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SurfaceBlock DeepCopy(
            ISurfaceBlockGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SurfaceBlock ret = (SurfaceBlock)((SurfaceBlockCommon)((ISurfaceBlockGetter)item).CommonInstance()!).GetNew();
            ((SurfaceBlockSetterTranslationCommon)((ISurfaceBlockGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class SurfaceBlock
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SurfaceBlock_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SurfaceBlock_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SurfaceBlockCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SurfaceBlockSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SurfaceBlockSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class SurfaceBlockBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SurfaceBlockBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISurfaceBlockGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ANAM,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM),
                binaryType: StringBinaryType.NullTerminate);
            var DNAMItem = item.DNAM;
            using (HeaderExport.Subrecord(writer, RecordTypes.DNAM))
            {
                ((SurfaceBlockIntItemBinaryWriteTranslation)((IBinaryItem)DNAMItem).BinaryWriteTranslator).Write(
                    item: DNAMItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            var ENAMItem = item.ENAM;
            using (HeaderExport.Subrecord(writer, RecordTypes.ENAM))
            {
                ((SurfaceBlockFloatItemBinaryWriteTranslation)((IBinaryItem)ENAMItem).BinaryWriteTranslator).Write(
                    item: ENAMItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FNAM,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.GNAM,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HNAM,
                header: translationParams.ConvertToCustom(RecordTypes.HNAM));
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.INAM,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.JNAM,
                header: translationParams.ConvertToCustom(RecordTypes.JNAM));
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.KNAM,
                header: translationParams.ConvertToCustom(RecordTypes.KNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WHGT,
                header: translationParams.ConvertToCustom(RecordTypes.WHGT));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NAM0,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NAM1,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate);
            Int64BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NAM2,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2));
            if (item.NAM3 is {} NAM3Item)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.NAM3))
                {
                    ((SurfaceBlockIntItemBinaryWriteTranslation)((IBinaryItem)NAM3Item).BinaryWriteTranslator).Write(
                        item: NAM3Item,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (item.NAM4 is {} NAM4Item)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.NAM4))
                {
                    ((SurfaceBlockFloatItemBinaryWriteTranslation)((IBinaryItem)NAM4Item).BinaryWriteTranslator).Write(
                        item: NAM4Item,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NAM5,
                header: translationParams.ConvertToCustom(RecordTypes.NAM5));
        }

        public void Write(
            MutagenWriter writer,
            ISurfaceBlockGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SFBK,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISurfaceBlockGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISurfaceBlockGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISurfaceBlockGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SurfaceBlockBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly SurfaceBlockBinaryCreateTranslation Instance = new SurfaceBlockBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SFBK;
        public static ParseResult FillBinaryRecordTypes(
            ISurfaceBlockInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)SurfaceBlock_FieldIndex.Components;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ANAM = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SurfaceBlock_FieldIndex.ANAM;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.DNAM = Mutagen.Bethesda.Starfield.SurfaceBlockIntItem.CreateFromBinary(frame: frame);
                    return (int)SurfaceBlock_FieldIndex.DNAM;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.ENAM = Mutagen.Bethesda.Starfield.SurfaceBlockFloatItem.CreateFromBinary(frame: frame);
                    return (int)SurfaceBlock_FieldIndex.ENAM;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)SurfaceBlock_FieldIndex.FNAM;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GNAM = frame.ReadUInt8();
                    return (int)SurfaceBlock_FieldIndex.GNAM;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HNAM = frame.ReadUInt16();
                    return (int)SurfaceBlock_FieldIndex.HNAM;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.INAM = frame.ReadUInt8();
                    return (int)SurfaceBlock_FieldIndex.INAM;
                }
                case RecordTypeInts.JNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.JNAM = frame.ReadUInt8();
                    return (int)SurfaceBlock_FieldIndex.JNAM;
                }
                case RecordTypeInts.KNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.KNAM = frame.ReadUInt8();
                    return (int)SurfaceBlock_FieldIndex.KNAM;
                }
                case RecordTypeInts.WHGT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WHGT = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)SurfaceBlock_FieldIndex.WHGT;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM0 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SurfaceBlock_FieldIndex.NAM0;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM1 = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SurfaceBlock_FieldIndex.NAM1;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM2 = frame.ReadInt64();
                    return (int)SurfaceBlock_FieldIndex.NAM2;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.NAM3 = Mutagen.Bethesda.Starfield.SurfaceBlockIntItem.CreateFromBinary(frame: frame);
                    return (int)SurfaceBlock_FieldIndex.NAM3;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.NAM4 = Mutagen.Bethesda.Starfield.SurfaceBlockFloatItem.CreateFromBinary(frame: frame);
                    return (int)SurfaceBlock_FieldIndex.NAM4;
                }
                case RecordTypeInts.NAM5:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM5.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SurfaceBlock_FieldIndex.NAM5;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class SurfaceBlockBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class SurfaceBlockBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        ISurfaceBlockGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SurfaceBlock_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SurfaceBlock_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SurfaceBlockCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SurfaceBlockSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SurfaceBlockCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SurfaceBlockCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SurfaceBlockBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SurfaceBlockBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISurfaceBlock);


        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = Array.Empty<IAComponentGetter>();
        #region ANAM
        private int? _ANAMLocation;
        public String? ANAM => _ANAMLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ANAMLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region DNAM
        private ISurfaceBlockIntItemGetter? _DNAM;
        public ISurfaceBlockIntItemGetter DNAM => _DNAM ?? new SurfaceBlockIntItem();
        #endregion
        #region ENAM
        private ISurfaceBlockFloatItemGetter? _ENAM;
        public ISurfaceBlockFloatItemGetter ENAM => _ENAM ?? new SurfaceBlockFloatItem();
        #endregion
        #region FNAM
        private int? _FNAMLocation;
        public ReadOnlyMemorySlice<Byte>? FNAM => _FNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region GNAM
        private int? _GNAMLocation;
        public Byte? GNAM => _GNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _GNAMLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region HNAM
        private int? _HNAMLocation;
        public UInt16 HNAM => _HNAMLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HNAMLocation.Value, _package.MetaData.Constants)) : default(UInt16);
        #endregion
        #region INAM
        private int? _INAMLocation;
        public Byte INAM => _INAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _INAMLocation.Value, _package.MetaData.Constants)[0] : default(Byte);
        #endregion
        #region JNAM
        private int? _JNAMLocation;
        public Byte JNAM => _JNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _JNAMLocation.Value, _package.MetaData.Constants)[0] : default(Byte);
        #endregion
        #region KNAM
        private int? _KNAMLocation;
        public Byte KNAM => _KNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _KNAMLocation.Value, _package.MetaData.Constants)[0] : default(Byte);
        #endregion
        #region WHGT
        private int? _WHGTLocation;
        public Single WHGT => _WHGTLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WHGTLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region NAM0
        private int? _NAM0Location;
        public String? NAM0 => _NAM0Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM0Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region NAM1
        private int? _NAM1Location;
        public String? NAM1 => _NAM1Location.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM1Location.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region NAM2
        private int? _NAM2Location;
        public Int64? NAM2 => _NAM2Location.HasValue ? BinaryPrimitives.ReadInt64LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM2Location.Value, _package.MetaData.Constants)) : default(Int64?);
        #endregion
        public ISurfaceBlockIntItemGetter? NAM3 { get; private set; }
        public ISurfaceBlockFloatItemGetter? NAM4 { get; private set; }
        #region NAM5
        private int? _NAM5Location;
        public IFormLinkNullableGetter<ISurfaceBlockGetter> NAM5 => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISurfaceBlockGetter>(_package, _recordData, _NAM5Location);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SurfaceBlockBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISurfaceBlockGetter SurfaceBlockFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SurfaceBlockBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISurfaceBlockGetter SurfaceBlockFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SurfaceBlockFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)SurfaceBlock_FieldIndex.Components;
                }
                case RecordTypeInts.ANAM:
                {
                    _ANAMLocation = (stream.Position - offset);
                    return (int)SurfaceBlock_FieldIndex.ANAM;
                }
                case RecordTypeInts.DNAM:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this._DNAM = SurfaceBlockIntItemBinaryOverlay.SurfaceBlockIntItemFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)SurfaceBlock_FieldIndex.DNAM;
                }
                case RecordTypeInts.ENAM:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this._ENAM = SurfaceBlockFloatItemBinaryOverlay.SurfaceBlockFloatItemFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)SurfaceBlock_FieldIndex.ENAM;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return (int)SurfaceBlock_FieldIndex.FNAM;
                }
                case RecordTypeInts.GNAM:
                {
                    _GNAMLocation = (stream.Position - offset);
                    return (int)SurfaceBlock_FieldIndex.GNAM;
                }
                case RecordTypeInts.HNAM:
                {
                    _HNAMLocation = (stream.Position - offset);
                    return (int)SurfaceBlock_FieldIndex.HNAM;
                }
                case RecordTypeInts.INAM:
                {
                    _INAMLocation = (stream.Position - offset);
                    return (int)SurfaceBlock_FieldIndex.INAM;
                }
                case RecordTypeInts.JNAM:
                {
                    _JNAMLocation = (stream.Position - offset);
                    return (int)SurfaceBlock_FieldIndex.JNAM;
                }
                case RecordTypeInts.KNAM:
                {
                    _KNAMLocation = (stream.Position - offset);
                    return (int)SurfaceBlock_FieldIndex.KNAM;
                }
                case RecordTypeInts.WHGT:
                {
                    _WHGTLocation = (stream.Position - offset);
                    return (int)SurfaceBlock_FieldIndex.WHGT;
                }
                case RecordTypeInts.NAM0:
                {
                    _NAM0Location = (stream.Position - offset);
                    return (int)SurfaceBlock_FieldIndex.NAM0;
                }
                case RecordTypeInts.NAM1:
                {
                    _NAM1Location = (stream.Position - offset);
                    return (int)SurfaceBlock_FieldIndex.NAM1;
                }
                case RecordTypeInts.NAM2:
                {
                    _NAM2Location = (stream.Position - offset);
                    return (int)SurfaceBlock_FieldIndex.NAM2;
                }
                case RecordTypeInts.NAM3:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.NAM3 = SurfaceBlockIntItemBinaryOverlay.SurfaceBlockIntItemFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)SurfaceBlock_FieldIndex.NAM3;
                }
                case RecordTypeInts.NAM4:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.NAM4 = SurfaceBlockFloatItemBinaryOverlay.SurfaceBlockFloatItemFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)SurfaceBlock_FieldIndex.NAM4;
                }
                case RecordTypeInts.NAM5:
                {
                    _NAM5Location = (stream.Position - offset);
                    return (int)SurfaceBlock_FieldIndex.NAM5;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SurfaceBlockMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<SurfaceBlock>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISurfaceBlockGetter rhs) return false;
            return ((SurfaceBlockCommon)((ISurfaceBlockGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISurfaceBlockGetter? obj)
        {
            return ((SurfaceBlockCommon)((ISurfaceBlockGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SurfaceBlockCommon)((ISurfaceBlockGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

