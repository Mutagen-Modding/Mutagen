/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BiomeDistantView :
        IBiomeDistantView,
        IEquatable<IBiomeDistantViewGetter>,
        ILoquiObjectSetter<BiomeDistantView>
    {
        #region Ctor
        public BiomeDistantView()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TextureOffsetU
        public Single TextureOffsetU { get; set; } = default(Single);
        #endregion
        #region TextureOffsetV
        public Single TextureOffsetV { get; set; } = default(Single);
        #endregion
        #region TextureScaleU
        public Single TextureScaleU { get; set; } = default(Single);
        #endregion
        #region TextureScaleV
        public Single TextureScaleV { get; set; } = default(Single);
        #endregion
        #region Unknown1
        public Single Unknown1 { get; set; } = default(Single);
        #endregion
        #region Unknown2
        public Single Unknown2 { get; set; } = default(Single);
        #endregion
        #region Unknown3
        public Single Unknown3 { get; set; } = default(Single);
        #endregion
        #region Unknown4
        public Single Unknown4 { get; set; } = default(Single);
        #endregion
        #region NormalStrength
        public Single NormalStrength { get; set; } = default(Single);
        #endregion
        #region SlopeStart
        public Single SlopeStart { get; set; } = default(Single);
        #endregion
        #region SlopeRange
        public Single SlopeRange { get; set; } = default(Single);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeDistantViewMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeDistantViewGetter rhs) return false;
            return ((BiomeDistantViewCommon)((IBiomeDistantViewGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeDistantViewGetter? obj)
        {
            return ((BiomeDistantViewCommon)((IBiomeDistantViewGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeDistantViewCommon)((IBiomeDistantViewGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.TextureOffsetU = initialValue;
                this.TextureOffsetV = initialValue;
                this.TextureScaleU = initialValue;
                this.TextureScaleV = initialValue;
                this.Unknown1 = initialValue;
                this.Unknown2 = initialValue;
                this.Unknown3 = initialValue;
                this.Unknown4 = initialValue;
                this.NormalStrength = initialValue;
                this.SlopeStart = initialValue;
                this.SlopeRange = initialValue;
            }

            public Mask(
                TItem TextureOffsetU,
                TItem TextureOffsetV,
                TItem TextureScaleU,
                TItem TextureScaleV,
                TItem Unknown1,
                TItem Unknown2,
                TItem Unknown3,
                TItem Unknown4,
                TItem NormalStrength,
                TItem SlopeStart,
                TItem SlopeRange)
            {
                this.TextureOffsetU = TextureOffsetU;
                this.TextureOffsetV = TextureOffsetV;
                this.TextureScaleU = TextureScaleU;
                this.TextureScaleV = TextureScaleV;
                this.Unknown1 = Unknown1;
                this.Unknown2 = Unknown2;
                this.Unknown3 = Unknown3;
                this.Unknown4 = Unknown4;
                this.NormalStrength = NormalStrength;
                this.SlopeStart = SlopeStart;
                this.SlopeRange = SlopeRange;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem TextureOffsetU;
            public TItem TextureOffsetV;
            public TItem TextureScaleU;
            public TItem TextureScaleV;
            public TItem Unknown1;
            public TItem Unknown2;
            public TItem Unknown3;
            public TItem Unknown4;
            public TItem NormalStrength;
            public TItem SlopeStart;
            public TItem SlopeRange;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.TextureOffsetU, rhs.TextureOffsetU)) return false;
                if (!object.Equals(this.TextureOffsetV, rhs.TextureOffsetV)) return false;
                if (!object.Equals(this.TextureScaleU, rhs.TextureScaleU)) return false;
                if (!object.Equals(this.TextureScaleV, rhs.TextureScaleV)) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.Unknown4, rhs.Unknown4)) return false;
                if (!object.Equals(this.NormalStrength, rhs.NormalStrength)) return false;
                if (!object.Equals(this.SlopeStart, rhs.SlopeStart)) return false;
                if (!object.Equals(this.SlopeRange, rhs.SlopeRange)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.TextureOffsetU);
                hash.Add(this.TextureOffsetV);
                hash.Add(this.TextureScaleU);
                hash.Add(this.TextureScaleV);
                hash.Add(this.Unknown1);
                hash.Add(this.Unknown2);
                hash.Add(this.Unknown3);
                hash.Add(this.Unknown4);
                hash.Add(this.NormalStrength);
                hash.Add(this.SlopeStart);
                hash.Add(this.SlopeRange);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.TextureOffsetU)) return false;
                if (!eval(this.TextureOffsetV)) return false;
                if (!eval(this.TextureScaleU)) return false;
                if (!eval(this.TextureScaleV)) return false;
                if (!eval(this.Unknown1)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.Unknown4)) return false;
                if (!eval(this.NormalStrength)) return false;
                if (!eval(this.SlopeStart)) return false;
                if (!eval(this.SlopeRange)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.TextureOffsetU)) return true;
                if (eval(this.TextureOffsetV)) return true;
                if (eval(this.TextureScaleU)) return true;
                if (eval(this.TextureScaleV)) return true;
                if (eval(this.Unknown1)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.Unknown4)) return true;
                if (eval(this.NormalStrength)) return true;
                if (eval(this.SlopeStart)) return true;
                if (eval(this.SlopeRange)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BiomeDistantView.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.TextureOffsetU = eval(this.TextureOffsetU);
                obj.TextureOffsetV = eval(this.TextureOffsetV);
                obj.TextureScaleU = eval(this.TextureScaleU);
                obj.TextureScaleV = eval(this.TextureScaleV);
                obj.Unknown1 = eval(this.Unknown1);
                obj.Unknown2 = eval(this.Unknown2);
                obj.Unknown3 = eval(this.Unknown3);
                obj.Unknown4 = eval(this.Unknown4);
                obj.NormalStrength = eval(this.NormalStrength);
                obj.SlopeStart = eval(this.SlopeStart);
                obj.SlopeRange = eval(this.SlopeRange);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BiomeDistantView.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BiomeDistantView.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BiomeDistantView.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.TextureOffsetU ?? true)
                    {
                        sb.AppendItem(TextureOffsetU, "TextureOffsetU");
                    }
                    if (printMask?.TextureOffsetV ?? true)
                    {
                        sb.AppendItem(TextureOffsetV, "TextureOffsetV");
                    }
                    if (printMask?.TextureScaleU ?? true)
                    {
                        sb.AppendItem(TextureScaleU, "TextureScaleU");
                    }
                    if (printMask?.TextureScaleV ?? true)
                    {
                        sb.AppendItem(TextureScaleV, "TextureScaleV");
                    }
                    if (printMask?.Unknown1 ?? true)
                    {
                        sb.AppendItem(Unknown1, "Unknown1");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        sb.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.Unknown4 ?? true)
                    {
                        sb.AppendItem(Unknown4, "Unknown4");
                    }
                    if (printMask?.NormalStrength ?? true)
                    {
                        sb.AppendItem(NormalStrength, "NormalStrength");
                    }
                    if (printMask?.SlopeStart ?? true)
                    {
                        sb.AppendItem(SlopeStart, "SlopeStart");
                    }
                    if (printMask?.SlopeRange ?? true)
                    {
                        sb.AppendItem(SlopeRange, "SlopeRange");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? TextureOffsetU;
            public Exception? TextureOffsetV;
            public Exception? TextureScaleU;
            public Exception? TextureScaleV;
            public Exception? Unknown1;
            public Exception? Unknown2;
            public Exception? Unknown3;
            public Exception? Unknown4;
            public Exception? NormalStrength;
            public Exception? SlopeStart;
            public Exception? SlopeRange;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BiomeDistantView_FieldIndex enu = (BiomeDistantView_FieldIndex)index;
                switch (enu)
                {
                    case BiomeDistantView_FieldIndex.TextureOffsetU:
                        return TextureOffsetU;
                    case BiomeDistantView_FieldIndex.TextureOffsetV:
                        return TextureOffsetV;
                    case BiomeDistantView_FieldIndex.TextureScaleU:
                        return TextureScaleU;
                    case BiomeDistantView_FieldIndex.TextureScaleV:
                        return TextureScaleV;
                    case BiomeDistantView_FieldIndex.Unknown1:
                        return Unknown1;
                    case BiomeDistantView_FieldIndex.Unknown2:
                        return Unknown2;
                    case BiomeDistantView_FieldIndex.Unknown3:
                        return Unknown3;
                    case BiomeDistantView_FieldIndex.Unknown4:
                        return Unknown4;
                    case BiomeDistantView_FieldIndex.NormalStrength:
                        return NormalStrength;
                    case BiomeDistantView_FieldIndex.SlopeStart:
                        return SlopeStart;
                    case BiomeDistantView_FieldIndex.SlopeRange:
                        return SlopeRange;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BiomeDistantView_FieldIndex enu = (BiomeDistantView_FieldIndex)index;
                switch (enu)
                {
                    case BiomeDistantView_FieldIndex.TextureOffsetU:
                        this.TextureOffsetU = ex;
                        break;
                    case BiomeDistantView_FieldIndex.TextureOffsetV:
                        this.TextureOffsetV = ex;
                        break;
                    case BiomeDistantView_FieldIndex.TextureScaleU:
                        this.TextureScaleU = ex;
                        break;
                    case BiomeDistantView_FieldIndex.TextureScaleV:
                        this.TextureScaleV = ex;
                        break;
                    case BiomeDistantView_FieldIndex.Unknown1:
                        this.Unknown1 = ex;
                        break;
                    case BiomeDistantView_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case BiomeDistantView_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case BiomeDistantView_FieldIndex.Unknown4:
                        this.Unknown4 = ex;
                        break;
                    case BiomeDistantView_FieldIndex.NormalStrength:
                        this.NormalStrength = ex;
                        break;
                    case BiomeDistantView_FieldIndex.SlopeStart:
                        this.SlopeStart = ex;
                        break;
                    case BiomeDistantView_FieldIndex.SlopeRange:
                        this.SlopeRange = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BiomeDistantView_FieldIndex enu = (BiomeDistantView_FieldIndex)index;
                switch (enu)
                {
                    case BiomeDistantView_FieldIndex.TextureOffsetU:
                        this.TextureOffsetU = (Exception?)obj;
                        break;
                    case BiomeDistantView_FieldIndex.TextureOffsetV:
                        this.TextureOffsetV = (Exception?)obj;
                        break;
                    case BiomeDistantView_FieldIndex.TextureScaleU:
                        this.TextureScaleU = (Exception?)obj;
                        break;
                    case BiomeDistantView_FieldIndex.TextureScaleV:
                        this.TextureScaleV = (Exception?)obj;
                        break;
                    case BiomeDistantView_FieldIndex.Unknown1:
                        this.Unknown1 = (Exception?)obj;
                        break;
                    case BiomeDistantView_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case BiomeDistantView_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case BiomeDistantView_FieldIndex.Unknown4:
                        this.Unknown4 = (Exception?)obj;
                        break;
                    case BiomeDistantView_FieldIndex.NormalStrength:
                        this.NormalStrength = (Exception?)obj;
                        break;
                    case BiomeDistantView_FieldIndex.SlopeStart:
                        this.SlopeStart = (Exception?)obj;
                        break;
                    case BiomeDistantView_FieldIndex.SlopeRange:
                        this.SlopeRange = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (TextureOffsetU != null) return true;
                if (TextureOffsetV != null) return true;
                if (TextureScaleU != null) return true;
                if (TextureScaleV != null) return true;
                if (Unknown1 != null) return true;
                if (Unknown2 != null) return true;
                if (Unknown3 != null) return true;
                if (Unknown4 != null) return true;
                if (NormalStrength != null) return true;
                if (SlopeStart != null) return true;
                if (SlopeRange != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(TextureOffsetU, "TextureOffsetU");
                }
                {
                    sb.AppendItem(TextureOffsetV, "TextureOffsetV");
                }
                {
                    sb.AppendItem(TextureScaleU, "TextureScaleU");
                }
                {
                    sb.AppendItem(TextureScaleV, "TextureScaleV");
                }
                {
                    sb.AppendItem(Unknown1, "Unknown1");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
                {
                    sb.AppendItem(Unknown3, "Unknown3");
                }
                {
                    sb.AppendItem(Unknown4, "Unknown4");
                }
                {
                    sb.AppendItem(NormalStrength, "NormalStrength");
                }
                {
                    sb.AppendItem(SlopeStart, "SlopeStart");
                }
                {
                    sb.AppendItem(SlopeRange, "SlopeRange");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.TextureOffsetU = this.TextureOffsetU.Combine(rhs.TextureOffsetU);
                ret.TextureOffsetV = this.TextureOffsetV.Combine(rhs.TextureOffsetV);
                ret.TextureScaleU = this.TextureScaleU.Combine(rhs.TextureScaleU);
                ret.TextureScaleV = this.TextureScaleV.Combine(rhs.TextureScaleV);
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.Unknown4 = this.Unknown4.Combine(rhs.Unknown4);
                ret.NormalStrength = this.NormalStrength.Combine(rhs.NormalStrength);
                ret.SlopeStart = this.SlopeStart.Combine(rhs.SlopeStart);
                ret.SlopeRange = this.SlopeRange.Combine(rhs.SlopeRange);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool TextureOffsetU;
            public bool TextureOffsetV;
            public bool TextureScaleU;
            public bool TextureScaleV;
            public bool Unknown1;
            public bool Unknown2;
            public bool Unknown3;
            public bool Unknown4;
            public bool NormalStrength;
            public bool SlopeStart;
            public bool SlopeRange;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.TextureOffsetU = defaultOn;
                this.TextureOffsetV = defaultOn;
                this.TextureScaleU = defaultOn;
                this.TextureScaleV = defaultOn;
                this.Unknown1 = defaultOn;
                this.Unknown2 = defaultOn;
                this.Unknown3 = defaultOn;
                this.Unknown4 = defaultOn;
                this.NormalStrength = defaultOn;
                this.SlopeStart = defaultOn;
                this.SlopeRange = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((TextureOffsetU, null));
                ret.Add((TextureOffsetV, null));
                ret.Add((TextureScaleU, null));
                ret.Add((TextureScaleV, null));
                ret.Add((Unknown1, null));
                ret.Add((Unknown2, null));
                ret.Add((Unknown3, null));
                ret.Add((Unknown4, null));
                ret.Add((NormalStrength, null));
                ret.Add((SlopeStart, null));
                ret.Add((SlopeRange, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeDistantViewBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeDistantViewBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static BiomeDistantView CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BiomeDistantView();
            ((BiomeDistantViewSetterCommon)((IBiomeDistantViewGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BiomeDistantView item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BiomeDistantViewSetterCommon)((IBiomeDistantViewGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BiomeDistantView GetNew()
        {
            return new BiomeDistantView();
        }

    }
    #endregion

    #region Interface
    public partial interface IBiomeDistantView :
        IBiomeDistantViewGetter,
        ILoquiObjectSetter<IBiomeDistantView>
    {
        new Single TextureOffsetU { get; set; }
        new Single TextureOffsetV { get; set; }
        new Single TextureScaleU { get; set; }
        new Single TextureScaleV { get; set; }
        new Single Unknown1 { get; set; }
        new Single Unknown2 { get; set; }
        new Single Unknown3 { get; set; }
        new Single Unknown4 { get; set; }
        new Single NormalStrength { get; set; }
        new Single SlopeStart { get; set; }
        new Single SlopeRange { get; set; }
    }

    public partial interface IBiomeDistantViewGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IBiomeDistantViewGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => BiomeDistantView_Registration.Instance;
        Single TextureOffsetU { get; }
        Single TextureOffsetV { get; }
        Single TextureScaleU { get; }
        Single TextureScaleV { get; }
        Single Unknown1 { get; }
        Single Unknown2 { get; }
        Single Unknown3 { get; }
        Single Unknown4 { get; }
        Single NormalStrength { get; }
        Single SlopeStart { get; }
        Single SlopeRange { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BiomeDistantViewMixIn
    {
        public static void Clear(this IBiomeDistantView item)
        {
            ((BiomeDistantViewSetterCommon)((IBiomeDistantViewGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BiomeDistantView.Mask<bool> GetEqualsMask(
            this IBiomeDistantViewGetter item,
            IBiomeDistantViewGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BiomeDistantViewCommon)((IBiomeDistantViewGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBiomeDistantViewGetter item,
            string? name = null,
            BiomeDistantView.Mask<bool>? printMask = null)
        {
            return ((BiomeDistantViewCommon)((IBiomeDistantViewGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBiomeDistantViewGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeDistantView.Mask<bool>? printMask = null)
        {
            ((BiomeDistantViewCommon)((IBiomeDistantViewGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBiomeDistantViewGetter item,
            IBiomeDistantViewGetter rhs,
            BiomeDistantView.TranslationMask? equalsMask = null)
        {
            return ((BiomeDistantViewCommon)((IBiomeDistantViewGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBiomeDistantView lhs,
            IBiomeDistantViewGetter rhs)
        {
            ((BiomeDistantViewSetterTranslationCommon)((IBiomeDistantViewGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeDistantView lhs,
            IBiomeDistantViewGetter rhs,
            BiomeDistantView.TranslationMask? copyMask = null)
        {
            ((BiomeDistantViewSetterTranslationCommon)((IBiomeDistantViewGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeDistantView lhs,
            IBiomeDistantViewGetter rhs,
            out BiomeDistantView.ErrorMask errorMask,
            BiomeDistantView.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BiomeDistantViewSetterTranslationCommon)((IBiomeDistantViewGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BiomeDistantView.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBiomeDistantView lhs,
            IBiomeDistantViewGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BiomeDistantViewSetterTranslationCommon)((IBiomeDistantViewGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BiomeDistantView DeepCopy(
            this IBiomeDistantViewGetter item,
            BiomeDistantView.TranslationMask? copyMask = null)
        {
            return ((BiomeDistantViewSetterTranslationCommon)((IBiomeDistantViewGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BiomeDistantView DeepCopy(
            this IBiomeDistantViewGetter item,
            out BiomeDistantView.ErrorMask errorMask,
            BiomeDistantView.TranslationMask? copyMask = null)
        {
            return ((BiomeDistantViewSetterTranslationCommon)((IBiomeDistantViewGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BiomeDistantView DeepCopy(
            this IBiomeDistantViewGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BiomeDistantViewSetterTranslationCommon)((IBiomeDistantViewGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBiomeDistantView item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BiomeDistantViewSetterCommon)((IBiomeDistantViewGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BiomeDistantView_FieldIndex
    {
        TextureOffsetU = 0,
        TextureOffsetV = 1,
        TextureScaleU = 2,
        TextureScaleV = 3,
        Unknown1 = 4,
        Unknown2 = 5,
        Unknown3 = 6,
        Unknown4 = 7,
        NormalStrength = 8,
        SlopeStart = 9,
        SlopeRange = 10,
    }
    #endregion

    #region Registration
    internal partial class BiomeDistantView_Registration : ILoquiRegistration
    {
        public static readonly BiomeDistantView_Registration Instance = new BiomeDistantView_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(BiomeDistantView.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BiomeDistantView.ErrorMask);

        public static readonly Type ClassType = typeof(BiomeDistantView);

        public static readonly Type GetterType = typeof(IBiomeDistantViewGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBiomeDistantView);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BiomeDistantView";

        public const string Name = "BiomeDistantView";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(BiomeDistantViewBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BiomeDistantViewSetterCommon
    {
        public static readonly BiomeDistantViewSetterCommon Instance = new BiomeDistantViewSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBiomeDistantView item)
        {
            ClearPartial();
            item.TextureOffsetU = default(Single);
            item.TextureOffsetV = default(Single);
            item.TextureScaleU = default(Single);
            item.TextureScaleV = default(Single);
            item.Unknown1 = default(Single);
            item.Unknown2 = default(Single);
            item.Unknown3 = default(Single);
            item.Unknown4 = default(Single);
            item.NormalStrength = default(Single);
            item.SlopeStart = default(Single);
            item.SlopeRange = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(IBiomeDistantView obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBiomeDistantView item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: BiomeDistantViewBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class BiomeDistantViewCommon
    {
        public static readonly BiomeDistantViewCommon Instance = new BiomeDistantViewCommon();

        public BiomeDistantView.Mask<bool> GetEqualsMask(
            IBiomeDistantViewGetter item,
            IBiomeDistantViewGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BiomeDistantView.Mask<bool>(false);
            ((BiomeDistantViewCommon)((IBiomeDistantViewGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBiomeDistantViewGetter item,
            IBiomeDistantViewGetter rhs,
            BiomeDistantView.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.TextureOffsetU = item.TextureOffsetU.EqualsWithin(rhs.TextureOffsetU);
            ret.TextureOffsetV = item.TextureOffsetV.EqualsWithin(rhs.TextureOffsetV);
            ret.TextureScaleU = item.TextureScaleU.EqualsWithin(rhs.TextureScaleU);
            ret.TextureScaleV = item.TextureScaleV.EqualsWithin(rhs.TextureScaleV);
            ret.Unknown1 = item.Unknown1.EqualsWithin(rhs.Unknown1);
            ret.Unknown2 = item.Unknown2.EqualsWithin(rhs.Unknown2);
            ret.Unknown3 = item.Unknown3.EqualsWithin(rhs.Unknown3);
            ret.Unknown4 = item.Unknown4.EqualsWithin(rhs.Unknown4);
            ret.NormalStrength = item.NormalStrength.EqualsWithin(rhs.NormalStrength);
            ret.SlopeStart = item.SlopeStart.EqualsWithin(rhs.SlopeStart);
            ret.SlopeRange = item.SlopeRange.EqualsWithin(rhs.SlopeRange);
        }
        
        public string Print(
            IBiomeDistantViewGetter item,
            string? name = null,
            BiomeDistantView.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBiomeDistantViewGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeDistantView.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BiomeDistantView =>");
            }
            else
            {
                sb.AppendLine($"{name} (BiomeDistantView) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBiomeDistantViewGetter item,
            StructuredStringBuilder sb,
            BiomeDistantView.Mask<bool>? printMask = null)
        {
            if (printMask?.TextureOffsetU ?? true)
            {
                sb.AppendItem(item.TextureOffsetU, "TextureOffsetU");
            }
            if (printMask?.TextureOffsetV ?? true)
            {
                sb.AppendItem(item.TextureOffsetV, "TextureOffsetV");
            }
            if (printMask?.TextureScaleU ?? true)
            {
                sb.AppendItem(item.TextureScaleU, "TextureScaleU");
            }
            if (printMask?.TextureScaleV ?? true)
            {
                sb.AppendItem(item.TextureScaleV, "TextureScaleV");
            }
            if (printMask?.Unknown1 ?? true)
            {
                sb.AppendItem(item.Unknown1, "Unknown1");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.Unknown3 ?? true)
            {
                sb.AppendItem(item.Unknown3, "Unknown3");
            }
            if (printMask?.Unknown4 ?? true)
            {
                sb.AppendItem(item.Unknown4, "Unknown4");
            }
            if (printMask?.NormalStrength ?? true)
            {
                sb.AppendItem(item.NormalStrength, "NormalStrength");
            }
            if (printMask?.SlopeStart ?? true)
            {
                sb.AppendItem(item.SlopeStart, "SlopeStart");
            }
            if (printMask?.SlopeRange ?? true)
            {
                sb.AppendItem(item.SlopeRange, "SlopeRange");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBiomeDistantViewGetter? lhs,
            IBiomeDistantViewGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.TextureOffsetU) ?? true))
            {
                if (!lhs.TextureOffsetU.EqualsWithin(rhs.TextureOffsetU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.TextureOffsetV) ?? true))
            {
                if (!lhs.TextureOffsetV.EqualsWithin(rhs.TextureOffsetV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.TextureScaleU) ?? true))
            {
                if (!lhs.TextureScaleU.EqualsWithin(rhs.TextureScaleU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.TextureScaleV) ?? true))
            {
                if (!lhs.TextureScaleV.EqualsWithin(rhs.TextureScaleV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.Unknown1) ?? true))
            {
                if (!lhs.Unknown1.EqualsWithin(rhs.Unknown1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.Unknown2) ?? true))
            {
                if (!lhs.Unknown2.EqualsWithin(rhs.Unknown2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.Unknown3) ?? true))
            {
                if (!lhs.Unknown3.EqualsWithin(rhs.Unknown3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.Unknown4) ?? true))
            {
                if (!lhs.Unknown4.EqualsWithin(rhs.Unknown4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.NormalStrength) ?? true))
            {
                if (!lhs.NormalStrength.EqualsWithin(rhs.NormalStrength)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.SlopeStart) ?? true))
            {
                if (!lhs.SlopeStart.EqualsWithin(rhs.SlopeStart)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.SlopeRange) ?? true))
            {
                if (!lhs.SlopeRange.EqualsWithin(rhs.SlopeRange)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBiomeDistantViewGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.TextureOffsetU);
            hash.Add(item.TextureOffsetV);
            hash.Add(item.TextureScaleU);
            hash.Add(item.TextureScaleV);
            hash.Add(item.Unknown1);
            hash.Add(item.Unknown2);
            hash.Add(item.Unknown3);
            hash.Add(item.Unknown4);
            hash.Add(item.NormalStrength);
            hash.Add(item.SlopeStart);
            hash.Add(item.SlopeRange);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BiomeDistantView.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBiomeDistantViewGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BiomeDistantViewSetterTranslationCommon
    {
        public static readonly BiomeDistantViewSetterTranslationCommon Instance = new BiomeDistantViewSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBiomeDistantView item,
            IBiomeDistantViewGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.TextureOffsetU) ?? true))
            {
                item.TextureOffsetU = rhs.TextureOffsetU;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.TextureOffsetV) ?? true))
            {
                item.TextureOffsetV = rhs.TextureOffsetV;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.TextureScaleU) ?? true))
            {
                item.TextureScaleU = rhs.TextureScaleU;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.TextureScaleV) ?? true))
            {
                item.TextureScaleV = rhs.TextureScaleV;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.Unknown1) ?? true))
            {
                item.Unknown1 = rhs.Unknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.Unknown4) ?? true))
            {
                item.Unknown4 = rhs.Unknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.NormalStrength) ?? true))
            {
                item.NormalStrength = rhs.NormalStrength;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.SlopeStart) ?? true))
            {
                item.SlopeStart = rhs.SlopeStart;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeDistantView_FieldIndex.SlopeRange) ?? true))
            {
                item.SlopeRange = rhs.SlopeRange;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBiomeDistantView item,
            IBiomeDistantViewGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public BiomeDistantView DeepCopy(
            IBiomeDistantViewGetter item,
            BiomeDistantView.TranslationMask? copyMask = null)
        {
            BiomeDistantView ret = (BiomeDistantView)((BiomeDistantViewCommon)((IBiomeDistantViewGetter)item).CommonInstance()!).GetNew();
            ((BiomeDistantViewSetterTranslationCommon)((IBiomeDistantViewGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BiomeDistantView DeepCopy(
            IBiomeDistantViewGetter item,
            out BiomeDistantView.ErrorMask errorMask,
            BiomeDistantView.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BiomeDistantView ret = (BiomeDistantView)((BiomeDistantViewCommon)((IBiomeDistantViewGetter)item).CommonInstance()!).GetNew();
            ((BiomeDistantViewSetterTranslationCommon)((IBiomeDistantViewGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BiomeDistantView.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BiomeDistantView DeepCopy(
            IBiomeDistantViewGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BiomeDistantView ret = (BiomeDistantView)((BiomeDistantViewCommon)((IBiomeDistantViewGetter)item).CommonInstance()!).GetNew();
            ((BiomeDistantViewSetterTranslationCommon)((IBiomeDistantViewGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeDistantView
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeDistantView_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeDistantView_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeDistantViewCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BiomeDistantViewSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeDistantViewSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeDistantViewGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBiomeDistantViewGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBiomeDistantViewGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeDistantViewBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly BiomeDistantViewBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IBiomeDistantViewGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextureOffsetU);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextureOffsetV);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextureScaleU);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextureScaleV);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown1);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown2);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown3);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown4);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NormalStrength);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SlopeStart);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SlopeRange);
        }

        public void Write(
            MutagenWriter writer,
            IBiomeDistantViewGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBiomeDistantViewGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BiomeDistantViewBinaryCreateTranslation
    {
        public static readonly BiomeDistantViewBinaryCreateTranslation Instance = new BiomeDistantViewBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IBiomeDistantView item,
            MutagenFrame frame)
        {
            item.TextureOffsetU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TextureOffsetV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TextureScaleU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TextureScaleV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown4 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.NormalStrength = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SlopeStart = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SlopeRange = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BiomeDistantViewBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBiomeDistantViewGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeDistantViewBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BiomeDistantViewBinaryOverlay :
        PluginBinaryOverlay,
        IBiomeDistantViewGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeDistantView_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeDistantView_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeDistantViewCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeDistantViewSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeDistantViewGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBiomeDistantViewGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBiomeDistantViewGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeDistantViewBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeDistantViewBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single TextureOffsetU => _structData.Slice(0x0, 0x4).Float();
        public Single TextureOffsetV => _structData.Slice(0x4, 0x4).Float();
        public Single TextureScaleU => _structData.Slice(0x8, 0x4).Float();
        public Single TextureScaleV => _structData.Slice(0xC, 0x4).Float();
        public Single Unknown1 => _structData.Slice(0x10, 0x4).Float();
        public Single Unknown2 => _structData.Slice(0x14, 0x4).Float();
        public Single Unknown3 => _structData.Slice(0x18, 0x4).Float();
        public Single Unknown4 => _structData.Slice(0x1C, 0x4).Float();
        public Single NormalStrength => _structData.Slice(0x20, 0x4).Float();
        public Single SlopeStart => _structData.Slice(0x24, 0x4).Float();
        public Single SlopeRange => _structData.Slice(0x28, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BiomeDistantViewBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBiomeDistantViewGetter BiomeDistantViewFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x2C,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new BiomeDistantViewBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x2C;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IBiomeDistantViewGetter BiomeDistantViewFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BiomeDistantViewFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeDistantViewMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeDistantViewGetter rhs) return false;
            return ((BiomeDistantViewCommon)((IBiomeDistantViewGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeDistantViewGetter? obj)
        {
            return ((BiomeDistantViewCommon)((IBiomeDistantViewGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeDistantViewCommon)((IBiomeDistantViewGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

