/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class WWiseKeywordMapping :
        StarfieldMajorRecord,
        IEquatable<IWWiseKeywordMappingGetter>,
        ILoquiObjectSetter<WWiseKeywordMapping>,
        IWWiseKeywordMappingInternal
    {
        #region Ctor
        protected WWiseKeywordMapping()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region WMTI
        public UInt16? WMTI { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IWWiseKeywordMappingGetter.WMTI => this.WMTI;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IWWiseKeywordMappingGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region WMSS
        public UInt32? WMSS { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IWWiseKeywordMappingGetter.WMSS => this.WMSS;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WWiseKeywordMappingItem> _Items = new ExtendedList<WWiseKeywordMappingItem>();
        public ExtendedList<WWiseKeywordMappingItem> Items
        {
            get => this._Items;
            init => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWWiseKeywordMappingItemGetter> IWWiseKeywordMappingGetter.Items => _Items;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WWiseKeywordMappingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.WMTI = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.WMSS = initialValue;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WWiseKeywordMappingItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WWiseKeywordMappingItem.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem WMTI,
                TItem Keywords,
                TItem WMSS,
                TItem Items)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.WMTI = WMTI;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.WMSS = WMSS;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WWiseKeywordMappingItem.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, WWiseKeywordMappingItem.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem WMTI;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem WMSS;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WWiseKeywordMappingItem.Mask<TItem>?>>?>? Items;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.WMTI, rhs.WMTI)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.WMSS, rhs.WMSS)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.WMTI);
                hash.Add(this.Keywords);
                hash.Add(this.WMSS);
                hash.Add(this.Items);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.WMTI)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.WMSS)) return false;
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.WMTI)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.WMSS)) return true;
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new WWiseKeywordMapping.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.WMTI = eval(this.WMTI);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.WMSS = eval(this.WMSS);
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WWiseKeywordMappingItem.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, WWiseKeywordMappingItem.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WWiseKeywordMappingItem.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific)
                        {
                            MaskItemIndexed<R, WWiseKeywordMappingItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, WWiseKeywordMappingItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(WWiseKeywordMapping.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, WWiseKeywordMapping.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(WWiseKeywordMapping.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.WMTI ?? true)
                    {
                        sb.AppendItem(WMTI, "WMTI");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.WMSS ?? true)
                    {
                        sb.AppendItem(WMSS, "WMSS");
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items is {} ItemsItem)
                    {
                        sb.AppendLine("Items =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? WMTI;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? WMSS;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WWiseKeywordMappingItem.ErrorMask?>>?>? Items;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                WWiseKeywordMapping_FieldIndex enu = (WWiseKeywordMapping_FieldIndex)index;
                switch (enu)
                {
                    case WWiseKeywordMapping_FieldIndex.WMTI:
                        return WMTI;
                    case WWiseKeywordMapping_FieldIndex.Keywords:
                        return Keywords;
                    case WWiseKeywordMapping_FieldIndex.WMSS:
                        return WMSS;
                    case WWiseKeywordMapping_FieldIndex.Items:
                        return Items;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                WWiseKeywordMapping_FieldIndex enu = (WWiseKeywordMapping_FieldIndex)index;
                switch (enu)
                {
                    case WWiseKeywordMapping_FieldIndex.WMTI:
                        this.WMTI = ex;
                        break;
                    case WWiseKeywordMapping_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case WWiseKeywordMapping_FieldIndex.WMSS:
                        this.WMSS = ex;
                        break;
                    case WWiseKeywordMapping_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WWiseKeywordMappingItem.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                WWiseKeywordMapping_FieldIndex enu = (WWiseKeywordMapping_FieldIndex)index;
                switch (enu)
                {
                    case WWiseKeywordMapping_FieldIndex.WMTI:
                        this.WMTI = (Exception?)obj;
                        break;
                    case WWiseKeywordMapping_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case WWiseKeywordMapping_FieldIndex.WMSS:
                        this.WMSS = (Exception?)obj;
                        break;
                    case WWiseKeywordMapping_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WWiseKeywordMappingItem.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (WMTI != null) return true;
                if (Keywords != null) return true;
                if (WMSS != null) return true;
                if (Items != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(WMTI, "WMTI");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(WMSS, "WMSS");
                }
                if (Items is {} ItemsItem)
                {
                    sb.AppendLine("Items =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.WMTI = this.WMTI.Combine(rhs.WMTI);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.WMSS = this.WMSS.Combine(rhs.WMSS);
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WWiseKeywordMappingItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), Noggog.ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool WMTI;
            public bool Keywords;
            public bool WMSS;
            public WWiseKeywordMappingItem.TranslationMask? Items;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.WMTI = defaultOn;
                this.Keywords = defaultOn;
                this.WMSS = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((WMTI, null));
                ret.Add((Keywords, null));
                ret.Add((WMSS, null));
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = WWiseKeywordMapping_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WWiseKeywordMappingCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WWiseKeywordMappingSetterCommon.Instance.RemapLinks(this, mapping);
        public WWiseKeywordMapping(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private WWiseKeywordMapping(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal WWiseKeywordMapping(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public WWiseKeywordMapping(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public WWiseKeywordMapping(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<WWiseKeywordMapping>.ToString(this);
        }

        protected override Type LinkType => typeof(IWWiseKeywordMapping);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWWiseKeywordMappingGetter rhs) return false;
            return ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWWiseKeywordMappingGetter? obj)
        {
            return ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WWiseKeywordMappingBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WWiseKeywordMappingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static WWiseKeywordMapping CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new WWiseKeywordMapping();
            ((WWiseKeywordMappingSetterCommon)((IWWiseKeywordMappingGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out WWiseKeywordMapping item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((WWiseKeywordMappingSetterCommon)((IWWiseKeywordMappingGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new WWiseKeywordMapping GetNew()
        {
            return new WWiseKeywordMapping();
        }

    }
    #endregion

    #region Interface
    public partial interface IWWiseKeywordMapping :
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IWWiseKeywordMappingInternal>,
        IStarfieldMajorRecordInternal,
        IWWiseKeywordMappingGetter
    {
        new UInt16? WMTI { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new UInt32? WMSS { get; set; }
        new ExtendedList<WWiseKeywordMappingItem> Items { get; }
    }

    public partial interface IWWiseKeywordMappingInternal :
        IStarfieldMajorRecordInternal,
        IWWiseKeywordMapping,
        IWWiseKeywordMappingGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.WKMF)]
    public partial interface IWWiseKeywordMappingGetter :
        IStarfieldMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IWWiseKeywordMappingGetter>,
        IMapsToGetter<IWWiseKeywordMappingGetter>
    {
        static new ILoquiRegistration StaticRegistration => WWiseKeywordMapping_Registration.Instance;
        UInt16? WMTI { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        UInt32? WMSS { get; }
        IReadOnlyList<IWWiseKeywordMappingItemGetter> Items { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WWiseKeywordMappingMixIn
    {
        public static void Clear(this IWWiseKeywordMappingInternal item)
        {
            ((WWiseKeywordMappingSetterCommon)((IWWiseKeywordMappingGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static WWiseKeywordMapping.Mask<bool> GetEqualsMask(
            this IWWiseKeywordMappingGetter item,
            IWWiseKeywordMappingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IWWiseKeywordMappingGetter item,
            string? name = null,
            WWiseKeywordMapping.Mask<bool>? printMask = null)
        {
            return ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IWWiseKeywordMappingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WWiseKeywordMapping.Mask<bool>? printMask = null)
        {
            ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWWiseKeywordMappingGetter item,
            IWWiseKeywordMappingGetter rhs,
            WWiseKeywordMapping.TranslationMask? equalsMask = null)
        {
            return ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWWiseKeywordMappingInternal lhs,
            IWWiseKeywordMappingGetter rhs,
            out WWiseKeywordMapping.ErrorMask errorMask,
            WWiseKeywordMapping.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WWiseKeywordMappingSetterTranslationCommon)((IWWiseKeywordMappingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = WWiseKeywordMapping.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWWiseKeywordMappingInternal lhs,
            IWWiseKeywordMappingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WWiseKeywordMappingSetterTranslationCommon)((IWWiseKeywordMappingGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static WWiseKeywordMapping DeepCopy(
            this IWWiseKeywordMappingGetter item,
            WWiseKeywordMapping.TranslationMask? copyMask = null)
        {
            return ((WWiseKeywordMappingSetterTranslationCommon)((IWWiseKeywordMappingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static WWiseKeywordMapping DeepCopy(
            this IWWiseKeywordMappingGetter item,
            out WWiseKeywordMapping.ErrorMask errorMask,
            WWiseKeywordMapping.TranslationMask? copyMask = null)
        {
            return ((WWiseKeywordMappingSetterTranslationCommon)((IWWiseKeywordMappingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static WWiseKeywordMapping DeepCopy(
            this IWWiseKeywordMappingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WWiseKeywordMappingSetterTranslationCommon)((IWWiseKeywordMappingGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static WWiseKeywordMapping Duplicate(
            this IWWiseKeywordMappingGetter item,
            FormKey formKey,
            WWiseKeywordMapping.TranslationMask? copyMask = null)
        {
            return ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static WWiseKeywordMapping Duplicate(
            this IWWiseKeywordMappingGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWWiseKeywordMappingInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((WWiseKeywordMappingSetterCommon)((IWWiseKeywordMappingGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum WWiseKeywordMapping_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        WMTI = 7,
        Keywords = 8,
        WMSS = 9,
        Items = 10,
    }
    #endregion

    #region Registration
    internal partial class WWiseKeywordMapping_Registration : ILoquiRegistration
    {
        public static readonly WWiseKeywordMapping_Registration Instance = new WWiseKeywordMapping_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(WWiseKeywordMapping.Mask<>);

        public static readonly Type ErrorMaskType = typeof(WWiseKeywordMapping.ErrorMask);

        public static readonly Type ClassType = typeof(WWiseKeywordMapping);

        public static readonly Type GetterType = typeof(IWWiseKeywordMappingGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWWiseKeywordMapping);

        public static readonly Type? InternalSetterType = typeof(IWWiseKeywordMappingInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.WWiseKeywordMapping";

        public const string Name = "WWiseKeywordMapping";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.WKMF;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.WKMF);
            var all = RecordCollection.Factory(
                RecordTypes.WKMF,
                RecordTypes.WMTI,
                RecordTypes.WMKA,
                RecordTypes.WMSS,
                RecordTypes.WMSI,
                RecordTypes.WMSD);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(WWiseKeywordMappingBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class WWiseKeywordMappingSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly WWiseKeywordMappingSetterCommon Instance = new WWiseKeywordMappingSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWWiseKeywordMappingInternal item)
        {
            ClearPartial();
            item.WMTI = default;
            item.Keywords = null;
            item.WMSS = default;
            item.Items.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IWWiseKeywordMappingInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWWiseKeywordMappingInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IWWiseKeywordMapping obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Items.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWWiseKeywordMappingInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IWWiseKeywordMappingInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WWiseKeywordMappingBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WWiseKeywordMappingBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (WWiseKeywordMapping)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (WWiseKeywordMapping)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class WWiseKeywordMappingCommon : StarfieldMajorRecordCommon
    {
        public new static readonly WWiseKeywordMappingCommon Instance = new WWiseKeywordMappingCommon();

        public WWiseKeywordMapping.Mask<bool> GetEqualsMask(
            IWWiseKeywordMappingGetter item,
            IWWiseKeywordMappingGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new WWiseKeywordMapping.Mask<bool>(false);
            ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWWiseKeywordMappingGetter item,
            IWWiseKeywordMappingGetter rhs,
            WWiseKeywordMapping.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.WMTI = item.WMTI == rhs.WMTI;
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.WMSS = item.WMSS == rhs.WMSS;
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IWWiseKeywordMappingGetter item,
            string? name = null,
            WWiseKeywordMapping.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IWWiseKeywordMappingGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            WWiseKeywordMapping.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"WWiseKeywordMapping =>");
            }
            else
            {
                sb.AppendLine($"{name} (WWiseKeywordMapping) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IWWiseKeywordMappingGetter item,
            StructuredStringBuilder sb,
            WWiseKeywordMapping.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.WMTI ?? true)
                && item.WMTI is {} WMTIItem)
            {
                sb.AppendItem(WMTIItem, "WMTI");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.WMSS ?? true)
                && item.WMSS is {} WMSSItem)
            {
                sb.AppendItem(WMSSItem, "WMSS");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                sb.AppendLine("Items =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Items)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static WWiseKeywordMapping_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (WWiseKeywordMapping_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (WWiseKeywordMapping_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (WWiseKeywordMapping_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (WWiseKeywordMapping_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (WWiseKeywordMapping_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (WWiseKeywordMapping_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (WWiseKeywordMapping_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new WWiseKeywordMapping_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (WWiseKeywordMapping_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (WWiseKeywordMapping_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (WWiseKeywordMapping_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (WWiseKeywordMapping_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWWiseKeywordMappingGetter? lhs,
            IWWiseKeywordMappingGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)WWiseKeywordMapping_FieldIndex.WMTI) ?? true))
            {
                if (lhs.WMTI != rhs.WMTI) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WWiseKeywordMapping_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WWiseKeywordMapping_FieldIndex.WMSS) ?? true))
            {
                if (lhs.WMSS != rhs.WMSS) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)WWiseKeywordMapping_FieldIndex.Items) ?? true))
            {
                if (!lhs.Items.SequenceEqual(rhs.Items, (l, r) => ((WWiseKeywordMappingItemCommon)((IWWiseKeywordMappingItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)WWiseKeywordMapping_FieldIndex.Items)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWWiseKeywordMappingGetter?)lhs,
                rhs: rhs as IWWiseKeywordMappingGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWWiseKeywordMappingGetter?)lhs,
                rhs: rhs as IWWiseKeywordMappingGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IWWiseKeywordMappingGetter item)
        {
            var hash = new HashCode();
            if (item.WMTI is {} WMTIitem)
            {
                hash.Add(WMTIitem);
            }
            hash.Add(item.Keywords);
            if (item.WMSS is {} WMSSitem)
            {
                hash.Add(WMSSitem);
            }
            hash.Add(item.Items);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IWWiseKeywordMappingGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWWiseKeywordMappingGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return WWiseKeywordMapping.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IWWiseKeywordMappingGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Items.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public WWiseKeywordMapping Duplicate(
            IWWiseKeywordMappingGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new WWiseKeywordMapping(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWWiseKeywordMappingGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWWiseKeywordMappingGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class WWiseKeywordMappingSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly WWiseKeywordMappingSetterTranslationCommon Instance = new WWiseKeywordMappingSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWWiseKeywordMappingInternal item,
            IWWiseKeywordMappingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IWWiseKeywordMapping item,
            IWWiseKeywordMappingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)WWiseKeywordMapping_FieldIndex.WMTI) ?? true))
            {
                item.WMTI = rhs.WMTI;
            }
            if ((copyMask?.GetShouldTranslate((int)WWiseKeywordMapping_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)WWiseKeywordMapping_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)WWiseKeywordMapping_FieldIndex.WMSS) ?? true))
            {
                item.WMSS = rhs.WMSS;
            }
            if ((copyMask?.GetShouldTranslate((int)WWiseKeywordMapping_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)WWiseKeywordMapping_FieldIndex.Items);
                try
                {
                    item.Items.SetTo(
                        rhs.Items
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IWWiseKeywordMapping item,
            IWWiseKeywordMappingGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWWiseKeywordMappingInternal)item,
                rhs: (IWWiseKeywordMappingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWWiseKeywordMapping)item,
                rhs: (IWWiseKeywordMappingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWWiseKeywordMappingInternal)item,
                rhs: (IWWiseKeywordMappingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWWiseKeywordMapping)item,
                rhs: (IWWiseKeywordMappingGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public WWiseKeywordMapping DeepCopy(
            IWWiseKeywordMappingGetter item,
            WWiseKeywordMapping.TranslationMask? copyMask = null)
        {
            WWiseKeywordMapping ret = (WWiseKeywordMapping)((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)item).CommonInstance()!).GetNew();
            ((WWiseKeywordMappingSetterTranslationCommon)((IWWiseKeywordMappingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public WWiseKeywordMapping DeepCopy(
            IWWiseKeywordMappingGetter item,
            out WWiseKeywordMapping.ErrorMask errorMask,
            WWiseKeywordMapping.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            WWiseKeywordMapping ret = (WWiseKeywordMapping)((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)item).CommonInstance()!).GetNew();
            ((WWiseKeywordMappingSetterTranslationCommon)((IWWiseKeywordMappingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = WWiseKeywordMapping.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public WWiseKeywordMapping DeepCopy(
            IWWiseKeywordMappingGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            WWiseKeywordMapping ret = (WWiseKeywordMapping)((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)item).CommonInstance()!).GetNew();
            ((WWiseKeywordMappingSetterTranslationCommon)((IWWiseKeywordMappingGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class WWiseKeywordMapping
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WWiseKeywordMapping_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => WWiseKeywordMapping_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WWiseKeywordMappingCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WWiseKeywordMappingSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WWiseKeywordMappingSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class WWiseKeywordMappingBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly WWiseKeywordMappingBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IWWiseKeywordMappingGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.WMTI,
                header: translationParams.ConvertToCustom(RecordTypes.WMTI));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Write(
                writer: writer,
                items: item.Keywords,
                recordType: translationParams.ConvertToCustom(RecordTypes.WMKA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.WMSS,
                header: translationParams.ConvertToCustom(RecordTypes.WMSS));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IWWiseKeywordMappingItemGetter>.Instance.Write(
                writer: writer,
                items: item.Items,
                transl: (MutagenWriter subWriter, IWWiseKeywordMappingItemGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((WWiseKeywordMappingItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IWWiseKeywordMappingGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.WKMF,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IWWiseKeywordMappingGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWWiseKeywordMappingGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWWiseKeywordMappingGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class WWiseKeywordMappingBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly WWiseKeywordMappingBinaryCreateTranslation Instance = new WWiseKeywordMappingBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.WKMF;
        public static ParseResult FillBinaryRecordTypes(
            IWWiseKeywordMappingInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.WMTI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WMTI = frame.ReadUInt16();
                    return (int)WWiseKeywordMapping_FieldIndex.WMTI;
                }
                case RecordTypeInts.WMKA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)WWiseKeywordMapping_FieldIndex.Keywords;
                }
                case RecordTypeInts.WMSS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WMSS = frame.ReadUInt32();
                    return (int)WWiseKeywordMapping_FieldIndex.WMSS;
                }
                case RecordTypeInts.WMSI:
                case RecordTypeInts.WMSD:
                {
                    item.Items.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<WWiseKeywordMappingItem>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: WWiseKeywordMappingItem_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: WWiseKeywordMappingItem.TryCreateFromBinary));
                    return (int)WWiseKeywordMapping_FieldIndex.Items;
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class WWiseKeywordMappingBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class WWiseKeywordMappingBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IWWiseKeywordMappingGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => WWiseKeywordMapping_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => WWiseKeywordMapping_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WWiseKeywordMappingCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WWiseKeywordMappingSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WWiseKeywordMappingCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WWiseKeywordMappingBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WWiseKeywordMappingBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IWWiseKeywordMapping);


        #region WMTI
        private int? _WMTILocation;
        public UInt16? WMTI => _WMTILocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _WMTILocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region WMSS
        private int? _WMSSLocation;
        public UInt32? WMSS => _WMSSLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _WMSSLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        public IReadOnlyList<IWWiseKeywordMappingItemGetter> Items { get; private set; } = Array.Empty<IWWiseKeywordMappingItemGetter>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WWiseKeywordMappingBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IWWiseKeywordMappingGetter WWiseKeywordMappingFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new WWiseKeywordMappingBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IWWiseKeywordMappingGetter WWiseKeywordMappingFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return WWiseKeywordMappingFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.WMTI:
                {
                    _WMTILocation = (stream.Position - offset);
                    return (int)WWiseKeywordMapping_FieldIndex.WMTI;
                }
                case RecordTypeInts.WMKA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)WWiseKeywordMapping_FieldIndex.Keywords;
                }
                case RecordTypeInts.WMSS:
                {
                    _WMSSLocation = (stream.Position - offset);
                    return (int)WWiseKeywordMapping_FieldIndex.WMSS;
                }
                case RecordTypeInts.WMSI:
                case RecordTypeInts.WMSD:
                {
                    this.Items = this.ParseRepeatedTypelessSubrecord<IWWiseKeywordMappingItemGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: WWiseKeywordMappingItem_Registration.TriggerSpecs,
                        factory: WWiseKeywordMappingItemBinaryOverlay.WWiseKeywordMappingItemFactory);
                    return (int)WWiseKeywordMapping_FieldIndex.Items;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WWiseKeywordMappingMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<WWiseKeywordMapping>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWWiseKeywordMappingGetter rhs) return false;
            return ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWWiseKeywordMappingGetter? obj)
        {
            return ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WWiseKeywordMappingCommon)((IWWiseKeywordMappingGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

