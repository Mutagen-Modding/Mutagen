/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class BiomeTerrainData :
        IBiomeTerrainData,
        IEquatable<IBiomeTerrainDataGetter>,
        ILoquiObjectSetter<BiomeTerrainData>
    {
        #region Ctor
        public BiomeTerrainData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TerrainMask
        public Biome.TerrainMask TerrainMask { get; set; } = default(Biome.TerrainMask);
        #endregion
        #region LandTexture
        private readonly IFormLink<ILandscapeTextureGetter> _LandTexture = new FormLink<ILandscapeTextureGetter>();
        public IFormLink<ILandscapeTextureGetter> LandTexture
        {
            get => _LandTexture;
            set => _LandTexture.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILandscapeTextureGetter> IBiomeTerrainDataGetter.LandTexture => this.LandTexture;
        #endregion
        #region GroundCover
        private readonly IFormLink<IGroundCoverGetter> _GroundCover = new FormLink<IGroundCoverGetter>();
        public IFormLink<IGroundCoverGetter> GroundCover
        {
            get => _GroundCover;
            set => _GroundCover.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IGroundCoverGetter> IBiomeTerrainDataGetter.GroundCover => this.GroundCover;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeTerrainDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeTerrainDataGetter rhs) return false;
            return ((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeTerrainDataGetter? obj)
        {
            return ((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.TerrainMask = initialValue;
                this.LandTexture = initialValue;
                this.GroundCover = initialValue;
            }

            public Mask(
                TItem TerrainMask,
                TItem LandTexture,
                TItem GroundCover)
            {
                this.TerrainMask = TerrainMask;
                this.LandTexture = LandTexture;
                this.GroundCover = GroundCover;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem TerrainMask;
            public TItem LandTexture;
            public TItem GroundCover;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.TerrainMask, rhs.TerrainMask)) return false;
                if (!object.Equals(this.LandTexture, rhs.LandTexture)) return false;
                if (!object.Equals(this.GroundCover, rhs.GroundCover)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.TerrainMask);
                hash.Add(this.LandTexture);
                hash.Add(this.GroundCover);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.TerrainMask)) return false;
                if (!eval(this.LandTexture)) return false;
                if (!eval(this.GroundCover)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.TerrainMask)) return true;
                if (eval(this.LandTexture)) return true;
                if (eval(this.GroundCover)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BiomeTerrainData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.TerrainMask = eval(this.TerrainMask);
                obj.LandTexture = eval(this.LandTexture);
                obj.GroundCover = eval(this.GroundCover);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BiomeTerrainData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BiomeTerrainData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BiomeTerrainData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.TerrainMask ?? true)
                    {
                        sb.AppendItem(TerrainMask, "TerrainMask");
                    }
                    if (printMask?.LandTexture ?? true)
                    {
                        sb.AppendItem(LandTexture, "LandTexture");
                    }
                    if (printMask?.GroundCover ?? true)
                    {
                        sb.AppendItem(GroundCover, "GroundCover");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? TerrainMask;
            public Exception? LandTexture;
            public Exception? GroundCover;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BiomeTerrainData_FieldIndex enu = (BiomeTerrainData_FieldIndex)index;
                switch (enu)
                {
                    case BiomeTerrainData_FieldIndex.TerrainMask:
                        return TerrainMask;
                    case BiomeTerrainData_FieldIndex.LandTexture:
                        return LandTexture;
                    case BiomeTerrainData_FieldIndex.GroundCover:
                        return GroundCover;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BiomeTerrainData_FieldIndex enu = (BiomeTerrainData_FieldIndex)index;
                switch (enu)
                {
                    case BiomeTerrainData_FieldIndex.TerrainMask:
                        this.TerrainMask = ex;
                        break;
                    case BiomeTerrainData_FieldIndex.LandTexture:
                        this.LandTexture = ex;
                        break;
                    case BiomeTerrainData_FieldIndex.GroundCover:
                        this.GroundCover = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BiomeTerrainData_FieldIndex enu = (BiomeTerrainData_FieldIndex)index;
                switch (enu)
                {
                    case BiomeTerrainData_FieldIndex.TerrainMask:
                        this.TerrainMask = (Exception?)obj;
                        break;
                    case BiomeTerrainData_FieldIndex.LandTexture:
                        this.LandTexture = (Exception?)obj;
                        break;
                    case BiomeTerrainData_FieldIndex.GroundCover:
                        this.GroundCover = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (TerrainMask != null) return true;
                if (LandTexture != null) return true;
                if (GroundCover != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(TerrainMask, "TerrainMask");
                }
                {
                    sb.AppendItem(LandTexture, "LandTexture");
                }
                {
                    sb.AppendItem(GroundCover, "GroundCover");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.TerrainMask = this.TerrainMask.Combine(rhs.TerrainMask);
                ret.LandTexture = this.LandTexture.Combine(rhs.LandTexture);
                ret.GroundCover = this.GroundCover.Combine(rhs.GroundCover);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool TerrainMask;
            public bool LandTexture;
            public bool GroundCover;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.TerrainMask = defaultOn;
                this.LandTexture = defaultOn;
                this.GroundCover = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((TerrainMask, null));
                ret.Add((LandTexture, null));
                ret.Add((GroundCover, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BiomeTerrainDataCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => BiomeTerrainDataSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeTerrainDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeTerrainDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static BiomeTerrainData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BiomeTerrainData();
            ((BiomeTerrainDataSetterCommon)((IBiomeTerrainDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BiomeTerrainData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BiomeTerrainDataSetterCommon)((IBiomeTerrainDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BiomeTerrainData GetNew()
        {
            return new BiomeTerrainData();
        }

    }
    #endregion

    #region Interface
    public partial interface IBiomeTerrainData :
        IBiomeTerrainDataGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IBiomeTerrainData>
    {
        new Biome.TerrainMask TerrainMask { get; set; }
        new IFormLink<ILandscapeTextureGetter> LandTexture { get; set; }
        new IFormLink<IGroundCoverGetter> GroundCover { get; set; }
    }

    public partial interface IBiomeTerrainDataGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IBiomeTerrainDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => BiomeTerrainData_Registration.Instance;
        Biome.TerrainMask TerrainMask { get; }
        IFormLinkGetter<ILandscapeTextureGetter> LandTexture { get; }
        IFormLinkGetter<IGroundCoverGetter> GroundCover { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BiomeTerrainDataMixIn
    {
        public static void Clear(this IBiomeTerrainData item)
        {
            ((BiomeTerrainDataSetterCommon)((IBiomeTerrainDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BiomeTerrainData.Mask<bool> GetEqualsMask(
            this IBiomeTerrainDataGetter item,
            IBiomeTerrainDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBiomeTerrainDataGetter item,
            string? name = null,
            BiomeTerrainData.Mask<bool>? printMask = null)
        {
            return ((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBiomeTerrainDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeTerrainData.Mask<bool>? printMask = null)
        {
            ((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBiomeTerrainDataGetter item,
            IBiomeTerrainDataGetter rhs,
            BiomeTerrainData.TranslationMask? equalsMask = null)
        {
            return ((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBiomeTerrainData lhs,
            IBiomeTerrainDataGetter rhs)
        {
            ((BiomeTerrainDataSetterTranslationCommon)((IBiomeTerrainDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeTerrainData lhs,
            IBiomeTerrainDataGetter rhs,
            BiomeTerrainData.TranslationMask? copyMask = null)
        {
            ((BiomeTerrainDataSetterTranslationCommon)((IBiomeTerrainDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBiomeTerrainData lhs,
            IBiomeTerrainDataGetter rhs,
            out BiomeTerrainData.ErrorMask errorMask,
            BiomeTerrainData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BiomeTerrainDataSetterTranslationCommon)((IBiomeTerrainDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BiomeTerrainData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBiomeTerrainData lhs,
            IBiomeTerrainDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BiomeTerrainDataSetterTranslationCommon)((IBiomeTerrainDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BiomeTerrainData DeepCopy(
            this IBiomeTerrainDataGetter item,
            BiomeTerrainData.TranslationMask? copyMask = null)
        {
            return ((BiomeTerrainDataSetterTranslationCommon)((IBiomeTerrainDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BiomeTerrainData DeepCopy(
            this IBiomeTerrainDataGetter item,
            out BiomeTerrainData.ErrorMask errorMask,
            BiomeTerrainData.TranslationMask? copyMask = null)
        {
            return ((BiomeTerrainDataSetterTranslationCommon)((IBiomeTerrainDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BiomeTerrainData DeepCopy(
            this IBiomeTerrainDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BiomeTerrainDataSetterTranslationCommon)((IBiomeTerrainDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBiomeTerrainData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BiomeTerrainDataSetterCommon)((IBiomeTerrainDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum BiomeTerrainData_FieldIndex
    {
        TerrainMask = 0,
        LandTexture = 1,
        GroundCover = 2,
    }
    #endregion

    #region Registration
    internal partial class BiomeTerrainData_Registration : ILoquiRegistration
    {
        public static readonly BiomeTerrainData_Registration Instance = new BiomeTerrainData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(BiomeTerrainData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BiomeTerrainData.ErrorMask);

        public static readonly Type ClassType = typeof(BiomeTerrainData);

        public static readonly Type GetterType = typeof(IBiomeTerrainDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBiomeTerrainData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.BiomeTerrainData";

        public const string Name = "BiomeTerrainData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(BiomeTerrainDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BiomeTerrainDataSetterCommon
    {
        public static readonly BiomeTerrainDataSetterCommon Instance = new BiomeTerrainDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBiomeTerrainData item)
        {
            ClearPartial();
            item.TerrainMask = default(Biome.TerrainMask);
            item.LandTexture.Clear();
            item.GroundCover.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IBiomeTerrainData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.LandTexture.Relink(mapping);
            obj.GroundCover.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBiomeTerrainData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: BiomeTerrainDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class BiomeTerrainDataCommon
    {
        public static readonly BiomeTerrainDataCommon Instance = new BiomeTerrainDataCommon();

        public BiomeTerrainData.Mask<bool> GetEqualsMask(
            IBiomeTerrainDataGetter item,
            IBiomeTerrainDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BiomeTerrainData.Mask<bool>(false);
            ((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBiomeTerrainDataGetter item,
            IBiomeTerrainDataGetter rhs,
            BiomeTerrainData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.TerrainMask = item.TerrainMask == rhs.TerrainMask;
            ret.LandTexture = item.LandTexture.Equals(rhs.LandTexture);
            ret.GroundCover = item.GroundCover.Equals(rhs.GroundCover);
        }
        
        public string Print(
            IBiomeTerrainDataGetter item,
            string? name = null,
            BiomeTerrainData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBiomeTerrainDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BiomeTerrainData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BiomeTerrainData =>");
            }
            else
            {
                sb.AppendLine($"{name} (BiomeTerrainData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBiomeTerrainDataGetter item,
            StructuredStringBuilder sb,
            BiomeTerrainData.Mask<bool>? printMask = null)
        {
            if (printMask?.TerrainMask ?? true)
            {
                sb.AppendItem(item.TerrainMask, "TerrainMask");
            }
            if (printMask?.LandTexture ?? true)
            {
                sb.AppendItem(item.LandTexture.FormKey, "LandTexture");
            }
            if (printMask?.GroundCover ?? true)
            {
                sb.AppendItem(item.GroundCover.FormKey, "GroundCover");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBiomeTerrainDataGetter? lhs,
            IBiomeTerrainDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)BiomeTerrainData_FieldIndex.TerrainMask) ?? true))
            {
                if (lhs.TerrainMask != rhs.TerrainMask) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeTerrainData_FieldIndex.LandTexture) ?? true))
            {
                if (!lhs.LandTexture.Equals(rhs.LandTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BiomeTerrainData_FieldIndex.GroundCover) ?? true))
            {
                if (!lhs.GroundCover.Equals(rhs.GroundCover)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBiomeTerrainDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.TerrainMask);
            hash.Add(item.LandTexture);
            hash.Add(item.GroundCover);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BiomeTerrainData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBiomeTerrainDataGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.LandTexture);
            yield return FormLinkInformation.Factory(obj.GroundCover);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BiomeTerrainDataSetterTranslationCommon
    {
        public static readonly BiomeTerrainDataSetterTranslationCommon Instance = new BiomeTerrainDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBiomeTerrainData item,
            IBiomeTerrainDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)BiomeTerrainData_FieldIndex.TerrainMask) ?? true))
            {
                item.TerrainMask = rhs.TerrainMask;
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeTerrainData_FieldIndex.LandTexture) ?? true))
            {
                item.LandTexture.SetTo(rhs.LandTexture.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BiomeTerrainData_FieldIndex.GroundCover) ?? true))
            {
                item.GroundCover.SetTo(rhs.GroundCover.FormKey);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBiomeTerrainData item,
            IBiomeTerrainDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public BiomeTerrainData DeepCopy(
            IBiomeTerrainDataGetter item,
            BiomeTerrainData.TranslationMask? copyMask = null)
        {
            BiomeTerrainData ret = (BiomeTerrainData)((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)item).CommonInstance()!).GetNew();
            ((BiomeTerrainDataSetterTranslationCommon)((IBiomeTerrainDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BiomeTerrainData DeepCopy(
            IBiomeTerrainDataGetter item,
            out BiomeTerrainData.ErrorMask errorMask,
            BiomeTerrainData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BiomeTerrainData ret = (BiomeTerrainData)((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)item).CommonInstance()!).GetNew();
            ((BiomeTerrainDataSetterTranslationCommon)((IBiomeTerrainDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BiomeTerrainData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BiomeTerrainData DeepCopy(
            IBiomeTerrainDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BiomeTerrainData ret = (BiomeTerrainData)((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)item).CommonInstance()!).GetNew();
            ((BiomeTerrainDataSetterTranslationCommon)((IBiomeTerrainDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeTerrainData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeTerrainData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeTerrainData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeTerrainDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BiomeTerrainDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeTerrainDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeTerrainDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBiomeTerrainDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBiomeTerrainDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class BiomeTerrainDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly BiomeTerrainDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IBiomeTerrainDataGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<Biome.TerrainMask, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.TerrainMask,
                length: 4);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LandTexture);
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GroundCover);
        }

        public void Write(
            MutagenWriter writer,
            IBiomeTerrainDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBiomeTerrainDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BiomeTerrainDataBinaryCreateTranslation
    {
        public static readonly BiomeTerrainDataBinaryCreateTranslation Instance = new BiomeTerrainDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IBiomeTerrainData item,
            MutagenFrame frame)
        {
            item.TerrainMask = EnumBinaryTranslation<Biome.TerrainMask, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.LandTexture.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
            item.GroundCover.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class BiomeTerrainDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBiomeTerrainDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeTerrainDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class BiomeTerrainDataBinaryOverlay :
        PluginBinaryOverlay,
        IBiomeTerrainDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BiomeTerrainData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BiomeTerrainData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BiomeTerrainDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BiomeTerrainDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBiomeTerrainDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBiomeTerrainDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBiomeTerrainDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BiomeTerrainDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BiomeTerrainDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BiomeTerrainDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Biome.TerrainMask TerrainMask => (Biome.TerrainMask)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x0, 0x4));
        public IFormLinkGetter<ILandscapeTextureGetter> LandTexture => FormLinkBinaryTranslation.Instance.OverlayFactory<ILandscapeTextureGetter>(_package, _structData.Span.Slice(0x4, 0x4));
        public IFormLinkGetter<IGroundCoverGetter> GroundCover => FormLinkBinaryTranslation.Instance.OverlayFactory<IGroundCoverGetter>(_package, _structData.Span.Slice(0x8, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BiomeTerrainDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBiomeTerrainDataGetter BiomeTerrainDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0xC,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new BiomeTerrainDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0xC;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IBiomeTerrainDataGetter BiomeTerrainDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BiomeTerrainDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BiomeTerrainDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBiomeTerrainDataGetter rhs) return false;
            return ((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBiomeTerrainDataGetter? obj)
        {
            return ((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BiomeTerrainDataCommon)((IBiomeTerrainDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

