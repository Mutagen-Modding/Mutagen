/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class MagicEffect :
        StarfieldMajorRecord,
        IEquatable<IMagicEffectGetter>,
        ILoquiObjectSetter<MagicEffect>,
        IMagicEffectInternal
    {
        #region Ctor
        protected MagicEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IMagicEffectGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region Components
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AComponent> _Components = new ExtendedList<AComponent>();
        public ExtendedList<AComponent> Components
        {
            get => this._Components;
            init => this._Components = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAComponentGetter> IMagicEffectGetter.Components => _Components;
        #endregion

        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IMagicEffectGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IMagicEffectGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region ActorValue1
        private readonly IFormLink<IActorValueInformationGetter> _ActorValue1 = new FormLink<IActorValueInformationGetter>();
        public IFormLink<IActorValueInformationGetter> ActorValue1
        {
            get => _ActorValue1;
            set => _ActorValue1.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IActorValueInformationGetter> IMagicEffectGetter.ActorValue1 => this.ActorValue1;
        #endregion
        #region CastingArt
        private readonly IFormLink<IArtObjectGetter> _CastingArt = new FormLink<IArtObjectGetter>();
        public IFormLink<IArtObjectGetter> CastingArt
        {
            get => _CastingArt;
            set => _CastingArt.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IArtObjectGetter> IMagicEffectGetter.CastingArt => this.CastingArt;
        #endregion
        #region MovementType
        private readonly IFormLink<IMovementTypeGetter> _MovementType = new FormLink<IMovementTypeGetter>();
        public IFormLink<IMovementTypeGetter> MovementType
        {
            get => _MovementType;
            set => _MovementType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IMovementTypeGetter> IMagicEffectGetter.MovementType => this.MovementType;
        #endregion
        #region HitShader
        private readonly IFormLink<IEffectShaderGetter> _HitShader = new FormLink<IEffectShaderGetter>();
        public IFormLink<IEffectShaderGetter> HitShader
        {
            get => _HitShader;
            set => _HitShader.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IEffectShaderGetter> IMagicEffectGetter.HitShader => this.HitShader;
        #endregion
        #region EnchantShader
        private readonly IFormLink<IEffectShaderGetter> _EnchantShader = new FormLink<IEffectShaderGetter>();
        public IFormLink<IEffectShaderGetter> EnchantShader
        {
            get => _EnchantShader;
            set => _EnchantShader.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IEffectShaderGetter> IMagicEffectGetter.EnchantShader => this.EnchantShader;
        #endregion
        #region EnchantArt
        private readonly IFormLink<IArtObjectGetter> _EnchantArt = new FormLink<IArtObjectGetter>();
        public IFormLink<IArtObjectGetter> EnchantArt
        {
            get => _EnchantArt;
            set => _EnchantArt.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IArtObjectGetter> IMagicEffectGetter.EnchantArt => this.EnchantArt;
        #endregion
        #region EquipAbility
        private readonly IFormLink<ISpellGetter> _EquipAbility = new FormLink<ISpellGetter>();
        public IFormLink<ISpellGetter> EquipAbility
        {
            get => _EquipAbility;
            set => _EquipAbility.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISpellGetter> IMagicEffectGetter.EquipAbility => this.EquipAbility;
        #endregion
        #region Explosion
        private readonly IFormLink<IExplosionGetter> _Explosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> Explosion
        {
            get => _Explosion;
            set => _Explosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IMagicEffectGetter.Explosion => this.Explosion;
        #endregion
        #region HitEffectArt
        private readonly IFormLink<IArtObjectGetter> _HitEffectArt = new FormLink<IArtObjectGetter>();
        public IFormLink<IArtObjectGetter> HitEffectArt
        {
            get => _HitEffectArt;
            set => _HitEffectArt.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IArtObjectGetter> IMagicEffectGetter.HitEffectArt => this.HitEffectArt;
        #endregion
        #region ImageSpaceModifier
        private readonly IFormLink<IImageSpaceAdapterGetter> _ImageSpaceModifier = new FormLink<IImageSpaceAdapterGetter>();
        public IFormLink<IImageSpaceAdapterGetter> ImageSpaceModifier
        {
            get => _ImageSpaceModifier;
            set => _ImageSpaceModifier.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImageSpaceAdapterGetter> IMagicEffectGetter.ImageSpaceModifier => this.ImageSpaceModifier;
        #endregion
        #region ImpactData
        private readonly IFormLink<IImpactDataSetGetter> _ImpactData = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> ImpactData
        {
            get => _ImpactData;
            set => _ImpactData.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IMagicEffectGetter.ImpactData => this.ImpactData;
        #endregion
        #region CastingLight
        private readonly IFormLink<ILightGetter> _CastingLight = new FormLink<ILightGetter>();
        public IFormLink<ILightGetter> CastingLight
        {
            get => _CastingLight;
            set => _CastingLight.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILightGetter> IMagicEffectGetter.CastingLight => this.CastingLight;
        #endregion
        #region PerkToApply
        private readonly IFormLink<IPerkGetter> _PerkToApply = new FormLink<IPerkGetter>();
        public IFormLink<IPerkGetter> PerkToApply
        {
            get => _PerkToApply;
            set => _PerkToApply.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IPerkGetter> IMagicEffectGetter.PerkToApply => this.PerkToApply;
        #endregion
        #region ActorValue2
        private readonly IFormLink<IActorValueInformationGetter> _ActorValue2 = new FormLink<IActorValueInformationGetter>();
        public IFormLink<IActorValueInformationGetter> ActorValue2
        {
            get => _ActorValue2;
            set => _ActorValue2.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IActorValueInformationGetter> IMagicEffectGetter.ActorValue2 => this.ActorValue2;
        #endregion
        #region Projectile
        private readonly IFormLink<IProjectileGetter> _Projectile = new FormLink<IProjectileGetter>();
        public IFormLink<IProjectileGetter> Projectile
        {
            get => _Projectile;
            set => _Projectile.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IProjectileGetter> IMagicEffectGetter.Projectile => this.Projectile;
        #endregion
        #region ResistValue
        private readonly IFormLink<IActorValueInformationGetter> _ResistValue = new FormLink<IActorValueInformationGetter>();
        public IFormLink<IActorValueInformationGetter> ResistValue
        {
            get => _ResistValue;
            set => _ResistValue.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IActorValueInformationGetter> IMagicEffectGetter.ResistValue => this.ResistValue;
        #endregion
        #region ActorValue3
        private readonly IFormLink<IActorValueInformationGetter> _ActorValue3 = new FormLink<IActorValueInformationGetter>();
        public IFormLink<IActorValueInformationGetter> ActorValue3
        {
            get => _ActorValue3;
            set => _ActorValue3.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IActorValueInformationGetter> IMagicEffectGetter.ActorValue3 => this.ActorValue3;
        #endregion
        #region UnknownFloat1
        public Single UnknownFloat1 { get; set; } = default(Single);
        #endregion
        #region UnknownFloat2
        public Single UnknownFloat2 { get; set; } = default(Single);
        #endregion
        #region Archetype
        public AMagicEffectArchetype Archetype { get; set; } = new MagicEffectArchetype();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAMagicEffectArchetypeGetter IMagicEffectGetter.Archetype => Archetype;
        #endregion
        #region UnknownFloat3
        public Single UnknownFloat3 { get; set; } = default(Single);
        #endregion
        #region UnknownInt1
        public UInt32 UnknownInt1 { get; set; } = default(UInt32);
        #endregion
        #region UnknownFloat4
        public Single UnknownFloat4 { get; set; } = default(Single);
        #endregion
        #region UnknownInt2
        public UInt32 UnknownInt2 { get; set; } = default(UInt32);
        #endregion
        #region CastType
        public CastType CastType { get; set; } = default(CastType);
        #endregion
        #region TargetType
        public TargetType TargetType { get; set; } = default(TargetType);
        #endregion
        #region UnknownInt3
        public UInt32 UnknownInt3 { get; set; } = default(UInt32);
        #endregion
        #region Flags
        public MagicEffect.Flag Flags { get; set; } = default(MagicEffect.Flag);
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown = new byte[22];
        public MemorySlice<Byte> Unknown
        {
            get => _Unknown;
            set => this._Unknown = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IMagicEffectGetter.Unknown => this.Unknown;
        #endregion
        #region Unknown2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MemorySlice<Byte> _Unknown2 = new byte[6];
        public MemorySlice<Byte> Unknown2
        {
            get => _Unknown2;
            set => this._Unknown2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte> IMagicEffectGetter.Unknown2 => this.Unknown2;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MagicEffectSound> _Sounds = new ExtendedList<MagicEffectSound>();
        public ExtendedList<MagicEffectSound> Sounds
        {
            get => this._Sounds;
            init => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMagicEffectSoundGetter> IMagicEffectGetter.Sounds => _Sounds;
        #endregion

        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IMagicEffectGetter.Description => this.Description;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IMagicEffectGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region DATADataTypeState
        public MagicEffect.DATADataType DATADataTypeState { get; set; } = default(MagicEffect.DATADataType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MagicEffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            StarfieldMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ActorValue1 = initialValue;
                this.CastingArt = initialValue;
                this.MovementType = initialValue;
                this.HitShader = initialValue;
                this.EnchantShader = initialValue;
                this.EnchantArt = initialValue;
                this.EquipAbility = initialValue;
                this.Explosion = initialValue;
                this.HitEffectArt = initialValue;
                this.ImageSpaceModifier = initialValue;
                this.ImpactData = initialValue;
                this.CastingLight = initialValue;
                this.PerkToApply = initialValue;
                this.ActorValue2 = initialValue;
                this.Projectile = initialValue;
                this.ResistValue = initialValue;
                this.ActorValue3 = initialValue;
                this.UnknownFloat1 = initialValue;
                this.UnknownFloat2 = initialValue;
                this.Archetype = new MaskItem<TItem, AMagicEffectArchetype.Mask<TItem>?>(initialValue, new AMagicEffectArchetype.Mask<TItem>(initialValue));
                this.UnknownFloat3 = initialValue;
                this.UnknownInt1 = initialValue;
                this.UnknownFloat4 = initialValue;
                this.UnknownInt2 = initialValue;
                this.CastType = initialValue;
                this.TargetType = initialValue;
                this.UnknownInt3 = initialValue;
                this.Flags = initialValue;
                this.Unknown = initialValue;
                this.Unknown2 = initialValue;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>());
                this.Description = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem StarfieldMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem Components,
                TItem Name,
                TItem Keywords,
                TItem ActorValue1,
                TItem CastingArt,
                TItem MovementType,
                TItem HitShader,
                TItem EnchantShader,
                TItem EnchantArt,
                TItem EquipAbility,
                TItem Explosion,
                TItem HitEffectArt,
                TItem ImageSpaceModifier,
                TItem ImpactData,
                TItem CastingLight,
                TItem PerkToApply,
                TItem ActorValue2,
                TItem Projectile,
                TItem ResistValue,
                TItem ActorValue3,
                TItem UnknownFloat1,
                TItem UnknownFloat2,
                TItem Archetype,
                TItem UnknownFloat3,
                TItem UnknownInt1,
                TItem UnknownFloat4,
                TItem UnknownInt2,
                TItem CastType,
                TItem TargetType,
                TItem UnknownInt3,
                TItem Flags,
                TItem Unknown,
                TItem Unknown2,
                TItem Sounds,
                TItem Description,
                TItem Conditions,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                StarfieldMajorRecordFlags: StarfieldMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Components = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>(Components, Enumerable.Empty<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>());
                this.Name = Name;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.ActorValue1 = ActorValue1;
                this.CastingArt = CastingArt;
                this.MovementType = MovementType;
                this.HitShader = HitShader;
                this.EnchantShader = EnchantShader;
                this.EnchantArt = EnchantArt;
                this.EquipAbility = EquipAbility;
                this.Explosion = Explosion;
                this.HitEffectArt = HitEffectArt;
                this.ImageSpaceModifier = ImageSpaceModifier;
                this.ImpactData = ImpactData;
                this.CastingLight = CastingLight;
                this.PerkToApply = PerkToApply;
                this.ActorValue2 = ActorValue2;
                this.Projectile = Projectile;
                this.ResistValue = ResistValue;
                this.ActorValue3 = ActorValue3;
                this.UnknownFloat1 = UnknownFloat1;
                this.UnknownFloat2 = UnknownFloat2;
                this.Archetype = new MaskItem<TItem, AMagicEffectArchetype.Mask<TItem>?>(Archetype, new AMagicEffectArchetype.Mask<TItem>(Archetype));
                this.UnknownFloat3 = UnknownFloat3;
                this.UnknownInt1 = UnknownInt1;
                this.UnknownFloat4 = UnknownFloat4;
                this.UnknownInt2 = UnknownInt2;
                this.CastType = CastType;
                this.TargetType = TargetType;
                this.UnknownInt3 = UnknownInt3;
                this.Flags = Flags;
                this.Unknown = Unknown;
                this.Unknown2 = Unknown2;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>());
                this.Description = Description;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AComponent.Mask<TItem>?>>?>? Components;
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem ActorValue1;
            public TItem CastingArt;
            public TItem MovementType;
            public TItem HitShader;
            public TItem EnchantShader;
            public TItem EnchantArt;
            public TItem EquipAbility;
            public TItem Explosion;
            public TItem HitEffectArt;
            public TItem ImageSpaceModifier;
            public TItem ImpactData;
            public TItem CastingLight;
            public TItem PerkToApply;
            public TItem ActorValue2;
            public TItem Projectile;
            public TItem ResistValue;
            public TItem ActorValue3;
            public TItem UnknownFloat1;
            public TItem UnknownFloat2;
            public MaskItem<TItem, AMagicEffectArchetype.Mask<TItem>?>? Archetype { get; set; }
            public TItem UnknownFloat3;
            public TItem UnknownInt1;
            public TItem UnknownFloat4;
            public TItem UnknownInt2;
            public TItem CastType;
            public TItem TargetType;
            public TItem UnknownInt3;
            public TItem Flags;
            public TItem Unknown;
            public TItem Unknown2;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MagicEffectSound.Mask<TItem>?>>?>? Sounds;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Components, rhs.Components)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.ActorValue1, rhs.ActorValue1)) return false;
                if (!object.Equals(this.CastingArt, rhs.CastingArt)) return false;
                if (!object.Equals(this.MovementType, rhs.MovementType)) return false;
                if (!object.Equals(this.HitShader, rhs.HitShader)) return false;
                if (!object.Equals(this.EnchantShader, rhs.EnchantShader)) return false;
                if (!object.Equals(this.EnchantArt, rhs.EnchantArt)) return false;
                if (!object.Equals(this.EquipAbility, rhs.EquipAbility)) return false;
                if (!object.Equals(this.Explosion, rhs.Explosion)) return false;
                if (!object.Equals(this.HitEffectArt, rhs.HitEffectArt)) return false;
                if (!object.Equals(this.ImageSpaceModifier, rhs.ImageSpaceModifier)) return false;
                if (!object.Equals(this.ImpactData, rhs.ImpactData)) return false;
                if (!object.Equals(this.CastingLight, rhs.CastingLight)) return false;
                if (!object.Equals(this.PerkToApply, rhs.PerkToApply)) return false;
                if (!object.Equals(this.ActorValue2, rhs.ActorValue2)) return false;
                if (!object.Equals(this.Projectile, rhs.Projectile)) return false;
                if (!object.Equals(this.ResistValue, rhs.ResistValue)) return false;
                if (!object.Equals(this.ActorValue3, rhs.ActorValue3)) return false;
                if (!object.Equals(this.UnknownFloat1, rhs.UnknownFloat1)) return false;
                if (!object.Equals(this.UnknownFloat2, rhs.UnknownFloat2)) return false;
                if (!object.Equals(this.Archetype, rhs.Archetype)) return false;
                if (!object.Equals(this.UnknownFloat3, rhs.UnknownFloat3)) return false;
                if (!object.Equals(this.UnknownInt1, rhs.UnknownInt1)) return false;
                if (!object.Equals(this.UnknownFloat4, rhs.UnknownFloat4)) return false;
                if (!object.Equals(this.UnknownInt2, rhs.UnknownInt2)) return false;
                if (!object.Equals(this.CastType, rhs.CastType)) return false;
                if (!object.Equals(this.TargetType, rhs.TargetType)) return false;
                if (!object.Equals(this.UnknownInt3, rhs.UnknownInt3)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Components);
                hash.Add(this.Name);
                hash.Add(this.Keywords);
                hash.Add(this.ActorValue1);
                hash.Add(this.CastingArt);
                hash.Add(this.MovementType);
                hash.Add(this.HitShader);
                hash.Add(this.EnchantShader);
                hash.Add(this.EnchantArt);
                hash.Add(this.EquipAbility);
                hash.Add(this.Explosion);
                hash.Add(this.HitEffectArt);
                hash.Add(this.ImageSpaceModifier);
                hash.Add(this.ImpactData);
                hash.Add(this.CastingLight);
                hash.Add(this.PerkToApply);
                hash.Add(this.ActorValue2);
                hash.Add(this.Projectile);
                hash.Add(this.ResistValue);
                hash.Add(this.ActorValue3);
                hash.Add(this.UnknownFloat1);
                hash.Add(this.UnknownFloat2);
                hash.Add(this.Archetype);
                hash.Add(this.UnknownFloat3);
                hash.Add(this.UnknownInt1);
                hash.Add(this.UnknownFloat4);
                hash.Add(this.UnknownInt2);
                hash.Add(this.CastType);
                hash.Add(this.TargetType);
                hash.Add(this.UnknownInt3);
                hash.Add(this.Flags);
                hash.Add(this.Unknown);
                hash.Add(this.Unknown2);
                hash.Add(this.Sounds);
                hash.Add(this.Description);
                hash.Add(this.Conditions);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (this.Components != null)
                {
                    if (!eval(this.Components.Overall)) return false;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Name)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ActorValue1)) return false;
                if (!eval(this.CastingArt)) return false;
                if (!eval(this.MovementType)) return false;
                if (!eval(this.HitShader)) return false;
                if (!eval(this.EnchantShader)) return false;
                if (!eval(this.EnchantArt)) return false;
                if (!eval(this.EquipAbility)) return false;
                if (!eval(this.Explosion)) return false;
                if (!eval(this.HitEffectArt)) return false;
                if (!eval(this.ImageSpaceModifier)) return false;
                if (!eval(this.ImpactData)) return false;
                if (!eval(this.CastingLight)) return false;
                if (!eval(this.PerkToApply)) return false;
                if (!eval(this.ActorValue2)) return false;
                if (!eval(this.Projectile)) return false;
                if (!eval(this.ResistValue)) return false;
                if (!eval(this.ActorValue3)) return false;
                if (!eval(this.UnknownFloat1)) return false;
                if (!eval(this.UnknownFloat2)) return false;
                if (Archetype != null)
                {
                    if (!eval(this.Archetype.Overall)) return false;
                    if (this.Archetype.Specific != null && !this.Archetype.Specific.All(eval)) return false;
                }
                if (!eval(this.UnknownFloat3)) return false;
                if (!eval(this.UnknownInt1)) return false;
                if (!eval(this.UnknownFloat4)) return false;
                if (!eval(this.UnknownInt2)) return false;
                if (!eval(this.CastType)) return false;
                if (!eval(this.TargetType)) return false;
                if (!eval(this.UnknownInt3)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Unknown2)) return false;
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Description)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (this.Components != null)
                {
                    if (eval(this.Components.Overall)) return true;
                    if (this.Components.Specific != null)
                    {
                        foreach (var item in this.Components.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Name)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ActorValue1)) return true;
                if (eval(this.CastingArt)) return true;
                if (eval(this.MovementType)) return true;
                if (eval(this.HitShader)) return true;
                if (eval(this.EnchantShader)) return true;
                if (eval(this.EnchantArt)) return true;
                if (eval(this.EquipAbility)) return true;
                if (eval(this.Explosion)) return true;
                if (eval(this.HitEffectArt)) return true;
                if (eval(this.ImageSpaceModifier)) return true;
                if (eval(this.ImpactData)) return true;
                if (eval(this.CastingLight)) return true;
                if (eval(this.PerkToApply)) return true;
                if (eval(this.ActorValue2)) return true;
                if (eval(this.Projectile)) return true;
                if (eval(this.ResistValue)) return true;
                if (eval(this.ActorValue3)) return true;
                if (eval(this.UnknownFloat1)) return true;
                if (eval(this.UnknownFloat2)) return true;
                if (Archetype != null)
                {
                    if (eval(this.Archetype.Overall)) return true;
                    if (this.Archetype.Specific != null && this.Archetype.Specific.Any(eval)) return true;
                }
                if (eval(this.UnknownFloat3)) return true;
                if (eval(this.UnknownInt1)) return true;
                if (eval(this.UnknownFloat4)) return true;
                if (eval(this.UnknownInt2)) return true;
                if (eval(this.CastType)) return true;
                if (eval(this.TargetType)) return true;
                if (eval(this.UnknownInt3)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Unknown2)) return true;
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Description)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MagicEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                if (Components != null)
                {
                    obj.Components = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AComponent.Mask<R>?>>?>(eval(this.Components.Overall), Enumerable.Empty<MaskItemIndexed<R, AComponent.Mask<R>?>>());
                    if (Components.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AComponent.Mask<R>?>>();
                        obj.Components.Specific = l;
                        foreach (var item in Components.Specific)
                        {
                            MaskItemIndexed<R, AComponent.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AComponent.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Name = eval(this.Name);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ActorValue1 = eval(this.ActorValue1);
                obj.CastingArt = eval(this.CastingArt);
                obj.MovementType = eval(this.MovementType);
                obj.HitShader = eval(this.HitShader);
                obj.EnchantShader = eval(this.EnchantShader);
                obj.EnchantArt = eval(this.EnchantArt);
                obj.EquipAbility = eval(this.EquipAbility);
                obj.Explosion = eval(this.Explosion);
                obj.HitEffectArt = eval(this.HitEffectArt);
                obj.ImageSpaceModifier = eval(this.ImageSpaceModifier);
                obj.ImpactData = eval(this.ImpactData);
                obj.CastingLight = eval(this.CastingLight);
                obj.PerkToApply = eval(this.PerkToApply);
                obj.ActorValue2 = eval(this.ActorValue2);
                obj.Projectile = eval(this.Projectile);
                obj.ResistValue = eval(this.ResistValue);
                obj.ActorValue3 = eval(this.ActorValue3);
                obj.UnknownFloat1 = eval(this.UnknownFloat1);
                obj.UnknownFloat2 = eval(this.UnknownFloat2);
                obj.Archetype = this.Archetype == null ? null : new MaskItem<R, AMagicEffectArchetype.Mask<R>?>(eval(this.Archetype.Overall), this.Archetype.Specific?.Translate(eval));
                obj.UnknownFloat3 = eval(this.UnknownFloat3);
                obj.UnknownInt1 = eval(this.UnknownInt1);
                obj.UnknownFloat4 = eval(this.UnknownFloat4);
                obj.UnknownInt2 = eval(this.UnknownInt2);
                obj.CastType = eval(this.CastType);
                obj.TargetType = eval(this.TargetType);
                obj.UnknownInt3 = eval(this.UnknownInt3);
                obj.Flags = eval(this.Flags);
                obj.Unknown = eval(this.Unknown);
                obj.Unknown2 = eval(this.Unknown2);
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MagicEffectSound.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, MagicEffectSound.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MagicEffectSound.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific)
                        {
                            MaskItemIndexed<R, MagicEffectSound.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, MagicEffectSound.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Description = eval(this.Description);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MagicEffect.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MagicEffect.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MagicEffect.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if ((printMask?.Components?.Overall ?? true)
                        && Components is {} ComponentsItem)
                    {
                        sb.AppendLine("Components =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ComponentsItem.Overall);
                            if (ComponentsItem.Specific != null)
                            {
                                foreach (var subItem in ComponentsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ActorValue1 ?? true)
                    {
                        sb.AppendItem(ActorValue1, "ActorValue1");
                    }
                    if (printMask?.CastingArt ?? true)
                    {
                        sb.AppendItem(CastingArt, "CastingArt");
                    }
                    if (printMask?.MovementType ?? true)
                    {
                        sb.AppendItem(MovementType, "MovementType");
                    }
                    if (printMask?.HitShader ?? true)
                    {
                        sb.AppendItem(HitShader, "HitShader");
                    }
                    if (printMask?.EnchantShader ?? true)
                    {
                        sb.AppendItem(EnchantShader, "EnchantShader");
                    }
                    if (printMask?.EnchantArt ?? true)
                    {
                        sb.AppendItem(EnchantArt, "EnchantArt");
                    }
                    if (printMask?.EquipAbility ?? true)
                    {
                        sb.AppendItem(EquipAbility, "EquipAbility");
                    }
                    if (printMask?.Explosion ?? true)
                    {
                        sb.AppendItem(Explosion, "Explosion");
                    }
                    if (printMask?.HitEffectArt ?? true)
                    {
                        sb.AppendItem(HitEffectArt, "HitEffectArt");
                    }
                    if (printMask?.ImageSpaceModifier ?? true)
                    {
                        sb.AppendItem(ImageSpaceModifier, "ImageSpaceModifier");
                    }
                    if (printMask?.ImpactData ?? true)
                    {
                        sb.AppendItem(ImpactData, "ImpactData");
                    }
                    if (printMask?.CastingLight ?? true)
                    {
                        sb.AppendItem(CastingLight, "CastingLight");
                    }
                    if (printMask?.PerkToApply ?? true)
                    {
                        sb.AppendItem(PerkToApply, "PerkToApply");
                    }
                    if (printMask?.ActorValue2 ?? true)
                    {
                        sb.AppendItem(ActorValue2, "ActorValue2");
                    }
                    if (printMask?.Projectile ?? true)
                    {
                        sb.AppendItem(Projectile, "Projectile");
                    }
                    if (printMask?.ResistValue ?? true)
                    {
                        sb.AppendItem(ResistValue, "ResistValue");
                    }
                    if (printMask?.ActorValue3 ?? true)
                    {
                        sb.AppendItem(ActorValue3, "ActorValue3");
                    }
                    if (printMask?.UnknownFloat1 ?? true)
                    {
                        sb.AppendItem(UnknownFloat1, "UnknownFloat1");
                    }
                    if (printMask?.UnknownFloat2 ?? true)
                    {
                        sb.AppendItem(UnknownFloat2, "UnknownFloat2");
                    }
                    if (printMask?.Archetype?.Overall ?? true)
                    {
                        Archetype?.Print(sb);
                    }
                    if (printMask?.UnknownFloat3 ?? true)
                    {
                        sb.AppendItem(UnknownFloat3, "UnknownFloat3");
                    }
                    if (printMask?.UnknownInt1 ?? true)
                    {
                        sb.AppendItem(UnknownInt1, "UnknownInt1");
                    }
                    if (printMask?.UnknownFloat4 ?? true)
                    {
                        sb.AppendItem(UnknownFloat4, "UnknownFloat4");
                    }
                    if (printMask?.UnknownInt2 ?? true)
                    {
                        sb.AppendItem(UnknownInt2, "UnknownInt2");
                    }
                    if (printMask?.CastType ?? true)
                    {
                        sb.AppendItem(CastType, "CastType");
                    }
                    if (printMask?.TargetType ?? true)
                    {
                        sb.AppendItem(TargetType, "TargetType");
                    }
                    if (printMask?.UnknownInt3 ?? true)
                    {
                        sb.AppendItem(UnknownInt3, "UnknownInt3");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds is {} SoundsItem)
                    {
                        sb.AppendLine("Sounds =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            StarfieldMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>? Components;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? ActorValue1;
            public Exception? CastingArt;
            public Exception? MovementType;
            public Exception? HitShader;
            public Exception? EnchantShader;
            public Exception? EnchantArt;
            public Exception? EquipAbility;
            public Exception? Explosion;
            public Exception? HitEffectArt;
            public Exception? ImageSpaceModifier;
            public Exception? ImpactData;
            public Exception? CastingLight;
            public Exception? PerkToApply;
            public Exception? ActorValue2;
            public Exception? Projectile;
            public Exception? ResistValue;
            public Exception? ActorValue3;
            public Exception? UnknownFloat1;
            public Exception? UnknownFloat2;
            public MaskItem<Exception?, AMagicEffectArchetype.ErrorMask?>? Archetype;
            public Exception? UnknownFloat3;
            public Exception? UnknownInt1;
            public Exception? UnknownFloat4;
            public Exception? UnknownInt2;
            public Exception? CastType;
            public Exception? TargetType;
            public Exception? UnknownInt3;
            public Exception? Flags;
            public Exception? Unknown;
            public Exception? Unknown2;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MagicEffectSound.ErrorMask?>>?>? Sounds;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffect_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case MagicEffect_FieldIndex.Components:
                        return Components;
                    case MagicEffect_FieldIndex.Name:
                        return Name;
                    case MagicEffect_FieldIndex.Keywords:
                        return Keywords;
                    case MagicEffect_FieldIndex.ActorValue1:
                        return ActorValue1;
                    case MagicEffect_FieldIndex.CastingArt:
                        return CastingArt;
                    case MagicEffect_FieldIndex.MovementType:
                        return MovementType;
                    case MagicEffect_FieldIndex.HitShader:
                        return HitShader;
                    case MagicEffect_FieldIndex.EnchantShader:
                        return EnchantShader;
                    case MagicEffect_FieldIndex.EnchantArt:
                        return EnchantArt;
                    case MagicEffect_FieldIndex.EquipAbility:
                        return EquipAbility;
                    case MagicEffect_FieldIndex.Explosion:
                        return Explosion;
                    case MagicEffect_FieldIndex.HitEffectArt:
                        return HitEffectArt;
                    case MagicEffect_FieldIndex.ImageSpaceModifier:
                        return ImageSpaceModifier;
                    case MagicEffect_FieldIndex.ImpactData:
                        return ImpactData;
                    case MagicEffect_FieldIndex.CastingLight:
                        return CastingLight;
                    case MagicEffect_FieldIndex.PerkToApply:
                        return PerkToApply;
                    case MagicEffect_FieldIndex.ActorValue2:
                        return ActorValue2;
                    case MagicEffect_FieldIndex.Projectile:
                        return Projectile;
                    case MagicEffect_FieldIndex.ResistValue:
                        return ResistValue;
                    case MagicEffect_FieldIndex.ActorValue3:
                        return ActorValue3;
                    case MagicEffect_FieldIndex.UnknownFloat1:
                        return UnknownFloat1;
                    case MagicEffect_FieldIndex.UnknownFloat2:
                        return UnknownFloat2;
                    case MagicEffect_FieldIndex.Archetype:
                        return Archetype;
                    case MagicEffect_FieldIndex.UnknownFloat3:
                        return UnknownFloat3;
                    case MagicEffect_FieldIndex.UnknownInt1:
                        return UnknownInt1;
                    case MagicEffect_FieldIndex.UnknownFloat4:
                        return UnknownFloat4;
                    case MagicEffect_FieldIndex.UnknownInt2:
                        return UnknownInt2;
                    case MagicEffect_FieldIndex.CastType:
                        return CastType;
                    case MagicEffect_FieldIndex.TargetType:
                        return TargetType;
                    case MagicEffect_FieldIndex.UnknownInt3:
                        return UnknownInt3;
                    case MagicEffect_FieldIndex.Flags:
                        return Flags;
                    case MagicEffect_FieldIndex.Unknown:
                        return Unknown;
                    case MagicEffect_FieldIndex.Unknown2:
                        return Unknown2;
                    case MagicEffect_FieldIndex.Sounds:
                        return Sounds;
                    case MagicEffect_FieldIndex.Description:
                        return Description;
                    case MagicEffect_FieldIndex.Conditions:
                        return Conditions;
                    case MagicEffect_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffect_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.Components:
                        this.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case MagicEffect_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.ActorValue1:
                        this.ActorValue1 = ex;
                        break;
                    case MagicEffect_FieldIndex.CastingArt:
                        this.CastingArt = ex;
                        break;
                    case MagicEffect_FieldIndex.MovementType:
                        this.MovementType = ex;
                        break;
                    case MagicEffect_FieldIndex.HitShader:
                        this.HitShader = ex;
                        break;
                    case MagicEffect_FieldIndex.EnchantShader:
                        this.EnchantShader = ex;
                        break;
                    case MagicEffect_FieldIndex.EnchantArt:
                        this.EnchantArt = ex;
                        break;
                    case MagicEffect_FieldIndex.EquipAbility:
                        this.EquipAbility = ex;
                        break;
                    case MagicEffect_FieldIndex.Explosion:
                        this.Explosion = ex;
                        break;
                    case MagicEffect_FieldIndex.HitEffectArt:
                        this.HitEffectArt = ex;
                        break;
                    case MagicEffect_FieldIndex.ImageSpaceModifier:
                        this.ImageSpaceModifier = ex;
                        break;
                    case MagicEffect_FieldIndex.ImpactData:
                        this.ImpactData = ex;
                        break;
                    case MagicEffect_FieldIndex.CastingLight:
                        this.CastingLight = ex;
                        break;
                    case MagicEffect_FieldIndex.PerkToApply:
                        this.PerkToApply = ex;
                        break;
                    case MagicEffect_FieldIndex.ActorValue2:
                        this.ActorValue2 = ex;
                        break;
                    case MagicEffect_FieldIndex.Projectile:
                        this.Projectile = ex;
                        break;
                    case MagicEffect_FieldIndex.ResistValue:
                        this.ResistValue = ex;
                        break;
                    case MagicEffect_FieldIndex.ActorValue3:
                        this.ActorValue3 = ex;
                        break;
                    case MagicEffect_FieldIndex.UnknownFloat1:
                        this.UnknownFloat1 = ex;
                        break;
                    case MagicEffect_FieldIndex.UnknownFloat2:
                        this.UnknownFloat2 = ex;
                        break;
                    case MagicEffect_FieldIndex.Archetype:
                        this.Archetype = new MaskItem<Exception?, AMagicEffectArchetype.ErrorMask?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.UnknownFloat3:
                        this.UnknownFloat3 = ex;
                        break;
                    case MagicEffect_FieldIndex.UnknownInt1:
                        this.UnknownInt1 = ex;
                        break;
                    case MagicEffect_FieldIndex.UnknownFloat4:
                        this.UnknownFloat4 = ex;
                        break;
                    case MagicEffect_FieldIndex.UnknownInt2:
                        this.UnknownInt2 = ex;
                        break;
                    case MagicEffect_FieldIndex.CastType:
                        this.CastType = ex;
                        break;
                    case MagicEffect_FieldIndex.TargetType:
                        this.TargetType = ex;
                        break;
                    case MagicEffect_FieldIndex.UnknownInt3:
                        this.UnknownInt3 = ex;
                        break;
                    case MagicEffect_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case MagicEffect_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case MagicEffect_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case MagicEffect_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MagicEffectSound.ErrorMask?>>?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case MagicEffect_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case MagicEffect_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                MagicEffect_FieldIndex enu = (MagicEffect_FieldIndex)index;
                switch (enu)
                {
                    case MagicEffect_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case MagicEffect_FieldIndex.Components:
                        this.Components = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>)obj;
                        break;
                    case MagicEffect_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case MagicEffect_FieldIndex.ActorValue1:
                        this.ActorValue1 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.CastingArt:
                        this.CastingArt = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.MovementType:
                        this.MovementType = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.HitShader:
                        this.HitShader = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.EnchantShader:
                        this.EnchantShader = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.EnchantArt:
                        this.EnchantArt = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.EquipAbility:
                        this.EquipAbility = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Explosion:
                        this.Explosion = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.HitEffectArt:
                        this.HitEffectArt = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.ImageSpaceModifier:
                        this.ImageSpaceModifier = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.ImpactData:
                        this.ImpactData = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.CastingLight:
                        this.CastingLight = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.PerkToApply:
                        this.PerkToApply = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.ActorValue2:
                        this.ActorValue2 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Projectile:
                        this.Projectile = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.ResistValue:
                        this.ResistValue = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.ActorValue3:
                        this.ActorValue3 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.UnknownFloat1:
                        this.UnknownFloat1 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.UnknownFloat2:
                        this.UnknownFloat2 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Archetype:
                        this.Archetype = (MaskItem<Exception?, AMagicEffectArchetype.ErrorMask?>?)obj;
                        break;
                    case MagicEffect_FieldIndex.UnknownFloat3:
                        this.UnknownFloat3 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.UnknownInt1:
                        this.UnknownInt1 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.UnknownFloat4:
                        this.UnknownFloat4 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.UnknownInt2:
                        this.UnknownInt2 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.CastType:
                        this.CastType = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.TargetType:
                        this.TargetType = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.UnknownInt3:
                        this.UnknownInt3 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MagicEffectSound.ErrorMask?>>?>)obj;
                        break;
                    case MagicEffect_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case MagicEffect_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case MagicEffect_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Components != null) return true;
                if (Name != null) return true;
                if (Keywords != null) return true;
                if (ActorValue1 != null) return true;
                if (CastingArt != null) return true;
                if (MovementType != null) return true;
                if (HitShader != null) return true;
                if (EnchantShader != null) return true;
                if (EnchantArt != null) return true;
                if (EquipAbility != null) return true;
                if (Explosion != null) return true;
                if (HitEffectArt != null) return true;
                if (ImageSpaceModifier != null) return true;
                if (ImpactData != null) return true;
                if (CastingLight != null) return true;
                if (PerkToApply != null) return true;
                if (ActorValue2 != null) return true;
                if (Projectile != null) return true;
                if (ResistValue != null) return true;
                if (ActorValue3 != null) return true;
                if (UnknownFloat1 != null) return true;
                if (UnknownFloat2 != null) return true;
                if (Archetype != null) return true;
                if (UnknownFloat3 != null) return true;
                if (UnknownInt1 != null) return true;
                if (UnknownFloat4 != null) return true;
                if (UnknownInt2 != null) return true;
                if (CastType != null) return true;
                if (TargetType != null) return true;
                if (UnknownInt3 != null) return true;
                if (Flags != null) return true;
                if (Unknown != null) return true;
                if (Unknown2 != null) return true;
                if (Sounds != null) return true;
                if (Description != null) return true;
                if (Conditions != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                if (Components is {} ComponentsItem)
                {
                    sb.AppendLine("Components =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ComponentsItem.Overall);
                        if (ComponentsItem.Specific != null)
                        {
                            foreach (var subItem in ComponentsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ActorValue1, "ActorValue1");
                }
                {
                    sb.AppendItem(CastingArt, "CastingArt");
                }
                {
                    sb.AppendItem(MovementType, "MovementType");
                }
                {
                    sb.AppendItem(HitShader, "HitShader");
                }
                {
                    sb.AppendItem(EnchantShader, "EnchantShader");
                }
                {
                    sb.AppendItem(EnchantArt, "EnchantArt");
                }
                {
                    sb.AppendItem(EquipAbility, "EquipAbility");
                }
                {
                    sb.AppendItem(Explosion, "Explosion");
                }
                {
                    sb.AppendItem(HitEffectArt, "HitEffectArt");
                }
                {
                    sb.AppendItem(ImageSpaceModifier, "ImageSpaceModifier");
                }
                {
                    sb.AppendItem(ImpactData, "ImpactData");
                }
                {
                    sb.AppendItem(CastingLight, "CastingLight");
                }
                {
                    sb.AppendItem(PerkToApply, "PerkToApply");
                }
                {
                    sb.AppendItem(ActorValue2, "ActorValue2");
                }
                {
                    sb.AppendItem(Projectile, "Projectile");
                }
                {
                    sb.AppendItem(ResistValue, "ResistValue");
                }
                {
                    sb.AppendItem(ActorValue3, "ActorValue3");
                }
                {
                    sb.AppendItem(UnknownFloat1, "UnknownFloat1");
                }
                {
                    sb.AppendItem(UnknownFloat2, "UnknownFloat2");
                }
                Archetype?.Print(sb);
                {
                    sb.AppendItem(UnknownFloat3, "UnknownFloat3");
                }
                {
                    sb.AppendItem(UnknownInt1, "UnknownInt1");
                }
                {
                    sb.AppendItem(UnknownFloat4, "UnknownFloat4");
                }
                {
                    sb.AppendItem(UnknownInt2, "UnknownInt2");
                }
                {
                    sb.AppendItem(CastType, "CastType");
                }
                {
                    sb.AppendItem(TargetType, "TargetType");
                }
                {
                    sb.AppendItem(UnknownInt3, "UnknownInt3");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
                if (Sounds is {} SoundsItem)
                {
                    sb.AppendLine("Sounds =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Components = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AComponent.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Components?.Overall, rhs.Components?.Overall), Noggog.ExceptionExt.Combine(this.Components?.Specific, rhs.Components?.Specific));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.ActorValue1 = this.ActorValue1.Combine(rhs.ActorValue1);
                ret.CastingArt = this.CastingArt.Combine(rhs.CastingArt);
                ret.MovementType = this.MovementType.Combine(rhs.MovementType);
                ret.HitShader = this.HitShader.Combine(rhs.HitShader);
                ret.EnchantShader = this.EnchantShader.Combine(rhs.EnchantShader);
                ret.EnchantArt = this.EnchantArt.Combine(rhs.EnchantArt);
                ret.EquipAbility = this.EquipAbility.Combine(rhs.EquipAbility);
                ret.Explosion = this.Explosion.Combine(rhs.Explosion);
                ret.HitEffectArt = this.HitEffectArt.Combine(rhs.HitEffectArt);
                ret.ImageSpaceModifier = this.ImageSpaceModifier.Combine(rhs.ImageSpaceModifier);
                ret.ImpactData = this.ImpactData.Combine(rhs.ImpactData);
                ret.CastingLight = this.CastingLight.Combine(rhs.CastingLight);
                ret.PerkToApply = this.PerkToApply.Combine(rhs.PerkToApply);
                ret.ActorValue2 = this.ActorValue2.Combine(rhs.ActorValue2);
                ret.Projectile = this.Projectile.Combine(rhs.Projectile);
                ret.ResistValue = this.ResistValue.Combine(rhs.ResistValue);
                ret.ActorValue3 = this.ActorValue3.Combine(rhs.ActorValue3);
                ret.UnknownFloat1 = this.UnknownFloat1.Combine(rhs.UnknownFloat1);
                ret.UnknownFloat2 = this.UnknownFloat2.Combine(rhs.UnknownFloat2);
                ret.Archetype = this.Archetype.Combine(rhs.Archetype, (l, r) => l.Combine(r));
                ret.UnknownFloat3 = this.UnknownFloat3.Combine(rhs.UnknownFloat3);
                ret.UnknownInt1 = this.UnknownInt1.Combine(rhs.UnknownInt1);
                ret.UnknownFloat4 = this.UnknownFloat4.Combine(rhs.UnknownFloat4);
                ret.UnknownInt2 = this.UnknownInt2.Combine(rhs.UnknownInt2);
                ret.CastType = this.CastType.Combine(rhs.CastType);
                ret.TargetType = this.TargetType.Combine(rhs.TargetType);
                ret.UnknownInt3 = this.UnknownInt3.Combine(rhs.UnknownInt3);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MagicEffectSound.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), Noggog.ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            StarfieldMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public AComponent.TranslationMask? Components;
            public bool Name;
            public bool Keywords;
            public bool ActorValue1;
            public bool CastingArt;
            public bool MovementType;
            public bool HitShader;
            public bool EnchantShader;
            public bool EnchantArt;
            public bool EquipAbility;
            public bool Explosion;
            public bool HitEffectArt;
            public bool ImageSpaceModifier;
            public bool ImpactData;
            public bool CastingLight;
            public bool PerkToApply;
            public bool ActorValue2;
            public bool Projectile;
            public bool ResistValue;
            public bool ActorValue3;
            public bool UnknownFloat1;
            public bool UnknownFloat2;
            public AMagicEffectArchetype.TranslationMask? Archetype;
            public bool UnknownFloat3;
            public bool UnknownInt1;
            public bool UnknownFloat4;
            public bool UnknownInt2;
            public bool CastType;
            public bool TargetType;
            public bool UnknownInt3;
            public bool Flags;
            public bool Unknown;
            public bool Unknown2;
            public MagicEffectSound.TranslationMask? Sounds;
            public bool Description;
            public Condition.TranslationMask? Conditions;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.ActorValue1 = defaultOn;
                this.CastingArt = defaultOn;
                this.MovementType = defaultOn;
                this.HitShader = defaultOn;
                this.EnchantShader = defaultOn;
                this.EnchantArt = defaultOn;
                this.EquipAbility = defaultOn;
                this.Explosion = defaultOn;
                this.HitEffectArt = defaultOn;
                this.ImageSpaceModifier = defaultOn;
                this.ImpactData = defaultOn;
                this.CastingLight = defaultOn;
                this.PerkToApply = defaultOn;
                this.ActorValue2 = defaultOn;
                this.Projectile = defaultOn;
                this.ResistValue = defaultOn;
                this.ActorValue3 = defaultOn;
                this.UnknownFloat1 = defaultOn;
                this.UnknownFloat2 = defaultOn;
                this.UnknownFloat3 = defaultOn;
                this.UnknownInt1 = defaultOn;
                this.UnknownFloat4 = defaultOn;
                this.UnknownInt2 = defaultOn;
                this.CastType = defaultOn;
                this.TargetType = defaultOn;
                this.UnknownInt3 = defaultOn;
                this.Flags = defaultOn;
                this.Unknown = defaultOn;
                this.Unknown2 = defaultOn;
                this.Description = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Components == null ? DefaultOn : !Components.GetCrystal().CopyNothing, Components?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Keywords, null));
                ret.Add((ActorValue1, null));
                ret.Add((CastingArt, null));
                ret.Add((MovementType, null));
                ret.Add((HitShader, null));
                ret.Add((EnchantShader, null));
                ret.Add((EnchantArt, null));
                ret.Add((EquipAbility, null));
                ret.Add((Explosion, null));
                ret.Add((HitEffectArt, null));
                ret.Add((ImageSpaceModifier, null));
                ret.Add((ImpactData, null));
                ret.Add((CastingLight, null));
                ret.Add((PerkToApply, null));
                ret.Add((ActorValue2, null));
                ret.Add((Projectile, null));
                ret.Add((ResistValue, null));
                ret.Add((ActorValue3, null));
                ret.Add((UnknownFloat1, null));
                ret.Add((UnknownFloat2, null));
                ret.Add((Archetype != null ? Archetype.OnOverall : DefaultOn, Archetype?.GetCrystal()));
                ret.Add((UnknownFloat3, null));
                ret.Add((UnknownInt1, null));
                ret.Add((UnknownFloat4, null));
                ret.Add((UnknownInt2, null));
                ret.Add((CastType, null));
                ret.Add((TargetType, null));
                ret.Add((UnknownInt3, null));
                ret.Add((Flags, null));
                ret.Add((Unknown, null));
                ret.Add((Unknown2, null));
                ret.Add((Sounds == null ? DefaultOn : !Sounds.GetCrystal().CopyNothing, Sounds?.GetCrystal()));
                ret.Add((Description, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = MagicEffect_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MagicEffectCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => MagicEffectSetterCommon.Instance.RemapLinks(this, mapping);
        public MagicEffect(
            FormKey formKey,
            StarfieldRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private MagicEffect(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal MagicEffect(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public MagicEffect(IStarfieldMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.StarfieldRelease)
        {
        }

        public MagicEffect(IStarfieldMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.StarfieldRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<MagicEffect>.ToString(this);
        }

        protected override Type LinkType => typeof(IMagicEffect);

        [Flags]
        public enum DATADataType
        {
            Break0 = 1
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => MagicEffectCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => MagicEffectSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => MagicEffectSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => MagicEffectSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMagicEffectGetter rhs) return false;
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMagicEffectGetter? obj)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MagicEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MagicEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static MagicEffect CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new MagicEffect();
            ((MagicEffectSetterCommon)((IMagicEffectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MagicEffect item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new MagicEffect GetNew()
        {
            return new MagicEffect();
        }

    }
    #endregion

    #region Interface
    public partial interface IMagicEffect :
        IAssetLinkContainer,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IMagicEffectInternal>,
        IMagicEffectGetter,
        INamed,
        INamedRequired,
        IScripted,
        IStarfieldMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new ExtendedList<AComponent> Components { get; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new IFormLink<IActorValueInformationGetter> ActorValue1 { get; set; }
        new IFormLink<IArtObjectGetter> CastingArt { get; set; }
        new IFormLink<IMovementTypeGetter> MovementType { get; set; }
        new IFormLink<IEffectShaderGetter> HitShader { get; set; }
        new IFormLink<IEffectShaderGetter> EnchantShader { get; set; }
        new IFormLink<IArtObjectGetter> EnchantArt { get; set; }
        new IFormLink<ISpellGetter> EquipAbility { get; set; }
        new IFormLink<IExplosionGetter> Explosion { get; set; }
        new IFormLink<IArtObjectGetter> HitEffectArt { get; set; }
        new IFormLink<IImageSpaceAdapterGetter> ImageSpaceModifier { get; set; }
        new IFormLink<IImpactDataSetGetter> ImpactData { get; set; }
        new IFormLink<ILightGetter> CastingLight { get; set; }
        new IFormLink<IPerkGetter> PerkToApply { get; set; }
        new IFormLink<IActorValueInformationGetter> ActorValue2 { get; set; }
        new IFormLink<IProjectileGetter> Projectile { get; set; }
        new IFormLink<IActorValueInformationGetter> ResistValue { get; set; }
        new IFormLink<IActorValueInformationGetter> ActorValue3 { get; set; }
        new Single UnknownFloat1 { get; set; }
        new Single UnknownFloat2 { get; set; }
        new AMagicEffectArchetype Archetype { get; set; }
        new Single UnknownFloat3 { get; set; }
        new UInt32 UnknownInt1 { get; set; }
        new Single UnknownFloat4 { get; set; }
        new UInt32 UnknownInt2 { get; set; }
        new CastType CastType { get; set; }
        new TargetType TargetType { get; set; }
        new UInt32 UnknownInt3 { get; set; }
        new MagicEffect.Flag Flags { get; set; }
        new MemorySlice<Byte> Unknown { get; set; }
        new MemorySlice<Byte> Unknown2 { get; set; }
        new ExtendedList<MagicEffectSound> Sounds { get; }
        new TranslatedString? Description { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new MagicEffect.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IMagicEffectInternal :
        IStarfieldMajorRecordInternal,
        IMagicEffect,
        IMagicEffectGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Starfield.Internals.RecordTypeInts.MGEF)]
    public partial interface IMagicEffectGetter :
        IStarfieldMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IMagicEffectGetter>,
        IMapsToGetter<IMagicEffectGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IScriptedGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => MagicEffect_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        IReadOnlyList<IAComponentGetter> Components { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IFormLinkGetter<IActorValueInformationGetter> ActorValue1 { get; }
        IFormLinkGetter<IArtObjectGetter> CastingArt { get; }
        IFormLinkGetter<IMovementTypeGetter> MovementType { get; }
        IFormLinkGetter<IEffectShaderGetter> HitShader { get; }
        IFormLinkGetter<IEffectShaderGetter> EnchantShader { get; }
        IFormLinkGetter<IArtObjectGetter> EnchantArt { get; }
        IFormLinkGetter<ISpellGetter> EquipAbility { get; }
        IFormLinkGetter<IExplosionGetter> Explosion { get; }
        IFormLinkGetter<IArtObjectGetter> HitEffectArt { get; }
        IFormLinkGetter<IImageSpaceAdapterGetter> ImageSpaceModifier { get; }
        IFormLinkGetter<IImpactDataSetGetter> ImpactData { get; }
        IFormLinkGetter<ILightGetter> CastingLight { get; }
        IFormLinkGetter<IPerkGetter> PerkToApply { get; }
        IFormLinkGetter<IActorValueInformationGetter> ActorValue2 { get; }
        IFormLinkGetter<IProjectileGetter> Projectile { get; }
        IFormLinkGetter<IActorValueInformationGetter> ResistValue { get; }
        IFormLinkGetter<IActorValueInformationGetter> ActorValue3 { get; }
        Single UnknownFloat1 { get; }
        Single UnknownFloat2 { get; }
        IAMagicEffectArchetypeGetter Archetype { get; }
        Single UnknownFloat3 { get; }
        UInt32 UnknownInt1 { get; }
        Single UnknownFloat4 { get; }
        UInt32 UnknownInt2 { get; }
        CastType CastType { get; }
        TargetType TargetType { get; }
        UInt32 UnknownInt3 { get; }
        MagicEffect.Flag Flags { get; }
        ReadOnlyMemorySlice<Byte> Unknown { get; }
        ReadOnlyMemorySlice<Byte> Unknown2 { get; }
        IReadOnlyList<IMagicEffectSoundGetter> Sounds { get; }
        ITranslatedStringGetter? Description { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        MagicEffect.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MagicEffectMixIn
    {
        public static void Clear(this IMagicEffectInternal item)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MagicEffect.Mask<bool> GetEqualsMask(
            this IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMagicEffectGetter item,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMagicEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            MagicEffect.TranslationMask? equalsMask = null)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMagicEffectInternal lhs,
            IMagicEffectGetter rhs,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MagicEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMagicEffectInternal lhs,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            MagicEffect.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MagicEffect DeepCopy(
            this IMagicEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static MagicEffect Duplicate(
            this IMagicEffectGetter item,
            FormKey formKey,
            MagicEffect.TranslationMask? copyMask = null)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static MagicEffect Duplicate(
            this IMagicEffectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMagicEffectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MagicEffectSetterCommon)((IMagicEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum MagicEffect_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        StarfieldMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        Components = 8,
        Name = 9,
        Keywords = 10,
        ActorValue1 = 11,
        CastingArt = 12,
        MovementType = 13,
        HitShader = 14,
        EnchantShader = 15,
        EnchantArt = 16,
        EquipAbility = 17,
        Explosion = 18,
        HitEffectArt = 19,
        ImageSpaceModifier = 20,
        ImpactData = 21,
        CastingLight = 22,
        PerkToApply = 23,
        ActorValue2 = 24,
        Projectile = 25,
        ResistValue = 26,
        ActorValue3 = 27,
        UnknownFloat1 = 28,
        UnknownFloat2 = 29,
        Archetype = 30,
        UnknownFloat3 = 31,
        UnknownInt1 = 32,
        UnknownFloat4 = 33,
        UnknownInt2 = 34,
        CastType = 35,
        TargetType = 36,
        UnknownInt3 = 37,
        Flags = 38,
        Unknown = 39,
        Unknown2 = 40,
        Sounds = 41,
        Description = 42,
        Conditions = 43,
        DATADataTypeState = 44,
    }
    #endregion

    #region Registration
    internal partial class MagicEffect_Registration : ILoquiRegistration
    {
        public static readonly MagicEffect_Registration Instance = new MagicEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 38;

        public const ushort FieldCount = 45;

        public static readonly Type MaskType = typeof(MagicEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MagicEffect.ErrorMask);

        public static readonly Type ClassType = typeof(MagicEffect);

        public static readonly Type GetterType = typeof(IMagicEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMagicEffect);

        public static readonly Type? InternalSetterType = typeof(IMagicEffectInternal);

        public const string FullName = "Mutagen.Bethesda.Starfield.MagicEffect";

        public const string Name = "MagicEffect";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.MGEF;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.MGEF);
            var all = RecordCollection.Factory(
                RecordTypes.MGEF,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.BFCB,
                RecordTypes.BFCE,
                RecordTypes.FULL,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.DATA,
                RecordTypes.ESSH,
                RecordTypes.DNAM,
                RecordTypes.CTDA,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(MagicEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MagicEffectSetterCommon : StarfieldMajorRecordSetterCommon
    {
        public new static readonly MagicEffectSetterCommon Instance = new MagicEffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMagicEffectInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Components.Clear();
            item.Name = default;
            item.Keywords = null;
            item.ActorValue1.Clear();
            item.CastingArt.Clear();
            item.MovementType.Clear();
            item.HitShader.Clear();
            item.EnchantShader.Clear();
            item.EnchantArt.Clear();
            item.EquipAbility.Clear();
            item.Explosion.Clear();
            item.HitEffectArt.Clear();
            item.ImageSpaceModifier.Clear();
            item.ImpactData.Clear();
            item.CastingLight.Clear();
            item.PerkToApply.Clear();
            item.ActorValue2.Clear();
            item.Projectile.Clear();
            item.ResistValue.Clear();
            item.ActorValue3.Clear();
            item.UnknownFloat1 = default(Single);
            item.UnknownFloat2 = default(Single);
            item.Archetype.Clear();
            item.UnknownFloat3 = default(Single);
            item.UnknownInt1 = default(UInt32);
            item.UnknownFloat4 = default(Single);
            item.UnknownInt2 = default(UInt32);
            item.CastType = default(CastType);
            item.TargetType = default(TargetType);
            item.UnknownInt3 = default(UInt32);
            item.Flags = default(MagicEffect.Flag);
            item.Unknown = new byte[22];
            item.Unknown2 = new byte[6];
            item.Sounds.Clear();
            item.Description = default;
            item.Conditions.Clear();
            item.DATADataTypeState = default(MagicEffect.DATADataType);
            base.Clear(item);
        }
        
        public override void Clear(IStarfieldMajorRecordInternal item)
        {
            Clear(item: (IMagicEffectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMagicEffectInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IMagicEffect obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Components.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.ActorValue1.Relink(mapping);
            obj.CastingArt.Relink(mapping);
            obj.MovementType.Relink(mapping);
            obj.HitShader.Relink(mapping);
            obj.EnchantShader.Relink(mapping);
            obj.EnchantArt.Relink(mapping);
            obj.EquipAbility.Relink(mapping);
            obj.Explosion.Relink(mapping);
            obj.HitEffectArt.Relink(mapping);
            obj.ImageSpaceModifier.Relink(mapping);
            obj.ImpactData.Relink(mapping);
            obj.CastingLight.Relink(mapping);
            obj.PerkToApply.Relink(mapping);
            obj.ActorValue2.Relink(mapping);
            obj.Projectile.Relink(mapping);
            obj.ResistValue.Relink(mapping);
            obj.ActorValue3.Relink(mapping);
            obj.Archetype.RemapLinks(mapping);
            obj.Sounds.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IMagicEffect obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IMagicEffect obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Components.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMagicEffectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IMagicEffectInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MagicEffectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MagicEffectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IStarfieldMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (MagicEffect)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (MagicEffect)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class MagicEffectCommon : StarfieldMajorRecordCommon
    {
        public new static readonly MagicEffectCommon Instance = new MagicEffectCommon();

        public MagicEffect.Mask<bool> GetEqualsMask(
            IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MagicEffect.Mask<bool>(false);
            ((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMagicEffectGetter item,
            IMagicEffectGetter rhs,
            MagicEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Components = item.Components.CollectionEqualsHelper(
                rhs.Components,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.ActorValue1 = item.ActorValue1.Equals(rhs.ActorValue1);
            ret.CastingArt = item.CastingArt.Equals(rhs.CastingArt);
            ret.MovementType = item.MovementType.Equals(rhs.MovementType);
            ret.HitShader = item.HitShader.Equals(rhs.HitShader);
            ret.EnchantShader = item.EnchantShader.Equals(rhs.EnchantShader);
            ret.EnchantArt = item.EnchantArt.Equals(rhs.EnchantArt);
            ret.EquipAbility = item.EquipAbility.Equals(rhs.EquipAbility);
            ret.Explosion = item.Explosion.Equals(rhs.Explosion);
            ret.HitEffectArt = item.HitEffectArt.Equals(rhs.HitEffectArt);
            ret.ImageSpaceModifier = item.ImageSpaceModifier.Equals(rhs.ImageSpaceModifier);
            ret.ImpactData = item.ImpactData.Equals(rhs.ImpactData);
            ret.CastingLight = item.CastingLight.Equals(rhs.CastingLight);
            ret.PerkToApply = item.PerkToApply.Equals(rhs.PerkToApply);
            ret.ActorValue2 = item.ActorValue2.Equals(rhs.ActorValue2);
            ret.Projectile = item.Projectile.Equals(rhs.Projectile);
            ret.ResistValue = item.ResistValue.Equals(rhs.ResistValue);
            ret.ActorValue3 = item.ActorValue3.Equals(rhs.ActorValue3);
            ret.UnknownFloat1 = item.UnknownFloat1.EqualsWithin(rhs.UnknownFloat1);
            ret.UnknownFloat2 = item.UnknownFloat2.EqualsWithin(rhs.UnknownFloat2);
            ret.Archetype = MaskItemExt.Factory(item.Archetype.GetEqualsMask(rhs.Archetype, include), include);
            ret.UnknownFloat3 = item.UnknownFloat3.EqualsWithin(rhs.UnknownFloat3);
            ret.UnknownInt1 = item.UnknownInt1 == rhs.UnknownInt1;
            ret.UnknownFloat4 = item.UnknownFloat4.EqualsWithin(rhs.UnknownFloat4);
            ret.UnknownInt2 = item.UnknownInt2 == rhs.UnknownInt2;
            ret.CastType = item.CastType == rhs.CastType;
            ret.TargetType = item.TargetType == rhs.TargetType;
            ret.UnknownInt3 = item.UnknownInt3 == rhs.UnknownInt3;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Unknown = MemoryExtensions.SequenceEqual(item.Unknown.Span, rhs.Unknown.Span);
            ret.Unknown2 = MemoryExtensions.SequenceEqual(item.Unknown2.Span, rhs.Unknown2.Span);
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IMagicEffectGetter item,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMagicEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MagicEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MagicEffect =>");
            }
            else
            {
                sb.AppendLine($"{name} (MagicEffect) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMagicEffectGetter item,
            StructuredStringBuilder sb,
            MagicEffect.Mask<bool>? printMask = null)
        {
            StarfieldMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.Components?.Overall ?? true)
            {
                sb.AppendLine("Components =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Components)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.ActorValue1 ?? true)
            {
                sb.AppendItem(item.ActorValue1.FormKey, "ActorValue1");
            }
            if (printMask?.CastingArt ?? true)
            {
                sb.AppendItem(item.CastingArt.FormKey, "CastingArt");
            }
            if (printMask?.MovementType ?? true)
            {
                sb.AppendItem(item.MovementType.FormKey, "MovementType");
            }
            if (printMask?.HitShader ?? true)
            {
                sb.AppendItem(item.HitShader.FormKey, "HitShader");
            }
            if (printMask?.EnchantShader ?? true)
            {
                sb.AppendItem(item.EnchantShader.FormKey, "EnchantShader");
            }
            if (printMask?.EnchantArt ?? true)
            {
                sb.AppendItem(item.EnchantArt.FormKey, "EnchantArt");
            }
            if (printMask?.EquipAbility ?? true)
            {
                sb.AppendItem(item.EquipAbility.FormKey, "EquipAbility");
            }
            if (printMask?.Explosion ?? true)
            {
                sb.AppendItem(item.Explosion.FormKey, "Explosion");
            }
            if (printMask?.HitEffectArt ?? true)
            {
                sb.AppendItem(item.HitEffectArt.FormKey, "HitEffectArt");
            }
            if (printMask?.ImageSpaceModifier ?? true)
            {
                sb.AppendItem(item.ImageSpaceModifier.FormKey, "ImageSpaceModifier");
            }
            if (printMask?.ImpactData ?? true)
            {
                sb.AppendItem(item.ImpactData.FormKey, "ImpactData");
            }
            if (printMask?.CastingLight ?? true)
            {
                sb.AppendItem(item.CastingLight.FormKey, "CastingLight");
            }
            if (printMask?.PerkToApply ?? true)
            {
                sb.AppendItem(item.PerkToApply.FormKey, "PerkToApply");
            }
            if (printMask?.ActorValue2 ?? true)
            {
                sb.AppendItem(item.ActorValue2.FormKey, "ActorValue2");
            }
            if (printMask?.Projectile ?? true)
            {
                sb.AppendItem(item.Projectile.FormKey, "Projectile");
            }
            if (printMask?.ResistValue ?? true)
            {
                sb.AppendItem(item.ResistValue.FormKey, "ResistValue");
            }
            if (printMask?.ActorValue3 ?? true)
            {
                sb.AppendItem(item.ActorValue3.FormKey, "ActorValue3");
            }
            if (printMask?.UnknownFloat1 ?? true)
            {
                sb.AppendItem(item.UnknownFloat1, "UnknownFloat1");
            }
            if (printMask?.UnknownFloat2 ?? true)
            {
                sb.AppendItem(item.UnknownFloat2, "UnknownFloat2");
            }
            if (printMask?.Archetype?.Overall ?? true)
            {
                item.Archetype?.Print(sb, "Archetype");
            }
            if (printMask?.UnknownFloat3 ?? true)
            {
                sb.AppendItem(item.UnknownFloat3, "UnknownFloat3");
            }
            if (printMask?.UnknownInt1 ?? true)
            {
                sb.AppendItem(item.UnknownInt1, "UnknownInt1");
            }
            if (printMask?.UnknownFloat4 ?? true)
            {
                sb.AppendItem(item.UnknownFloat4, "UnknownFloat4");
            }
            if (printMask?.UnknownInt2 ?? true)
            {
                sb.AppendItem(item.UnknownInt2, "UnknownInt2");
            }
            if (printMask?.CastType ?? true)
            {
                sb.AppendItem(item.CastType, "CastType");
            }
            if (printMask?.TargetType ?? true)
            {
                sb.AppendItem(item.TargetType, "TargetType");
            }
            if (printMask?.UnknownInt3 ?? true)
            {
                sb.AppendItem(item.UnknownInt3, "UnknownInt3");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendLine($"Unknown => {SpanExt.ToHexString(item.Unknown)}");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendLine($"Unknown2 => {SpanExt.ToHexString(item.Unknown2)}");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                sb.AppendLine("Sounds =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Sounds)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                sb.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static MagicEffect_FieldIndex ConvertFieldIndex(StarfieldMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case StarfieldMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MagicEffect_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormKey:
                    return (MagicEffect_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.VersionControl:
                    return (MagicEffect_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.EditorID:
                    return (MagicEffect_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.FormVersion:
                    return (MagicEffect_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.Version2:
                    return (MagicEffect_FieldIndex)((int)index);
                case StarfieldMajorRecord_FieldIndex.StarfieldMajorRecordFlags:
                    return (MagicEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new MagicEffect_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (MagicEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MagicEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMagicEffectGetter? lhs,
            IMagicEffectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IStarfieldMajorRecordGetter)lhs, (IStarfieldMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)MagicEffect_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Components) ?? true))
            {
                if (!lhs.Components.SequenceEqual(rhs.Components, (l, r) => ((AComponentCommon)((IAComponentGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Components)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ActorValue1) ?? true))
            {
                if (!lhs.ActorValue1.Equals(rhs.ActorValue1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CastingArt) ?? true))
            {
                if (!lhs.CastingArt.Equals(rhs.CastingArt)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MovementType) ?? true))
            {
                if (!lhs.MovementType.Equals(rhs.MovementType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.HitShader) ?? true))
            {
                if (!lhs.HitShader.Equals(rhs.HitShader)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EnchantShader) ?? true))
            {
                if (!lhs.EnchantShader.Equals(rhs.EnchantShader)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EnchantArt) ?? true))
            {
                if (!lhs.EnchantArt.Equals(rhs.EnchantArt)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EquipAbility) ?? true))
            {
                if (!lhs.EquipAbility.Equals(rhs.EquipAbility)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Explosion) ?? true))
            {
                if (!lhs.Explosion.Equals(rhs.Explosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.HitEffectArt) ?? true))
            {
                if (!lhs.HitEffectArt.Equals(rhs.HitEffectArt)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ImageSpaceModifier) ?? true))
            {
                if (!lhs.ImageSpaceModifier.Equals(rhs.ImageSpaceModifier)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ImpactData) ?? true))
            {
                if (!lhs.ImpactData.Equals(rhs.ImpactData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CastingLight) ?? true))
            {
                if (!lhs.CastingLight.Equals(rhs.CastingLight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.PerkToApply) ?? true))
            {
                if (!lhs.PerkToApply.Equals(rhs.PerkToApply)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ActorValue2) ?? true))
            {
                if (!lhs.ActorValue2.Equals(rhs.ActorValue2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Projectile) ?? true))
            {
                if (!lhs.Projectile.Equals(rhs.Projectile)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ResistValue) ?? true))
            {
                if (!lhs.ResistValue.Equals(rhs.ResistValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ActorValue3) ?? true))
            {
                if (!lhs.ActorValue3.Equals(rhs.ActorValue3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownFloat1) ?? true))
            {
                if (!lhs.UnknownFloat1.EqualsWithin(rhs.UnknownFloat1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownFloat2) ?? true))
            {
                if (!lhs.UnknownFloat2.EqualsWithin(rhs.UnknownFloat2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Archetype) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Archetype, rhs.Archetype, out var lhsArchetype, out var rhsArchetype, out var isArchetypeEqual))
                {
                    if (!((AMagicEffectArchetypeCommon)((IAMagicEffectArchetypeGetter)lhsArchetype).CommonInstance()!).Equals(lhsArchetype, rhsArchetype, equalsMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Archetype))) return false;
                }
                else if (!isArchetypeEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownFloat3) ?? true))
            {
                if (!lhs.UnknownFloat3.EqualsWithin(rhs.UnknownFloat3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownInt1) ?? true))
            {
                if (lhs.UnknownInt1 != rhs.UnknownInt1) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownFloat4) ?? true))
            {
                if (!lhs.UnknownFloat4.EqualsWithin(rhs.UnknownFloat4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownInt2) ?? true))
            {
                if (lhs.UnknownInt2 != rhs.UnknownInt2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CastType) ?? true))
            {
                if (lhs.CastType != rhs.CastType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.TargetType) ?? true))
            {
                if (lhs.TargetType != rhs.TargetType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownInt3) ?? true))
            {
                if (lhs.UnknownInt3 != rhs.UnknownInt3) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Unknown) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown.Span, rhs.Unknown.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Unknown2) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual(lhs.Unknown2.Span, rhs.Unknown2.Span)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Sounds) ?? true))
            {
                if (!lhs.Sounds.SequenceEqual(rhs.Sounds, (l, r) => ((MagicEffectSoundCommon)((IMagicEffectSoundGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Sounds)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.DATADataTypeState) ?? true))
            {
                if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IStarfieldMajorRecordGetter? lhs,
            IStarfieldMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IMagicEffectGetter?)lhs,
                rhs: rhs as IMagicEffectGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IMagicEffectGetter?)lhs,
                rhs: rhs as IMagicEffectGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IMagicEffectGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.Components);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.ActorValue1);
            hash.Add(item.CastingArt);
            hash.Add(item.MovementType);
            hash.Add(item.HitShader);
            hash.Add(item.EnchantShader);
            hash.Add(item.EnchantArt);
            hash.Add(item.EquipAbility);
            hash.Add(item.Explosion);
            hash.Add(item.HitEffectArt);
            hash.Add(item.ImageSpaceModifier);
            hash.Add(item.ImpactData);
            hash.Add(item.CastingLight);
            hash.Add(item.PerkToApply);
            hash.Add(item.ActorValue2);
            hash.Add(item.Projectile);
            hash.Add(item.ResistValue);
            hash.Add(item.ActorValue3);
            hash.Add(item.UnknownFloat1);
            hash.Add(item.UnknownFloat2);
            hash.Add(item.Archetype);
            hash.Add(item.UnknownFloat3);
            hash.Add(item.UnknownInt1);
            hash.Add(item.UnknownFloat4);
            hash.Add(item.UnknownInt2);
            hash.Add(item.CastType);
            hash.Add(item.TargetType);
            hash.Add(item.UnknownInt3);
            hash.Add(item.Flags);
            hash.Add(item.Unknown);
            hash.Add(item.Unknown2);
            hash.Add(item.Sounds);
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.Conditions);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IStarfieldMajorRecordGetter item)
        {
            return GetHashCode(item: (IMagicEffectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMagicEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MagicEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMagicEffectGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield return FormLinkInformation.Factory(obj.ActorValue1);
            yield return FormLinkInformation.Factory(obj.CastingArt);
            yield return FormLinkInformation.Factory(obj.MovementType);
            yield return FormLinkInformation.Factory(obj.HitShader);
            yield return FormLinkInformation.Factory(obj.EnchantShader);
            yield return FormLinkInformation.Factory(obj.EnchantArt);
            yield return FormLinkInformation.Factory(obj.EquipAbility);
            yield return FormLinkInformation.Factory(obj.Explosion);
            yield return FormLinkInformation.Factory(obj.HitEffectArt);
            yield return FormLinkInformation.Factory(obj.ImageSpaceModifier);
            yield return FormLinkInformation.Factory(obj.ImpactData);
            yield return FormLinkInformation.Factory(obj.CastingLight);
            yield return FormLinkInformation.Factory(obj.PerkToApply);
            yield return FormLinkInformation.Factory(obj.ActorValue2);
            yield return FormLinkInformation.Factory(obj.Projectile);
            yield return FormLinkInformation.Factory(obj.ResistValue);
            yield return FormLinkInformation.Factory(obj.ActorValue3);
            if (obj.Archetype is IFormLinkContainerGetter ArchetypelinkCont)
            {
                foreach (var item in ArchetypelinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Sounds.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IMagicEffectGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Components.WhereCastable<IAComponentGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public MagicEffect Duplicate(
            IMagicEffectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new MagicEffect(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override StarfieldMajorRecord Duplicate(
            IStarfieldMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMagicEffectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMagicEffectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class MagicEffectSetterTranslationCommon : StarfieldMajorRecordSetterTranslationCommon
    {
        public new static readonly MagicEffectSetterTranslationCommon Instance = new MagicEffectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMagicEffectInternal item,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IMagicEffect item,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IStarfieldMajorRecord)item,
                (IStarfieldMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)MagicEffect_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Components) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Components);
                try
                {
                    item.Components.SetTo(
                        rhs.Components
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ActorValue1) ?? true))
            {
                item.ActorValue1.SetTo(rhs.ActorValue1.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CastingArt) ?? true))
            {
                item.CastingArt.SetTo(rhs.CastingArt.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.MovementType) ?? true))
            {
                item.MovementType.SetTo(rhs.MovementType.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.HitShader) ?? true))
            {
                item.HitShader.SetTo(rhs.HitShader.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EnchantShader) ?? true))
            {
                item.EnchantShader.SetTo(rhs.EnchantShader.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EnchantArt) ?? true))
            {
                item.EnchantArt.SetTo(rhs.EnchantArt.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.EquipAbility) ?? true))
            {
                item.EquipAbility.SetTo(rhs.EquipAbility.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Explosion) ?? true))
            {
                item.Explosion.SetTo(rhs.Explosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.HitEffectArt) ?? true))
            {
                item.HitEffectArt.SetTo(rhs.HitEffectArt.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ImageSpaceModifier) ?? true))
            {
                item.ImageSpaceModifier.SetTo(rhs.ImageSpaceModifier.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ImpactData) ?? true))
            {
                item.ImpactData.SetTo(rhs.ImpactData.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CastingLight) ?? true))
            {
                item.CastingLight.SetTo(rhs.CastingLight.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.PerkToApply) ?? true))
            {
                item.PerkToApply.SetTo(rhs.PerkToApply.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ActorValue2) ?? true))
            {
                item.ActorValue2.SetTo(rhs.ActorValue2.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Projectile) ?? true))
            {
                item.Projectile.SetTo(rhs.Projectile.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ResistValue) ?? true))
            {
                item.ResistValue.SetTo(rhs.ResistValue.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.ActorValue3) ?? true))
            {
                item.ActorValue3.SetTo(rhs.ActorValue3.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownFloat1) ?? true))
            {
                item.UnknownFloat1 = rhs.UnknownFloat1;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownFloat2) ?? true))
            {
                item.UnknownFloat2 = rhs.UnknownFloat2;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Archetype) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Archetype);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Archetype) ?? true))
                    {
                        item.Archetype = rhs.Archetype.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MagicEffect_FieldIndex.Archetype),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownFloat3) ?? true))
            {
                item.UnknownFloat3 = rhs.UnknownFloat3;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownInt1) ?? true))
            {
                item.UnknownInt1 = rhs.UnknownInt1;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownFloat4) ?? true))
            {
                item.UnknownFloat4 = rhs.UnknownFloat4;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownInt2) ?? true))
            {
                item.UnknownInt2 = rhs.UnknownInt2;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.CastType) ?? true))
            {
                item.CastType = rhs.CastType;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.TargetType) ?? true))
            {
                item.TargetType = rhs.TargetType;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.UnknownInt3) ?? true))
            {
                item.UnknownInt3 = rhs.UnknownInt3;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2.ToArray();
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetTo(
                        rhs.Sounds
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)MagicEffect_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MagicEffect_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IMagicEffect item,
            IMagicEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IStarfieldMajorRecordInternal item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMagicEffectInternal)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IStarfieldMajorRecord item,
            IStarfieldMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMagicEffect)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMagicEffectInternal)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMagicEffect)item,
                rhs: (IMagicEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            MagicEffect.TranslationMask? copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            out MagicEffect.ErrorMask errorMask,
            MagicEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MagicEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MagicEffect DeepCopy(
            IMagicEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MagicEffect ret = (MagicEffect)((MagicEffectCommon)((IMagicEffectGetter)item).CommonInstance()!).GetNew();
            ((MagicEffectSetterTranslationCommon)((IMagicEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class MagicEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffect_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MagicEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MagicEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MagicEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MagicEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class MagicEffectBinaryWriteTranslation :
        StarfieldMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly MagicEffectBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IMagicEffectGetter item,
            MutagenWriter writer)
        {
            StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IMagicEffectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAComponentGetter>.Instance.Write(
                writer: writer,
                items: item.Components,
                transl: (MutagenWriter subWriter, IAComponentGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AComponentBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                MagicEffectBinaryWriteTranslation.WriteBinaryAssociatedItem(
                    writer: writer,
                    item: item);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ActorValue1);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CastingArt);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MovementType);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HitShader);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EnchantShader);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EnchantArt);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EquipAbility);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Explosion);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HitEffectArt);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImageSpaceModifier);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImpactData);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CastingLight);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.PerkToApply);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ActorValue2);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Projectile);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ResistValue);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ActorValue3);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnknownFloat1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnknownFloat2);
                MagicEffectBinaryWriteTranslation.WriteBinaryArchetype(
                    writer: writer,
                    item: item);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnknownFloat3);
                writer.Write(item.UnknownInt1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnknownFloat4);
                writer.Write(item.UnknownInt2);
                EnumBinaryTranslation<CastType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.CastType,
                    length: 1);
                EnumBinaryTranslation<TargetType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.TargetType,
                    length: 1);
                writer.Write(item.UnknownInt3);
                EnumBinaryTranslation<MagicEffect.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 8);
                ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Unknown);
                if (!item.DATADataTypeState.HasFlag(MagicEffect.DATADataType.Break0))
                {
                    ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.Unknown2);
                }
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IMagicEffectSoundGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                transl: (MutagenWriter subWriter, IMagicEffectSoundGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((MagicEffectSoundBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public static partial void WriteBinaryAssociatedItemCustom(
            MutagenWriter writer,
            IMagicEffectGetter item);

        public static void WriteBinaryAssociatedItem(
            MutagenWriter writer,
            IMagicEffectGetter item)
        {
            WriteBinaryAssociatedItemCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryArchetypeCustom(
            MutagenWriter writer,
            IMagicEffectGetter item);

        public static void WriteBinaryArchetype(
            MutagenWriter writer,
            IMagicEffectGetter item)
        {
            WriteBinaryArchetypeCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IMagicEffectGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.MGEF,
                writeEmbedded: StarfieldMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMagicEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IStarfieldMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IMagicEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IMagicEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MagicEffectBinaryCreateTranslation : StarfieldMajorRecordBinaryCreateTranslation
    {
        public new static readonly MagicEffectBinaryCreateTranslation Instance = new MagicEffectBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.MGEF;
        public static void FillBinaryStructs(
            IMagicEffectInternal item,
            MutagenFrame frame)
        {
            StarfieldMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IMagicEffectInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Starfield.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)MagicEffect_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.BFCB:
                {
                    item.Components.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AComponent>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AComponent_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: AComponent.TryCreateFromBinary));
                    return (int)MagicEffect_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)MagicEffect_FieldIndex.Name;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)MagicEffect_FieldIndex.Keywords;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    MagicEffectBinaryCreateTranslation.FillBinaryAssociatedItemCustom(
                        frame: dataFrame,
                        item: item);
                    if (dataFrame.Remaining < 4) return null;
                    item.ActorValue1.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.CastingArt.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.MovementType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.HitShader.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.EnchantShader.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.EnchantArt.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.EquipAbility.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.Explosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.HitEffectArt.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ImageSpaceModifier.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ImpactData.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.CastingLight.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.PerkToApply.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ActorValue2.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.Projectile.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ResistValue.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ActorValue3.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownFloat1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownFloat2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    MagicEffectBinaryCreateTranslation.FillBinaryArchetypeCustom(
                        frame: dataFrame,
                        item: item);
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownFloat3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownInt1 = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownFloat4 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownInt2 = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 1) return null;
                    item.CastType = EnumBinaryTranslation<CastType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.TargetType = EnumBinaryTranslation<TargetType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 4) return null;
                    item.UnknownInt3 = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 8) return null;
                    item.Flags = EnumBinaryTranslation<MagicEffect.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 8);
                    item.Unknown = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(22));
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= MagicEffect.DATADataType.Break0;
                        return (int)MagicEffect_FieldIndex.Unknown;
                    }
                    item.Unknown2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame.SpawnWithLength(6));
                    return (int)MagicEffect_FieldIndex.Unknown2;
                }
                case RecordTypeInts.ESSH:
                {
                    item.Sounds.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<MagicEffectSound>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: MagicEffectSound_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: MagicEffectSound.TryCreateFromBinary));
                    return (int)MagicEffect_FieldIndex.Sounds;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)MagicEffect_FieldIndex.Description;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)MagicEffect_FieldIndex.Conditions;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return StarfieldMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryAssociatedItemCustom(
            MutagenFrame frame,
            IMagicEffectInternal item);

        public static partial void FillBinaryArchetypeCustom(
            MutagenFrame frame,
            IMagicEffectInternal item);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class MagicEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class MagicEffectBinaryOverlay :
        StarfieldMajorRecordBinaryOverlay,
        IMagicEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MagicEffect_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MagicEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MagicEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MagicEffectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => MagicEffectCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => MagicEffectCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MagicEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MagicEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IMagicEffect);


        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        public IReadOnlyList<IAComponentGetter> Components { get; private set; } = [];
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        private RangeInt32? _DATALocation;
        public MagicEffect.DATADataType DATADataTypeState { get; private set; }
        #region AssociatedItem
        private int _AssociatedItemLocation => _DATALocation!.Value.Min;
        private bool _AssociatedItem_IsSet => _DATALocation.HasValue;
        partial void AssociatedItemCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region ActorValue1
        private int _ActorValue1Location => _DATALocation!.Value.Min + 0x4;
        private bool _ActorValue1_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IActorValueInformationGetter> ActorValue1 => _ActorValue1_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IActorValueInformationGetter>(_package, _recordData.Span.Slice(_ActorValue1Location, 0x4), isSet: _ActorValue1_IsSet) : FormLink<IActorValueInformationGetter>.Null;
        #endregion
        #region CastingArt
        private int _CastingArtLocation => _DATALocation!.Value.Min + 0x8;
        private bool _CastingArt_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IArtObjectGetter> CastingArt => _CastingArt_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IArtObjectGetter>(_package, _recordData.Span.Slice(_CastingArtLocation, 0x4), isSet: _CastingArt_IsSet) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region MovementType
        private int _MovementTypeLocation => _DATALocation!.Value.Min + 0xC;
        private bool _MovementType_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IMovementTypeGetter> MovementType => _MovementType_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IMovementTypeGetter>(_package, _recordData.Span.Slice(_MovementTypeLocation, 0x4), isSet: _MovementType_IsSet) : FormLink<IMovementTypeGetter>.Null;
        #endregion
        #region HitShader
        private int _HitShaderLocation => _DATALocation!.Value.Min + 0x10;
        private bool _HitShader_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IEffectShaderGetter> HitShader => _HitShader_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IEffectShaderGetter>(_package, _recordData.Span.Slice(_HitShaderLocation, 0x4), isSet: _HitShader_IsSet) : FormLink<IEffectShaderGetter>.Null;
        #endregion
        #region EnchantShader
        private int _EnchantShaderLocation => _DATALocation!.Value.Min + 0x14;
        private bool _EnchantShader_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IEffectShaderGetter> EnchantShader => _EnchantShader_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IEffectShaderGetter>(_package, _recordData.Span.Slice(_EnchantShaderLocation, 0x4), isSet: _EnchantShader_IsSet) : FormLink<IEffectShaderGetter>.Null;
        #endregion
        #region EnchantArt
        private int _EnchantArtLocation => _DATALocation!.Value.Min + 0x18;
        private bool _EnchantArt_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IArtObjectGetter> EnchantArt => _EnchantArt_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IArtObjectGetter>(_package, _recordData.Span.Slice(_EnchantArtLocation, 0x4), isSet: _EnchantArt_IsSet) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region EquipAbility
        private int _EquipAbilityLocation => _DATALocation!.Value.Min + 0x1C;
        private bool _EquipAbility_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<ISpellGetter> EquipAbility => _EquipAbility_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellGetter>(_package, _recordData.Span.Slice(_EquipAbilityLocation, 0x4), isSet: _EquipAbility_IsSet) : FormLink<ISpellGetter>.Null;
        #endregion
        #region Explosion
        private int _ExplosionLocation => _DATALocation!.Value.Min + 0x20;
        private bool _Explosion_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> Explosion => _Explosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_ExplosionLocation, 0x4), isSet: _Explosion_IsSet) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region HitEffectArt
        private int _HitEffectArtLocation => _DATALocation!.Value.Min + 0x24;
        private bool _HitEffectArt_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IArtObjectGetter> HitEffectArt => _HitEffectArt_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IArtObjectGetter>(_package, _recordData.Span.Slice(_HitEffectArtLocation, 0x4), isSet: _HitEffectArt_IsSet) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region ImageSpaceModifier
        private int _ImageSpaceModifierLocation => _DATALocation!.Value.Min + 0x28;
        private bool _ImageSpaceModifier_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IImageSpaceAdapterGetter> ImageSpaceModifier => _ImageSpaceModifier_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImageSpaceAdapterGetter>(_package, _recordData.Span.Slice(_ImageSpaceModifierLocation, 0x4), isSet: _ImageSpaceModifier_IsSet) : FormLink<IImageSpaceAdapterGetter>.Null;
        #endregion
        #region ImpactData
        private int _ImpactDataLocation => _DATALocation!.Value.Min + 0x2C;
        private bool _ImpactData_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> ImpactData => _ImpactData_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_ImpactDataLocation, 0x4), isSet: _ImpactData_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region CastingLight
        private int _CastingLightLocation => _DATALocation!.Value.Min + 0x30;
        private bool _CastingLight_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<ILightGetter> CastingLight => _CastingLight_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ILightGetter>(_package, _recordData.Span.Slice(_CastingLightLocation, 0x4), isSet: _CastingLight_IsSet) : FormLink<ILightGetter>.Null;
        #endregion
        #region PerkToApply
        private int _PerkToApplyLocation => _DATALocation!.Value.Min + 0x34;
        private bool _PerkToApply_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IPerkGetter> PerkToApply => _PerkToApply_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IPerkGetter>(_package, _recordData.Span.Slice(_PerkToApplyLocation, 0x4), isSet: _PerkToApply_IsSet) : FormLink<IPerkGetter>.Null;
        #endregion
        #region ActorValue2
        private int _ActorValue2Location => _DATALocation!.Value.Min + 0x38;
        private bool _ActorValue2_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IActorValueInformationGetter> ActorValue2 => _ActorValue2_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IActorValueInformationGetter>(_package, _recordData.Span.Slice(_ActorValue2Location, 0x4), isSet: _ActorValue2_IsSet) : FormLink<IActorValueInformationGetter>.Null;
        #endregion
        #region Projectile
        private int _ProjectileLocation => _DATALocation!.Value.Min + 0x3C;
        private bool _Projectile_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IProjectileGetter> Projectile => _Projectile_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IProjectileGetter>(_package, _recordData.Span.Slice(_ProjectileLocation, 0x4), isSet: _Projectile_IsSet) : FormLink<IProjectileGetter>.Null;
        #endregion
        #region ResistValue
        private int _ResistValueLocation => _DATALocation!.Value.Min + 0x40;
        private bool _ResistValue_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IActorValueInformationGetter> ResistValue => _ResistValue_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IActorValueInformationGetter>(_package, _recordData.Span.Slice(_ResistValueLocation, 0x4), isSet: _ResistValue_IsSet) : FormLink<IActorValueInformationGetter>.Null;
        #endregion
        #region ActorValue3
        private int _ActorValue3Location => _DATALocation!.Value.Min + 0x44;
        private bool _ActorValue3_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IActorValueInformationGetter> ActorValue3 => _ActorValue3_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IActorValueInformationGetter>(_package, _recordData.Span.Slice(_ActorValue3Location, 0x4), isSet: _ActorValue3_IsSet) : FormLink<IActorValueInformationGetter>.Null;
        #endregion
        #region UnknownFloat1
        private int _UnknownFloat1Location => _DATALocation!.Value.Min + 0x48;
        private bool _UnknownFloat1_IsSet => _DATALocation.HasValue;
        public Single UnknownFloat1 => _UnknownFloat1_IsSet ? _recordData.Slice(_UnknownFloat1Location, 4).Float() : default(Single);
        #endregion
        #region UnknownFloat2
        private int _UnknownFloat2Location => _DATALocation!.Value.Min + 0x4C;
        private bool _UnknownFloat2_IsSet => _DATALocation.HasValue;
        public Single UnknownFloat2 => _UnknownFloat2_IsSet ? _recordData.Slice(_UnknownFloat2Location, 4).Float() : default(Single);
        #endregion
        #region Archetype
        private int _ArchetypeLocation => _DATALocation!.Value.Min + 0x50;
        public partial IAMagicEffectArchetypeGetter GetArchetypeCustom();
        public IAMagicEffectArchetypeGetter Archetype => GetArchetypeCustom();
        #endregion
        #region UnknownFloat3
        private int _UnknownFloat3Location => _DATALocation!.Value.Min + 0x54;
        private bool _UnknownFloat3_IsSet => _DATALocation.HasValue;
        public Single UnknownFloat3 => _UnknownFloat3_IsSet ? _recordData.Slice(_UnknownFloat3Location, 4).Float() : default(Single);
        #endregion
        #region UnknownInt1
        private int _UnknownInt1Location => _DATALocation!.Value.Min + 0x58;
        private bool _UnknownInt1_IsSet => _DATALocation.HasValue;
        public UInt32 UnknownInt1 => _UnknownInt1_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_UnknownInt1Location, 4)) : default(UInt32);
        #endregion
        #region UnknownFloat4
        private int _UnknownFloat4Location => _DATALocation!.Value.Min + 0x5C;
        private bool _UnknownFloat4_IsSet => _DATALocation.HasValue;
        public Single UnknownFloat4 => _UnknownFloat4_IsSet ? _recordData.Slice(_UnknownFloat4Location, 4).Float() : default(Single);
        #endregion
        #region UnknownInt2
        private int _UnknownInt2Location => _DATALocation!.Value.Min + 0x60;
        private bool _UnknownInt2_IsSet => _DATALocation.HasValue;
        public UInt32 UnknownInt2 => _UnknownInt2_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_UnknownInt2Location, 4)) : default(UInt32);
        #endregion
        #region CastType
        private int _CastTypeLocation => _DATALocation!.Value.Min + 0x64;
        private bool _CastType_IsSet => _DATALocation.HasValue;
        public CastType CastType => _CastType_IsSet ? (CastType)_recordData.Span.Slice(_CastTypeLocation, 0x1)[0] : default;
        #endregion
        #region TargetType
        private int _TargetTypeLocation => _DATALocation!.Value.Min + 0x65;
        private bool _TargetType_IsSet => _DATALocation.HasValue;
        public TargetType TargetType => _TargetType_IsSet ? (TargetType)_recordData.Span.Slice(_TargetTypeLocation, 0x1)[0] : default;
        #endregion
        #region UnknownInt3
        private int _UnknownInt3Location => _DATALocation!.Value.Min + 0x66;
        private bool _UnknownInt3_IsSet => _DATALocation.HasValue;
        public UInt32 UnknownInt3 => _UnknownInt3_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_UnknownInt3Location, 4)) : default(UInt32);
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value.Min + 0x6A;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public MagicEffect.Flag Flags => _Flags_IsSet ? (MagicEffect.Flag)BinaryPrimitives.ReadInt64LittleEndian(_recordData.Span.Slice(_FlagsLocation, 0x8)) : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value.Min + 0x72;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public ReadOnlyMemorySlice<Byte> Unknown => _Unknown_IsSet ? _recordData.Span.Slice(_UnknownLocation, 22).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        #region Unknown2
        private int _Unknown2Location => _DATALocation!.Value.Min + 0x88;
        private bool _Unknown2_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(MagicEffect.DATADataType.Break0);
        public ReadOnlyMemorySlice<Byte> Unknown2 => _Unknown2_IsSet ? _recordData.Span.Slice(_Unknown2Location, 6).ToArray() : ReadOnlyMemorySlice<byte>.Empty;
        #endregion
        public IReadOnlyList<IMagicEffectSoundGetter> Sounds { get; private set; } = [];
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MagicEffectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IMagicEffectGetter MagicEffectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new MagicEffectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IMagicEffectGetter MagicEffectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return MagicEffectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)MagicEffect_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.BFCB:
                {
                    this.Components = this.ParseRepeatedTypelessSubrecord<IAComponentGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AComponent_Registration.TriggerSpecs,
                        factory: AComponentBinaryOverlay.AComponentFactory);
                    return (int)MagicEffect_FieldIndex.Components;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)MagicEffect_FieldIndex.Name;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)MagicEffect_FieldIndex.Keywords;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x88)
                    {
                        this.DATADataTypeState |= MagicEffect.DATADataType.Break0;
                    }
                    return (int)MagicEffect_FieldIndex.Unknown2;
                }
                case RecordTypeInts.ESSH:
                {
                    this.Sounds = BinaryOverlayList.FactoryByArray<IMagicEffectSoundGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => MagicEffectSoundBinaryOverlay.MagicEffectSoundFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: MagicEffectSound_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)MagicEffect_FieldIndex.Sounds;
                }
                case RecordTypeInts.DNAM:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)MagicEffect_FieldIndex.Description;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)MagicEffect_FieldIndex.Conditions;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MagicEffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<MagicEffect>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMagicEffectGetter rhs) return false;
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMagicEffectGetter? obj)
        {
            return ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MagicEffectCommon)((IMagicEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

